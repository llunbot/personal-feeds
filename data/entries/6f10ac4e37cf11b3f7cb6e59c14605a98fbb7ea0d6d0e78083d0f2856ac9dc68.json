{"title":"Scalable, Cost-Effective Disaster Recovery in the Cloud","link":"https://aws.amazon.com/blogs/aws/scalable-cost-effective-disaster-recovery-in-the-cloud/","date":1637181574000,"content":"<p>Should disaster strike, business continuity can require more than just periodic data backups. A full recovery that meets the business’s recovery time objectives (RTOs) must also include the infrastructure, operating systems, applications, and configurations used to process their data. The growing threats of ransomware highlight the need to be able to perform a full point-in-time recovery. For businesses affected by a ransomware attack, restoration of data from an old, possibly manual, backup will not be sufficient.</p> \n<p>Previously, businesses have elected to provision separate, physical disaster recovery (DR) infrastructure. However, customers tell us this can be both space- and cost-prohibitive, involving capital expenditure on hardware and facilities that remain idle until called upon. The infrastructure also incurs overhead in terms of regular inspection and maintenance, typically manual, to ensure that should it ever be called upon, it’s ready and able to handle the current business load, which may have grown considerably since initial provisioning. This also makes testing difficult and expensive.</p> \n<p>Today, I am happy to announce <a href=\"https://aws.amazon.com/disaster-recovery\">AWS Elastic Disaster Recovery</a> (<span>DRS</span>) a fully scalable, cost-effective disaster recovery service for physical, virtual, and cloud servers, based on CloudEndure Disaster Recovery. <span>DRS</span> enables customers to use <a href=\"https://aws.amazon.com/\">AWS</a> as an elastic recovery site without needing to invest in on-premises DR infrastructure that lies idle until needed. Once enabled, <span>DRS</span> maintains a constant replication posture for your operating systems, applications, and databases. This helps businesses meet recovery point objectives (RPOs) of seconds, and RTOs of minutes, after disaster strikes. In cases of ransomware attacks, for example, <span>DRS</span> also allows recovery to a previous point in time.</p> \n<p><span>DRS</span> provides for recovery that scales as needed to match your current setup and does not need any time-consuming manual processes to maintain that readiness. It also offers the ability to perform disaster recovery readiness drills. Just as it’s important to test restoration of data from backups, being able to conduct recovery drills in a cost-effective manner without impacting ongoing replication or user activities can help give confidence that you can meet your objectives and customer expectations should you need to call on a recovery.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/14/drs_homepage.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/14/drs_homepage.png\" /></a></p> \n<p><span><strong>Elastic Disaster Recovery in Action</strong></span><br /> Once enabled, <span>DRS</span> continuously replicates block storage volumes from physical, virtual, or cloud-based servers, allowing it to support business RPOs measured in seconds. Recovery includes applications running on physical infrastructure, VMware vSphere, Microsoft Hyper-V, and cloud infrastructure to AWS. You’re able to recover all your applications and databases that run on supported Windows and Linux operating systems, with DRS orchestrating the recovery process for your servers on <span>AWS</span> to support an RTO measured in minutes.</p> \n<p>Using an agent that you install on your servers, <span>DRS</span> securely replicates the data to a staging area subnet in a selected Region in your <span>AWS</span> account. The staging area subnet reduces costs to you, using affordable storage and minimal compute resources. Within the <span>DRS</span> console, you can recover <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instances in a different <span>AWS</span> Region if required. With <span>DRS</span> automating replication and recovery procedures, you can set up, test, and operate your disaster recovery capability using a single process without the need for specialized skill sets.</p> \n<p><span>DRS</span> gives you the flexibility to pay on an hourly basis, instead of needing to commit to a long-term contract or a set number of servers, a benefit over on-premises or data center recovery solutions. <span>DRS</span> charges hourly, on a pay-as-you-go basis. <a href=\"https://aws.amazon.com/disaster-recovery/pricing\" target=\"_blank\">You can find specific details on pricing at the product page</a>.</p> \n<p><span><strong>Exploring Elastic Disaster Recovery<br /> </strong></span>To set up disaster recovery for my resources I first need to configure my default replication settings. As I mentioned earlier, <span>DRS</span> can be used with physical, virtual, and cloud servers. For this post, I’m going to use a collection of <span>EC2</span> instances as my source servers for disaster recovery.</p> \n<p>From the <span>DRS</span> console home, shown earlier, choosing <strong>Set default replication settings</strong> takes me to a short initialization wizard. In the wizard, I first need to select an <a href=\"https://aws.amazon.com/vpc/\">Amazon Virtual Private Cloud (VPC)</a> subnet that will be used for staging. This subnet does not need to be in the same <span>VPC</span> as my resources, but I need to select one that is not private or blocked to the world. Below, I’ve chosen a subnet from my default <span>VPC</span> in my Region. I can also change the instance type used for the replication instance. I chose to keep the suggested default and clicked <strong>Next</strong> to proceed.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/14/drs_replication_settings_wizard_page1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/14/drs_replication_settings_wizard_page1-891x1024.png\" /></a></p> \n<p>I also left the default settings unchanged for the next two pages. In <strong>Volumes and security groups</strong>, the wizard suggests I use the general-purpose SSD (gp3) <a href=\"https://aws.amazon.com/ebs/\">Amazon Elastic Block Store (EBS)</a> storage type and to use a security group provided by <span>DRS</span>. On the <strong>Additional settings</strong> page I can elect to use a private IP for data replication instead of routing over the public internet, and set the snapshot retention period, which defaults to seven days. Clicking <strong>Next</strong> one final time, I arrive at the <strong>Review and create</strong> page of the wizard. Choosing <strong>Create default</strong> completes the process of configuring my default replication settings.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/14/drs_replication_settings_wizard_page4.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/14/drs_replication_settings_wizard_page4-904x1024.png\" /></a></p> \n<p>With my replication settings finalized (I can edit them later if I wish, from the <strong>Actions</strong> menu on the <strong>Source servers</strong> console page) it’s time to set up my servers. I’m running a test fleet in <span>EC2</span> that includes two Windows Server 2019 instances, and three <a href=\"https://aws.amazon.com/amazon-linux-2/\">Amazon Linux 2</a> instances. The <span>DRS</span> User Guide contains <a href=\"https://docs.aws.amazon.com/drs/latest/userguide/agent-installation.html\" target=\"_blank\">full instructions on how to obtain and set up the agent on each server type</a>, so I won’t repeat them here. As I run and configure the agent on each of my server instances, the Source servers list automatically updates to include the new source server. The status of the initial sync, and future replication and recovery status of each source server, are summarized in this view.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/14/drs_source_servers.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/14/drs_source_servers.png\" /></a></p> \n<p>Selecting a hostname entry in the list takes me to a detail page. Here I can view a recovery dashboard, information on the underlying server, disk settings (including the ability to change the staging disk type from the default gp3 type selected by the initialization wizard, or whatever you choose during setup), and launch settings, shown below, that govern the recovery instance that will be created if I choose to initiate a drill or an actual recovery job.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/14/drs_server_launch_settings.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/14/drs_server_launch_settings.png\" /></a></p> \n<p>Just like data backups, where established best practice is to periodically verify that the backups can actually be used to restore data, we recommend a similar best practice for disaster recovery. So, with my servers all configured and fully replicated, I decided to start a drill for a point-in-time (PIT) recovery for two of my servers. On these instances, following initial replication, I’d installed some additional software. In my scenario, perhaps this installation had gone badly wrong, or I’d fallen victim to a ransomware attack. Either way, I wanted to know and be confident that I could recover my servers if and when needed.</p> \n<p>In the <strong>Source servers</strong> list I selected the two servers that I’d modified and from the <strong>Initiate recovery job</strong> drop-down menu, chose <strong>Initiate drill</strong>. Next, I can choose the recovery PIT I’m interested in. This view defaults to <strong>Any</strong>, meaning it lists all recovery PIT snapshots for the servers I selected. Or, I can choose to filter to <strong>All</strong>, meaning only PIT snapshots that apply to all the selected servers will be listed. Selecting <strong>All</strong>, I chose a time just after I’d completed installing additional software on the instances, and clicked <strong>Initiate drill</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/drs_recovery_pit_selection.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/drs_recovery_pit_selection.png\" /></a></p> \n<p>I’m returned to the <strong>Source servers</strong> list, which shows status as the recovery proceeds. However, I switched to the <strong>Recovery job history</strong> view for more detail.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/14/drs_recovery_history.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/14/drs_recovery_history.png\" /></a></p> \n<p>Clicking the job ID, I can drill down further to view a detail page of the source servers involved in the recovery (and can drill down further for each), as well as an overall recovery job log.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/drs_recovery_log.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/drs_recovery_log.png\" /></a></p> \n<p>Note – during a drill, or an actual recovery, if you go to the <span>EC2</span> console you’ll notice one or more additional instances, started by <span>DRS</span>, running in your account (in addition to the replication server). These temporary instances, named <em><span>AWS Elastic Disaster Recovery</span> Conversion Server</em>, are used to process the PIT snapshots onto the actual recovery instance(s) and will be terminated when the job is complete.</p> \n<p>Once the recovery is complete, I can see two new instances in my <span>EC2</span> environment. These are in the state matching the point-in-time recovery I selected, and are using the instance types I selected earlier in the <span>DRS</span> initialization wizard. I can now connect to them to verify that the recovery drill performed as expected before terminating them. Had this been a real recovery, I would have the option of terminating the original instances to replace them with the recovery versions, or handle whatever other tasks are needed to complete the disaster recovery for my business.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/drs_recovered_instances.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/drs_recovered_instances.png\" /></a></p> \n<p><span><strong>Set Up Your Disaster Recovery Environment Today</strong></span><br /> <a href=\"https://aws.amazon.com/disaster-recovery\">AWS Elastic Disaster Recovery</a> is generally available now in the <span>US East (N. Virginia)</span>, <span>US East (Ohio)</span>, <span>US West (Oregon)</span>, <span>Asia Pacific (Singapore)</span>, <span>Asia Pacific (Sydney)</span>, <span>Asia Pacific (Tokyo)</span>, <span>Europe (Frankfurt)</span>, <span>Europe (Ireland)</span>, and <span>Europe (London)</span> Regions. <a href=\"https://docs.aws.amazon.com/drs/latest/userguide/\" target=\"_blank\">Review the <span>AWS Elastic Disaster Recovery</span> User Guide</a> for more details on setup and operation, and get started today with <span>DRS</span> to eliminate idle recovery site resources, enjoy pay-as-you-go billing, and simplify your deployments to improve your disaster recovery objectives.</p> \n<a href=\"https://twitter.com/bellevuesteve\">— Steve</a>","author":"Steve Roberts","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"6f10ac4e37cf11b3f7cb6e59c14605a98fbb7ea0d6d0e78083d0f2856ac9dc68","category":"Tech"}