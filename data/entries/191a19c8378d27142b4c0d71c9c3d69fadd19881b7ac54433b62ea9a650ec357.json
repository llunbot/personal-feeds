{"title":"Introducing Amazon Route 53 Application Recovery Controller","link":"https://aws.amazon.com/blogs/aws/amazon-route-53-application-recovery-controller/","date":1627422608000,"content":"<p>I am pleased to announce the availability today of <a href=\"https://aws.amazon.com/route53/application-recovery-controller/\">Amazon Route 53 Application Recovery Controller</a>, a <a href=\"https://aws.amazon.com/route53/\">Amazon Route 53</a> set of capabilities that continuously monitors an application’s ability to recover from failures and controls application recovery across multiple AWS Availability Zones, AWS Regions, and on premises environments to help you to build applications that must deliver very high availability.</p> \n<p>TL;DR to get started quickly, you can use an <a href=\"https://github.com/sebsto/tictactoe-cdk/tree/main/cloudformation\">Amazon CloudFormation template to automate the configuration of your Amazon Route53 Application Recovery Controller configuration</a>.</p> \n<p>At AWS, the security and availability of your data and workloads are our top priorities. From the very beginning, <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/\">AWS global infrastructure</a> allowed you to build application architectures that are resilient to different type of failures. When your business or application requires high availability, you typically use AWS global infrastructure to deploy redundant application replicas across AWS Availability Zones inside an AWS Region. Then, you use a Network or Application Load Balancer to route traffic to the appropriate replica. This architecture handles the requirements of the vast majority of workloads.</p> \n<p>However, some industries and workloads have higher requirements in terms of high availability: availability rate at or above 99.99% with recovery time objectives (RTO) measured in seconds or minutes. Think about how real-time payment processing or trading engines can affect entire economies if disrupted. To address these requirements, you typically deploy multiple replicas across a variety of AWS Availability Zones, AWS Regions, and on premises environments. Then, you use <span>Amazon Route 53</span> to reliably route end users to the appropriate replica.</p> \n<p><span>Amazon Route 53 Application Recovery Controller</span> helps you to build these applications requiring very high availability and low RTO, typically those using active-active architectures, but other type of redundant architectures might also benefit from <span>Amazon Route 53 Application Recovery Controller</span>. It is made of two parts: <strong>readiness check</strong> and <strong>routing control</strong>.</p> \n<p>Readiness checks continuously monitor AWS resource configurations, capacity, and network routing policies, and allow you to monitor for any changes that would affect the ability to execute a recovery operation. These checks ensure that the recovery environment is scaled and configured to take over when needed. They check the configuration of Auto Scaling groups, <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instances, <a href=\"https://aws.amazon.com/ebs/\">Amazon Elastic Block Store (EBS)</a> volumes, load balancers, <a href=\"https://aws.amazon.com/rds/\">Amazon Relational Database Service (RDS)</a> instances, <a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a> tables, and several others. For example, readiness check verifies AWS service limits to ensure enough capacity can be deployed in an AWS Region in case of failover. It also verifies capacity and scaling characteristics of application replicas are the same across AWS Region.</p> \n<p>Routing controls help to rebalance traffic across application replicas during failures, to ensure that the application stays available. Routing controls work with <span>Amazon Route 53</span> <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html\">health checks</a> to redirect traffic to an application replica, using DNS resolution. Routing controls improve traditional automated <span>Amazon Route 53</span> health check-based failovers in three ways:</p> \n<ul> \n <li>First, routing controls give you a way to failover the entire application stack based on application metrics or partial failures, such as a 5% increased error rate or a millisecond of increased latency.</li> \n <li>Second, routing controls give you safe and simple manual overrides. You can use them to shift traffic for maintenance purposes or to recover from failures when your monitors fail to detect an issue.</li> \n <li>Third, routing controls can use a capability called safety rules to prevent common side effects associated with fully automated health checks, such as preventing fail over to an unprepared replica, or <a href=\"https://en.wikipedia.org/wiki/Route_flapping\">flapping</a> issues.</li> \n</ul> \n<p>To help you understand how <span>Route 53 Application Recovery Controller</span> works, I’ll walk you through the process I used to configure my own high availability application.</p> \n<p><span><strong>How It Works</strong></span><br /> For demo purposes, I built an application made up of a load balancer, an Auto Scaling group with two <span>EC2</span> instances, and a global <a href=\"https://aws.amazon.com/dynamodb/\">DynamoDB</a> table.<a href=\"https://github.com/sebsto/tictactoe-cdk\"> I wrote a CDK script</a> to deploy the application in two AWS Regions: <span>US East (N. Virginia)</span> and <span>US West (Oregon)</span>. The global DynamoDB table ensures data is replicated across the two AWS Regions. This is an active-standby architecture, as I described earlier.</p> \n<p><a href=\"https://github.com/sebsto/tictactoe-dynamodb\">The application is a multi-player TicTacToe game</a>, an application that typically needs 99.99% availability or more :-). One DNS record (tictactoe.seb.go-aws.com) points to the load balancer in the <span>US East (N. Virginia)</span> region. The following diagram shows the architecture for this application:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/28/illustration.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/28/illustration-1024x666.png\" /></a></p> \n<p><span><strong>Preparing My Application<br /> </strong></span>To configure <span>Route 53 Application Recovery Controller</span> for my application, I first deployed independent replicas of my application stack so that I can fail over traffic across the stacks. These copies are deployed across AWS high-availability boundaries, such as Availability Zones, or AWS Regions. I chose to deploy my application replicas across multiple AWS Regions</p> \n<p>Then, I configured data replication across these independent replicas. I’m using DynamoDB <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html\">global tables</a> to help replicate my data.</p> \n<p>Lastly, I configured each independent stack to expose a DNS name. This DNS name is the entry point into my application, such as a regional load balancer DNS name.</p> \n<p><span><strong>Terminology<br /> </strong></span>Before I configure readiness check, <a href=\"https://docs.aws.amazon.com/r53recovery/latest/dg/introduction-components.html\">let me share some basic terminology</a>.</p> \n<p>A <strong>cell</strong> defines the silo that contains my application’s independent units of failover. It groups all AWS resources that are required for my application to operate independently. For my demo, I have two cells: one per AWS Region where my application is deployed. A cell is typically aligned with AWS high-availability boundaries, such as AWS Regions or Availability Zones, but it can be smaller too. It is possible to have multiple cells in one Availability Zone. This is an effective way to reduce blast radius, especially when you follow one-cell-at-a-time change management practices.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/28/cell.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/28/cell-300x190.png\" /></a></p> \n<p>A <strong>recovery group</strong> is a collection of cells that represent an application or group of applications that I want to check for failover readiness. A recovery group typically consists of two or more cells that mirror each other in terms of functionality.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/28/recovery-group.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/28/recovery-group-300x194.png\" /></a></p> \n<p>A <strong>resource set</strong> is a set of AWS resources that can span multiple cells. For this demo, I have three resource sets: one for the two load balancers in <code>us-east-1</code> and <code>us-west-2</code>, one for the two Auto Scaling groups in the two Regions, and one for the global DynamoDB table.</p> \n<p>A <strong>readiness check</strong> validates a set of AWS resources readiness to be failed over to. In this example, I want to audit readiness for my load balancers, Auto Scaling groups, and DynamoDB table. I create a readiness check for the Auto Scaling groups. The service constantly monitors the instance types and counts in the groups to make sure that each group is scaled equally. I repeat the process for the load balancer and the global DynamoDB table.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/28/resource-set.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/28/resource-set-300x192.png\" /></a></p> \n<p>To help determine recovery readiness for my application, <span>Route 53 Application Recovery Controller</span> continuously audits mismatches in capacity, AWS resource limits, and AWS throttle limits across application cells (Availability Zones or Regions). When <span>Route 53 Application Recovery Controller</span> detects a mismatch in limits, it raises an AWS Service Quota request for the resource across the cells. If <span>Route 53 Application Recovery Controller</span> detects a capacity mismatch in resources, I can take actions to align capacity across the cells. For example, I could trigger a scaling increase for my Auto Scaling groups.</p> \n<p><span><strong>Create a Readiness Check</strong></span><br /> To create a readiness check, I open the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a> and <a href=\"https://us-west-2.console.aws.amazon.com/route53recovery/home#/\">navigate to the Application Recovery Controller section under Route 53</a>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_21-23-25.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_21-23-25-1024x547.png\" /></a></p> \n<p>To create a recovery group for my application, I navigate to the <strong>Getting Started</strong> section, then I choose <strong>Create r</strong><strong>ecovery group</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_21-26-32.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_21-26-32-1024x355.png\" /></a></p> \n<p>I enter a name (for example AWSNewsBlogDemo) and then choose <strong>Next</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_21-28-59.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_21-28-59-1024x522.png\" /></a></p> \n<p>In <strong>Configure Architecture</strong>, I choose <strong>Add Cell</strong>, then I enter a cell name (<code>AWSNewsBlogDemo-RegionWEST</code>) and then choose <strong>Add Cell</strong> again to add a second cell. I enter <code>AWSNewsBlogDemo-RegionEAST</code> for the second cell. I choose <strong>Next</strong> to review my inputs, then I choose <strong>Create recovery group</strong>.</p> \n<p>I now need to associate resources such as my load balancers, Auto Scaling groups, and DynamoDB table with my recovery group.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_21-34-52.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_21-34-52-1024x349.png\" /></a></p> \n<p>In the left navigation pane, I choose <strong>Resource Set</strong> and then I choose <strong>Create</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_21-38-02.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_21-38-02-1024x636.png\" /></a></p> \n<p>I enter a name for my first resource set (for example, load_balancers). For <strong>Resource type</strong>, I choose <strong>Network Load Balancer or Application Load Balancer</strong> and I then choose <strong>Add</strong> to add the load balancer ARN.</p> \n<p>I choose <strong>Add</strong> again to enter the second load balancer ARN, and then I choose <strong>Create resource set</strong>.</p> \n<p>I repeat the process to create one resource set for the two Auto Scaling groups and a third resource set for the global DynamoDB table (one ARN). I now have three resource sets:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_21-41-49.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_21-41-49-1024x452.png\" /></a></p> \n<p>My last step is to create the readiness check. This will associate the resources with cells in the resource groups.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-11-14.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-11-14-1024x407.png\" /></a></p> \n<p>In<strong> Readiness check</strong>, I choose <strong>Create</strong> at the top right of the screen, then <strong>Readiness check</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-14-09.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-14-09-1024x415.png\" /></a></p> \n<p>Step 1 (<strong>Create readiness check</strong>), I enter a name (for example, load_balancers). For <strong>Resource Type,</strong> I choose <strong>Network Load Balancer or Application Load Balancer </strong>and then choose <strong>Next</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-15-33.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-15-33-1024x474.png\" /></a></p> \n<p>Step 2 (<strong>Add resource set</strong>), I keep the default selection <strong>Use an existing resource set</strong> and for <strong>Resource set name, </strong>I choose load_balancers and then I choose <strong>Next</strong>.</p> \n<p>Step 3 (<strong>Apply readiness rules</strong>), I review the rules and then choose <strong>Next.</strong></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-18-57.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-18-57-1024x545.png\" /></a></p> \n<p>Step 4 (<strong>Recovery Group Options</strong>), I keep the default selection <strong>Associate with an existing recovery group</strong>. For <strong>Recovery group name, </strong>I choose AWSNewsBlog. Then, I associate the two cells (EAST and WEST) with the two load balancers ARN. Be sure to associate the correct load balancer to each cell. The Region name is included in the ARN.</p> \n<p>Step 5 (<strong>Review and create</strong>), I review my choices and then choose <strong>Create readiness check</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/15/2021-07-07_22-33-04-1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/15/2021-07-07_22-33-04-1-1024x332.png\" /></a></p> \n<p>I repeat this process for the Auto Scaling group and the <a href=\"https://aws.amazon.com/dynamodb/\">DynamoDB</a> global table.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-35-17.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-35-17-1024x361.png\" /></a></p> \n<p>When all readiness checks in the group are green, the group has a status of Ready.</p> \n<p>Now, I can configure and test the routing controls.</p> \n<p><span><strong>Terminology</strong></span><br /> Before I configure routing controls, <a href=\"https://docs.aws.amazon.com/r53recovery/latest/dg/introduction-components.html\">let me share some basic terminology</a>.</p> \n<p>A <strong>cluster</strong> is a set of five redundant Regional endpoints against which you can execute API calls to update or get the state of routing controls. You can host multiple control panels and routing controls on one cluster.</p> \n<p>A <strong>routing control</strong> is a simple on/off switch, hosted on a cluster, that you use to control routing of client traffic in and out of cells. When you create a routing control, you add a health check in <a href=\"https://aws.amazon.com/route53/application-recovery-controller/\">Route 53</a> so that you can reroute traffic when you update the routing control in <span>Route 53 Application Recovery Controller</span>. The health checks must be associated with DNS failover records that front each application replica if you want to use them to route traffic with routing controls.</p> \n<p>A <strong>control panel</strong> groups together a set of related routing controls.</p> \n<p><span><strong>Configure Routing Controls<br /> </strong></span>I can use the <a href=\"https://aws.amazon.com/route53/application-recovery-controller/\">Route 53</a> console or API actions <span>to </span>create a routing control for each <span>AWS Region </span>f<span>or</span> my application. After I create routing controls, I create an <span>Amazon Route 53 Application Recovery Controller</span> health check for each one, and then associate each health check with a DNS failover record for my load balancers in each Region. Then, to fail over traffic between Regions, I change the routing control state for one routing control to off and another routing control state to on.</p> \n<p>The first step is to create a cluster. <strong>A cluster is charged $2.5 / hour</strong>. When you create a cluster to experience <span>Route 53 Application Recovery Controller</span>, be sure to delete the cluster after your experimentation.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-42-20.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-42-20-1024x456.png\" /></a></p> \n<p>In the left navigation pane, I navigate to the cluster panel and then I choose <strong>Create</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-44-41.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-44-41-1024x422.png\" /></a></p> \n<p>I enter a name for my cluster and then choose <strong>Create cluster</strong>.</p> \n<p>The cluster is in Pending state for a few minutes. After a while, its status changes to <strong>Deployed</strong>.</p> \n<p>After it’s deployed, I select the cluster name to discover the five redundant API endpoints. You must specify one of those endpoints when you build recovery tools to retrieve or set routing control states. You can use any of the cluster endpoints, but in complex or automated scenarios, we recommend that your systems be prepared to retry with each of the available endpoints, using a different endpoint with each retry request.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-46-23.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-46-23-1024x689.png\" /></a></p> \n<p>Traffic routing is managed through routing controls that are grouped in a control panel. You can create one or use the default one that is created for you.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-49-25.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-49-25-1024x383.png\" /></a></p> \n<p>I choose <strong>DefaultControlPanel</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-52-42.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-52-42-1024x559.png\" /></a></p> \n<p>I choose <strong>Add routing control</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-56-46.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_22-56-46-1024x806.png\" /></a></p> \n<p>I enter a name for my routing (FailToWEST) control and then choose <strong>Create routing control</strong>. I repeat the operation for the second routing control (FailToEAST).</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_23-09-45.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_23-09-45-1024x809.png\" /></a></p> \n<p>After the routing control is created, I choose it from the list. On the detail page, I choose <strong>Create health check</strong> to create a health check in Route 53.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/15/2021-07-07_23-12-08-1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/15/2021-07-07_23-12-08-1-1024x582.png\" /></a></p> \n<p>I enter a name for the health check and then choose <strong>Create</strong>. I navigate to the <a href=\"https://console.aws.amazon.com/route53/v2/home#Dashboard\">Route 53 console</a> to verify the health check was correctly created.</p> \n<p>I create one health check for each routing control.</p> \n<p>You might have noticed that the Control Panel provides a place where you can add Safety Rules. When you work with several routing controls at the same time, you might want some safeguards in place when you enable and disable them. These help you to avoid initiating a failover when a replica is not ready, or unintended consequences like turning both routing controls off and stopping all traffic flow. To create these safeguards, you create safety rules. For more information about safety rules, including usage examples, see the <a href=\"https://docs.aws.amazon.com/r53recovery/latest/dg/what-is-route53-recovery.html\">Route 53 Application Recovery Controller developer guide</a>.</p> \n<p>Now the routing controls and the DNS health check are in place, the last step is to route traffic to my application.</p> \n<p><span><strong>Adjust My DNS Settings<br /> </strong></span>To route traffic to my application. I assign a DNS alias to the top-level entry point of the application in the cell. For this example, using the Route 53 console, I create two ALIAS A records of type FAILOVER and associate each health check with each DNS record. The two records have the same record name. One is the primary record and the other is the secondary record. For more information about <span>Amazon Route 53</span> health checks, see the <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/route-53-concepts.html#route-53-concepts-health-checking\">Amazon Route 53 developer guide</a>.</p> \n<table> \n <tbody> \n  <tr> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_23-30-47.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_23-30-47-538x1024.png\" /></a></td> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_23-31-27.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/07/2021-07-07_23-31-27-530x1024.png\" /></a></td> \n  </tr> \n </tbody> \n</table> \n<p>On the application recovery routing controls page, I enable one of the two routing controls.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/25/2021-06-25_14-15-42.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/25/2021-06-25_14-15-42-1024x204.png\" /></a></p> \n<p>As soon as I do, all the traffic pointed to <code>tictactoe.seb.go-aws.com</code> goes to the infrastructure deployed on <code>us-east-1</code>.</p> \n<p><span><strong>Testing My Setup<br /> </strong></span>To test my setup, I first use the <code>dig</code> command in a terminal. It shows the DNS CNAME record that points to the load balancer deployed in <code>us-east-1</code>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/25/2021-06-25_14-19-03.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/25/2021-06-25_14-19-03-1024x602.png\" /></a></p> \n<p>I also test the application with a web browser. I observe the name <code>tictactoe.seb.go-aws.com</code> goes to <code>us-east-1</code>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/01/2021-07-01_08-13-21.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/07/01/2021-07-01_08-13-21-1024x264.png\" /></a></p> \n<p>Now, using the <code>update-routing-control-state</code> API action, the CLI, or the console, I turn off the routing control to the <code>us-east-1</code> Region and turn on the one to the <code>us-west-2</code> Region. When I use the CLI, I use the endpoints provided by my cluster.</p> \n<pre><code>aws route53-recovery-cluster update-routing-control-state \\\n     --routing-control-arn arn:aws:route53-recovery-control::012345678:controlpanel/xxx/routingcontrol/abcd \\\n     --routing-control-state On \\\n     --region us-west-2 \\\n     --endpoint-url https://host-xxx.us-west-2.cluster.routing-control.amazonaws.com/v1</code></pre> \n<p>In the console, I navigate to the control panel, I select the routing control I want to change and click <strong>Change routing control states</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/25/2021-06-25_14-35-43.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/25/2021-06-25_14-35-43-1024x200.png\" /></a></p> \n<p>After less than a minute, the DNS address is updated. My application traffic is now routed to the <code>us-west-2</code> Region.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/25/2021-06-25_14-30-04.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/25/2021-06-25_14-30-04-1024x598.png\" /></a></p> \n<p>Readiness checks and routing controls provide a controlled failover for my application traffic, redirecting traffic from my active replica to my standby one, in another AWS Region. I can change the traffic routing manually, as I showed in the demo, or I can automate it using <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> alarms based on technical and business metrics for my application.</p> \n<p><strong><span>Add Routing Controls to Existing Applications<br /> </span></strong>You can add <span>Amazon Route 53</span> routing controls in your <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> stack sets or other infrastructure-provisioning solution, and control application recovery. <a href=\"https://github.com/sebsto/tictactoe-cdk/tree/main/cloudformation\">This set of CloudFormation templates</a> shows <a href=\"https://github.com/sebsto/tictactoe-cdk/blob/main/cloudformation/Route53-ARC-readiness-check.yaml\">how to create a readiness check</a>, <a href=\"https://github.com/sebsto/tictactoe-cdk/blob/main/cloudformation/Route53-ARC-routing-control.yaml\">how to create routing control</a>, <a href=\"https://github.com/sebsto/tictactoe-cdk/blob/main/cloudformation/Route53-ARC-routing-control.yaml#L98\">how to create health checks</a>, and <a href=\"https://github.com/sebsto/tictactoe-cdk/blob/main/cloudformation/Route53-DNS-records.yaml\">how to integrate these in your Route 53 DNS records</a>.</p> \n<p><b><u>Pricing<br /> </u></b>This new capability is charged on demand. There are no upfront costs. You are charged per readiness check and per cluster per hour. Readiness checks are charged $0.045 / hour. Cluster are charged $2.5 / hour. In the demo example used for this blog post, there are three readiness checks and one cluster. The price per hour for this setup, excluding the application itself, is 3 x $0.045 + 1 x $2.5 = $2.635 / hour. For more details about the pricing, including an example, see <a href=\"https://aws.amazon.com/route53/pricing/\">the Route 53 pricing page</a>.</p> \n<p>This new capability is a global service that can be used to monitor and control application recovery for application running in any of the public commercial AWS Regions. <a href=\"https://console.aws.amazon.com/route53/v2/home#Dashboard\">Give it a try</a> and let us know what you think. As always, you can send feedback through your usual AWS Support contacts or post it on <a href=\"https://forums.aws.amazon.com/forum.jspa?forumID=400\">the AWS forum for Route 53 Application Recovery Controller</a>.</p> \n<a href=\"https://twitter.com/sebsto\">-- seb</a> \n<p>PS: If you use my CDK script to experiment this new capability, type <code>cdk destroy --all</code> to delete the tic-tac-toe application infrastructure when you no longer need it. The <a href=\"https://calculator.aws/#/estimate?id=63d3676c4feb180e63a8d04f40f0164e21e9c9f7\">demo infrastructure costs</a> ~$2.00 per day for the two load balancers and the four EC2 instances. Also, the routing control itself is hosted on an Application Recovery Controller cluster. The cluster costs $2.5 per hour. Using the console, manually delete the cluster and the readiness checks when no longer needed.</p>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"191a19c8378d27142b4c0d71c9c3d69fadd19881b7ac54433b62ea9a650ec357","category":"Tech"}