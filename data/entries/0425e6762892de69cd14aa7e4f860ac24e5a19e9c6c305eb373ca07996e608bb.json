{"title":"How CyberCRX cut ML processing time from 8 days to 56 minutes with AWS Step Functions Distributed Map","link":"https://aws.amazon.com/blogs/aws/how-cybercrx-cut-ml-processing-time-from-8-days-to-56-minutes-with-aws-step-functions-distributed-map/","date":1682622736000,"content":"<p>Last December, <a href=\"https://aws.amazon.com/blogs/aws/step-functions-distributed-map-a-serverless-solution-for-large-scale-parallel-data-processing/\" target=\"_blank\">Sébastien Stormacq wrote about the availability of a distributed map state for</a> <a href=\"https://aws.amazon.com/step-functions\">AWS Step Functions</a>, a new feature that allows you to orchestrate large-scale parallel workloads in the cloud. That’s when Charles Burton, a data systems engineer for a company called <a href=\"https://www.cybergrx.com/?trk=f417403c-22fd-4bb8-b22f-ba3874b4fb9f&amp;sc_channel=el\">CyberGRX</a>, found out about it and refactored his workflow, reducing the processing time for his machine learning (ML) processing job from 8 days to 56 minutes. Before, running the job required an engineer to constantly monitor it; now, it runs in less than an hour with no support needed. In addition, the new implementation with AWS Step Functions Distributed Map costs less than what it did originally.</p> \n<p>What CyberGRX achieved with this solution is a perfect example of what serverless technologies embrace: letting the cloud do as much of the undifferentiated heavy lifting as possible so the engineers and data scientists have more time to focus on what’s important for the business. In this case, that means continuing to improve the model and the processes for one of the key offerings from CyberGRX, a cyber risk assessment of third parties using ML insights from its large and growing database.</p> \n<p><strong><span>What’s the business challenge?<br /> </span></strong>CyberGRX shares third-party cyber risk (TPCRM) data with their customers. They predict, with high confidence, how a third-party company will respond to a risk assessment questionnaire. To do this, they have to run their predictive model on every company in their platform; they currently have predictive data on more than 225,000 companies. Whenever there’s a new company or the data changes for a company, they regenerate their predictive model by processing their entire dataset. Over time, CyberGRX data scientists improve the model or add new features to it, which also requires the model to be regenerated.</p> \n<p>The challenge is running this job for 225,000 companies in a timely manner, with as few hands-on resources as possible. The job runs a set of operations for each company, and every company calculation is independent of other companies. This means that in the ideal case, every company can be processed at the same time. However, implementing such a massive parallelization is a challenging problem to solve.</p> \n<p><span><strong>First iteration<br /> </strong></span>With that in mind, the company built their first iteration of the pipeline using Kubernetes and <a href=\"https://argoproj.github.io/argo-workflows/\" target=\"_blank\">Argo Workflows</a>, an open-source container-native workflow engine for orchestrating parallel jobs on Kubernetes. These were tools they were familiar with, as they were already using them in their infrastructure.</p> \n<p>But as soon as they tried to run the job for all the companies on the platform, they ran up against the limits of what their system could handle efficiently. Because the solution depended on a centralized controller, Argo Workflows, it was not robust, and the controller was scaled to its maximum capacity during this time. At that time, they only had 150,000 companies. And running the job with all of the companies took around 8 days, during which the system would crash and need to be restarted. It was very labor intensive, and it always required an engineer on call to monitor and troubleshoot the job.</p> \n<p>The tipping point came when Charles joined the Analytics team at the beginning of 2022. One of his first tasks was to do a full model run on approximately 170,000 companies at that time. The model run lasted the whole week and ended at 2:00 AM on a Sunday. That’s when he decided their system needed to evolve.</p> \n<p><span><strong>Second iteration<br /> </strong></span>With the pain of the last time he ran the model fresh in his mind, Charles thought through how he could rewrite the workflow. His first thought was to use <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> and <a href=\"https://aws.amazon.com/sqs/\">SQS</a>, but he realized that he needed an orchestrator in that solution. That’s why he chose Step Functions, a serverless service that helps you automate processes, orchestrate microservices, and create data and ML pipelines; plus, it scales as needed.</p> \n<p>Charles got the new version of the workflow with Step Functions working in about 2 weeks. The first step he took was adapting his existing Docker image to run in Lambda <a href=\"https://aws.amazon.com/blogs/aws/new-for-aws-lambda-container-image-support/\" target=\"_blank\">using Lambda’s container image packaging format</a>. Because the container already worked for his data processing tasks, this update was simple. He scheduled <a href=\"https://aws.amazon.com/blogs/aws/new-provisioned-concurrency-for-lambda-functions/\" target=\"_blank\">Lambda provisioned concurrency</a> to make sure that all functions he needed were ready when he started the job. He also configured <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html\" target=\"_blank\">reserved concurrency</a> to make sure that Lambda would be able to handle this maximum number of concurrent executions at a time. In order to support so many functions executing at the same time, <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html\" target=\"_blank\">he raised the concurrent execution quota for Lambda per account</a>.</p> \n<p>And to make sure that the steps were run in parallel, he used Step Functions and the <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-map-state.html\" target=\"_blank\">map state</a>. The map state allowed Charles to run a set of workflow steps for each item in a dataset. The iterations run in parallel. Because Step Functions map state offers 40 concurrent executions and CyberGRX needed more parallelization, they created a solution that launched multiple state machines in parallel; in this way, they were able to iterate fast across all the companies. Creating this complex solution, required a preprocessor that handled the heuristics of the concurrency of the system and split the input data across multiple state machines.</p> \n<p>This second iteration was already better than the first one, as now it was able to finish the execution with no problems, and it could iterate over 200,000 companies in 90 minutes. However, the preprocessor was a very complex part of the system, and it was hitting the limits of the Lambda and Step Functions APIs due to the amount of parallelization.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/05/Slide2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/05/Slide2-1024x581.png\" alt=\"Second iteration with AWS Step Functions \" width=\"1024\" height=\"581\" /></a></p> \n<p><span><strong>Third and final iteration</strong></span><br /> Then, during <a href=\"https://reinvent.awsevents.com/\" target=\"_blank\">AWS re:Invent</a> 2022, AWS announced a <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/concepts-asl-use-map-state-distributed.html\" target=\"_blank\">distributed map</a> for Step Functions, a new type of map state that allows you to write Step Functions to coordinate large-scale parallel workloads. Using this new feature, you can easily iterate over millions of objects stored in <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>, and then the distributed map can launch up to 10,000 parallel sub-workflows to process the data.</p> \n<p>When Charles read in the News Blog article about the 10,000 parallel workflow executions, he immediately thought about trying this new state. In a couple of weeks, Charles built the new iteration of the workflow.</p> \n<p>Because the distributed map state split the input into different processors and handled the concurrency of the different executions, Charles was able to drop the complex preprocessor code.</p> \n<p>The new process was the simplest that it’s ever been; now whenever they want to run the job, they just upload a file to Amazon S3 with the input data. This action triggers an <a href=\"https://aws.amazon.com/eventbridge\">Amazon EventBridge</a> rule that targets the state machine with the distributed map. The state machine then executes with that file as an input and publishes the results to an <a href=\"https://aws.amazon.com/sns/\">Amazon Simple Notification Service (Amazon SNS)</a> topic.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/05/Slide1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/05/Slide1-1024x581.png\" alt=\"Final iteration with AWS Step Functions \" width=\"1024\" height=\"581\" /></a></p> \n<p><span><strong>What was the impact?<br /> </strong></span>A few weeks after completing the third iteration, they had to run the job on all 227,000 companies in their platform. When the job finished, Charles’ team was blown away; the whole process took only 56 minutes to complete. They estimated that during those 56 minutes, the job ran more than 57 billion calculations.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/05/processing-map.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/05/processing-map-1024x210.png\" alt=\"Processing of the Distributed Map State\" width=\"1024\" height=\"210\" /></a></p> \n<p>The following image shows an <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> graph of the concurrent executions for one Lambda function during the time that the workflow was running. There are almost 10,000 functions running in parallel during this time.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/05/lambda-concurrency.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/05/lambda-concurrency-1024x140.png\" alt=\"Lambda concurrency CloudWatch graph\" width=\"1024\" height=\"140\" /></a></p> \n<p>Simplifying and shortening the time to run the job opens a lot of possibilities for CyberGRX and the data science team. The benefits started right away the moment one of the data scientists wanted to run the job to test some improvements they had made for the model. They were able to run it independently without requiring an engineer to help them.</p> \n<p>And, because the predictive model itself is one of the key offerings from CyberGRX, the company now has a more competitive product since the predictive analysis can be refined on a daily basis.</p> \n<p><strong>Learn more about using AWS Step Functions:</strong></p> \n<ul> \n <li><a href=\"https://aws.amazon.com/step-functions/?trk=bec29572-90ee-41df-8992-47df28c9434e&amp;sc_channel=el\">Overview</a></li> \n <li><a href=\"https://aws.amazon.com/step-functions/features/?trk=468bdd89-d16a-4658-957f-aed95fe5038a&amp;sc_channel=el\">Features</a></li> \n <li><a href=\"https://aws.amazon.com/step-functions/pricing/?trk=a36fee27-7b29-4468-8024-8264a5dab74d&amp;sc_channel=el\">Pricing</a></li> \n</ul> \n<p>You can also check the <a href=\"https://serverlessland.com/workflows\">Serverless Workflows Collection that we have available in Serverless Land</a> for you to test and learn more about this new capability.</p> \n<p>— <a href=\"https://twitter.com/mavi888uy\" target=\"_blank\">Marcia</a></p>","author":"Marcia Villalba","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"0425e6762892de69cd14aa7e4f860ac24e5a19e9c6c305eb373ca07996e608bb","category":"Tech"}