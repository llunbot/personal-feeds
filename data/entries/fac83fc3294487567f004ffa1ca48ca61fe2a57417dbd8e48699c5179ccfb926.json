{"title":"Use Vault to manage API tokens for the Terraform Cloud Operator","link":"https://www.hashicorp.com/blog/use-vault-to-manage-api-tokens-for-the-terraform-cloud-operator","date":1712073600000,"content":"<p>The HashiCorp <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/integrations/kubernetes\">Terraform Cloud Operator for Kubernetes</a> continuously reconciles infrastructure resources using Terraform Cloud. When you use the operator to create a Terraform Cloud <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/integrations/kubernetes/api-reference#workspace\">workspace</a>, you must reference a Terraform Cloud API token stored in a Kubernetes secret. One way to better secure these secrets instead of hard-coding them involves storing and managing secrets in a centralized secrets manager, like HashiCorp Vault. In this approach, you need to synchronize secrets revoked and created by Vault into Kubernetes. An operator like the <a href=\"https://developer.hashicorp.com/vault/tutorials/kubernetes/vault-secrets-operator\">Vault Secrets Operator (VSO)</a> can retrieve secrets from an external secrets manager and store them in a Kubernetes secret for workloads to use.</p>\n\n<p>This post demonstrates how to use the Vault Secrets Operator (VSO) to retrieve dynamic secrets from Vault and write them to a Kubernetes secret for the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/integrations/kubernetes\">Terraform Cloud Operator</a> to reference when creating a workspace. While the example focuses on Terraform Cloud API tokens, you can extend this workflow to any Kubernetes workload or custom resource that requires a secret from Vault.</p>\n<img src=\"https://www.datocms-assets.com/2885/1711751340-vso_tfc_workflow.png\" alt=\"Synchronize\" /><h2>Install Vault and operators</h2>\n\n<p>The Terraform Cloud Operator requires a <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/users-teams-organizations/api-tokens#access-levels\">user or team API token</a> with permissions to manage workspaces, <code>plan</code> and <code>apply</code> runs, and upload configurations. While you can manually generate a token in the Terraform Cloud UI, configure Vault to issue API tokens for Terraform Cloud. The <a href=\"https://developer.hashicorp.com/vault/tutorials/secrets-management/terraform-secrets-engine\">Terraform Cloud secrets engine for Vault</a> handles the issuance and revocation of different kinds of API tokens in Terraform Cloud. Vault manages the token’s lifecycle and audits its usage and distribution once you reference it in the Terraform Cloud Operator.</p>\n\n<p>The <a href=\"https://github.com/joatmon08/hashicorp-stack-demoapp\">demo repository</a> for this post sets up the required infrastructure resources, including a:</p>\n\n<ul>\n<li>Vault cluster on HCP Vault</li>\n<li>Kubernetes cluster on AWS</li>\n</ul>\n\n<p>After provisioning infrastructure resources, the demo repo installs Helm charts for <a href=\"https://github.com/joatmon08/hashicorp-stack-demoapp/blob/main/vault/setup/helm.tf#L19\">Vault</a>, <a href=\"https://github.com/joatmon08/hashicorp-stack-demoapp/blob/main/argocd/setup/helm.tf#L14\">Terraform Cloud Operator</a>, and <a href=\"https://github.com/joatmon08/hashicorp-stack-demoapp/blob/main/vault/setup/helm.tf#L45\">Vault Secrets Operator</a> in their own namespaces using Terraform. If you do not use Terraform, install each Helm chart by CLI. </p>\n\n<p>First, install the Vault Helm chart. If applicable, update the values to reference an external Vault cluster:</p>\n<pre><code>$ helm repo add hashicorp https://helm.releases.hashicorp.com\n\n$ helm install vault hashicorp/vault</code></pre><p>Install the Helm chart for the Terraform Cloud Operator with its default values:</p>\n<pre><code>$ helm install terraform-cloud-operator hashicorp/terraform-cloud-operator</code></pre><p>Install the Helm chart for VSO with a default Vault connection to your Vault cluster:</p>\n<pre><code>$ helm install vault-secrets-operator hashicorp/vault-secrets-operator \\\n  --set defaultVaultConnection.enabled=true \\\n  --set defaultVaultConnection.address=$VAULT_ADDR</code></pre><p>Any custom resources created by VSO will use the default Vault connection. If you have different Vault clusters, you can define a <a href=\"https://developer.hashicorp.com/vault/docs/platform/k8s/vso/api-reference#vaultconnection\"><code>VaultConnection</code></a> custom resource and reference it in upstream dependencies.</p>\n\n<p>After installing Vault and the operators, configure the <a href=\"https://developer.hashicorp.com/vault/docs/auth/kubernetes\">Kubernetes authentication method</a> in Vault. This ensures VSO can use Kubernetes service accounts to authenticate to Vault.</p>\n\n<h2>Set up secrets in Vault</h2>\n\n<p>After installing a Vault cluster and operators into Kubernetes, set up the secrets engines for your Kubernetes application. The Terraform Cloud Operator needs a <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/users-teams-organizations/api-tokens#api-tokens\">Terraform Cloud API token</a> with permissions to create projects and workspaces and upload Terraform configuration. On the Terraform Cloud Free tier, you can generate a user token with administrative permissions or a <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/users-teams-organizations/api-tokens#team-api-tokens\">team token for the “owners” team</a> to create workspaces and apply runs.</p>\n\n<p>To further secure the operator’s access to Terraform Cloud, upgrade to a plan that supports teams to secure the Terraform Cloud Operator’s access to Terraform Cloud. Then, create a team, associate a team token with it, and <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/users-teams-organizations/permissions#project-permissions\">scope the token’s access to a Terraform Cloud project</a>. This ensures that the Terraform Cloud Operator has sufficient access to create workspaces and upload configuration in a given project without giving it access to an entire organization.</p>\n\n<p>Configure the <a href=\"https://developer.hashicorp.com/vault/tutorials/secrets-management/terraform-secrets-engine\">Terraform Cloud secrets engine for Vault</a> to handle the lifecycle of the Terraform Cloud team API token. The demo repo uses Terraform to enable the backend. Pass in an organization or user token with permissions to create other API tokens.</p>\n<pre><code>resource \"vault_terraform_cloud_secret_backend\" \"apps\" {\n  backend     = \"terraform\"\n  description = \"Manages the Terraform Cloud backend\"\n  token       = var.terraform_cloud_root_token\n}</code></pre><p>Create a role for each Terraform Cloud team that needs to use the Terraform Cloud Operator. Then pass the team ID to the role to configure the secrets engine to generate team tokens:</p>\n<pre><code>resource \"vault_terraform_cloud_secret_role\" \"apps\" {\n  backend      = vault_terraform_cloud_secret_backend.apps.backend\n  name         = \"payments-app\"\n  organization = var.terraform_cloud_organization\n  team_id      = \"team-*******\"\n}</code></pre><p>Build a Vault policy that allows read access to the secrets engine credentials endpoint and role:</p>\n<pre><code>resource \"vault_policy\" \"terraform_cloud_secrets_engine\" {\n  name     = \"terraform_cloud-secrets-engine-payments-app\"\n\n  policy = &lt;</code></pre><p>The Terraform Cloud Operator needs the Terraform Cloud team token to create workspaces, upload configurations, and start runs. However, you may also want to pass secrets to workspace variables. For example, a Terraform module may need a username and password to configure <a href=\"https://developer.hashicorp.com/hcp/docs/boundary\">HCP Boundary</a>. You can store the credentials in Vault’s <a href=\"https://developer.hashicorp.com/vault/docs/secrets/kv\">key-value secrets engine</a> and configure a Vault policy to read the static secrets.</p>\n\n<p>After setting up policies to read the required secrets, create a Vault role for the Kubernetes authentication method, which allows the <code>terraform-cloud</code> service account to authenticate to Vault and retrieve the Terraform Cloud token:</p>\n<pre><code>resource \"vault_kubernetes_auth_backend_role\" \"terraform_cloud_token\" {\n backend                          = \"kubernetes\"\n role_name                        = \"payments-app\"\n bound_service_account_names      = [\"terraform-cloud\"]\n bound_service_account_namespaces = [\"payments-app\"]\n token_ttl                        = 86400\n token_policies = [\n   vault_policy.terraform_cloud_secrets_engine.name,\n ]\n}</code></pre><p>Refer to the complete repo to configure the <a href=\"https://github.com/joatmon08/hashicorp-stack-demoapp/blob/main/application/terraform/tfc_operator_token.tf\">Terraform Cloud secrets engine</a> and store <a href=\"https://github.com/joatmon08/hashicorp-stack-demoapp/blob/main/application/terraform/tfc_operator_vars.tf#L68\">static secrets</a> for the Terraform Cloud workspace variables.</p>\n\n<h2>Sync secrets from Vault to Kubernetes</h2>\n\n<p>The Terraform Cloud Operator includes a <a href=\"https://github.com/hashicorp/terraform-cloud-operator/blob/main/docs/api-reference.md#workspacespec\">custom resource</a> to create workspaces and define workspace variables. However, dynamic variables refer to values stored in a Kubernetes <code>Secret</code> or <code>ConfigMap</code>. Use VSO to synchronize secrets from Vault into native Kubernetes secrets. The demo repo for this post retrieves the Terraform Cloud team token and static credentials and stores them as a Kubernetes secret.</p>\n\n<p>VSO uses a Kubernetes service account linked to the Kubernetes authentication method role in Vault. First, deploy a service account and service account token for <code>terraform-cloud</code> to the <code>payments-app</code> namespace:</p>\n<pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n name: terraform-cloud\n namespace: payments-app\n---\napiVersion: v1\nkind: Secret\nmetadata:\n name: terraform-cloud-token\n namespace: payments-app\ntype: kubernetes.io/service-account-token</code></pre><p>Then, configure a <a href=\"https://developer.hashicorp.com/vault/docs/platform/k8s/vso/api-reference#vaultauth\"><code>VaultAuth</code></a> resource for VSO to use the <code>terraform-cloud</code> service account and authenticate to Vault using the <code>kubernetes</code> mount path and <code>payments-app</code> role defined for the authentication method. The configuration shown here sets Vault namespace to <code>admin</code> for your HCP Vault cluster:</p>\n<pre><code>apiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n name: terraform-cloud\n namespace: payments-app\nspec:\n method: kubernetes\n mount: kubernetes\n namespace: admin\n kubernetes:\n   role: payments-app\n   serviceAccount: terraform-cloud\n   audiences:\n     - vault</code></pre><p>To sync the Terraform Cloud team token required by the Terraform Cloud Operator to a Kubernetes secret, define a <a href=\"https://developer.hashicorp.com/vault/docs/platform/k8s/vso/api-reference#vaultdynamicsecret\"><code>VaultDynamicSecret</code></a> resource to retrieve the credentials. VSO uses this resource to retrieve credentials from the <code>terraform/creds/payments-app</code> path in Vault and creates a Kubernetes secret named <code>terraform-cloud-team-token</code> with the token value. The resource refers to <code>VaultAuth</code> for authentication to Vault:</p>\n<pre><code>apiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultDynamicSecret\nmetadata:\n name: terraform-cloud-team-token\n namespace: payments-app\nspec:\n mount: terraform\n path: creds/payments-app\n destination:\n   create: true\n   name: terraform-cloud-team-token\n   type: Opaque\n vaultAuthRef: terraform-cloud</code></pre><p>When you apply these manifests to your Kubernetes cluster, VSO retrieves the Terraform Cloud team token and stores it in a Kubernetes secret. The Operator’s logs indicate the handling of the <code>VaultAuth</code> resource and synchronization of the <code>VaultDynamicSecret:</code></p>\n<pre><code>$ kubectl logs -n vault-secrets-operator $(kubectl get pods \\\n   -n vault-secrets-operator \\\n   -l app.kubernetes.io/instance=vault-secrets-operator -o name)\n\n2024-03-14T16:38:47Z    DEBUG   events  Successfully handled VaultAuth resource request {\"type\": \"Normal\", \"object\": {\"kind\":\"VaultAuth\",\"namespace\":\"payments-app\",\"name\":\"terraform-cloud\",\"uid\":\"e7c0464e-9ce8-4f3f-953a-f8eb10853001\",\"apiVersion\":\"secrets.hashicorp.com/v1beta1\",\"resourceVersion\":\"331817\"}, \"reason\": \"Accepted\"}\n\n2024-03-14T16:38:47Z    DEBUG   events  Secret synced, lease_id=\"\", horizon=0s  {\"type\": \"Normal\", \"object\": {\"kind\":\"VaultDynamicSecret\",\"namespace\":\"payments-app\",\"name\":\"terraform-cloud-team-token\",\"uid\":\"d1563879-41ee-4817-a00b-51fe6cff7e6e\",\"apiVersion\":\"secrets.hashicorp.com/v1beta1\",\"resourceVersion\":\"331826\"}, \"reason\": \"SecretSynced\"}</code></pre><p>Verify that the Kubernetes secret <code>terraform-cloud-team-token</code> contains the Terraform Cloud team token:</p>\n<pre><code>$ kubectl get secrets -n payments-app \\\n  terraform-cloud-team-token -o jsonpath='{.data.token}' | base64 -d\n\n******.****.*****</code></pre><h2>Create a Terraform Cloud workspace using secrets</h2>\n\n<p>You can now configure other Kubernetes resources to reference the secret synchronized by VSO. For the Terraform Cloud Operator, deploy a <code><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/integrations/kubernetes/api-reference#workspace\">Workspace</a></code> resource that references the Kubernetes secret with the team token:</p>\n<pre><code>apiVersion: app.terraform.io/v1alpha2\nkind: Workspace\nmetadata:\n name: payments-app-database\n namespace: payments-app\nspec:\n organization: hashicorp-stack-demoapp\n project:\n   name: payments-app\n token:\n   secretKeyRef:\n     name: terraform-cloud-team-token\n     key: token\n name: payments-app-database\n \n## workspace variables omitted for clarity</code></pre><p>The team token has administrator access to create and update workspaces in the “payments-app” project in Terraform Cloud. You can use a similar approach to passing Kubernetes secrets as workspace variables. </p>\n\n<p>Deploy a <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/integrations/kubernetes/api-reference#module\"><code>Module</code></a> resource to apply a Terraform configuration in a workspace. The resource references a module source, variables to pass to the module, and outputs to extract. The Terraform Cloud Operator uploads a Terraform configuration to the workspace defining the module.</p>\n<pre><code>apiVersion: app.terraform.io/v1alpha2\nkind: Module\nmetadata:\n name: database\n namespace: payments-app\nspec:\n organization: hashicorp-stack-demoapp\n token:\n   secretKeyRef:\n     name: terraform-cloud-team-token\n     key: token\n destroyOnDeletion: true\n module:\n   source:  \"joatmon08/postgres/aws\"\n   version: \"14.9.0\"\n\n## module variables omitted for clarity</code></pre><p>Terraform Cloud will start a run to apply the configuration in the workspace.</p>\n<img src=\"https://www.datocms-assets.com/2885/1711752855-tfc_operator_workspace.png\" alt=\"Terraform\" /><h2>Rotate the team API token</h2>\n\n<p>Terraform Cloud allows only one active team token at a time. As a result, the Terraform Cloud secrets engine does not assign leases to team tokens and requires manual rotation. However, Terraform Cloud does allow issuance of multiple user tokens. The secrets engine assigns leases to user API tokens and will rotate them dynamically.</p>\n\n<p>To rotate a team token, run a Vault command to <a href=\"https://developer.hashicorp.com/vault/docs/secrets/terraform#organization-and-team-roles\">rotate the role</a> for a team token in Terraform Cloud:</p>\n<pre><code>$ vault write -f terraform/rotate-role/payments-app</code></pre><p>VSO must update the Kubernetes secret with the new token when the team token is rotated. Edit a field in the <code>VaultDynamicSecret</code> resource, such as <code>renewalPercent</code>, to force VSO to resynchronize:</p>\n<pre><code>$ kubectl edit VaultDynamicSecret terraform-cloud-team-token -n payments-app \n\n# Please edit the object below. Lines beginning with a '#' will be ignored,\n# and an empty file will abort the edit. If an error occurs while saving this file will be\n# reopened with the relevant failures.\n#\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultDynamicSecret\nmetadata:\n  annotations:\n    ## omitted\nspec:\n  ## omitted\n  renewalPercent: 60\n  vaultAuthRef: terraform-cloud</code></pre><p>VSO recognizes the new team token in Vault and reconciles it with the Kubernetes secret:</p>\n<pre><code>$ kubectl logs -n vault-secrets-operator $(kubectl get pods \\\n   -n vault-secrets-operator \\\n   -l app.kubernetes.io/instance=vault-secrets-operator -o name)\n\n2024-03-18T16:10:19Z    INFO    Vault secret does not support periodic renewal/refresh via reconciliation       {\"controller\": \"vaultdynamicsecret\", \"controllerGroup\": \"secrets.hashicorp.com\", \"controllerKind\": \"VaultDynamicSecret\", \"VaultDynamicSecret\": {\"name\":\"terraform-cloud-team-token\",\"namespace\":\"payments-app\"}, \"namespace\": \"payments-app\", \"name\": \"terraform-cloud-team-token\", \"reconcileID\": \"3d0a15f1-0edf-450b-8be1-6319cd3b2d02\", \"podUID\": \"4eb7f16a-cfcb-484e-b3da-54ddbfc6a6a6\", \"requeue\": false, \"horizon\": \"0s\"}\n2024-03-18T16:10:19Z    DEBUG   events  Secret synced, lease_id=\"\", horizon=0s  {\"type\": \"Normal\", \"object\": {\"kind\":\"VaultDynamicSecret\",\"namespace\":\"payments-app\",\"name\":\"terraform-cloud-team-token\",\"uid\":\"f4f0483c-895d-4b05-894c-24fdb1518489\",\"apiVersion\":\"secrets.hashicorp.com/v1beta1\",\"resourceVersion\":\"1915673\"}, \"reason\": \"SecretRotated\"</code></pre><p>Note that this manual workflow for rotating tokens applies specifically to team and organization tokens generated by the Terraform Cloud secrets engine. User tokens have <em>leases</em>, which VSO handles automatically. VSO also supports the rotation of credentials for <a href=\"https://developer.hashicorp.com/vault/docs/secrets/databases#static-roles\">static roles in database secrets engines</a>. Set the <a href=\"https://github.com/hashicorp/vault-secrets-operator/blob/main/chart/crds/secrets.hashicorp.com_vaultdynamicsecrets.yaml#L41\"><code>allowStaticCreds</code></a> attribute in the VaultDynamicSecret resource for VSO to synchronize changes to static roles.</p>\n\n<h2>Learn more</h2>\n\n<p>As shown in this post, rather than store Terraform Cloud API tokens as secrets in Kubernetes, you can manage the tokens with Vault and use the Vault Secrets Operator to synchronize them to Kubernetes secrets for the Terraform Cloud Operator to use. By managing the Terraform Cloud API token in Vault, you can audit its usage and handle its lifecycle in one place.</p>\n<p>In general, the pattern of synchronizing to a Kubernetes secret allows any permitted Kubernetes custom resource or workload to use the secret while Vault manages its lifecycle. As a result, you can track the usage of secrets across your Kubernetes workloads without refactoring applications already using Kubernetes secrets.</p>\n\n<p>Learn more about the Vault Secrets Operator in our <a href=\"https://developer.hashicorp.com/vault/docs/platform/k8s/vso\">VSO documentation</a>. If you want to further secure your secrets in Kubernetes, check out our blog post comparing<a href=\"https://www.hashicorp.com/blog/kubernetes-vault-integration-via-sidecar-agent-injector-vs-csi-provider\"> three methods to inject secrets from Vault into Kubernetes workloads</a>.</p>\n\n<p>If you support a GitOps workflow in your organization and want to empower teams to deploy infrastructure resources using Kubernetes, review our <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/integrations/kubernetes\">documentation on the Terraform Cloud Operator</a> to deploy and manage infrastructure resources through modules. Refer to <a href=\"https://github.com/joatmon08/hashicorp-stack-demoapp/tree/main\">GitHub</a> for a complete example provisioning a database and other infrastructure resources.</p>\n","author":"Rosemary Wang","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"fac83fc3294487567f004ffa1ca48ca61fe2a57417dbd8e48699c5179ccfb926","category":"Tech"}