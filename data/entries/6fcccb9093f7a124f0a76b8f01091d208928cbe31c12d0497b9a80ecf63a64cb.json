{"title":"Run and manage open source InfluxDB databases with Amazon Timestream","link":"https://aws.amazon.com/blogs/aws/run-and-manage-open-source-influxdb-databases-with-amazon-timestream/","date":1710467391000,"content":"<p>Starting today, you can use <a href=\"https://www.influxdata.com/\">InfluxDB</a> as a database engine in <a href=\"https://aws.amazon.com/timestream/\">Amazon Timestream</a>. This support makes it easy for you to run near real-time time-series applications using InfluxDB and open source APIs, including open source <a href=\"https://www.influxdata.com/time-series-platform/telegraf/\">Telegraf</a> agents that collect time-series observations.</p> \n<p>Now you have two database engines to choose in <span>Timestream</span>: Timestream for LiveAnalytics and Timestream for InfluxDB.</p> \n<p>You should use the Timestream for InfluxDB engine if your use cases require near real-time time-series queries or specific features in InfluxDB, such as using Flux queries. Another option is the existing Timestream for LiveAnalytics engine, which is suitable if you need to ingest more than tens of gigabytes of time-series data per minute and run SQL queries on petabytes of time-series data in seconds.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/03/14/2024-timestreaminfluxdb-rev-1-1.png\" width=\"1960\" height=\"1086\" /></p> \n<p>With InfluxDB support in <span>Timestream</span>, you can use a managed instance that is automatically configured for optimal performance and availability. Furthermore, you can increase resiliency by configuring multi-Availability Zone support for your InfluxDB databases.</p> \n<p>Timestream for InfluxDB and Timestream for LiveAnalytics complement each other for low-latency and large-scale ingestion of time-series data.</p> \n<p><span><strong>Getting started with Timestream for InfluxDB</strong></span><br /> Let me show you how to get started.</p> \n<p>First, I create an InfluxDB instance. I navigate to the <span>Timestream</span> console, go to <strong>InfluxDB databases</strong> in <strong>Timestream for InfluxDB</strong> and select <strong>Create Influx database</strong>.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/03/11/2024-timestreaminfluxdb-rev2-1.png\" width=\"3810\" height=\"1872\" /></p> \n<p>On the next page, I specify the <strong>database credentials</strong> for the InfluxDB instance.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/03/11/2024-timestreaminfluxdb-rev3-1.png\" width=\"2112\" height=\"2230\" /></p> \n<p>I also specify my instance class in <strong>Instance configuration</strong> and the storage type and volume to suit my needs.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/01/23/2024-timestreaminfluxdb-rev-04.png\" width=\"1972\" height=\"1406\" /></p> \n<p>In the next part, I can choose a multi-AZ deployment, which synchronously replicates data to a standby database in a different Availability Zone or just a single instance of InfluxDB. In the multi-AZ deployment, if a failure is detected, Timestream for InfluxDB will automatically fail over to the standby instance without data loss.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/03/11/2024-timestreaminfluxdb-rev5-1.png\" width=\"1972\" height=\"673\" /></p> \n<p>Then, I configure how to connect to my InfluxDB instance in <strong>Connectivity configuration</strong>. Here, I have the flexibility to define network type, virtual private cloud (VPC), subnets, and database port. I also have the flexibility to configure my InfluxDB instance to be publicly accessible by specifying public subnets and set the <strong>public access</strong> to <strong>Publicly Accessible</strong>, allowing Amazon Timestream will assign a public IP address to my InfluxDB instance. If you choose this option, make sure that you have proper security measures to protect your InfluxDB instances.</p> \n<p>In this demo, I set my InfluxDB instance as <strong>Not publicly accessible</strong>, which also means I can only access it through the VPC and subnets I defined in this section.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/01/03/2024-timestreaminfluxdb-06.png\" width=\"1766\" height=\"1636\" /></p> \n<p>Once I configure my database connectivity, I can define the database parameter group and the log delivery settings. In <strong>Parameter group</strong>, I can define specific configurable parameters that I want to use for my InfluxDB database. In the <strong>log delivery settings</strong>, I also can define which <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> bucket I have to export the system logs. To learn more about the required <a href=\"https://aws.amazon.com/iam/\">AWS Identity and Access Management (IAM)</a> policy for the Amazon S3 bucket, visit <a href=\"http://docs.aws.amazon.com/latest/developerguide/timestream-for-influxdb.html\">this page</a>.</p> \n<p>Once I’m happy with the configuration, I select <strong>Create Influx database</strong>.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/03/11/2024-timestreaminfluxdb-rev6-1.png\" width=\"1942\" height=\"1752\" /></p> \n<p>Once my InfluxDB instance is created, I can see more information on the detail page.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/03/11/2024-timestreaminfluxdb-rev7-1.png\" width=\"3101\" height=\"930\" /></p> \n<p>With the InfluxDB instance created, I can also access the InfluxDB user interface (UI). If I configure my InfluxDB as publicly accessible, I can access the UI using the console by selecting <strong>InfluxDB UI</strong>. As shown on the setup, I configured my InfluxDB instance as not publicly accessible. In this case, I need to access the InfluxDB UI with SSH tunneling through an <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instance within the same VPC as my InfluxDB instance.</p> \n<p>With the URL endpoint from the detail page, I navigate to the InfluxDB UI and use the username and password I configured in the creation process.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/03/11/2024-timestreaminfluxdb-09-1.png\" width=\"2180\" height=\"1746\" /></p> \n<p>With access to the InfluxDB UI, I can now create a token to interact with my InfluxDB instance.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/01/04/2024-timestreaminfluxdb-10.png\" width=\"3436\" height=\"1716\" /></p> \n<p>I can also use the <a href=\"https://docs.influxdata.com/influxdb/cloud/reference/cli/influx/\">Influx command line interface (CLI)</a> to create a token. Before I can create the token, I create a configuration to interact with my InfluxDB instance. The following is the sample command to create a configuration:</p> \n<pre><code>influx config create --config-name demo  \\\n    --host-url https://&lt;TIMESTREAM for INFLUX DB ENDPOINT&gt; \\\n   --org demo-org  \n   --username-password [USERNAME] \\\n   --active\n</code></pre> \n<p>With the InfluxDB configuration created, I can now create an operator, all-access or read/write token. The following is an example for creating an all-access token to grant permissions to all resources in the organization that I defined:</p> \n<pre><code>influx auth create --org demo-org --all-access</code></pre> \n<p>With the required token for my use case, I can use various tools, such as the Influx CLI, Telegraf agent, and <a href=\"https://docs.influxdata.com/influxdb/v2/api-guide/client-libraries/\">InfluxDB client libraries</a>, to start ingesting data into my InfluxDB instance. Here, I’m using the Influx CLI to write sample home sensor data in the line protocol format, which you can also get from the <a href=\"https://docs.influxdata.com/influxdb/v2/get-started/write/#home-sensor-data-line-protocol\">InfluxDB documentation page</a>.</p> \n<pre><code>influx write \\\n  --bucket demo-bucket \\\n  --precision s \"\nhome,room=Living\\ Room temp=21.1,hum=35.9,co=0i 1641024000\nhome,room=Kitchen temp=21.0,hum=35.9,co=0i 1641024000\nhome,room=Living\\ Room temp=21.4,hum=35.9,co=0i 1641027600\nhome,room=Kitchen temp=23.0,hum=36.2,co=0i 1641027600\nhome,room=Living\\ Room temp=21.8,hum=36.0,co=0i 1641031200\nhome,room=Kitchen temp=22.7,hum=36.1,co=0i 1641031200\nhome,room=Living\\ Room temp=22.2,hum=36.0,co=0i 1641034800\nhome,room=Kitchen temp=22.4,hum=36.0,co=0i 1641034800\nhome,room=Living\\ Room temp=22.2,hum=35.9,co=0i 1641038400\nhome,room=Kitchen temp=22.5,hum=36.0,co=0i 1641038400\nhome,room=Living\\ Room temp=22.4,hum=36.0,co=0i 1641042000\nhome,room=Kitchen temp=22.8,hum=36.5,co=1i 1641042000\nhome,room=Living\\ Room temp=22.3,hum=36.1,co=0i 1641045600\nhome,room=Kitchen temp=22.8,hum=36.3,co=1i 1641045600\nhome,room=Living\\ Room temp=22.3,hum=36.1,co=1i 1641049200\nhome,room=Kitchen temp=22.7,hum=36.2,co=3i 1641049200\nhome,room=Living\\ Room temp=22.4,hum=36.0,co=4i 1641052800\nhome,room=Kitchen temp=22.4,hum=36.0,co=7i 1641052800\nhome,room=Living\\ Room temp=22.6,hum=35.9,co=5i 1641056400\nhome,room=Kitchen temp=22.7,hum=36.0,co=9i 1641056400\nhome,room=Living\\ Room temp=22.8,hum=36.2,co=9i 1641060000\nhome,room=Kitchen temp=23.3,hum=36.9,co=18i 1641060000\nhome,room=Living\\ Room temp=22.5,hum=36.3,co=14i 1641063600\nhome,room=Kitchen temp=23.1,hum=36.6,co=22i 1641063600\nhome,room=Living\\ Room temp=22.2,hum=36.4,co=17i 1641067200\nhome,room=Kitchen temp=22.7,hum=36.5,co=26i 1641067200\n\"</code></pre> \n<p>Finally, I can query the data using the InfluxDB UI. I navigate to the <strong>Data Explorer</strong> page in the InfluxDB UI, create a simple <a href=\"https://docs.influxdata.com/flux/v0/\">Flux</a> script, and select <strong>Submit</strong>.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/01/04/2024-timestreaminfluxdb-11.png\" width=\"3430\" height=\"1704\" /></p> \n<p>Timestream for InﬂuxDB makes it easier for you to develop applications using InfluxDB, while continuing to use your existing tools to interact with the database. With the multi-AZ configuration, you can increase the availability of your InfluxDB data without worrying about the underlying infrastructure.</p> \n<p><span><strong>AWS and InfluxDB partnership<br /> </strong></span>Celebrating this launch, here’s what <a href=\"https://www.linkedin.com/in/pauldix/\">Paul Dix</a>, Founder and Chief Technology Officer at InfluxData, said about this partnership:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/02/28/2024-timestreaminfluxdb-12-300x59.png\" width=\"300\" height=\"59\" /></p> \n<p>“The future of open source is powered by the public cloud—reaching the broadest community through simple entry points and practical user experience. Amazon Timestream for InfluxDB delivers on that vision. Our partnership with AWS turns InfluxDB open source into a force multiplier for real-time insights on time-series data, making it easier than ever for developers to build and scale their time-series workloads on AWS.”</p> \n<p><span><strong>Things to know</strong></span><br /> Here are some additional information that you need to know:</p> \n<p><strong>Availability</strong> – Timestream for InfluxDB is now generally available in the following AWS Regions: US East (Ohio, N. Virginia), US West (Oregon), Asia Pacific (Mumbai, Singapore, Sydney, Tokyo), and Europe (Frankfurt, Ireland, Stockholm).</p> \n<p><strong>Migration scenario</strong> – To migrate from a self-managed InfluxDB instance, you can simply restore a backup from an existing InfluxDB database into Timestream for InfluxDB. If you need to migrate from existing Timestream LiveAnalytics engine to Timestream for InfluxDB, you can leverage Amazon S3. Read more on how to do migration for various use cases on <a href=\"https://docs.aws.amazon.com/timestream/latest/developerguide/timestream-for-influx-getting-started-migrating-data.html\">Migrating data from self-managed InfluxDB to Timestream for InfluxDB</a> page.</p> \n<p><strong>Supported version</strong> – Timestream for InfluxDB currently supports the open source 2.7.5 version of InfluxDB</p> \n<p><strong>Pricing </strong>– To learn more about pricing, please visit <a href=\"https://aws.amazon.com/timestream/pricing/\">Amazon Timestream pricing</a>.</p> \n<p><strong>Demo</strong> – To see Timestream for InfluxDB in action, have a look at this demo created by my colleague, <a href=\"https://www.linkedin.com/in/derekwbingham/\">Derek</a>:</p> \n<div> \n <p></p> \n</div> \n<p>Start building time-series applications and dashboards with millisecond response times using Timestream for InfluxDB. To learn more, visit <a href=\"https://aws.amazon.com/timestream/#Managed_InfluxDB\">Amazon Timestream for InfluxDB</a> page.</p> \n<p>Happy building!<br /> — <a href=\"https://www.linkedin.com/in/donnieprakoso\">Donnie</a></p>","author":"Donnie Prakoso","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"6fcccb9093f7a124f0a76b8f01091d208928cbe31c12d0497b9a80ecf63a64cb","category":"Tech"}