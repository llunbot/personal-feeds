{"title":"Fix the developers vs. security conflict by shifting further left","link":"https://www.hashicorp.com/blog/fix-the-developers-vs-security-conflict-by-shifting-further-left","date":1731430800000,"content":"<p>Prolonged tension between developers and security teams can undermine the efficacy of cloud security. Security teams resent it when developers ignore their guidelines, forcing them to patch vulnerabilities after apps are in production. Developers want security teams to plug gaps and stay off their backs — they have frequent deadlines to meet. Collaboration between them suffers. Not surprisingly, getting these teams to operate from the same playbook is easier said than done.  </p>\n\n<p>CISOs and developers know this all too well. Nearly two in three CISOs and developers agree that “a lack of communication and collaboration between their teams is a problem when it comes to implementing better software supply chain security,” according to a <a href=\"https://get.chainguard.dev/hubfs/Chainguard-Harris-Poll-ciso-and-developer-trends-Report.pdf\">software security study</a> by Chainguard and the Harris Poll. The December 2023 study also found that tooling is another source of tension between these teams: “73% of developers agree that the work/tools their security team requires them to use interfere with their productivity and innovation.”‍</p>\n\n<p>Yet, defusing the tension between these teams doesn’t require a federal mediator. The turning point begins when <a href=\"https://www.hashicorp.com/resources/what-is-a-platform-team-and-why-do-we-need-them\">platform teams</a> remove one of the biggest obstacles: <strong>conflicting toolchains</strong> that cause inefficiencies and introduce vulnerabilities that result in costly errors. <strong>A lack of automation</strong> also hinders organizations from managing their cloud resources efficiently.</p>\n\n<p>Getting dev and sec to work cleanly together demands tooling changes associated with cloud migration, including automation for scale and provisioning dynamic infrastructure. Unfortunately, many toolchains (especially in cybersecurity) were built for the static, on-prem era of infrastructure. Lacking automation, platform teams can’t easily switch from “static” infrastructure to “dynamic” infrastructure with these outdated toolsets.</p>\n\n<p>Platform teams play an important, if underappreciated, role in solving this impasse. This post recommends field-tested tools and products that establish a secure, golden developer path — reducing friction and satisfying both teams’ objectives.</p>\n\n<h2>Your “shift-left” needs a platform</h2>\n\n<blockquote>\n<p>“Maybe they don’t want to think about infosec. They’re worried about their software architecture. They don’t want to think about CMDB [a configuration management database]. Patching compliance, forget it. They just want to go fast.” <br /><br />\n— Chad Prey, “<a href=\"https://www.hashicorp.com/resources/terraform-for-the-rest-of-us-a-petco-ops-case-study\">Terraform for the Rest of Us: A Petco Ops Case Study</a>”</p>\n</blockquote>\n\n<p>The “shift-left” movement, an idea that was coined decades ago around testing, was an attempt to fix friction between teams when security and quality assurance were being tested at the end of an application’s development lifecycle. The general idea was to push testing and other aspects of security and QA review to the early and middle stages of development, not just at the end, when reviews would find multiple issues and send an app back into redesign stages. </p>\n\n<p>During the emergence of DevOps philosophies, the shift-left movement went hand-in-hand with cross-team skilling, where managers wanted to turn developers and IT pros into experts in everything from development to operations (and sometimes cybersecurity). For companies that couldn’t afford the top 1% of engineering talent, this movement fell flat on its face.  </p>\n\n<p>Trying to get all developers to become well-versed in cybersecurity so that those controls and strategies can be implemented in the design phase is unrealistic — <strong>it’s the wrong way to shift-left</strong>.</p>\n\n<p>Instead of focusing fully on shifting security left from a culture or skilling perspective, it needs to be done with tools, because <a href=\"https://www.youtube.com/watch?v=LCuAcc_ne6k\">software eats culture for breakfast</a>. Think of it as shifting <em>further</em> left.</p>\n\n<p>It’s “further” left because it’s there before the developer even starts coding. Secure designs are <em>baked-into</em> the various templates developers use to start a project in CI/CD and in their infrastructure platform. When organizations deploy a platform-based shift-left approach that leverages APIs, automated checks, self-service tooling, and guardrails like secure modules and <a href=\"https://developer.hashicorp.com/sentinel/docs/concepts/policy-as-code\">policy as code</a>, they avoid the bottlenecks created by development teams submitting changes for manual review by security, Ops, or compliance teams. </p>\n\n<p>At the same time, security teams can be confident knowing they have embedded required policies and best practices before code and applications make it to production.** There are fewer tickets for them!**</p>\n\n<p>Developers will like the fact that they can just code and not have to know a lot about cybersecurity best practices, or keep up with changing company compliance and security policies. As long as the guardrails don’t become a “golden cage” rather than facilitating a golden path, developers should work much faster.  Eventually platform teams want the developer experience for security to feel <em>invisible</em>, removing as many manual touchpoints as possible. For example, with the right <a href=\"https://www.vaultproject.io/use-cases/secrets-management\">secrets management</a> solution, developers should barely realize they're managing secrets in their workflow.</p>\n\n<h2>How to build a platform that helps dev and sec work together effectively</h2>\n\n<p>The National Institute of Standards and Technology (NIST) strongly advocates <a href=\"https://csrc.nist.gov/Projects/devsecops\">DevSecOps</a> partly because it “[r]educes friction between the development, operation, and security teams in order to maintain the speed and agility needed to support the organization’s mission while taking advantage of modern and innovative technology.” </p>\n\n<p>While NIST continues to identify software supply chain and DevOps security practices, many organizations now embrace DevSecOps but haven’t deployed “modern and innovative technology” to improve their cloud security and reduce the stress between their infrastructure and development teams.</p>\n\n<p>Today, a modern platform must prioritize cloud security and the developer experience, establishing a secure and consistent workflow that supports all teams in the delivery pipeline. Platform teams should pick tools and products that excel at these functions: </p>\n\n<ul>\n<li>Version control tooling</li>\n<li>Static and dynamic scanning tools</li>\n<li>Secrets management platforms</li>\n<li>Secret scanning tools</li>\n<li><a href=\"https://www.hashicorp.com/resources/what-is-infrastructure-as-code\">Infrastructure as code</a> provisioning platforms with built-in policies as code engines</li>\n<li>Secure remote access tools<br /></li>\n<li>Image and module lifecycle management</li>\n</ul>\n\n<p>In particular, platform teams want to focus on the lifecycles that matter most to developers and security teams: </p>\n\n<ul>\n<li>Infrastructure Lifecycle Management (ILM): A systematic and repeatable approach to creating, securing, and maintaining infrastructure.<br /></li>\n<li>Security Lifecycle Management (SLM): A systematic way for organizations to manage their most sensitive data, especially secrets/credentials, from creation to expiration or revocation. This also includes having a platform for the management of remote access sessions.</li>\n</ul>\n\n<p>While executives and managers can take years shopping for dozens of products to build holistic ILM and SLM solutions, or even longer trying to manage initiatives to roll their own toolchains, the savvy leaders are focused on consolidating down to fewer tools with a small number of trusted partner vendors (we know that <a href=\"https://lsvp.com/cyber60-2024-2025/\">half of CISOs</a> are asking for tool consolidation right now).</p>\n\n<p>HashiCorp is one of those trusted ILM and SLM partners to <a href=\"https://www.hashicorp.com/resources?contentType=Case%20Study\">thousands of customers</a> with a consolidated solution: <a href=\"https://www.hashicorp.com/infrastructure-cloud\">The Infrastructure Cloud</a>. It includes the world’s <a href=\"https://survey.stackoverflow.co/2024/technology/#1-other-tools\">most popular</a> infrastructure as code provisioner, <a href=\"https://www.hashicorp.com/products/terraform\">HashiCorp Terraform</a>, and the <a href=\"https://radar.cncf.io/2021-02-secrets-management\">gold standard</a> of secrets management platforms, <a href=\"https://www.hashicorp.com/products/vault\">HashiCorp Vault</a>. Along with other products, organizations can deploy Terraform, Vault, and other components of the Infrastructure Cloud as on-prem, self-managed software, or as managed services on the HashiCorp Cloud Platform (HCP).</p>\n\n<h2>What the right SLM and ILM tools can do</h2>\n\n<p>Modern ILM is all about empowering developers to provision cloud and on-prem resources quickly without a burdensome, ticket-heavy or review-heavy workflow. Platform teams avoid these problems by providing a standardized shared service with curated self-service workflows, tools, and templates for developers that propagate best practices for every deployment while automating secure practices and guardrails. </p>\n\n<p>HCP Terraform and Terraform Enterprise support secure provisioning, enabling best practices including:</p>\n\n<ol>\n<li><strong>Standardized workflows</strong> — Baking security fundamentals into the workflow with templates that empower even junior developers to become highly productive. </li>\n<li><p><strong>Secure modules</strong> — Managing version control and provisioning becomes easier when you codify, store, version, and deprecate modules in one place.</p></li>\n<li><p><strong>Policy as Code guardrails and gates</strong> — Automating the enforcement of identity and access management (IAM) controls, CIS benchmarks, proper infrastructure tagging, and the storage location of data (for GDPR compliance).</p></li>\n<li><p><strong>Custom condition checks</strong> — Platform engineers can add ongoing security checks at all phases of the infrastructure lifecycle to detect insecure modules that might slip through other guardrails.</p></li>\n<li><p><strong>Drift detection and continuous validation</strong> — Teams need a system to detect problems leading to outages, higher costs, and vulnerabilities. </p></li>\n<li><p><strong>Observability</strong> — Teams need visibility into workspaces, a reporting component, and a clear audit trail for all changes.</p></li>\n</ol>\n\n<blockquote>\n<p>“We have many developers who want to deploy apps on the cloud, but they aren’t familiar with all the different cloud service providers, or they might want to deploy their application on multiple clouds. By using modules, we can deploy standardized solutions across multiple clouds using a common syntax: HashiCorp Terraform [which uses HashiCorp configuration language (HCL)]. We’re able to bake in our security controls so our developers don’t have to go look at a long list of controls before they’re able to do anything in the cloud.”<br /><br />\n— Itay Cohai, “<a href=\"https://www.hashicorp.com/resources/compliance-at-scale-hardened-terraform-modules-at-morgan-stanley\">Compliance at Scale: Hardened Terraform Modules at Morgan Stanley</a>”</p>\n</blockquote>\n\n<p>For modern SLM practices, secrets management is the core focus since compromised credentials are still the <a href=\"https://www.verizon.com/business/resources/reports/dbir/\">#1 cause of most breaches</a>. It’s also the antidote to <a href=\"https://www.hashicorp.com/resources/what-is-secret-sprawl-why-is-it-harmful\">secret sprawl</a>, where secrets such as passwords are kept in obvious, often unguarded places for attackers to find and exploit. </p>\n\n<p>HashiCorp Vault makes implementing a scalable, secrets management program with solid governance, auditing, and security easy. The key is centralizing your management through one control plane.</p>\n\n<p>Here are five best practices for a well-managed secrets management platform: </p>\n\n<ol>\n<li><strong>Central secrets control plane</strong> — Reduces errors, speeds up debugging and auditing, and simplifies security management </li>\n<li><strong>Access control lists</strong> — Limit lateral movement through your systems </li>\n<li><strong>Dynamic or auto-rotated secrets</strong> — Temporary credentials that reduce the time of breach </li>\n<li><strong>Encryption as a service</strong> — Prevents breaches and enables encrypted data during transit as a service </li>\n<li><strong>Auditing</strong> — Better understanding of your security posture and breach detection</li>\n</ol>\n\n<p><a href=\"https://www.canva.com/\">Canva</a>, an online platform for visual communication and graphic design, sought to simplify secrets management for its developers using Vault: </p>\n\n<blockquote>\n<p>\"They'll just get some sort of key with a click or two and then plug that key into their target client. The secrets management system should take care of issuing the secret to the correct client and integrate with a wide array of products and all the major cloud providers.\" <br /><br />\n—Moe Abbas, “<a href=\"https://www.hashicorp.com/resources/streamlining-secrets-management-at-canva-with-hashicorp-vault\">Streamlining secrets management at Canva with HashiCorp Vault</a>”</p>\n</blockquote>\n\n<h3>Vault's impact on Canva’s security was impressive:</h3>\n\n<ul>\n<li>Closed a whole risk category in the business by removing direct engineering access to secrets kept in Vault.</li>\n<li>87.5% reduction in processes around secret provisioning. </li>\n<li>1.2 million secrets were issued by Vault in May 2024, and it’s still growing.</li>\n<li>100% of secrets can be attributed back to an owner with access to a complete audit trail in seconds.</li>\n</ul>\n\n<h2>Leveling up dev and sec collaboration</h2>\n\n<p>Misaligned priorities, mismatched tools, and inconsistent workflows are the precursors of friction between security and development teams. Prolonged problems between these teams elevate security and compliance risks and hinder development speed and time to market. Platform teams understand that the right tools can propel a cultural shift that reduces risk and cost while accelerating production.</p>\n\n<p>Platform teams understand that an effective cloud security program eliminates friction, enables reproducibility, and establishes infrastructure automation. The Infrastructure Cloud helps organizations shift left, lifting the burden of implementing security requirements from development teams and removing many common friction points between security and dev teams.</p>\n\n<p>Move fast and secure things by bridging the gap between developers and security teams. <a href=\"https://www.hashicorp.com/on-demand/move-fast-and-secure-things\">Read our white paper</a> or <a href=\"https://www.hashicorp.com/lp/cloud-wars-balancing-speed-and-security-for-seamless-development\">attend our upcoming webinar</a> to learn practical strategies that help improve cross-team collaboration in the cloud.</p>\n","author":"Thomas O'Connell","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"ef68b52f4a52d2cef5c6bbd517ab07ce7610f6884d9918499ca767c18ad65baa","category":"Tech"}