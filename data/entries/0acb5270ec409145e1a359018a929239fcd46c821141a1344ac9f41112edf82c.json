{"title":"Designing Web Design Documentation","link":"https://smashingmagazine.com/2023/11/designing-web-design-documentation/","date":1699880400000,"content":"<p>As an occasionally competent software developer, I <em>love</em> good documentation. It explains not only how things work but <em>why</em> they work the way they do. At its best, documentation is much more than a guide. It is a statement of principles and best practices, giving people the information they need to not just understand but believe.</p>\n<p>As soft skills go in tech land, maintaining documentation is right up there. Smashing has previously explored <a href=\"https://www.smashingmagazine.com/2021/04/better-documentation-team-communication-product-design-docs/\">design documents in a proposal context</a>, but what happens once you’ve arrived at the answer and need to implement? How do you present the information in ways that are useful to those who need to crack on and build stuff? </p>\n<p>Documentation often has a technical bent to it, but this article is about how it can be applied to digital design — web design in particular. The idea is to get the best of both worlds to make design documentation that is both beautiful and useful — a guide and manifesto all at once.</p>\nAn Ode To Documentation\n<p>Before getting into the minutia of living, breathing digital design documentation, it’s worth taking a moment to revisit what documentation is, what it’s for, and why it’s so valuable.</p>\n<blockquote>The documentation describes how a product, system, or service works, what it’s for, why it’s been built the way it has, and how you can work on it without losing your already threadbare connection with your own sanity.</blockquote>\n\n<p>We won’t get into the nitty-gritty of code documentation. There are plenty of Smashing articles to scratch that itch:</p>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/05/designing-better-design-handoff-file-figma/\">Designing A Better Design Handoff File In Figma</a>,” Ben Shih</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/01/swimm-code-documentation-streamlined/\">Code Documentation, Streamlined</a>,” Atila Fassina</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/08/automate-documentation-workflow-for-developers/\">How To Automate Documentation Workflow For Developers</a>,” Portia Burton</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/04/better-documentation-team-communication-product-design-docs/\">Better Documentation And Team Communication With Product Design Docs</a>,” Ismael González</li>\n</ul>\n<p>However, in brief, here are a few of the key benefits of documentation.</p>\n<h3>Less Tech Debt</h3>\n<p>Our decisions tend to be much more solid when we have to write them down and justify them as something more formal than self-effacing code comments. Having clear, easy-to-read code is always something worth striving for, but supporting documentation can give essential context and guidance.</p>\n<h3>Continuity</h3>\n<p>We work in an industry with an <a href=\"https://www.businessinsider.com/average-employee-tenure-retention-at-top-tech-companies-2018-4?r=US&amp;IR=T\">exceptionally high turnover rate</a>. The wealth of knowledge that lives inside someone’s head disappears with them when they leave. If you don’t want to reinvent the wheel every time someone moves on, you better learn to love documentation. That is where continuity lies.</p>\n<h3>Prevents Needless Repetition</h3>\n<p>Sometimes things are the way they are for very, very good reasons, and someone, somewhere, had to go through a lot of pain to understand what they were. </p>\n<p>That’s not to say the rationale behind a given decision is above scrutiny. Documentation puts it front and center. If it’s convincing, great, people can press on with confidence. If it no longer holds up, then options can be reassessed, and courses can be altered quickly.</p>\n<p>Documentation establishes a set of norms, prevents needless repetition, allows for faster problem-solving, and, ideally, inspires.</p>\nTwo Worlds\n<p>In 1959, English author C. P. Snow delivered a seminal lecture called “<a href=\"https://sciencepolicy.colorado.edu/students/envs_5110/snow_1959.pdf\">The Two Cultures</a>” (PDF). It is well worth reading in full, but the gist was that the sciences and the humanities weren’t working together and that they really ought to do so for humanity to flourish. To cordon ourselves off with specialisations deprives each group of swathes of knowledge.</p>\n<blockquote>“Polarisation is sheer loss to us all. To us as people and to our society. It is at the same time practical and intellectual and creative loss [...] It is false to imagine that those three considerations are clearly separable.”<br /><br />— Charles Percy Snow</blockquote>\n\n<p>Although Snow himself conceded that “attempts to divide anything into two ought to be regarded with much suspicion,” the framing was and remains useful. Web development is its own meeting of worlds — between designers and engineers, art and data — and the places where they meet are where the good stuff really happens.</p>\n<blockquote>“The clashing point of two subjects, two disciplines, two cultures — two galaxies, so far as that goes — ought to produce creative chances.”<br /><br />— Charles Percy Snow</blockquote>\n\n<p>Snow knew it, <a href=\"https://www.smashingmagazine.com/2023/03/leonardo-da-vinci-teach-web-design/\">Leonardo da Vinci knew it</a>, Steve Jobs knew it. Magic happens when we head straight for that collision.</p>\n<h3>A Common Language</h3>\n<p>Web development is a world of many different yet connected specialisations (and sub-specialisations for that matter). One of the key relationships is the one between engineers and designers. When the two are in harmony, the results can be breathtaking. When they’re not, everything and everyone involved suffers.</p>\n<p>Digital design needs its own language: a hybrid of art, technology, interactivity, and responsiveness. Its documentation needs to reflect that, to be alive, something you can play with. It should start telling a story before anyone reads a word. Doing so makes everyone involved better: writers, developers, designers, and communicators. </p>\n<p>Design documentation creates a bridge between worlds, a common language composed of elements of both. Design and engineering are increasingly intertwined; it’s only right that documentation reflects that.</p>\nDesign Documentation\n<p>So here we are. The nitty-gritty of design documentation. We’re going to cover some key considerations as well as useful resources and tools at your disposal. </p>\n<p>The difference between design documentation, technical documentation, and a design system isn’t always clear, and that’s fine. If things start to get a little blurry, just remember the goal is this: <strong>establish a visual identity, explain the principles behind it, and provide the resources needed to implement it as seamlessly as possible.</strong></p>\n<p>What should be covered isn’t the point of this piece so much as how it should be covered, but what’s listed below ought to get you started:</p>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/2015/02/design-principles-dominance-focal-points-hierarchy/\">Design principles</a></li>\n<li><a href=\"https://www.smashingmagazine.com/category/typography/\">Typography</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2020/09/component-library-react-emotion/\">Component libraries</a></li>\n<li><a href=\"https://www.smashingmagazine.com/category/illustrations/\">Illustration</a></li>\n<li><a href=\"https://www.smashingmagazine.com/category/photography/\">Photography</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2016/10/icons-as-part-of-a-great-user-experience/\">Iconography</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2010/01/color-theory-for-designers-part-1-the-meaning-of-color/\">Color</a></li>\n<li><a href=\"https://www.smashingmagazine.com/category/branding/\">Branding</a></li>\n<li><a href=\"https://www.smashingmagazine.com/category/accessibility/\">Accessibility</a> </li>\n<li><a href=\"https://www.smashingmagazine.com/2021/06/web-design-done-well-audio/\">Sounds</a></li>\n</ul>\n<p>The job of design documentation is to weave all these things (and more) together. Here’s how.</p>\n<h3>Share The Why</h3>\n<p>When thinking of design systems and documentation, it’s understandable to jump to the whats — the fonts, the colors, the components — but it’s vital also to share the ethos that helped you to arrive at those assets at all.</p>\n<p>Where did this all come from? What’s the vision? The guiding principles? The BBC does a good job of answering these questions for <a href=\"https://www.bbc.co.uk/gel\">Global Experience Language (GEL)</a>, its shared design framework.</p>\n<p>On top of being public-facing (more on that later), the guidelines and design patterns are accompanied by articles and playbooks explaining the guiding principles of the whole system.</p>\n<p><img src=\"https://files.smashing.media/articles/designing-web-design-documentation/1-global-experience-language.png\" /></p>\n<p>Include proposal documents, if they exist, as well as work practices. Be clear about who the designs are built for. Just about every system has a target audience in mind, and that should be front and center.</p>\n<p>Cutting the guiding principles is like leaving the Constitution out of a US history syllabus.</p>\n<h3>Make Its Creation Is A Collaborative Process</h3>\n<p>Design systems are big tents. They incorporate design, engineering, copywriting, accessibility, and even legal considerations — at their best anyway.</p>\n<p>All of those worlds ought to have input in the documentation. The bigger the company/project, the more likely multiple teams should have input.</p>\n<p>If the documentation isn’t created in a collaborative way, then what reason do you have to expect its implementation to be any different?</p>\n<h3>Use Dynamic Platforms</h3>\n<p>The days are long gone when brand guidelines printed in a book are sufficient. Much of modern life has moved online, so too should guidance for its documentation. Happily (or dauntingly), there are plenty of platforms out there, many with excellent integrations with each other.</p>\n<p>Potential resources/platforms include:</p>\n<ul>\n<li><a href=\"https://storybook.js.org/\">Storybook</a></li>\n<li><a href=\"https://www.figma.com/\">Figma</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/powerapps/maker/canvas-apps/component-library\">Component libraries</a></li>\n<li><a href=\"https://docs.github.com/en/communities/documenting-your-project-with-wikis/about-wikis\">GitHub wikis</a></li>\n<li><a href=\"https://zeplin.io/\">Zeplin</a></li>\n<li><a href=\"https://www.sketch.com/\">Sketch</a></li>\n<li><a href=\"https://www.invisionapp.com/\">Invision</a></li>\n</ul>\n<p>There can be a chain of platforms to facilitate the connections between worlds. Figma can lead into Storybook, and Storybook can be integrated directly into a project. Embrace design documentation as an ecosystem of skills. </p>\n<p>Accommodate agile, constant development by integrating your design documentation with the code base itself.</p>\n<h3>Write With Use Cases In Mind</h3>\n<p>Although the abstract, philosophical aspects of design documentation are important, the system it described is ultimately there to be used. </p>\n<p>Consider your users’ goals. In the case of design, it’s to build things consistent with best practices. Show readers how to <em>use</em> the design guidelines. Make the output clear and practical. For example,</p>\n<ul>\n<li>How to make a React component with design system fonts;</li>\n<li>How to choose appropriate colors from our palette.</li>\n</ul>\n<p>As we’ve covered, the design breaks down into clear, recognizable sections (typography, color, and so on). These sections can themselves be broken down into steps, the latter ones being clearly actionable:</p>\n<ul>\n<li>What the feature is;</li>\n<li>Knowledge needed for documentation to be most useful;</li>\n<li>Use cases for the feature;</li>\n<li>Implementation;</li>\n<li>Suggested tooling.</li>\n</ul>\n<p>The <a href=\"https://ux.mailchimp.com/\">Mailchimp Pattern Library</a> is a good example of this in practice. Use cases are woven right into the documentation, complete with contextual notes and example code snippets, making the implementation of best practices clear and easy. </p>\n<p><img src=\"https://files.smashing.media/articles/designing-web-design-documentation/2-mailchimp-pattern-library.png\" /></p>\n<p><a href=\"https://www.youtube.com/watch?v=-WYovV6epTQ\">Humanising Your Documentation</a>, a talk by <a href=\"https://workwithcarolyn.com/\">Carolyn Stranksy</a>, provides a smashing overview of making documentation work for its users.</p>\n<p>Documentation should help people to achieve their goals rather than describe how things work.</p>\n<p>As StackOverflow founder Jeff Atwood once put it, <a href=\"https://blog.codinghorror.com/falling-into-the-pit-of-success/\">“A well-designed system makes it easy to do the right things and annoying (but not impossible) to do the wrong things.”</a></p>\n<p>“<a href=\"https://tynerblain.com/blog/2006/10/10/use-case-driven-documentation/\">Use Case Driven Documentation</a>” by Tyner Blain is a great breakdown of this ethos, as is “<a href=\"https://www.smashingmagazine.com/2016/05/design-systems-responsive-design-sell-output-not-workflow/\">On Design Systems: Sell The Output, Not The Workflow</a>” by our own Vitaly Friedman.</p>\n<h3>Language</h3>\n<p>The way things are said is important. Documentation ought to be clear, accessible, and accepting.  </p>\n<p>As with just about any documentation, give words like ‘just’, ‘merely’, and ‘simply’ a wide berth. What’s simple to one person is not always to another. Documentation should inform, not belittle. “<a href=\"https://www.writethedocs.org/guide/writing/reducing-bias/\">Reducing bias in your writing</a>” by Write the Docs gives excellent guidance here.</p>\n<p>Another thing to keep in mind is the language you use. Instead of using “he” or “she,” use “one,” “they,” “the developer,” or some such. It may not seem like a big deal to one (see what I did there), but language like that helps reinforce that your resources are for everyone.</p>\n<p>More generally, keep the copy clear and to the point. That’s easier said than done, but there are plenty of tools out there that can help tidy up your writing:</p>\n<ul>\n<li><a href=\"https://alexjs.com/\">Alex</a>, a tool for catching insensitive, inconsiderate writing;</li>\n<li><a href=\"https://github.com/btford/write-good\">Write Good</a>, an English prose linter.</li>\n</ul>\n<p>In a previous <em>Smashing</em> article, “<a href=\"https://www.smashingmagazine.com/2020/05/readability-algorithms-tools-targets/\">Readability Algorithms Should Be Tools, Not Targets</a>,” I’ve shared a wariness about tools like <a href=\"https://www.grammarly.com/\">Grammarly</a> or <a href=\"https://hemingwayapp.com/\">Hemingway Editor</a> dictating how one writes, but they’re useful tools.</p>\n<p>Also, I can never resist a good excuse to share <a href=\"https://sites.duke.edu/scientificwriting/orwells-6-rules/\">George Orwell’s rules for language</a>:</p>\n<ol>\n<li>Never use a metaphor, simile, or other figure of speech that you are used to seeing in print.</li>\n<li>Never use a long word where a short one will do.</li>\n<li>If it is possible to cut a word out, always cut it out.</li>\n<li>Never use the passive where you can use the active.</li>\n<li>Never use a foreign phrase, a scientific word, or a jargon word if you can think of an everyday English equivalent.</li>\n<li>Break any of these rules sooner than say anything outright barbarous.</li>\n</ol>\n<p>Books like <a href=\"https://daoyuan14.github.io/elos.pdf\"><em>The Elements of Style</em></a> (PDF) by William Strunk Jr are good to be familiar with, too. Keep things informative but snappy.</p>\n<h3>Make It Beautiful</h3>\n<p>Design documentation has a lot more credibility if it’s walking the walk. If it looks like a hot mess, what are the chances of it being taken seriously?</p>\n<p>Ideally, you should be showcasing a design ethos, not just explaining it. <a href=\"https://www.nasa.gov/sites/default/files/atoms/files/nasa_graphics_manual_nhb_1430-2_jan_1976.pdf\">NASA showed way back in 1976</a> (PDF) that manuals can themselves be beautiful. The <em>Graphics Standards Manual</em> by Richard Danne and Bruce Blackburn feels like a creative work in its own right.</p>\n<p><img src=\"https://files.smashing.media/articles/designing-web-design-documentation/3-nasa-graphics-standards-manual.png\" /></p>\n<p><img src=\"https://files.smashing.media/articles/designing-web-design-documentation/4-nasa-graphics-standards-manual.png\" /></p>\n<p><img src=\"https://files.smashing.media/articles/designing-web-design-documentation/5-nasa-graphics-standards-manual.png\" /></p>\n<p>Show the same care and attention to detail in your design documentation that you expect users to show in applying it. Documentation should be the first and best example of it in action.</p>\n<p>Make your documentation easy to navigate and search. The most wonderful resources in the world aren’t doing anyone much good if they can’t be found. It’s also a splendid opportunity to show <a href=\"https://www.smashingmagazine.com/2020/07/information-architecture-big-picture/\">information architecture</a> best practice in action too. </p>\n<h3>Publish it</h3>\n<p>Once you’ve gone through the trouble of creating a design system and explaining how it works, why keep that to yourself? Publishing documentation and making it freely available for anyone to browse is a fantastic final polish.</p>\n<p>Here at the <em>Guardian</em>, for example, our <a href=\"https://guardian.github.io/csnx/\">Source design system Storybook</a> can be viewed by anyone, and its code is <a href=\"https://github.com/guardian/csnx\">publicly available on GitHub</a>. As well as being a proving ground for the system itself, it creates a space for knowledge sharing.</p>\n<p>Here are just a few fantastic examples of publicly available design documentation:</p>\n<ul>\n<li><a href=\"https://material.io\">Material Design</a> by Google</li>\n<li><a href=\"https://design-system.service.gov.uk\">GOV.UK Design System</a></li>\n<li><a href=\"https://thumbprint.design/\">Thumbprint</a></li>\n<li><a href=\"https://www.bbc.co.uk/gel\">Global Experience Language (GEL)</a> by the BBC</li>\n<li><a href=\"https://origami.ft.com/\">Origami</a> by The Financial Times</li>\n<li><a href=\"https://sunlightfoundation.com/2014/03/12/datavizguide/\">The Sunlight Foundation</a></li>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/\">Human Interface Guidelines</a> by Apple</li>\n<li><a href=\"https://www.skyscanner.design/\">Backpack</a> by Skyscanner</li>\n<li><a href=\"https://ux.mailchimp.com/\">Mailchimp Pattern Library</a></li>\n</ul>\n<p>There are plenty more where these came from in the <a href=\"https://designsystemsrepo.com/design-systems/\">Design Systems Gallery</a> — a fantastic place to browse for inspiration and guidance.</p>\n<p>What’s more, if there are stories from the formation of your system, writing articles or blog posts are also totally legit ways of documenting it. What did the <em>New York Times</em> do when they developed a design system? They wrote <a href=\"https://open.nytimes.com/how-we-made-a-design-system-for-nyt-cooking-on-android-c57ce7f0905e\">an article</a> about it, of course.</p>\n<p>Publishing design documentation — in all its forms — is a commitment, but it’s also a statement of purpose. Why not share something beautiful, right?</p>\n<h3>And Maintain It</h3>\n<p>This is all well and good, I hear you say, arms crossed and brow furrowed, but who’s going to keep all this stuff up to date? That’s all the time that could be spent making things.</p>\n<p>I hear you. There are reasons that Tweets (Xs?) like this make the rounds from time to time:</p>\n<p><img src=\"https://files.smashing.media/articles/designing-web-design-documentation/6-design-meme.png\" /></p>\n<p>Yes, it requires hard work and vigilance. The time, effort, and heartache you’ll save by having design documentation will be well worth the investment of those same things.</p>\n<p>The better integrated the documentation is with the projects it guides, the more maintenance will take care of itself. As components and best practices change, as common issues arise and are ironed out, the system and its documentation can evolve in kind.</p>\n<p>To spare you the suspense, your design documentation isn’t going to be perfect off the bat. There will be mistakes and situations that aren’t accounted for, and that’s fine. Own them. Acknowledge blindspots. Include ways for users to give feedback. </p>\n<p>As with most things digital, you’re never really “done.”</p>\nStart Small\n<p>Such thorough, polished design documentation can almost be deterrents, something only those with deep pockets can make. It may also seem like an unjustifiable investment of time. Neither has to be true. </p>\n<p>Documentation of all forms saves time in the long run, and it makes your decisions better. Whether it’s a bash script or a newsletter signup component, you scrutinize it that little bit more when you commit to it as a standard rather than a one-off choice. Let <a href=\"https://tom.preston-werner.com/2010/08/23/readme-driven-development.html\">a readme-driven ethos</a> into your heart.</p>\n<p>Start small. Choose fonts and colors and show them sitting together nicely on your repo wiki. That’s it! You’re underway. You will grow to care for your design documentation as you care for the project itself because they are part of each other. </p>\n<p>Go forth and document!</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"0acb5270ec409145e1a359018a929239fcd46c821141a1344ac9f41112edf82c","category":"Tech"}