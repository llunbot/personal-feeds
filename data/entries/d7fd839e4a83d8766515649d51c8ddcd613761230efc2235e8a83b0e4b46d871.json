{"title":"PKI certificate metadata in Vault","link":"https://www.hashicorp.com/blog/pki-certificate-metadata-in-vault","date":1720540800000,"content":"<p>Creating and using metadata with PKI certificates allows you to associate custom attributes to certificates beyond the basic data already available in <a href=\"https://en.wikipedia.org/wiki/X.509\">X.509</a> format. For example, many larger organizations might want to associate additional business context or data, such as accounting codes, with a given certificate. Prior to Vault 1.17, customers could record such metadata only via manual offline processes, which is non-scalable and error-prone.</p>\n\n<p>In <a href=\"https://developer.hashicorp.com/vault/docs/release-notes/1.17.0\">HashiCorp Vault 1.17</a>, custom metadata can now be created and submitted with the certificate signing request (CSR). The issued certificate and associated metadata is retained by Vault and thus completely automates the retention and association of metadata with the issued certificate. </p>\n\n<p>This post explains the value of PKI certificate metadata and how it works in Vault.</p>\n\n<h2>The value of PKI certificate metadata</h2>\n\n<p>The ability to <a href=\"https://developer.hashicorp.com/vault/api-docs/secret/pki#read-certificate-metadata\">create custom metadata</a> and associate it with your PKI certificates is a powerful capability allowing you to associate custom attributes with your certificates beyond the standard data available on your certificates. By creating and using custom metadata, you can add information such as certificate owner, business unit, and billing or contact information. These attributes can then be used to create groups or collections of certificates to help you more effectively manage them at scale. For example, you can use metadata to monitor certificate usage, helping to ensure compliance with industry regulations and alignment with the policies and standards of your organization.</p>\n\n<h3>General metadata categories</h3>\n\n<p>The type and amount of custom metadata you want to create varies depending on your needs and priorities, so it helps to take some time to think about what custom metadata is most useful for your business. While not exhaustive, there are three initial  metadata categories you might consider</p>\n\n<ul>\n<li><strong>Business information:</strong> Organizations might want to track data specific to business operations. This could be information such as billing codes or departments, which are used for accounting purposes. It could also include associated risk profiles or compliance categories for auditors.</li>\n<li><strong>PKI administration</strong>: A PKI administrator may want to use metadata to tie the certificate to an application owner and location, which makes it easier to track down pertinent information such as application servers, DNS names, and contact details for every certificate issued. Having these tags makes it easier for a team to track down and take action when a certificate is about to expire.</li>\n<li><strong>Operational information</strong>: Knowing who owns the application on a server is one thing, but it’s also important to capture operational details. The IT operations team may want to know which servers a certificate protects, the operating system being used, or what the various DNS or SANs are for the certificate. Metadata can even be created to track information such as the virtual host or Kubernetes cluster a particular certificate is used for.</li>\n</ul>\n\n<p>Many other kinds of metadata could also be useful, so it makes sense to carefully think through and clearly define what metadata you want to track before you create it. Taking the time to plan up front will ensure you create, apply, and track useful metadata associated with your certificates to more efficiently operate at scale. </p>\n\n<h2>How PKI certificate metadata works in Vault</h2>\n\n<p>The diagram below is an overview of a PKI certificate signing request which includes the association of custom metadata at the time the certificate is created and signed. When an application or user submits a certificate signing request (CSR), custom metadata can be automatically submitted with the certificate request. The custom metadata and the issued certificate are stored by the PKI secrets engine for later retrieval via the PKI API. </p>\n<img src=\"https://www.datocms-assets.com/2885/1720478073-pki-metadata-flows-1-edited.png\" alt=\"Vault\" /><p>A typical example use case would be to leverage custom metadata associated with an application, such as billing code, and associate the metadata with the application’s certificate when the certificate is created and signed.</p>\n\n<h3>Role-based configuration</h3>\n\n<p>All <a href=\"https://developer.hashicorp.com/vault/api-docs/secret/pki\">PKI secrets engine</a> configurations are done via role. The same is true for creating custom metadata. Now, when you create a role you will see a new field called no<em>store</em>metadata that is set to “false” by default. With this setting, you can write custom metadata and store it in the PKI secrets engine.</p>\n\n<p>The metadata is associated with the certificate, but not actually added or physically attached to the certificate. You can also set the no<em>store</em>metadata field to “true” if you do not want to store metadata. When the field is set to “false”, certificate metadata will be retained by the Vault PKI secrets engine using base-64 encoding.</p>\n\n<p>You can use familiar PKI secrets engine commands to create and manage your custom metadata. These commands include <code>write</code>, <code>list</code>, <code>read</code> and <code>tidy</code>.</p>\n\n<p>To create a new certificate and associate custom metadata for the application owner (“appowner” is the label here), your command structure would look like this:</p>\n\n<pre><code>Vault write pki/issue/myrole common_name=”company.example.com” cert_metadata=$(base 64 &lt;&lt;&lt; “appowner”) TTL=30s\n</code></pre>\n\n<p>To see a list of all certificates with associated metadata, you can run the <code>list</code> command: </p>\n\n<pre><code>Vault list /pki/cert-metadata/\n</code></pre>\n\n<p>The resulting list will provide serial numbers for all certificates with associated metadata:  </p>\n\n<pre><code>Keys\n\n---\n\n17:67:16:b0:b9:45:58:c0:3a:29:e3:cb:d6:98:33:7a:a6:3b:66:c1\n\n26:0f:76:93:73:cb:3f:a0:7a:ff:97:85:42:48:3a:aa:e5:96:03:21\n\n67:b4:f7:2c:aa:ef:b9:30:f6:ae:f5:12:21:79:ac:08:8a:86:89:72\n</code></pre>\n\n<p>Once you identify the serial number of the certificate for which you want to see the associated metadata, you can run the <code>read</code> command against that serial number to retrieve its metadata: </p>\n\n<pre><code>Vault read pki/cert-metadata/67:b4:f7:2c:aa:ef:b9:30:f6:ae:f5:12:21:79:ac:08:8a:86:89:72\n</code></pre>\n\n<p>Running the <code>read</code> command provides the following certificate data:</p>\n\n<pre><code>Key Value\n\n---  ---- \n\nissuer_id       e27bf456-51e1-d937-0001-4a609184fd9b\n\nexpiration  2022-11-02T14:41:47.327515Z\n\ncert_metadata   dXNlci1wcm92aWRlZC1tZXRhZGF0YQ==\n\nRole    MyRole\n\nserial_number   67:b4:f7:2c:aa:ef:b9:30:f6:ae:f5:12:21:79:ac:08:8a:86:89:72\n</code></pre>\n\n<p>The following command will fetch and decode the custom metadata associated with the certificate:</p>\n\n<pre><code>base64 --decode &lt;&lt;&lt; $(vault read --field=cert_metadata pki/cert-metadata/67:b4:f7:2c:aa:ef:b9:30:f6:ae:f5:12:21:79:ac:08:8a:86:89:72 )\n</code></pre>\n\n<p>You cannot edit or update the metadata after creating it, but you can use the <code>tidy</code> command to delete it once the associated certificate has expired or been revoked. The metadata information is typically useful only as long as the certificate it describes is useful. Therefore, metadata information should be cleaned up in the same manner that certificates are cleaned up, by using the tidy endpoint(s).</p>\n\n<p>Because the expiration date of the certificate is stored on the metadata entry itself, the tidy operation simply compares that date with the current date and deletes the entry if the certificate it describes has expired.</p>\n\n<p>This does require you to enable metadata individually on each role. We do not expect this to be a concern, even with a large number of roles, as they would usually be generated using Terraform templates.</p>\n\n<h3>Other metadata creation methods</h3>\n\n<p>Role-based configuration does not cover every endpoint that can be used to generate a certificate.  For instance, certificate authority (CA) generation and <a href=\"https://developer.hashicorp.com/vault/docs/secrets/pki/cieps\">CIEPS</a> do not use roles. These methods have less obvious value than role-based issuance because:</p>\n\n<ul>\n<li>CAs are usually generated very rarely, and therefore are much easier to track relevant metadata manually.</li>\n<li>Because <a href=\"https://developer.hashicorp.com/vault/api-docs/secret/pki#read-certificate-metadata\">ACME</a> and <a href=\"https://developer.hashicorp.com/vault/docs/secrets/pki/est\">EST</a> are independent protocols, they cannot easily accept a “metadata” field.</li>\n<li>CIEPS, by design, requires an external policy service, and by integrating such a service you  already have an integration point you can use to create and associate metadata with a certificate if desired.</li>\n</ul>\n\n<h2>Learn more</h2>\n\n<p>Creating custom metadata for PKI certificates further enhances HashiCorp Vault’s PKI and secret lifecycle management capabilities to help enterprises reduce risks and improve efficiency. The ability to centralize secrets management along with certificate lifecycle management further differentiates Vault’s <a href=\"https://www.hashicorp.com/infrastructure-cloud/security-lifecycle-management\">Security Lifecycle Management</a> portfolio.</p>\n\n<p>To learn more, check out these resources:</p>\n\n<ul>\n<li><a href=\"https://www.hashicorp.com/blog/what-is-public-key-infrastructure-pki\">What is PKI?</a></li>\n<li><a href=\"https://developer.hashicorp.com/vault/docs/secrets/pki\">PKI secrets engine</a></li>\n<li><a href=\"https://www.vaultproject.io/use-cases/automated-pki-infrastructure\">Automated PKI infrastructure</a></li>\n</ul>\n","author":"David Mills","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"d7fd839e4a83d8766515649d51c8ddcd613761230efc2235e8a83b0e4b46d871","category":"Tech"}