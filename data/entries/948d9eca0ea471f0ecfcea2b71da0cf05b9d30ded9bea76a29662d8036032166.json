{"title":"CSS Responsive Multi-Line Ribbon Shapes (Part 1)","link":"https://smashingmagazine.com/2023/11/css-responsive-multi-line-ribbon-shapes-part1/","date":1700042400000,"content":"<p>Back in the early 2010s, it was nearly impossible to avoid ribbon shapes in web designs. It was actually back in 2010 that <a href=\"https://css-tricks.com/snippets/css/ribbon/\">Chris Coyier shared a CSS snippet</a> that I am sure has been used thousands of times over.</p>\n<p>And for good reason: ribbons are fun and interesting to look at. They’re often used for headings, but that’s not all, of course. You’ll find corner ribbons on product cards (“Sale!”), badges with trimmed ribbon ends (“First Place!”), or even ribbons as icons for bookmarks. Ribbons are playful, wrapping around elements, adding depth and visual anchors to catch the eye’s attention. </p>\n<p>I have created <a href=\"https://css-generators.com/ribbon-shapes/\">a collection of more than 100 ribbon shapes</a>, and we are going to study a few of them in this little two-part series. The challenge is to rely on a single element to create different kinds of ribbon shapes. What we really want is to create a shape that accommodates as many lines of text as you throw at them. In other words, there is no fixed dimension or magic numbers — the <strong>shape should adapt to its content</strong>.</p>\n<p>Here is a demo of what we are building in this first part:</p>\n<p><img src=\"https://files.smashing.media/articles/css-responsive-multi-line-ribbon-shapes-part1/1-ribbon-shapes.png\" /></p>\n<p>Sure, this is not the exact ribbon shape we want, but all we are missing is the cutouts on the ends. The idea is to first start with this generic design and add the extra decoration as we go.</p>\n<p>Both ribbons in the demo we looked at are built using pretty much the same exact CSS; the only differences are nuances that help differentiate them, like color and decoration. That’s my secret sauce! Most of <a href=\"https://css-generators.com/ribbon-shapes/\">the ribbons from my generator</a> share a common code structure, and I merely adjust a few values to get different variations.</p>\nLet’s Start With The Gradients\n<p>Any time I hear that a component’s design needs to be repeated, I instantly think of background gradients. They are perfect for creating repeatable patterns, and they are capable of drawing lines with hard stops between colors.</p>\n<p>We’re essentially talking about applying a background behind a text element. Each line of text gets the background and repeats for as many lines of text as there happens to be. So, the gradient needs to be as tall as one line of text. If you didn’t know it, we recently got the new line height (<code>lh</code>) unit in CSS that allows us to get the computed value of the element’s <code>line-height</code>. In our case, <code>1lh</code> will always be equal to the height of one line of text, which is perfect for what we need.</p>\n<p><img src=\"https://files.smashing.media/articles/css-responsive-multi-line-ribbon-shapes-part1/2-new-line-height-lh.png\" /></p>\n<p><strong>Note:</strong> <em>It appears that Safari uses the computed line height of a parent element rather than basing the <code>lh</code> unit on the element itself. I’ve accounted for that in the code by explicitly setting a <code>line-height</code> on the <code>body</code> element, which is the parent in our specific case. But hopefully, that will be unnecessary at some point in the future.</em></p>\n<p>Let’s tackle our first gradient. It’s a rectangular shape behind the text that covers part of the line and leaves breathing space between the lines.</p>\n<p><img src=\"https://files.smashing.media/articles/css-responsive-multi-line-ribbon-shapes-part1/3-gradient-color-space-between-lines.png\" /></p>\n<p>The gradient’s red color is set to <code>70%</code> of the height, which leaves <code>30%</code> of transparent color to account for the space between lines. </p>\n<pre><code>h1 {\n  --c: #d81a14;\n\n  background-image: linear-gradient(var(--c) 70%, #0000 0);\n  background-position: 0 .15lh;\n  background-size: 100% 1lh;\n}\n</code></pre>\n\n<p>Nothing too complex, right? We've established a background gradient on an <code>h1</code> element. The color is controlled with a CSS variable (<code>--c</code>), and we’ve sized it with the <code>lh</code> unit to align it with the text content.</p>\n<p>Note that the offset (<code>.15lh</code>) is equal to half the space between lines. We could have used a gradient with three color values (e.g., <code>transparent</code>, <code>#d81a14</code>, and <code>transparent</code>), but it’s more efficient and readable to keep things to two colors and then apply an offset.</p>\n<p>Next, we need a second gradient for the wrapped or slanted part of the ribbon. This gradient is positioned behind the first one. The following figure demonstrates this with a little opacity added to the front ribbon’s color to see the relationship better.</p>\n<p><img src=\"https://files.smashing.media/articles/css-responsive-multi-line-ribbon-shapes-part1/4-gradient-wrapped-part-ribbon.png\" /></p>\n<p>Here’s how I approached it:</p>\n<div>\n<pre><code>linear-gradient(to bottom right, #0000 50%, red 0 X, #0000 0);\n</code></pre>\n</div>\n\n<p>This time, we’re using keywords to set the gradient’s direction (<code>to bottom right</code>). Meanwhile, the color starts at the diagonal (<code>50%</code>) instead of its default <code>0%</code> and should stop at a value that we’re indicating as <code>X</code> for a placeholder. This value is a bit tricky, so let’s get a visual that illustrates what we’re doing.</p>\n<p><img src=\"https://files.smashing.media/articles/css-responsive-multi-line-ribbon-shapes-part1/5-gradient-direction.png\" /></p>\n<p>The green arrow illustrates the gradient direction, and we can see the different color stops: <code>50%</code>, <code>X</code>, and <code>100%</code>. We can apply some geometry rules to solve for <code>X</code>:</p>\n<pre><code>(X - 50%) / (100% - 50%) = 70%/100%\nX = 85%\n</code></pre>\n\n<p>This gives us the exact point for the end of the gradient’s hard color stop. We can apply the <code>85%</code> value to our gradient configuration in CSS:</p>\n<div>\n<pre><code>h1 {\n  --c: #d81a14;\n\n  background-image: \n    linear-gradient(var(--c) 70%, #0000 0), \n    linear-gradient(to bottom left, #0000 50%, color-mix(in srgb, var(--c), #000 40%) 0 85%, #0000 0);\n  background-position: 0 .15lh;\n  background-size: 100% 1lh;\n}\n</code></pre>\n</div>\n\n<p>You’re probably noticing that I added the new <a href=\"https://www.smashingmagazine.com/2022/06/simplify-color-palette-css-color-mix/\"><code>color-mix()</code> function</a> to the second gradient. Why introduce it now? Because we can use it to mix the main color (<code>#d81a14</code>) with white or black. This allows us <a href=\"https://css-tip.com/color-shades-color-mix/\">to get darker or lighter values of the color</a> without having to introduce more color values and variables to the mix. It helps keep things efficient!</p>\n<p><img src=\"https://files.smashing.media/articles/css-responsive-multi-line-ribbon-shapes-part1/6-gradient-clip-path.png\" /></p>\n<p>We have all of the coordinates we need to make our cuts using the <code>polygon()</code> function on the <code>clip-path</code> property. Coordinates are not always intuitive, but I have expanded the code and added a few comments below to help you identify some of the points from the figure.</p>\n<pre><code>h1 {\n  --r: 10px; /* control the cutout */\n\n  clip-path: polygon(\n   0 .15lh, /* top-left corner */\n   100% .15lh, /* top right corner */\n   calc(100% - var(--r)) .5lh, /* top-right cutout */\n   100% .85lh,\n   100% calc(100% - .15lh), /* bottom-right corner  */\n   0 calc(100% - .15lh), /* bottom-left corner */\n   var(--r) calc(100% - .5lh), /* bottom-left cutout */\n   0 calc(100% - .85lh)\n  );\n}\n</code></pre>\n\n<p>This completes the first ribbon! Now, we can wrap things up (pun intended) with the second ribbon.</p>\n<h3>The Second Ribbon</h3>\n<p>We will use both pseudo-elements to complete the shape. The idea can be broken down like this:</p>\n<ol>\n<li>We <strong>create two rectangles</strong> that are placed at the start and end of the ribbon. </li>\n<li>We <strong>rotate the two rectangles</strong> with an angle that we define using a new variable, <code>--a</code>.</li>\n<li>We <strong>apply a <code>clip-path</code></strong> to create the triangle cutout and trim where the green gradient overflows the top and bottom of the shape.</li>\n</ol>\n<p><img src=\"https://files.smashing.media/articles/css-responsive-multi-line-ribbon-shapes-part1/7-second-ribbon.png\" /></p>\n<p>First, the variables:</p>\n<pre><code>h1 {\n  --r: 10px;  /* controls the cutout */\n  --a: 20deg; /* controls the rotation */\n  --s: 6em;   /* controls the size */\n}\n</code></pre>\n\n<p>Next, we’ll apply styles to the <code>:before</code> and <code>:after</code> pseudo-elements that they share in common:</p>\n<pre><code>h1:before,\nh1:after {\n  content: \"\";\n  position: absolute;\n  height: .7lh;\n  width: var(--s);\n  background: color-mix(in srgb, var(--c), #000 40%);\n  rotate: var(--a);\n}\n</code></pre>\n\n<p>Then, we position each pseudo-element and make our clips:</p>\n<div>\n<pre><code>h1:before {\n  top: .15lh;\n  right: 0;\n  transform-origin: top right;\n  clip-path: polygon(0 0, 100% 0, calc(100% - .7lh / tan(var(--a))) 100%, 0 100%, var(--r) 50%);\n}\n\nh1:after {\n  bottom: .15lh;\n  left: 0;\n  transform-origin: bottom left;\n  clip-path: polygon(calc(.7lh / tan(var(--a))) 0, 100% 0, calc(100% - var(--r)) 50%, 100% 100%, 0 100%);\n}\n</code></pre>\n</div>\n\n<p>We are almost done! We still have some unwanted overflow where the repeating gradient bleeds out of the top and bottom of the shape. Plus, we need small cutouts to match the pseudo-element’s shape.</p>\n<p><img src=\"https://files.smashing.media/articles/css-responsive-multi-line-ribbon-shapes-part1/8-second-ribbon-clip-path.png\" /></p>\n<p>It’s <code>clip-path</code> again to the rescue, this time on the main element:</p>\n<div>\n<pre><code>clip-path: polygon(\n    0 .15lh,\n    calc(100% - .7lh/sin(var(--a))) .15lh,\n    calc(100% - .7lh/sin(var(--a)) - 999px) calc(.15lh - 999px*tan(var(--a))),\n    100% -999px,\n    100% .15lh,\n    calc(100% - .7lh*tan(var(--a)/2)) .85lh,\n    100% 1lh,\n    100% calc(100% - .15lh),\n    calc(.7lh/sin(var(--a))) calc(100% - .15lh),\n    calc(.7lh/sin(var(--a)) + 999px) calc(100% - .15lh + 999px*tan(var(--a))),\n    0 999px,\n    0 calc(100% - .15lh),\n    calc(.7lh*tan(var(--a)/2)) calc(100% - .85lh),\n    0 calc(100% - 1lh)\n);\n</code></pre>\n</div>\n\n<p>Ugh, looks scary! I’m taking advantage of a new set of <a href=\"https://web.dev/articles/css-trig-functions\">trigonometric functions</a> that help a bunch with the calculations but probably look foreign and confusing if you’re seeing them for the first time. There is a mathematical explanation behind each value in the snippet that I’d love to explain, but it’s long-winded. That said, I’m more than happy to explain them in greater detail if you drop me a line in the comments.</p>\n<p>Our second ribbon is completed! Here is the full demo again with both variations.</p>\n<p><img src=\"https://files.smashing.media/articles/css-responsive-multi-line-ribbon-shapes-part1/9-two-ribbon-variations-css.png\" /></p>\n<p>You can still find the code within <a href=\"https://css-generators.com/ribbon-shapes/\">my ribbons collection</a>, but it’s a good exercise to try writing code without. Maybe you will find a different implementation than mine and want to share it with me in the comments! In the next article of this two-part series, we will increase the complexity and produce two more interesting ribbon shapes.</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2019/04/art-direction-for-the-web-using-css-shapes/\">Art Direction For The Web Using CSS Shapes</a>,” Andrew Clarke</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2018/09/css-shapes/\">Take A New Look At CSS Shapes</a>,” Rachel Andrew</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2015/05/creating-responsive-shapes-with-clip-path/\">Creating Responsive Shapes With Clip-Path And Breaking Out Of The Box</a>,” Karen Menezes</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2018/05/future-of-web-design/\">New CSS Features That Are Changing Web Design</a>,” Zell Liew</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"948d9eca0ea471f0ecfcea2b71da0cf05b9d30ded9bea76a29662d8036032166","category":"Tech"}