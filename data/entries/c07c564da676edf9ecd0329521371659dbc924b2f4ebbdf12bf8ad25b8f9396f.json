{"title":"CDK for Terraform 0.6 Adds Unit Testing","link":"https://www.hashicorp.com/blog/cdk-for-terraform-0-6-adds-unit-testing","date":1631732400000,"content":"<p>We are excited to announce the release of Cloud Development Kit (CDK) for HashiCorp Terraform 0.6. With <a href=\"https://github.com/hashicorp/terraform-cdk\">CDK for Terraform</a>, you can write Terraform configurations in your choice of C#, Python, TypeScript, or Java (Go experimental), and still benefit from the full ecosystem of Terraform providers and modules. CDK for Terraform 0.6 adds an opinionated unit-testing workflow for testing your infrastructure code.</p>\n<p>Key improvements in the CDK for Terraform 0.6 include:</p>\n<ul>\n<li><strong>Unit testing</strong>: <a href=\"https://jestjs.io/\">Jest</a>-based unit testing</li>\n<li><strong>Terraform functions</strong>: A wrapper library for using Terraform functions to calculate values based on data sources and other runtime values</li>\n<li><strong>Bug fixes</strong>: Hide sensitive output</li>\n<li><strong>Shell completions:</strong> Bash and zsh shell completions for cdktf-cli</li>\n</ul>\n<h2><a href=\"#jest-for-snapshot-tests-and-assertions\">»</a><a></a>Jest for Snapshot Tests and Assertions</h2>\n<p>CDK for Terraform provides a workflow where writing infrastructure as code can feel like writing software. Since testing is a key part of writing high quality software, this release adds support for unit-testing TypeScript infrastructure code using <a href=\"https://jestjs.io/\">Jest</a> to do snapshot tests and assertions. Support for testing in other languages will be added in future releases.</p>\n<h3><a href=\"#snapshot-tests\">»</a><a></a>Snapshot Tests</h3>\n<p>Snapshot tests compare the synthesized Terraform configuration to a previously saved “snapshot” version. During refactoring, this provides a high level of confidence that no unintended changes were introduced. Snapshot tests run very quickly, and provide a high level of test coverage with a few test cases.</p><pre><code>import { Testing } from \"cdktf\";\nimport { Image, Container } from \"../.gen/providers/docker\";\nimport MyApplicationsAbstraction from \"../app\";\n\ndescribe(\"Unit testing using snapshots\", () =&gt; {\n  it(\"Tests a custom abstraction\", () =&gt; {\n    expect(\n      Testing.synthScope((stack) =&gt; {\n        const app = new MyApplicationsAbstraction(scope, \"my-app\", {});\n        app.addEndpoint(\"127.0.0.1\");\n      })\n    ).toMatchSnapshot();\n  });\n});</code></pre><h3><a href=\"#assertions\">»</a><a></a>Assertions</h3>\n<p>Assertions allow fine-grained testing of your generated Terraform configurations. For example, the following tests first confirm that the generated code has a <code>Container</code> resource at all, then validates that the container image is <code>ubuntu:latest</code>:</p><pre><code>import { Testing } from \"cdktf\";\nimport { Image, Container } from \"../.gen/providers/docker\";\nimport MyApplicationsAbstraction from \"../app\";\n\ndescribe(\"Unit testing using assertions\", () =&gt; {\n  it(\"should contain a container\", () =&gt; {\n    expect(\n      Testing.synthScope((scope) =&gt; {\n        new MyApplicationsAbstraction(scope, \"my-app\", {});\n      })\n    ).toHaveResource(Container);\n  });\n\n  it(\"should use an ubuntu image\", () =&gt; {\n    expect(\n      Testing.synthScope((scope) =&gt; {\n        new MyApplicationsAbstraction(scope, \"my-app\", {});\n      })\n    ).toHaveResourceWithProperties(Image, { name: \"ubuntu:latest\" });\n  });\n});</code></pre><p>Finally, you can automate validation that the resulting code plans successfully:</p><pre><code>it(\"check if this can be planned\", () =&gt; {\n  const app = Testing.app();\n  const stack = new TerraformStack(app, \"test\");\n\n  const app = new MyApplicationsAbstraction(stack, \"my-app\", {});\n  app.addEndpoint(\"127.0.0.1\");\n\n  expect(Testing.fullSynth(app)).toPlanSuccessfully();\n});</code></pre><p>Internally, the testing is powered by Jest, a popular JavaScript testing framework. Jest automates snapshot management and should be familiar to most TypeScript developers.</p>\n<p>For more details on how to test your infrastructure code, see the <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/docs/working-with-cdk-for-terraform/testing.md\">CDK for Terraform Testing documentation</a> on GitHub.</p>\n<h2><a href=\"#other-improvements\">»</a><a></a>Other Improvements</h2>\n<p>CDK for Terraform 0.6 also improves handling of native Terraform functions, adds Bash and zsh shell completion, and includes a variety of other improvements and bug fixes. See the <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/docs/working-with-cdk-for-terraform/terraform-functions.md\">function documentation</a> for details on using Terraform functions. The <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/CHANGELOG.md\">CDK for Terraform changelog</a> contains a comprehensive list of enhancements and bug fixes included in this release.</p>\n<p>Please note that CDK for Terraform 0.6 contains breaking changes that will require code updates if you use <code>Aspects</code>, <code>construct.node.addInfo()</code>, <code>construct.node.addWarning()</code>, <code>construct.node.Error()</code>, <code>construct.onPrepare()</code>, or <code>construct.prepare()</code>. Please see the <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/CHANGELOG.md#moved-functionality\">CHANGELOG</a> and <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/docs/upgrade-guide/upgrading-to-0.6.md\">0.6 Upgrade Guide</a> for details.</p>\n<h2><a href=\"#try-cdk-for-terraform\">»</a><a></a>Try CDK for Terraform</h2>\n<p>If you’re new to the project, the tutorials for <a href=\"https://learn.hashicorp.com/tutorials/terraform/cdktf\">CDK for Terraform on HashiCorp Learn</a> are the best way to get started. We also have language-specific guides and documentation in our <a href=\"https://github.com/hashicorp/terraform-cdk\">GitHub repository</a>.</p>\n<p>Check out the recording of our <a href=\"https://www.youtube.com/watch?v=9Is4QJT2664\">Terraform Community Office Hours</a> for a demo and detailed explanation of the new testing tools.</p>\n<p>Whether you’re experimenting or actively using CDK for Terraform, we’d love to hear from you. We’re particularly looking for feedback on the new testing functionality — please <a href=\"https://github.com/hashicorp/terraform-cdk/issues/new?assignees=&amp;labels=bug%2C+new&amp;template=bug-report.md&amp;title=\">file any bugs you encounter</a>, let us know about your <a href=\"https://github.com/hashicorp/terraform-cdk/issues/new?assignees=&amp;labels=enhancement%2C+new&amp;template=feature-request.md&amp;title=\">feature requests</a> (for example, if you’d find Python testing useful), and share other questions, thoughts, and experiences in the <a href=\"https://discuss.hashicorp.com/c/terraform-core/cdk-for-terraform/47\">CDK for Terraform discussion forum</a>.</p>","author":"Daniel Dreier","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"c07c564da676edf9ecd0329521371659dbc924b2f4ebbdf12bf8ad25b8f9396f","category":"Tech"}