{"title":"บันทึกเรื่อง Moving IO to the edges of your app: Functional Core, Imperative Shell","link":"https://www.somkiat.cc/note-moving-io-to-the-edges-of-your-app/","date":1725859289000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/09/in-perfect-world-01-150x150.jpg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/09/in-perfect-world-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2024/09/in-perfect-world-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/09/in-perfect-world-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/09/in-perfect-world-01.jpg\" width=\"650\" height=\"353\" /></a></figure>\n\n\n\n<p>เห็น share VDO เรื่อง <strong><a href=\"https://www.youtube.com/watch?v=P1vES9AgfC4\">Moving IO to the edges of your app: Functional Core, Imperative Shell</a></strong><br />มีหลายเรื่องที่น่าสนใจ เช่น</p>\n\n\n\n<ul>\n<li>การจัดการเกี่ยวกับ dependency เช่น I/O ควรทำอย่างไร</li>\n\n\n\n<li>เรื่องของ pure functio ในส่วนของ business logic</li>\n\n\n\n<li>Function code และ Imperative shell มันคืออะไร</li>\n</ul>\n\n\n\n<p>มาดูกันหน่อย แบบมั่ว ๆ ไป ตามที่เข้าใจ</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>สิ่งที่ชอบมาก ๆ คือรูปนี้ น่าจะอธิบายได้ดีมาก ๆ</strong></p>\n\n\n\n<ul>\n<li>ในส่วนของ business logic นั้น ควรเป็นอิสระจากส่วนอื่น ๆ ไม่ออกไปข้างนอกเลย เช่น I/O, database เป็นต้น</li>\n\n\n\n<li>ในส่วนของ business logic นั้น สามารถทำ <strong>unit test</strong> ได้ง่าย ๆ </li>\n\n\n\n<li>ไม่ควรมีการ injection พวก dependency เข้ามาใน business logic เลย หรือ มีเท่าที่จำเป็น มิเช่นนั้นก็จะ injection กับมากมาย เยอะไป ลำบากอีก ทำได้กับทำแล้วดี มันคนละเรื่อง</li>\n\n\n\n<li>ถ้าต้องการทำงาน หรือ ทดสอบกับพวก I/O ต่าง ๆ หรือ dependency ต่าง ๆ ควรทำ <strong>Integration test</strong> หรือ ต่อไปจริง ๆ เลยดีกว่า  เนื่องจาก technology ในปัจจุบันมันเอื้อมากยิ่งขึ้น (คำว่าต่อจริงนั้น คือ ใช้ของจริง หรือ ของเหมือนจริงก็ได้ เช่น ใช้ Test container เข้ามาช่วย)</li>\n</ul>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/09/testable-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/09/testable-01-1024x495.jpg\" width=\"575\" height=\"278\" /></a></figure>\n\n\n\n<p><strong>หรือเป็น Domain centric นั่นเอง รูปมันคุ้น ๆ เหมือนพวก hexagonal หรือ clean architecture ไหมนะ</strong></p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/09/domain-centric-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/09/domain-centric-01.jpg\" width=\"377\" height=\"286\" /></a></figure>\n\n\n\n<p><strong>แต่ในการทำงานจริง ๆ เรามักจะเน้นทำให้เสร็จกันไว้ก่อน</strong><br />ทำให้ logic การทำงาน รวมไปกับ dependency ต่าง ๆ มากมาย<br />ส่งผลให้เกิดปัญหามากมายตามมา เนื่องจากมี side effect เยอะ<br />รวมทั้งเรื่องการทดสอบก็ทำได้ยากตามมาอีกด้วย<br />ยากไม่ได้บอกว่าทำไม่ได้ แต่ถ้าเข้าใจปัญหาตั้งแต่ต้นจะได้จัดการได้ถูกต้อง</p>\n\n\n\n<p><strong>ดัวนั้นในการเขียน code ที่ดีควรจะต้อง</strong></p>\n\n\n\n<ul>\n<li>รับ input เท่าที่ต้องการใช้งานเท่านั้น และส่งผลลัพธ์ออกมา</li>\n\n\n\n<li>input เหมือนเดิม ต้องได้ output เหมือนเดิมเสมอ</li>\n\n\n\n<li>ไม่มี side effect ใด ๆ</li>\n</ul>\n\n\n\n<p><strong>Function code และ Imperative shell  (FCIS) มันคืออะไร ?</strong></p>\n\n\n\n<p>ทำไมรูปมันคุ้น ๆ </p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/09/fcis-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/09/fcis-01.jpg\" width=\"278\" height=\"264\" /></a></figure>\n\n\n\n<ul>\n<li><strong>Function core</strong> คือส่วนการทำงานหลัก เช่น business logic, rule ต่าง ๆ และ data processing เป็นต้น ซึ่งเป็น pure function ไม่มี side effect ใด ๆ นั่นคือไม่ส่งผลต่อส่วนอื่น ๆ หรือ ส่วนอื่น ๆ ไม่ส่งผลต่อการทำงาน</li>\n\n\n\n<li><strong>Imperative shell</strong> คือส่วนของระบบงานที่ต้องเจอ side effect ต่าง ๆ ว่าระบบงานจะ handle หรือจัดการอย่างไร เช่น การเชื่อมต่อ database, การเรียก service ผ่าน HTTP protocol, จัดการ logging และทำงานร่วมกับพวก 3-party ต่าง ๆ มันคือตัวกลางเชื่อมต่อระหว่าง Function core ไปยังส่วนงานภายนอกนั่นเอง</li>\n</ul>\n\n\n\n<p><strong>ตัวอย่างการทำงานของ FCID</strong></p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/09/fisc-02-scaled.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/09/fisc-02-1024x195.jpg\" width=\"554\" height=\"105\" /></a></figure>\n\n\n\n<p>น่าสนใจมาก ๆ สำหรับการออกแบบระบบ และ จัดการตามแนวคิดนี้</p>\n\n\n\n<p><strong>Reference websites</strong></p>\n\n\n\n<ul>\n<li><a href=\"https://levelup.gitconnected.com/for-cleaner-domains-move-io-to-the-edges-of-your-app-baa2a2588767\" target=\"_blank\">For Cleaner Domains, Move IO to the Edges of Your App</a></li>\n\n\n\n<li><a href=\"https://medium.com/@albert.llousas/building-modern-architectures-functional-core-imperative-shell-revamp-0bb5ae62b589\" target=\"_blank\">Building modern architectures: Functional Core, Imperative Shell revamp</a></li>\n</ul>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"d26e0ba644014d7c5cc32870b84f90e7fcc77042e70350ac443e81c41eae2c35","category":"Thai"}