{"title":"Consul 1.18 GA improves enterprise reliability with Long-Term Support","link":"https://www.hashicorp.com/blog/consul-1-18-ga-improves-enterprise-reliability-with-long-term-support","date":1709748000000,"content":"<p>We're excited to announce that HashiCorp Consul 1.18 is now generally available. This release introduces significant enhancements for HashiCorp Consul, our service networking solution designed to help users discover and securely connect any application across any cloud or runtime. These new capabilities aid organizations in increasing enterprise reliability and scale, facilitating easier deployment and management of distributed applications across various environments.</p>\n\n<p>This blog post will take a closer look at the key enhancements in Consul 1.18:</p>\n\n<ul>\n<li>Long-Term Support (LTS) releases for Consul Enterprise</li>\n<li>Fault injection for Consul Enterprise service mesh</li>\n<li>Consul ECS runtime enhancements: Transparent proxy, API gateways, and terminating gateways</li>\n</ul>\n\n<h2>Enterprise reliability</h2>\n\n<p>Two of Consul 1.18’s major new features enhance enterprise reliability, reduce maintenance burden, and enable service resiliency improvements.</p>\n\n<h3>Long-Term Support releases (Enterprise)</h3>\n\n<p>We’re pleased to introduce a Long-Term Support (LTS) release program for self-managed Consul Enterprise, starting with versions 1.15 and 1.18. This program designates the first major release of each calendar year, typically in late February, as an LTS release. The annual LTS release will receive critical fixes and security patches for two years as well as a hardened upgrade path to the next LTS release.</p>\n\n<p>Upgrading critical software is a balancing act: Action incurs engineering effort and risks, while inaction leaves vulnerabilities and defects open. Consul Enterprise LTS reduces both overhead and risk beyond the industry standard by providing critical fixes for an extra year without requiring major upgrades.</p>\n\n<p>For more information, refer to this blog post: <a href=\"https://www.hashicorp.com/blog/consul-enterprise-long-term-support-lts-improves-operational-efficiency\">Consul Enterprise Long-Term Support (LTS) improves operational efficiency</a>.</p>\n\n<h3>Fault injection for service mesh (Enterprise)</h3>\n\n<p>Fault injection for service mesh enables organizations to explore and enhance their system resilience in microservice architectures. Teams can explore service behavior in response to problems with an upstream service by injecting faults without changing application code.</p>\n\n<p>For example, how does the ‘frontend’ service respond to latency from the ‘api’ service? Just configure the service mesh to cause the ‘api’ service to automatically add 3,000ms of latency to 100% of requests. The developers of the ‘frontend’ service can then iteratively modify and test their code to provide a better consumer experience when facing latency.</p>\n\n<p>Three fault types can be introduced to a specified percentage of HTTP or gRPC traffic to a service:</p>\n\n<ul>\n<li>Error code (e.g. 429 too many requests)</li>\n<li>Response latency (e.g. 5,000ms)</li>\n<li>Response rate limit (e.g. 1,000KiB/s)</li>\n</ul>\n\n<p>Faults can also be conditionally injected based on request header matching. Referencing the previous example, the service mesh could be configured to inject latency to ‘api’ service responses only when the <code>X-FAULT-INJECTION-OPT-IN</code> request header has the value <code>true</code>. Now, ‘frontend’ service developers can opt into latency in ‘api’ service responses by including that request header.</p>\n\n<p>Refer to the <a href=\"https://developer.hashicorp.com/consul/docs/connect/manage-traffic/fault-injection\">fault injection documentation</a> for more information.</p>\n\n<h2>Expanded runtime support</h2>\n\n<p>Consul is designed to provide a unified solution across any cloud and any runtime, including:</p>\n\n<ul>\n<li>Virtual machines (VMs) and bare metal machines</li>\n<li>Kubernetes</li>\n<li><a href=\"https://www.hashicorp.com/products/nomad\">HashiCorp Nomad</a>: A simple and flexible scheduler and orchestrator for managing containers <em>and</em> non-containerized applications</li>\n<li>Amazon ECS: Serverless container runtime</li>\n<li>AWS Lambda: Serverless function runtime</li>\n</ul>\n\n<p>Consul 1.18 includes several enhancements to the maturity of its Amazon ECS runtime adaptation:</p>\n\n<h3>Amazon ECS: Transparent proxy support</h3>\n\n<p>Transparent proxy mode is a feature available on some Consul runtimes (<a href=\"https://developer.hashicorp.com/consul/docs/k8s/connect/transparent-proxy\">Kubernetes</a>, <a href=\"https://www.hashicorp.com/blog/using-consul-s-transparent-proxy-on-virtual-machines\">VMs</a>) that simplifies both:</p>\n\n<ul>\n<li><strong>Security:</strong> All outbound traffic from, and inbound traffic to, a service must go through its local service mesh sidecar proxy. Therefore, the service mesh cannot be bypassed, ensuring enforcement of all policies — such as service-to-service authorization.</li>\n<li><strong>Service onboarding:</strong> Services can reference their upstreams without needing to explicitly configure them in a Consul service definition.</li>\n</ul>\n<img src=\"https://www.datocms-assets.com/2885/1709745481-ecs-with-transparent-proxy.png\" alt=\"This\" /><p>Consul 1.18 and <a href=\"https://developer.hashicorp.com/consul/docs/ecs\">Consul ECS 0.8</a> add support for transparent proxy mode for ECS on Amazon EC2 tasks. With transparent proxy mode enabled, all traffic to and from each application container will pass through the sidecar proxy container within the same task.</p>\n\n<p>Refer to the <a href=\"https://developer.hashicorp.com/consul/docs/ecs/tech-specs\">Consul ECS technical specifications</a> and the <a href=\"https://github.com/hashicorp/terraform-aws-consul-ecs/tree/main/examples/dev-server-ec2-transparent-proxy\">EC2 with transparent proxy example deployment</a> for more details.</p>\n\n<h3>Amazon ECS: Expanded gateway support for mesh ingress and egress</h3>\n\n<p>Consul service mesh provides built-in gateways for managing traffic coming into and out of the service mesh:</p>\n\n<ul>\n<li><strong><a href=\"https://developer.hashicorp.com/consul/docs/connect/gateways/api-gateway\">API gateway</a> for ingress traffic:</strong> Controls access from services outside the mesh into the mesh, including authorization, TLS settings, and traffic management.</li>\n<li><strong><a href=\"https://developer.hashicorp.com/consul/docs/connect/gateways/terminating-gateway\">Terminating gateway</a> for egress traffic:</strong> Controls access from services in the mesh to services outside the mesh, including authorization and TLS settings.</li>\n</ul>\n\n<p>Consul 1.18 and Consul ECS 0.8 add support for configuring API and terminating gateways as ECS tasks.</p>\n\n<p>Refer to the following deployments in the Consul ECS example repository for more details:</p>\n\n<ul>\n<li><a href=\"https://github.com/hashicorp/terraform-aws-consul-ecs/tree/main/examples/api-gateway\">API gateway on ECS example</a></li>\n<li><a href=\"https://github.com/hashicorp/terraform-aws-consul-ecs/tree/main/examples/terminating-gateway-transparent-proxy\">Terminating gateway on ECS example — with transparent proxy</a></li>\n<li><a href=\"https://github.com/hashicorp/terraform-aws-consul-ecs/tree/main/examples/terminating-gateway-tls\">Terminating gateway on ECS example — with (m)TLS to the external service </a></li>\n</ul>\n\n<h2>Next steps for HashiCorp Consul</h2>\n\n<p>Our goal is for Consul to enable a consistent, enterprise-ready control plane to discover and securely connect any application. Consul 1.18 includes enhanced workflow management, reliability, and security for service networking.</p>\n\n<p>We are excited for users to try these new Consul updates and further expand their service discovery and service mesh implementations. Here’s how to get started:</p>\n\n<ul>\n<li>Learn more in the <a href=\"https://developer.hashicorp.com/consul/docs\">Consul documentation</a>.</li>\n<li>Get started with Consul 1.18 on Kubernetes by installing the latest Helm chart, provided in the <a href=\"https://developer.hashicorp.com/consul/docs/k8s/installation/install\">Consul Kubernetes documentation</a>.</li>\n<li>For more information on Consul Enterprise LTS, refer to <a href=\"https://www.hashicorp.com/blog/consul-enterprise-long-term-support-lts-improves-operational-efficiency\">Consul Enterprise Long-Term Support (LTS) improves operational efficiency</a></li>\n<li>For more information on HashiCorp’s Long-Term Support policy, refer to <a href=\"https://www.hashicorp.com/long-term-support\">HashiCorp Long-Term Support (LTS) releases</a>​​​​</li>\n<li>Try Consul Enterprise by starting a <a href=\"https://www.hashicorp.com/products/consul/trial\">free trial</a>.</li>\n</ul>\n","author":"Jared Kirschner","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"302b5a5abc5678401c4a3f4d6a5c694b3f38ca8278279cd5d9ae363585cdc102","category":"Tech"}