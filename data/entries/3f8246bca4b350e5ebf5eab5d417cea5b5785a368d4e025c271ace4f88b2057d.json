{"title":"Advanced Form Control Styling With Selectmenu And Anchoring API","link":"https://smashingmagazine.com/2023/06/advanced-form-control-styling-selectmenu-anchoring-api/","date":1685613600000,"content":"<p>No doubt you’ve had to style a <code>&lt;select&gt;</code> menu before. And when you do, you often have had to reach far down in your CSS arsenal of tricks or rely on JavaScript to get anything near the level of customization you want. It’s a long-running headache in the front-end world.</p>\n<p>Well, thanks to the efforts of the Open UI community, we have a new <code>&lt;selectmenu&gt;</code> element to look forward to, and its purpose is to provide CSS styling affordances to selection menus in ways we’ve never had before.</p>\n<p>We’re going to demonstrate an initial implementation of <code>&lt;selectmenu&gt;</code> in this article. But we’ll throw in a couple of twists while we’re at it. What we’re making is a radial select menu, something we could never have done with CSS alone. And since we're working with experimental tech, we’re going to toss in more experimental features along the way, including images, the <a href=\"https://html.spec.whatwg.org/multipage/popover.html#dom-popover\">HTML Popover API</a>, and the <a href=\"https://drafts.csswg.org/css-anchor-position-1/\">CSS Anchor Positioning API</a>. The result is going to wind up like this:</p>\n<p><img src=\"https://files.smashing.media/articles/advanced-form-control-styling-selectmenu-anchoring-api/selectmenu-diagram.png\" /></p>\n<ul>\n<li><strong><code>&lt;selectmenu&gt;</code></strong>: This is the selector itself. It holds the button and listbox of menu options.</li>\n<li><strong><code>button</code></strong>: This part toggles the visibility of the listbox between open and close.</li>\n<li><strong><code>selected-value</code></strong>: This displays the value of the menu option that is currently selected. So, if you have a listbox with three options and the second option is selected, the second option is what matches the part.</li>\n<li><strong><code>marker</code></strong>: Dropdown menus usually have some sort of downward-facing arrow icon to indicate that the menu can be expanded. This is that part of the menu.</li>\n<li><strong><code>listbox</code></strong>: This is the wrapper that contains the options and any <code>&lt;optgroup&gt;</code> elements that group certain options together inside the listbox.</li>\n<li><strong><code>&lt;optgroup&gt;</code></strong>: We already let the cat out of the bag on this one, but this part groups options together. It includes a label for the group.</li>\n<li><strong><code>&lt;option&gt;</code></strong>: A value that the user is able to select in the menu. There can be one, but it’s much more common to see a <code>&lt;select&gt;</code> — and, by extension — a <code>&lt;selectmenu&gt;</code> with multiple options.</li>\n</ul>\n<p>The other way is to <strong>slot the content ourselves</strong> in HTML. This can be a nice approach since it allows us to customize the markup any way we like. In other words, <strong>we can replace any of the parts we want</strong>, and the browser will use our markup instead of the implicit structure. In fact, this is the approach we’ll use in the radial menu we’re making.</p>\n<p>The way to replace parts in the HTML is to use the <strong>slots</strong>. The markup we use for a slot lives in a separate tree in the Shadow DOM, replacing the contents of the DOM with what we specify in the Shadow DOM.</p>\n<p>Here’s an abbreviated example in HTML. Notice how the <code>&lt;button&gt;</code> and <code>listbox</code> are both contained in slots that represent the HTML we want to use for those parts.</p>\n<pre><code>&lt;selectmenu class=\"my-custom-select\"&gt;\n  &lt;div slot=\"button\"&gt;\n    &lt;span behavior=\"selected-value\" slot=\"selected-value\"&gt;&lt;/span&gt;\n    &lt;button behavior=\"button\"&gt;&lt;/button&gt;\n  &lt;/div&gt;\n  &lt;div slot=\"listbox\"&gt;\n    &lt;div popover=\"auto\" behavior=\"listbox\"&gt;\n       &lt;option value=\"one\"&gt;one&lt;/option&gt;\n       &lt;option value=\"two\"&gt;two&lt;/option&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/selectmenu&gt;\n</code></pre>\n\n<p>By using <strong><code>slots</code></strong> and <strong><code>behavior</code></strong> as attributes, we can tell the browser how it should behave and how it should interact with keyboard navigation. If managed carefully, this will also mean that we get good accessibility out of the box because the browser will know how to behave based on what we define. </p>\n<p>Ready? OK, let’s start by setting up our markup for our radial <code>&lt;selectmenu&gt;</code>.</p>\nThe Radial Selectmenu Markup\n<p>We will start by creating our own markup for this basic example. We will use pretty much the same approach as used in the <a href=\"https://open-ui.org/components/selectmenu/#extending-the-markup\">explainer of the Selectmenu element</a> because I think it demonstrates the vast flexibility we have to style this element using similar markup.</p>\n<pre><code>&lt;selectmenu class=\"selectmenu\"&gt;\n  &lt;button class=\"selected-button\" slot=\"button\" behavior=\"button\"&gt;\n    &lt;span behavior=\"selected-value\" class=\"selected-value\"&gt;&lt;/span&gt;\n  &lt;/button&gt;\n  &lt;div slot=\"listbox\"&gt;\n    &lt;div popover behavior=\"listbox\"&gt;\n      &lt;option value=\"one\"&gt;one&lt;/option&gt;\n      &lt;option value=\"two\"&gt;two&lt;/option&gt;\n      &lt;option value=\"three\"&gt;three&lt;/option&gt;\n      &lt;option value=\"four\"&gt;four&lt;/option&gt;\n      &lt;option value=\"five\"&gt;five&lt;/option&gt;\n      &lt;option value=\"six\"&gt;six&lt;/option&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/selectmenu&gt;\n</code></pre>\n\n<p>You might notice from the markup that we’ve added the <strong><code>selected-value</code></strong> behavior in the button. This is perfectly fine, as our button will always show the selected value by doing this. </p>\n<p>And, just like the example in the explainer, we are using the <a href=\"https://open-ui.org/components/popover.research.explainer/\">Popover API</a> inside of our listbox slot. When we look at what we have in Chrome Canary, and see that it already works fine. Take note that even keyboard navigation already seems to be handled for us!</p>\n<p><img src=\"https://files.smashing.media/articles/advanced-form-control-styling-selectmenu-anchoring-api/selectmenu-layouts.png\" /></p>\n<p>We can add the following formula for our options when the popover is open by adding a transform to our options:</p>\n<pre><code>[popover]:popover-open option {\n  /* Half the size of the circle */\n  --half-circle: calc(var(--circle-size) / -2);\n\n  /* Straighten things up and space them out */\n  transform:\n      rotate(var(--deg))\n      translate(var(--half-circle))\n      rotate(var(--negative-deg));\n}\n</code></pre>\n\n<p>Now, when the <code>popover-open</code> state is triggered, we will rotate each option by a certain number of degrees, translate them along both axes by half the circle size, and rotate it once again by a negative amount of degrees. The order of the transforms is important!</p>\n<p>I said we would rotate the options “by a certain number of degrees” because we have to do it for each individual option. This is totally possible in vanilla CSS (and that’s how we’re going to do it), but it could also be done with a Sass loop or even with JavaScript if we needed it.</p>\n<p>Let’s add this to our popover style rules:</p>\n<pre><code>[popover] {\n  --rotation-divide: calc(180deg / 2);\n\n  /* etc. */\n}\n</code></pre>\n\n<p>This will be our default rotation, and it’s a special case for when we only have one option. We’ll use <code>360deg</code> for the rest in a moment.</p>\n<p>For now, we can select the first option and set the <code>--rotation-divide</code> variable on it:</p>\n<pre><code>option:nth-child(1) {\n  --deg: var(--rotation-divide);\n}\n</code></pre>\n\n<p>Great! Why you would use a <code>select</code> when there is only one option, I don’t know, but nevertheless, it’s handled gracefully:</p>\n<p><img src=\"https://files.smashing.media/articles/advanced-form-control-styling-selectmenu-anchoring-api/selectmenu-one-option.png\" /></p>\n<p>Styling the other options takes a bit of work because we have to:</p>\n<ul>\n<li>Divide the circle by the number of available options and</li>\n<li>Multiply that result for each option.</li>\n</ul>\n<p>I’m so glad we have the <code>calc()</code> function in CSS to help us do this. Otherwise, it would be some pretty heavy lifting.</p>\n<pre><code>[popover]:has(option:nth-child(2)) {\n  --rotation-divide: calc(360deg / 2);\n}\n\n[popover]:has(option:nth-child(3)) {\n  --rotation-divide: calc(360deg / 3);\n}\n\n[popover]:has(option:nth-child(4)) {\n  --rotation-divide: calc(360deg / 4);\n}\n\n[popover]:has(option:nth-child(5)) {\n  --rotation-divide: calc(360deg / 5);\n}\n\n[popover]:has(option:nth-child(6)) {\n  --rotation-divide: calc(360deg / 6);\n}\n\noption:nth-child(1) {\n  --deg: var(--rotation-divide);\n}\n\noption:nth-child(2) {\n  --deg: calc(var(--rotation-divide) * 2);\n}\n\noption:nth-child(3) {\n  --deg: calc(var(--rotation-divide) * 3);\n}\n\noption:nth-child(4) {\n  --deg: calc(var(--rotation-divide) * 4);\n}\n\noption:nth-child(5) {\n  --deg: calc(var(--rotation-divide) * 5);\n}\n\noption:nth-child(6) {\n  --deg: calc(var(--rotation-divide) * 6);\n}\n\n/* that’s enough options for you! */\noption:nth-child(1n + 7) {\n  display: none;\n}\n</code></pre>\n\n<p>Here’s a live demo of what this produces. Remember, Chrome Canary is the only browser that currently supports this, as long as the experimental features flag is enabled.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/MWPPqja\">Radial selectmenu with Anchoring API - Open UI [forked]</a> by <a href=\"https://codepen.io/utilitybend\">@utilitybend</a>.</p>\nDo We Need All Those <code>:has()</code> Pseudo-Classes?\n<p>Yeah, I think so, as long as we’re using plain CSS. And that’s been my goal all along. That said, JavaScript could be useful here.</p>\n<p>For example, we could add an ID to the element with the <code>popover</code> attribute and count the children it contains:</p>\n<div>\n<pre><code>const optionAmount = document.getElementById('popoverlistbox').childElementCount;\npopoverlistbox.style.setProperty('--children', optionAmount);\n</code></pre>\n</div>\n\n<p>That way, we can replace all the <code>:has()</code> instances with more concise styles:</p>\n<pre><code>option {\n  --rotation-divide: calc(360deg / var(--children));\n  --negative: calc(var(--deg) / -1);\n}\n</code></pre>\n\n<p>For this demo, however, you might still want to limit the <code>--children</code> custom property to a maximum of <code>6</code>. I’ve found that’s the sweet spot before the circle gets too crowded and needs additional tweaks.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/vYVVzyj\">Radial selectmenu Open UI with JS children count [forked]</a> by <a href=\"https://codepen.io/utilitybend\">@utilitybend</a>.</p>\n<h3>Let’s Animate This Thing</h3>\n<p>There are a few more CSS features coming up that will make <a href=\"https://open-ui.org/components/popover.research.explainer/#animation-of-popovers\">animating popovers</a> a lot easier. But they’re not ready for us yet, even for this example.</p>\n<p>We can get around that with a little trick. But please keep in mind that <strong>what we’re about to do will not be the best practice</strong> when we get the new animating features. I wanted to give you the information anyway because I think it’s a nice enhancement for what we’re making.</p>\n<p>First, let’s add the following to our popover selector:</p>\n<pre><code>[popover] {\n  display: block;\n  position: absolute;\n  /* etc. */\n}\n</code></pre>\n\n<p>This makes it so our popover will always be displayed <code>block</code> and ready to go wherever it is placed, and we have established a stacking context.</p>\n<p>We will lose the benefit of our top layer popover and will have to play around with a <code>z-index</code> to get the effect we want. Juggling <code>z-index</code> values — especially with a large number of items — is never fun. It gets messy fast. That’s one of the ways popovers were designed to help us.</p>\n<p> But let’s go ahead and give our button a <code>z-index</code>: </p>\n<pre><code>.selected-button {\n  z-index: 2;\n  /* etc. */\n}\n</code></pre>\n\n<p>Now we can use animations to reveal the options by using the <code>:not()</code> pseudo-class. This is how we can reset the <code>transform</code> when the popover is in its closed state:</p>\n<div>\n<pre><code>[popover]:not(:popover-open) {\n  z-index: -1;\n}\n\n[popover]:not(:popover-open) option {\n  transform: rotate(var(--deg)) translate(0) rotate(var(--negative-deg));\n}\n</code></pre>\n</div>\n\n<p>And there you have it! An animated radial <code>&lt;selectmenu&gt;</code>:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/abRRaWW\">Radial selectmenu with Anchoring API and animation [forked]</a> by <a href=\"https://codepen.io/utilitybend\">@utilitybend</a>.</p>\n<h3>Let’s Add Some Images While We’re At It</h3>\n<p>There was quite a bit of discussion about this in the Open UI community, but the selected value does not take <code>innerHTML</code> as an option as, for one, this could result in IDs being duplicated. But I sure do love a good old role-playing game, and I decided to use the <code>&lt;selectmenu&gt;</code> as a potion selector.</p>\n<p>This is completely based on everything we just covered, only adding images to demonstrate that it is possible:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/XWxxPgN\">Open-UI  - Select a potion (Chrome Canary) [forked]</a> by <a href=\"https://codepen.io/utilitybend\">@utilitybend</a>.</p>\n<p>With a sprinkle of JavaScript (for this totally optional enhancement), we can select the <code>innerHTML</code> of the <code>&lt;selectmenu&gt;</code> element and pass it to our <code>.selected-value</code> button:</p>\n<pre><code>const selectMenus = document.querySelectorAll(\"selectmenu\");\nselectMenus.forEach((menu) =&gt; {\n  const selectedvalue = menu.querySelector(\".selected-value\");\n  selectedvalue.innerHTML = menu.selectedOption.innerHTML;\n  menu.addEventListener(\"change\", () =&gt; {\n    selectedvalue.innerHTML = menu.selectedOption.innerHTML;\n  });\n});\n</code></pre>\n\nConclusion\n<p>I don’t know about you, but all of this gets me super excited for the future. Everything we looked at, from the Selectmenu element to the CSS Anchor Position API, is still a work in progress. Still, we can already see the great number of possibilities they will open up for us as designers and developers.</p>\n<p>The fact that all of this is coming by way of built-in browser features is what’s most exciting because it gives us a standard way to approach things like customized <code>&lt;select&gt;</code> menus, popovers, and anchoring to the extent that it could eliminate the need for frameworks or libraries that we use today for the same things. We win because we get more control, and users win because they get lighter page loads.</p>\n<p>If you’d like to do a bit of research on Selectmenu or even <a href=\"https://open-ui.org/get-involved/\">get involved with the Open UI community</a>, you’re more than welcome, as we need more developers to create demos and share their struggles to help make these features better if — and when — they ship.</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/01/level-up-css-skills-has-selector/\">Level Up Your CSS Skills With The :has() Selector</a>”, Stephanie Eckles</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/01/creating-high-contrast-design-system-css-custom-properties/\">Creating A High-Contrast Design System With CSS Custom Properties</a>”, Brecht De Ruyte</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/04/write-better-css-borrow-ideas-javascript-functions/\">Write Better CSS By Borrowing Ideas From JavaScript Functions</a>”, Yaphi Berhanu</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/02/build-magazine-layout-css-grid-areas/\">How To Build A Magazine Layout With CSS Grid Areas</a>”, Jennifer Brehm</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"3f8246bca4b350e5ebf5eab5d417cea5b5785a368d4e025c271ace4f88b2057d","category":"Tech"}