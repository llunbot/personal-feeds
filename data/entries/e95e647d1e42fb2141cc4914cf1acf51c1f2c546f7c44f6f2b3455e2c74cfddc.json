{"title":"สรุปการอ่านเรื่อง How Levels.fyi scaled to millions of users with Google Sheets as a backend","link":"https://www.somkiat.cc/note-how-levels-fyi-scaled-to-millions-of-users/","date":1677994299000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/architecture-levels-fyi-150x150.png\" alt srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/03/architecture-levels-fyi-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2023/03/architecture-levels-fyi-75x75.png 75w\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/architecture-levels-fyi.png\" alt width=\"567\" height=\"325\" /></figure>\n\n\n\n<p>จาก<strong><a href=\"https://www.levels.fyi/blog/scaling-to-millions-with-google-sheets.html\" target=\"_blank\">บทความ</a><a href=\"https://www.levels.fyi/blog/scaling-to-millions-with-google-sheets.html\">เรื่องการ scale ระบบของ Levels.fyi</a></strong> <br />พบว่าน่าสนใจมาก ๆ สำหรับการเริ่มต้นทำ product<br />เริ่มแบบเรียบง่ายเพื่อ validate ว่า product จะไปได้ไหม<br />จากนั้นค่อย ๆ optimize หรือปรับเปลี่ยนไปตามความต้องการ<br />หรือตาม business และคนใช้งานที่สูงขึ้น<br />ดังนั้นจึงสรุปสิ่งที่น่าสนใจไว้นิดหน่อย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>สิ่งที่ได้ใจมาก ๆ คือ เริ่มด้วยการเน้นไปที่การสร้าง product</strong></p>\n\n\n\n<p>ว่าสิ่งที่คิด มันจะ work หรือมีผู้ใช้งานหรือไม่<br />เพราะว่า แนวคิดที่คิดหรือทำมานั้น อาจจะเป็นเพียงสิ่งที่เราต้องการเองเท่านั้น !!<br />ดังนั้นการลงทุนสร้างระบบจึงเรียบง่ายมาก ๆ <br />คือเริ่มจาก Google Forms และ Google Sheets เท่านั้น (No Code ชัด ๆ)<br />ไม่ต้องมาเสียเงินพัฒนา และดูแลหลังบ้านอะไร</p>\n\n\n\n<ul><li>Frontend = Google Forms</li><li>Database = Google Sheets</li></ul>\n\n\n\n<p><strong><em>ตรงนี้เรียกว่า version 0</em></strong></p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/v0-1024x150.png\" alt /></figure>\n\n\n\n<p><strong>ต่อมาเพิ่มส่วนของ User Interface เข้ามา เพราะว่าข้อมูลเริ่มซับซ้อนขึ้น</strong></p>\n\n\n\n<p>เช่นข้อมูลเงินเดือน<br />จากนั้นก็เพิ่ม API gateway และ AWS Lambda (serverless) เข้ามา<br />เพื่อทำการตรวจสอบข้อมูล และ บันทึกข้อมูลไปยัง Google Sheets ต่อไป<br /><strong>ส่วนนี้เรียกว่า version 1</strong></p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/v1-1024x113.png\" alt /></figure>\n\n\n\n<p><strong>แต่การดึงข้อมูลจาก Google Sheets จะยากและประสิทธิภาพไม่ดี</strong><br />จึงทำการสร้างข้อมูลเป็นไฟล์ JSON ขึ้นมา<br />จากนั้นทำการเก็บไฟล์ไว้ใน <strong>Amazon S3</strong> <br />เป็นการจัดเก็บแบบ <strong>upsert</strong> คือ <br />ถ้าไม่มีก็ insert หรือสร้างใหม่ ถ้ามีก็ทำการ update นั่นเอง<br />และการใช้งานจาก web browser ก็เข้าถึงข้อมูลผ่าน CDN<br />ด้วยข้อมูลในไฟล์ JSON จะมีขนาดใหญ่<br />ดังนั้นก็ทำ caching ไว้ใน web browser อีกด้วย</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/v3-1024x336.png\" alt /></figure>\n\n\n\n<p><strong>โครงสร้างนี้ทำงานได้ดีมาเรื่อย ๆ ( 24 เดือนหรือ 2 ปี)</strong></p>\n\n\n\n<p>แต่เมื่อมีผู้ใช้งานสูงขึ้น ก็เจอปัญหาเหล่านี้</p>\n\n\n\n<ul><li>ขนาดของไฟล์ JSON มีขนาดใหญ่ขึ้น จาก KB มาเป็น MB ดังนั้นเมื่อผู้ใช้งานใหม่ เข้ามาพร้อม ๆ กัน ทำให้ loading time เยอะมาก ๆ</li><li>AWS Lambda ทำการช้า จน timeout กันไปเลย</li><li>ขาดวิธีการนำ data มาวิเคราะห์ เพื่อใช้ในการตัดสินใจ ซึ่งเป็นปัญหาที่ใหญขึ้น</li><li>Google Sheets API มาถึง rate limit ของมัน สำหรับการเขียนข้อมูล</li><li>ง่ายดูการ scrape ข้อมูลมาก ๆ เพราะว่า return เป็น JSON กลับมายัง web browser</li></ul>\n\n\n\n<p><strong>ดังนั้นจึงได้เวลาของการปรับเปลี่ยนครั้งใหญ่ของ Architecute ระบบ</strong></p>\n\n\n\n<p>โดยในฝั่ง backend ได้นำ database มาใช้เก็บข้อมูลแทน Google Sheets<br />เป็นแนวทางที่ขับเคลื่อนด้วยปัญหาที่พบ</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/v4-1024x286.png\" alt /></figure>\n\n\n\n<p><strong>รวมทั้งทำการแบ่งข้อมูลที่อยู่ในไฟล์ JSON เป็นไฟล์เล็ก ๆ</strong></p>\n\n\n\n<p>โดยทำการสร้าง API ใหม่ขึ้นมาเพื่อให้ทาง frontend เรียกใช้งาน<br />ทำแบบค่อยเป็นค่อยไป จนย้ายทุกส่วนมายัง API ใหม่<br />ฝั่งของ API server พัฒนาด้วย Node.js ทำงานบนเครื่องเดียว<br />สามารถรองรับผู้ใช้งาน 60K request ต่อชั่วโมง</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/v5-1024x103.png\" alt /></figure>\n\n\n\n<p><strong>จะเห็นได้ว่าการออกแบบระบบนั้น เป็นไปแบบธรรมชาติ</strong></p>\n\n\n\n<p>ตามเป้าหมายของระบบ นั่นคือ <br />ต้องการได้รับ feedback จากผู้ใช้งานหรือลูกค้าอย่างรวดเร็ว<br />แถมระบบต้องดีพอสำหรับผู้ใช้งานด้วยนะ<br />เพื่อช่วยทำให้มั่นใจว่า product ที่เราคิดนั้นมันใช่หรือไม่<br /><br />จากนั้นก็ค่อย ๆ ปรับปรุง ปรับเปลี่ยน ให้เหมาะสมต่อไป<br />ช่วยลดความเสี่ยงในเรื่องต่าง ๆ ลงไปได้เยอะ<br />มันคือ Evolution Architecture นั่นเอง</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"e95e647d1e42fb2141cc4914cf1acf51c1f2c546f7c44f6f2b3455e2c74cfddc","category":"Thai"}