{"title":"ปัญหาคอขวด ที่มักพบเจอในระบบงาน","link":"https://www.somkiat.cc/scaleing-problems/","date":1627291194000,"content":"<p><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/07/bottleneck-150x150.png\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/07/bottleneck-1024x552.png\" /></figure>\n\n\n\n<p>เมื่อระบบงานมีจำนวนการใช้งานที่สูงขึ้น (Work load) แล้ว<br />ปัญหาที่มักจะตามมาเช่น</p>\n\n\n\n<ul><li>ระบบไม่สามารถรองรับได้ หรือ scale ได้ทันความต้องการ</li><li>ระบบทำงานช้า</li><li>ระบบล่ม</li></ul>\n\n\n\n<p>มาดูกันว่า ต้นเหตุของปัญหามีอะไรบ้าง ?</p>\n\n\n\n<span></span>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/07/problem-scale-1024x522.png\" /></figure>\n\n\n\n<p><strong>0. เรื่องโครงสร้างและขั้นตอนขององค์กร !!</strong></p>\n\n\n\n<p><strong>1. Code ที่แย่ </strong></p>\n\n\n\n<p>คงปฏิเสธไม่ได้ว่า code ที่แย่ ๆ เป็นต้นเหตุสำคัญ<br />ซึ่งอาจจะทำงานได้ดีในระดับหนึ่ง<br />แต่เมื่อมีผู้ใช้งานถึงระดับหนึ่งแล้ว ปัญหาก็ต้องเห็นได้ชัดเจนยิ่งขึ้น<br />ทั้ง code/service ที่ผูกมัดกันสูง หรือ แยกกันมากเกินไป<br />ทั้งการใช้ algorithm ที่มี Big-O สูงเกินไป</p>\n\n\n\n<p><strong>2. การเลือกใช้เทคโนโลยีที่ไม่เหมาะสม ทั้งภาษาโปรแกรม และ Database</strong></p>\n\n\n\n<p>ยกตัวอย่างเช่นDatabase <br />บางอย่างเหมาะกับการอ่านข้อมูลDatabase <br />บางอย่างเหมาะกับการเขียนข้อมูลหรือต้องการ transaction <br />หรือ ความถูกต้องของข้อมูลสูงรวมทั้งการ scale ตามความต้องการ</p>\n\n\n\n<p><strong>3. ทำการเขียน business logic ไว้ใน Database</strong></p>\n\n\n\n<p>บางระบบทำการเขียน business logic ไว้ใน database<br />อาจจะด้วยเหตุผลใด ๆ ก็ตาม<br />ผลที่ตามมาคือ Database นั้นอาจจะ scale ไม่ทัน<br />ทำให้ยากต่อการรับมือเพราะว่า business logic ผูกติดกับ Database มากเกินไป</p>\n\n\n\n<p><strong>4. จัดการ caching ไม่ดี</strong></p>\n\n\n\n<p>ยกตัวอย่างเช่น การอ่านข้อมูลจาก Database ตรง ๆ ทุกครั้ง<br />เป็นเรื่องยากมาก ๆ สำหรับการ scale<br />ดังนั้นจึงต้องทำการ reuse connection database ด้วย Connection pool<br />หรือจำเป็นต้องทำการ caching data ที่ใช้งานบ่อย ๆ <br />เพื่อลดการเข้าถึง database ลงไป<br />หรือไปถึงพวก static data ต่าง ๆ <br />เพื่อทำ response time เร็วขึ้นหรือลด hop ของ request ลงไปให้มากที่สุด</p>\n\n\n\n<p><strong>5. การ configuration load balance ไม่ดี</strong></p>\n\n\n\n<p>บ่อยครั้งระบบงานตายเพราะว่า Load balance ไม่สามารถ scale หรือรองรับได้ทัน<br /></p>\n\n\n\n<p><strong>6. รูปแบบการติดต่อสื่อสารระหว่าง service หรือ client-server</strong></p>\n\n\n\n<p>ไม่ว่าจะเป็น REST API หรือนำ GraphQL มาใช้<br />จนถึงการใช้งาน binary protocol เช่น Protocol buffer อย่าง GRPC<br />เพื่อเพิ่มประสิทธิภาพของการติดต่อสื่อสาร<br />หรือลดการใช้งาน bandwidth ของ network ลงไป<br />รวมทั้งการเลือกใช้รูปแบบการติดต่อสื่อสารให้เหมาะสมทั้ง Sync และ Async</p>\n\n\n\n<p><strong>แต่เหนือสิ่งอื่นใด ควรจะมีระบบหรือเครื่องมือช่วยตรวจสอบปัญหา</strong></p>\n\n\n\n<p>เพื่อให้เราสามารถรู้หรือเข้าไปยังปัญหาได้อย่างรวดเร็วเพื่อแก้ไขได้ทันที<br />รวมทั้งควรมีระบบการทำ performance test ที่ดีอีกด้วย<br />อีกทั้งความรู้ของคน ทีม และ องค์กร ก็เช่นกัน</p>\n\n\n\n<p><strong>Reference Websites</strong><br /><a href=\"https://blog.devgenius.io/7-bottlenecks-that-hurt-the-scalability-of-your-system-4aa8b75627bf\" target=\"_blank\">https://blog.devgenius.io/7-bottlenecks-that-hurt-the-scalability-of-your-system-4aa8b75627bf</a></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"5f4c7392f759a041baf14d072523b8de208f88dd24e80b38dfda730cceabac64","category":"Thai"}