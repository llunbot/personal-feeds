{"title":"Solo Development: Learning To Let Go Of Perfection","link":"https://smashingmagazine.com/2025/01/solo-development-learning-to-let-go-of-perfection/","date":1736517600000,"content":"<p>As expected from anyone who has ever tried building anything solo, my goal was not to build an app but <em>the</em> app — the one app that’s so good you wonder how you ever survived without it. I had everything in place: wireframes, a to-do list, project structure — you name it. Then I started building. Just not the product. I started with the landing page for it, which took me four days, and I hadn’t even touched the app’s core features yet. The idea itself was so good I had to start marketing it right away!</p>\n<p>I found myself making every detail <em>perfect</em>: every color, shadow, gradient, font size, margin, and padding had to be spot on. I don’t even want to say how long the logo took.</p>\n<blockquote><strong>Spoiler</strong>:<br />No one cares about your logo.</blockquote>\n\n<p>Why did I get so stuck on something that was never even part of the core app I wanted so badly to build? Why wasn’t I nagging myself to move on when I clearly needed to?</p>\n<p>The reality of solo development is that there is <strong>no one to tell you when to stop</strong> or simply say, <em>“Yo, this is good enough! Move on.“</em> Most users don’t care whether a login button is yellow or green. What they want (and need) is a button that works and solves their problem when clicking it.</p>\nTest Early And Often\n<blockquote>Unnecessary tweaks, indecisive UI decisions, and perfectionism are the core reasons I spend more time on things than necessary.</blockquote>\n\n<p>Like most solo developers, I also started with the hope of pushing out builds with the efficiency of a large-scale team. But it is easier said than done.</p>\n<p>When building solo, you start coding, then you maybe notice a design flaw, and you switch to fixing it, then a bug appears, and you try fixing that, and <em>voilà</em> — the day is gone. There comes a time when it hits you that, <em>“You know what? It’s time to build messy.”</em> That’s when good intentions of project and product management go out the window, and that’s when I find myself working by the seat of my pants rather than plowing forward with defined goals and actionable tasks that are based on good UI/UX principles, like storyboards, user personas, and basic prioritization.</p>\n<p>This realization is something you have to experience to grasp fully. The trick I’ve learned is to focus on getting something out there for people to see and then work on actual feedback. In other words,</p>\n<p>It’s more important to get the idea out there and iterate on it than reaching for perfection right out of the gate.</p>\n<p>Because guess what? Even if you have the greatest app idea in the world, you’re never going to make it perfect until you start receiving feedback on it. You’re no mind reader — as much as we all want to be one — and some insights (often the most relevant) can only be received through real user feedback and analytics. Sure, your early assumptions may be correct, but how do you know until you ship them and start evaluating them?</p>\n<p>Nowadays, I like to tell others (and myself) to work from <strong>hypotheses</strong> instead of <strong>absolutes</strong>. Make an assertion, describe how you intend to test it, and then ship it. With that, you can gather relevant insights that you can use to get closer to perfection — whatever that is.</p>\nStrength In Recognizing Weakness\n<p>Let’s be real: Building a full application on your own is not an easy feat. I’d say it’s like trying to build a house by yourself; it seems doable, but the reality is that it takes a lot more hands than the ones you have to make it happen. And not only to make it happen but to make it happen well. </p>\n<p>There’s only so much one person can do, and admitting your strengths and weaknesses up-front will serve you well by avoiding the trap that you can do it all alone.</p>\n<p>I once attempted to build a project management app alone. I knew it might be difficult, but I was confident. Within a few days, this “simple” project grew legs and expanded with new features like team collaboration, analytics, time tracking, and custom reports being added, many of which I was super excited to make.</p>\n<p>Building a full app takes a lot of time. Think about it; you’re doing the work of a team all alone without any help. There’s no one to provide you with design assets, content, or back-end development. No stakeholder to <a href=\"https://css-tricks.com/the-impact-of-team-collaboration-and-communication-on-projects/\">“swoop and poop”</a> on your ideas (which might be a good thing). Every decision, every line of code, and every design element is 100% on you alone.</p>\n<p>It is technically possible to build a full-featured app solo, but when you think about it, there’s a reason why the concept of MVP exists. Take Instagram, for example; it wasn’t launched with reels, stories, creator’s insights, and so on. It started with one simple thing: <em>photo sharing</em>.</p>\n<p>All I’m trying to say is <strong>start small</strong>, <strong>launch</strong>, and <strong>let users guide the evolution of the product</strong>. And if you can recruit more hands to help, that would be even better. Just remember to leverage your strengths and reinforce your weaknesses by leaning on other people’s strengths.</p>\nYes, Think Like an MVP\n<p>The concept of a <strong>minimum viable product</strong> (MVP) has always been fascinating to me. In its simplest form, it means building the basic version of your idea that technically works and getting it in front of users. Yes, this is such a straightforward and widely distributed tip, but it’s still one of the hardest principles for solo developers to follow, particularly for me.</p>\n<p>I mentioned earlier that my “genius” app idea grew legs. And lots of them. I had more ideas than I knew what to do with, and I hadn’t even written a reasonable amount of code! Sure, this app could be enhanced to support face ID, dark mode, advanced security, real-time results, and a bunch of other features. But all these could take months of development for an app that you’re not even certain users want.</p>\n<p>I’ve learned to ask myself: <em>“What would this project look like if it was easy to build?”.</em> It’s so surreal how the answer almost always aligns with what users want. If you can distill your grand idea into a single indispensable idea that does one or two things <em>extremely well</em>, I think you’ll find — as I have — that the final result is laser-focused on solving real user problems.</p>\n<p>Ship the simplest version first. Dark mode can wait. All you need is a well-defined idea, a hypothesis to test, and a functional prototype to validate that hypothesis; anything else is probably noise.</p>\nHandle Imperfection Gracefully\n<p>You may have heard about the <a href=\"https://medium.com/the-liberators/ship-it-fast-what-does-it-mean-why-does-it-matter-and-what-can-you-improve-3ad13d9786b4\">“Ship it Fast” approach to development</a> and instantly recognize the parallels between it and what I’ve discussed so far. In a sense, “Ship it Fast” is ultimately another way of describing an MVP: get the idea out fast and iterate on it just as quickly.</p>\n<p>Some might disagree with the ship-fast approach and consider it reckless and unprofessional, which is understandable because, as developers, we care deeply about the quality of our work. However,</p>\n<p>The ship-fast mentality is not to ignore quality but to push something out ASAP and learn from real user experiences. Ship it now — perfect it later.</p>\n<p>That’s why I like to tell other developers that <strong>shipping an MVP is the safest, most professional way to approach development</strong>. It forces you to stay in scope and on task without succumbing to your whimsies. I even go so far as to make myself swear an “Oath of Focus” at the start of every project.</p>\n<blockquote>I, Vayo, hereby solemnly swear (with one hand on this design blueprint) to make no changes, no additions, and no extra features until this app is fully built in all its MVP glory. I pledge to avoid the temptations of endless tweaking and the thoughts of “just one more feature.”<br /><br />Only when a completed prototype is achieved will I consider any new features, enhancements, or tweaks.<br /><br />Signed,<br />Vayo, Keeper of the MVP</blockquote>\n\n<p>Remember, there’s no one there to hold you accountable when you develop on your own. Taking a brief moment to pause and accepting that my first version won’t be flawless helps put me in the right headspace early in the project.</p>\nPrioritize What Matters\n<p>I have noticed that no matter what I build, there’s always going to be bugs. Always. If Google still has bugs in the Google Notes app, trust me, then it’s fine for a solo developer to accept that bugs will always be a part of any project.</p>\n<p>Look at flaky tests. For instance, you could run a test over 1,000 times and get all greens, and then the next day, you run the same test, an error shows. It’s just the nature of software development. And for the case of endlessly adding features, it never ends either. There’s always going to be a new feature that you’re excited about. The challenge is <strong>to curb some of that enthusiasm and shelve it responsibly</strong> for a later time when it makes sense to work on it.</p>\n<p>I’ve learned to categorize bugs and features into two types: <strong>intrusive</strong> and <strong>non-intrusive</strong>. Intrusive are those things that prevent projects from functioning properly until fixed, like crashes and serious errors. The non-intrusive items are silent ones. Sure, they should be fixed, but the product will work just fine and won’t prevent users from getting value if they aren’t addressed right away.</p>\n<p>You may want to categorize your bugs and features in other ways, and I’ve seen plenty of other examples, including:</p>\n<ul>\n<li>High value, low value;</li>\n<li>High effort, low effort;</li>\n<li>High-cost, low-cost;</li>\n<li>Need to have, nice to have.</li>\n</ul>\n<p>I’ve even seen developers and teams use these categorizations to create some fancy priority “score” that considers each category. <strong>Whatever it is that helps you stay focused and on-task is going to be the right approach for you more than what specific category you use.</strong></p>\nLive With Your Stack\n<p>Here’s a classic conundrum in development circles:</p>\n<blockquote>Should I use React? Or NextJS? Or wait, how about Vue? I heard it’s more optimized. But hold on, I read that React Redux is dead and that Zustand is the new hot tool.</blockquote>\n\n<p>And just like that, you’ve spent an entire day thinking about nothing but the tech stack you’re using to build the darn thing.</p>\n<p>We all know that an average user could care less about the tech stack under the hood. Go ahead and ask your mom what tech stack WhatsApp is built on, and let me know what she says. Most times, it’s just us who obsesses about tech stacks, and that usually only happens when we’re asked to check under the hood.</p>\n<p>I have come to accept that there will always be new tech stacks released every single day with the promise of 50% performance and 10% less code. That new tool might scale better, but do I actually have a scaling problem with my current number of <em>zero</em> users? Probably not.</p>\n<p>My advice:</p>\n<p>Pick the tools you work with best and stick to those tools until they start working against you.</p>\n<p>There’s no use fighting something early if something you already know and use gets the job done. Basically, <strong>don’t prematurely optimize or constantly chase the latest shiny object</strong>.</p>\nDo Design Before The First Line of Code\n<p>I know lots of solo developers out there suck at design, and I’m probably among the top 50. My design process has traditionally been to open VS Code, create a new project, and start building the idea in whatever way comes to mind. No design assets, comps, or wireframes to work with — just pure, unstructured improvisation. That’s not a good idea, and it’s a habit I’m actively trying to break. </p>\n<p>These days, I make sure to have <strong>a blueprint of what I’m building</strong> before I start writing code. Once I have that, I make sure to follow through and not change anything to respect my “Oath of Focus.”</p>\n<p><img src=\"https://files.smashing.media/articles/solo-development-learning-to-let-go-of-perfection/1-blueprint-design-project.jpg\" /></p>\n<p>I like how many teams call comps and wireframes “project artifacts.” They are pieces of evidence that provide a source of truth for how something looks and works. You might be the sort of person who works better with sets of requirements, and that’s totally fine. But having some sort of documentation that you can point back to in your work is like having a turn-by-turn navigation on a long road trip — it’s indispensable for getting where you need to go.</p>\n<p>And what if you’re like me and don’t pride yourself on being the best designer? That’s another opportunity to admit your weaknesses up-front and recruit help from someone with those strengths. That way, you can articulate the goal and focus on what you’re good at.</p>\nGive Yourself Timelines\n<p>Personally, without deadlines, I’m almost unstoppable at procrastinating. I’ve started setting time limits when building any project, as it helps with procrastination and makes sure something is pushed out at a specified time. Although this won’t work without accountability, I feel the two work hand in hand.</p>\n<p>I set a 2–3 week deadline to build a project. And no matter what, as soon as that time is up, I must post or share the work in its current state on my socials. Because of this, I’m not in my comfort zone anymore because I won’t want to share a half-baked project with the public; I’m conditioned to work faster and get it all done. It’s interesting to see the length of time you can go if you can trick your brain.</p>\n<p>I realize that this is an extreme constraint, and it may not work for you. I’m just the kind of person who needs to know what my boundaries are. Setting deadlines and respecting them makes me a more disciplined developer. More than that, it makes me work efficiently because <strong>I stop overthinking things when I know I have a fixed amount of time</strong>, and that leads to faster builds.</p>\nConclusion\n<p>The best and worst thing about solo development is the “solo” part. There’s a lot of freedom in working alone, and that freedom can be inspiring. However, all that freedom can be intoxicating, and if left unchecked, it becomes a debilitating hindrance to productivity and progress. That’s a good reason why solo development isn’t for everyone. Some folks will respond a lot better to a team environment.</p>\n<p>But if you are a solo developer, then I hope my personal experiences are helpful to you. I’ve had to look hard at myself in the mirror many days to come to realize that I am not a perfect developer who can build the “perfect” app alone. It takes <strong>planning</strong>, <strong>discipline</strong>, and <strong>humility</strong> to make anything, especially the <em>right</em> app that does exactly the <em>right</em> thing. </p>\n<p>Ideas are cheap and easy, but stepping out of our freedom and adding our own constraints based on <strong>progress over perfection</strong> is the secret sauce that keeps us moving and spending our time on those essential things.</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/06/perfect-design-process/\">What’s The Perfect Design Process?</a>,” Vitaly Friedman</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/07/overcoming-imposter-syndrome-developing-guiding-principles/\">Design Under Constraints: Challenges, Opportunities, And Practical Strategies</a>,” Paul Boag</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/08/improving-double-diamond-design-process/\">Improving The Double Diamond Design Process</a>,” Andy Budd</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2020/09/learnings-coding-artwork/\">Unexpected Learnings From Coding Artwork Every Day For Five Years</a>,” Saskia Freeke</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"bac00387a77fc83a451fc5d6c7af34d4ef090e8f8f8219638f50487174dd2608","category":"Tech"}