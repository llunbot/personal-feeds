{"title":"Building Components For Consumption, Not Complexity (Part 2)","link":"https://smashingmagazine.com/2023/12/building-components-consumption-not-complexity-part2/","date":1702911600000,"content":"<p>Welcome back to my long read about building better components — components that are more likely to be found, understood, modified, and updated in ways that promote adoption rather than abandonment.</p>\n<p>In the previous installment in the series, we took a good look through the process of building <strong>flexible</strong> and <strong>repeatable</strong> components, aligning with the <strong>FRAILS</strong> framework. In this second part, we will be jumping head first into building <strong>adoptable</strong>, <strong>indexable</strong>, <strong>logical</strong>, and <strong>specific</strong> components. We have many more words ahead of us.</p>\nAdoptable\n<p>According to Sparkbox’s 2022 <a href=\"https://designsystemssurvey.sparkbox.com/2022/#section-4\">design systems survey</a>, the top three biggest challenges faced by teams were recently:</p>\n<ol>\n<li>Overcoming technical/creative debt,</li>\n<li>Parity between design &amp; code,</li>\n<li>Adoption.</li>\n</ol>\n<p>It’s safe to assume that points <strong>1.</strong> and <strong>2.</strong> are mostly due to tool limitations, siloed working arrangements, or poor organizational communication. There is no enterprise-ready design tool on the market that currently provides a robust enough code export for teams to automate the handover process. Neither have I ever met an engineering team that would adopt such a feature! Likewise, a tool won’t fix communication barriers or decades worth of forced silos between departments. This will likely change in the coming years, but I think that these points are an understandable constraint.</p>\n<p>Point <strong>3.</strong> is a concern, though. Is your brilliant design system <strong>adoptable</strong>? If we’re spending all this time working on design systems, why are people not using them effectively? Thinking through adoption challenges, I believe we can focus on three main points to make this process a lot smoother:</p>\n<ol>\n<li>Naming conventions,</li>\n<li>Community-building,</li>\n<li>(Over)communication.</li>\n</ol>\n<h3>Naming Conventions</h3>\n<p>There are too many ways to name components in our design tool, from <a href=\"https://en.wikipedia.org/wiki/Camel_case\">camelCasing</a> to <a href=\"https://www.theserverside.com/definition/Kebab-case\">kebab-casing</a>, Slash/Naming/Conventions to the more descriptive, e.g., “Product Card — Cart”. Each approach has its pros and cons, but what we need to consider with our selection is how easy it is to find the component you need. Obvious, but this is central to <em>any</em> good name. </p>\n<p>It’s tempting to map component naming 1:1 between design and code, but I personally don’t know whether this is what our goal should be. Designers and developers work in different ways and with different methods of searching for and implementing components, so we should cater to the audience. This would aid solutions based on intention, not blindly aiming for parity.</p>\n<p>Figma can help bridge this gap with the “<a href=\"https://help.figma.com/hc/en-us/articles/7938814091287-Add-style-and-component-descriptions\">component description field</a>” providing us a useful space to add additional, searchable names (or aliases, even) to every <strong>component</strong>. This means that if we call it a <code>headerNavItemActive</code> in code but a “Header link” in design with a toggled component property, the developer-friendly name can be added to the description field for searchable parity.</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part2/1-component-description.png\" /></p>\n<p>The same approach can be applied to <strong>styles</strong> as well.</p>\n<p>There is a likelihood that your developers are working from a more tokenized set of semantic styles in code, whereas the design team may need less abstract styles for the ideation process. This delta can be tricky to navigate from a Figma perspective because we may end up in a world where we’re maintaining two or more sources of truth. </p>\n<p>The advice here is to split the quick styles for ideation and semantic variables into <strong>different sets</strong>. The semantic styles can be applied at the component level, whereas the raw styles can be used for developing new ideas.</p>\n<p>As an example, <em>Brand/Primary</em> may be used as the border color of an active menu item in your design files because searching “brand” and “primary” may be muscle memory and more familiar than a semantic token name. Within the component, though, we want to be aliasing that token to something more semantic. For example, <code>border-active</code>.</p>\n<p><strong>Note</strong>: <em>Some teams go to a further component level with their naming conventions. For example, this may become <code>header-nav-item-active</code>. It’s hyper-specific, meaning that any use outside of this “Header link” example may not make sense for collaborators looking through the design file.  Component-level tokens are an</em> <strong><em>optional</em></strong> <em>step in design systems. Be cautious, as introducing another layer to your token schema increases the amount of tokens you need to maintain.</em></p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part2/2-component-tokens.png\" /></p>\n<p>This means if we’re working on a new idea — for example, we have a set of tabs in a settings page, and the border color for the active tab at the ideation stage might be using <em>Brand/Primary</em> as the fill — when this component is contributed back to the system, we will apply the correct semantic token for its usage, our <code>border-active</code>.</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part2/3-style-vs-variables.png\" /></p>\n<p>Do note that this advice is probably best suited to large design teams where your contribution process is lengthier and requires the distinct separation of ideation and production or where you work on a more fixed versioning release cycle for your system. For most teams, a single set of semantic variables will be all you need. Variables make this process a lot easier because we can manage the properties of these separate tokens in a central location. But! This isn’t an article about tokens, so let’s move on.</p>\n<h3>Community-building</h3>\n<p>A key pillar of a successful design system is advocacy across the PDE (product, design, and engineering) departments. We want people to be <em>excited</em>, not <em>burdened</em> by its rules. In order to get there, we need to build a community of internal design system advocates who champion the work being done and act as extensions of the central team. This may sound like unpaid support work, but I promise you it’s more than that.</p>\n<p>Communicating constantly with designers taught me that with the popularity of design systems booming over the past few years, more and more of us are desperate to contribute to them. Have you ever seen a local component in a file that is remarkably similar to one that already exists? Maybe that designer wanted to scratch the itch of building something from the ground up. This is fine! We just need to encourage that more widely through a more open contribution model back to the central system.</p>\n<p>How can the (central) systems team empower designers within the wider organization to build on top of the system foundations we create? What does that world look like for your team? This is commonly referred to as the “<a href=\"https://shinytoyrobots.substack.com/p/the-hub-and-spoke-design-system-model\">hub and spoke</a>” model within design systems and can really help to accelerate interest in your system usage goals.</p>\n<blockquote>“There are numerous inflection points during the evolution of a design system. Many of those occur for the same fundamental reason — it is impossible to scale a design system team enough to directly support every demand from an enterprise-scale business. The design system team will always be a bottleneck unless a structure can be built that empowers business units and product teams to support themselves. The hub and spoke (sometimes also called ‘core + federated’) model is the solution.”<br /><br />— Robin Cannon, “<a href=\"https://shinytoyrobots.substack.com/p/the-hub-and-spoke-design-system-model\">The hub and spoke design system model</a>” (IBM)</blockquote>\n\n<p>In simple terms, a community can be anything as small as a shared Slack/Teams channel for the design system all the way up to fortnightly hangouts or learning sessions. What we do here is help to foster an environment where discussion and shared knowledge are at the center of the system rather than being tacked on <em>after</em> the components have been released.</p>\n<p>The team at <a href=\"https://www.youtube.com/watch?v=fx9AiDjdeYs\">Zalando has developed a brilliant community</a> within the design team for their system. This is in the form of a sophisticated web portal, frequent learning and educational meetings, and encouraging an “open house” mindset. Apart from the custom-built portal, I believe this approach is an easy-to-reach target for most teams, regardless of size. A starting point for this would be something as simple as an open monthly meeting or office hours, run by those managing your system, with invites sent out to all designers and cross-functional partners involved in production: product managers, developers, copywriters, product marketers, and the list goes on. </p>\n<p>For those looking for inspiration on how to run semi-regular design systems events, take a look at what the <a href=\"https://design-system.service.gov.uk/design-system-team/\">Gov UK team</a> have started over on <a href=\"https://www.eventbrite.co.uk/o/govuk-design-system-team-33732303733\">Eventbrite</a>. They have run a series of events ranging from accessibility deep dives all the way up to full “design system days.”</p>\n<p>Leading with transparency is a solid technique for placing the design system as close as possible to those who use it. It can help to shift the mindset from being a siloed part of the design process to feeding all parts of the production pipeline for all key partners, regardless of whether you build it or use it. </p>\n<p></p><p>Back to advocacy! As we roll out this transparent and communicative approach to the system, we are well-placed to identify key allies across the product, design, and engineering team/teams that can help steward excellence within their own reach. Is there a product manager who loves picking apart the documentation on the system? Let’s help to position them as a trusted resource for documentation best practices! Or a developer that always manages to catch incorrect spacing token usage? How can we enable them to help others develop this critical eye during the <a href=\"https://uxdesign.cc/how-to-set-up-custom-design-linting-in-figma-using-the-design-lint-plugin-c435e2f8851b\">linting process</a>?</p><p></p>\n<p></p><p>This is the right place to mention <a href=\"https://uxdesign.cc/how-to-set-up-custom-design-linting-in-figma-using-the-design-lint-plugin-c435e2f8851b\"><strong>Design Lint</strong></a>, a Figma plugin that I can only highly recommend. Design Lint will loop through layers you’ve selected to help you find possibly missing styles. When you write custom lint rules, you can check for errors like color styles being used in the wrong way, flag components that aren’t published to your library, mark components that don’t have a description, and more.</p> ￼<p></p>\n<p>Each of these advocates for the system, spread across departments within the business, will help to ensure consistency and quality in the work being produced.</p>\n<h3>(Over)communication</h3>\n<p>Closely linked to advocacy is the importance of regular, informative, and actionable communication. Examples of the various types of communication we might send are:</p>\n<ul>\n<li>Changelog/release notes.</li>\n<li>Upcoming work.</li>\n<li>System survey results. <em>(Example: “<a href=\"https://design.education.gov.uk/inside-design/maturity/results/september-2023\">Design Maturity Results, Sep-2023</a>,” UK Department for Education.)</em></li>\n<li>Resource sharing. Found something cool? Share it!</li>\n<li>Hiring updates.</li>\n<li>Small wins.</li>\n</ul>\n<p>That’s a lot! This is a good thing, as it means there is always something to share among the team to keep people close, engaged, and excited about the system. If your partners are struggling to see how important and central a design system is to the success of a product, this list should help push that conversation in the right direction.</p>\n<p>I recommend trying to build a <em>pattern of regularity</em> with your communication to firstly build the habit of sharing and, secondly, to introduce formality and weight to the updates. You might also want to decide whether you look forward or backward with the updates, meaning at the start or end of a sprint if you work that way.</p>\n<p>Or perhaps you can follow a pattern as the following one:</p>\n<ul>\n<li>Changelog/release notes are sent on the final day of every sprint.</li>\n<li>“What’s next?” is shared at the start of a sprint.</li>\n<li>Cool resources are shared mid-sprint to help inspire the team (and to provide a break between focus work sessions).</li>\n<li>Small wins are shared quarterly.</li>\n<li>Survey results are shared at the start of every second quarter.</li>\n<li>Hiring updates are shared as they come up.</li>\n</ul>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part2/4-community.png\" /></p>\n<p>Outside of the system, communication really does make or break the success of a project, so leading from the front ensures we’re doing everything we can.</p>\nIndexable\n<p>The biggest issue when building or maintaining a system is knowing how your components will be used (or not used). Of course, we will never know until we try it out (btw, this is also the best piece of design advice I’ve ever been given!), but we need to start somewhere. </p>\n<p>Design systems should prioritize quality over speed. But product teams often work in “ship at all costs” mode, prioritizing speed over quality.</p>\n<blockquote>“What do you do when a product team needs a UI component, pattern, or feature that the design system team cannot provide in time or is not part of their scope?”<br /><br />— Josh Clark, “<a href=\"https://bigmedium.com/ideas/design-system-pace-layers-slow-fast.html\">Ship Faster by Building Design Systems Slower</a>”</blockquote>\n\n<p>What this means is starting with real-world needs and problems. The likelihood when starting a system is that you will create all the form fields, then some navigational components, and maybe a few notification/alerts/callouts/notification components <em>(more on naming conventions later)</em> and then publish your library, hoping the team will use those components. </p>\n<p>The harsh reality is, though, the following:</p>\n<ul>\n<li>Your team members aren’t aware of which components exist.</li>\n<li>They don’t know what components are called yet.</li>\n<li>There is no immediate understanding of how components are translated into code.</li>\n<li>You’re building components without needing them yet.</li>\n</ul>\n<p>As you continue to sprint on your system, you will realize over time that more and more design work (user flows, feature work) is being pushed over to your product managers or developers without adhering to the wonderful design system you’ve been crafting. Why is that? It’s because people can’t <strong>discover</strong> your components! (Are they easily <strong>indexable</strong>?)</p>\n<p>This is where the importance of education and communication comes into play. Whether it’s from design to development, design to copywriting, product to design, or brand to product, there is always a little bit more communication that can happen to ease these tensions within teams. Design Ops as a profession is growing in popularity amongst larger organizations for this very purpose — to better foster and facilitate communication channels not only amongst disparate design teams but also cross-functionally.</p>\n<p><strong>Note</strong>: <em><a href=\"https://www.productplan.com/glossary/design-ops/\">Design Ops</a> refers to the practice of integrating the design team’s workflow into the company’s broader development context. In practical terms, this means the design ops role is responsible for planning and managing the design team’s work and making sure that designers are collaborating effectively with product and engineering teams throughout the development process.</em></p>\n<p>Back to discoverability! That communication layer could be introduced in a few ways, depending on how your team is structured. Using the channel within Slack or Teams (or whichever messaging tool you use) example from before, we can have a centralized communication channel about this very specific job — components. </p>\n<p>Here’s an example message:</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part2/8-slack.png\" /></p>\n<p>Within this channel, the person/s responsible for the system is encouraged to frequently post updates with as much context as is humanly possible. </p>\n<p>For example:</p>\n<ul>\n<li>What are you working on now?</li>\n<li>What updates should we expect within the next day/week/month?</li>\n<li>Who is working on what components?</li>\n<li>How can the wider team support or contribute to this work?</li>\n<li>Are there any blockers?</li>\n</ul>\n<p>Starting with these questions and answers in a public forum will encourage wider communication and understanding <em>around</em> the system to ultimately force a wider adoption of what’s being worked on and when.</p>\n<p>Secondly, within the tools themselves, we can be over-the-top communicative whilst we create. Making heavy use of the version history feature within Figma, we can add very intentional timestamps on activity, spelling out exactly what is happening, when, and by whom. Going into the weeds here to effectively use that section of the file as mini-documentation can allow your collaborators (even those without a paid license!) to get as close to the work as possible. </p>\n<p>Additionally, if you are using a branch-based workflow for component management, we encourage you to use the branch descriptions as a way to achieve a similar result.</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part2/9-version.png\" /></p>\n<p><strong>Note</strong>: <em>If you are investigating a branch workflow within a large design organization, I recommend using them for smaller fixes or updates and for larger “major” releases to create new files. This will allow for a future world where one set of designers needs to work on v1, whereas others use v2.</em></p>\n<h3>Naming Conventions</h3>\n<p>Undoubtedly, the hardest part of design system work is naming things. What I call a <em>dropdown</em>, you may call a <em>select</em>, and someone else may call an <em>option list</em>. This makes it extremely difficult to align an entire team and encourage one way of naming anything.</p>\n<p>However, there are techniques we can employ to ensure that we’re serving the largest number of users of our system as possible. Whether it’s using Figma features or working closer with our development team, there is a world in which people can find the components they need and when they need them.</p>\n<p>I’m personally a big fan of prioritizing discoverability over complexity at every stage of design, from how we name our components to frames to entire files. What this means is that, more often than not, we’re better off introducing <em>verbosity</em>, rather than trying to make everything as concise as possible.</p>\n<p>This is probably best served with an example! </p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part2/10-dropdown.png\" /></p>\n<p>What would you call this component? </p>\n<ul>\n<li>Dropdown.</li>\n<li>Popover.</li>\n<li>Actions.</li>\n<li>Modal.</li>\n<li>Something else?</li>\n</ul>\n<p>Of course, context is very important when naming anything, which is why the task is so hard. We are currently unaware of how this component will be used, so let’s introduce a little bit of context to the situation.</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part2/11-dropdown-context.png\" /></p>\n<p>Has your answer changed? The way I look at this component is that, although the structure is quite generic — rounded card, inner list with icons — the usage is very specific. This is to be used on a search filter to provide the user with a set of actions that they can carry out on the results. You may:</p>\n<ol>\n<li>Import a predefined search query.</li>\n<li>Export your existing search query.</li>\n<li>Share your search query.</li>\n</ol>\n<p>For this reason, why would we not call this something like <em>search actions</em>? This is a simplistic example (and doesn’t account for the many other areas of the product that this component could be used), but maybe that’s okay. As we build and mature our system, we will always hit walls where one component needs to — or can be — used in many other places. It’s at <em>this time</em> that we make decisions about scalability, not before we have usage.</p>\n<p>Other options for this specific component could be:</p>\n<ul>\n<li>Action list.</li>\n<li>Search dropdown.</li>\n<li>Search / Popover.</li>\n<li>Filter menu.</li>\n</ul>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part2/12-docs.png\" /></p>\nLogical\n<p>Have you ever been in a situation where you searched for a component in the Figma Assets panel and not been sure of its purpose? Or have you been unsure of the customization possible within its settings? We all have!</p>\n<p>I tend to find that this is the result of us (as design systems maintainers) <em>optimizing for creation</em> and <em>not usage</em>. This is so important, so I’ll say it again: </p>\n<p>We tend to optimize for <em>the people building the system</em>, not for the people <em>using</em> it.</p>\n<p>The consumers/users of a system will always far outweigh the people managing it. They will also be further away from the decisions that went into making the component and the reasons behind why it is built the way it is. </p>\n<p>Here are a few hypothetical questions worth thinking through:</p>\n<ul>\n<li>Why is this component called a <em>navbar</em>, and not a <em>tab-bar</em>? </li>\n<li>Why does it have four tabs by default and not three, like the production app? </li>\n<li>There’s only one <em>navbar</em> in the assets list, but we support many products. Where are the others?</li>\n<li>How do I use the dark mode version of this component?</li>\n<li>I need a tablet version of the table component. Should I modify this one, or do we have an alternative version ready to be used?</li>\n</ul>\n<p>These may seem like familiar questions to you. And if not, congratulations, you’re doing a great job! </p>\n<p>Figma makes it <a href=\"https://help.figma.com/hc/en-us/articles/8883756012823-Create-and-manage-component-properties\">easy to build complexity into components</a>, arguably <em>too</em> easy. I’m sure you’ve found yourself in a situation where you create a component set with too many permutations or ended up in a world where the properties applied to a component turn the component properties panel into what I like to call “prop soup.”</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part2/5-prop-soup.png\" /></p>\n<p>A good design system should be <strong>logical</strong> (<strong>usable</strong>). To me, usability means:</p>\n<ol>\n<li>Speed of discovery, and</li>\n<li>Efficient implementation of components.</li>\n</ol>\n<p>The speed of discovery and the efficient implementation of components can — brace yourself! — sometimes mean <em>repetition</em>. That very much goes against our goals of a <em>don’t repeat yourself</em> system and will horrify those of you who yearn for a world in which consolidation is a core design system principle but bear with me for a bit more.</p>\n<p>The canvas is a place for ideation and flexibility and a place where we need to encourage the fostering of new ideas fast. What <em>isn’t</em> fast is a confused designer. As design system builders, we then need to work in a world where components are customizable but only after being understood. And what is not easily understandable is a component with an infinite number of customization options and a generic name. What <em>is</em> understandable is a compact, descriptive, and lightweight component.</p>\n<p>Let’s take an example. Who doesn’t love… buttons? (I don’t, but this atomic example is the simplest way to communicate our problem.)</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part2/6-states.png\" /></p>\n<p>Here, we have one component variant button with:</p>\n<ul>\n<li>Four <strong>intentions</strong> (primary, secondary, error, warning);</li>\n<li>Two <strong>types</strong> (fill, stroke);</li>\n<li>Three different <strong>sizes</strong> (large, medium, small);</li>\n<li>And four <strong>states</strong> (default, hover, focus, inactive).</li>\n</ul>\n<p>Even while listing those out, we can see a problem. The easy way to think this through is by asking yourself, “Is a designer likely to need all of these options when it comes to usage?”</p>\n<p>With this example, it might look like the following question: “Will a designer ever need to switch between a primary button and a warning one?” Or are they actually two separate use cases and, therefore <strong>two</strong> separate components?</p>\n<p>To probably no one’s surprise, my preference is to split that component right down into its intended usage. That would then mean we have one variant for each component type:</p>\n<ol>\n<li>Primary,</li>\n<li>Secondary,</li>\n<li>Error (Destructive),</li>\n<li>Warning.</li>\n</ol>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part2/7-split.png\" /></p>\n<p>Four components for one button! Yes, that’s right, and there are two huge benefits if you decide to go this way:</p>\n<ol>\n<li>The Assets panel becomes easier to navigate, with each primary variant within each set being visually surfaced.</li>\n<li>The designer removes one decision from component usage: what type to use.</li>\n</ol>\n<p>Let’s help set our (design) teams up for success by removing decisions! The design was intentionally placed within brackets there because, as you’re probably rightly thinking, we lose parity with our coded components here. You know what? I think that’s totally fine. Documentation and component handover happen once with every component, and it doesn’t mean we need to sacrifice usability within the design to satisfy the front-end framework <a href=\"https://en.wikipedia.org/wiki/Composability\">composability</a>. Documentation is still a vital part of a design system, and we can communicate component permutations in a method that meets design and development in the middle.</p>\n<h3>Auto Layout</h3>\n<p>Component usability is also heavily informed by the decision to use <a href=\"https://help.figma.com/hc/en-us/articles/5731482952599-Using-auto-layout\">auto layout</a> or not. It can be hard to grapple with, but my advice here is to go <em>all in</em> on using auto layout. Not only does it help to remove the need for eyeballing measurements within production designs, but it also helps remove the burden of spacing for non-design partners. If your copywriter needs to edit a line of text within a component, they can feel comfortable doing so with the knowledge that the surrounding content will flow and not “break” the design.</p>\n<p><strong>Note</strong>: <em>Using padding and gap variables within main components can remove the “Is the spacing correct?” question from component composition.</em></p>\n<p>Auto layout also provides us with some guardrails with regard to spacing and margins. We strive for consistency within systems, and using auto layout everywhere pushes us as far as possible in that direction.</p>\nSpecific\n<p>We touched on this in the “usable” section, but naming conventions are so important for ensuring the discoverability and adoption of components within a system.</p>\n<p>The more specific we can make components, the more likely they are to be used in the <em>right</em> place. Again, this may mean introducing inefficiencies within the system, but I strongly believe that efficiency is a long-term play and something we reach gradually over time. This means being <em>incredibly inefficient</em> in the short term and being okay with that!</p>\n<p>Specific to me means calling a <em>header</em> a <em>header</em>, a <em>filter</em> a <em>filter</em>, and a <em>search field</em> a <em>search field</em>. Doesn’t it seem obvious? You’re right. It <em>seems</em> obvious, but if my Twitter “<a href=\"https://twitter.com/disco_lu/status/1540278986948968448?s=20\">name that component</a>” game has taught me anything, it’s that naming components is hard.</p>\n<p>Let’s take our <em>search field</em> example.</p>\n<ul>\n<li>Apple’s <a href=\"https://developer.apple.com/design/human-interface-guidelines/search-fields\">Human Interface Guidelines</a> call it a “search field.”</li>\n<li>Material Design calls it a “search bar.”</li>\n<li>Microsoft Fluent 2 doesn’t have a search field. Instead, it has a “combobox” component with a typeahead search function.</li>\n</ul>\n<p>Sure, the intentions may be different between a combobox and a search field or a search bar, but does your designer or developer know about these subtle nuances? Are they aware of the different use cases when searching for a component to use? <strong>Specificity</strong> here is the sharpest way for us to remove these questions and ensure efficiency within the system.</p>\n<p>As I said before, this may mean that we end up performing <em>inefficient</em> activities within the system. For example, instead of bundling <em>combobox</em> and <em>search</em> into <strong>one</strong> component set with <a href=\"https://english.stackexchange.com/questions/232774/is-it-togglable-or-toggleable\">toggl</a><a href=\"https://english.stackexchange.com/questions/232774/is-it-togglable-or-toggleable\">e-</a><a href=\"https://english.stackexchange.com/questions/232774/is-it-togglable-or-toggleable\">able</a> settings, we should <strong>split</strong> them. This means searching for “search” in Figma would provide us with the only component we need, rather than having to think ahead if our <em>combobox</em> component can be customized to our needs (or not).</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part2/13-split.png\" /></p>\nConclusion\n<p>It was a long journey! I hope that throughout the past ten thousand words or so, you’ve managed to extract quite a few useful bits of information and advice, and you can now tackle your design systems within Figma in a way that <em>increases</em> the likelihood of adoption. As we know, this is right up there with the priorities of most design systems teams, and I firmly believe that following the principles laid out in this article will help you (as maintainers) sprint towards a path of more funding, more refined components, and happier team members.</p>\n<p>And should you need some help or if you have questions, ask me in the comments below, or ping me on <a href=\"https://twitter.com/disco_lu\">Twitter</a>/<a href=\"https://mastodon.social/@Disco_lu\">Posts/Mastodon</a>, and I’ll be more than happy to reply.</p>\n<h3>Further Reading</h3>\n<ul>\n<li>“<a href=\"https://www.youtube.com/watch?v=lEccln75Q7U\">Driving change with design systems and process</a>,” Matt Gottschalk and Aletheia Délivré <em>(Config 2023)</em><br />The conference talk explores in detail how small design teams can use design systems and design operations to help designers have the right environment for them.</li>\n<li><a href=\"https://gestalt.pinterest.systems/blog/2023_q2_newsletter\">Gestalt 2023 — Q2 newsletter</a><br />In this article article, you will learn about the design systems roadmaps (from the Pinterest team).</li>\n<li>“<a href=\"https://github.com/sturobson/Awesome-Design-Tokens\">Awesome Design Tokens</a>”<br />A project that hosts a large collection of design token-related articles and links, such as GitHub repositories, articles, tools, Figma and Sketch plugins, and many other resources.</li>\n<li>“<a href=\"https://blog.damato.design/posts/ondark-virus/\">The Ondark Virus</a>” <em>(D’Amato Design blog)</em><br />An important article about naming conventions within design tokens.</li>\n<li>“<a href=\"https://www.redhat.com/en/topics/api/what-are-application-programming-interfaces\">API?</a>” <em>(RedHat Help)</em><br />This article will explain in detail how APIs (Application Programming Interface) work, what the SOAP vs. REST protocols are, and more.</li>\n<li>“<a href=\"https://alistapart.com/article/responsive-web-design/\">Responsive Web Design</a>,” by Ethan Marcotte <em>(A List Apart)</em><br />This is an old (but gold) article that set the de-facto standards in responsive web design (RWD).</li>\n<li>“<a href=\"https://www.figma.com/community/file/1158765244991590065/simple-design-system-structure\">Simple design system structure</a>” (FigJam file, by <a href=\"https://www.figma.com/@disco_lu\">Luis Ouriach</a> — <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC-BY</a> license)<br />For when you need to get started!</li>\n<li>“<a href=\"https://www.figma.com/community/file/1110928859206538912/fixed-aspect-ratio-images-with-variants\">Fixed aspect ratio images with variants</a>” (Figma file, by <a href=\"https://www.figma.com/@disco_lu\">Luis Ouriach</a> — <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC-BY</a> license)<br />Aspect ratios are hard with image fills, so the trick to making them work is to define your breakpoints and create variants for each image. As the image dimensions are fixed, you will have much more flexibility — you can drag the components into your designs and use auto layout.</li>\n<li><a href=\"https://github.com/BuilderIO/mitosis\">Mitosis</a><br />Write components once, run everywhere; compiles to React, Vue, Qwik, Solid, Angular, Svelte, and others.</li>\n<li>“<a href=\"https://blog.logrocket.com/creating-reusable-components-mitosis-builder-io/\">Create reusable components with Mitosis and Builder.io</a>,” by Alex Merced<br />A tutorial about Mitosis, a powerful tool that can compile code to standard JavaScript in addition to frameworks and libraries like Angular, React, and Vue, allowing you to create reusable components.</li>\n<li>“<a href=\"http://Slots\">VueJS — Component Slots</a>” <em>(Vue documentation)</em><br />Components can accept properties (which can be JavaScript values of any type), but how about template content?</li>\n<li>“<a href=\"https://css-tricks.com/magic-numbers-in-css/\">Magic Numbers in CSS</a>,” by Chris Coyier <em>(CSS Tricks)</em><br />In CSS, magic numbers refer to values that work under some circumstances but are frail and prone to break when those circumstances change. The article will take a look at some examples so that you know what they are and how to avoid the issues related to their use.</li>\n<li>“<a href=\"https://www.youtube.com/watch?v=EA0NbEOrpuo\">Figma component properties</a>” <em>(Figma, YouTube)</em><br />In this quick video tip, you’ll learn what component properties are and how to create them.</li>\n<li>“<a href=\"https://help.figma.com/hc/en-us/articles/8883756012823-Create-and-manage-component-properties\">Create and manage component properties</a>” <em>(Figma Help)</em><br />New to component properties? Learn how component properties work by exploring the different types, preferred values, and exposed nested instances.</li>\n<li>“<a href=\"https://help.figma.com/hc/en-us/articles/5731482952599-Using-auto-layout\">Using auto layout</a>” <em>(Figma Help)</em><br />Master auto layout by exploring its properties, including resizing, direction, absolute position, and a few others.</li>\n<li>“<a href=\"https://help.figma.com/hc/en-us/articles/7938814091287-Add-style-and-component-descriptions#add-component-descriptions\">Add descriptions to styles, components, and variables</a>” <em>(Figma Help)</em><br />There are a few ways to incorporate design system documentation in your Figma libraries. You can give styles, components, and variables meaningful names; you can add short descriptions to styles, components, and variables; you can add links to external documentation to components; and you can add descriptions to library updates.</li>\n<li>“<a href=\"https://bradfrost.com/blog/post/design-system-components-recipes-and-snowflakes/\">Design system components, recipes, and snowflakes</a>,” by Brad Frost<br />Creating things with a component-based mindset right from the start saves countless hours. Everything is/should be a component!</li>\n<li>“<a href=\"https://www.ibm.com/topics/digital-asset-management\">What is digital asset management?</a>” <em>(IBM)</em><br />A digital asset management solution provides a systematic approach to efficiently storing, organizing, managing, retrieving, and distributing an organization’s digital assets. </li>\n<li>”<a href=\"https://developer.apple.com/design/human-interface-guidelines/search-fields\">Search fields (Components)</a>” <em>(Apple Developer)</em><br />A search field lets people search a collection of content for specific terms they enter.</li>\n<li>“<a href=\"https://m3.material.io/components/search/overview\">Search — Components Overview</a>” <em>(Material Design 3)</em><br />Search lets people enter a keyword or phrase to get relevant information.</li>\n<li>“<a href=\"https://fluent2.microsoft.design/components/web/react/combobox/usage\">Combobox — Components</a>” <em>(Fluent 2)</em><br />A combobox lets people choose one or more options from a list or enter text in a connected input; entering text will filter options or allow someone to submit a free-form answer.</li>\n<li>“<a href=\"https://medium.com/ithaka-tech/pharos-jstors-design-system-for-the-intellectually-curious-9c4f21b956a8\">Pharos: JSTOR’s design system serving the intellectually curious</a>” <em>(JSTOR)</em><br />Building a design system from the ground up — a detailed account written by the JSTOR team.</li>\n<li>“<a href=\"https://www.designsystems.com/design-systems-are-everybodys-business/\">Design systems are everybody’s business</a>,” by Alex Nicholls <em>(Director of Design at Workday)</em><br />This is Part 1 in a three-part series that takes a deep dive into Workday’s experience of developing and releasing their design system out into the open. For the next parts, check Part II, <a href=\"https://www.designsystems.com/productizing-your-design-system/\">“Productizing your design system</a>,” and Part III, “<a href=\"https://www.designsystems.com/the-case-for-an-open-design-system/\">The case for an open design system</a>.”</li>\n<li>“<a href=\"https://design.education.gov.uk/inside-design/maturity/results/september-2023\">Design maturity results ‘23</a>,” <em>(UK Dept. for Education)</em><br />The results of the design maturity survey carried out in the Department for Education (UK), September 2023.</li>\n<li>“<a href=\"https://design.education.gov.uk/\">Design Guidance and Standards</a>,” <em>(UK Dept. for Education)</em><br />Design principles, guidance, and standards to support people who use the Department for Education services (UK).</li>\n<li>“<a href=\"https://designsystemssurvey.sparkbox.com/2022/#section-4\">Sparkbox’s Design Systems Survey, 2022 (5th edition)</a>”<br />The top three biggest challenges faced by design teams: are overcoming technical/creative debt, parity between design &amp; code, and adoption. This article reviews in detail the survey results; 183 respondents maintaining design systems have responded.</li>\n<li>“<a href=\"https://shinytoyrobots.substack.com/p/the-hub-and-spoke-design-system-model\">The hub and spoke design system model</a>,” by Robin Cannon <em>(IBM)</em><br />No design system team can scale enough to support an enterprise-scale business by itself. This article sheds some light on IBM’s hub and spoke model.</li>\n<li>“<a href=\"https://www.youtube.com/watch?v=fx9AiDjdeYs\">Building a design system around collaboration, not components</a>” <em>(Figma, YouTube)</em><br />It’s easy to focus your design system on the perfect component, missing out on the aspect that’ll ensure your success — collaboration. Louise From and Julia Belling (from <a href=\"https://en.zalando.de/\">Zalando</a>) explain how they created and then scaled effectively their internal design system.</li>\n<li>“<a href=\"https://www.youtube.com/@friendsoffigmadesignops4765/featured\">Friends of Figma, DesignOps</a>” <em>(YouTube interest group)</em><br />This group is about practices and resources that will help your design organization to grow. The core topics are centered around the standardization of design, design growth, design culture, knowledge management, and processes.</li>\n<li>“<a href=\"https://medium.com/sketch-app-sources/linting-meets-design-f4c3e49fe71\">Linting meets Design</a>,” by Konstantin Demblin <em>(George Labs)</em><br />The author is convinced that the concept of “design linting” (in Sketch) is groundbreaking for digital design and will remain state-of-the-art for a long time.</li>\n<li>“<a href=\"https://uxdesign.cc/how-to-set-up-custom-design-linting-in-figma-using-the-design-lint-plugin-c435e2f8851b\">How to set up custom design linting in Figma using the Design Lint plugin</a>,” by Daniel Destefanis <em>(Product Design Manager at Discord)</em><br />This is an article about Design Lint — a Figma plugin that loops through layers you’ve selected to help you find missing styles. You can check for errors such as color styles being used in the wrong way, flag components that aren’t published to your library, mark components that don’t have a description, and so on.</li>\n<li>“<a href=\"https://twitter.com/brad_frost/status/1729614882796962128\">Design Systems and Speed</a>,” by Brad Frost<br />In this Twitter thread, Brad discusses the seemingly paradoxical relationship between design systems and speed. Design systems make the product work faster. At the same time, do design systems also need to go slower?</li>\n<li>“<a href=\"https://bigmedium.com/ideas/design-system-pace-layers-slow-fast.html\">Ship Faster by Building Design Systems Slower</a>,” by Josh Clark <em>(Principal, Big Medium)</em><br />Design systems should prioritize quality over speed, but product teams often have “ship at all costs” policies, prioritizing speed over quality. Actually, successful design systems move more slowly than the products they support, and the slower pace doesn’t mean that they have to be the bottleneck in the process.</li>\n<li><a href=\"https://www.smashingmagazine.com/design-systems-book/\"><em>Design Systems</em></a>, a book by Alla Kholmatova <em>(Smashing Magazine)</em><br />Often, our design systems get out-of-date too quickly or just don’t get enough traction in our companies. What makes a design system effective? What works and what doesn’t work in real-life products? The book is aimed mainly at small to medium-sized product teams trying to integrate modular thinking into their organization’s culture. Visual and interaction designers, UX practitioners, and front-end developers particularly, will benefit from the knowledge in this book.</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/01/sharing-components-designers-developers-collaboration-problems/\">Making Your Collaboration Problems Go Away By Sharing Components</a>,” by Shane Hudson <em>(Smashing Magazine)</em><br />Recently UXPin has extended its powerful Merge technology by adding npm integration, allowing designers to sync React component libraries without requiring any developer input. </li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/12/taking-stress-out-design-system-management/\">Taking The Stress Out Of Design System Management</a>,” by Masha Shaposhnikova <em>(Smashing Magazine)</em><br />In this article, the author goes over five tips that make it easier to manage a design system while increasing its effectiveness. This guide is aimed at smaller teams.</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/04/artifacts-design-systems/\">Around The Artifacts Of Design Systems (Case Study)</a>,” by Dan Donald <em>(Smashing Magazine)</em><br />Like many things, a design system isn’t ever a finished thing but a journey. How we go about that journey can affect the things we produce along the way. Before diving in and starting to plan anything out, be clear about where the benefits and the risks might lie.</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/11/design-systems-inspiration-resources-case-studies/\">Design Systems: Useful Examples and Resources</a>,” by Cosima Mielke <em>(Smashing Magazine)</em><br />In complex projects, you’ll sooner or later get to the point where you start to think about setting up a design system. In this article, some interesting design systems and their features will be explored, as well as useful resources for building a successful design system.</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"9888621e3dbf73b1566388d342286385df500cc4119f23a48b39adf4fc9b3110","category":"Tech"}