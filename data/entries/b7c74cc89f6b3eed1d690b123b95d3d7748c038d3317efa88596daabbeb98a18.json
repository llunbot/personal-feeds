{"title":"Exploring Enhanced Patterns In WordPress 6.3","link":"https://smashingmagazine.com/2023/09/exploring-enhanced-patterns-system-wordpress/","date":1695906000000,"content":"<p><a href=\"https://wordpress.org/documentation/article/reusable-blocks/\">Reusable blocks</a>, introduced in WordPress 5.0, allow users to create and save custom blocks that can be used across different pages or posts. This increases efficiency and consistency by allowing users to create personalized blocks of content that can be easily reused. Subsequently, in WordPress 5.5, <a href=\"https://wordpress.org/documentation/article/block-pattern/\">block patterns</a> were introduced, allowing users to design layout patterns comprised of multiple blocks.</p>\n<p>While <em>reusable blocks</em> have allowed users to create their own content blocks that can be reused across the site while maintaining their consistency, <em>block patterns</em> have offered a convenient to quickly apply common design patterns to pages and posts. </p>\n<p>Reusable blocks and block patterns may seem similar at first glance, but there is one crucial distinction between them. Reusable blocks can be easily created directly in the Post Editor, allowing users to generate and reuse their own custom content blocks. In contrast, block patterns are established patterns installed or registered in block themes that cannot be created directly in the WordPress admin.</p>\n<p>Starting with WordPress 6.3, reusable blocks and block patterns have been combined to form a feature called “Patterns” that provides users with the flexibility to choose whether they want to synchronize all instances of a pattern — similar to reusable blocks — or apply patterns without syncing content. <strong>The new functionality, available now in the Post Editor, empowers users to craft patterns that can function as both reusable blocks and patterns, catering to their specific requirements.</strong></p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/1-contextual-menu-create-resusable-blocks.png\" /></p>\n<p>Selecting the “Create Reusable block” option triggers a popup that prompts you to name the reusable block.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/2-pop-up-prompt-name-reusable-block.png\" /></p>\n<p>Once named, the reusable block is saved and can be accessed in the <a href=\"https://wordpress.org/documentation/article/adding-a-new-block/\">Block Inserter</a>. It’s a little tough to spot because it is the only section of the Block Inserter that is labeled with an icon instead of a text label.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/3-block-inserter.png\" /></p>\n<p>Perhaps a more convenient way to access the block is to type a forward slash (<code>/</code>) in the Post Editor, followed by the reusable block’s name.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/4-forward-slash-command-post-editor.png\" /></p>\n<p>Making changes to a reusable block isn’t difficult, but finding where to make changes is. You must click on the Post Editor settings while editing a page or post, then select the “Manage Reusable blocks” option.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/5-manageable-resusable-blocks-option-post-editor-settings.png\" /></p>\n<p>This will take you to another new editing screen where you can directly edit reusable blocks as you like. I sometimes bookmark this screen as a shortcut. Once saved, changes to reusable blocks are applied throughout the site.</p>\n<h3>Creating Block Patterns in WordPress 6.2</h3>\n<p>Unlike reusable blocks, site creators are unable to create block patterns from the Post Editor. Instead, they are treated more like plugins, <strong>where block patterns are installed and activated before they are available in the Post Editor</strong>. Once they are available, they can be accessed with the Block Inserter or a forward slash command the same way reusable blocks are added to pages and posts.</p>\n<p>The neat thing about this plugin-like treatment is that there is a <a href=\"https://wordpress.org/patterns/\">Patterns Directory</a> full of patterns created and submitted by the WordPress community, just like we have the <a href=\"https://wordpress.org/plugins/\">Plugins Directory</a>. But that also means that <a href=\"https://developer.wordpress.org/themes/advanced-topics/block-patterns/\">patterns are <em>developed</em> and need to be included in a theme</a>.</p>\n<h3>Registering Custom Block Patterns With PHP</h3>\n<p>The <code>register-block-pattern</code> API function was first introduced in WordPress 6.0, allowing theme authors to register custom block patterns:</p>\n<div>\n<pre><code>register_block_pattern(\n  'my-first-pattern/hello-world',\n  array(\n    'title' =&gt; __( 'Hello World', 'my-first-pattern' ),\n    'description' =&gt; _x( 'A simple paragraph block.', 'my-first-pattern' ),\n    'content' =&gt; \"&lt;!-- wp:paragraph --&gt;Hello world&lt;!-- /wp:paragraph --&gt;\",\n  )\n);\n</code></pre>\n</div>\n\n<p>The <code>content</code> argument may contain any raw HTML markup, which means it’s possible to configure a group of blocks that you want to make into a pattern directly in the Post Editor, then copy and paste that group into the <code>content</code> field. Pasting blocks as plain text reveals the underlying raw HTML.</p>\n<p>We want to make that into a custom function and add an action that fires the function when the theme is initialized.</p>\n<pre><code>function mytheme_register_block_patterns() {\n  register_block_pattern( ... );\n}\nadd_action( 'init', 'mytheme_register_block_patterns' );\n</code></pre>\n\n<p>Just as a block pattern can be registered, it can be <em>unregistered</em> programmatically using the <code>unregister-block-pattern</code> function. All it takes is the <code>title</code> argument.</p>\n<pre><code>function mytheme_unregister_my_patterns() {\n  unregister_block_pattern(\n    'my-first-pattern/hello-world',\n    array(\n      'title' =&gt; __( 'Hello World', 'my-first-pattern' ),\n    )\n  );\n}\nadd_action( 'init', 'my_first_patterns' );\n</code></pre>\n\n<h3>Registering Custom Block Patterns Via The <code>/patterns</code> Directory</h3>\n<p>Not to be confused with the <a href=\"https://wordpress.org/patterns/\">Patterns Directory</a> I shared earlier, where you can find and install patterns made by community contributors, <a href=\"https://make.wordpress.org/core/2022/05/02/new-features-for-working-with-patterns-and-themes-in-wordpress-6-0/\">WordPress 6.0 has also supported registering block patterns in a <code>/patterns</code> file directory</a> that lives in the theme folder.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/6-local-filesystem-theme-pattern-directory.jpg\" /></p>\n<p>The process to register a block pattern from here is similar to the PHP approach. In fact, each pattern is contained in its own PHP file that contains the same raw HTML that can be copied and pasted into the <code>register-block-pattern</code> function’s <code>content</code> argument… only the function is not required.</p>\n<p>Here is an example showing a pattern called “Footer with text” that is saved as <code>footer.php</code> in the <code>/patterns</code> folder:</p>\n<pre><code>&lt;?php\n/**\n * Title: Footer with text.\n * Slug: theme-slug/footer\n * Categories: site-footer\n * Block Types: core/template-parts/footer\n * Viewport Width: 1280\n */\n?&gt;\n&lt;!-- block markup here --&gt;\n</code></pre>\n\n<p>This particular example demonstrates another feature of block patterns: <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/#block-patterns-contextual-to-block-types-and-pattern-transformations\"><strong>contextual block types</strong></a>. Declaring the “Block Types” property as <code>core/template-parts/footer</code> attaches the pattern to a template part (located in a <code>/template-parts</code> folder that sits alongside the <code>/patterns</code> folder) called <code>footer.php</code>. The benefit of attaching a block pattern to a block type is that it registers the pattern as an available <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-transforms/\"><em>transform</em> of that block type</a>, which is a fancy way of saying that the pattern is applied on top of another block. That way, there’s no need to modify the structure of the existing template part to apply the pattern, which is sort of similar to how we typically think of child theming but with patterns instead.</p>\n<p>Want to add your custom block pattern to a theme template? That’s possible with the <code>wp:pattern</code> context:</p>\n<pre><code>&lt;!-- wp:pattern { \"slug\":\"prefix/pattern-slug\" } /--&gt;\n</code></pre>\n\n<p>Any entire template can be created with nothing but block patterns if you’d like. The following is an example taken from the <a href=\"https://github.com/Automattic/themes/blob/trunk/archeo/templates/home.html\">Automattic’s Archeo theme</a>. The theme’s <code>home.html</code> template file clearly demonstrates how a template can be constructed from previously registered patterns, pattern files in the <a href=\"https://github.com/Automattic/themes/tree/trunk/archeo/patterns\"><code>/patterns</code></a> theme folder, and the <code>wp:pattern</code> context:</p>\n<div>\n<pre><code>&lt;!-- wp:template-part { \"slug\":\"header\",\"tagName\":\"header\" } /--&gt;\n\n&lt;!-- wp:group { \"layout\":{ \"inherit\":\"true\" } } --&gt;\n  &lt;div class=\"wp-block-group\"&gt;\n    &lt;!-- wp:pattern { \"slug\":\"archeo/image-with-headline-description\" } /--&gt;\n    &lt;!-- wp:pattern { \"slug\":\"archeo/simple-list-of-posts-with-background\" } /--&gt;\n    &lt;!-- wp:pattern { \"slug\":\"archeo/layered-images-with-headline\" } /--&gt;\n  &lt;/div&gt;\n&lt;!-- /wp:group --&gt;\n\n&lt;!-- wp:template-part { \"area\":\"footer\",\"slug\":\"footer\",\"tagName\":\"footer\" } /--&gt;\n</code></pre>\n</div>  \n\n<p>The theme’s <code>footer.php</code> pattern is added to the <a href=\"https://github.com/Automattic/themes/blob/trunk/archeo/parts/footer.html\"><code>/parts/footer.html</code></a> template file before it is used in the <code>home.html</code> template, like this:</p>\n<pre><code>&lt;!-- wp:pattern { \"slug\":\"archeo/footer\" } /--&gt;\n</code></pre>\n\n<p>Additional information about registering block patterns is available in the <a href=\"https://developer.wordpress.org/themes/advanced-topics/block-patterns/\">WordPress Theme Handbook</a>. You can also discover many use cases for block patterns <a href=\"https://github.com/Automattic/themes/tree/trunk\">in the explainer of Automattic’s themes repository on GitHub</a>.</p>\nReusable Blocks And Patterns In WordPress 6.3\n<p>WordPress 6.3 is notable for <a href=\"https://www.youtube.com/watch?v=6JhJcOLySLY\">many reasons</a>, one being that the <strong>reusable blocks and block patterns features are combined into a single feature simply called Patterns</strong>. The idea is that reusable blocks and block patterns are similar enough in nature that we can decide whether or not a pattern is reusable at the editing level. Instead of determining up-front whether or not you need a reusable block or a block pattern, create a Pattern and then determine whether to sync the Pattern’s content across the site.</p>\n<p>The result is a single powerful feature that gives us the best of both worlds. WordPress 6.3 not only combined the reusable blocks and block patterns but made UI changes to the WordPress admin as well. Let’s zero in on those changes and how Patterns work in the new system.</p>\n<h3>Creating Synced Patterns</h3>\n<p>Not only are Patterns offered in the Site Editor, but they can be inserted into a page or post with the Post Editor. In fact, it works just like reusable blocks did before combining with block patterns. The only difference is that the “Create Reusable block” option in the contextual menu is now called “Create pattern/reusable block” instead.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/7-create-pattern-option-block-inserter.png\" /></p>\n<p>The process for creating a pattern is mostly the same, too. Select any block or group of blocks that have been inserted into the page, open the contextual menu, and select “Create pattern/reusable block.” I hope that label becomes simply “Create Pattern” in a future release. This longer label is probably there to help with the transition.</p>\n<p>This is where things start to diverge from WordPress 6.2. Clicking “Create pattern/reusable block” still triggers a popup asking you to name the Pattern, but what’s new is a toggle to enable synced content support.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/8-create-pattern-popup-option-sync.png\" /></p>\n<p>Once the pattern is saved, it is immediately available in the Block Inserter or with a slash (<code>/</code>) command.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/9-block-inserter-showing-saved-pattern.png\" /></p>\n<h3>Creating Standard, Unsynced Patterns</h3>\n<p>This feature, which has been a long time coming, allows us to create our own custom patterns, akin to the flexibility of reusable blocks in the Site Editor.</p>\n<p>Let’s demonstrate how standard, unsynced Patterns work but do it a little differently than the synced example. This time, we’ll start by copying <a href=\"https://wordpress.org/patterns/pattern/two-columns-of-text-with-offset-heading/\">this two-column text pattern</a> from the Patterns Directory and pasting it into a page. I’m going to change the colors around a bit and make a few other minor tweaks to the copied pattern just for fun. I’m also naming it “Two-columns Text Unsynced Pattern” in the popup. The only difference between this Pattern and the synced Pattern we created earlier is that I’m disabling the Synced setting.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/10-create-pattern-popup-option-sync.png\" /></p>\n<p>That’s really it! I just created a new custom pattern based on another pattern pulled from the Patterns Library and can use it anywhere on my site without syncing the content in it. No PHP or special file directories are needed!</p>\nPatterns Are Accessible From The Site Editor\n<p>You are probably very familiar with the Site Editor. As long as your WordPress site is configured as a block theme, navigating to <strong>Appearance → Site Editor</strong> opens up the site editing interface.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/11-site-editor-mockup-screen.png\" /></p>\n<p>WordPress 6.3 introduces a newly redesigned sidebar panel that includes options to edit navigation, styles, pages, templates, and… patterns. This is a big deal! Patterns are now treated like modular components that can be used to craft templates at the Site Editor level. In other words, block patterns are no longer relegated solely to the Post Editor.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/12-comparison-site-editor-navigation.png\" /></p>\n<p>Clicking into Patterns in the Site Editor displays all of your saved Patterns. The patterns are conveniently split up between synced and unsynced patterns, and clicking on any of them opens up an editing interface where changes can be made and saved.</p>\n<p>Another interesting Site Editor update in WordPress 6.3 is that patterns and template parts are now together. Previous versions of WordPress put Template Parts in the Site Editor’s top-level navigation. WordPress 6.3 replaces “Template Parts” in the Site Editor navigation with “Patterns” and displays “Template Parts” alongside patterns in the resulting screen.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/13-patterns-screen-site-editor.png\" /></p>\n<p>I’ll reserve judgment for later, but it’s possible that this arrangement opens up some confusion over the differences between patterns and template parts. That’s what happened when patterns and reusable blocks were separate but equal features with overlapping functionality that needed to be combined. I wonder if template parts will get wrapped up in the same bundle down the road now that there’s less distinction between them and patterns in the Site Editor.</p>\n<p>Another thing to notice about the patterns interface in the Site Editor is how patterns are organized in folders in the side panel. The folders are automatically created when a pattern is registered as a contextual block pattern, as we demonstrated earlier when revisiting how block patterns worked in previous versions of WordPress. A lock icon is displayed next to a folder when the patterns are bundled with the active theme, indicating that they are core to the theme’s appearance rather than a pattern that was created independently of the theme. Locked patterns are ones you want to build off of, the same way we registered a Pattern earlier as a contextual block type.</p>\n<p>Finally, a new pattern (or template part, for that matter) can be created directly from the Site Editor without having to leave and create it in the Post Editor. This is an extremely nice touch that prevents us from having to jump between two UIs as we’ve had to do in previous versions of WordPress.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/14-create-pattern-option.png\" /></p>\n<p>Remember that screen I showed earlier that displays when clicking “Manage Reusable blocks” in the Post Editor? Well, now it is called “Patterns,” and it, too, is a direct link in the Site Editor.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/15-manage-reusable-blocks-screen.png\" /></p>\n<p>This screen displays all custom saved patterns but does <em>not</em> show patterns that are bundled with the theme. This may change in future releases. Matias Ventura, Gutenberg project architect, says in <a href=\"https://github.com/WordPress/gutenberg/issues/31367#issuecomment-830025432\">this GitHub discussion thread</a> that patterns will eventually be served through the Pattern Directory instead of being bundled resources. Maybe then we’ll see <em>all</em> available patterns instead of only custom patterns.</p>\nUsing Patterns As Starter Templates\n<p>A common use case of the earlier <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/\">Patterns API</a> that was introduced in WordPress 6.0 has been to display a few sets of starter content patterns as options that users may choose when creating a new page template in the Site Editor. The idea is to provide you with a template with a predefined layout rather than starting with a blank template and to show a preview of the template’s configuration.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/16-example-pattern-various-layout-states.png\" /></p>\n<p>The <a href=\"https://make.wordpress.org/core/2023/03/07/patterns-api-expanded-to-include-template_types-property/\">updated Patterns API in WordPress 6.2</a> allows us to do this more easily by creating custom patterns for specific template types. For example, we could create a set of patterns associated with the template for single posts. Or another set of patterns for the 404 template. The benefit of this, of course, is that we are able to use patterns as starter templates!</p>\n<p>Let’s walk through the process of using patterns as starter page templates, beginning first by registering our custom patterns with our friend, <code>register-block-pattern()</code>. We do have the option to register patterns in the theme’s <code>/patterns</code> folder, as we did earlier, but I found it did not work. Let’s go with the function instead for the tour.</p>\n<h3>Registering Custom Patterns With <code>register-block-pattern()</code></h3>\n<p>We’ll start with a function that registers a Pattern that we are going to associate with the theme’s 404 page template. Notice the <code>templateTypes</code> argument that allows us to link the pattern to the template:</p>\n<div>\n<pre><code>function mytheme_register_block_patterns() {\n  register_block_pattern(\n    'wp-my-theme/404-template-pattern',\n     array(\n       'title' =&gt; __( '404 Only template pattern', 'wp-my-theme' ),\n       'templateTypes' =&gt; array( '404' ),\n       'content' =&gt; '&lt;!-- wp:paragraph { \"align\":\"center\",\"fontSize\":\"x-large\" } --&gt;&lt;p class=\"has-text-align-center has-x-large-font-size\"&gt;404 pattern&lt;/p&gt;&lt;!-- /wp:paragraph --&gt;',\n    )\n  );\n}\nadd_action( 'init', 'mytheme_register_block_patterns' );\n</code></pre>\n</div>\n\n<p>I pulled the bulk of this function from a <a href=\"https://gist.github.com/annezazu/99ce2f84fa033dae48eacc50a8287bae\">GitHub Gist</a>. It’s a small example, but you can see how cluttered things could get if we are registering many patterns for a single template. Plus, the more patterns registered for a template, the bigger that page gets, making the template as a whole difficult to read, preview, and maintain.</p>\n<p>The default <a href=\"https://themes.trac.wordpress.org/browser/twentytwentytwo/1.4/inc/block-patterns.php\">Twenty Twenty-Two</a> WordPress theme comes with <a href=\"https://themes.trac.wordpress.org/browser/twentytwentytwo/1.4/inc/patterns\">66 patterns</a>. That could get messy in the theme folder, but the theme smartly has added an <code>/inc</code> folder containing individual PHP files for each registered pattern. The same sort of strategy the themes have used to <a href=\"https://renatello.com/wordpress-functions-php/\">break up functions</a> registered in the <code>functions.php</code> to prevent it from getting too convoluted.</p>\n<p>For the sake of example, let’s register a few starter patterns the same way. First, we’ll add a new <code>/inc</code> folder to the top level of the theme folder, followed by another folder contained in it called <code>/patterns</code>. And in that folder, let’s add a new file called <code>block-patterns.php</code>. In that file, let’s add a modified version of the Twenty Twenty-Two theme’s block registration function mapped to four patterns we want to register for the 404 page template:</p>\n<ul>\n<li><code>404-blue.php</code></li>\n<li><code>page-not-found.php</code></li>\n</ul>\n<p>Here’s how it all looks:</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/17-folder-structure.png\" /></p>\n<p>Let’s turn our attention to the patterns themselves. Specifically, let’s open up the <code>404-blue.php</code> file and add the code from <a href=\"https://wordpress.org/patterns/pattern/seo-friendly-404-page/\">this Pattern in the Patterns Directory</a> and <a href=\"https://wordpress.org/patterns/pattern/page-not-found-404/\">this one as well</a>:</p>\n<div>\n<pre><code>&lt;?php\n/**\n  * Blue pattern\n  * source: <a href=\"https://wordpress.org/patterns/pattern/seo-friendly-404-page/\">https://wordpress.org/patterns/pattern/seo-friendly-404-page/</a>\n**/\n?&gt;\n\nreturn array(\n  'title' =&gt; __( '404 Blue', 'mytheme' ),\n  'categories' =&gt; array( 'post' ),\n  'templateTypes' =&gt; array( '404' ),\n  'inserter' =&gt; 'yes',\n  'content' =&gt; '&lt;!-- wp:columns { \"align\":\"full\" } --&gt;\n&lt;div class=\"wp-block-columns alignfull\"&gt;&lt;!-- wp:column { \"width\":\"100%\" } --&gt;\n&lt;div class=\"wp-block-column\" style=\"flex-basis:100%\"&gt;&lt;!-- wp:columns { \"style\":{\" color\":{ \"gradient\":\"linear-gradient(308deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100% )\" },\"spacing\":{ \"padding\":{ \"right\":\"20px\",\"bottom\":\"100px\",\"left\":\"20px\",\"top\":\"100px\"} } } } --&gt;\n&lt;div class=\"wp-block-columns has-background\" style=\"background:linear-gradient(308deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);padding-top:100px;padding-right:20px;padding-bottom:100px;padding-left:20px\"&gt;&lt;!-- wp:column { \"width\":\"1920px\" } --&gt;\n&lt;div class=\"wp-block-column\" style=\"flex-basis:1920px\"&gt;&lt;!-- wp:heading { \"textAlign\":\"center\",\"level\":1,\"style\":{ \"typography\":{ \"textTransform\":\"uppercase\",\"fontSize\":\"120px\" } },\"textColor\":\"white\" } --&gt;\n&lt;h1 class=\"has-text-align-center has-white-color has-text-color\" style=\"font-size:120px;text-transform:uppercase\"&gt;&lt;strong&gt;404&lt;/strong&gt;&lt;/h1&gt;\n&lt;!-- /wp:heading --&gt;\n\n&lt;!-- wp:heading { \"textAlign\":\"center\",\"style\":{ \"typography\":{ \"textTransform\":\"uppercase\" } },\"textColor\":\"white\" } --&gt;\n&lt;h2 class=\"has-text-align-center has-white-color has-text-color\" style=\"text-transform:uppercase\"&gt;😭 &lt;strong&gt;Page Not Found&lt;/strong&gt; 💔&lt;/h2&gt;\n&lt;!-- /wp:heading --&gt;\n\n&lt;!-- wp:paragraph { \"align\":\"center\",\"textColor\":\"white\" } --&gt;\n&lt;p class=\"has-text-align-center has-white-color has-text-color\"&gt;The page you are looking for might have been removed had it's name changed or is temporary unavailable. &lt;/p&gt;\n&lt;!-- /wp:paragraph --&gt;\n\n&lt;!-- wp:search { \"label\":\"\",\"showLabel\":false,\"placeholder\":\"Try Searching for something else...\",\"width\":100,\"widthUnit\":\"%\",\"buttonText\":\"Search\",\"buttonPosition\":\"no-button\",\"align\":\"center\",\"style\":{ \"border\":{ \"radius\":\"50px\",\"width\":\"0px\",\"style\":\"none\" } },\"backgroundColor\":\"black\",\"textColor\":\"white\" } /--&gt;\n\n&lt;!-- wp:paragraph { \"align\":\"center\",\"textColor\":\"white\" } --&gt;\n&lt;p class=\"has-text-align-center has-white-color has-text-color\"&gt;💡 Or you can return to our &lt;a href=\"#\"&gt;home page&lt;/a&gt; or &lt;a href=\"#\"&gt;contact us&lt;/a&gt; if you can't find what you are looking for&lt;/p&gt;\n&lt;!-- /wp:paragraph --&gt;\n\n&lt;!-- wp:buttons { \"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\" } } --&gt;\n&lt;div class=\"wp-block-buttons\"&gt;&lt;!-- wp:button { \"backgroundColor\":\"black\",\"textColor\":\"white\",\"style\":{ \"border\":{ \"radius\":\"50px\" },\"spacing\":{ \"padding\":{ \"top\":\"15px\",\"right\":\"30px\",\"bottom\":\"15px\",\"left\":\"30px\" } } } } --&gt;\n&lt;div class=\"wp-block-button\"&gt;&lt;a class=\"wp-block-button__link has-white-color has-black-background-color has-text-color has-background\" style=\"border-radius:50px;padding-top:15px;padding-right:30px;padding-bottom:15px;padding-left:30px\"&gt;Go to Homepage&lt;/a&gt;&lt;/div&gt;\n&lt;!-- /wp:button --&gt;\n\n&lt;!-- wp:button { \"backgroundColor\":\"black\",\"textColor\":\"white\",\"style\":{ \"border\":{ \"radius\":\"50px\" },\"spacing\": { \"padding\":{ \"top\":\"15px\",\"bottom\":\"15px\",\"left\":\"60px\",\"right\":\"60px\" } } } } --&gt;\n&lt;div class=\"wp-block-button\"&gt;&lt;a class=\"wp-block-button__link has-white-color has-black-background-color has-text-color has-background\" style=\"border-radius:50px;padding-top:15px;padding-right:60px;padding-bottom:15px;padding-left:60px\"&gt;Contact Us&lt;/a&gt;&lt;/div&gt;\n&lt;!-- /wp:button --&gt;&lt;/div&gt;\n&lt;!-- /wp:buttons --&gt;\n\n&lt;!-- wp:paragraph { \"align\":\"center\",\"textColor\":\"white\",\"fontSize\":\"small\" } --&gt;\n&lt;p class=\"has-text-align-center has-white-color has-text-color has-small-font-size\"&gt;Find the page at our &lt;a href=\"#sitemap\"&gt;sitemap&lt;/a&gt;&lt;/p&gt;\n&lt;!-- /wp:paragraph --&gt;&lt;/div&gt;\n&lt;!-- /wp:column --&gt;&lt;/div&gt;\n&lt;!-- /wp:columns --&gt;&lt;/div&gt;\n&lt;!-- /wp:column --&gt;&lt;/div&gt;\n&lt;!-- /wp:columns --&gt;'\n</code></pre>\n</div>\n\n<p>Once again, I think it’s worth calling out the <code>templatesTypes</code> argument, as we’re using it to link this “404 Blue” pattern to the 404 page template. This way, the pattern is only registered to that template and that template alone.</p>\n<p>Now that we’ve finished adding the right folders and files and have registered the “404 Blue” pattern to the 404 page template, we can create the 404 page template and see our patterns at work:</p>\n<ul>\n<li>Open up the WordPress admin and navigate to the Site Editor (Appearance → Editor).</li>\n<li>Open the Templates screen by clicking “Templates” in the Site Editor side panel.</li>\n<li>Click “Add New Template”.</li>\n<li>Select the “Page: 404” option.</li>\n</ul>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/18-template-interface.png\" /></p>\n<p>Selecting the 404 page template triggers a popup modal that prompts you to choose a pattern for the page using — you guessed it — the patterns we just registered! The default starter pattern established by the theme is displayed as well.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/19-choose-pattern-modal-window.png\" /></p>\n<h3>Custom Template With Starter Patterns</h3>\n<p>What we just did was create a set of patterns linked to the theme’s 404 page template. But what if we want to link a pattern set to a <em>custom</em> page template? When the Site Editor was first introduced, it only supported a few core page templates, like page, post, and front page. Now, however, we not only have more options but the choice to create a custom page template as well.</p>\n<p>So, let’s look at that process by adding new files to the <code>/inc/patterns</code> folder we created in the last example:</p>\n<ul>\n<li><code>about-me.php</code>,</li>\n<li><code>my-portfolio.php</code>.</li>\n</ul>\n<p>We won’t grab code examples for these since we spelled out the full process in the last example. But I will point out that the main difference is that we change the <code>templateTypes</code> argument in each pattern file so that it links the patterns to the custom templates we plan on creating in the Site Editor:</p>\n<div>\n<pre><code>&lt;?php\n/**\n  * About Me\n  * source: <a href=\"https://wordpress.org/patterns/pattern/seo-friendly-404-page/\">https://wordpress.org/patterns/pattern/seo-friendly-404-page/</a>\n**/\n?&gt;\n\nreturn array(\n  'title' =&gt; __( 'About Me', 'mytheme' ),\n  'categories' =&gt; array( 'post' ),\n  'templateTypes' =&gt; array( 'portfolio', 'author' ),\n  // etc.\n);\n</code></pre>\n</div>\n\n<p>Now we can go back to the Site Editor, open the Templates screen, and select “Add new template” as we did before. But this time, instead of choosing one of the predefined template options, we will click the “Custom template” option at the bottom. From there, we get a new prompt to name the custom template. We’ll call this one “My Portfolio”:</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/20-create-custom-template-popup.png\" /></p>\n<p>Next, we could try to choose patterns for the template, but it leads to a blank page at the time of this writing. Instead, we can skip that step, open the template in the editor, and add the patterns to the template there as you would any other block or pattern. Click the + button in the top-left corner of the editor to open the block inserter side panel, then open the “Patterns” tab and select patterns to preview them in the custom template.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/21-pattern-previews-block-inserter.png\" /></p>\n<p>As a side note, do you see how the patterns are bundled in categories (e.g., Featured, Posts, Text, and so on)? That’s what the <code>categories</code> argument in the pattern file’s return array sets. If a pattern is not assigned a category, then it will automatically go into an “Unclassified” category.</p>\n<p>The <a href=\"https://developer.wordpress.org/news/2023/04/using-template-patterns-to-build-multiple-homepage-designs/\">WordPress Developer Blog</a> provides additional examples of custom starter templates.</p>\n<h3>Using Patterns In The Post Editor</h3>\n<p>We can insert custom patterns into pages and posts using the Post Editor in the same way we can insert them into templates using the Site Editor. In the Post Editor, any custom patterns that are registered but not linked to specific templates are listed in the “My patterns” category of the Block Inserter’s “Patterns” tab.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/22-patterns-block-inserter.png\" /></p>\n<p>This <a href=\"https://github.com/WordPress/gutenberg/pull/51144#issuecomment-1620839856\">discussion on GitHub</a> suggests that displaying categories for custom patterns will be prioritized for a future release.</p>\nUsing Patterns From The Patterns Directory\n<p>We’ve certainly danced around this topic throughout the rest of the examples we’ve covered. We’ve been copying and pasting items from the Patterns Directory to register our own custom patterns and link them to specific page templates. But let’s also see what it’s like to use a pattern directly from the Patterns Directory without modifying anything.</p>\n<p>If you’ve installed a plugin from the Plugins Directory, then you are already familiar with installing patterns from the Patterns Directory. It’s the same concept: <strong>members from the community contribute open-source patterns, and anyone running a WordPress site can use them.</strong></p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/23-wordpress-patterns-directory-homepage.png\" /></p>\n<p>The library allows users to select patterns that are contributed by the <a href=\"https://wordpress.org/patterns/?curation=community\">“community”</a> or <a href=\"https://wordpress.org/patterns/?curation=core\">“curated”</a> by the WordPress.org team, all of which fall in a wide range of different categories, from Text and Gallery to Banners and Call to Action, among many others.</p>\n<p>Adding a pattern to a site isn’t <em>exactly</em> the same as installing a plugin. A plugin can be installed directly from the Plugins Directory via the WordPress admin and activated from there. Patterns, however, should be added to a block theme’s <code>theme.json</code>, registered in the <a href=\"https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-living/#patterns\"><code>patterns</code> object</a> using the pattern’s slug as the value. Multiple patterns can be registered with comma-separation:</p>\n<pre><code>{\n  \"version\": 2,\n  \"patterns\": [ \"short-text\", \"patterns-slug\" ],\n  // etc.\n}\n</code></pre>\n\n<p>The following example uses a pattern called <a href=\"https://wordpress.org/patterns/pattern/slanted-style-call-to-action/\">“Slanted Style Call To Action”</a> from the Patterns Directory. It is used in the <code>theme.json</code> file of a theme I cloned from the default <a href=\"https://wordpress.org/themes/twentytwentythree/\">Twenty Twenty-Three theme</a>:</p>\n<div>\n<pre><code>{\n  \"version\": 2,\n  \"patterns\": [ \"slanted-pattern\", \"slanted-style-call-to-action\" ]\n}\n</code></pre>\n</div>\n\n<p>Now, we can view the newly added pattern in the Post Editor by opening the Block Inserter and selecting the Patterns tab, where the pattern is listed. Similarly, it’s possible to use the Block Inserter’s search function to pull up the pattern:</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/24-block-inserter-search-function.png\" /></p>\n<p>For those of you who would like to use patterns directly from the Pattern Directory without first registering them, the <a href=\"https://gutenberghub.com/\">GutenbergHub</a> team has created a <a href=\"https://builder.gutenberghub.com/\">page builder app</a> that makes that possible. They have an <a href=\"https://youtu.be/tFaq6lqSURo\">introductory video</a> that demonstrates it.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/25-gutenberghub-builder-homepage.png\" /></p>\n<p>You can copy the code from the app and paste it into a site, which makes it much easier to build complex layout patterns in a low-code fashion. Jamie Marsland shows in <a href=\"https://youtu.be/5Qw2SNWwirI?t=87\">this short video</a> (at 1:27) how the app can be used to create an entire page layout, similar to a full-fledged page builder, by selecting desired page sections from the Patterns Directory.</p>\n<p>Learn more about creating starter patterns in the <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/curating-the-editor-experience/#utilizing-patterns\">“Utilizing patterns”</a> section of the WordPress Developer Resources documentation.</p>\nAspect Ratio For Large Images\n<p>You may have already noticed that the <code>core/image</code> block didn’t allow dimensions or aspect-ratio controls for images that were added to the block. With WP 6.3, you can control the aspect ratio of an image, which will be preserved when you change it with another one of different sizes.</p>\n<p><img src=\"https://files.smashing.media/articles/enhanced-patterns-system-wordpress/26-aspect-ration-settings-image-block.png\" /></p>\n<p>This feature will be helpful when <a href=\"https://make.wordpress.org/core/2023/07/13/core-editor-improvement-advancing-the-power-of-patterns/\">replacing images in block patterns</a>. This <a href=\"https://make.wordpress.org/core/files/2023/06/Editing-Aspect-ratio.mov\">short video</a> shows you how image aspect ratio can be used in block patterns.</p>\n<p>For an additional in-depth discussion and rationale, please visit GitHub PRs <a href=\"https://github.com/WordPress/gutenberg/pull/51078\">#51078</a>, <a href=\"https://github.com/WordPress/gutenberg/pull/51144\">#51144</a>, <a href=\"https://github.com/WordPress/gutenberg/issues/50028\">#50028</a>, and <a href=\"https://github.com/WordPress/gutenberg/issues/48079\">#48079</a>.</p>\nWrapping Up\n<p>In this article, we discussed the new evolving block patterns feature in WordPress 6.3 and showed a few use cases for creating custom patterns within the site editor. This new feature provides users with unlimited ways to arrange blocks and save them as patterns for widespread use. The integration of reusable blocks and traditional patterns within the Site and Post Editors aims to streamline workflows, enhance content creation, and prepare for upcoming enhancements in WordPress 6.4.</p>\n<p>In addition, the <a href=\"https://make.wordpress.org/core/2023/08/22/roadmap-to-6-4/\">WordPress 6.4 roadmap</a> includes more advanced features for patterns that we have to look forward to:</p>\n<ul>\n<li><a href=\"https://github.com/WordPress/gutenberg/issues/53164\">Set categories</a>;</li>\n<li><a href=\"https://github.com/WordPress/gutenberg/issues/51945\">Update the inserter experience</a> to ensure consistency between synced and unsynced;</li>\n<li><a href=\"https://github.com/WordPress/gutenberg/issues/52150\">Improve compatibility for non-block themes</a>;</li>\n<li><a href=\"https://github.com/WordPress/gutenberg/issues/53287#top\">Iterate on the patterns page’s empty category state</a>;</li>\n<li><a href=\"https://wordpress.tv/2023/07/18/builder-basics-goodbye-reusable-blocks-hello-synced-patterns-and-more/\">Synced patterns not receiving the alignment attribute in the editor</a>.</li>\n</ul>\n<p>You can check out this <a href=\"https://wordpress.tv/2023/07/18/builder-basics-goodbye-reusable-blocks-hello-synced-patterns-and-more/\">WordPress TV video</a> to learn more details about how the block patterns are evolving. Additionally, work-in-progress issues can be <a href=\"https://github.com/WordPress/gutenberg/issues/38529\">tracked on GitHub</a>.</p>\n<p><strong>Note</strong>: <em>Since this article was written, <a href=\"https://wordpress.org/news/2023/09/wordpress-6-4-beta-1/\">WordPress 6.4 Beta 1</a> has been released. The new release allows users to better organize <a href=\"https://github.com/WordPress/gutenberg/pull/53835\">synced and unsynced patterns with categories</a> as part of the creation process. Please refer to the release note for more up-to-date information.</em></p>\n<h3>Further Reading</h3>\n<ul>\n<li><a href=\"https://wordpress.org/documentation/article/reusable-blocks/\">Reusable Blocks</a> (WordPress Documentation)</li>\n<li><a href=\"https://wordpress.org/news/2023/07/synced-patterns-the-evolution-of-reusable-blocks/\">Synced Patterns: The Evolution of Reusable Blocks</a> (WordPress News)</li>\n<li><a href=\"https://make.wordpress.org/core/2023/07/13/core-editor-improvement-advancing-the-power-of-patterns/\">Core Editor Improvement: Advancing the power of Patterns</a> (Make WordPress Core)</li>\n<li><a href=\"https://learn.wordpress.org/lesson-plan/difference-between-reusable-blocks-block-pattern-templates-template-parts/\">Difference between Reusable Blocks, Block Pattern, Templates, Template Parts</a> (Learn WordPress)</li>\n<li><a href=\"https://wordpress.tv/2023/07/18/builder-basics-goodbye-reusable-blocks-hello-synced-patterns-and-more/\">Builder Basics: Goodbye Reusable Blocks — Hello Synced Patterns (and more)</a> (WordPress TV)</li>\n<li><a href=\"https://make.wordpress.org/core/2023/08/22/roadmap-to-6-4/\">Roadmap to 6.4</a> (Make WordPress Core) </li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"b7c74cc89f6b3eed1d690b123b95d3d7748c038d3317efa88596daabbeb98a18","category":"Tech"}