{"title":"Announcing AWS Graviton2 Support for AWS Fargate – Get up to 40% Better Price-Performance for Your Serverless Containers","link":"https://aws.amazon.com/blogs/aws/announcing-aws-graviton2-support-for-aws-fargate-get-up-to-40-better-price-performance-for-your-serverless-containers/","date":1637693386000,"content":"<p><a href=\"https://aws.amazon.com/ec2/graviton/\">AWS Graviton2 processors</a> are custom-built by AWS using 64-bit Arm Neoverse cores to deliver the best price-performance for your cloud workloads running in <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud</a> (Amazon EC2). They provide up to 40 percent better price-performance over comparable x86-based instances for a wide variety of workloads. Many of <a href=\"https://aws.amazon.com/ec2/graviton/customers/\">our customers</a> such as Intuit, SmugMug, Snap, Formula One, and Honeycomb.io use Graviton2-based instances to run their workloads for better price-performance in Amazon EC2 for their workloads and enjoy better price-performance.</p> \n<p>Many fully-managed services including <a href=\"https://aws.amazon.com/blogs/aws/new-amazon-rds-on-graviton2-processors/\">Amazon Relational Database Service</a> (Amazon RDS), <a href=\"https://aws.amazon.com/about-aws/whats-new/2021/03/achieve-up-to-35-percent-better-price-performance-with-amazon-aurora-using-new-graviton2-instances/\">Amazon Aurora</a>, <a href=\"https://aws.amazon.com/blogs/database/migrate-amazon-elasticache-to-graviton2-processors/\">Amazon ElastiCache</a>, <a href=\"https://aws.amazon.com/blogs/big-data/increase-amazon-elasticsearch-service-performance-by-upgrading-to-graviton2/\">Amazon OpenSearch Service</a> (successor of Amazon Elasticsearch Service), and <a href=\"https://aws.amazon.com/blogs/big-data/amazon-emr-now-provides-up-to-30-lower-cost-and-up-to-15-improved-performance-for-spark-workloads-on-graviton2-based-instances/\">Amazon EMR</a> have extended the benefits of Graviton2 to their customers. Recently, we also extended the benefits of Graviton2 to our serverless computing customers using <a href=\"https://aws.amazon.com/blogs/aws/aws-lambda-functions-powered-by-aws-graviton2-processor-run-your-functions-on-arm-and-get-up-to-34-better-price-performance/\">AWS Lambda</a>. AWS Lambda functions powered by AWS Graviton2 offer up to 19 percent better performance at 20 percent lower cost compared to running them on x86-based instances.</p> \n<p>Today, I am happy to announce AWS Graviton2 support for <a href=\"https://aws.amazon.com/fargate/\">AWS Fargate</a> with <a href=\"https://aws.amazon.com/ecs\">Amazon Elastic Container Service</a> (Amazon ECS). AWS Fargate is the serverless compute engine for containers on AWS that removes the need to provision, scale, and manage servers. AWS Fargate powered by AWS Graviton2 processors delivers up to 40 percent better price-performance at 20 percent lower cost over comparable Intel x86-based Fargate for containerized applications.</p> \n<p>With Graviton2 support for Fargate, you get the serverless benefits of Fargate, the price-performance advantages of Graviton2, and the flexibility to use a container compute processor of your choice. You can upload multi-architecture images or images that have ARM64 in your image manifest with your container registry, such as <a href=\"https://aws.amazon.com/ecr\">Amazon Elastic Container Registry</a> (Amazon ECR). When orchestrated via Amazon ECS, Fargate will run these applications on Graviton2-powered compute.</p> \n<p>Multi-architecture container images consist of two main parts: layers and a manifest. Each container image has one or more layers of file system content. The manifest specifies the groups of layers that make up the image as well as its runtime characteristics, either <code>ARM64</code> and <code>X86_64</code>.</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/13/2021-multi-architecture-aws-fargate.png\" /></p> \n<p>This allows you to have the same repository that supports multiple architectures, and the container runtime does the work of selecting which image layers to pull based on the system architecture, including ARM64. To learn more, visit <a href=\"https://aws.amazon.com/blogs/containers/introducing-multi-architecture-container-images-for-amazon-ecr/\">Introducing multi-architecture container images for Amazon ECR</a>.</p> \n<p><strong><u>Getting Started With Fargate powered by Graviton2 processors</u></strong><br /> To enable Graviton2 support for Fargate, you opt in to Arm compatibility in your ECS cluster. In the <a href=\"https://console.aws.amazon.com/ecs/v2/task-definitions\">ECS console</a>, when creating a new task definition, you can simply select <strong>Linux/ARM64</strong> in the <strong>Operating system/Architecture</strong> dropdown list.</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/18/2021-fargate-arm64-task-definitions.png\" /></p> \n<p>The following is an example of a task definition containing a simple container using the Fargate launch type with an optional parameter <code>cpuArchitecture</code> to <code>ARM64</code>. (The default value is <code>X86_64</code>).</p> \n<pre><code>{\n \"family\": \"bb-arm64\",\n \"networkMode\": \"awsvpc\",\n \"containerDefinitions\": [\n    {\n        \"name\": \"sleep\",\n        \"image\": \"arm64v8/busybox\",\n        \"cpu\": 100,\n        \"memory\": 100,\n        \"essential\": true,\n        \"command\": [ \"echo hello\" ],\n        \"entryPoint\": [ \"sh\", \"-c\" ]\n    }\n ],\n \"requiresCompatibilities\": [ \"FARGATE\" ],\n \"cpu\": \"1 vCpu\",\n \"memory\": \"3 GB\",\n <strong>\"runtimePlatform\": { \"cpuArchitecture\": \"ARM64\" },</strong>\n \"executionRoleArn\": \"arn:aws:iam::1234567890:role/ecsTaskExecutionRole\"\n}</code></pre> \n<p>When you run your tasks with the Graviton-based compute, you can see the value of <strong>Linux/ARM64</strong> for <strong>Operating system/Architecture</strong> in each task detail page of the ECS console.</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/18/2021-fargate-arm64-clusters.png\" /></p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/18/2021-fargate-arm64-tasks.png\" /></p> \n<p>With <a href=\"https://aws.amazon.com/cli\">AWS Command-line Interface</a> (AWS CLI), you simply find which architecture is used in your ECS cluster.</p> \n<pre><code>$ aws ecs describe-tasks \\\n    --cluster MyCluster \\\n    --tasks arn:aws:ecs:us-west-2:123456789012:task/MyCluster/1234567890123456789</code></pre> \n<p>Here is an output of CPU architecture in the response of <code>DescribeTasks</code> or will have it as a filter to <code>ListTasks</code>.</p> \n<pre><code>{ \n    \"tasks\": [\n    {\n        \"family\": \"...\",\n        \"attributes\": [\n            {\n                \"name\": \"ecs.cpu-architecture\",\n                \"value\": \"arm64\"\n            }\n        ]\n    }]\n}</code></pre> \n<p><strong><u>Migration to Gaviton2-based Fargate Containers</u></strong><br /> You get all the same Fargate features you’re used to for your containerized applications with Intel x86-based offering. With logging, monitoring, tracing, extensible ephemeral storage by <a href=\"https://aws.amazon.com/efs\">Amazon Elastic File System</a> (Amazon EFS) file systems, and more, you can easily migrate your applications to Graviton2-based Fargate containers. You get out-of-the-box logging via <a href=\"https://aws.amazon.com/cloudwatch\">Amazon CloudWatch</a> logs and metrics via <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContainerInsights.html\">Container Insights</a> and <a href=\"https://aws.amazon.com/otel/\">AWS Distro for Open Telemetry</a> agent as a sidecar to enable traces via <a href=\"https://aws-otel.github.io/docs/setup/ecs\">ServiceLens</a>.</p> \n<p>With Amazon ECS, you can use <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html\">Amazon ECS Exec</a> for break-glass or developer debugging scenarios. With ECS Exec, you can directly interact with containers without needing to first interact with the host container operating system, open inbound ports, or manage SSH keys. You can use ECS Exec to run commands in or get a shell to a container running on an Amazon EC2 instance or on AWS Fargate.  To learn more, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html\">Using Amazon ECS Exec for debugging</a> in the AWS documentation.</p> \n<p>Once your development teams test and validate that applications are ARM64 compatible, in addition to using <a href=\"https://aws.amazon.com/codebuild\">AWS CodeBuild</a> that has supported Graviton for a long time, you can now run Jenkins or Gitlab runners. This will give you an end-to-end serverless experience, right from testing to building containers to running them on Fargate.</p> \n<p>To get more support with the monitoring and logging, security, and continuous delivery on AWS Fargate, see the <a href=\"https://aws.amazon.com/fargate/partners/\">list of AWS Fargate Partners</a> such as <a href=\"https://blog.aquasec.com/aqua-support-aws-graviton\">Aqua Security</a>, <a href=\"https://www.datadoghq.com/blog/aws-fargate-on-graviton2-monitoring\">Datadog</a>, <a href=\"https://docs.newrelic.com/docs/infrastructure/elastic-container-service-integration/installation/install-ecs-integration/\">New Relic</a>, <a href=\"https://github.com/signalfx/splunk-otel-collector/tree/main/deployments/fargate#aws-graviton2\">Splunk</a>, and <a href=\"https://www.sumologic.com/blog/sumo-logic-extends-monitoring-for-aws-fargate-powered-by-aws-graviton2-processors\">Sumo Logic</a> that have extended Fargate’s capabilities.</p> \n<p><strong><u>Available Now</u></strong><br /> AWS Graviton2 support on AWS Fargate is available in all AWS Regions where Fargate is available except Bahrain, Cape Town, China, and GovCloud regions. This feature is supported on Fargate Platform Version (PV) 1.4.0 or later. If you are not already using PV 1.4.0, see the <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html#platform-version-migration\">AWS Fargate platform versions</a> section in the AWS documentation to learn how to migrate.</p> \n<p>You can get up to 40 percent better price-performance for Arm-compatible container-based applications. You can further reduce your costs by getting up to a 52 percent discount off on-demand pricing in exchange for a commitment of a one- or three-year term with <a href=\"https://aws.amazon.com/savingsplans/compute-pricing/\">Compute Savings Plans</a>. For more information, see the <a href=\"https://aws.amazon.com/fargate/pricing/\">AWS Fargate pricing</a> page.</p> \n<p>Give it a try, and please send us feedback either on the public <a href=\"https://github.com/aws/containers-roadmap/issues\">AWS containers roadmap</a> in the <a href=\"https://forums.aws.amazon.com/forum.jspa?forumID=187\">AWS forum</a> for Amazon ECS, or through your usual AWS support contacts.</p> \n<p>– <a href=\"https://twitter.com/channyun\">Channy</a></p>","author":"Channy Yun","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"14038bbab15d87df0fdd1e41920f985c92eea01f7bd8e0b237bcca19697dd487","category":"Tech"}