{"title":"New – Amazon CloudWatch Evidently – Experiments and Feature Management","link":"https://aws.amazon.com/blogs/aws/cloudwatch-evidently/","date":1638204222000,"content":"<p>As a developer, I am excited to announce the availability of <a href=\"https://aws.amazon.com/cloudwatch/features/\">Amazon CloudWatch Evidently</a>. This is a new <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> capability that makes it easy for developers to introduce experiments and feature management in their application code. CloudWatch Evidently may be used for two similar but distinct use-cases: implementing dark launches, also known as feature flags, and A/B testing.</p> \n<p><a href=\"https://en.wikipedia.org/wiki/Feature_toggle\">Features flags</a> is a software development technique that lets you enable or disable features without needing to deploy your code. It decouples the feature deployment from the release. Features in your code are deployed in advance of the actual release. They stay hidden behind <code>if-then-else</code> statements. At runtime, your application code queries a remote service. The service decides the percentage of users who are exposed to the new feature. You can also configure the application behavior for some specific customers, your beta testers for example.</p> \n<p>When you use feature flags you can deploy new code in advance of your launch. Then, you can progressively introduce a new feature to a fraction of your customers. During the launch, you monitor your technical and business metrics. As long as all goes well, you may increase traffic to expose the new feature to additional users. In the case that something goes wrong, you may modify the server-side routing with just one click or API call to present only the old (and working) experience to your customers. This lets you revert back user experience without requiring rollback deployments.</p> \n<p><a href=\"https://en.wikipedia.org/wiki/A/B_testing\">A/B Testing</a> shares many similarities with feature flags while still serving a different purpose. A/B tests consist of a randomized experiment with multiple variations. A/B testing lets you compare multiple versions of a single feature, typically by testing the response of a subject to variation A against variation B, and determining which of the two is more effective. For example, let’s imagine an e-commerce website (a scenario we know quite well at Amazon). You might want to experiment with different shapes, sizes, or colors for the checkout button, and then measure which variation has the most impact on revenue.</p> \n<p>The infrastructure required to conduct A/B testing is similar to the one required by feature flags. You deploy multiple scenarios in your app, and you control how to route part of the customer traffic to one scenario or the other. Then, you perform deep dive statistical analysis to compare the impacts of variations. CloudWatch Evidently assists in interpreting and acting on experimental results without the need for advanced statistical knowledge. You can use the insights provided by Evidently’s statistical engine, such as anytime <a href=\"https://en.wikipedia.org/wiki/P-value\">p-value</a> and <a href=\"https://en.wikipedia.org/wiki/Confidence_interval\">confidence intervals</a> for decision-making while an experiment is in progress.</p> \n<p>At Amazon, we use feature flags extensively to control our launches, and A/B testing to experiment with new ideas. We’ve acquired years of experience to build developers’ tools and libraries and maintain and operate experimentation services at scale. Now you can benefit from our experience.</p> \n<p>CloudWatch Evidently uses the terms “launches” for feature flags and “experiments” for A/B testing, and so do I in the rest of this article.</p> \n<p>Let’s see how it works from an application developer point of view.</p> \n<p><span><strong>Launches in Action<br /> </strong></span>For this demo, I use a simple Guestbook web application. So far, the guest book page is read-only, and comments are entered from our back-end only. I developed a new feature to let customers enter their comments on the guestbook page. I want to launch this new feature progressively over a week and keep the ability to revert the change back if it impacts important technical or business metrics (such as p95 latency, customer engagement, page views, etc.). Users are authenticated, and I will segment users based on their user ID.</p> \n<table> \n <tbody> \n  <tr> \n   <td>Before launch:<br /> <a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_18-08-59.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_18-08-59.png\" /></a></td> \n   <td>After launch:<br /> <a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_18-10-43.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_18-10-43.png\" /></a></td> \n  </tr> \n </tbody> \n</table> \n<p><span><strong>Create a Project<br /> </strong></span>Let’s start by configuring Evidently. I open the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a> and navigate to <strong>CloudWatch Evidently</strong>. Then, I select <strong>Create a project</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_16-53-32.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_16-53-32.png\" /></a></p> \n<p>I enter a <strong>Project name</strong> and Description.</p> \n<p>Evidently lets you optionally store events to CloudWatch logs or S3, so that you can move them to systems such as <a href=\"https://aws.amazon.com/redshift/\">Amazon Redshift</a> to perform analytical operations. For this demo, I choose not to store events. When done, I select <strong>Create project</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/25/2021-11-25_16-03-34.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/25/2021-11-25_16-03-34.png\" /></a></p> \n<p><span><strong>Add a Feature</strong></span><br /> Next, I create a feature for this project by selecting <strong>Add feature</strong>. I enter a <strong>Feature name</strong> and <strong>Feature description</strong>. Next, I define my <strong>Feature variations.</strong> In this example, there are two variations, and I use a Boolean type. <code>true</code> indicates the guestbook is editable and <code>false</code> indicates it is read only. Variations types might be <code>boolean</code>, <code>double</code>, <code>long</code>, or <code>string</code>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_17-59-05.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_17-59-05.png\" /></a>I may define overrides. Overrides let me pre-define the variation for selected users. I want the user “seb”, my beta tester, to always receive the editable variation.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_17-59-20.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_17-59-20.png\" /></a>The console shares the JavaScript and Java code snippets to add into my application.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_18-35-43.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_18-35-43.png\" /></a>Talking about code snippets, let’s look at the changes at the code level.</p> \n<p><span><strong>Instrument my Application Code</strong></span><br /> I use a simple web application for this demo. I coded this application using <a href=\"https://en.wikipedia.org/wiki/JavaScript\">JavaScript</a>. I use the <a href=\"https://aws.amazon.com/sdk-for-javascript/\">AWS SDK for JavaScript</a> and <a href=\"https://webpack.js.org/\">Webpack</a> to package my code. I also use <a href=\"https://jquery.com/\">JQuery</a> to manipulate the DOM to hide or show elements. I designed this application to use standard JavaScript and a minimum number of frameworks to make this example inclusive to all. Feel free to use higher level tools and frameworks, such as <a href=\"https://reactjs.org/\">React</a> or <a href=\"https://angular.io/\">Angular</a> for real-life projects.</p> \n<p>I first initialize the Evidently client. Just like other AWS Services, I have to provide an access key and secret access key for authentication. Let’s leave the authentication part out for the moment. I added a note at the end of this article to discuss the options that you have. In this example, I use <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Identity Pools</a> to receive temporary credentials.</p> \n<pre><code>// Initialize the Amazon CloudWatch Evidently client\nconst evidently = new AWS.Evidently({\n    endpoint: EVIDENTLY_ENDPOINT,\n    region: 'us-east-1',\n    credentials: fromCognitoIdentityPool({\n        client: new CognitoIdentityClient({ region: 'us-west-2' }),\n        identityPoolId: IDENTITY_POOL_ID\n    }),\n});</code></pre> \n<p>Armed with this client, my code may invoke the <code>EvaluateFeature</code> API to make decisions about the variation to display to customers. The <code>entityId</code> is any string-based attribute to segment my customers. It might be a session ID, a customer ID, or even better, a hash of these. The <code>featureName</code> parameter contains the name of the feature to evaluate. In this example, I pass the value <code>EditableGuestBook</code>.</p> \n<pre><code>const evaluateFeature = async (entityId, featureName) =&gt; {\n\n    // API request structure\n    const evaluateFeatureRequest = {\n        // entityId for calling evaluate feature API\n        entityId: entityId,\n        // Name of my feature\n        feature: featureName,\n        // Name of my project\n        project: \"AWSNewsBlog\",\n    };\n\n    // Evaluate feature\n    const response = await evidently.evaluateFeature(evaluateFeatureRequest).promise();\n    console.log(response);\n    return response;\n}</code></pre> \n<p>The response contains the assignment decision from Evidently, as based on traffic rules defined on the server-side.</p> \n<pre><code>{\n details: {\n   launch: \"EditableGuestBook\", group: \"V2\"},\n   reason: \"LAUNCH_RULE_MATCH\", \n   value: {boolValue: false},\n   variation: \"readonly\"\n}}</code></pre> \n<p>The last part consists of hiding or displaying part of the user interface based on the <code>value</code> received above. Using basic JQuery DOM manipulation, it would be something like the following:</p> \n<pre><code>window.aws.evaluateFeature(entityId, 'EditableGuestbook').then((response, error) =&gt; {\n    if (response.value.boolValue) {\n        console.log('Feature Flag is on, showing guest book');\n        $('div#guestbook-add').show();\n    } else {\n        console.log('Feature Flag is off, hiding guest book');\n        $('div#guestbook-add').hide();\n    }\n});\n</code></pre> \n<p><span><strong>Create a Launch</strong></span><br /> Now that the feature is defined on the server-side, and the client code is instrumented, I deploy the code and expose it to my customers. At a later stage, I may decide to launch the feature. I navigate back to the console, select my project, and select <strong>Create Launch</strong>. I choose a <strong>Launch name</strong> and a <strong>Launch description</strong> for my launch. Then, I <strong>select</strong> the feature I want to launch.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_19-22-01b.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_19-22-01b-816x1024.png\" /></a>In the <strong>Launch Configuration</strong> section, I configure how much traffic is sent to each variation. I may also schedule the launch with multiple steps. This lets me plan different steps of routing based on a schedule. For example, on the first day, I may choose to send 10% of the traffic to the new feature, and on the second day 20%, etc. In this example, I decide to split the traffic 50/50.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_19-36-50.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_19-36-50-1024x468.png\" /></a>Finally, I may define up to three metrics to measure the performance of my variations. Metrics are defined by applying rules to data events.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/25/2021-11-25_16-07-40.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/25/2021-11-25_16-07-40.png\" /></a>Again, I have to instrument my code to send these metrics with <code>PutProjectEvents</code> API from Evidently. Once my launch is created, the <code>EvaluateFeature</code> API returns different values for different values of <code>entityId</code> (users in this demo).</p> \n<p>At any moment, I may change the routing configuration. Moreover, I also have access to a monitoring dashboard to observe the distribution of my variations and the metrics for each variation.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_20-28-29.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_20-28-29-1024x463.png\" /></a>I am confident that your real-life launch graph will get more data than mine did, as I just created it to write this post.</p> \n<p><span><strong>A/B Testing</strong></span><br /> Doing an A/B test is similar. I create a feature to test, and I create an <strong>Experiment</strong>. I configure the experiment to route part of the traffic to variation 1, and then the other part to variation 2. When I am ready to launch the experiment, I explicitly select <strong>Start experiment</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_20-36-01.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/2021-11-15_20-36-01-1024x482.png\" /></a></p> \n<p>In this experiment, I am interested in sending custom metrics. For example:</p> \n<pre><code>// pageLoadTime custom metric\nconst timeSpendOnHomePageData = `{\n   \"details\": {\n      \"timeSpendOnHomePage\": ${timeSpendOnHomePageValue}\n   },\n   \"userDetails\": { \"userId\": \"${randomizedID}\", \"sessionId\": \"${randomizedID}\" }\n}`;\n\nconst putProjectEventsRequest: PutProjectEventsRequest = {\n   project: 'AWSNewsBlog',\n   events: [\n    {\n        timestamp: new Date(),\n        type: 'aws.evidently.custom',\n        data: JSON.parse(timeSpendOnHomePageData)\n    },\n   ],\n};\n\nthis.evidently.putProjectEvents(putProjectEventsRequest).promise().then(res =&gt;{})\n</code></pre> \n<p>Switching to the <strong>Results</strong> page, I see raw values and graph data for <strong>Event Count</strong>, <strong>Total Value</strong>, <strong>Average</strong>, <strong>Improvement</strong> (with 95% <a href=\"https://en.wikipedia.org/wiki/Confidence_interval\">confidence interval</a>), and <strong>Statistical significance</strong>. The statistical significance describes how certain we are that the variation has an effect on the metric as compared to the baseline.</p> \n<p>These results are generated throughout the experiment and the confidence intervals and the statistical significance are guaranteed to be valid anytime you want to view them. Additionally, at the end of the experiment, Evidently also generates a Bayesian perspective of the experiment that provides information about how likely it is that a difference between the variations exists.</p> \n<p>The following two screenshots show graphs for the average value of two metrics over time, and the improvement for a metric within a 95% confidence interval.<strong><br /> </strong></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/25/Pic2Blog1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/25/Pic2Blog1-1024x394.png\" /></a><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/25/Pic1Blog1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/25/Pic1Blog1-1024x391.png\" /></a></p> \n<p><span><strong>Additional Thoughts<br /> </strong></span>Before we wrap-up, I’d like to share some additional considerations.<span><strong><br /> </strong></span></p> \n<p>First, it is important to understand that I choose to demo Evidently in the context of front-end application development. However, you may use Evidently with any application type: front-end web or mobile, back-end API, or even machine learning (ML). For example, you may use Evidently to deploy two different ML models and conduct experiments just like I showed above.</p> \n<p>Second, just like with other AWS Services, Evidently API is available in all of our AWS SDK. This lets you use <code>EvaluateFeature</code> and other APIs from nine programing languages: C++, Go, Java, JavaScript (and Typescript), .Net, NodeJS, PHP, Python, and Ruby. AWS SDK for Rust and Swift are in the making.</p> \n<p>Third, for a front-end application as I demoed here, it is important to consider how to authenticate calls to Evidently API. Hard coding access keys and secret access keys is not an option. For the front-end scenario, I suggest that you use <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/identity-pools.html\">Amazon Cognito Identity Pools</a> to exchange user identity tokens for a temporary access and secret keys. User identity tokens may be obtained from <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html\">Cognito User Pools</a>, or third-party authentications systems, such as <a href=\"https://azure.microsoft.com/en-us/services/active-directory/\">Active Directory</a>, <a href=\"https://developer.amazon.com/apps-and-games/login-with-amazon\">Login with Amazon</a>, <a href=\"https://developers.facebook.com/docs/facebook-login/\">Login with Facebook</a>, <a href=\"https://developers.google.com/identity/sign-in/web/sign-in\">Login with Google</a>, <a href=\"https://developer.apple.com/sign-in-with-apple/\">Signin with Apple</a>, or any system compliant with <a href=\"https://openid.net/connect/\">OpenID Connect</a> or <a href=\"https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language\">SAML</a>. Cognito Identity Pools also allows for anonymous access. No identity token is required. Cognito Identity Pools vends temporary tokens associated with IAM roles. You must <code>Allow</code> calls to the <code>evidently:EvaluateFeature</code> API in your policies.</p> \n<p>Finally, when using feature flags, plan for code cleanup time during your sprints. Once a feature is launched, you might consider removing calls to <code>EvaluateFeature</code> API and the <code>if-then-else</code> logic used to initially hide the feature.</p> \n<p><span><strong>Pricing and</strong></span><strong><span> Availability</span><br /> </strong>Amazon Cloudwatch Evidently is generally available in nine AWS Regions: US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), Europe (Ireland), Europe (Frankfurt), and Europe (Stockholm). As usual, we will gradually extend to other Regions in the coming months.<span><strong><br /> </strong></span></p> \n<p>Pricing is pay-as-you-go with no minimum or recurring fees. CloudWatch Evidently charges your account based on Evidently events and Evidently analysis units. Evidently analysis units are generated from Evidently events, based on rules you have created in Evidently. For example, a user checkout event may produce two Evidently analysis units: checkout value and the number of items in cart. For more information about pricing, see <a href=\"https://aws.amazon.com/cloudwatch/pricing/\">Amazon CloudWatch Pricing</a>.</p> \n<p><a href=\"https://aws.amazon.com/cloudwatch/features/\">Start experimenting with CloudWatch Evidently today</a>!</p> \n<a href=\"https://twitter.com/sebsto\">-- seb</a>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"b5d7843d8500fdbe585e92a8237f4eed169b152074002574d27053a5763825e4","category":"Tech"}