{"title":"เบื้องหลังสถาปัตยกรรมใหม่ Teams ย้ายจาก Electron/AngularJS เป็น WebView2/React","link":"https://www.blognone.com/node/133195","date":1679997613000,"content":"<div><div><div><p>ไมโครซอฟท์เขียนบล็อกอธิบายเบื้องหลังการแก้ปัญหาระดับโลก (ระดับผู้ใช้ 250 ล้านคนต่อเดือน) <a href=\"https://www.blognone.com/node/133183\">เปลี่ยนสถาปัตยกรรมเบื้องหลัง Microsoft Teams บนวินโดวส์เป็นตัวใหม่</a>ที่ดีขึ้น เร็วขึ้น กินแรมน้อยลง</p>\n<p>ไมโครซอฟท์เล่าว่าไคลเอนต์ตัวเดิมของ Teams เริ่มเขียนในปี 2015 (<a href=\"https://www.blognone.com/node/86892\">Teams เปิดตัวครั้งแรกปลายปี 2016</a>) ตั้งเป้าหมายเรื่องการทำงานข้ามแพลตฟอร์มระหว่างเว็บ-เดสก์ท็อปเป็นสำคัญ จึงเลือกใช้เทคโนโลยีที่มีในตอนนั้นคือ Electron เป็นโฮสต์, AngularJS เป็นเฟรมเวิร์คเว็บ และสร้าง custom controls ของตัวเองขึ้นมาด้วย HTML/CSS</p>\n<p>แต่เมื่อพัฒนาความสามารถของ Teams มาเรื่อยๆ ทีมงานก็พบข้อจำกัดเรื่องการใช้ทรัพยากร จึงหาเทคโนโลยีทางเลือกใหม่ โปรเจคนี้ใช้ชื่อว่า \"north star\" โดยเปลี่ยน Electron มาใช้ <a href=\"https://www.blognone.com/node/116454\">WebView2</a>, เปลี่ยนเฟรมเวิร์คมาใช้ React และแยก Data Layer ออกมาต่างหาก, ตัวคอนโทรลใช้ <a href=\"https://www.blognone.com/node/116393\">Fluent UI</a> ซึ่งเป็นอีกโครงการของไมโครซอฟท์เอง</p>\n<p><img alt=\"No Description\" src=\"https://www.blognone.com/sites/default/files/externals/04b7a49b08c2d29d1eb5f3d54de88ad4.jpg\" /></p>\n<ul>\n<li><strong>Fluent UI</strong> เป็นชุดคอนโทรลที่ไมโครซอฟท์สร้างขึ้นเป็นมาตรฐานบนแพลตฟอร์มต่างๆ (<a href=\"https://developer.microsoft.com/en-us/fluentui#/\">รายการแพลตฟอร์มทั้งหมด</a>) โดยโปรเจค Teams เลือกใช้ <a href=\"https://react.fluentui.dev/\">Fluent React v9</a> ซึ่งปรับแต่งประสิทธิภาพการทำงานบนจาวาสคริปต์มาให้เรียบร้อยแล้ว</li>\n<li><strong>React</strong> เหตุผลในการย้ายจาก AngularJS มาเป็น React เป็นเรื่องประสิทธิภาพเป็นหลัก หลังจากเขียนโค้ดส่วนนี้ใหม่ก็ถือโอกาสออกแบบสถาปัตยกรรมโค้ดให้เป็นโมดูลมากขึ้น นำคอมโพเนนต์ไปใช้ซ้ำได้ ตอบสนองเร็วขึ้น</li>\n<li><strong>Client Data Layer</strong> สถาปัตยกรรมเดิมผนวกส่วนจัดการข้อมูลไว้เธร็ดเดียวกับ UI ส่งผลให้ดึงประสิทธิภาพระหว่างกัน สถาปัตยกรรมใหม่จึงแยกส่วนจัดการข้อมูลออกมารันในอีก worker ทำหน้าที่ดึงข้อมูล เก็บข้อมูล แจ้งเตือน และทำงานออฟไลน์ในอีกเธร็ด แล้วให้เธร็ดหลักดึงข้อมูลด้วย GraphQL ช่วยให้การตอบสนองผู้ใช้ดีขึ้น</li>\n<li><strong>WebView2</strong> การเปลี่ยนจาก Electron เป็น WebView2 ช่วยลดการใช้หน่วยความจำและการเรียกใช้ดิสก์ ผลพลอยได้อีกอย่างคือฟีเจอร์ด้านเนทีฟของวินโดวส์ และการได้ใช้เอนจิน Chromium เวอร์ชันล่าสุด ช่วยเรื่องความปลอดภัยและประสิทธิภาพของตัวเอนจินด้วย</li>\n</ul>\n<p><img alt=\"No Description\" src=\"https://www.blognone.com/sites/default/files/externals/34a20c3462abddedb9f70e9a664f4022.jpg\" /></p>\n<p>นอกจากสถาปัตยกรรมหลักข้างต้นแล้ว ไมโครซอฟท์ยังถือโอกาสปรับปรุง Teams ในด้านอื่นด้วย ดังนี้</p>\n<ul>\n<li><strong>ปรับสถาปัตยกรรม video rendering pipeline</strong> ให้ประมวลผลวิดีโอคอลล์มีประสิทธิภาพมากขึ้น กินไฟน้อยลง 50% และ<a href=\"https://www.blognone.com/node/116922\">รองรับการแสดงวิดีโอแบบกริดขนาดใหญ่ 7x7</a> สถาปัตยกรรมนี้ใช้กับทั้งไคลเอนต์ตัวเก่าและใหม่</li>\n<li><strong>รองรับการประชุมขนาดใหญ่</strong> กรณีที่มีคนเข้าฟังเป็นหลักหลายพันคนพร้อมกัน ต้องสเกลระบบเบื้องหลังให้รองรับโหลดวิดีโอ-แชทจำนวนมาก ต้องปรับแต่งทุกเรื่องตั้งแต่ลดจำนวนการเรียก IPC, ลดจำนวนการเรนเดอร์ UI เป็นต้น</li>\n<li><strong>Multi-Account / Multi-Tenant</strong> ปัญหาเรื่องการจัดการบัญชีของ Teams ที่เรื้อรังมานาน ถือโอกาสเขียนใหม่ในไคลเอนต์ตัวใหม่ ปรับปรุงเรื่องล็อกอิน ซิงก์ข้อมูล ข้อความแจ้งเตือน และจับแยกสตอเรจของบัญชีไม่ให้ยุ่งกัน การสลับบัญชีผู้ใช้งานจึงราบรื่นขึ้น</li>\n<li><strong>ปรับแพ็กเกจการติดตั้งมาใช้ MSIX</strong> ซึ่งเป็น<a href=\"https://learn.microsoft.com/en-us/windows/msix/\">ระบบจัดการแพ็กเกจแบบใหม่ของวินโดวส์</a> การติดตั้งและอัพเดตสะดวกขึ้น ลดการใช้แบนด์วิดท์และเนื้อที่ในดิสก์ลง จัดการผ่าน Microsoft Intune ได้ด้วย</li>\n<li><strong>ปรับปรุงความปลอดภัย</strong> ใช้เทคนิคด้านความปลอดภัยรุ่นใหม่ๆ เช่น Trusted Types, Content Security Policy เพื่อแก้ปัญหา cross-site scripting</li>\n<li><strong>ดึงข้อมูลเฉพาะบางส่วน (Partial Data)</strong> ปรับวิธีการเรียกข้อมูลของ Teams โดยเรียกเฉพาะบางส่วนก่อน (partial data) หากเลื่อนจอค่อยดึงข้อมูลเพิ่ม แทนการดึงข้อมูลทั้งหมดในไคลเอนต์ตัวเดิม ซึ่งเปลืองแรมและดิสก์</li>\n<li><strong>เปลี่ยนจาก Polling มาเป็น Push Notification</strong> ปรับการแจ้งเตือนเหตุการณ์ต่างๆ จากการถามเป็นระยะ (Polling) มาเป็นระบบ push แบบใหม่ที่เป็นมาตรฐานยุคนี้</li>\n<li><strong>ปรับแต่งการใช้แรม</strong> ปรับระบบการแคชข้อมูลแบบต่างๆ ให้ไดนามิกมากขึ้น ปรับเปลี่ยนตามพฤติกรรมของผู้ใช้งาน และเพิ่มการคืนแรมที่ไม่ใช้เป็นระยะๆ โดยอาศัย API ของวินโดวส์และ WebView2</li>\n<li><strong>พัฒนาเครื่องมือด้านวัดประสิทธิภาพ</strong> ระบบเทสต์ต้องรันให้ผ่านประสิทธิภาพที่กำหนด เพิ่มระบบตรวจสอบและแจ้งเตือนหากไคลเอนต์ให่มที่กำลังพัฒนาอยู่มีปัญหาประสิทธิภาพ</li>\n<li><strong>ใช้ซอฟต์แวร์ที่เป็นโอเพนซอร์ส</strong> เข้ามาช่วย ตัวอย่างโครงการของไมโครซอฟท์เอง ได้แก่ <a href=\"https://microsoft.github.io/lage/\">lage</a>, <a href=\"https://github.com/microsoft/playwright\">Playwright</a></li>\n<li><strong>ปรับปรุง Accessibility</strong> ช่วยการเข้าถึงของคนพิการ เช่น ระบบสี High Contrast ของ Windows 11, รองรับตัวอ่านหน้าจอให้มีประสิทธิภาพดีขึ้น, ใช้ระบบการแจ้งเตือนเนทีฟของ Windows 11</li>\n</ul>\n<p><img alt=\"No Description\" src=\"https://www.blognone.com/sites/default/files/externals/994c878d30047cf94f015a64db05b226.jpg\" /></p>\n<p>ไมโครซอฟท์เล่าว่าตอนแรกพยายามขยับไปสถาปัตยกรรมใหม่ ด้วยการนำคอมโพเนนต์ที่สร้างด้วย React/Fluent บางส่วนไปใช้กับไคลเอนต์เก่าก่อน แต่ผลที่ได้คือแย่กว่าเดิม เพราะกลายเป็นมีเฟรมเวิร์คสองตัวในไคลเอนต์ตัวเดียว</p>\n<p>ทางออกของไมโครซอฟท์จึงหันไปทำไคลเอนต์ Teams สำหรับผู้ใช้ทั่วไป (consumer client ที่ไม่ได้ล็อกอินด้วยบัญชีองค์กร) ที่มีฟีเจอร์น้อยกว่าฝั่งองค์กร (commercial client) ด้วยสถาปัตยกรรมใหม่ทั้งหมดก่อน ช่วยลดความเสี่ยงจากความซับซ้อนลง เมื่อทำไคลเอนต์ consumer ที่มีประสิทธิภาพและเสถียรภาพเป็นที่น่าพอใจแล้ว จึงค่อยๆ นำฟีเจอร์จาก commercial client ตัวเดิมมาใส่ให้ครบ</p>\n<p>ตอนนี้ไคลเอนต์ Teams ตัวใหม่ยังรองรับเฉพาะบนวินโดวส์ x86 และ Arm แต่จะขยายไปยังแพลตฟอร์มอื่นๆ ด้วย คือ เว็บ, macOS (Intel/M1/M2) และการรันผ่าน virtual desktop infrastructure (VDI) ในระยะถัดไป ผู้ที่สนใจให้เพิ่มฟีเจอร์ไหนก็สามารถ<a href=\"https://feedbackportal.microsoft.com/feedback/forum/ad198462-1c1c-ec11-b6e7-0022481f8472\">ไปร่วมโหวตกันได้</a></p>\n<p>ที่มา - <a href=\"https://techcommunity.microsoft.com/t5/microsoft-teams-blog/microsoft-teams-advantages-of-the-new-architecture/ba-p/3775704\">Microsoft Teams Blog</a></p>\n</div></div></div><div><div>Topics: </div><div><div><a href=\"/topics/microsoft-teams\">Microsoft Teams</a></div><div><a href=\"/topics/react\">React</a></div><div><a href=\"/topics/development\">Development</a></div><div><a href=\"/topics/microsoft\">Microsoft</a></div><div><a href=\"/topics/web-application\">Web Application</a></div><div><a href=\"/topics/angular\">Angular</a></div><div><a href=\"/topics/electron\">Electron</a></div></div></div>","author":"mk","siteTitle":"Blognone","siteHash":"ededadcf18490b3937e7dd89ebe8c00dc129addbdf1ebe4aff1f458146693da0","entryHash":"5e2b40005da156749390676786b547bf2845f3ef254461bc83225cac68260304","category":"Thai"}