{"title":"Solving Media Object Float Issues With CSS Block Formatting Contexts","link":"https://smashingmagazine.com/2023/05/media-object-float-issues-css-block-formatting-contexts/","date":1684155600000,"content":"<p>Let’s imagine we’re making a small component. It can be anything, really, but let’s use a media object as an example. <a href=\"https://front-end.social/@stubbornella\">Nicole Sullivan</a> had a solid <a href=\"http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/\">definition of media objects</a> from way back in 2010, and you probably already know the pattern well: some form of media (often an image) on the left and text beside it on the right. The media could be an image or a video, for example.</p>\n<p><img src=\"https://files.smashing.media/articles/media-object-float-issues-css-block-formatting-contexts/1-grid-testimonial-cards.png\" /></p>\n<p>This is the basic HTML for the layout, minimized for brevity:</p>\n<div>\n<pre><code>&lt;section class=\"container\"&gt;\n  &lt;article class=\"float-left\"&gt;\n    &lt;img src=\"<a href=\"https://picsum.photos/100&quot;\">https://picsum.photos/100\"</a>&gt;\n      &lt;p&gt;I've never had to cook or clean since I discovered Xyz. They perform all my tasks for me. I recommend them.&lt;/p&gt;\n      &lt;h3&gt;Dan Somore&lt;/h3&gt;\n  &lt;/article&gt;\n\n  &lt;!-- more articles --&gt;\n\n&lt;/section&gt;\n</code></pre>\n</div>\n\n<p>This HTML gives us a <code>&lt;section&gt;</code> element that is the container for four <code>&lt;article&gt;</code> elements, where each one is a testimonial container that holds an <code>&lt;img&gt;</code> and a <code>&lt;div&gt;</code> with a block of text — our media objects.</p>\n<p>Let’s apply some light styling in CSS:</p>\n<pre><code>/* Give the parent container breathing room */\n.container {\n  padding: 20px;\n}\n\n/* \n  Styles for each testimonial container \n  Each container is floated left\n*/\n.float-left {\n  border: 2px solid blue;\n  background-color: transparent;\n  float: left;\n  width: 45%;\n  min-height: 150px;\n  margin-bottom: 20px;\n  margin-right: 20px;\n}\n\n/* Testimonial images are floated left */\nimg {\n  float: left;\n  margin-right: 10px;\n}\n</code></pre>\n\n<p>This code is by no means perfect. In fact, it introduces the wrapping and overflow issues we’re about to discuss. We will look at these issues together before getting into solutions.</p>\n<h3>Issue 1: Height Collapsing</h3>\n<p>When an element is floated in its container, it exits its normal document flow and into a floated position, making no contributions to the container’s height. In a container of many floated media objects, the container element’s height is collapsed to contain only non-floated elements. The collapsed height might be inconspicuous in containers without a border or non-floated elements and could disrupt the layout of other elements after a media object container. However, this issue can be easily discovered if there is a non-floated element in the container, among other floated elements.</p>\n<p>Let’s add a <code>border</code> to the parent container to see the height-collapsing effect.</p>\n<p><img src=\"https://files.smashing.media/articles/media-object-float-issues-css-block-formatting-contexts/2-two-by-two-grid-cards.png\" /></p>\n<p>The height of the content is what influences the height of the testimonial container. If the image were in the container’s flow, it would be taller than the text, and the container would adjust to it. But, alas, that’s not the case since we introduced a block formatting context when floating the image.</p>\n<p>The popular solution with a single line of CSS on the testimonial’s parent container:</p>\n<pre><code>\n.container {\n  overflow: auto;\n}\n</code></pre>\n\n<p>The BFC this generates establishes a new document flow within the page’s root element, containing all the container's child elements, including floated media objects. It effectively prevents the testimonial elements from being displaced beyond the parent container’s borders — no extra <code>div</code>s or pseudo-elements are needed like the clearfix approach.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/jOeMpJx\">Float Solutions: overflow: auto [forked]</a> by <a href=\"https://codepen.io/geoffgraham\">Geoff Graham</a>.</p>\n<p>That certainly gets the job done! But I want to show you <em>one more way</em> to do this because I believe it’s the best of the bunch.</p>\n<h3>The Best Solution: <code>display: flow-root</code></h3>\n<p><code>display: flow-root</code> was introduced to address inconsistencies associated with using <code>overflow</code> for generating BFCs. In fact, <code>display: flow-root</code> was explicitly designed to produce  BFC, while the <code>overflow</code> property is designed to manage content that surpasses its container. Consequently, <code>overflow</code> can induce unintended side effects, from unwanted scrollbars to <a href=\"https://www.smashingmagazine.com/2019/09/overflow-data-loss-css/\">data loss</a>.</p>\n<p>That’s why I recommend using <code>display: flow-root</code>. It is meant to create a BFC when you need it, whereas the other solutions are more like workarounds.</p>\nConclusion\n<p>CSS block formatting contexts are great because they allow you to leave the main document flow, allowing elements to interact differently in a layout. But, of course, those different interactions can feel like buggy behavior if you’re unaware that you’re actually working in a different formatting context.</p>\n<p>This is exactly why we have modern layout techniques like Flexbox and Grid. Before we had them, floats were a nice trick for faking columns. But the BFC they created wasn’t so nice. Hence clever workarounds like the clearfix to create a BFC to wrangle the other BFC.</p>\n<p>Perhaps the bigger takeaway from all this, though, is to <strong>evaluate your layout strategy</strong>. If you’re reaching for a float, is it really the best option for what you’re trying to do? Because if so, you may as well embrace the natural text-wrapping behavior rather than trying to fight it. And if you don’t want to fight it, that’s a sure sign you ought to reach for a more modern layout technique, like Flexbox or Grid.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://www.manning.com/books/css-in-depth\"><em>CSS in Depth</em></a>, Keith J. Grant</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context\">Block formatting context</a> (Mozilla Developer Network)</li>\n</ul>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2017/07/enhancing-css-layout-floats-flexbox-grid/\">Progressively Enhancing CSS Layout: From Floats To Flexbox To Grid</a>”, Manuel Matuzović</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/04/css-overflow-issues/\">Overflow Issues In CSS</a>”, Ahmad Shadeed</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2019/10/editorial-design-patterns-css-grid-subgrid-naming/\">Editorial Design Patterns With CSS Grid And Named Columns</a>”, Rachel Andrew</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/10/futuristic-css/\">Futuristic CSS</a>”, Sacha Greif</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"98fc7acba400240b40417b956dee1de72869511823daa2c34247a6fa7c57578c","category":"Tech"}