{"title":"สรุปการแบ่งปันเรื่อง Better test ในงาน Vue Thai Conf 2024","link":"https://www.somkiat.cc/sharing-better-testing-with-vue/","date":1727848316000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/10/vue-conf-2024-150x150.jpg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/10/vue-conf-2024-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2024/10/vue-conf-2024-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/10/vue-conf-2024.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/10/vue-conf-2024-1024x536.jpg\" width=\"644\" height=\"336\" /></a></figure>\n\n\n\n<p>มีโอกาสไปแบ่งปันความรู้เรื่องการทดสอบระบบ web ที่พัฒนาด้วย Vue และ NuxtJS<br /><strong><a href=\"https://www.facebook.com/events/406347685802389\" target=\"_blank\">ในงาน Vue ไทย Conf 2024 ครั้งที่ 1</a></strong><br />โดยพูดเรื่อง Better testing with Vue application<br />ซึ่งมีเนื้อหาหลัก ๆ ดังนี้ มาเริ่มกันเลย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เริ่มจากเรื่องการพัฒนาระบบงาน</strong></p>\n\n\n\n<p>ถ้ามีเวลาจำกัด เราจะเลือกอะไร ระหว่าง ปริมาณ กับ คุณภาพ<br />เป็นทางเลือกที่โหดร้ายมาก ๆ<br />ไม่ว่าจะเลือกทางไหน ก็มี trade off เสมอ<br />สิ่งที่ควรทำคือ การ balance ทั้งสอง<br />และสร้างความเชื่อมั่นในการพัฒนาและส่งมอบระบบงาน</p>\n\n\n\n<p><strong>โดยหนึ่งในวิธีการสร้างความเชื่อมั่น</strong></p>\n\n\n\n<p>ทั้งตัวเราเอง และ ผู้อื่นคือ <strong>การทดสอบ</strong> นั่นเอง<br />ไม่ว่าจะทดสอบอย่างไร รูปแบบไหน<br />ผลที่ได้คือ ความเชื่อมั่นต่อระบบงานที่สูงขึ้น<br />รวมทั้งปัญหาต่าง ๆ น้อยลง</p>\n\n\n\n<p>ไม่ใช่ว่าทดสอบแล้ว ครอบคลุมเยอะมาก ๆ (test coverage สูงมาก)<br />แต่กลับยังมีปัญหาต่าง ๆ มากมายอยู่<br />แบบนี้คือ การทำให้มี แต่ไม่ดีและไม่มีประโยชน์มากนัก<br />ดังนั้นเรื่องคุณภาพ และ ความเชื่อมั่นจึงสำคัญ</p>\n\n\n\n<p><strong>การทดสอบที่ดี ควรมีคุณสมบัติคร่าว ๆ ดังนี้</strong></p>\n\n\n\n<ul>\n<li>ทำงานได้รวดเร็ว</li>\n\n\n\n<li>เป็นอิสระต่อส่วนต่าง ๆ ที่ต้องการ</li>\n\n\n\n<li>ต้องสามารภทดสอบซ้ำ ๆ ได้ตลอดเวลา</li>\n\n\n\n<li>มีการตรวจสอบที่เชื่อถือได้</li>\n\n\n\n<li>ชุดการทดสอบสามารถเข้าใจได้ง่าย ไม่ต้องมานั่งตีความ</li>\n</ul>\n\n\n\n<p><strong>และสุดท้ายคือ การทดสอบจะเกิดขึ้นใน คือ</strong></p>\n\n\n\n<ul>\n<li>Test-first คิดก่อนทำ</li>\n\n\n\n<li>Test-last ทำแล้วค่อยคิดจะทดสอบ</li>\n\n\n\n<li>Test-later ทำเยอะ ๆ แล้วค่อยคิดจะทดสอบ</li>\n</ul>\n\n\n\n<p><strong>หลังจากออกทะเลไปไหล กลับมาที่ Vue กันบ้าง</strong></p>\n\n\n\n<p>เริ่มจากโครงสร้างของ Vue project ที่ควรจัดการให้ดี ๆ<br />หนึ่งในแนวทางที่แนะนำคือ การลดขนาดของ project เพื่อลดการ build<br />ระบบที่ดีควรเลือก feature/domain ที่ต้องการจะ build ได้<br />จึงแนะนำการแบ่งเป็น feature/domain<br />เมื่อจะทำการ build ก็ทำการ add เข้ามาได้ (extend หรือ module)</p>\n\n\n\n<p><strong>ต่อมาในการทดสอบ มีหลายรูปแบบทั้ง</strong></p>\n\n\n\n<ul>\n<li>Unit test</li>\n\n\n\n<li>Component test</li>\n\n\n\n<li>UI test</li>\n\n\n\n<li>Visual test</li>\n\n\n\n<li>Snapshot test</li>\n</ul>\n\n\n\n<p><strong>หนึ่งในแนวทางที่แนะนำไปคือ UI test ด้วย Playwright และ Vitest + Testing library with Vue</strong><br />ซึ่ง test ที่ดีควรมีคุณสมบัติดังนี้</p>\n\n\n\n<ul>\n<li>ไม่ผูกมัดกับ implementation หรือ UI มาเกินไป เช่นการใช้ test id เข้ามาช่วย</li>\n\n\n\n<li>ไม่ผูกมัดกับ test framework โดยเราสามารถสร้าง driver interface เพื่อให้ test framework มา implement ตาม driver interface ไว้ได้เลย จากตัวอย่าง เราสามารถเปลี่ยนไปมาระหว่าง Playwright และ Vitest ได้ โดยใช้ test case เดียวกันได้เลย อาจจะมองว่ามัน over engineer มากเกินไป แต่ก็เป็นแนวทางที่น่าสนใจอย่างหนึ่ง รู้ไว้ไม่เสียหาย !!</li>\n\n\n\n<li>ควรต้องอ่านเข้าใจได้ง่าย ไม่ technical มากจนเกินไป</li>\n</ul>\n\n\n\n<p><strong>ปิดท้ายด้วย Component test สำหรับแต่ละ component ใน Vue นั่นเอง</strong><br />ช่วยให้เรามั่นใจกับการทำงานของแต่ component<br />ก่อนที่จะนำ component ต่าง ๆ  ไปทำงานร่วมกัน</p>\n\n\n\n<p>ทั้งหมดนี้ เป็นส่วนหนึ่งของการสร้างความมั่นใจ ให้เพิ่มขึ้น<br />และเพิ่มคุณภาพของระบบงานให้มากขึ้น</p>\n\n\n\n<p>หลังจากนี้ไม่รู้เรื่องแล้ว เมาาาาาาา</p>\n\n\n\n<p>ตัวอย่างของ code ที่ใช้ อยู่ที่ <a href=\"https://github.com/up1/demo-better-vue-testing\" target=\"_blank\">GitHub:Up1</a></p>\n\n\n\n<figure><div>\nhttps://speakerdeck.com/up1/vue-better-testing-2024\n</div></figure>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"7aaa65c9562634360421968489d161fc3f77800285931a5b5b2910e79e2f9ed5","category":"Thai"}