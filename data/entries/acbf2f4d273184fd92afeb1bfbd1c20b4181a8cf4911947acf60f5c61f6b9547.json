{"title":"Replication failback and increased IOPS are new for Amazon EFS","link":"https://aws.amazon.com/blogs/aws/replication-failback-and-increased-iops-are-new-for-amazon-efs/","date":1701112263000,"content":"<p>Today, <a href=\"https://aws.amazon.com/efs\">Amazon Elastic File System (Amazon EFS)</a> has introduced two new capabilities:</p> \n<ul> \n <li><strong>Replication failback</strong> – Failback support for EFS replication makes it easier and more cost-effective to synchronize changes between EFS file systems when performing disaster recovery (DR) workflows. You can now quickly replicate incremental changes from your secondary back to your primary file system after disaster events and other DR-related activities.</li> \n <li><strong>Increased IOPS</strong> – Amazon EFS now supports up to 250,000 read IOPS and up to 50,000 write IOPS per file system, making it easier to run more IOPS-heavy workloads at any scale for virtual servers, containers, and serverless functions that require shared storage.</li> \n</ul> \n<p>Let’s see more in depth how these work in practice.</p> \n<p><span><strong>Introducing Amazon EFS replication failback<br /> </strong></span>With Amazon EFS replication, you can create a replica of your file system in the same or in another <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\">AWS Region</a>. When replication is enabled, Amazon EFS automatically keeps the primary (source) and secondary (destination) file systems synchronized. To help you meet your compliance and business continuity goals, EFS replication is designed to provide a recovery point objective (RPO) and a recovery time objective (RTO) measured in minutes.</p> \n<p>Now, with failback support, you can respond to disaster recovery (DR) events, conduct planned business continuity tests, and manage other DR-related activities with greater speed and cost efficiency. Failback support allows you to switch the direction of replication between the primary and secondary file systems. EFS replication keeps the two file systems in sync by copying only incremental changes, eliminating the need to make full copies of your data or use a self-managed, custom solution to complete a recovery workflow.</p> \n<p><span><strong>Using Amazon EFS replication failback<br /> </strong></span>I have a file system replicated to another Region. As part of a periodic DR test, I want to switch to using the secondary file system and then revert back to the primary file system, preserving all the changes made on the secondary file system. To do so, I can use EFS Replication failback in just a few steps.</p> \n<p>First, I delete the replication from the primary (source) to the secondary (destination) file system. After this, the secondary file system becomes writable. To do so, in the <a href=\"https://console.aws.amazon.com/efs\">Amazon EFS console</a>, I check I am in the correct Region and select the secondary file system. In the <strong>Replication</strong> tab, I choose <strong>Delete replication</strong> and confirm deletion. I can also start from the primary file system. In that case, the <strong>Delete replication</strong> link in the <strong>Replication</strong> tab opens a new browser tab and asks to confirm deletion like before.</p> \n<p>I can now use the secondary file system and change its data as needed.</p> \n<p>To go back to using the primary file system, I create a “reverse replication” from the secondary to the primary file system. To do so, I check I am in the correct Region and select the secondary file system. In the <strong>Replication</strong> tab, I choose <strong>Create replication</strong> and the new option <strong>Replicate to existing file system</strong>. Then, I select the Region of the primary file system and use the console to browse the EFS file systems in that Region and choose the primary one.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/20/efs-failback-create-replication-protection.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/20/efs-failback-create-replication-protection.png\" alt=\"Console screenshot.\" width=\"1674\" height=\"1592\" /></a></p> \n<p>The console warns me that <strong>Replication overwrite protection</strong> is enabled for the primary file system. I follow the <strong>Disable protection</strong> link to open a new browser tab and edit the primary file system to disable replication overwrite protection.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/20/efs-failback-disable-replication-protection.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/20/efs-failback-disable-replication-protection.png\" alt=\"Console screenshot.\" width=\"2372\" height=\"554\" /></a></p> \n<p>Now, I go back to the browser tab where I am creating the failback replication from the secondary to the primary file system. I refresh the protection check and choose to create the replication.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/20/efs-failback-create-replication.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/20/efs-failback-create-replication.png\" alt=\"Console screenshot.\" width=\"1674\" height=\"1272\" /></a></p> \n<p>In the following dialog, I confirm that I want Amazon EFS to write to the primary file system.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/20/efs-failback-create-replication-confirm.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/20/efs-failback-create-replication-confirm.png\" alt=\"Console screenshot.\" width=\"1932\" height=\"700\" /></a></p> \n<p>To know when the primary file system is back in sync, I check the <strong>Last synced</strong> timestamp in the <strong>Replication</strong> tab, which indicates that all changes made to the source file system before that time are replicated to the destination. Optionally, I can look at the <code>TimeSinceLastSync</code> metric (expressed in minutes) in <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> to understand how data is being replicated.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/20/efs-failback-replication-metrics.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/20/efs-failback-replication-metrics.png\" alt=\"Console screenshot.\" width=\"2362\" height=\"910\" /></a></p> \n<p>When the primary file system is back in sync, I delete the replication from the secondary to the primary file system. To complete the restore of the original configuration, I again create the replication from the primary to the secondary file system.</p> \n<p><span><strong>Increased IOPS per file system<br /> </strong></span>The Amazon EFS team has been able to increase IOPS again! The last time they did it <a href=\"https://aws.amazon.com/about-aws/whats-new/2023/08/amazon-efs-55000-iops-per-file-system/\">was just a few months back</a>. Starting today, an EFS file system can handle up to 50,000 write IOPS (a 2x improvement) and up to 250,000 read IOPS (a 4.5x improvement) when working with frequently-accessed data from a high-performance cache managed by Amazon EFS.</p> \n<p>You can monitor the percentage utilization of your file system’s available IOPS using the <code>PercentIOLimit</code> CloudWatch metric. This metric considers the maximum IOPS for writes and uncached reads, including combinations of the two. Reads from the cache are not included in the <code>PercentIOLimit</code> metric.</p> \n<p>With these performance improvements, you can run even more IOPS-demanding workloads on Amazon EFS, such as machine learning (ML) training, fine-tuning, and inference. Other use cases that can benefit from the increased IOPS are data science user shares, SaaS applications, and media processing.</p> \n<p><span><strong>Things to know<br /> </strong></span>EFS replication failback is available in all <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\">AWS Regions</a> where EFS is available. There are no additional costs for using replication failback. You pay for the usual replication and file system changes as described in <a href=\"https://aws.amazon.com/efs/pricing/\">Amazon EFS pricing</a>.</p> \n<p>The increased IOPS limits are immediately available for all file systems using the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/performance.html#throughput-modes\">Elastic Throughput mode</a> in all Regions where EFS is available. You don’t need to do anything to benefit from these performance improvements. To achieve the maximum IOPS, your application needs sufficient parallelization. For example, using multiple clients and distributing the load across a large number of files. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/performance.html#performance-tips\">performance tips in the user guide</a>.</p> \n<p><span><strong>Learn more<br /> </strong></span><strong><a href=\"https://aws.amazon.com/efs/\">Amazon EFS product page</a> </strong></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"acbf2f4d273184fd92afeb1bfbd1c20b4181a8cf4911947acf60f5c61f6b9547","category":"Tech"}