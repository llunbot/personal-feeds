{"title":"OpenTelemetry :: เรื่อง auto instrumentation สำหรับภาษา Go","link":"https://www.somkiat.cc/opentelemetry-go-auto-instrumentation/","date":1746513781000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2025/05/opentelemetry-go-instrumentation-150x150.png\" alt=\"\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2025/05/opentelemetry-go-instrumentation-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2025/05/opentelemetry-go-instrumentation-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/05/opentelemetry-go-instrumentation.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/05/opentelemetry-go-instrumentation-1024x512.png\" alt=\"\" width=\"625\" height=\"313\" /></a></figure>\n\n\n\n<p>เมื่อต้นปีที่ผ่านมานั้น ทาง OpenTelemetry ได้ปล่อย <strong><a href=\"https://opentelemetry.io/blog/2025/go-auto-instrumentation-beta/\" target=\"_blank\">Go Auto-Instrumentation using eBPF</a></strong> ออกมา<br />ซึ่งเป็น beta version ให้ลองใช้งานกันดู<br />ช่วยให้นักพัฒนาไม่ต้องเป็นเขียน code เพิ่มเติม<br />สำหรับจัดการพวก log, trace และ metric เอง<br />ซึ่งช่วยอำนวยความสะดวกขึ้นเยอะมาก ๆ<br />โดย library สำหรับภาษา Java, Java และ Python ก็ทำได้แล้ว<br />ดังนั้นมาดูกันว่าเป็นอย่างไร และใช้งานอย่างไรบ้าง ?</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เป้าหมายของ <a href=\"https://github.com/open-telemetry/opentelemetry-go-instrumentation/blob/main/docs/how-it-works.md\" target=\"_blank\">Go Auto instrumentation</a> ประกอบไปด้วย</strong></p>\n\n\n\n<ul>\n<li>ใช้งานโดยไม่ต้องแก้ไข หรือ เพิ่ม code ให้น้อยที่สุด</li>\n\n\n\n<li>สนับสนุน Go 1.12 ขึ้นไป</li>\n\n\n\n<li>สามารถ config ผ่าน environment variable ของ OTEL* ได้เลย</li>\n</ul>\n\n\n\n<p>โดยการทำงานภายในนั้น จะใช้งาน <a href=\"https://ebpf.io/\" target=\"_blank\">eBPF</a></p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/05/ebpf-go.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/05/ebpf-go.jpg\" alt=\"\" width=\"534\" height=\"162\" /></a></figure>\n\n\n\n<p>มาลองใช้งานกันดู เป็นการดู <strong>distributed tracing</strong> กันหน่อย</p>\n\n\n\n<p><strong>ในการทดลองนั้นใช้ environment ดังนี้</strong></p>\n\n\n\n<ul>\n<li>Linux</li>\n\n\n\n<li>Docker</li>\n</ul>\n\n\n\n<p>การทดสอบทำแบบง่าย ๆ  ดังนี้</p>\n\n\n\n<p><strong>ขั้นตอนที่ 1 สร้าง REST API ง่าย ๆ  ด้วย Go + Echo ปกติ</strong></p>\n\n\n\n<p>โดยทำการ build และ run ด้วย Docker</p>\n\n\n\n[gist id=\"2dfcaa77be36bddd79d5e197f484b154\" file=\"1.yml\"]\n\n\n\n<p><strong>ขั้นตอนที่ 2 ทำการสร้าง Go-Auto Instrumentation ขึ้นมา</strong></p>\n\n\n\n<p>โดยทำการระบบสิ่งต่าง ๆ  ผ่าน environment variable ดังนี้</p>\n\n\n\n[gist id=\"2dfcaa77be36bddd79d5e197f484b154\" file=\"2.yml\"]\n\n\n\n<p><strong>ขั้นตอนที่ 3 ทำการสร้าง LGTM stack ขึ้นมา เพื่อจัดเก็บและแสดงข้อมูล</strong></p>\n\n\n\n[gist id=\"2dfcaa77be36bddd79d5e197f484b154\" file=\"3.yml\"]\n\n\n\n<p>ผลการทำงานใน Tempo เป็นดังนี้</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/05/lgtm-demo-tracing.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/05/lgtm-demo-tracing.jpg\" alt=\"\" width=\"683\" height=\"361\" /></a></figure>\n\n\n\n<p>ลองเล่นกันดูครับ น่าสนใจมาก ๆ<br />เพิ่มเติมใน <a href=\"https://github.com/open-telemetry/opentelemetry-go-instrumentation\">GitHub :: opentelemetry-go-instrumentation</a></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"9d2f901ec7c9a1b49a8f63c385f16e88d2bb4a6eff25cb8c3c9954604be5dca3","category":"Thai"}