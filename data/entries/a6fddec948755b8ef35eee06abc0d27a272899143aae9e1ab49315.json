{"title":"Pushing Interop Forward in 2023","link":"https://webkit.org/blog/13706/interop-2023/","date":1675270839000,"content":"<p>A year ago, Apple, Bocoup, Google, Igalia, Microsoft, and Mozilla came together to improve the interoperability of the web and to continue our commitments to web standards — actions that ensure the web will work in any browser, on any operating system, with any computer.</p>\n<p>Throughout last year, Interop 2022 focused on fifteen key areas of most importance to web developers, selecting automated tests to evaluate how closely each browser engine matches the web standards for those areas. Browsers made remarkable progress between January and December 2022, improving the number of tests that pass in all three browsers from 49% to 83%.</p>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Interop-2022-graph-stable-1024x536.png\" alt=\"screenshot of the 2022 graph, also available at http://wpt.fyi/interop-2022\" width=\"1024\" height=\"536\" srcset=\"https://webkit.org/wp-content/uploads/Interop-2022-graph-stable-1024x536.png 1024w, https://webkit.org/wp-content/uploads/Interop-2022-graph-stable-300x157.png 300w, https://webkit.org/wp-content/uploads/Interop-2022-graph-stable-768x402.png 768w, https://webkit.org/wp-content/uploads/Interop-2022-graph-stable-1536x804.png 1536w, https://webkit.org/wp-content/uploads/Interop-2022-graph-stable-2048x1071.png 2048w\" /><figcaption>Interop 2022 was a great success. The <a href=\"https://wpt.fyi/interop-2022?stable\">“Interop” line</a>, in dark green, shows the percentage of tests that passed in all three browsers</figcaption></figure>\n<p>The WebKit team channeled efforts across all focus areas, and is proud to have reached a 98.2% pass-rate by the end of 2022.</p>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Interop-2022-stable-scores-1024x444.png\" alt=\"The final scores for Interop 2022, ending in December. Chrome 88. Firefox 92. Safari 98. \" width=\"1024\" height=\"444\" srcset=\"https://webkit.org/wp-content/uploads/Interop-2022-stable-scores-1024x444.png 1024w, https://webkit.org/wp-content/uploads/Interop-2022-stable-scores-300x130.png 300w, https://webkit.org/wp-content/uploads/Interop-2022-stable-scores-768x333.png 768w, https://webkit.org/wp-content/uploads/Interop-2022-stable-scores.png 1324w\" /><figcaption>The <a href=\"https://wpt.fyi/interop-2022?stable\">final browser scores</a> for Interop 2022.</figcaption></figure>\n<h2>Announcing this year’s Interop 2023</h2>\n<p>Now we are pleased to announce this year’s Interop 2023 project! Once again, we are joining with <a href=\"https://bocoup.com/blog/interop-2023\">Bocoup</a>, <a href=\"https://web.dev/interop-2023/\">Google</a>, <a href=\"https://www.igalia.com/news/2023/interop2023.html\">Igalia</a>, <a href=\"https://blogs.windows.com/msedgedev/2023/02/01/microsoft-edge-and-interop-2023/\">Microsoft</a>, and <a href=\"https://hacks.mozilla.org/2023/02/announcing-interop-2023/\">Mozilla</a> to move the interoperability of the web forward.</p>\n<p>The scores have reset. We retired half of the tests used for scoring Interop 2022 last year, and added many new tests — all of which are focused on the technology web developers most expressed they want improved next.</p>\n<figure>\n<a href=\"https://wpt.fyi/interop-2023\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Interop-2023-Dashboard-scaled.webp\" alt=\"Screenshot of the new Interop 2023 dashboard\" width=\"2441\" height=\"2560\" srcset=\"https://webkit.org/wp-content/uploads/Interop-2023-Dashboard-scaled.webp 2441w, https://webkit.org/wp-content/uploads/Interop-2023-Dashboard-286x300.webp 286w, https://webkit.org/wp-content/uploads/Interop-2023-Dashboard-976x1024.webp 976w, https://webkit.org/wp-content/uploads/Interop-2023-Dashboard-768x805.webp 768w, https://webkit.org/wp-content/uploads/Interop-2023-Dashboard-1465x1536.webp 1465w, https://webkit.org/wp-content/uploads/Interop-2023-Dashboard-1953x2048.webp 1953w\" /></a><figcaption>The new <a href=\"https://wpt.fyi/interop-2023\">Interop 2023 dashboard</a> provides more insight than ever. Click the name of each technology to see the tests used to evaluate conformance to web standards.</figcaption></figure>\n<p>Each “Focus Area” collects together a set of automated tests for a particular technology, used to evaluate browser implementations. The “Investigations” are team projects run by the people behind Interop 2023 to investigate a particularly-complex issue as a group, and find ways to make progress.</p>\n<p>Last fall, the collaborative team planning Interop 2023 received 87 proposals for what to include. Of those, 35 were accepted and combined into 18 new Focus Areas, plus 2 new Investigations. They join 5 Focus Areas carried over from 2022 and 3 Focus Areas carried over from 2021, for a total of 26 “Active Focus Areas” for 2023.</p>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Active-Focus-Areas.png\" alt=\"Active focus areas table\" width=\"1456\" height=\"1860\" srcset=\"https://webkit.org/wp-content/uploads/Active-Focus-Areas.png 1456w, https://webkit.org/wp-content/uploads/Active-Focus-Areas-235x300.png 235w, https://webkit.org/wp-content/uploads/Active-Focus-Areas-802x1024.png 802w, https://webkit.org/wp-content/uploads/Active-Focus-Areas-768x981.png 768w, https://webkit.org/wp-content/uploads/Active-Focus-Areas-1202x1536.png 1202w\" /><figcaption>The new <a href=\"https://wpt.fyi/interop-2023\">“Interop” column</a> reflects the percentage of tests that pass in all three browser engines, which is the goal, to increase interoperability.</figcaption></figure>\n<p>We achieved pretty great interoperability in 7 Focus Areas from 2022, and so we’re moving these to “Previous Focus Areas”, a new section on the Interop dashboard, where they no longer count towards the overall top-level score.</p>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Previous-Focus-Areas.png\" alt=\"Previous Focus Areas table\" width=\"1464\" height=\"652\" srcset=\"https://webkit.org/wp-content/uploads/Previous-Focus-Areas.png 1464w, https://webkit.org/wp-content/uploads/Previous-Focus-Areas-300x134.png 300w, https://webkit.org/wp-content/uploads/Previous-Focus-Areas-1024x456.png 1024w, https://webkit.org/wp-content/uploads/Previous-Focus-Areas-768x342.png 768w\" /><figcaption>A new <a href=\"https://wpt.fyi/interop-2023\">“Previous Focus Areas”</a> section lists areas of focus from past years, where we can keep an eye on them. </figcaption></figure>\n<h2>The 2023 Focus Areas</h2>\n<p>Let’s take a look at all the web technology included in each of the 26 Focus Areas for 2023. They now include features in JavaScript and Web APIs, as well as CSS.</p>\n<ul>\n<li><a href=\"#A\">Border Image</a></li>\n<li><a href=\"#B\">Color Spaces &amp; Functions</a></li>\n<li><a href=\"#C\">Container Queries</a></li>\n<li><a href=\"#D\">Containment</a></li>\n<li><a href=\"#E\">CSS Pseudo-classes</a></li>\n<li><a href=\"#F\">Custom Properties</a></li>\n<li><a href=\"#G\">Flexbox</a></li>\n<li><a href=\"#H\">Font Feature Detection &amp; Palettes</a></li>\n<li><a href=\"#I\">Forms</a></li>\n<li><a href=\"#J\">Grid</a></li>\n<li><a href=\"#K\">:has()</a></li>\n<li><a href=\"#L\">Inert</a></li>\n<li><a href=\"#M\">Masking</a></li>\n<li><a href=\"#N\">Math functions</a></li>\n<li><a href=\"#O\">Media Queries 4</a></li>\n<li><a href=\"#P\">Modules</a></li>\n<li><a href=\"#Q\">Motion Path</a></li>\n<li><a href=\"#R\">Offscreen Canvas</a></li>\n<li><a href=\"#S\">Pointer &amp; Mouse Events</a></li>\n<li><a href=\"#T\">Scrolling</a></li>\n<li><a href=\"#U\">Subgrid</a></li>\n<li><a href=\"#V\">Transforms</a></li>\n<li><a href=\"#W\">URL</a></li>\n<li><a href=\"#X\">Web Codecs (video)</a></li>\n<li><a href=\"#Y\">Web Compat 2023</a></li>\n<li><a href=\"#Z\">Web Components</a></li>\n</ul>\n<h3><a name=\"A\"></a>Border Image</h3>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/border-image-1.png\" alt=\"Gray square with a gradient border from purple at the top to yellow at the bottom\" width=\"400\" height=\"400\" srcset=\"https://webkit.org/wp-content/uploads/border-image-1.png 400w, https://webkit.org/wp-content/uploads/border-image-1-300x300.png 300w, https://webkit.org/wp-content/uploads/border-image-1-150x150.png 150w\" /><br />\n</figure>\n<p>The ability to use an image to provide the visual styling for a box’s border has been supported in browsers for many years. It opens up a world of possibilities for how a border can look. But behavioral differences between browsers have discouraged web developers from using <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/border-image\"><code>border-image</code></a>. Things have greatly improved <a href=\"https://caniuse.com/border-image\">over time</a>, but there are still inconsistencies. By including Border Image in Interop 2023, the hope is that a renewed attention to detail will make all the difference.</p>\n<h3><a name=\"B\"></a>Color Spaces and Functions</h3>\n<p>Expression of color is vital for designers. Having complete tools to cover the gamut of color spaces helps creative designers make the web a more beautiful place to visit. Color Spaces and Functions is a Focus Area carried over from Interop 2022. To ensure the work is completed, this year’s area still includes the tests for three expanded <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">color spaces</a> (<code>lab</code>, <code>lch</code>, <code>P3</code>), and writing color in CSS through functional notation with <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix()\"><code>color-mix()</code></a>.</p>\n<p>For 2023, this area now includes styling gradients so that interpolation — the method of determining intermediate color values — can happen across different color spaces. This illustration shows the differences between the default sRGB interpolation compared to interpolation in <code>lab</code> and <code>lch</code> color spaces:</p>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/color-space-gradient-scaled.webp\" alt=\"Three stripes of red to purple gradients showing interpolation differences for sRGB, LAB, and LCH color spaces \" width=\"2560\" height=\"526\" srcset=\"https://webkit.org/wp-content/uploads/color-space-gradient-scaled.webp 2560w, https://webkit.org/wp-content/uploads/color-space-gradient-300x62.webp 300w, https://webkit.org/wp-content/uploads/color-space-gradient-1024x211.webp 1024w, https://webkit.org/wp-content/uploads/color-space-gradient-768x158.webp 768w, https://webkit.org/wp-content/uploads/color-space-gradient-1536x316.webp 1536w, https://webkit.org/wp-content/uploads/color-space-gradient-2048x421.webp 2048w\" /><br />\n</figure>\n<p>Learn more about color spaces and functions in <em><a href=\"https://webkit.org/blog/6682/improving-color-on-the-web/\">Improving Color on the Web</a></em>, <a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\"><em>Wide Gamut Color in CSS with Display-P3</em></a>, and <em><a href=\"https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/\">Wide Gamut 2D Graphics using HTML Canvas</a></em>.</p>\n<h3><a name=\"C\"></a>Container Queries</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries\">Container Queries</a> started arriving in 2022, allowing developers to apply styles to a particular item based on qualities of the container they live inside. Size queries let developers create components that adapt depending on the size of their container, and Container Query Units provide a measurement of the container, in <code>cq*</code> units.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/CQ.png\" alt=\"Screenshot of Container Queries CSS example code with a browser window showing a demo store of apparel product card components with a large hero layout, three-column tile layout, and sidebar layout\" width=\"1920\" height=\"1080\" srcset=\"https://webkit.org/wp-content/uploads/CQ.png 1920w, https://webkit.org/wp-content/uploads/CQ-300x169.png 300w, https://webkit.org/wp-content/uploads/CQ-1024x576.png 1024w, https://webkit.org/wp-content/uploads/CQ-768x432.png 768w, https://webkit.org/wp-content/uploads/CQ-1536x864.png 1536w\" /></figure>\n<p>A single card component can appear in different places in the layout at different sizes — a large hero graphic, a medium size displayed in rows, and a small version for the sidebar.</p>\n<p>By including Size Queries and Container Query Units in Interop 2023, we can ensure the web has interoperable implementations across browsers.</p>\n<h3><a name=\"D\"></a>Containment</h3>\n<p>Containment in CSS improves performance by limiting calculations of layout, style, paint, size (or any combination) to an isolated segment of the DOM instead of the entire page. The Focus Area includes the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\"><code>contain</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-size\"><code>contain-intrinsic-size</code></a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility\"><code>content-visibility</code></a> CSS properties. They are used to help the browser make optimization decisions. For example, <code>content-visibility: auto</code> is a convenient way to defer element rendering until the content becomes relevant to the user by scrolling to it, find-in-page, tab order navigation, etc.</p>\n<h3><a name=\"E\"></a>CSS Pseudo-classes</h3>\n<p>This Focus Area covers a collection of CSS pseudo-classes: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:dir\"><code>:dir()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child\"><code>:nth-child()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-last-child\"><code>:nth-last-child()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-of-type\"><code>:nth-of-type()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-last-of-type\"><code>:nth-last-of-type()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:modal\"><code>:modal</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/web/css/:user-valid\"><code>:user-valid</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:user-invalid\"><code>:user-invalid</code></a>.</p>\n<p>The <code>:nth-child(n of &lt;selector&gt;)</code>  and <code>:nth-last-child(n of &lt;selector&gt;)</code> pseudo-classes are particularly interesting. For example, <code>:nth-child(2 of .foo)</code>, matches the 2nd element that has the class <code>.foo</code> among all the children. Here’s <a href=\"https://codepen.io/jensimmons/pen/mdjGmem/850199eb0f72fc70492fcfecea6867c9?editors=1100\">an example you can try in Safari</a>, where this feature has been <a href=\"https://caniuse.com/mdn-css_selectors_nth-last-child_of_syntax\">supported</a> since 2015.</p>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/nth-child-of-selector-demo.png\" alt width=\"1607\" height=\"1290\" srcset=\"https://webkit.org/wp-content/uploads/nth-child-of-selector-demo.png 1607w, https://webkit.org/wp-content/uploads/nth-child-of-selector-demo-300x241.png 300w, https://webkit.org/wp-content/uploads/nth-child-of-selector-demo-1024x822.png 1024w, https://webkit.org/wp-content/uploads/nth-child-of-selector-demo-768x617.png 768w, https://webkit.org/wp-content/uploads/nth-child-of-selector-demo-1536x1233.png 1536w\" /><br />\n</figure>\n<p>If you want to count from the bottom, use <code>:nth-last-child(n of &lt;selector&gt;)</code>.</p>\n<p>It’s a particularly exciting time to add new and improve existing CSS pseudo-classes, because they can be used inside <code>:has()</code> — exponentially increasing their usefulness.</p>\n<h3><a name=\"F\"></a>Custom Properties</h3>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@property\"><code>@property</code></a> at-rule extends the capabilities of CSS variables much further by allowing developers to specify the syntax of the variable, the inheritance behavior, and the variable initial value. It allows developers to do things in CSS that were impossible before, like animating gradients or specific parts of transforms.</p>\n<pre><code><span>@property</span> <span>--size</span> {\n  <span>syntax</span>: <span>\"&lt;length&gt;\"</span>;\n  <span>inherits</span>: <span>false</span>;\n  <span>initial-value</span>: <span>0px</span>;\n}\n</code></pre>\n<p>With <code>@property</code> support, developers can declare custom properties in a fashion that’s similar to how browser engines define CSS properties.</p>\n<h3><a name=\"G\"></a>Flexbox</h3>\n<p>This flexible one-dimensional layout solution for arranging items in rows or columns has been around for over fifteen years. Over that time, the <a href=\"https://developer.mozilla.org/docs/Learn/CSS/CSS_layout/Flexbox\">Flexbox</a> specification has matured with both slight behavior changes and updated clarifications of precise details. This year’s Flexbox Focus Area expands on previous years, adding the latest WPT tests. Staying ahead of new unevenness in implementations maintains developer confidence in this widely-used layout technology.</p>\n<h3><a name=\"H\"></a>Font Feature Detection and Palettes</h3>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/palettes.png\" alt width=\"2000\" height=\"2000\" srcset=\"https://webkit.org/wp-content/uploads/palettes.png 2000w, https://webkit.org/wp-content/uploads/palettes-300x300.png 300w, https://webkit.org/wp-content/uploads/palettes-1024x1024.png 1024w, https://webkit.org/wp-content/uploads/palettes-150x150.png 150w, https://webkit.org/wp-content/uploads/palettes-768x768.png 768w, https://webkit.org/wp-content/uploads/palettes-1536x1536.png 1536w\" /><br />\n</figure>\n<p>Font feature detection extends <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@supports\">Feature Queries</a> by adding two functions for testing which font formats and technologies are supported by a browser.  Developers can write statements like  <code>@supports font-format(woff) { ... }</code> or <code>@supports font-tech(color-COLRv0) { ... }</code> to conditionally apply CSS only when WOFF fonts or COLRv0 are supported.</p>\n<p>Color fonts provide a way to add richness to designs without sacrificing the benefits of using regular text. Regardless of how decorative a color font is, the underlying text is always searchable, copy/paste-able, scalable, translatable, and compatible with screen readers.</p>\n<p>Font palettes provide a mechanism for web developers to alter the color palette used by a color font. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-palette\"><code>font-palette</code></a>  property provides a way for web developers to select one of several different predefined color palettes contained inside a color font — for example, to declare that a font’s dark color palette be used for the site’s dark mode design. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-palette-values\">@font-palette-values</a> rule provides a way for web developers to define their own custom color palette for recoloring color fonts. Learn more by reading <em><a href=\"https://webkit.org/blog/12662/customizing-color-fonts-on-the-web/\">Customizing Color Fonts on the Web</a>.</em></p>\n<h3><a name=\"I\"></a>Forms</h3>\n<p>Setting written text vertically can be commonplace in languages like Japanese and Chinese. Support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/Flow_Layout_and_Writing_Modes\">vertical text</a> has been available in browsers for several years, but support for vertical text in form fields has been missing. Interop 2023 is a commitment by the industry to change that with vertical writing mode support in <code>input</code>, <code>textarea</code>, and <code>select</code> menus.</p>\n<p>The 2023 Forms Focus Area also carries over the tests from Interop 2022. This includes tests for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/appearance\"><code>appearance</code></a>  property, <code>form</code>, events on <a href=\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#enabling-and-disabling-form-controls%3A-the-disabled-attribute\">disabled form controls</a>, input elements, form submission, and form validation.</p>\n<h3><a name=\"J\"></a>Grid</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\">CSS Grid</a> is another layout tool even more powerful than Flexbox. The ability to divide the page into regions and define the relationship of content to areas of the grid offers unparalleled control within a structured layout. Similar to Flexbox, the Grid Focus Area expands on work from Interop 2021 to ensure reliable layout and adoption of this powerful technology.</p>\n<h3><a name=\"K\"></a>:has()</h3>\n<p>The <a href=\"https://webkit.org/blog/13096/css-has-pseudo-class/\"><code>:has()</code> pseudo-class</a> wasn’t considered for inclusion in Interop 2022, because it still wasn’t clear that it’s possible to implement a “parent-selector” in a performant way in browsers. Then in March 2022, <a href=\"https://webkit.org/blog/12445/new-webkit-features-in-safari-15-4/\">Safari 15.4</a> proved it could be done.</p>\n<p>This simple tool gives developers the long-awaited ability to apply styles to an ancestor based on the state of its descendant or sibling elements. It’s a powerful way to reduce the need for JavaScript, and something that will be most useful once it’s implemented interoperably in all browsers. That makes it important to include in Interop 2023. Learn about how powerful <code>:has()</code> can be by reading <a href=\"https://webkit.org/blog/13096/css-has-pseudo-class/\"><em>Using :has() as a CSS Parent Selector and much more</em></a>.</p>\n<h3><a name=\"L\"></a>Inert</h3>\n<p>Inert subtrees were first used by the modal <code>dialog</code> element to prevent user interaction with content that appears behind opened dialogs. The Inert Focus Area covers the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert\">inert attribute</a>, which expands this capability to all HTML elements. When an element is marked as <code>inert</code>, it’s no longer editable, focusable or clickable; and it’s hidden from assistive technologies. Read <em><a href=\"https://webkit.org/blog/12578/non-interactive-elements-with-the-inert-attribute/\">Non-interactive elements with the inert attribute</a></em> to learn more.</p>\n<h3><a name=\"M\"></a>Masking</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Masking\">CSS Masking</a> provides several mechanisms to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mask\">mask</a> out part of an image or <a href=\"https://caniuse.com/css-clip-path\">clip</a> off part of a box. They have both been supported in browsers for a <a href=\"https://caniuse.com/css-masks\">long</a> <a href=\"https://caniuse.com/css-clip-path\">time</a>, but like many things implemented long ago there are painful differences between browsers. This is exactly the kind of developer pain point that Interop 2023 addresses. The Masking Focus Area includes improving CSS clipping and masking behaviors, including their use in animations and with SVG content.</p>\n<h3><a name=\"N\"></a>Math Functions</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions#math_functions\">CSS Math Functions</a> help developers create complex calculations to style complex layouts or control animations without the need for JavaScript. Interop 2023 includes:</p>\n<ul>\n<li>Exponential functions: <code>pow()</code>, <code>sqrt()</code>, <code>hypot()</code>, <code>log()</code>, <code>exp()</code></li>\n<li>Sign-related functions: <code>abs()</code>, <code>sign()</code></li>\n<li>Stepped value functions: <code>round()</code>, <code>mod()</code>, <code>rem()</code></li>\n<li>Trigonometric functions: <code>sin()</code>, <code>cos()</code>, <code>tan()</code>, <code>asin()</code>, <code>acos()</code>, <code>atan()</code>, <code>atan2()</code></li>\n</ul>\n<p><a href=\"https://caniuse.com/mdn-css_types_sin\">Support</a> for all of these CSS math functions first appeared on the web in <a href=\"https://webkit.org/blog/12445/new-webkit-features-in-safari-15-4/\">Safari 15.4</a>.</p>\n<h3><a name=\"O\"></a>Media Queries 4</h3>\n<p>As most front-end web developers know, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\">CSS Media Queries</a> provide the mechanism for applying CSS depending on the size of the viewport or other qualities of the device. The most recent level of the specification, <a href=\"https://drafts.csswg.org/mediaqueries-4/\">Media Queries level 4</a>, adds new syntax for combining and modifying queries, plus a simplified range syntax that makes it easier for developers to write complicated queries. This new syntax matches the options available in Container Queries.</p>\n<p>The <code>and</code>, <code>not</code>, and <code>or</code> conditionals make complex queries more readable. The new range syntax offers a more straightforward pattern for declaring a viewport range. For example, <code>@media (500px &lt;= width &lt; 900px) { ... }</code> applies when the viewport width is equal to 500px or between 500px and 900px, but not equal to 900px.</p>\n<h3><a name=\"P\"></a>Modules</h3>\n<p>The Modules Focus Area includes support for Modules in Web Workers, Import Maps and Import Assertions.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">JavaScript Modules</a> allow web developers to import and export variables, functions, and more. Import Maps give web developers the ability to control the behavior of JavaScript imports. And Import Assertions add syntax for module import statements to indicate the expected module type to help protect sites from unintentionally running malicious JavaScript.</p>\n<h3><a name=\"Q\"></a>Motion Path</h3>\n<p>CSS Motion Path (also known as Offset Path) is used to describe a path for an element to follow. It’s powerful when combined with CSS transformations, and especially helpful with CSS animations — making it possible to code complex movements in CSS and avoid JavaScript performance costs. This Focus Area covers <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/offset\"><code>offset</code></a>,  <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/offset-anchor\"><code>offset-anchor</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/offset-distance\"><code>offset-distance</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/offset-path\"><code>offset-path</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/offset-position\"><code>offset-position</code></a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/offset-rotate\"><code>offset-rotate</code></a>.</p>\n<h3><a name=\"R\"></a>Offscreen Canvas</h3>\n<p>When using Canvas, rendering, animation, and user interaction usually happen on the main execution thread of a web application. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas\">Offscreen Canvas</a> provides a canvas that can be rendered off screen, decoupling the DOM and the Canvas API so that the <code>&lt;canvas&gt;</code> element is no longer entirely dependent on the DOM. Rendering can also be run inside a worker context, allowing developers to run tasks in a separate thread and avoid heavy work on the main thread.</p>\n<p>The combination of DOM-independent operations and rendering off the main thread can provide a significantly better experience for users, especially on low-power devices.</p>\n<p>This Focus Area also includes <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\"><code>requestAnimationFrame()</code></a> in web workers which can be used alongside OffscreenCanvas to perform other rendering and animation related tasks off the main thread.</p>\n<h3><a name=\"S\"></a>Pointer &amp; Mouse Events</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\">Pointer events</a> are DOM events that are fired for a pointing device. They are designed to create a single DOM event model to handle pointing input devices such as a mouse, pen/stylus or touch (one or more fingers).</p>\n<p>Last year, the Interop 2022 team took on an Investigation into the state of pointer and mouse events. Older incomplete web standards had led to many differences between browsers, operating systems, and devices. The 2022 Investigation project took on a mission to assess what can be done to increase interoperability, and chose a set of specific tests to reflect what browsers can improve.</p>\n<p>The 2023 Focus Area now includes <a href=\"https://wpt.fyi/results/?label=experimental&amp;label=master&amp;product=chrome&amp;product=firefox&amp;product=safari&amp;aligned&amp;view=interop&amp;q=label%3Ainterop-2023-events\">16 tests</a> that cover pointer and mouse interaction with pages, including how they behave with hit testing and scrolling areas. Touch and stylus are not included since additional WPT test infrastructure is needed before the appropriate devices can be tested.</p>\n<h3><a name=\"T\"></a>Scrolling</h3>\n<p>The Scrolling Focus Area is a carryover from Interop 2022. There’s more work to do to increase interoperability, so everyone agreed to include it again. The effort includes Scroll Snap, <code>scroll-behavior</code>, and <code>overscroll-behavior</code>.</p>\n<p><a href=\"https://drafts.csswg.org/css-scroll-snap-1/\">Scroll Snap</a> provides the tools for designers and developers to control how interfaces scroll and how content appears. The <a href=\"https://www.w3.org/TR/css-overflow-3/#smooth-scrolling\"><code>scroll-behavior</code></a> property sets the behavior for a scrolling box when scrolling is triggered by navigation or CSSOM scrolling APIs. And the <a href=\"https://drafts.csswg.org/css-overscroll/\"><code>overscroll-behavior</code></a> property determines what a browser does when reaching the boundary of a scrolling area.</p>\n<h3><a name=\"U\"></a>Subgrid</h3>\n<p>Subgrid is another Focus Area from Interop 2022 which the team agreed to carry over. Getting an interoperable implementation of <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid\">Subgrid</a> across <a href=\"https://caniuse.com/css-subgrid\">all browsers</a> will take layout on the web to the next level, fully realizing the vision of <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\">CSS Grid</a>.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/subgrid-light.png\" alt=\"a screenshot of the Grid Inspector in Web Inspector showing the subgrid\" width=\"3214\" height=\"1902\" /></figure>\n<p>Subgrid provides an easy way to put grandchildren of a grid container on that grid. It makes it possible to line up items across complex layouts, without any regard for the DOM structure.</p>\n<h3><a name=\"V\"></a>Transforms</h3>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/CSS-Transforms.png\" alt=\"a 3D cylinder of numbered squares\" width=\"500\" height=\"522\" srcset=\"https://webkit.org/wp-content/uploads/CSS-Transforms.png 500w, https://webkit.org/wp-content/uploads/CSS-Transforms-287x300.png 287w\" /><br />\n</figure>\n<p>CSS Transforms is a Focus Area continued from Interop 2021. Often used in animations, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transforms\">CSS Transforms</a> provide a mechanism for transforming boxes in two- or three-dimensional space. Historically, 3D transforms have been tied to how the rendering engine handles layers. Over the last two years, engineers at Firefox, Chrome and Safari have been closely collaborating to especially improve the interoperability of 3D. By continuing to keep attention on this area, Interop 2023 aims to raise the number of <a href=\"https://wpt.fyi/results/css/css-transforms?label=master&amp;label=experimental&amp;product=chrome&amp;product=firefox&amp;product=safari&amp;aligned&amp;view=interop&amp;q=label%3Ainterop-2021-transforms\">tests</a> that pass in all three browser engines up from its current 92.8%.</p>\n<h3><a name=\"W\"></a>URL</h3>\n<p>URLs are a fundamental part of the web. Without them, the web would not exist. But like many things invented very early in the history of the web, they are something that haven’t been fully interoperable. To improve this, the WHATWG wrote <a href=\"https://url.spec.whatwg.org/\">a specification</a> packed with details on precisely how URLs should work. To further promote interoperability, URL is now a Focus Area for Interop 2023.</p>\n<h3><a name=\"X\"></a>WebCodecs (video)</h3>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebCodecs_API\">WebCodecs API</a> gives web developers complete control over how media is processed by providing low-level access to the individual frames of a video stream and chunks of audio. This is especially useful for applications that do video or audio editing, video conferencing, or other real-time processing of video or audio. For Interop 2023, this Focus Area includes the video processing portion of WebCodecs.</p>\n<h3><a name=\"Y\"></a>Web Compat 2023</h3>\n<p>Similar to Interop 2022, this year’s project includes a Focus Area named “Web Compat”. It’s a grab bag of various bugs known to cause website compatibility issues, and features that, if missing, are most likely to make a website work in one browser and not in another.</p>\n<p>Last year’s effort was incredibly successful. The 2022 tests now have 96.9% interoperability across all three browser engines, with a score of 100% in two of the three browsers. Because of that success, the tests from Web Compat 2022 are now retired as a “Previous Focus Area”.</p>\n<p>For 2023, a whole new set of tests have been selected. They include tests for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions#other_assertions\">Regex Lookbehind</a>, inline editing, event dispatching on disabled controls, CSS <code>image-set</code>, <code>white-space</code>, and <code>text-emphasis</code>.</p>\n<h3><a name=\"Z\"></a>Web Components</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\">Web Components</a> is a suite of technologies for creating reusable custom elements, with encapsulated functionality. This Interop 2023 Focus Area includes Constructable stylesheets, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/adoptedStyleSheets\"><code>adoptedStyleSheets</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals\"><code>ElementInternals</code></a>, Form-associated Custom Elements, and the basic behavior of <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM\">Shadow DOM</a> &amp; <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\">Custom Elements</a>.</p>\n<h2>2023 Investigation Projects</h2>\n<p>There are two Investigation efforts planned for 2023. Both are projects to improve the testing infrastructure of WPT, so that Interop 2024 can potentially include a wider range of technology.</p>\n<p>One effort will take a look at how to <a href=\"https://github.com/web-platform-tests/interop-2023-mobile-testing\">test the interoperability of browser engines on mobile operating systems</a>. The other will take a look at how to <a href=\"https://github.com/web-platform-tests/interop-2023-accessibility-testing\">test the interoperability of accessibility-specific web technology</a>.</p>\n<h2>Our Ongoing Commitment to Interoperability</h2>\n<p>We continue to believe that interoperability is one of the fundamental pillars that makes the web such a successful platform. WebKit’s efforts in Interop 2022 demonstrate how deeply we care about the web. We are excited to again collaborate with our colleagues in seizing this opportunity help websites and web apps work better for everyone.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"a6fddec948755b8ef35eee06abc0d27a272899143aae9e1ab49315","category":"Tech"}