{"title":"Easier layout with margin-trim","link":"https://webkit.org/blog/16854/margin-trim/","date":1746108020000,"content":"<p>If you write a lot of CSS, you are familiar with those moments when you aren’t quite sure how to accomplish what you want to accomplish. Usually, you’ll turn to tutorials or documentation, and learn more about CSS to get your work done. But every once in a while, you realize there is no “proper” way to do what you want to do.  So you come up with (or borrow) a solution that feels hacky. Maybe it requires a lot of complex selectors. Or maybe it works for the content you have at the moment, but you worry that someday, someone might throw different HTML at the site, and the solution you wrote will break.</p>\n<p>CSS has matured a lot over the last decade. Many robust solutions filled in gaps that previously required fragile hacks. And now, there’s one more — <code>margin-trim</code>.</p>\n<h2>Margin trim</h2>\n<p>The <code>margin-trim</code> property lets you tell a container to trim the margins off its children — any margins that push up against the container. In one fell swoop, all of the space between the children and the container is eliminated.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/margin-trim-simple-scaled.png\" alt=\"diagrams of how margin-trim affects layout — before and after.\" width=\"2560\" height=\"1439\" srcset=\"https://webkit.org/wp-content/uploads/margin-trim-simple-scaled.png 2560w, https://webkit.org/wp-content/uploads/margin-trim-simple-300x169.png 300w, https://webkit.org/wp-content/uploads/margin-trim-simple-1024x576.png 1024w, https://webkit.org/wp-content/uploads/margin-trim-simple-768x432.png 768w, https://webkit.org/wp-content/uploads/margin-trim-simple-1536x863.png 1536w, https://webkit.org/wp-content/uploads/margin-trim-simple-2048x1151.png 2048w\" /></figure>\n<p>This also works when the margins are on the grandchildren or great grand-children, or great great great great grand-children. If there is space created with margins on any of the content inside the container, and that space buts up against the container, it’s trimmed away when <code>margin-trim</code> is applied <em>to the container.</em></p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/margin-trim-complex-scaled.png\" alt=\"Another diagram of how margin trim affects layout before &amp; after — this time  with grandchildren that have margins\" width=\"2560\" height=\"1439\" srcset=\"https://webkit.org/wp-content/uploads/margin-trim-complex-scaled.png 2560w, https://webkit.org/wp-content/uploads/margin-trim-complex-300x169.png 300w, https://webkit.org/wp-content/uploads/margin-trim-complex-1024x576.png 1024w, https://webkit.org/wp-content/uploads/margin-trim-complex-768x432.png 768w, https://webkit.org/wp-content/uploads/margin-trim-complex-1536x863.png 1536w, https://webkit.org/wp-content/uploads/margin-trim-complex-2048x1151.png 2048w\" /></figure>\n<p>Let’s imagine a practical example. Let’s say we have multiple paragraphs inside an <code>article</code> element, and those paragraphs have margins. Also at the same time, the container has padding on it.</p>\n<pre><code><span>article</span> {\n  <span>padding</span>: <span>2</span><span>lh</span>;\n  <span>background</span>: <span>white</span>;\n  <span>p</span> {\n    <span>margin-block</span>: <span>1</span><span>lh</span>;\n  }\n}\n</code></pre>\n<p>This is very typical code. The padding on the container is supposed to create an even amount of space all the way around the box, but instead there’s extra white space above and below the content. Like this:</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/text-before-light.png\" alt=\"Four paragraphs of text in a white box on a tan background. The white box has a lot more space above and below the text than it does on the sides of the text.\" width=\"1934\" height=\"1464\" srcset=\"https://webkit.org/wp-content/uploads/text-before-light.png 1934w, https://webkit.org/wp-content/uploads/text-before-light-300x227.png 300w, https://webkit.org/wp-content/uploads/text-before-light-1024x775.png 1024w, https://webkit.org/wp-content/uploads/text-before-light-768x581.png 768w, https://webkit.org/wp-content/uploads/text-before-light-1536x1163.png 1536w\" />\n</figure>\n<p>By <a href=\"https://webkit.org/blog/16831/line-height-units/\">using <code>1lh</code> for the margins between the paragraphs</a>, and <code>2lh</code> for the padding on the <code>article</code> box, we’re attempting to create a beautiful typographic layout. Let’s turn on some guides to better see where the extra space is coming from. The padding on the article box and the margins on the paragraphs are each marked in separate colors.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/guides-before-light.png\" alt=\"The same example of text in a box with margins, now with one color marking the padding, and another color marking the margins.\" width=\"1934\" height=\"1464\" srcset=\"https://webkit.org/wp-content/uploads/guides-before-light.png 1934w, https://webkit.org/wp-content/uploads/guides-before-light-300x227.png 300w, https://webkit.org/wp-content/uploads/guides-before-light-1024x775.png 1024w, https://webkit.org/wp-content/uploads/guides-before-light-768x581.png 768w, https://webkit.org/wp-content/uploads/guides-before-light-1536x1163.png 1536w\" /></figure>\n<p>The margins on the first and last paragraphs (<code>1lh</code>) are being added to the padding (<code>2lh</code>) to create a space in the block direction that measures <code>3lh</code>.</p>\n<p>It will be better for the design if we get rid of the margin above the first paragraph and the margin below the last paragraph. Before we had <code>margin-trim</code>, we would attempt to remove the margins from the first and last paragraphs, or lessen the padding in the block direction… but any approach we take will be dependent on the content inside. Perhaps another instance of this <code>article</code> will start with a headline that has a different amount for a top margin. Or start with an image that has no margin.</p>\n<p>Without being 100% sure of what kind of content will be in the box, it’s hard to guarantee the spacing will come out as desired. Until now.</p>\n<p>The new <code>margin-trim</code> property gives us an easy way to ask directly for what we want. We can tell the box to eliminate any margins that are butting up against that box.</p>\n<p>For example:</p>\n<pre><code><span>article</span> {\n  <span>margin-trim</span>: <span>block</span>;\n  <span>padding</span>: <span>2</span><span>lh</span>;\n  <span>background</span>: <span>white</span>;\n  <span>p</span> {\n    <span>margin-block</span>: <span>1</span><span>lh</span>;\n  }\n}\n</code></pre>\n<p>Now the browser automatically chops off any margins that touch the edge of the <code>article</code> box in the block direction — in this case the top and bottom of the box.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/guides-after-light.png\" alt=\"The same example again, now with the margins above and below the text chopped off. The colored stripes marking margins no longer exist above and below the content. \" width=\"1934\" height=\"1364\" srcset=\"https://webkit.org/wp-content/uploads/guides-after-light.png 1934w, https://webkit.org/wp-content/uploads/guides-after-light-300x212.png 300w, https://webkit.org/wp-content/uploads/guides-after-light-1024x722.png 1024w, https://webkit.org/wp-content/uploads/guides-after-light-768x542.png 768w, https://webkit.org/wp-content/uploads/guides-after-light-1536x1083.png 1536w\" /></figure>\n<p>Note that while the margins are defined on the <code>&lt;p&gt;</code> element, you declare <code>margin-trim</code> on the <code>&lt;article&gt;</code> element. You always apply <code>margin-trim</code> to the container, not the element that has the margin in the first place.</p>\n<p>Here’s the end result.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/text-after-light.png\" alt=\"The same demo, without any guides, now seeing the clean text, and seeing that the space above &amp; below the text, and the space on the sides is the same amount. \" width=\"1934\" height=\"1364\" srcset=\"https://webkit.org/wp-content/uploads/text-after-light.png 1934w, https://webkit.org/wp-content/uploads/text-after-light-300x212.png 300w, https://webkit.org/wp-content/uploads/text-after-light-1024x722.png 1024w, https://webkit.org/wp-content/uploads/text-after-light-768x542.png 768w, https://webkit.org/wp-content/uploads/text-after-light-1536x1083.png 1536w\" /></figure>\n<h2>Try it yourself</h2>\n<p>You can try out <code>margin-trim</code> in <a href=\"https://codepen.io/jensimmons/full/YPKZgvX\">this live demo</a>, in Safari 16.4 or greater.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/demo-light-2-scaled.png\" alt=\"Screenshot of the demo on the web where people can try it out for themselves. \" width=\"2560\" height=\"1621\" srcset=\"https://webkit.org/wp-content/uploads/demo-light-2-scaled.png 2560w, https://webkit.org/wp-content/uploads/demo-light-2-300x190.png 300w, https://webkit.org/wp-content/uploads/demo-light-2-1024x648.png 1024w, https://webkit.org/wp-content/uploads/demo-light-2-768x486.png 768w, https://webkit.org/wp-content/uploads/demo-light-2-1536x973.png 1536w, https://webkit.org/wp-content/uploads/demo-light-2-2048x1297.png 2048w\" /></figure>\n<h2>Browser Support</h2>\n<p>Support for<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-trim\"><code>margin-trim</code></a> shipped in Safari over two years ago. But so far, Safari is the only <a href=\"https://caniuse.com/mdn-css_properties_margin-trim\">browser with support</a>. So what should you do for browsers without support? For our demo, you could write fallback code inside of feature queries, like this:</p>\n<pre><code><span>article</span> { \n  <span>margin-trim</span>: <span>block</span>;\n  <span>font-size</span>: <span>1.2</span><span>rem</span>;\n  <span>line-height</span>: <span>1.3</span>;\n  <span>padding</span>: <span>2</span><span>lh</span>;\n  <span>p</span> {\n    <span>margin-block</span>: <span>1</span><span>lh</span>;\n  }\n}\n<span>@support</span> <span>not</span> (<span>margin-trim</span>: <span>block</span>) {\n  <span>article</span> { \n    :<span>first-child</span> {\n      <span>margin-block-start</span>: <span>0</span>;\n    }\n    <span>:last-child</span> {\n      <span>margin-block-end</span>: <span>0</span>;\n    }\n  }\n}\n</code></pre>\n<p>This helps to clarify the difference between <code>margin-trim</code> and the older techniques we’ve been using.</p>\n<p>When using <code>:first-child</code> and <code>:last-child</code> any element that’s the first or last <em>direct child of the container</em> will have its margins trimmed. But any content that either isn’t wrapped in an element, or that is nested further down in the DOM structure will not.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/margin-trim-compared-to-old-technique-scaled.png\" alt=\"Another diagram showing how the interaction of margins and margin trim works — this time with three drawings, to show margins on children and grandchildren with no margin trim, and older technique for solving this, and using margin trim. \" width=\"2560\" height=\"1439\" srcset=\"https://webkit.org/wp-content/uploads/margin-trim-compared-to-old-technique-scaled.png 2560w, https://webkit.org/wp-content/uploads/margin-trim-compared-to-old-technique-300x169.png 300w, https://webkit.org/wp-content/uploads/margin-trim-compared-to-old-technique-1024x576.png 1024w, https://webkit.org/wp-content/uploads/margin-trim-compared-to-old-technique-768x432.png 768w, https://webkit.org/wp-content/uploads/margin-trim-compared-to-old-technique-1536x863.png 1536w, https://webkit.org/wp-content/uploads/margin-trim-compared-to-old-technique-2048x1151.png 2048w\" /></figure>\n<p>For example, if the first element is a figure with a top margin, and the figure contains an image that also has a top margin, both of those margins will be trimmed by <code>margin-trim</code>, while only the figure margin will be trimmed by <code>:first-child</code>.</p>\n<pre><code><span>&lt;<span>article</span>&gt;</span>\n  <span>&lt;<span>figure</span> <span>style</span>=<span>\"margin-top: 1em\"</span>&gt;</span>\n    <span>&lt;<span>img</span>  <span>style</span>=<span>\"margin-top: 1em\"</span> <span>src</span>=<span>\"photo.jxl\"</span> <span>alt</span>=<span>\"[alt]\"</span>&gt;</span>\n    <span>&lt;<span>figcaption</span>&gt;</span>[caption]<span>&lt;/<span>figcaption</span>&gt;</span>\n  <span>&lt;/<span>figure</span>&gt;</span>\n<span>&lt;/<span>article</span>&gt;</span>  \n</code></pre>\n<p>The <code>margin-trim</code> property makes trimming such margins easier and more robust than older techniques.</p>\n<h2>Options for Margin Trim</h2>\n<p>The values for <code>margin-trim</code> are all logical values, referring to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values/Basic_concepts_of_logical_properties_and_values#block_and_inline_dimensions\">the <code>block</code> and <code>inline</code> directions</a>.</p>\n<ul>\n<li><code>margin-trim: none</code> </li>\n<li><code>margin-trim: block</code> </li>\n<li><code>margin-trim: inline</code> </li>\n<li><code>margin-trim: block-start</code> </li>\n<li><code>margin-trim: block-end</code> </li>\n<li><code>margin-trim: inline-start</code> </li>\n<li><code>margin-trim: inline-end</code> </li>\n</ul>\n<p>If you want to trim in both directions at the same time, you can do so by combining long-hand values. For example:</p>\n<pre><code><span>margin-trim</span>: <span>block-start</span> <span>block-end</span> <span>inline-start</span> <span>inline-end</span>;\n</code></pre>\n<p>In December 2024, the CSSWG resolved to also allow the shorter <code>block</code> and <code>inline</code> keywords in combination, allowing for syntax like this:</p>\n<pre><code><span>margin-trim</span>: <span>block</span> <span>inline</span>;\n</code></pre>\n<p>The work has been <a href=\"https://github.com/WebKit/WebKit/pull/44515\">done in WebKit</a> to support this last option. <a href=\"https://developer.apple.com/documentation/safari-technology-preview-release-notes\">Look for it in Safari Technology Preview</a> soon. Follow <a href=\"https://bugs.webkit.org/show_bug.cgi?id=284978\">this issue</a> for more updates.</p>\n<h2>Let us know</h2>\n<p>CSS has never been better. It’s my hope you learn about small improvements like this one, and use it to write more robust code. Let me know what you think on <a href=\"https://bsky.app/profile/jensimmons.bsky.social\">Bluesky</a> or <a href=\"https://front-end.social/@jensimmons\">Mastodon</a>. I’d love to hear your stories, feature requests, and questions.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"461b183ea1a1d9bdd9e5a1dfdeb1fbfcb0fd9e5f04eccc3c40223c91a5256270","category":"Tech"}