{"title":"Improve secret scanning efficiency in HCP Vault Radar","link":"https://www.hashicorp.com/blog/improve-secret-scanning-efficiency-in-hcp-vault-radar","date":1746115200000,"content":"<p>As businesses continue to embrace the cloud, the importance of securing sensitive data and secrets increases exponentially. Secrets management is a critical part of an organization's security strategy to safeguard sensitive information such as API keys, database credentials, private keys, and other confidential assets. HashiCorp Vault, an <a href=\"https://www.infoq.com/news/2021/04/cncf-radar-secrets-management/\">industry standard</a> in secrets management, offers a suite of tools to help enterprises manage these secrets securely, and one of the key pieces of the Vault ecosystem is <a href=\"https://www.hashicorp.com/en/products/vault/hcp-vault-radar\">HCP Vault Radar</a>.</p>\n\n<p>HCP Vault Radar detects secret leaks and identifies unmanaged secrets that might inadvertently be exposed during development or deployment. But as with any security tool, fine-tuning its detection capabilities to avoid false positives and false negatives is crucial. </p>\n\n<p>In this blog, we will delve into how HCP Vault Radar works, how it detects secret leaks, and how you can configure it using regex, global ignore rules, repository-specific ignore rules, and exclusion rules to get the most accurate and actionable results.</p>\n\n<h2>How does Vault Radar detect leaks?</h2>\n\n<p>Vault Radar works by analyzing the contents of code repositories and collaboration platforms to identify patterns that match secret formats. It relies on sophisticated scanning techniques and pattern recognition to identify potential secrets. However, identifying a \"secret\" is not always as straightforward as it seems. Secrets can come in many forms, including:</p>\n\n<ul>\n<li><strong>Base64 encoded strings</strong> which could represent tokens or credentials.</li>\n<li><strong>UUIDs or GUIDs</strong> which might be used as API keys.</li>\n<li><strong>Hexadecimal strings</strong> which could be private keys or other sensitive data.</li>\n<li><strong>Common vendor secret patterns</strong> could include AWS secret access keys, GitHub tokens, or database passwords.</li>\n</ul>\n\n<p>Context is also important. Some factors to look at include:</p>\n\n<ul>\n<li><strong>Heuristic-context</strong> pattern recognition and predefined rules, which are used to identify potentially compromised credentials, anomalies, or known indicators, without relying solely on exact matches.</li>\n<li><strong>Entropy-factor</strong> based detection, which analyzes randomness or unpredictability of data, flagging credentials with unusually high entropy as potentially compromised due to their complexity or irregular patterns.</li>\n</ul>\n\n<p>To detect these leaks, Vault Radar uses a combination of built-in detection rules based on common formats for secrets and machine learning models. However, it’s important to remember that not all of these patterns will be relevant in every project. For instance, a UUID might be a regular identifier in one project, but it could be a secret key in another. This is where tuning Vault Radar becomes essential to minimize false positives and ensure that the right secrets are flagged.</p>\n\n<h2>Tuning Vault Radar detection with regular expressions</h2>\n\n<p><a href=\"https://developer.hashicorp.com/hcp/docs/vault-radar/manage/create-custom-expressions\">Regular expressions</a> (regex) are a powerful tool for customizing detection rules and fine-tuning the accuracy of secret detection in Vault Radar. Regex allows you to define specific patterns for secrets that might not be caught by the default rules.</p>\n\n<p>For example, let’s say your application uses a custom token format or an unconventional secret pattern that Vault Radar’s default detection doesn't capture. With regex, you can define your own custom pattern to catch these secrets.</p>\n\n<h3>Custom regex for API keys</h3>\n\n<p>Suppose your company uses API keys that follow a custom format like apikey-xyz123-abc456. A default detection rule might miss this format. However, you can create a custom regex pattern like this:</p>\n<pre><code>apikey-[a-zA-Z0-9]{6}-[a-zA-Z0-9]{6}</code></pre><p>This regex will match any string that follows the specific apikey-xxxxxx-xxxxxx pattern. By adding this regex to the Vault Radar configuration, you can ensure that these keys are detected and flagged during the scanning process.</p>\n\n<h3>Ignoring UUIDs globally</h3>\n\n<p>The regex pattern for a UUID is usually something like this:</p>\n<pre><code>\\b[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\b</code></pre><p>By adding this pattern to the global ignore rule, Vault Radar will skip scanning any string that matches the UUID format across all repositories.</p>\n\n<h3>Excluding a directory with mock data</h3>\n\n<p>If you have a directory called <code>mock-data/</code> that contains test data, you can define an exclusion rule to prevent Vault Radar from scanning the files inside this directory. This helps prevent Vault Radar from flagging mock data that is intentionally not sensitive.</p>\n\n<p>To exclude a directory, you can define an exclusion rule like this:</p>\n<pre><code>^mock-data/</code></pre><p>This tells Vault Radar to completely ignore the contents of the <code>mock-data</code> directory.</p>\n\n<h3>Ignoring development tokens in a specific repository</h3>\n\n<p>Suppose you have a repository dedicated to development purposes that contains non-sensitive API keys. You can create repository-specific ignore rules to ensure that these keys are not flagged as secrets. This could be useful if the repository includes mock keys or environment-specific tokens that are safe for public exposure.</p>\n\n<p>For example, you might define an ignore rule to exclude the <code>dev-api-key</code> pattern from being flagged:</p>\n<pre><code>dev-api-key-[a-zA-Z0-9]{10}</code></pre><p>This regex rule ensures that any API keys with the prefix dev-api-key- are ignored only in this repository.</p>\n<img src=\"https://www.datocms-assets.com/2885/1746126708-custom-ignore-rules.png\" alt=\"Creating\" /><p>To implement custom regex in Vault Radar, you typically update the configuration file or interface where detection rules are defined. Once added, these regex patterns will work alongside the default rules to identify secrets with greater precision.</p>\n\n<h2>Global ignore rules</h2>\n\n<p>In many scenarios, there are certain types of data or files that might frequently be detected as secrets but aren’t actually sensitive or shouldn't be flagged. For example, a UUID might be used as a regular identifier in your application, or a specific string pattern might appear in test data files, but they’re not actual secrets.</p>\n\n<p>Vault Radar enables users to configure <a href=\"https://developer.hashicorp.com/hcp/docs/vault-radar/manage/write-global-ignore-rules\">global ignore rules</a> to manage the detection of sensitive data across multiple data sources. These rules make Vault Radar ignore specific paths, files, secret values, secret types, or resources based on predefined patterns or regular expressions. The global ignore rules are applied to future scans, ensuring that events matching these rules are marked with a severity level of \"INFO\" and flagged as \"Not important.\" This feature helps streamline data management by reducing unnecessary alerts, particularly in high-volume environments. Additionally, it provides flexibility to fine-tune which types of events should be ignored for different resources or data types.</p>\n<img src=\"https://www.datocms-assets.com/2885/1746126753-global-ignore-rules.png\" alt=\"Global\" /><p>Configurable global ignore rules include:</p>\n\n<ul>\n<li><a href=\"https://developer.hashicorp.com/hcp/docs/vault-radar/manage/write-global-ignore-rules#path-ignore-rules\">Path</a><br /></li>\n<li><a href=\"https://developer.hashicorp.com/hcp/docs/vault-radar/manage/write-global-ignore-rules#secret-ignore-rules\">Secret</a><br /></li>\n<li><a href=\"https://developer.hashicorp.com/hcp/docs/vault-radar/manage/write-global-ignore-rules#secret-type-ignore-rules\">Secret type</a><br /></li>\n<li><a href=\"https://developer.hashicorp.com/hcp/docs/vault-radar/manage/write-global-ignore-rules#resource-ignore-rules\">Resource</a></li>\n</ul>\n\n<p>To define global ignore rules in Vault Radar, you can add the patterns to the global settings section within the Vault Radar configuration file or UI.</p>\n\n<h2>Repository-specific ignore rules</h2>\n\n<p>While global ignore rules apply to all repositories, there are situations where certain repositories require custom ignore rules due to specific code patterns or data structures. For instance, some repositories might intentionally include secrets that are not sensitive (e.g. API keys for a public service or local development configurations).</p>\n\n<p>Vault Radar lets you define <a href=\"https://developer.hashicorp.com/hcp/tutorials/get-started-hcp-vault-radar/vault-radar-secret-scanning\">repository-specific ignore rules</a> to fine-tune detection on a per-repository basis. These rules tell Vault Radar to ignore certain patterns that are specific to the context of a particular project, without affecting the scanning of other repositories in your organization.</p>\n<img src=\"https://www.datocms-assets.com/2885/1746126801-connect-data-sources.png\" alt=\"Connecting\" /><p>Vault Radar also allows users to write <a href=\"https://developer.hashicorp.com/hcp/docs/vault-radar/manage/write-inline-ignore-rules\">custom ignore rules inline by adding the</a> comment <code>HashiCorpIgnore</code>, a feature that helps streamline the process of managing sensitive data and configurations. By leveraging comments in code (e.g. <code>#HashiCorpIgnore</code>), developers can specify patterns or conditions to exclude certain secrets, paths, or data from being scanned or monitored by Vault Radar. </p>\n\n<p>This provides greater flexibility and control, enabling teams to avoid unnecessary alerts or prevent the scanning of specific resources that are not relevant to security or compliance checks. Inline ignore  rules can be tailored to meet organizational needs, ensuring that only the necessary data is under scrutiny while reducing noise and improving operational efficiency. </p>\n<pre><code>resource \"test_db_instance\" \"database\" {\n  allocated_storage = 5\n  engine            = \"mysql\"\n  instance_class    = \"db.t2.micro\"\n  username          = \"demo-admin\"\n  password          = \"notasecurepassword\" # HashiCorpIgnore</code></pre><h2>Exclusion rules for specific files or directories</h2>\n\n<p>In some cases, you might want to exclude entire files or directories from being scanned. This is especially useful when you have known files that contain non-sensitive data or temporary configurations that could lead to false positives.</p>\n\n<p>Vault Radar allows you to define <a href=\"https://developer.hashicorp.com/hcp/tutorials/get-started-hcp-vault-radar/vault-radar-secret-scanning#create-a-global-ignore-rule\">exclusion rules</a>, specifying which files or directories to exclude from scanning. This can reduce noise in the detection results and ensure that Vault Radar  focuses only on relevant code and data.</p>\n\n<h2>Vault correlation</h2>\n\n<p>Vault correlation in Vault Radar allows users to connect their HCP Vault Dedicated or Enterprise cluster to the Vault Radar agent, enabling the correlation of findings with the secrets stored in Vault. This integration helps identify secrets that need to be rotated by linking the findings from Vault Radar scans to the actual secrets managed within Vault. </p>\n\n<p>Integrating Vault correlation into Vault Radar offers significant benefits for organizations by enhancing their ability to reduce risk and improve overall security posture. By accurately correlating security findings with actual secrets stored in Vault, organizations can quickly identify and address exposed or outdated credentials, minimizing the potential for unauthorized access or breaches. </p>\n\n<p>Additionally, by minimizing false positives through more precise and context-aware scanning, operational costs are reduced, as security teams can focus on genuine threats rather than sifting through unnecessary alerts. This efficiency also improves the overall security workflow, enabling faster response times and a more streamlined security process.</p>\n\n<h3><strong>Best practices for tuning Vault Radar detection</strong></h3>\n\n<p>Here are some best practices for fine-tuning detection in Vault Radar:</p>\n\n<ol>\n<li><strong>Use regex for custom patterns</strong>: If your secrets use non-standard formats, define custom regex patterns to detect them.<br /></li>\n<li><strong>Avoid overuse of ignore rules</strong>: While ignore and exclusion rules are helpful, overusing them can result in missing real secrets. Only apply ignore rules when absolutely necessary.<br /></li>\n<li><strong>Test changes</strong>: After applying new rules (regex, ignore, or exclusion), test the changes in a staging environment before rolling them out across production repositories.<br /></li>\n<li><strong>Monitor false positives</strong>: Regularly monitor and review false positives, and adjust rules as needed to keep the scanning results accurate.<br /></li>\n<li><strong>Document rules</strong>: Keep clear documentation of the rules you have implemented, so other team members can understand and maintain them.<br /></li>\n<li><strong>Connect your Vault secrets manager:</strong> Leverage Vault Enterprise or HCP Vault Dedicated to identify leaked credentials that are also active secrets.</li>\n</ol>\n\n<h2>Vault and Vault Radar: A powerful combo</h2>\n\n<p>As the developer community increasingly adopts cloud technologies for things ranging from passion projects to production deployments, safeguarding sensitive data and secrets becomes paramount. For developers and security teams, secrets management is a critical aspect of protecting that sensitive information. HashiCorp Vault is <a href=\"https://www.hashicorp.com/en/case-studies?products=Vault\">a battle-tested</a> secrets management platform, and HCP Vault Radar is a powerful addition for detecting secret leaks and managing secrets in code repositories. </p>\n\n<p>By understanding how Vault Radar works and using techniques like regex, global ignore rules, repository-specific ignore rules, and exclusion rules, enterprises can ensure that their secret scanning is both accurate and efficient. With careful tuning, organizations can effectively minimize false positives and false negatives while maintaining robust security and compliance with data protection regulations. By proactively managing secrets and leaks, Vault Radar helps reduce the risks of data breaches, unauthorized access, and potential vulnerabilities in your cloud-native environments.</p>\n\n<h2>Related resources</h2>\n\n<ul>\n<li><a href=\"https://www.hashicorp.com/en/lp/vault-radar-ga-webinar-series\">HCP Vault Radar webinar series</a><br /></li>\n<li><a href=\"https://developer.hashicorp.com/hcp/docs/vault-radar\">HCP Vault Radar product documentation</a><br /></li>\n<li><a href=\"https://www.hashicorp.com/blog/solutions-to-secret-sprawl\">Solutions to secret sprawl</a><br /></li>\n<li><a href=\"https://www.hashicorp.com/contact-sales?interest=vault\">Talk to us about your secrets management needs</a><br /></li>\n<li><a href=\"https://youtu.be/zQu7VJtbHAI\">HCP Vault Radar demo</a></li>\n</ul>\n","author":"Rich DuBose","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"130a683468726a1bb5015acf4523cd68cb4216e4c52bf55346904a61142f4785","category":"Tech"}