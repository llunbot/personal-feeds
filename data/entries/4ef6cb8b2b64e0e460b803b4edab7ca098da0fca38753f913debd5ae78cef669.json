{"title":"Computer Vision at the Edge with AWS Panorama","link":"https://aws.amazon.com/blogs/aws/computer-vision-at-the-edge-with-aws-panorama/","date":1634752662000,"content":"<p>Today, the <a href=\"https://aws.amazon.com/panorama\">AWS Panorama Appliance</a> is generally available to all of you. The AWS Panorama Appliance is a <a href=\"https://en.wikipedia.org/wiki/Computer_vision\">computer vision</a> (CV) appliance designed to be deployed on your network to analyze images provided by your on-premises cameras.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/IMG_8173.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/IMG_8173-300x225.png\" /></a></p> \n<p>Every week, I read about new and innovative <a href=\"https://aws.amazon.com/blogs/machine-learning/introducing-aws-panorama-improve-your-operations-with-computer-vision-at-the-edge/\">use cases for computer vision</a>. Some customers are using CV to verify pallet trucks are parked in designated areas to ensure worker safety in warehouses, some are analyzing customer walking flows in retail stores to optimize space and product placement, and some are using it to recognize <a href=\"https://www.youtube.com/watch?v=bW8b1gWMaJk\">cats and mice</a>, just to name a few.</p> \n<p>AWS customers agree the cloud is the most convenient place to train computer vision models thanks to its virtually infinite access to storage and compute resources. In the cloud, data scientists have access to powerful tools such as <a href=\"https://aws.amazon.com/sagemaker/\">Amazon SageMaker</a> and a wide variety of <a href=\"https://docs.aws.amazon.com/dlami/latest/devguide/gpu.html\">compute resources</a> and <a href=\"https://aws.amazon.com/machine-learning/containers/\">frameworks</a>.</p> \n<p>However, when it’s time to analyze images from one or multiple video feeds, many of you are telling us the cloud is not the place where you want to run such workloads. There are a number of reasons for that: sometimes the facilities where the images are captured do not have enough bandwidth to send video feeds to the cloud, some use cases require very low latency, or some just want to keep their images on premises and not send them for analysis outside of their network.</p> \n<p>At re:Invent 2020, <a href=\"https://aws.amazon.com/blogs/aws/using-computer-vision-applications-at-the-edge/\">we announced the AWS Panorama Appliance and SDK</a> to address these requirements.</p> \n<p>AWS Panorama is a machine learning appliance and software development kit (SDK) that allows you to bring computer vision to on-premises cameras to make predictions locally with high accuracy and low latency. With the AWS Panorama Appliance, you can automate tasks that have traditionally required human inspection to improve visibility into potential issues. For example, you can use AWS Panorama Appliance to evaluate manufacturing quality, identify bottlenecks in industrial processes, and monitor workplace security even in environments with limited or no internet connectivity. The software development kit allows camera manufacturers to bring equivalent capabilities directly inside their IP camera.</p> \n<p>As usual on this blog, I would like to walk you through the development and deployment of a computer vision application for the AWS Panorama Appliance. The demo application from this blog uses a machine learning model to recognise objects in frames of video from a network camera. The application loads a model onto the AWS Panorama Appliance, gets images from a camera, and runs those images through the model. The application then overlays the results on top of the original video and outputs it to a connected display. The application uses libraries provided by AWS Panorama to interact with input and output video streams and the model, no low level programming is required.</p> \n<p>Let’s first define a few concepts. I borrowed the following definitions from <a href=\"https://docs.aws.amazon.com/panorama/index.html\">the AWS Panorama documentation page</a>.</p> \n<p><span><strong>Concepts<br /> </strong></span>The AWS Panorama <strong>Appliance</strong> is the hardware that runs your applications. You use the AWS Panorama console or <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a> to register an appliance, update its software, and deploy applications to it. The software that runs on the appliance discovers and connects to camera streams, sends frames of video to your application, and optionally displays video output on an attached display.</p> \n<p>The appliance is an edge device. Instead of sending images to the AWS Cloud for processing, it runs <strong>applications</strong> locally on optimized hardware. This enables you to analyze video in real time and process the results with limited connectivity. The appliance only requires an internet connection to report its status, upload logs, and get software updates and deployments.</p> \n<p>An application comprises multiple components called <strong>nodes</strong>, which represent cameras, models, code, or global variables. A node can be configuration only (inputs and outputs), or include artifacts (models and code). Application nodes are bundled in node packages that you upload to an Amazon S3 access point, where the AWS Panorama Appliance can access them. An <strong>application manifest</strong> is a configuration file that defines connections between the nodes.</p> \n<p>A computer vision <strong>model</strong> is a machine learning network that is trained to process images. Computer vision models can perform various tasks such as classification, detection, segmentation, and tracking. A computer vision model takes an image as input and outputs information about the image or objects in the image.</p> \n<p>AWS Panorama supports models built with <a href=\"https://mxnet.apache.org\">Apache MXNet</a>, <a href=\"https://pjreddie.com/darknet/\">DarkNet</a>, <a href=\"https://cv.gluon.ai/\">GluonCV</a>, <a href=\"https://keras.io/\">Keras</a>, <a href=\"https://onnx.ai/\">ONNX</a>, <a href=\"https://pytorch.org/\">PyTorch</a>, <a href=\"https://www.tensorflow.org/\">TensorFlow</a>, and <a href=\"https://www.tensorflow.org/lite\">TensorFlow Lite</a>. You can build models with <a href=\"https://aws.amazon.com/sagemaker/\">Amazon SageMaker</a> and import them from an <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> bucket.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/12/sample-app.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/12/sample-app-1024x446.png\" /></a></p> \n<p>Now that we grasp the concepts, let’s get our hands on.</p> \n<p><span><strong>Unboxing Your AWS Panorama Appliance</strong></span><br /> In the box the service team sent me, I found the appliance itself (no surprise!), a power cord and two ethernet cables. The box also contains a USB key to initially configure the appliance. The device is designed to work in industrial environments. It has two ethernet ports next to the power connector on the back. On the front, protected behind a sliding door, I found a SD card reader, one HDMI connector and two USB ports. There is also a power button and a reset button to reinitialise the device to its factory state.</p> \n<table> \n <tbody> \n  <tr> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/IMG_8175.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/IMG_8175-300x225.png\" /></a></td> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/IMG_8174.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/IMG_8174-300x225.png\" /></a></td> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/IMG_8190_3.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/IMG_8190_3-300x225.png\" /></a></td> \n  </tr> \n </tbody> \n</table> \n<p><span><strong>Configuring Your Appliance<br /> </strong></span>I first configured it for my network (cable + DHCP, but it also supports static IP configuration) and registered it to securely connect back to my AWS Account. To do so, I navigated to the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a>, entered my network configuration details. It generated a set of configuration files and certificates. I copied them to the appliance using the provided USB key. <a href=\"https://aws.amazon.com/blogs/aws/using-computer-vision-applications-at-the-edge/\">My colleague Martin Beeby shared screenshots of this process</a>. The team slightly modified the screens based on the feedback they received during the preview, but I don’t think it is worth going through the step-by-step process again. <strong>Tip from the field</strong>: be sure to use the USB key provided in the box, it is correctly formatted and automatically recognised by the appliance (my own USB key was not recognized properly).</p> \n<p>I then downloaded <a href=\"https://github.com/aws-samples/aws-panorama-samples\">a sample application from the Panorama GitHub repository</a> and tried it with the <a href=\"https://github.com/aws-samples/aws-panorama-samples\">Test Utility for Panorama, also available on this GitHub</a> (the test utility is an EC2 instance configured to act as a simulator). The Test Utility for Panorama uses <a href=\"https://jupyter.org\">Jupyter</a> notebooks to quickly experiment with sample applications or your code before deploying it to the appliance. It also lists commands allowing you to deploy your applications to the appliance programmatically.</p> \n<p><strong><span>Panorama Command Line</span><br /> </strong>The Panorama command line simplifies the operations to create a project, import assets, package it, and deploy it to the AWS Panorama Appliance. <a href=\"https://github.com/aws/aws-panorama-cli\">You can follow these instructions to download and install the Panorama command line</a>.</p> \n<p>When receiving an application developed by someone else, like the sample application, I have to replace AWS account IDs in all application files and directory names. I do this with one single command:</p> \n<p><code>panorama-cli import-application</code></p> \n<p><span><strong>Application Structure<br /> </strong></span>A Panorama application structure looks as follows:</p> \n<p><code>├── assets</code><br /> <code>├── graphs</code><br /> <code>│   └── example_project</code><br /> <code>│       └── graph.json</code><br /> <code>└── packages</code><br /> <code>    ├── accountXYZ-model-1.0</code><br /> <code>    │   ├── descriptor.json</code><br /> <code>    │   └── package.json</code><br /> <code>    └── accountXYZ-sample-app-1.0</code><br /> <code>        ├── Dockerfile</code><br /> <code>        ├── descriptor.json</code><br /> <code>        ├── package.json</code><br /> <code>        └── src</code><br /> <code>            └── app.py</code></p> \n<ul> \n <li><code>graph.json</code> lists all the packages and nodes in this application. Nodes are the way to define an application in Panorama.</li> \n <li>in each package <code>package.json</code> has details about the package and the assets it uses.</li> \n <li>model package <code>model</code> has a <code>descriptor.json</code> which contains the metadata required for compiling the model.</li> \n <li>container package<code>sample-app</code> package contains the application code in the <code>src</code> directory and a <code>Dockerfile</code> to build the container. <code>descriptor.json</code> has details about which command and file to use when the container is launched.</li> \n <li><code>assets</code> directory is where all the assets reside, such as packaged code and compiled models. You should not make any changes in this directory.</li> \n</ul> \n<p>Note that package names are prefixed with your account number.</p> \n<p>When my application is ready, I build the container (I am using a Linux machine with <a href=\"https://github.com/docker/engine\">Docker Engine</a> and <a href=\"https://github.com/docker/cli\">Docker CLI</a> <a href=\"https://www.docker.com/blog/updating-product-subscriptions/\">to avoid using Docker Desktop for macOS or Windows</a>.)</p> \n<pre><code>$ panorama-cli build-container                               \\\n               --container-asset-name {container_asset_name} \\ \n               --package-path packages/{account_id}-{package_name}-1.0 </code></pre> \n<p><span><strong>A Note About the Cameras<br /> </strong></span>AWS Panorama Appliance has a concept of “abstract cameras”. Abstract camera sources are placeholders that can be mapped to actual camera devices during application deployment. The Test Utility for Panorama allows you to map abstract cameras to video files for easy, repeatable tests.</p> \n<p><span><strong>Adding a ML Model<br /> </strong></span>The AWS Panorama Appliance supports multiple ML Model frameworks. Models may be trained on <a href=\"https://aws.amazon.com/sagemaker/\">Amazon SageMaker</a> or any other solution of your choice. I downloaded my ML model from S3 and import it to my project:</p> \n<pre><code>panorama-cli add-raw-model                                                 \\\n    --model-asset-name {asset_name}                                        \\\n    --model-s3-uri s3://{S3_BUCKET}/{project_name}/{ML_MODEL_FNAME}.tar.gz \\\n    --descriptor-path {descriptor_path}                                    \\\n    --packages-path {package_path}</code></pre> \n<p>Behind the scenes, ML Models are compiled to optimise them to the Nvidia Accelerated Linux Arm64 architecture of the AWS Panorama Appliance.</p> \n<p><strong><u>Package the Application</u><br /> </strong>Now that I have a ML model and my application code packaged in a container, I am ready to package my application assets for AWS Panorama Appliance:</p> \n<p><code>panorama-cli package-application</code></p> \n<p>This command uploads all my application assets to the AWS cloud account along with all the manifests.</p> \n<p><span><strong>Deploy the Application<br /> </strong></span>Finally I deploy the application to the AWS Panorama Appliance. A deployment copies the application and its configuration, like camera stream selection, from the AWS cloud to my on-premise AWS Panorama Appliance. I may deploy my application programmatically using Python code (and the <a href=\"https://aws.amazon.com/sdk-for-python/\">Boto3 SDK</a> you might know already):</p> \n<pre><code>\nclient = boto3.client('panorama')\nclient.create_application_instance(\n    Name=\"AWS News Blog Sample Application\",\n    Description=\"An object detection app\",\n    ManifestPayload={\n       'PayloadData': manifest         # &lt;== this is the graph.json file content \n    },\n    RuntimeRoleArn=role,               # &lt;== this is a role that gives my app permissions to use AWS Services such as Cloudwatch\n    DefaultRuntimeContextDevice=device # &lt;== this is my device name \n)</code></pre> \n<p>Alternatively, I may use the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a>:</p> \n<p>On <strong>Deployed applications</strong>, I select <strong>Deploy application</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-53-51.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-53-51.png\" /></a></p> \n<p>I copy and paste the content of <code>graphs/&lt;project name&gt;/graph.json</code> to the console and select <strong>Next</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-53-11.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-53-11.png\" /></a></p> \n<p>I give my application a name and an optional description. I select <strong>Proceed to deploy</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-53-39.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-53-39.png\" /></a></p> \n<p>The next steps are</p> \n<ul> \n <li>declare an IAM role to give permissions to my application to use AWS Service. The minimal permissions set allows to call the <code>PuMetricData</code> API on <a href=\"https://aws.amazon.com/cloudwatch/\">CloudWatch</a>.</li> \n <li>select the AWS Panorama Appliance I want to deploy to</li> \n <li>map the abstract cameras defined in the application <code>descriptors.json</code> to physical cameras known by the AWS Panorama Appliance</li> \n <li>fill in any application-specific inputs, such as acceptable threshold value, log level etc.</li> \n</ul> \n<p>An example IAM policy is</p> \n<pre><code>AWSTemplateFormatVersion: '2010-09-09'\nDescription: Resources for an AWS Panorama application.\nResources:\n  runtimeRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: Allow\n            Principal:\n              Service:\n                - panorama.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Policies:\n        - PolicyName: cloudwatch-putmetrics\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'cloudwatch:PutMetricData'\n                Resource: '*'\n      Path: /service-role/</code></pre> \n<p>These six screenhots capture this process:</p> \n<table> \n <tbody> \n  <tr> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-54-50.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-54-50.png\" /></a></td> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-55-17.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-55-17.png\" /></a></td> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-55-56.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-55-56.png\" /></a></td> \n  </tr> \n  <tr> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-56-19.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-56-19.png\" /></a></td> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-56-31.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-15_21-56-31.png\" /></a></td> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/18/2021-10-15_21-56-59.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/18/2021-10-15_21-56-59.png\" /></a></td> \n  </tr> \n </tbody> \n</table> \n<p>The deployment takes 15-30 minutes depending on the size of your code and your ML models, and the appliance available bandwidth. Eventually, the status turn green to “Running”.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-17_18-11-59.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-17_18-11-59.png\" /></a></p> \n<p>Once the application is deployed to your AWS Panorama Appliance it begins to run, continuously analyzing video and generating highly accurate predictions locally within milliseconds. I connect an HDMI cable to the AWS Panorama Appliance to monitor the output, and I can see:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/IMG_8199.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/IMG_8199.png\" /></a></p> \n<p>Should anything goes wrong during the deployment or during the life of the application, I have access to the logs on <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a>. There are two log streams created, one for the AWS Panorama Appliance itself and one for the application.</p> \n<table> \n <tbody> \n  <tr> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-17_17-05-33.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-17_17-05-33-300x300.png\" /></a></td> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-17_17-06-12.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/17/2021-10-17_17-06-12-285x300.png\" /></a></td> \n  </tr> \n </tbody> \n</table> \n<p><strong><span>Pricing and Availability</span><br /> </strong>The <a href=\"https://aws.amazon.com/panorama\">AWS Panorama Appliance</a> is available to purchase at <a href=\"https://us-west-2.console.aws.amazon.com/elemental-appliances-software/home?region=us-west-2#/quotelist\">AWS Elemental order page in the AWS Console</a>. You can place orders from the United States, Canada, the United Kingdom, and the European Union. There is a one-time charge of $4,000 for the appliance itself.</p> \n<p>There is a usage charge of $8.33 / month / camera feed.</p> \n<p>AWS Panorama stores versioned copies of all assets deployed to the AWS Panorama Appliance (including ML models and business logic) in the cloud. You are charged $0.10 per-GB, per-month for this storage.</p> \n<p>You may incur additional charges if the business logic deployed to your AWS Panorama Appliance uses other AWS services. For example, if your business logic uploads ML predictions to Amazon S3 for offline analysis, you will be billed separately by S3 for any storage charges incurred.</p> \n<p>The AWS Panorama Appliance can be installed anywhere. The appliance connects back to the AWS Panorama service in the AWS cloud in one of the following AWS Region : US East (N. Virginia), US West (Oregon), Canada (Central), or Europe (Ireland).</p> \n<p>Go and <a href=\"https://aws.amazon.com/panorama/\">build your first computer vision model today</a>.</p> \n<a href=\"https://twitter.com/sebsto\">-- seb</a>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"4ef6cb8b2b64e0e460b803b4edab7ca098da0fca38753f913debd5ae78cef669","category":"Tech"}