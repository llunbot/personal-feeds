{"title":"Terraform migrate 1.1 adds VCS workspace support and enhanced GitOps","link":"https://www.hashicorp.com/blog/terraform-migrate-1-1-adds-vcs-workspace-support-and-enhanced-gitops","date":1748880000000,"content":"<p>Terraform migrate is a command-line tool that simplifies the process of migrating your Terraform state and configuration from Terraform Community Edition to HCP Terraform and Terraform Enterprise. Previously, Terraform migrate supported only <a href=\"https://www.hashicorp.com/en/blog/terraform-migrate-now-generally-available\">CLI-driven</a> Terraform workflows. With the release of <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/migrate/tf-migrate\">Terraform migrate 1.1</a>, you can now create and configure HCP Terraform and Terraform Enterprise workspaces linked to GitHub or GitLab repositories as part of your migration configuration. This enables automated runs via the version control system workflow, which provides stronger alignment with GitOps practices.</p>\n\n<p>This post will share the benefits of this approach and show some examples of Terraform migrate 1.1â€™s new features in action.</p>\n\n<h2>A GitOps workflow</h2>\n\n<p>Infrastructure teams often rely on VCS workflows to manage and trigger infrastructure management with Terraform. With the 1.1 release, Terraform migrate fully embraces GitOps by enabling automated, Git-based migration flows. </p>\n\n<p>Before Terraform migrate 1.1, users had to create a separate migration branch to perform the migration. Now they have the option to configure Terraform migrate to work from their existing repository branches. Using this option, Git token validation, Git operations, and pull-request creation are now more adaptive to user preferences, making the migration experience more seamless.</p>\n\n<p>Here are the specific updates in Terraform migrate 1.1:</p>\n\n<h2>VCS workspace support</h2>\n\n<p>You can now define and provision <a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud-get-started/cloud-vcs-change\">VCS-driven workspaces</a> as part of your migration configuration. These workspaces are linked directly to repositories in GitHub or GitLab and support runs triggered from tracked branches.</p>\n\n<p>As part of this flow:</p>\n\n<ul>\n<li><p>The CLI <strong>automatically detects OAuth-connected VCS providers</strong> in your HCP Terraform organization.</p></li>\n<li><p>It handles all VCS provider connection scenarios: </p>\n\n<ul>\n<li>No connection (prompt to continue with CLI mode)</li>\n<li>Single connection (auto-selected)</li>\n<li>Multiple connections (interactive selection via OAuth client ID)</li>\n</ul></li>\n</ul>\n\n<p>The migration config supports:</p>\n\n<ul>\n<li><p><code>workspace_mode</code>: Set to either <code>vcs</code> or <code>cli</code> per workspace. This setting is flexible and can be modified by the user after the prepare step.</p></li>\n<li><p><code>vcs_repo</code>: Includes repository identifier, branch name, OAuth token ID, and submodule settings </p></li>\n<li><p><code>tfe_working_directory</code>: Specifies the directory to run Terraform from (useful for subfolders in <a href=\"https://www.hashicorp.com/en/blog/terraform-mono-repo-vs-multi-repo-the-great-debate\">monorepos</a>)</p></li>\n</ul>\n\n<h3>Git control via provider-level git attributes</h3>\n\n<p>Two provider-level attributes give you granular control and help during Git token validation:</p>\n\n<ul>\n<li><p><code>allow_commit_push</code>: Allows commits and pushes without requiring a migration branch</p></li>\n<li><p><code>create_pr</code>: Automatically opens a pull request when enabled</p></li>\n</ul>\n\n<h2>Stability and performance improvements</h2>\n\n<p>There were two major stability and performance enhancements in Terraform migrate 1.1:</p>\n\n<ul>\n<li><p><strong>Token validation optimization</strong>: Token checks now only occur when Git operations are enabled via <code>allow_commit_push</code>and<code>create_pr</code>, improving speed and reducing false errors in the execution step.</p></li>\n<li><p><strong>Reliable branch push</strong>: Branches are now reliably pushed with detailed error feedback. The migration branch is automatically pushed to the repository after the creation.</p></li>\n</ul>\n\n<h2>Next steps</h2>\n\n<p>You can find installation, setup instructions, and configuration examples in the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/migrate/tf-migrate\">Terraform migrate overview page</a>.</p>\n\n<p>This release represents a major step forward in our mission to deliver powerful tools for managing infrastructure as code. We invite you to try Terraform migrate and discover how it streamlines and simplifies your migration to HCP Terraform or Terraform Enterprise. Explore the advantages of HCP Terraform by <a href=\"https://www.hashicorp.com/en/products/terraform?utm_source=hashicorp.com&amp;utm_medium=referral&amp;utm_campaign=26Q1_WW_hcp-signups-from-blogs&amp;utm_content=terraform-migrate-1-1&amp;utm_offer=signup\">signing up here</a>.</p>\n","author":"Anurag Anand","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"9c2a7db9612c13e0a83fe354b7b1a2a1ebaf32faea1bf3ca4f4b2325ae909702","category":"Tech"}