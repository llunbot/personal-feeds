{"title":"★ Apple Disables WebKit’s JIT in Lockdown Mode, Offering a Hint Why BrowserEngineKit Is Complex and Restricted","link":"https://daringfireball.net/2024/06/apple_disables_webkits_jit_in_lockdown_mode","date":1719264529000,"content":"\n<p>Last week I mentioned Apple’s prohibition on JITs — <a href=\"https://en.wikipedia.org/wiki/Just-in-time_compilation\">just-in-time compilers</a> — <a href=\"https://daringfireball.net/linked/2024/06/18/utm-notarization\">in the context of their rejection of UTM SE</a>, an open source PC emulator. Apple’s prohibition on JITs, on security grounds, is a side issue regarding UTM SE, because UTM SE is the version of UTM that doesn’t use a JIT. But because it doesn’t use a JIT, it’s so slow that <a href=\"https://x.com/UTMapp/status/1799647652134654045\">the UTM team doesn’t consider it worth fighting</a> with Apple regarding its rejection.</p>\n\n<p>On that no-JITs prohibition, though, it’s worth noting that Apple even disables its own trusted JIT in WebKit when you enable Lockdown Mode, which Apple <a href=\"https://support.apple.com/en-us/105120\">now describes</a> as “an optional, extreme protection that’s designed for the very few individuals who, because of who they are or what they do, might be personally targeted by some of the most sophisticated digital threats. Most people are never targeted by attacks of this nature.” Apple <a href=\"https://daringfireball.net/linked/2022/07/11/lockdown-mode\">previously described</a> Lockdown Mode as protection for those targeted by “private companies developing state-sponsored mercenary spyware”, but has <a href=\"https://www.reuters.com/technology/cybersecurity/apple-warns-users-mercenary-spyware-attack-91-countries-including-india-et-2024-04-11/\">recently dropped</a> the “state-sponsored” language.</p>\n\n<p><a href=\"https://support.apple.com/en-us/105120\">Here’s how Apple describes Lockdown Mode’s effect on web browsing</a>:</p>\n\n<blockquote>\n  <p>Web browsing — Certain complex web technologies are blocked, which\nmight cause some websites to load more slowly or not operate\ncorrectly. In addition, web fonts might not be displayed, and\nimages might be replaced with a missing image icon.</p>\n</blockquote>\n\n<p>JavaScriptCore’s JIT interpreter is one of those “complex web technologies”. <a href=\"https://alexi.sh/blog/2022/07/lockdown-jsc/\">Alexis Lours did some benchmarking two years ago</a>, when iOS 16 was in beta, to gauge the effect of disabling the JIT on JavaScript performance (and he also determined a long list of other WebKit features that get disabled in Lockdown Mode, a list I wish Apple would publish and keep up to date). Lours ran several benchmarks, but I suspect <a href=\"https://browserbench.org/Speedometer3.0/\">Speedometer</a> is most relevant to real-world usage. Lours’s benchmarking indicated roughly a two-third reduction in JavaScript performance with Lockdown Mode enabled in Speedometer.</p>\n\n<p>This brings me to <a href=\"https://developer.apple.com/documentation/browserenginekit\">BrowserEngineKit</a>, a new framework Apple created specifically for compliance with the EU’s DMA, which requires gatekeeping platforms to allow for third-party browser engines. Apple has permitted third-party <em>browsers</em> on iOS <a href=\"https://www.theverge.com/2012/6/28/3123689/google-announces-chrome-for-iphone-and-ipad\">for over a decade</a>, but requires all browsers to use the system’s WebKit rendering engine. One take on Apple’s longstanding prohibition against third-party rendering engines is that they’re protecting their own interests with Safari. More or less that they’re just being dicks about it. But there really is a security angle to it. JavaScript engines run much faster with JIT compilation, but JITs inherently pose security challenges. There’s a whole section in the BrowserEngineKit docs <a href=\"https://developer.apple.com/documentation/browserenginekit/protecting-code-compiled-just-in-time\">specifically about JIT compilation</a>.</p>\n\n<p>As I see it Apple had three choices, broadly speaking, for complying with the third-party browser engine mandate in the DMA:</p>\n\n<ol>\n<li><p>Disallow third-party browser engines from using JITs. This would clearly be deemed malicious by anyone who actually wants to see Chromium or Gecko-based browsers on iOS. JavaScript execution would be somewhere between 65 to 90 percent slower compared to WebKit.</p></li>\n<li><p>Allow third-party browser engines in the EU to just use JIT compilation freely without restrictions. This would open iOS devices running such browsers to security vulnerabilities. The message to users would be, effectively, “If you use one of these browsers you’re on your own.”</p></li>\n<li><p>Create something like BrowserEngineKit, which adds complexity in the name of allowing for JIT compilation (and other potentially insecure technologies) in a safer way, and limit the use of BrowserEngineKit only to trusted web browser developers.</p></li>\n</ol>\n\n<p>Apple went with choice 3, and I doubt they gave serious consideration to anything else. Disallowing third-party rendering engines from using JITs wasn’t going to fly, and allowing them to run willy-nilly would be insecure. The use of BrowserEngineKit <a href=\"https://developer.apple.com/support/alternative-browser-engines\">also requires a special entitlement</a>:</p>\n\n<blockquote>\n  <p>Apple will provide authorized developers access to technologies\nwithin the system that enable critical functionality and help\ndevelopers offer high-performance modern browser engines. These\ntechnologies include just-in-time compilation, multiprocess\nsupport, and more.</p>\n\n<p>However, as browser engines are constantly exposed to untrusted\nand potentially malicious content and have visibility of sensitive\nuser data, they are one of the most common attack vectors for bad\nactors. To help keep users safe online, Apple will only authorize\ndevelopers to implement alternative browser engines after meeting\nspecific criteria and who commit to a number of ongoing privacy\nand security requirements, including timely security updates to\naddress emerging threats and vulnerabilities.</p>\n</blockquote>\n\n<p>BrowserEngineKit isn’t easy, but I genuinely don’t think any good solution would be. Browsers don’t need a special entitlement or complex framework to run on MacOS, true, but iOS is not MacOS. <a href=\"https://hardcoresoftware.learningbyshipping.com/p/215-building-under-regulation\">To put it in Steven Sinofsky’s terms</a>, gatekeeping is a fundamental aspect of Apple’s brand promise with iOS.</p>\n\n\n\n    ","author":"John Gruber","siteTitle":"Daring Fireball","siteHash":"fc569638025dadf22a867470f8215f38855cf50e975782a6c989909474292a36","entryHash":"b7215c4cc3d36b6295ec638eed4bc5ec3f3a03db577dc5c5c9b5469c009a633a","category":"Tech"}