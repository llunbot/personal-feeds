{"title":"ใช้ OpenJDK ตัวไหนดี","link":"https://blog.whs.in.th/node/3575","date":1632240734000,"content":"<p>ช่วงนี้ทำ build infra ให้ Java project แล้วก็รำคาญ base image เลยไปทำ image Java 16/17 ให้ทีม</p>\n<p>ทีนี้ก็สงสัย ว่าเราใช้ OpenJDK ตัวไหนดี…</p>\n<p>ถ้าตอบสั้นๆ คือถ้าไม่เลือก Oracle แล้วแทบจะเหมือนถามว่าอยากได้ Blockchain สีอะไร</p>\n<p><img src=\"https://blog.whs.in.th/wp-content/uploads/2021/09/dt951117dhc0-1024x311.gif\" /></p>\n<p>ถ้าจะเอาคำตอบดีๆ เลื่อนไปล่างสุดอ่านได้เลยครับ</p>\n<h2>The contenders</h2>\n<p>ปัจจุบันเราสามารถโหลด OpenJDK 11 ได้จากที่ต่างๆ ดังนี้ (ข้อมูลจาก <a href=\"https://javaalmanac.io/jdk/11/\">javaalmanac.io</a>) ซึ่งต้องทำความเข้าใจว่าที่มาที่ไป ทำไมคนอยาก build JDK กัน</p>\n<ul>\n<li><a href=\"https://adoptium.net/\">Eclipse Temurin โดยกลุ่ม Adoptium</a> หรือชื่อเดิมก่อนมาอยู่ Eclipse คือ AdoptOpenJDK เป็นโครงการ build OpenJDK จากชุมชน มี IBM ดันหลังเล็กน้อย ถ้าอยากได้แบบไม่ติดแบรนด์คิดว่าเจ้านี้ดีที่สุด</li>\n<li><a href=\"https://adoptopenjdk.net/upstream.html\">AdoptOpenJDK Upstream build</a> (ยังไม่มีย้ายไป Temurin) มาจากคำขอของทีม OpenJDK update project ที่อยากได้ build เพียวๆ ไม่แต่งเติมใดๆ ทั้งสิ้น แต่ Oracle ไม่ให้วางไว้ในเว็บ java.net</li>\n<li><a href=\"https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/downloads-list.html\">Amazon Corretto</a> เนื่องจาก AWS ใช้ Java ด้านในค่อนข้างเยอะ ก็เลยแจกตัวที่ใช้งานมาเพื่อให้นำไปใช้งานได้ รวมถึงถ้ามี AWS support อยู่แล้วก็ใช้ได้เลย</li>\n<li><a href=\"https://www.azul.com/downloads/?version=java-11-lts\">Azul Zulu</a> เป็นบริษัทจากอเมริกาที่ support Java มากว่า 20 ปี</li>\n<li><a href=\"https://www.azul.com/products/prime/\">Azul Prime</a> เวอร์ชั่นเสียเงินที่มี optimization เพิ่มเติมเช่น garbage collector ตัวใหม่ไม่มีที่อื่น</li>\n<li><a href=\"https://bell-sw.com/pages/downloads/?version=java-11-lts\">BellSoft Liberica</a> เป็นบริษัท support Java จากรัสเซีย</li>\n<li><a href=\"https://docs.microsoft.com/en-us/java/openjdk/download\">Microsoft Build of OpenJDK</a> ทีแรกผมก็สงสัยว่า Microsoft <a href=\"https://en.wikipedia.org/wiki/Microsoft_Java_Virtual_Machine\">ใช้ Java ทำอะไร</a> ตัวเก่าก็ไม่เห็นจะดี แต่อันนี้เป็นซอร์สโค้ดเหมือนชาวบ้าน และ Microsoft เองก็ใช้ Java ใน Azure, LinkedIn และ Minecraft อยู่แล้ว ถ้ามันไม่ดีผมว่ากองทัพ Minecraft น่าจะพร้อมถล่ม</li>\n<li><a href=\"https://www.oracle.com/java/technologies/downloads/#java11\">Oracle JDK</a> รุ่นนี้ไม่ฟรีสำหรับการใช้งานใน production ต้องใช้รุ่น Java 17 เป็นต้นไปถึงจะฟรี</li>\n<li><a href=\"https://developers.redhat.com/products/openjdk/download\">Red Hat</a> ผู้ผลิตลินุกซ์อันดับต้นๆ แต่ก็มีรุ่น Windows พร้อมใช้พร้อมซื้อ commercial support ได้ด้วย แต่ยังไม่มีเวอร์ชั่นแมค</li>\n<li><a href=\"https://github.com/ojdkbuild/ojdkbuild\">ojdkbuild</a> เป็น Red Hat source code unofficial build ผมเข้าใจว่าน่าจะมีมาก่อนที่ Red Hat จะออกรุ่น Windows เอง</li>\n<li><a href=\"https://github.com/SAP/SapMachine/releases/tag/sapmachine-11.0.12\">SapMachine</a> เนื่องจาก SAP ก็ใช้ Java ใน product ก็เลยมี OpenJDK build ของตัวเองด้วย สามารถใช้ SAP support ได้ถ้าเป็นประเด็นที่เกี่ยวกับการใช้ใน SAP</li>\n<li>Debian/Ubuntu จะมีใน apt-get ซึ่งโครงการ build เอง ไม่ได้โหลดจากเจ้าไหนข้างบนนี้มา</li>\n</ul>\n<h2>Source code</h2>\n<p>โครงการ OpenJDK เป็นโครงการ open source แปลว่า คุณจะได้แต่ source code กลับบ้านไป เวลา Java มี improvement อะไรมันก็จะไปโผล่ใน source code นี้ แต่มันจะไม่มี exe/app/deb/rpm ให้ดาวน์โหลด</p>\n<p>ดังนั้นจะใช้ Java ยี่ห้อไหน มันก็ออกมาจาก source code เดียวกัน ก็ควรจะเหมือนกันเลือกอะไรก็ได้หรือเปล่า? ผมคิดว่า <a href=\"https://cr.openjdk.java.net/%7Eshade/scratch/update-releases-map.pdf\">OpenJDK Release Map</a> อธิบายไว้ค่อนข้างดีแต่มองภาพยากนิดหน่อย ก็สรุปได้ว่าแต่ละ vendor มี source code “on top” ของตัวเอง ซึ่ง vendor ส่วนมากที่เป็น open source จ๋าๆ จะพูดเหมือนกันหมดว่าเรา upstream first แปลว่าส่วนที่ทำเพิ่มแก้ไม่เยอะ ไม่ค่อยสำคัญ บางทีอาจจะเป็นโค้ดเดียวกันแต่ feature flag ต่างกันเฉยๆ ส่วน vendor ที่ไม่ใช่ open source ก็มีอยู่ 2 เจ้า ซึ่งชัดเจนมากว่ามี on top</p>\n<ul>\n<li>Oracle บอกว่า Java version เก่า ไม่เล่นด้วยปล่อย <a href=\"https://openjdk.java.net/projects/jdk-updates/\">community</a> ทำกันเองซึ่งก็คือแทบทุก vendor ในนี้ยกเว้น Oracle แต่จะสังเกตว่า Oracle ก็ออก JDK เวอร์ชั่นเก่าเหมือนกันซึ่งโค้ดในนั้นไม่อยู่ใน open source อยากได้ต้องซื้อ และฝั่ง open source เองก็ไม่แน่ใจว่า Oracle ใช้โค้ดจากที่ community แก้กันด้วยหรือเปล่า</li>\n<li>Azul Prime ซึ่งมีลูกเล่นเฉพาะตัว เช่น ReadyNow, LLVM-based JIT, Pauseless C4 GC</li>\n</ul>\n<p>เจ้าอื่นๆ ที่พอจะทราบว่าแก้อะไรบ้างเช่น</p>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/corretto/latest/corretto-8-ug/patches.html\">Amazon Corretto 8</a> มี patch พอสมควร ส่วนใน <a href=\"https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/patches.html\">11</a> ก็มีแก้เล็กน้อยให้รองรับ Amazon Linux 2 และ <a href=\"https://docs.aws.amazon.com/corretto/latest/corretto-17-ug/patches.html\">17</a> ยังไม่มีแก้</li>\n<li><a href=\"https://stackoverflow.com/questions/52202807/technical-difference-between-adoptopenjdk-and-red-hat-openjdk-for-windows\">Red Hat</a> ระบุความแตกต่างไว้พอสมควร หลักๆ คือเปิด Shenandoah GC (เป็น compile time feature flag ที่ vendor อื่นๆ จะเปิดหรือปิดก็ได้ เนื่องจากเป็นของ Red Hat), ใช้ library จาก Red Hat เองไม่ใช่ตัวที่ vendor มาใน source tree</li>\n<li><a href=\"https://docs.microsoft.com/en-us/java/openjdk/release-notes\">Microsoft</a> มีระบุ change ไว้เล็กน้อย หลักๆ คือเน้นรองรับ Windows/Mac on ARM</li>\n</ul>\n<p>ถ้าต้องการการันตีว่า ไม่เอา on top ขอ OpenJDK “แท้ๆ” สามารถดาวน์โหลดได้จาก <a href=\"https://adoptopenjdk.net/upstream.html\">AdoptOpenJDK Upstream build</a> (ขณะที่เขียนนี้ยังไม่ได้ย้ายไป Eclipse) หรือ <a href=\"https://jdk.java.net/\">jdk.java.net</a> ซึ่งมีเฉพาะรุ่นล่าสุดและรุ่นที่ยังไม่ออกเท่านั้น</p>\n<p>ปัญหาหนึ่งที่จะเจอกันทั้งหมดทุกเจ้าคือ security update ต่างๆ ซึ่งจำเป็นต้องให้ออกพร้อมๆ กัน โดยใน OpenJDK จะมีกลุ่ม Vulnerability Group ที่ vendor เจ้าต่างๆ สามารถเข้าถึง patch ลับสำหรับช่องโหว่ที่ยังไม่เปิดเผยสำหรับ test release ก่อนที่จะประกาศพร้อมกันตอนที่ patch เข้าไปใน OpenJDK หลัก (ส่วน security patch ที่ Oracle ทำเองจะ merge เข้าเลยไม่มีขั้นตอนนี้) ดังนั้นควรจะเลือก vendor ที่มีสิทธิ์ในกลุ่ม OpenJDK Vulnerability Group ด้วย</p>\n<p>เท่าที่ผมลอง cross reference จาก census ว่าทีมนี้ปัจจุบันทำงานที่ไหนบ้าง ก็จะมีคนจาก Amazon, SAP, Azul, Red Hat, BellSoft, SUSE, IBM, Canonical (Ubuntu) อยู่ในกลุ่มนี้ จากในแผนภาพระบุว่า AdoptOpenJDK และ Debian ไม่มีข้อมูล security update ล่วงหน้าจากกลุ่มนี้ (ข้อมูลจาก 2019)</p>\n<h2>TCK</h2>\n<p>ประเด็นถัดมาคือ Java <a href=\"https://en.wikipedia.org/wiki/Technology_Compatibility_Kit\">Technology Compatibility Kit</a> ซึ่งการันตีว่า JVM ที่ใช้ผ่านมาตรฐานรับรองว่าเป็น Java ได้ โดย TCK นี้ต้อง license มาจาก Oracle ไม่มีแจกฟรี</p>\n<p>เท่ามีข้อมูลตอนนี้ OpenJDK ทุกเจ้าที่มีใช้งานผ่านการตรวจสอบ TCK กันหมดแล้ว ที่จะไม่มีข้อมูลว่าผ่านหรือไม่ก็คือตัวที่อยู่ใน repo ของ Debian/Ubuntu และตัวที่ยังไม่ผ่านคือ ojdkbuild และ Microsoft</p>\n<h2>Packaging &amp; Build Matrix</h2>\n<p>ส่วนที่ผมคิดว่าแต่ละเจ้าจะแตกต่างกันเยอะคือ packaging เพราะถ้าโหลดจาก jdk.java.net จะได้ zip file เอาไปใช้งานลำบาก และมีแค่ Windows/Mac/Linux 64 bit, Mac/Linux ARM 64 bit เท่านั้น ดังนั้นควรจะพิจารณาด้วยว่าเจ้านั้นๆ รองรับ OS/Architecture ที่ใช้งานหรือไม่ และรองรับ package management ที่ใช้งาน (Docker/Chocolatey/Homebrew/Yum/APT/<a href=\"https://sdkman.io\">SDKMAN</a>)</p>\n<p>ส่วนมากแล้วเท่าที่เห็นแทบทุกเจ้ามี combination พื้นฐานกันเกือบครบ คือ Windows/Mac/Linux 64 bit, Docker ทั้ง Red Hat/Debian และ Chocolatey/Homebrew/Yum/APT/SDKMAN ก็จะมีเฉพาะ combination ยากๆ คือ</p>\n<ul>\n<li>Alpine Linux รองรับเฉพาะ Azul, BellSoft, Amazon</li>\n<li>Mac ARM รองรับเฉพาะ Azul, BellSoft, Microsoft</li>\n<li>32 bit OS ตอนนี้มีเฉพาะ Temurin (Windows only), Azul, BellSoft</li>\n</ul>\n<h2>Support</h2>\n<p>ถ้าจะซื้อ support แล้ว ผมยังคิดว่าซื้อกับ Oracle น่าจะดีที่สุดและช่วยสนับสนุนการพัฒนา Java ด้วย แต่ถ้าไม่ชอบ Oracle แล้ว vendor แทบทุกเจ้ามี commercial support ทั้งหมด</p>\n<ul>\n<li>Eclipse Temurin ซื้อได้จาก IBM หรือ Azul</li>\n<li>SapMachine ใช้ SAP support ได้เฉพาะเรื่องที่เกี่ยวกับการใช้งานใน SAP</li>\n<li>Microsoft support ใช้ได้เฉพาะการใช้งานใน Azure</li>\n<li>Amazon ใช้ AWS support เค้าไม่ได้จำกัดว่าต้องใช้ใน AWS เท่านั้นแต่ก็ไม่แนะนำให้ซื้อ AWS support ถ้าไม่ได้ใช้งาน AWS</li>\n<li>Azul กับ BellSoft เป็นบริษัท support Java โดยเฉพาะอยู่แล้ว</li>\n</ul>\n<p>นอกจากเรื่องคุณภาพของ support ที่ได้รับแล้ว ผมยังคิดว่า contribution ที่บริษัทที่เราซื้อส่งกลับให้ OpenJDK ควรจะเป็นปัจจัยที่นำมาคิดด้วย รูปหนึ่งที่พอจะตอบได้คือจำนวน issue ที่ปิดโดยแต่ละองค์กรใน JDK 16 release</p>\n<p><a href=\"https://blogs.oracle.com/java/post/the-arrival-of-java-16\"><img src=\"https://blog.whs.in.th/wp-content/uploads/2021/09/java_16_fixes_by_org-1024x532.png\" /></a></p>\n<p>ก็จะเห็นว่า top 10 ไม่รวม Oracle ได้แก่</p>\n<ol>\n<li>Red Hat</li>\n<li>SAP</li>\n<li>Tencent</li>\n<li>นักพัฒนาอิสระ</li>\n<li>ARM</li>\n<li>Amazon</li>\n<li>Bellsoft</li>\n<li>NTT Data</li>\n<li>Microsoft</li>\n<li>Azul</li>\n</ol>\n<p>ทั้งนี้ Azul ก็มีคอมเมนต์ว่าตรงนี้ก็เป็นแค่จำนวนแต่ไม่เน้นถึง impact หรืองาน maintenance เวอร์ชั่นเก่า</p>\n<h2>JRE</h2>\n<p>สมัยก่อน Java จะมี installer 2 ตัวคือ Java Development Kit (JDK) กับ Java Runtime Environment (JRE) ซึ่งตัวแรกจะมี compiler ด้วย แต่ตั้งแต่ Java 11 แล้ว Java แนะนำให้ใช้ jlink สร้าง custom runtime ที่มีเฉพาะส่วนที่แอพใช้งานเท่านั้นแล้วผูกไปพร้อมกับแอพเลย จึงไม่มี JRE ให้ดาวน์โหลดอีก</p>\n<p>แต่ปัจจุบันก็ยังมีบาง vendor ที่ยังมี JRE อยู่ ผมก็ไม่แน่ใจว่าเค้าเอามาจากไหน ก็ได้แก่ Temurin, Azul, BellSoft, Red Hat, SAP ที่จะไม่มีก็คือ Oracle, Amazon, Microsoft</p>\n<h2>JDK นอกกระแส</h2>\n<p>จริงๆ แล้ว list JDK ยังไม่หมดแค่นั้นแต่มีตัวอื่นๆ อีก ถ้าอยากลองของแปลกก็ใช้งานได้</p>\n<ul>\n<li><a href=\"https://confluence.jetbrains.com/display/JBR/JetBrains+Runtime\">Jetbrains Runtime</a> คือตัวที่ใช้รันโปรแกรมของ Jetbrains (เช่น IntelliJ) สามารถโหลดมาใช้เดี่ยวๆ ได้ มีจุดเด่นคือปรับแต่งให้ใช้งาน desktop application ได้ดี แต่ไม่ได้รับรอง TCK</li>\n<li><a href=\"http://dragonwell-jdk.io/\">Alibaba Dragonwell</a> ที่ Alibaba ใช้รันเว็บภายใน มีฟีเจอร์เฉพาะตัวคือ JWarmup ที่ใช้บันทึกข้อมูล JIT แล้วโหลดภายหลังเพื่อให้ได้ประสิทธิ์ภาพทันทีหลังจาก cold boot, Wisp2 เป็น coroutine สำหรับ Java thread ฟีเจอร์เหล่านี้เพิ่งตั้งไข่ใน OpenJDK คงอีกหลายปีอาจจะได้ใช้งาน แต่สามารถใช้ได้วันนี้เลยใน Dragonwell</li>\n<li><a href=\"https://github.com/Tencent/TencentKona-11\">Tencent Kona</a> เป็นตัวที่ Tencent ใช้ <a href=\"https://github.com/Tencent/TencentKona-11/wiki/User-Guide\">ซึ่งมีปรับจูน GC บ้าง</a> รองรับเฉพาะลินุกซ์เท่านั้น</li>\n<li><a href=\"https://gitee.com/openeuler/bishengjdk-11\">Huawei Bisheng JDK</a> ทาง Huawei บอกว่าเค้าใช้ตัวนี้ รองรับเฉพาะ Linux ARM เท่านั้น และมี<a href=\"https://gitee.com/openeuler/bishengjdk-11/wikis/Bisheng%20JDK%2011%20User%20Guide?sort_id=2879164\">การปรับแต่งหลายๆ จุดซึ่งมีเอกสารเฉพาะภาษาจีน</a> ผมคิดว่าน่าจะเน้นไปทาง ARM เนื่องจาก Huawei มี ARM CPU ของตัวเอง</li>\n</ul>\n<p>คนหนึ่งที่หายไปไม่ว่าจาก list นี้หรือด้านบนคือ Google ซึ่งผมคิดว่าเค้าไม่ว่างทำ <a href=\"https://en.wikipedia.org/wiki/Google_LLC_v._Oracle_America,_Inc.\">โดน Oracle ฟ้องอยู่</a> เท่าที่หาข้อมูลมา App Engine v2 ใช้ <a href=\"https://cloud.google.com/appengine/docs/standard/java11/runtime#the_runtimes_open_jdk_environment\">Ubuntu openjdk-11-jdk</a> ส่วน Bazel <a href=\"https://github.com/bazelbuild/rules_java/blob/385292fcfd244186e5e5811122ed32cf214a9024/java/repositories.bzl#L294\">rules_java</a> ใช้ Azul</p>\n<h2>ใช้อะไรดี</h2>\n<p>ถ้าอ่านทั้งหมดนี้แล้วตัดสินใจไม่ได้สักที ในความเห็นของผมคิดว่า</p>\n<h3>Server</h3>\n<p>พิจารณาตามลำดับนี้ครับ (นึกว่าเป็น flow chart ก็ได้)</p>\n<ol>\n<li>ถ้ามี license Red Hat อยู่แล้ว (ที่ไม่ใช่ CentOS หรือ rebuild อื่นๆ) ก็ yum มาลงได้เลย</li>\n<li>ถ้ามี support จาก AWS, SAP, Azure อยู่แล้วและ workload รันบนนั้น ก็ใช้ของยี่ห้อนั้นได้</li>\n<li>ถ้าใช้ Alpine Linux มีตัวเลือกคือ AWS กับ Azul</li>\n<li>ถ้าจำเป็นต้องซื้อ support คิดว่าซื้อจาก Oracle ได้ก็ดี (ผมไม่เคยซื้อกับ Oracle แนะนำไม่ได้)</li>\n<li>ถ้าไม่ชอบ Oracle ใช้ Azul</li>\n<li>ถ้าไม่ซื้อ support อยู่แล้ว ผมคิดว่า Azul ยัง release เร็วกว่า Temurin (ขณะที่เขียนนี้ Azul ออก Java 17 หลายวันแล้ว ในขณะที่ Temurin ยังไม่เสร็จ)</li>\n<li>ผมยังไม่แน่ใจ JDK สายโม คือ Azul Prime (เสียเงิน) และ Alibaba Dragonwell ว่าควรเอามาใช้ดีไหม</li>\n</ol>\n<p>ดังนั้นสำหรับงานบริษัทผมมี AWS support ก็ใช้ของ AWS ข้อจำกัดคือไม่มี Debian Docker ต้อง build เอง แต่ก็มี Dockerfile ตัวอย่างให้ (เค้าอยากเชียร์ให้ใช้ Amazon Linux)</p>\n<h3>Desktop</h3>\n<p>สำหรับบนคอมพิวเตอร์ส่วนตัว ผมคิดว่าสำหรับ developer บน server ใช้อะไรก็ใช้ให้ตรงกันน่าจะดีที่สุด สำหรับผมแล้วเป็น user มากกว่า ก็เลยเลือกใช้ดังนี้</p>\n<ul>\n<li>Windows ใช้ <a href=\"https://adoptium.net/\">Temurin</a> จาก <a href=\"https://community.chocolatey.org/packages/Temurinjre\">Chocolatey</a> เพราะอยากได้ JRE อย่างเดียว (บางเจ้ามีให้โหลด แต่ Chocolatey ไม่มีแพคเกจ) และคิดว่ามันเป็นตัวที่แพร่หลายสุดน่าจะอัพเดตบ่อย</li>\n<li>Linux ผมใช้<a href=\"https://archlinux.org/packages/extra/x86_64/jdk-openjdk/\">ตัวที่อยู่ใน repository</a> เลย คิดว่าถ้ามัน build มาโดยตรงน่าจะมีปัญหากับ OS น้อยที่สุด (ซึ่งบางทีก็อาจจะเป็นตัวเลือกที่ไม่ดี เช่น <a href=\"https://mail.openjdk.java.net/pipermail/jdk8u-dev/2019-May/009330.html\">Debian เคย build จาก master ไปแล้วเจอบั๊ก</a>)</li>\n<li>Mac เดี๋ยวนี้ไม่ได้ใช้แล้วเลยไม่มีคำแนะนำ</li>\n</ul>\n<h2>Matrix</h2>\n<p>ลงเป็นตารางให้สุดท้าย ถ้าสงสัยแนะนำให้อ่านข้างบนก่อนครับ</p>\n<p><img src=\"https://blog.whs.in.th/wp-content/uploads/2021/09/2021-09-21_01-16-1024x357.png\" /></p>\n<p>หมายเหตุ:</p>\n<ul>\n<li>ข้อมูลแพคเกจจาก Linux distro ต่างๆ ไม่ค่อยมี อาจจะลงไม่ถูกต้อง</li>\n<li>ข้อมูลนี้ผมสำรวจก่อน OpenJDK 17 ออกเล็กน้อย</li>\n<li>ข้อมูลนี้รวมเฉพาะ HotSpot runtime</li>\n</ul>","author":"whs","siteTitle":"Quietly Verbose","siteHash":"5f972a6fe70a917eb1b1aa165b3cb2be8a9465af33ab38bf05f34c55c0e40587","entryHash":"47bf8198fd5d33674e472875db9a8c181452b9fb50cef63a9b1222406374a47c","category":"Thai"}