{"title":"Using Manim For Making UI Animations","link":"https://smashingmagazine.com/2025/04/using-manim-making-ui-animations/","date":1744124400000,"content":"<p>Say you are learning to code for the first time, in Python, for example, which is a great starting point for getting into development. You are likely to come across some information like <strong>“a variable stores a value.”</strong> That sounds straightforward, but if you are a beginner just starting, then it can also be a bit confusing. <em>How</em> does a variable store or hold something? <em>What</em> happens when we assign a new value to it?</p>\n<p>To figure things out, you could read a bunch and watch tutorials, but sometimes, resources like these don’t help the concept fully click. That’s where animation helps. It has the power to take complex programming concepts and turn them into something visual, dynamic, and easy to grasp.</p>\n<p>Let’s break it down with an example: Say we have a box labeled X, first empty, then fill with a value 5, for this example, then update to 12, then 8, then 20, then 3. </p>\n<p><img src=\"https://files.smashing.media/articles/using-manim-making-ui-animations/1-create-account-replit.png\" /></p>\n<h3>2. Click “Create App”</h3>\n<p>You’ll see three options:</p>\n<ol>\n<li>“Create With Replit Agent”,</li>\n<li>“Choose a Template”,</li>\n<li>“Import from GitHub”.</li>\n</ol>\n<p><img src=\"https://files.smashing.media/articles/using-manim-making-ui-animations/2-replit-create-app.png\" /></p>\n<h3>3. Select “Choose a Template”</h3>\n<p>Then, search for Manim and create your app. At this point, you don’t have to do anything else because this sets up everything for you (including the <code>main.py</code> file, a media folder, and all of the required dependencies).</p>\n<p><img src=\"https://files.smashing.media/articles/using-manim-making-ui-animations/3-replit-choose-template.png\" /></p>\n<p><em>Voilà!</em> Now you can start coding your animations right away!</p>\nUsing Manim For Math, Code, And UI/UX Visuals\n<p>Okay, you know Manim. Whether it’s for math, programming, physics, or even prototyping UI concepts, it’s all about making complex concepts easier to grasp through animation. But how does that work in practice? Let’s go through some ways Manim makes things clearer and more engaging. </p>\n<h3>1. Math &amp; Geometry Visuals</h3>\n<p>Sometimes, math can feel a bit like a puzzle with missing pieces. But with Manim, numbers, shapes, and graphs move, making patterns and relationships easier to grasp. Take graphs, for example. When you tweak a parameter, Manim instantly updates the visualization so you can watch how a function changes over time. And that’s a game-changer for understanding concepts like <strong>derivatives</strong> or <strong>transformations</strong>. </p>\n<a href=\"https://files.smashing.media/articles/using-manim-making-ui-animations/4-manim-graphs.gif\"><img src=\"https://files.smashing.media/articles/using-manim-making-ui-animations/4-manim-graphs-800px.gif\" /></a>(<a href=\"https://files.smashing.media/articles/using-manim-making-ui-animations/4-manim-graphs.gif\">Large preview</a>)\n\n<p>Geometry concepts also come easier and become even more fun when you can see those shapes move, giving you a clear understanding of rotation or reflection. If you’re drawing a triangle with a compass and straightedge, for example, Manim can animate each step, making it easier to follow along and understand the idea.</p>\n<a href=\"https://files.smashing.media/articles/using-manim-making-ui-animations/5-manim-triangle.gif\"><img src=\"https://files.smashing.media/articles/using-manim-making-ui-animations/5-manim-triangle.gif\" /></a>\n\n<h3>2. Coding &amp; Algorithms</h3>\n<p>As you may already know, coding is a process that runs step by step, and Manim makes that easy to see. Whether you are working on the front end or the back end, logic flows in a way that’s not always clear from just reading or writing code. With Manim, you can, for example, watch how a sorting algorithm moves numbers around or simply how a loop runs. </p>\n<p>The same goes for data structures like linked lists, trees, and more. A binary tree makes more sense when you can see it grow and balance itself. Even complex algorithms like <a href=\"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\">Dijkstra’s shortest path</a> become clearer when you watch the path being calculated in real time, even if you may not have a background in math.</p>\n<h3>3. UI/UX Concepts &amp; Motion Design</h3>\n<p>Although Manim is not a UI/UX design tool, it can be useful for <strong>demonstrating designs</strong>. Static images can’t always show the full picture, but with Manim, before-and-after comparisons become more dynamic, and of course, it makes it easier to highlight why a new navigation menu, for example, is more intuitive or how a checkout flow reduces friction.</p>\n<p>Animated heatmaps can show click patterns over time, helping to spot trends more easily. Conversion funnels become clearer when each stage is animated, revealing exactly where users drop off.</p>\nLet’s Manim!\n<p>Well, that’s a lot we covered! By now, you should have Manim installed in whatever way works best for you. But before we jump into the coding part, let’s quickly go over Manim’s core building blocks. Manim’s animations are made of three main concepts:</p>\n<ul>\n<li>Mobjects,</li>\n<li>Animations,</li>\n<li>Scenes.</li>\n</ul>\n<h3>1. Mobjects (Mathematical Objects)</h3>\n<p>Everything you display in Manim is a Mobject (short for “mathematical object”). There are different types:</p>\n<ul>\n<li>Basic shapes like  <strong><code>Circle()</code></strong>, <strong><code>Rectangle()</code></strong>, and <strong><code>Arrow()</code></strong>,</li>\n<li>Text elements for adding labels, and</li>\n<li>Advanced structures like graphs, axes, and bar charts.</li>\n</ul>\n<p>A mobject is more like a blueprint, and it won’t show up unless you add it to a scene. Here’s a brief example: </p>\n<pre><code>from manim import *\n\nclass MobjectExample(Scene):\n  def construct(self):\n    circle = Circle()  # Create a circle\n    circle.set_fill(BLUE, opacity=0.5)  # Set color and transparency\n    self.add(circle)  # Add to the scene\n    self.wait(2)\n</code></pre>\n\n<p>A blue circle will appear for about two seconds when you run this:</p>\n<h3>2. Animations</h3>\n<p>Animations in Manim, on the other hand, are all about changing these objects over time. Rather than just displaying a sharp edge, we can make it move, rotate, fade, or transform into something else. Really, we do have this much control through the <strong><code>Animation</code></strong> <code>class</code>. </p>\n<p>If we use the same circle example from earlier, we can add animations to see how it works and compare the visual differences: </p>\n<pre><code>from manim import *\n\nclass AnimationExample(Scene):\n  def construct(self):\n    circle = Circle()\n    circle.set_fill(BLUE, opacity=0.5) \n\n    self.play(FadeIn(circle))\n    self.play(circle.animate.shift(RIGHT * 2))\n    self.play(circle.animate.scale(1.5)) \n    self.play(Rotate(circle, angle=PI/4))  \n    self.wait(2)\n</code></pre>\n\n<p>Here, we are making a move, scaling up, and rotating. The <code>play()</code> method is what makes animations run. For example, <code>FadeIn(circle)</code> makes the circle gradually appear, and <code>circle.animate.shift(RIGHT * 2)</code> moves it two units to the right. If you want to slow things down, you can add <code>run_time</code> to control the duration, like the following: </p>\n<pre><code>self.play(circle.animate.scale(2), run_time=3),\n</code></pre>\n\n<p>This makes the scaling take three more seconds instead of the default amount of time:</p>\n<h3>3. Scenes</h3>\n<p>Scenes are what hold everything together. A scene defines what appears, how it animates, and in what order. Every Manim script has a class that is inherited from a <code>Scene</code>, and it contains a <code>construct()</code> method. This is where we write our animation logic. For example,</p>\n<pre><code>class SimpleScene(Scene):\n  def construct(self):\n    text = Text(\"Hello, Manim!\")\n    self.play(Write(text))\n    self.wait(2)\n</code></pre>\n\n<p>This creates a simple text animation where the words appear as if being written.</p>\nBringing Manim To Design\n<p>As we discussed earlier, Manim is a great tool for UI/UX designers and front-end developers to <strong>visualize user interactions</strong> or to <strong>explain UI concepts</strong>. Think about how users navigate through a website or an app: they click buttons, move between pages, and interact with elements. With Manim, we can animate these interactions and see them play out step by step.</p>\n<p>With this in mind, let’s create a simple flow where a user clicks a button, leading to a new page: </p>\n<div>\n<pre><code>from manim import *\n\nclass UIInteraction(Scene):\n  def construct(self):\n    # Create a homepage screen\n    homepage = Rectangle(width=6, height=3, color=BLUE)\n    homepage_label = Text(\"Home Page\").scale(0.8)\n    homepage_group = VGroup(homepage, homepage_label)\n\n    # Create a button\n    button = RoundedRectangle(width=1.5, height=0.6, color=RED).shift(DOWN * 1)\n    button_label = Text(\"Click Me\").scale(0.5).move_to(button)\n    button_group = VGroup(button, button_label)\n\n    # Add homepage and button\n    self.add(homepage_group, button_group)\n\n    # Simulating a button click\n    self.play(button.animate.set_fill(RED, opacity=0.5))  # Button press effect\n    self.wait(0.5)  # Pause to simulate user interaction\n\n    # Create a new page (simulating navigation)\n    new_page = Rectangle(width=6, height=3, color=GREEN)\n    new_page_label = Text(\"New Page\").scale(0.8)\n    new_page_group = VGroup(new_page, new_page_label)\n\n    # Animate transition to new page\n    self.play(FadeOut(homepage_group, shift=UP),  # Move old page up\n      FadeOut(button_group, shift=UP),  # Move button up\n      FadeIn(new_page_group, shift=DOWN))  # Bring new page from top\n    self.wait(2)\n</code></pre>\n</div>\n\n<p>The code creates a simple UI animation for a homepage displaying a button. When the button is clicked, it fades slightly to simulate pressing, and then the homepage and button fade out while a new page fades in, creating a transition effect. </p>\n<p>If you think of it, scrolling is one of the most natural interactions in modern web and app design. Whether moving between sections on a landing page or smoothly revealing content, well-designed scroll animations make the experience feel fluid. Let me show you: </p>\n<div>\n<pre><code>from manim import *\n\nclass ScrollEffect(Scene):\n  def construct(self):\n    # Create three sections to simulate a webpage\n    section1 = Rectangle(width=6, height=3, color=BLUE).shift(UP*3)\n    section2 = Rectangle(width=6, height=3, color=GREEN)\n    section3 = Rectangle(width=6, height=3, color=RED).shift(DOWN*3)\n\n    # Add text to each section\n    text1 = Text(\"Welcome\", font_size=32).move_to(section1)\n    text2 = Text(\"About Us\", font_size=32).move_to(section2)\n    text3 = Text(\"Contact\", font_size=32).move_to(section3)\n\n    self.add(section1, section2, section3, text1, text2, text3)\n    self.wait(1)\n\n    # Simulate scrolling down\n    self.play(\n      section1.animate.shift(DOWN*6),\n      section2.animate.shift(DOWN*6),\n      section3.animate.shift(DOWN*6),\n      text1.animate.shift(DOWN*6),\n      text2.animate.shift(DOWN*6),\n      text3.animate.shift(DOWN*6),\n      run_time=3\n    )\n    self.wait(1)\n</code></pre>\n</div>\n\n<p>This animation shows a scrolling effect by moving sections of a webpage upward, simulating how content shifts as a user scrolls. It is a simple way to visualize transitions that make the UI feel smooth and engaging.</p>\nWrapping Up\n<p>Manim makes it easier to show how users interact with a design. You can animate navigations, interactions, and user behaviors to understand better how design works in action. Is there more to explore? Definitely! You can take these simple examples and build on them by adding more complex features.</p>\n<p>But what I hope you take away from all of this is that <strong>subtle animations can help communicate and clarify concepts</strong> and that Manim is a library for making those sorts of animations. Traditionally, it’s used to help explain mathematical and scientific concepts, but you can see just how useful it can be to working in front-end development, particularly when it comes to highlighting and visualizing UI changes.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"d0a665875032f2361b6e656a3cbc9f8960b04d1de1481fbe628d2757e62ee30f","category":"Tech"}