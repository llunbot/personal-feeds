{"title":"ทำการบันทึกการแบ่งปันเรื่องการพัฒนา RESTful API","link":"https://www.somkiat.cc/sharing-restful-api-development/","date":1745725484000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2025/04/rest-api-01-150x150.jpg\" alt=\"\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2025/04/rest-api-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2025/04/rest-api-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/04/rest-api-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/04/rest-api-01-1024x683.jpg\" alt=\"\" width=\"644\" height=\"429\" /></a></figure>\n\n\n\n<p>หลังจากแบ่งปันความรู้เรื่องการพัฒนา RESTful API ด้วย<br />Spring Boot, NodeJS และ Go ใน 3 วันไป<br />จึงทำการสรุปแนวคิด แนวปฏิบัติ<br />ที่ไม่ว่าจะพัฒนาด้วยภาษา หรือ framework ใด ๆ <br />ก็สามารถใช้งานร่วมกันได้<br />มาดูกันว่ามีอะไรบ้าง ?</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เรื่องแรกการออกแบบตามแนวทางของ REST</strong></p>\n\n\n\n<p>น่าจะเป็นเรื่องที่ยากที่สุดแล้ว<br />ควรต้องออกแบบเป็น resource-centric endpoint มากกว่า<br />แต่ยังคงมีแนวทางที่ใช้กันมาอย่างยาวนาน<br />เช่นรูปแบบในการตั้งชื่อ endpoint หรือ URI ต่าง ๆ  เช่น </p>\n\n\n\n<ul>\n<li>POST inquirySomething สำหรับดึงข้อมูล</li>\n\n\n\n<li>POST createSomething สำหรับสร้างข้อมูล</li>\n</ul>\n\n\n\n<p>ไม่เป็นไร !!<br />แต่ส่งที่ให้ความสนใจมากกว่าคือ</p>\n\n\n\n<ul>\n<li>การออกแบบควรออกแบบให้ตรงกับความต้องการของผู้ใช้งาน มากกว่าการ reuse</li>\n\n\n\n<li>จัดการ response code ให้ดี แต่ส่วนใหญ่จะเป็น 200 only เพราะว่า ทาง operation หรือ devops บอกมาอีกที</li>\n\n\n\n<li>เรื่อง request/response ให้เหมือนกันทุก ๆ  endpoint ก็แล้วกัน (มีมาตรฐานเดียวกัน ไม่ใช่แล้วแต่อารมณ์)</li>\n</ul>\n\n\n\n<p>สิ่งที่แนะนำเพิ่มเติมคือเรื่องของเอกสาร เช่น Swagger หรือ OpenAPI นั้น<br />ควรใช้แนวคิด <strong>design/api first</strong><br />มากกว่าให้ทำการ generate document หลังจากที่ code เสร็จแล้ว<br />ประเด็นคือ สิ่งที่ design และ สิ่งที่พัฒนามา มันตรงกันไหม ?<br />แยกเอกสารกันอีก !!<br />ลำบากไปไหม ?</p>\n\n\n\n<p><strong>เรื่องที่สอง Security-first ไว้ก่อน</strong></p>\n\n\n\n<p>เรื่องของความปลอดภัยของ API สำคัญมาก ๆ<br />แนะนำให้ศึกษาเรื่อง <strong><a href=\"https://owasp.org/API-Security/\" target=\"_blank\">OWASP API Security Top 10</a></strong> ก่อน<br />เพื่อให้ทีมมีความรู้ความเข้าใจเกี่ยวกับปัญหา หรือ รูปแบบการโจมตี<br />พร้อมกับสรุปแนวทางในการออกแบบ พัฒนา และ ทดสอบ ต่อไป<br />ไม่ว่าจะใช้ token-based ด้วย JWT (JSON Web Token)<br />หรือจะนำ OAuth มาใช้งานก็ว่าไป<br />ยังไม่พอเรื่องของการใช้งาน Rate limit และป้องกันการ DDOS ก็ต้องสนใจด้วยเสมอ</p>\n\n\n\n<p><strong>เรื่องที่สาม การจัดการ  error ต่าง ๆ (Error handling)</strong></p>\n\n\n\n<p>อย่างแรกเรื่องของการสรุป error code, error format ที่ชัดเจน<br />เพื่อให้ทีมมีความเข้าใจร่วมกัน<br />คิดถึงคนใช้งานด้วย ว่า error เหล่านั้นมันเหมาะสมหรือไม่<br />อีกอย่างระวังการแสดง error ที่ชัดเจนเกินไปสำหรับ public API<br />มิเช่นนั้นจะมีปัญหาเรื่องของ security<br />แต่ถ้าเป็น private API ก็จัดได้เต็มที่</p>\n\n\n\n<p><strong>เรื่องที่สี่ การทดสอบ</strong></p>\n\n\n\n<p>เริ่มจากการ design test case ต่าง ๆ  ให้ดีควรต้องทำตั้งแต่การ design API แล้ว<br />เพื่อให้เข้าใจว่าแต่ละ API นั้น จะต้องส่งมอบอย่างไรบ้าง<br />ทั้ง success และ failure case<br />และต้องสำพันธ์กับ feature ที่ส่งมอบด้วยนะ</p>\n\n\n\n<p>การทดสอบมีทั้งทดสอบทั้งมุมมองจากคนภายนอกและภายใน เช่น</p>\n\n\n\n<ul>\n<li>ภายนอก (External หรือ Blackbox) จะสนใจเพียง request และ response เท่านั้น ว่าทำตามที่คาดหวังหรือไม่</li>\n\n\n\n<li>ภายใน (Internal หรือ Whitebox) จะให้ความสนใจกับ code ที่พัฒนาขึ้นมาว่าทำงานตามที่คาดหวังหรือไม่</li>\n</ul>\n\n\n\n<p>ซึ่งควรต้องทำทั้งคู่ เพื่อเสริมสร้างความมั่นใจ<br />ไม่ว่าจะเป็น E2E, Integrate, Component, Contract และ Unit testing<br />ทุก ๆ  ภาษา และ framework มีให้ใช้งานอยู่แล้ว<br />ขาดอย่างเดียวคือ คนนำไปใช้งานนั่นเอง<br />อย่าบอกว่า ไม่มีเวลาละ (แต่ดันมีเวลาแก้ bug)</p>\n\n\n\n<p><strong>เรื่องที่ห้า คือ observability ของ RESTful API</strong></p>\n\n\n\n<p>เป็นการดูพฤติกรรมการทำงานของ API ว่าทำงานตามที่เราคาดหวังหรือไม่<br />หรือถ้ามีปัญหาเกิดขึ้นมา <br />ระบบ observability นั้นช่วยชี้จุดเกิดปัญหา พร้อมรายละเอีดยที่ชัดเจนหรือไม่</p>\n\n\n\n<p>โดยประกอบไปด้วย 5 ตัวหลักคือ</p>\n\n\n\n<ul>\n<li>Exception tracking เมื่อมีปัญหาขึ้นมาตรงไหน แจ้งทันที</li>\n\n\n\n<li>Application metric ทำการจัดเก็บข้อมูลตัวเลขต่าง ๆ  ทั้งการใช้งานจากผู้ใช้งานและ การใช้งาน resource ต่าง ๆ  ของต่ละ endpoint</li>\n\n\n\n<li>Distributed tracing ก็ว่าในระบบงานของเรามีการเรียกในแต่ละ hop อย่างไรบ้าง หรือ code เรียกใช้งานแต่ละ function อย่างไรบ้าง</li>\n\n\n\n<li>Centralized log ทำการจัดเก็บ log ของการทำงานในระบบ โดยควรเป็น structured log หรือ มีโครงสร้างและรูปแบบที่เป็นมาตรฐาน ไม่ใช่มาตรฐานของใครของมัน อีกอย่าง log เรามักจะดูเมื่อเกิดปัญหา ดังนั้นก็ควรแยก log ที่มีปัญหาออกมา น่าจะดีกว่าไหม !!</li>\n\n\n\n<li>สุดท้ายคือระบบ Alert นำข้อมูลจาก 3 ตัวบน เอามาวิเคราะห์หา pattern เพื่อแจ้งต่อไป</li>\n</ul>\n\n\n\n<p><strong>เรื่องที่หก คือ ส่วนเพิ่มเติม</strong></p>\n\n\n\n<ul>\n<li>เรื่องของการทำ caching</li>\n\n\n\n<li>เรื่องของการทำ profiling และ benchmark</li>\n\n\n\n<li>เรื่องของการนำ Asynchronous communication/process เข้ามาช่วย</li>\n\n\n\n<li>เรื่องของการทำ CI/CD ของแต่ละ API</li>\n</ul>\n\n\n\n<p>ดังนั้นลองดูกันว่า ในการพัฒนา RESTful API ของเรานั้น<br />ทำกันอย่างไรบ้าง ?</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"771aca51589bcc309f091acd1548423bcbe50e68a26373a6673a9e15a3f5f7db","category":"Thai"}