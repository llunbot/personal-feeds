{"title":"สรุปเรื่องการ Scale ระบบที่พัฒนาด้วย Rails และ PostgreSQL database ของ Microsoft","link":"https://www.somkiat.cc/note-scale-rails-and-postgresql-database/","date":1725595684000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/09/scaling-postgres-01-150x150.jpg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/09/scaling-postgres-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2024/09/scaling-postgres-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/09/scaling-postgres-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/09/scaling-postgres-01-1024x604.jpg\" width=\"634\" height=\"374\" /></a></figure>\n\n\n\n<p>นั่งดูการสัมภาษณ์เรื่อง <a href=\"https://stepchange.work/blog/scaling-rails-postgres-to-millions-of-users-at-microsoft-lessons-takeaways\" target=\"_blank\">Scaling Rails &amp; Postgres to Millions of Users at Microsoft: Lessons &amp; Takeaways</a><br />ซึ่งเป็นผู้เขียนหนังสือ <em><a href=\"https://pragprog.com/titles/aapsql/high-performance-postgresql-for-rails/\" target=\"_blank\">High Performance PostgreSQL for Rails</a></em></p>\n\n\n\n<p>เล่าถึงประสบการณ์ในการพัฒนาระบบงานด้วย Rails<br />และการ scale PostgreSQL database <br />เพื่อรองรับการใช้งานของผู้ใช้งานจำนวนมาก<br />ทั้งการ monitoring และระบบที่ซับซ้อน<br />มาดูว่ามีเรื่องอะไรที่น่าสนใจบ้าง ?</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>ในการพัฒนาระบบงาน monolithic ด้วย Rails นั้น</strong></p>\n\n\n\n<p>ช่วยให้นักพัฒนาไม่ต้องไปสนใจการจัดการ database มากนัก<br />เพราะว่าใช้งานผ่าน Active Record ไปเลย<br />ทำให้การพัฒนามีความ productive สูงมาก<br />แต่เมื่อมีคนใช้งานมากขึ้น เกิด concurrency มากขึ้น มีการเปลี่ยนแปลงมากยิ่งขึ้น<br />จึงทำให้เราต้องเข้ามาทำความเข้าใจมากยิ่งขึ้น<br />ว่า Active Record มันทำงานอย่างไร</p>\n\n\n\n<p>จากเดิมรูปแบบของทีมไม่ได้แบ่งเป็นตำแหน่งที่ชัดเจน<br />ทุกคนช่วยดูแลทั้งหมด<br />เมื่อเกิดปัญหาที่ database ขึ้นมา<br />ทีม developer จำเป็นต้องเข้ามาจัดการและ tuning database<br />ว่า code ที่ตัวเองเขียนนั่น <strong><em>สร้างปัญหาอะไร และจะแก้อย่างไร</em></strong> <strong>?</strong></p>\n\n\n\n<p><strong>แนวทางในการจัดการเรื่อง Architecture และ Database หลัก ๆ เป็นดังนี้</strong></p>\n\n\n\n<ul>\n<li>เริ่มดูว่าระบบงานมีอัตราการ read และ write เป็นอย่างไร เพื่อแบ่งกลุ่มของงาน เช่น content, comment และ like เป็นต้น</li>\n\n\n\n<li>PostgreSQL มีข้อดีด้วยการการันตีความถูกต้อง เมื่อเกิด concurrency แต่ก็แลกมาด้วย overhead ด้าน performance ที่สูงเช่นกัน</li>\n\n\n\n<li>สร้างความเข้าใจให้ application developer เข้าใจเกี่ยวกับ database performance ว่าสิ่งที่สร้างขึ้นมานั้น ส่งผลต่อการทำงานของ database อย่างไร เพื่อจะไม่เลือกแนวทางที่แย่เข้ามาในระบบงาน</li>\n\n\n\n<li>เมื่อมี traffic เข้ามาเยอะ ๆ จะเริ่มเกิดการแบ่ง traffic ออกตามรูปแบบการใช้งาน เช่น แยก read และ write ไปตามแต่ละ instance ไปเลย เพื่อทำการ optimize การทำงานง่ายและเหมาะสมขึ้น</li>\n\n\n\n<li>จึงทำให้ต้องมาสนใจเรื่อง replication มากขึ้น</li>\n\n\n\n<li>แต่เมื่อข้อมูลใน table หนึ่ง ๆ ใหญ่เกินไป ก็ต้องมาเรียนรู้และใช้งานการทำ sharding data ดังนั้นเรื่องของ monolithic architecture ก็ต้องพึงระวังด้วยว่าได้เวลาปรับปรุงแล้วหรือยัง</li>\n\n\n\n<li>โดยความรู้ต่าง ๆ เหล่านี้ต้อง share ความรู้ให้ทั้งทีม ไม่ได้ผูกติดกับคนใดหนึ่งเท่านั้น</li>\n\n\n\n<li>การจัดการ connection pool, monitoring สำคัญมาก ๆ เพื่อให้รู็ถึงปัญหาต่าง ๆ อย่างรวดเร็ว เพื่อให้แก้ไขได้เร็ว</li>\n\n\n\n<li>จะใช้อะไรก็ต้องเข้าใจมันด้วย เช่น ใช้งาน PostgreSQL ก็ต้องเข้าใจ operation model ของมันด้วย เพื่อช่วยลดข้อผิดพลาดในการใช้งาน</li>\n</ul>\n\n\n\n<p>ลองนำไปประยุกต์ใช้งานกันดูครับ</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"f9808373566f6f001868bb9d5ee716c088008f3dbf6f176f39fb6a36495b51e4","category":"Thai"}