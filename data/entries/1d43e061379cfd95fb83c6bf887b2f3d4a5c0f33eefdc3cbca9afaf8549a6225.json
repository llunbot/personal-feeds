{"title":"A High-Level Overview Of Large Language Model Concepts, Use Cases, And Tools","link":"https://smashingmagazine.com/2023/10/overview-large-language-model-concepts-use-cases-tools/","date":1696942800000,"content":"<p>Even though a simple online search turns up countless tutorials on using Artificial Intelligence (AI) for everything from generative art to making technical documentation easier to use, there’s still plenty of mystery around it. What goes inside an AI-powered tool like ChatGPT? How does Notion’s AI feature know how to summarize an article for me on the fly? Or how are a bunch of sites suddenly popping up that can aggregate news and auto-publish a slew of “new” articles from it?</p>\n<p>It all can seem like a black box of mysterious, arcane technology that requires an advanced computer science degree to understand. What I want to show you, though, is how we can peek inside that box and see how everything is wired up.</p>\n<p>Specifically, this article is about <strong>large language models (LLMs)</strong> and how they “imbue” AI-powered tools with intelligence for answering queries in diverse contexts. I have previously written tutorials on how to use an LLM to <a href=\"https://www.smashingmagazine.com/2023/09/generating-real-time-audio-sentiment-analysis-ai/\">transcribe and evaluate the expressed sentiment of audio files</a>. But I want to take a step back and look at another way around it that better demonstrates — and visualizes — how data flows through an AI-powered tool. </p>\n<p>We will discuss LLM use cases, look at several new tools that abstract the process of modeling AI with LLM with visual workflows, and get our hands on one of them to see how it all works.</p>\nLarge Language Models Overview\n<p>Forgoing technical terms, LLMs are vast sets of text data. When we integrate an LLM into an AI system, we enable the system to leverage the language knowledge and capabilities developed by the LLM through its own training. You might think of it as dumping a lifetime of knowledge into an empty brain, assigning that brain to a job, and putting it to work. </p>\n<p>“Knowledge” is a convoluted term as it can be subjective and qualitative. We sometimes describe people as “book smart” or “street smart,” and they are both types of knowledge that are useful in different contexts. This is what artificial “intelligence” is created upon. AI is fed with data, and that is what it uses to frame its understanding of the world, whether it is text data for “speaking” back to us or visual data for generating “art” on demand.</p>\n<h3>Use Cases</h3>\n<p>As you may imagine (or have already experienced), the use cases of LLMs in AI are many and along a wide spectrum. And we’re only in the early days of figuring out what to make with LLMs and how to use them in our work. A few of the most common use cases include the following.</p>\n<ul>\n<li><strong>Chatbot</strong><br /><a href=\"https://www.wired.com/story/how-chatgpt-works-large-language-model/\">LLMs play a crucial role in building chatbots</a> for customer support, troubleshooting, and interactions, thereby ensuring smooth communications with users and delivering valuable assistance. <a href=\"https://www.salesforce.com/products/customer-service-chatbot/\">Salesforce is a good example</a> of a company offering this sort of service.</li>\n<li><strong>Sentiment Analysis</strong><br /><a href=\"https://www.smashingmagazine.com/2023/06/ai-detect-sentiment-audio-files/\">LLMs can analyze text for emotions.</a> Organizations use this to collect data, summarize feedback, and quickly identify areas for improvement. <a href=\"https://www.grammarly.com/tone\">Grammarly’s “tone detector” is one such example</a>, where AI is used to evaluate sentiment conveyed in content.</li>\n<li><strong>Content Moderation</strong><br />Content moderation is an important aspect of social media platforms, and LLMs come in handy. They can spot and remove offensive content, including hate speech, harassment, or inappropriate photos and videos, which is exactly what <a href=\"https://blog.hubspot.com/marketing/ai-content-moderation\">Hubspot’s AI-powered content moderation feature</a> does.</li>\n<li><strong>Translation</strong><br />Thanks to impressive advancements in language models, translation has become highly accurate. One noteworthy example is Meta AI’s latest model, <a href=\"https://ai.meta.com/blog/seamless-m4t/?utm_source=twitter&amp;utm_medium=organic_social&amp;utm_campaign=seamless&amp;utm_content=video\">SeamlessM4T</a>, which represents a big step forward in speech-to-speech and speech-to-text technology.</li>\n<li><strong>Email Filters</strong><br />LLMs can be used to automatically detect and block unwanted spam messages, keeping your inbox clean. When trained on large datasets of known spam emails, the models learn to identify suspicious links, phrases, and sender details. This allows them to distinguish legitimate messages from those trying to scam users or market illegal or fraudulent goods and services. Google has offered <a href=\"https://www.theverge.com/2019/2/6/18213453/gmail-tensorflow-machine-learning-spam-100-million\">AI-based spam protection</a> since 2019.</li>\n<li><strong>Writing Assistance</strong><br />Grammarly is the ultimate example of an AI-powered service that uses LLM to “learn” how you write in order to make writing suggestions. But this extends to other services as well, including <a href=\"https://blog.google/products/gmail/save-time-with-smart-reply-in-gmail/\">Gmail’s “Smart Reply” feature</a>. The same thing is true of Notion’s AI feature, which is capable of <a href=\"https://www.notion.so/help/guides/notion-ai-for-docs\">summarizing a page of content or meeting notes</a>. Hemmingway’s app recently shipped a <a href=\"https://4.hemingwayapp.com/beta\">beta AI integration that corrects writing on the spot</a>.</li>\n<li><strong>Code and Development</strong><br />This is the one that has many developers worried about AI coming after their jobs. It hit the commercial mainstream with <a href=\"https://github.com/features/copilot\">GitHub Copilot</a>, a service that performs automatic code completion. Same with <a href=\"https://aws.amazon.com/codewhisperer/\">Amazon’s CodeWhisperer</a>. Then again, AI can be used to help sharpen development skills, which is the case of <a href=\"https://developer.mozilla.org/en-US/blog/introducing-ai-help/\">MDN’s AI Help feature</a>.</li>\n</ul>\n<p>Again, these are still the early days of LLM. We’re already beginning to see language models integrated into our lives, whether it’s in our writing, email, or customer service, among many other services that seem to pop up every week. This is an evolving space.</p>\nTypes Of Models\n<p>There are all kinds of AI models tailored for different applications. You can scroll through <a href=\"https://sapling.ai/llm/index\">Sapling’s large list</a> of the most prominent commercial and open-source LLMs to get an idea of all the diverse models that are available and what they are used for. Each model is the context in which AI views the world.</p>\n<p>Let’s look at some real-world examples of how LLMs are used for different use cases.</p>\n<p><strong>Natural Conversation</strong><br />Chatbots need to master the art of conversation. Models like <a href=\"https://www.anthropic.com/index/claude-2\">Anthropic’s Claude</a> are trained on massive collections of conversational data to chat naturally on any topic. As a developer, you can tap into Claude’s conversational skills through an API to create interactive assistants.</p>\n<p><strong>Emotions</strong><br />Developers can leverage powerful pre-trained models like <a href=\"https://falconllm.tii.ae/\">Falcon</a> for sentiment analysis. By fine-tuning Falcon on datasets with emotional labels, it can learn to accurately detect the sentiment in any text provided.</p>\n<p><strong>Translation</strong><br />Meta AI released <a href=\"https://ai.meta.com/blog/seamless-m4t/?utm_source=twitter&amp;utm_medium=organic_social&amp;utm_campaign=seamless&amp;utm_content=video\">SeamlessM4T</a>, an LLM trained on huge translated speech and text datasets. This multilingual model is groundbreaking because it translates speech from one language into another without an intermediary step between input and output. In other words, SeamlessM4T enables real-time voice conversations across languages.</p>\n<p><strong>Content Moderation</strong><br />As a developer, you can integrate powerful moderation capabilities using <a href=\"https://platform.openai.com/docs/guides/moderation/overview\">OpenAI’s API</a>, which includes a LLM trained thoroughly on flagging toxic content for the purpose of community moderation.</p>\n<p><strong>Spam Filtering</strong><br />Some LLMs are <a href=\"https://huggingface.co/models?pipeline_tag=text-classification&amp;sort=trending\">used to develop AI programs capable of text classification tasks</a>, such as spotting spam emails. As an email user, the simple act of flagging certain messages as spam further informs AI about what constitutes an unwanted email. After seeing plenty of examples, AI is capable of establishing patterns that allow it to block spam before it hits the inbox.</p>\nNot All Language Models Are Large\n<p>While we’re on the topic, it’s worth mentioning that not all language models are “large.” There are plenty of models with smaller sets of data that may not go as deep as ChatGPT 4 or 5 but are well-suited for personal or niche applications.</p>\n<p>For example, check out <a href=\"https://ask.lukew.com/chat\">the chat feature that Luke Wrobleski added to his site</a>. He’s using a smaller language model, so the app at least knows how to form sentences, but is primarily trained on <a href=\"https://www.lukew.com/ff/\">Luke’s archive of blog posts</a>. Typing a prompt into the chat returns responses that read very much like Luke’s writings. Better yet, Luke’s virtual persona will admit when a topic is outside of the scope of its knowledge. An LLM would provide the assistant with too much general information and would likely try to answer any question, regardless of scope. Members from the University of Edinburgh and the Allen Institute for AI published a paper in January 2023 (<a href=\"https://arxiv.org/pdf/2301.12726.pdf\">PDF</a>) that advocates the use of <em>specialized</em> language models for the purpose of more narrowly targeted tasks.</p>\nLow-Code Tools For LLM Development\n<p>So far, we’ve covered what an LLM is, common examples of how it can be used, and how different models influence the AI tools that integrate them. Let’s discuss that last bit about integration.</p>\n<p>Many technologies require a steep learning curve. That’s especially true with emerging tools that might be introducing you to new technical concepts, as I would argue is the case with AI in general. While AI is not a new term and has been studied and developed over decades in various forms, its entrance to the mainstream is certainly new and sparks the recent buzz about it. There’s been plenty of recent buzz in the front-end development community, and many of us are scrambling to wrap our minds around it.</p>\n<p>Thankfully, new resources can help abstract all of this for us. They can power an AI project you might be working on, but more importantly, they are useful for learning the concepts of LLM by removing advanced technical barriers. You might think of them as “low” and “no” code tools, like <a href=\"https://wordpress.com/go/website-building/the-new-wordpress-way-modern-and-no-code/\">WordPress.com vs. self-hosted WordPress</a> or a visual <a href=\"https://www.smashingmagazine.com/2023/06/codux-react-visual-editor-improves-developer-experience/\">React editor</a> that is integrated with your IDE.</p>\n<p>Low-code platforms make it easier to leverage large language models without needing to handle all the coding and infrastructure yourself. Here are some top options:</p>\n<h3>Chainlit</h3>\n<p><a href=\"https://docs.chainlit.io/overview\">Chainlit</a> is an open-source Python package that is capable of building a ChatGPT-style interface using a visual editor.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/stack-llm.png\" /></p>\n<p><a href=\"https://llmstack.ai/\">LLMStack</a> is another low-code platform for building AI apps and chatbots by leveraging large language models. Multiple models can be chained together into “pipelines” for channeling data. LLMStack supports standalone app development but also provides hosting that can be used to <a href=\"https://llmstack.ai/docs/apps/sharing\">integrate an app into sites and products via API</a> or connected to platforms like Slack or Discord.</p>\n<p>LLMStack is also what powers <a href=\"https://trypromptly.com\">Promptly</a>, a cloud version of the app with freemium subscription pricing that includes a free tier.</p>\n<h3>FlowiseAI</h3>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/stack-ai-screenshot.png\" /></p>\n<p><a href=\"https://www.stack-ai.com\">Stack AI</a> is another no-code offering for developing AI apps integrated with LLMs. It is much like FlowiseAI, particularly the drag-and-drop interface that visualizes connections between apps and APIs. One thing I particularly like about Stack AI is how it incorporates “data loaders” to fetch data from other platforms, like Slack or a Notion database.</p>\n<p>I also like that Stack AI provides a wider range of LLM offerings. That said, <a href=\"https://huggingface.co/models\">it will cost you</a>. While Stack AI offers a free pricing tier, it is restricted to a single project with only 100 runs per month. Bumping up to the first paid tier will set you back $199 per month, which I suppose is used toward the costs of accessing a wider range of LLM sources. For example, Flowise AI works with any LLM in the Hugging Face community. So does Stack AI, but it also gives you access to commercial LLM offerings, like Anthropic’s <a href=\"https://www.anthropic.com/product\">Claude models</a> and Google’s <a href=\"https://developers.generativeai.google\">PaLM</a>, as well as additional open-source offerings from <a href=\"https://replicate.com\">Replicate</a>.</p>\n<h3>Voiceflow</h3>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-full-workflow.png\" /></p>\nInstall FlowiseAI\n<p>First things first, we need to get FlowiseAI up and running. FlowiseAI is an open-source application that can be installed from the command line.</p>\n<p>You can install it with the following command:</p>\n<pre><code>npm install -g flowise\n</code></pre>\n\n<p>Once installed, start up Flowise with this command:</p>\n<pre><code>npx flowise start\n</code></pre>\n\n<p>From here, you can access FlowiseAI in your browser at <code>localhost:3000</code>.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-start-screen.png\" /></p>\n<p>It’s possible to serve FlowiseAI so that you can access it online and provide access to others, which is <a href=\"https://docs.flowiseai.com/deployment\">well-covered in the documentation</a>.</p>\n<h3>Setting Up Retrievers</h3>\n<blockquote><strong>Retrievers</strong> are templates that the multi-prompt chain will query.</blockquote>\n\n<p>Different retrievers provide different templates that query different things. In this case, we want to select the <a href=\"https://github.com/FlowiseAI/Flowise/tree/main/packages/components/nodes/retrievers\"><strong>Prompt Retriever</strong></a> because it is designed to retrieve documents like PDF, TXT, and CSV files. Unlike other types of retrievers, the Prompt Retriever does not actually need to <em>store</em> those documents; it only needs to fetch them.</p>\n<p>Let’s take the first step toward creating our career assistant by adding a Prompt Retriever to the FlowiseAI canvas. The “canvas” is the visual editing interface we’re using to cobble the app’s components together and see how everything connects.</p>\n<p>Adding the Prompt Retriever requires us to first navigate to the <strong>Chatflow</strong> screen, which is actually the initial page when first accessing FlowiseAI following installation. Click the “Add New” button located in the top-right corner of the page. This opens up the canvas, which is initially empty.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-chatflow-canvas.png\" /></p>\n<p>The “Plus” (+) button is what we want to click to open up the library of items we can add to the canvas. Expand the <strong>Retrievers</strong> tab, then drag and drop the <strong>Prompt Retriever</strong> to the canvas.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-prompt-retriever.png\" /></p>\n<p>The Prompt Retriever takes three inputs:</p>\n<ol>\n<li><strong>Name</strong>: The name of the stored prompt;</li>\n<li><strong>Description</strong>: A brief description of the prompt (i.e., its purpose);</li>\n<li><strong>Prompt system message</strong>: The initial prompt message that provides context and instructions to the system.</li>\n</ol>\n<p>Our career assistant will provide <strong>career suggestions</strong>, <strong>tool recommendations</strong>, <strong>salary information</strong>, and <strong>cities with matching jobs</strong>. We can start by configuring the Prompt Retriever for career suggestions. Here is placeholder content you can use if you are following along:</p>\n<ul>\n<li><strong>Name</strong>: Career Suggestion;</li>\n<li><strong>Description</strong>: Suggests careers based on skills and experience;</li>\n<li><strong>Prompt system message</strong>: You are a career advisor who helps users identify a career direction and upskilling opportunities. Be clear and concise in your recommendations.</li>\n</ul>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-prompt-retriever-add.png\" /></p>\n<p>Be sure to repeat this step three more times to create each of the following:</p>\n<ul>\n<li>Tool recommendations,</li>\n<li>Salary information,</li>\n<li>Locations.</li>\n</ul>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-prompt-retrievers-all.png\" /></p>\n<h3>Adding A Multi-Prompt Chain</h3>\n<blockquote>A <strong>Multi-Prompt Chain</strong> is a class that consists of two or more prompts that are connected together to establish a conversation-like interaction between the user and the career assistant.</blockquote>\n\n<p>The idea is that we combine the four prompts we’ve already added to the canvas and connect them to the proper tools (i.e., chat models) so that the career assistant can prompt the user for information and collect that information in order to process it and return the generated career advice. It’s sort of like a normal system prompt but with a conversational interaction.</p>\n<p>The <strong>Multi-Prompt Chain</strong> node can be found in the “Chains” section of the same inserter we used to place the Prompt Retriever on the canvas.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-multi-chain-prompt.png\" /></p>\n<p>Once the Multi-Prompt Chain node is added to the canvas, connect it to the prompt retrievers. This enables the chain to receive user responses and employ the most appropriate language model to generate responses. </p>\n<p>To connect, click the tiny dot next to the “Prompt Retriever” label on the Multi-Prompt Chain and drag it to the “Prompt Retriever” dot on each Prompt Retriever to draw a line between the chain and each prompt retriever.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-multi-chain-prompt-add.png\" /></p>\n<h3>Integrating Chat Models</h3>\n<p>This is where we start interacting with LLMs. In this case, we will integrate Anthropic’s <a href=\"https://www.anthropic.com/product\">Claude chat model</a>. Claude is a powerful LLM designed for tasks related to complex reasoning, creativity, thoughtful dialogue, coding, and detailed content creation. You can get a feel for Claude by <a href=\"https://claude.ai/login\">registering for access</a> to interact with it, similar to how you’ve played around with OpenAI’s ChatGPT.</p>\n<p>From the inserter, open “Chat Models” and drag the <strong>ChatAnthropic</strong> option onto the canvas.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-anthropic-claude.png\" /></p>\n<p>Once the ChatAnthropic chat model has been added to the canvas, connect its node to the Multi-Prompt Chain’s “Language Model” node to establish a connection.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-anthropic-claude-add.png\" /></p>\n<p>It’s worth noting at this point that Claude requires an API key in order to access it. <a href=\"https://console.anthropic.com/login\">Sign up for an API key on the Anthropic website</a> to create a new API key. Once you have an API key, provide it to the Mutli-Prompt Chain in the “Connect Credential” field.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-anthropic-claude-api.png\" /></p>\n<h3>Adding A Conversational Agent</h3>\n<blockquote>The <strong>Agent</strong> component in FlowiseAI allows our assistant to do more tasks, like accessing the internet and sending emails.</blockquote>\n\n<p>It connects external services and APIs, making the assistant more versatile. For this project, we will use a <strong>Conversational Agent</strong>, which can be found in the inserter under “Agent” components.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-conversational-agent.png\" /></p>\n<p>Once the Conversational Agent has been added to the canvas, connect it to the Chat Model to “train” the model on how to respond to user queries.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-conversational-agent-add.png\" /></p>\n<h3>Integrating Web Search Capabilities</h3>\n<p>The Conversational Agent requires additional tools and memory. For example, we want to enable the assistant to perform Google searches to obtain information it can use to generate career advice. The <strong>Serp API</strong> node can do that for us and is located under “Tools” in the inserter.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-serpapi.png\" /></p>\n<p>Like Claude, Serp API requires an API key to be added to the node. <a href=\"https://serpapi.com/\">Register with the Serp API site</a> to create an API key. Once the API is configured, connect Serp API to the Conversational Agent’s “Allowed Tools” node.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-serpapi-add.png\" /></p>\n<h3>Building In Memory</h3>\n<blockquote>The <strong>Memory</strong> component enables the career assistant to retain conversation information.</blockquote>\n\n<p>This way, the app remembers the conversation and can reference it during the interaction or even to inform future interactions.</p>\n<p>There are different types of memory, of course. Several of the options in FlowiseAI require additional configurations, so for the sake of simplicity, we are going to add the <strong>Buffer Memory</strong> node to the canvas. It is the most general type of memory provided by LangChain, taking the raw input of the past conversation and storing it in a history parameter for reference.</p>\n<p>Buffer Memory connects to the Conversational Agent’s “Memory” node.</p>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-buffer-memory.png\" /></p>\nThe Final Workflow\n<p>At this point, our workflow looks something like this:</p>\n<ul>\n<li>Four <strong>prompt retrievers</strong> that provide the prompt templates for the app to converse with the user.</li>\n<li>A <strong>multi-prompt chain</strong> connected to each of the four prompt retrievers that chooses the appropriate tools and language models based on the user interaction.</li>\n<li>The <strong>Claude language model</strong> connected to the multi-chain prompt to “train” the app.</li>\n<li>A <strong>conversational agent</strong> connected to the Claude language model to allow the app to perform additional tasks, such as Google web searches.</li>\n<li><strong>Serp API</strong> connected to the conversational agent to perform bespoke web searches.</li>\n<li><strong>Buffer memory</strong> connected to the conversational agent to store, i.e., “remember,” conversations.</li>\n</ul>\n<p><img src=\"https://files.smashing.media/articles/overview-large-language-model-concepts-use-cases-tools/flowiseai-final-workflow.png\" /></p>\n<p>If you haven’t done so already, this is a great time to save the project and give it a name like “Career Assistant.”</p>\n<h3>Final Demo</h3>\n<p>Watch the following video for a quick demonstration of the final workflow we created together in FlowiseAI. The prompts lag a little bit, but you should get the idea of how all of the components we connected are working together to provide responses.</p>\nConclusion\n<p>As we wrap up this article, I hope that you’re more familiar with the concepts, use cases, and tools of large language models. LLMs are a key component of AI because they are the “brains” of the application, <strong>providing the lens through which the app understands how to interact with and respond to human input</strong>.</p>\n<p>We looked at a wide variety of use cases for LLMs in an AI context, from chatbots and language translations to writing assistance and summarizing large blocks of text. Then, we demonstrated how LLMs fit into an AI application by using FlowiseAI to create a visual workflow. That workflow not only provided a visual of how an LLM, like Claude, informs a conversation but also how it relies on additional tools, such as APIs, for performing tasks as well as memory for storing conversations.  </p>\n<p>The career assistant tool we developed together in FlowiseAI was a detailed visual look inside the black box of AI, providing us with a map of the components that feed the app and how they all work together.</p>\n<p>Now that you know the role that LLMs play in AI, what sort of models would you use? Is there a particular app idea you have where a specific language model would be used to train it?</p>\n<h3>References</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/09/generating-real-time-audio-sentiment-analysis-ai/\">Generating Real-Time Audio Sentiment Analysis With AI</a>,” (Smashing Magazine)</li>\n<li><a href=\"https://js.langchain.com/docs/get_started/introduction\">LangChain documentation</a></li>\n<li><a href=\"https://docs.flowiseai.com\">FlowiseAI documentation</a></li>\n<li><a href=\"https://huggingface.co/models\">Hugging Face models directory</a></li>\n<li><a href=\"https://www.anthropic.com/product\">Anthropic’s Claude language model</a></li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"1d43e061379cfd95fb83c6bf887b2f3d4a5c0f33eefdc3cbca9afaf8549a6225","category":"Tech"}