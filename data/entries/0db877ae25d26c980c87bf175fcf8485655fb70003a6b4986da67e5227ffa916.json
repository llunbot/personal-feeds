{"title":"Spring Boot ::  รูปแบบของ error ด้วย ProblemDetail","link":"https://www.somkiat.cc/spring-boot-problemdetail/","date":1723553834000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/08/problem-details-1-150x150.png\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/08/problem-details-1-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2024/08/problem-details-1-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/08/problem-details-1.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/08/problem-details-1-1024x534.png\" width=\"695\" height=\"362\" /></a></figure>\n\n\n\n<p>นักพัฒนา RESTFul API ด้วย Spring Boot นั้นมักจะ return ข้อมูลที่ error กลับมา<br />ในรูปแบบที่หลากหลายแล้วแต่จะออกแบบไป<br />แต่หนึ่งในแนวทางที่น่าสนใจคือ <strong><a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ProblemDetail.html\" target=\"_blank\">ProblemDetail</a></strong><br />ซึ่งมีรูปแบบตาม <a href=\"https://www.rfc-editor.org/rfc/rfc9457.html\" target=\"_blank\">RFC 9457</a><br />ดังนั้นมาลองทำความรู้จักและใช้งานกันดู<br />เพื่อช่วยให้ error message เข้าใจได้ง่ายขึ้น</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>สิ่งที่ต้องเข้าใจก่อนคือ การจัดการ error ที่ไม่ดีเป็นดังนี้</strong></p>\n\n\n\n<ul>\n<li>Error ที่ส่งกลับไปไม่เป็นประโยชน์ เข้าใจยาก</li>\n\n\n\n<li>สื่อสารกลับไปแบบผิด ๆ</li>\n\n\n\n<li>ชอบซ่อน information ของ error ไว้มากเกินไป</li>\n\n\n\n<li>ชอบส่ง stack trace กลับไปทั้งหมด แบบนี้ก็เยอะเกินไป อาจจะเกิด data leak ได้ง่าย ๆ</li>\n\n\n\n<li>แต่ละทีม แต่ละ product ก็มีรูปแบบของ error message ที่แตกต่างกันไป !!</li>\n</ul>\n\n\n\n<p>ซึ่งจากการจัดการไม่ดีส่งผลให้เกิดปัญหาอื่น ๆ ตามมา<br />ทั้งเวลาในการพัฒนา<br />ทั้งประสบการณ์ในการพัฒนาที่ไม่ดี<br />ทั้งเรื่องของความปลอดภัยของระบบ<br />ทั้งในเรื่องการ integrate กับระบบอื่น ๆ ซึ่งซับซ้อนมาก </p>\n\n\n\n<p>ดังนั้นหนึ่งในแนวทางเพื่อช่วยลดปัญหาคือ จัดการรูปแบบของ error ให้เป็นมาตรฐาน<br />โดยหนึ่งในแนวทางนั้นคือ Problem Detail นั่นเอง</p>\n\n\n\n<p><strong>โดยที่ Problem Detail มีโครงสร้างดังนี้</strong></p>\n\n\n\n<ul>\n<li><strong>type</strong> บอกชนิดของปัญหา หรือ URL</li>\n\n\n\n<li><strong>status</strong> คือ HTTP status code</li>\n\n\n\n<li><strong>title</strong> คือ ชื่อสั้น ๆ ที่คนอ่านเข้าใจได้ง่าย</li>\n\n\n\n<li><strong>detail</strong> คือ รายละเอียดเพื่ออธิบายปัญหานั้น ๆ</li>\n\n\n\n<li><strong>instance</strong> คือ URI ของ request นั้น ๆ</li>\n\n\n\n<li><strong>extension</strong> คือ field ที่เพิ่มเข้าในแต่ละส่วนง่าย ทำการ custom ได้เลย</li>\n</ul>\n\n\n\n<p>ยกตัวอย่างเช่น</p>\n\n\n\n[gist id=\"6174eb11323dc1f17e2437fa839ec270\" file=\"1.txt\"]\n\n\n\n<p><strong>ดังนั้นมาลองใช้ใน Spring Boot  กันหน่อย</strong><br /></p>\n\n\n\n<p><strong>วิธีการแรก เปิดใช้งานด้วยการ config ไฟล์ application.properties ไปเลย</strong></p>\n\n\n\n[gist id=\"6174eb11323dc1f17e2437fa839ec270\" file=\"application.properties\"]\n\n\n\n<p>ตัวอย่างเมื่อ return HTTP status code = 404</p>\n\n\n\n[gist id=\"6174eb11323dc1f17e2437fa839ec270\" file=\"404.txt\"]\n\n\n\n<p><strong>วิธีการที่สอง จัดการใช้ ControllerAdvice ได้เลย</strong></p>\n\n\n\n[gist id=\"6174eb11323dc1f17e2437fa839ec270\" file=\"GlobalExceptionHandler.java\"]\n\n\n\n<p>เพียงเท่านี้ก็คุยกันง่ายขึ้นแล้ว<br />ขอให้สนุกกับการ coding ครับ</p>\n\n\n\n<p><strong>Reference Websites</strong></p>\n\n\n\n<ul>\n<li><a href=\"https://swagger.io/blog/problem-details-rfc9457-doing-api-errors-well\" target=\"_blank\">Problem Details (RFC 9457): Doing API Errors Well</a></li>\n\n\n\n<li><a href=\"https://www.baeldung.com/spring-boot-return-errors-problemdetail\" target=\"_blank\">Returning Errors Using ProblemDetail in Spring Boot</a></li>\n</ul>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"0db877ae25d26c980c87bf175fcf8485655fb70003a6b4986da67e5227ffa916","category":"Thai"}