{"title":"New – Use Amazon S3 Object Lambda with Amazon CloudFront to Tailor Content for End Users","link":"https://aws.amazon.com/blogs/aws/new-use-amazon-s3-object-lambda-with-amazon-cloudfront-to-tailor-content-for-end-users/","date":1678814307000,"content":"<p>With <a href=\"https://aws.amazon.com/s3/features/object-lambda/\">S3 Object Lambda</a>, you can <a href=\"https://aws.amazon.com/blogs/aws/introducing-amazon-s3-object-lambda-use-your-code-to-process-data-as-it-is-being-retrieved-from-s3/\">use your own code to process data retrieved from Amazon S3 as it is returned to an application</a>. Over time, we added new capabilities to S3 Object Lambda, like the ability to <a href=\"https://aws.amazon.com/about-aws/whats-new/2022/10/amazon-s3-object-lambda-code-modify-results-s3-head-list-api-requests/\">add your own code to S3 HEAD and LIST API requests</a>, in addition to the support for S3 GET requests that was available at launch.</p> \n<p>Today, we are launching <strong>aliases</strong> for S3 Object Lambda Access Points. Aliases are now automatically generated when S3 Object Lambda Access Points are created and are interchangeable with bucket names anywhere you use a bucket name to access data stored in Amazon S3. Therefore, your applications don’t need to know about S3 Object Lambda and can consider the alias to be a bucket name.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/08/s3-object-lambda-aliases-architecture.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/08/s3-object-lambda-aliases-architecture-1024x393.png\" alt=\"Architecture diagram.\" width=\"1024\" height=\"393\" /></a></p> \n<p>You can now use an S3 Object Lambda Access Point alias as an origin for your <a href=\"https://aws.amazon.com/cloudfront/\">Amazon CloudFront</a> distribution to tailor or customize data for end users. You can use this to implement automatic image resizing or to tag or annotate content as it is downloaded. Many images still use older formats like <a href=\"https://en.wikipedia.org/wiki/JPEG\">JPEG</a> or <a href=\"https://en.wikipedia.org/wiki/PNG\">PNG</a>, and you can use a transcoding function to deliver images in more efficient formats like <a href=\"https://en.wikipedia.org/wiki/WebP\">WebP</a>, <a href=\"https://en.wikipedia.org/wiki/Better_Portable_Graphics\">BPG</a>, or <a href=\"https://en.wikipedia.org/wiki/High_Efficiency_Image_File_Format\">HEIC</a>. Digital images contain metadata, and you can implement a function that strips metadata to help satisfy data privacy requirements.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/08/s3-object-lambda-aliases-cloudfront-architecture.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/08/s3-object-lambda-aliases-cloudfront-architecture-1024x325.png\" alt=\"Architecture diagram.\" width=\"1024\" height=\"325\" /></a></p> \n<p>Let’s see how this works in practice. First, I’ll show a simple example using text that you can follow along by just using the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a>. After that, I’ll implement a more advanced use case processing images.</p> \n<p><span><strong>Using an S3 Object Lambda Access Point as the Origin of a CloudFront Distribution<br /> </strong></span>For simplicity, I am using the <a href=\"https://aws.amazon.com/blogs/aws/introducing-amazon-s3-object-lambda-use-your-code-to-process-data-as-it-is-being-retrieved-from-s3/\">same application in the launch post</a> that changes all text in the original file to uppercase. This time, I use the S3 Object Lambda Access Point alias to set up a public distribution with CloudFront.</p> \n<p>I follow the same steps as in the launch post to create the S3 Object Lambda Access Point and the Lambda function. Because the <a href=\"https://aws.amazon.com/blogs/compute/upcoming-changes-to-the-python-sdk-in-aws-lambda/\">Lambda runtimes for Python 3.8 and later do not include</a> the <code><a href=\"https://requests.readthedocs.io/en/latest/\">requests</a></code> module, I update the function code to use <a href=\"https://docs.python.org/3/library/urllib.request.html\"><code>urlopen</code></a> from the <a href=\"https://docs.python.org/3/library\">Python Standard Library</a>:</p> \n<pre><code>import boto3\nfrom urllib.request import urlopen\n\ns3 = boto3.client('s3')\n\ndef lambda_handler(event, context):\n  print(event)\n\n  object_get_context = event['getObjectContext']\n  request_route = object_get_context['outputRoute']\n  request_token = object_get_context['outputToken']\n  s3_url = object_get_context['inputS3Url']\n\n  # Get object from S3\n  response = urlopen(s3_url)\n  original_object = response.read().decode('utf-8')\n\n  # Transform object\n  transformed_object = original_object.upper()\n\n  # Write object back to S3 Object Lambda\n  s3.write_get_object_response(\n    Body=transformed_object,\n    RequestRoute=request_route,\n    RequestToken=request_token)\n\n  return</code></pre> \n<p>To test that this is working, I open the same file from the bucket and through the S3 Object Lambda Access Point. In the <a href=\"https://console.aws.amazon.com/s3\">S3 console</a>, I select the bucket and a sample file (called <code>s3.txt</code>) that I uploaded earlier and choose <strong>Open</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/06/s3-object-lambda-aliases-original-file.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/06/s3-object-lambda-aliases-original-file-1024x129.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"129\" /></a></p> \n<p>A new browser tab is opened (you might need to disable the pop-up blocker in your browser), and its content is the original file with mixed-case text:</p> \n<pre>Amazon Simple Storage Service (Amazon S3) is an object storage service that offers...</pre> \n<p>I choose <strong>Object </strong><strong>Lambda Access Points</strong> from the navigation pane and select the <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\">AWS Region</a> I used before from the dropdown. Then, I search for the S3 Object Lambda Access Point that I just created. I select the same file as before and choose <strong>Open</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/06/s3-object-lambda-aliases-processed-file.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/06/s3-object-lambda-aliases-processed-file-1024x425.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"425\" /></a></p> \n<p>In the new tab, the text has been processed by the Lambda function and is now all in uppercase:</p> \n<pre>AMAZON SIMPLE STORAGE SERVICE (AMAZON S3) IS AN OBJECT STORAGE SERVICE THAT OFFERS...</pre> \n<p>Now that the S3 Object Lambda Access Point is correctly configured, I can create the CloudFront distribution. Before I do that, in the list of S3 Object Lambda Access Points in the S3 console, I copy the <strong>Object Lambda Access Point alias</strong> that has been automatically created:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/06/s3-object-lambda-alias.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/06/s3-object-lambda-alias-1024x186.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"186\" /></a></p> \n<p>In the <a href=\"https://console.aws.amazon.com/cloudfront\">CloudFront console</a>, I choose <strong>Distributions</strong> in the navigation pane and then <strong>Create distribution</strong>. In the <strong>Origin domain</strong>, I use the S3 Object Lambda Access Point alias and the Region. The full syntax of the domain is:</p> \n<p><code>ALIAS.s3.REGION.amazonaws.com</code></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/06/s3-object-lambda-aliases-create-distribution.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/06/s3-object-lambda-aliases-create-distribution-1024x409.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"409\" /></a></p> \n<p>S3 Object Lambda Access Points cannot be public, and I use <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html\">CloudFront origin access control (OAC)</a> to authenticate requests to the origin. For <strong>Origin access</strong>, I select <strong>Origin access control settings</strong> and choose <strong>Create control setting</strong>. I write a name for the control setting and select <strong>Sign requests</strong> and <strong>S3</strong> in the <strong>Origin type</strong> dropdown.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/06/s3-object-lambda-aliases-control-setting.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/06/s3-object-lambda-aliases-control-setting-1013x1024.png\" alt=\"Console screenshot.\" width=\"1013\" height=\"1024\" /></a></p> \n<p>Now, my <strong>Origin access control settings</strong> use the configuration I just created.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/06/s3-object-lambda-aliases-origin-access.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/06/s3-object-lambda-aliases-origin-access-1024x392.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"392\" /></a></p> \n<p>To reduce the number of requests going through S3 Object Lambda, I enable <strong>Origin Shield</strong> and choose the closest <strong>Origin Shield Region</strong> to the Region I am using. Then, I select the <code>CachingOptimized</code> cache policy and create the distribution. As the distribution is being deployed, I update permissions for the resources used by the distribution.</p> \n<p><span><strong>Setting Up Permissions to Use an S3 Object Lambda Access Point as the Origin of a CloudFront Distribution<br /> </strong></span>First, the S3 Object Lambda Access Point needs to give access to the CloudFront distribution. In the S3 console, I select the S3 Object Lambda Access Point and, in the <strong>Permissions</strong> tab, I update the policy with the following:</p> \n<pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"cloudfront.amazonaws.com\"\n            },\n            \"Action\": \"s3-object-lambda:Get*\",\n            \"Resource\": \"arn:aws:s3-object-lambda:REGION:ACCOUNT:accesspoint/NAME\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"aws:SourceArn\": \"arn:aws:cloudfront::ACCOUNT:distribution/DISTRIBUTION-ID\"\n                }\n            }\n        }\n    ]\n}</code></pre> \n<p>The supporting access point also needs to allow access to CloudFront when called via S3 Object Lambda. I select the access point and update the policy in the <strong>Permissions</strong> tab:</p> \n<pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Id\": \"default\",\n    \"Statement\": [\n        {\n            \"Sid\": \"s3objlambda\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"cloudfront.amazonaws.com\"\n            },\n            \"Action\": \"s3:*\",\n            \"Resource\": [\n                \"arn:aws:s3:REGION:ACCOUNT:accesspoint/NAME\",\n                \"arn:aws:s3:REGION:ACCOUNT:accesspoint/NAME/object/*\"\n            ],\n            \"Condition\": {\n                \"ForAnyValue:StringEquals\": {\n                    \"aws:CalledVia\": \"s3-object-lambda.amazonaws.com\"\n                }\n            }\n        }\n    ]\n}</code></pre> \n<p>The S3 bucket needs to allow access to the supporting access point. I select the bucket and update the policy in the <strong>Permissions</strong> tab:</p> \n<pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"*\"\n            },\n            \"Action\": \"*\",\n            \"Resource\": [\n                \"arn:aws:s3:::BUCKET\",\n                \"arn:aws:s3:::BUCKET/*\"\n            ],\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"s3:DataAccessPointAccount\": \"ACCOUNT\"\n                }\n            }\n        }\n    ]\n}</code></pre> \n<p>Finally, CloudFront needs to be able to invoke the Lambda function. In the <a href=\"https://console.aws.amazon.com/lambda\">Lambda console</a>, I choose the Lambda function used by S3 Object Lambda, and then, in the <strong>Configuration</strong> tab, I choose <strong>Permissions</strong>. In the <strong>Resource-based policy statements</strong> section, I choose <strong>Add permissions</strong> and select <strong>AWS Account</strong>. I enter a unique <strong>Statement ID</strong>. Then, I enter <code>cloudfront.amazonaws.com</code> as <strong>Principal</strong> and select <code>lambda:InvokeFunction</code> from the <strong>Action</strong> dropdown and <strong>Save</strong>. We are working to simplify this step in the future. I’ll update this post when that’s available.</p> \n<p><span><strong>Testing the CloudFront Distribution</strong></span><br /> When the distribution has been deployed, I test that the setup is working with the same sample file I used before. In the CloudFront console, I select the distribution and copy the <strong>Distribution domain name</strong>. I can use the browser and enter <code>https://DISTRIBUTION_DOMAIN_NAME/s3.txt</code> in the navigation bar to send a request to CloudFront and get the file processed by S3 Object Lambda. To quickly get all the info, I use <a href=\"https://curl.se/\">curl</a> with the <code>-i</code> option to see the HTTP status and the headers in the response:</p> \n<div> \n <pre><code>curl -i https://DISTRIBUTION_DOMAIN_NAME/s3.txt\n\nHTTP/2 200 \ncontent-type: text/plain\ncontent-length: 427\nx-amzn-requestid: a85fe537-3502-4592-b2a9-a09261c8c00c\ndate: Mon, 06 Mar 2023 10:23:02 GMT\nx-cache: Miss from cloudfront\nvia: 1.1 a2df4ad642d78d6dac65038e06ad10d2.cloudfront.net (CloudFront)\nx-amz-cf-pop: DUB56-P1\nx-amz-cf-id: KIiljCzYJBUVVxmNkl3EP2PMh96OBVoTyFSMYDupMd4muLGNm2AmgA==\n\nAMAZON SIMPLE STORAGE SERVICE (AMAZON S3) IS AN OBJECT STORAGE SERVICE THAT OFFERS...</code></pre> \n</div> \n<p>It works! As expected, the content processed by the Lambda function is all uppercase. Because this is the first invocation for the distribution, it has not been returned from the cache (<code>x-cache: Miss from cloudfront</code>). The request went through S3 Object Lambda to process the file using the Lambda function I provided.</p> \n<p>Let’s try the same request again:</p> \n<div> \n <pre><code>curl -i https://DISTRIBUTION_DOMAIN_NAME/s3.txt\n\nHTTP/2 200 \ncontent-type: text/plain\ncontent-length: 427\nx-amzn-requestid: a85fe537-3502-4592-b2a9-a09261c8c00c\ndate: Mon, 06 Mar 2023 10:23:02 GMT\nx-cache: Hit from cloudfront\nvia: 1.1 145b7e87a6273078e52d178985ceaa5e.cloudfront.net (CloudFront)\nx-amz-cf-pop: DUB56-P1\nx-amz-cf-id: HEx9Fodp184mnxLQZuW62U11Fr1bA-W1aIkWjeqpC9yHbd0Rg4eM3A==\nage: 3\n\nAMAZON SIMPLE STORAGE SERVICE (AMAZON S3) IS AN OBJECT STORAGE SERVICE THAT OFFERS...</code></pre> \n</div> \n<p>This time the content is returned from the CloudFront cache (<code>x-cache: Hit from cloudfront</code>), and there was no further processing by S3 Object Lambda. By using S3 Object Lambda as the origin, the CloudFront distribution serves content that has been processed by a Lambda function and can be cached to reduce latency and optimize costs.</p> \n<p><span><strong>Resizing Images Using S3 Object Lambda and CloudFront</strong></span><br /> As I mentioned at the beginning of this post, one of the use cases that can be implemented using S3 Object Lambda and CloudFront is image transformation. Let’s create a CloudFront distribution that can dynamically resize an image by passing the desired width and height as query parameters (<code>w</code> and <code>h</code> respectively). For example:</p> \n<div> \n <p><code>https://DISTRIBUTION_DOMAIN_NAME/image.jpg?w=200&amp;h=150</code></p> \n</div> \n<p>For this setup to work, I need to make two changes to the CloudFront distribution. First, I create a new cache policy to include query parameters in the cache key. In the CloudFront console, I choose <strong>Policies</strong> in the navigation pane. In the <strong>Cache</strong> tab, I choose <strong>Create cache policy</strong>. Then, I enter a name for the cache policy.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/07/s3-object-lambda-aliases-create-cache-policy.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/07/s3-object-lambda-aliases-create-cache-policy-1024x374.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"374\" /></a></p> \n<p>In the <strong>Query settings</strong> of the <strong>Cache key settings</strong>, I select the option to <strong>Include the following query parameters</strong> and add <code>w</code> (for the width) and <code>h</code> (for the height).</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/07/s3-object-lambda-aliases-cache-key-settings.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/07/s3-object-lambda-aliases-cache-key-settings-1024x724.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"724\" /></a></p> \n<p>Then, in the <strong>Behaviors</strong> tab of the distribution, I select the default behavior and choose <strong>Edit</strong>.</p> \n<p>There, I update the <strong>Cache key and origin requests</strong> section:</p> \n<ul> \n <li>In the <strong>Cache policy</strong>, I use the new cache policy to include the <code>w</code> and <code>h</code> query parameters in the cache key.</li> \n <li>In the <strong>Origin request policy</strong>, use the <code>AllViewerExceptHostHeader</code> managed policy to forward query parameters to the origin.</li> \n</ul> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/07/s3-object-lambda-aliases-behavior-settings.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/07/s3-object-lambda-aliases-behavior-settings-1024x515.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"515\" /></a></p> \n<p>Now I can update the Lambda function code. To resize images, this function uses the <a href=\"https://pillow.readthedocs.io/en/stable/\">Pillow</a> module that needs to be packaged with the function when it is uploaded to Lambda. You can deploy the function using a tool like the <a href=\"https://aws.amazon.com/serverless/sam\">AWS SAM CLI</a> or the <a href=\"https://aws.amazon.com/cdk/\">AWS CDK</a>. Compared to the previous example, this function also handles and returns HTTP errors, such as when content is not found in the bucket.</p> \n<pre><code>import io\nimport boto3\nfrom urllib.request import urlopen, HTTPError\nfrom PIL import Image\n\nfrom urllib.parse import urlparse, parse_qs\n\ns3 = boto3.client('s3')\n\ndef lambda_handler(event, context):\n    print(event)\n\n    object_get_context = event['getObjectContext']\n    request_route = object_get_context['outputRoute']\n    request_token = object_get_context['outputToken']\n    s3_url = object_get_context['inputS3Url']\n\n    # Get object from S3\n    try:\n        original_image = Image.open(urlopen(s3_url))\n    except HTTPError as err:\n        s3.write_get_object_response(\n            StatusCode=err.code,\n            ErrorCode='HTTPError',\n            ErrorMessage=err.reason,\n            RequestRoute=request_route,\n            RequestToken=request_token)\n        return\n\n    # Get width and height from query parameters\n    user_request = event['userRequest']\n    url = user_request['url']\n    parsed_url = urlparse(url)\n    query_parameters = parse_qs(parsed_url.query)\n\n    try:\n        width, height = int(query_parameters['w'][0]), int(query_parameters['h'][0])\n    except (KeyError, ValueError):\n        width, height = 0, 0\n\n    # Transform object\n    if width &gt; 0 and height &gt; 0:\n        transformed_image = original_image.resize((width, height), Image.ANTIALIAS)\n    else:\n        transformed_image = original_image\n\n    transformed_bytes = io.BytesIO()\n    transformed_image.save(transformed_bytes, format='JPEG')\n\n    # Write object back to S3 Object Lambda\n    s3.write_get_object_response(\n        Body=transformed_bytes.getvalue(),\n        RequestRoute=request_route,\n        RequestToken=request_token)\n\n    return</code></pre> \n<p>I upload a picture I took of the <a href=\"https://en.wikipedia.org/wiki/Trevi_Fountain\">Trevi Fountain</a> in the source bucket. To start, I generate a small thumbnail (200 by 150 pixels).</p> \n<p><code>https://DISTRIBUTION_DOMAIN_NAME/trevi-fountain.jpeg?w=200&amp;h=150</code></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/07/s3-object-lambda-aliases-trevi-fountain-200x150-1.jpeg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/07/s3-object-lambda-aliases-trevi-fountain-200x150-1.jpeg\" alt=\"Picture of the Trevi Fountain with size 200x150 pixels.\" width=\"200\" height=\"150\" /></a></p> \n<p>Now, I ask for a slightly larger version (400 by 300 pixels):</p> \n<div> \n <p><code>https://DISTRIBUTION_DOMAIN_NAME/trevi-fountain.jpeg?w=400&amp;h=300</code></p> \n</div> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/07/s3-object-lambda-aliases-trevi-fountain-400x300-1.jpeg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/07/s3-object-lambda-aliases-trevi-fountain-400x300-1.jpeg\" alt=\"Picture of the Trevi Fountain with size 400x300 pixels.\" width=\"400\" height=\"300\" /></a></p> \n<p>It works as expected. The first invocation with a specific size is processed by the Lambda function. Further requests with the same width and height are served from the CloudFront cache.</p> \n<p><span><strong>Availability and Pricing<br /> </strong></span>Aliases for <a href=\"https://aws.amazon.com/s3/features/object-lambda/\">S3 Object Lambda</a> Access Points are available today in all commercial <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\">AWS Regions</a>. There is no additional cost for aliases. With S3 Object Lambda, you pay for the Lambda compute and request charges required to process the data, and for the data S3 Object Lambda returns to your application. You also pay for the S3 requests that are invoked by your Lambda function. For more information, see <a href=\"https://aws.amazon.com/s3/pricing/\">Amazon S3 Pricing</a>.</p> \n<p>Aliases are now automatically generated when an S3 Object Lambda Access Point is created. For existing S3 Object Lambda Access Points, aliases are automatically assigned and ready for use.</p> \n<p>It’s now easier to use S3 Object Lambda with existing applications, and aliases open many new possibilities. For example, you can use aliases with CloudFront to create a website that converts content in <a href=\"https://daringfireball.net/projects/markdown/\">Markdown</a> to HTML, resizes and watermarks images, or masks personally identifiable information (PII) from text, images, and documents.</p> \n<p><strong>To learn more, visit the <a href=\"https://aws.amazon.com/s3/features/object-lambda/\">S3 Object Lambda feature page</a> or watch the following video on customizing data with S3 Object Lambda:</strong></p> \n<p></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"099e779132077660e24c7cde57276808750f3711731e2c8b6bb63072e9c73cdd","category":"Tech"}