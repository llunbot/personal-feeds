{"title":"AWS Glue Data Catalog now supports automatic compaction of Apache Iceberg tables","link":"https://aws.amazon.com/blogs/aws/aws-glue-data-catalog-now-supports-automatic-compaction-of-apache-iceberg-tables/","date":1699995788000,"content":"<p>Today, we’re making available a new capability of <a href=\"https://aws.amazon.com/glue/\">AWS Glue</a> <a href=\"https://docs.aws.amazon.com/glue/latest/dg/components-overview.html#data-catalog-intro\">Data Catalog</a> to allow automatic compaction of transactional tables in the <a href=\"https://aws.amazon.com/what-is/apache-iceberg/\">Apache Iceberg</a> format. This allows you to keep your transactional data lake tables always performant.</p> \n<p>Data lakes were initially designed primarily for storing vast amounts of raw, unstructured, or semi structured data at a low cost, and they were commonly associated with big data and analytics use cases. Over time, the number of possible use cases for data lakes has evolved as organizations have recognized the potential to use data lakes for more than just reporting, requiring the inclusion of transactional capabilities to ensure data consistency.</p> \n<p>Data lakes also play a pivotal role in data quality, governance, and compliance, particularly as data lakes store increasing volumes of critical business data, <a href=\"https://gdpr-info.eu/art-17-gdpr/\">which often requires updates or deletion</a>. Data-driven organizations also need to keep their back end analytics systems in near real-time sync with customer applications. This scenario requires transactional capabilities on your data lake to support concurrent writes and reads without data integrity compromise. Finally, data lakes now serve as integration points, necessitating transactions for safe and reliable data movement between various sources.</p> \n<p>To support transactional semantics on data lake tables, organizations adopted an <a href=\"https://aws.amazon.com/blogs/big-data/choosing-an-open-table-format-for-your-transactional-data-lake-on-aws/\">open table format</a> (OTF), such as <a href=\"https://iceberg.apache.org/\">Apache Iceberg</a>. Adopting OTF formats comes with its own set of challenges: transforming existing data lake tables from <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-format-parquet-home.html\">Parquet</a> or <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-format-avro-home.html\">Avro</a> formats to an OTF format, managing a large number of small files as each transaction generates a new file on <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>, or managing object and meta-data versioning at scale, just to name a few. Organizations are typically building and managing their own data pipelines to address these challenges, leading to additional undifferentiated work on infrastructure. You need to write code, deploy <a href=\"https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-spark.html\">Spark</a> clusters to run your code, scale the cluster, manage errors, and so on.</p> \n<p>When talking with our customers, we learned that the most challenging aspect is the compaction of individual small files produced by each transactional write on tables into a few large files. Large files are faster to read and scan, making your analytics jobs and queries faster to execute. Compaction optimizes the table storage with larger-sized files. It changes the storage for the table from a large number of small files to a small number of larger files. It reduces metadata overhead, lowers network round trips to S3, and improves performance. When you use engines that charge for the compute, the performance improvement is also beneficial to the cost of usage as the queries require less compute capacity to run.</p> \n<p>But building custom pipelines to compact and optimize Iceberg tables is time-consuming and expensive. You have to manage the planning, provision infrastructure, and schedule and monitor the compaction jobs. This is why we launch automatic compaction today.</p> \n<p><span><strong>Let’s see how it works<br /> </strong></span>To show you how to enable and monitor automatic compaction on Iceberg tables, I start from the <a href=\"https://console.aws.amazon.com/lakeformation/\">AWS Lake Formation</a> page or the <a href=\"https://aws.amazon.com/glue/\">AWS Glue</a> page of the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a>. I have an existing database with tables in the Iceberg format. I execute transactions on this table over the course of a couple of days, and the table starts to fragment into small files on the underlying S3 bucket.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/01/huron-5.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/01/huron-5.png\" alt=\"List of Iceberg table on Lake Formation console\" width=\"800\" height=\"127\" /></a></p> \n<p>I select the table on which I want to enable compaction, and then I select <strong>Enable compaction</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/01/huron-3.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/01/huron-3.png\" alt=\"View details of a table in lake formation\" width=\"800\" height=\"292\" /></a></p> \n<p>An IAM role is required to pass permissions to the Lake Formation service to access my AWS Glue tables, S3 buckets, and CloudWatch log streams. Either I choose to create a new IAM role, or I select an existing one. Your existing role must have <code>lakeformation:GetDataAccess</code> and <code>glue:UpdateTable</code> permissions on the table. The role also needs <code>logs:CreateLogGroup</code>, <code>logs:CreateLogStream</code>, <code>logs:PutLogEvents</code>, to “<code>arn:aws:logs:*:your_account_id:log-group:/aws-lakeformation-acceleration/compaction/logs:*</code>“. The role trusted permission service name must be set to <code>glue.amazonaws.com</code>.</p> \n<p>Then, I select <strong>Turn on compaction</strong>. Et voilà! Compaction is automatic; there is nothing to manage on your side.</p> \n<p>The service starts to measure the table’s rate of change. As Iceberg tables can have multiple partitions, the service calculates this change rate for each partition and schedules managed jobs to compact the partitions where this rate of change breaches a threshold value.</p> \n<p>When the table accumulates a high number of changes, you will be able to view the <strong>Compaction history</strong> under the <strong>Optimization</strong> tab in the console.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/01/huron-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/01/huron-1.png\" alt=\"Lake formation compaction history in the console\" width=\"800\" height=\"277\" /></a></p> \n<p>You can also monitor the whole process either by observing the number of files on your S3 bucket (use the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/metrics-dimensions.html\">NumberOfObjects</a> metric) or one of the two new Lake Formation metrics: <code>numberOfBytesCompacted</code> or <code>numberOfFilesCompacted</code>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/27/metrics.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/27/metrics.png\" alt=\"Iceberg table compaction metrics in the cloudwatch console\" width=\"800\" height=\"350\" /></a></p> \n<p>In addition to the AWS console, there are six new APIs that expose this new capability:<code>CreateTableOptimizer</code>, <code>BatchGetTableOptimizer</code> , <code>UpdateTableOptimizer</code>, <code>DeleteTableOptimizer</code>, <code>GetTableOptimizer</code>, and <code>ListTableOptimizerRuns</code>. These APIs are available in the <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a> and <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a>. As usual, don’t forget to update the SDK or the CLI to their latest versions to get access to these new APIs.</p> \n<p><span><strong>Things to know<br /> </strong></span>As we launched this new capability today, there are a couple of additional points I’d like to share with you:</p> \n<ul> \n <li>Compaction will not merge <a href=\"https://iceberg.apache.org/spec/#delete-formats\">delete files</a>. Tables with deleted data will be compacted, but data files that have delete files associated with them will be skipped.</li> \n <li>S3 buckets configured for exclusive access from a VPC through VPC endpoints are not supported.</li> \n <li>Apache Iceberg tables using <a href=\"https://parquet.apache.org/\">Apache Parquet</a> to store the data can be compacted.</li> \n <li>Compaction works on buckets encrypted with <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingServerSideEncryption.html\">the default server-side encryption</a> (SSE-S3) or <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html\">server-side encryption with KMS managed keys</a> (SSE-KMS)</li> \n</ul> \n<p><strong><span>Availability</span><br /> </strong>This new capability is available starting today in all AWS Regions where AWS Glue Data Catalog <a href=\"https://docs.aws.amazon.com/general/latest/gr/glue.html\">is available</a>.</p> \n<p>The pricing metric is the data processing unit (DPU), a relative measure of processing power that consists of <a href=\"https://aws.amazon.com/glue/pricing/\">4 vCPUs of compute capacity and 16 GB of memory</a>. There is a charge per DPU/hours metered by second, with a minimum of one minute.</p> \n<p>Now it’s time to decommission your existing compaction data pipeline and switch to this new, entirely managed capability today.</p> \n<a href=\"https://twitter.com/sebsto\">-- seb</a>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"6fba670264ca9ea312fe4101d4d0fdce62fb36976bd73c4189a5090d4fb1394c","category":"Tech"}