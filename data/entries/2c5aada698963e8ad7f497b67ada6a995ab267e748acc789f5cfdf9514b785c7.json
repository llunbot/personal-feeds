{"title":"Using Consul’s transparent proxy on virtual machines","link":"https://www.hashicorp.com/blog/using-consul-s-transparent-proxy-on-virtual-machines","date":1681142400000,"content":"<p><a href=\"https://developer.hashicorp.com/consul/docs/connect/transparent-proxy\">Transparent proxy</a> helps secure services in a <a href=\"https://developer.hashicorp.com/consul/docs/connect\">service mesh</a> by forcing traffic through a proxy <a href=\"https://developer.hashicorp.com/consul/docs/connect/proxies/envoy\">like Envoy</a> to prevent unauthorized direct access to the application. It allows a service to resolve and connect to another service using DNS instead of through <a href=\"https://developer.hashicorp.com/consul/docs/connect/registration/service-registration#upstream-configuration-reference\">proxy upstreams</a> listening on localhost. In HashiCorp Consul, a service can connect to an upstream service using transparent proxy and Consul’s DNS as long as an <em><a href=\"https://developer.hashicorp.com/consul/docs/connect/intentions\">intention</a></em> allows traffic between the services.</p>\n\n<p>This post shows you how to configure Consul’s transparent proxy on virtual machines (VMs). Your operating system must support iptables in order for transparent proxy to restrict traffic on the VM. Furthermore, you must run Consul 1.11.1 or later to use transparent proxy. For a full example, check out my <a href=\"https://github.com/hashicorp/terraform-template-consul-tproxy/tree/main/examples/aws\">Terraform configuration</a> that uses a user data script to set up transparent proxy. While the example uses Terraform to set up Consul with transparent proxy through user data, you can adapt its scripts for your own VM configuration.</p>\n\n<h2>Configure Consul client</h2>\n\n<p>Before your service can use transparent proxy, set up a Consul client on your virtual machine with service mesh and DNS forwarding enabled. Make sure Consul runs under the <code>consul</code> Linux user. You will need its user ID to make it easier to exclude Consul-related traffic from transparent proxy redirection.</p>\n\n<p>If you have access control lists (<a href=\"https://developer.hashicorp.com/consul/docs/security/acl#acl-documentation\">ACLs</a>) enabled, create a Consul ACL token for the <a href=\"https://developer.hashicorp.com/consul/docs/security/acl/acl-roles#node-identities\">node identity</a>. This token includes a policy to write nodes and read services in Consul.</p>\n<pre><code>consul acl token create -node-identity=${node_name}</code></pre><p>The Consul client configuration sets both <code>agent</code> and <code>default</code> tokens to register the virtual machine and resolve services with Consul for service discovery.</p>\n<pre><code>{\n  \"server\": false,\n  \"acl\": {\n    \"tokens\": {\n      \"agent\": \"${CONSUL_HTTP_TOKEN}\",\n      \"default\": \"${CONSUL_HTTP_TOKEN}\"\n    }\n  },\n  \"connect\": {\n    \"enabled\": true\n  },\n  \"ports\": {\n    \"grpc\": 8502\n  }\n}</code></pre><p>In order to use Consul service discovery on the virtual machine, forward the virtual machine’s DNS to Consul. When you use Consul service discovery, you can configure your service to look up another service in the mesh using its <a href=\"https://developer.hashicorp.com/consul/docs/discovery/dns#service-virtual-ip-lookups\">virtual service name</a>. <a href=\"https://developer.hashicorp.com/consul/tutorials/networking/dns-forwarding\">Set up DNS forwarding</a> for your DNS server. For example, add Consul to the <code>systemd-resolved</code> configuration file and restart the process to forward any DNS requests to the service mesh to Consul.</p>\n\n<pre><code>[Resolve]\nDNS=127.0.0.1:8600\nDomains=~consul\n</code></pre>\n\n<p>Start the Consul client. The virtual machine should register as a node in Consul. Before registering the service and starting the proxy, create a user for the proxy named <code>envoy</code>. Consul needs this user ID in order to exclude traffic to and from the proxy.</p>\n\n<h2>Register the service</h2>\n\n<p><a href=\"https://developer.hashicorp.com/consul/docs/services/usage/define-services\">Define a service</a> to add it to the mesh and enable transparent proxy. The service definition sets the service’s name, port, and proxy mode.</p>\n<pre><code>{\n \"service\": {\n   \"connect\": {\n     \"sidecar_service\": {\n       \"proxy\": {\n         \"mode\": \"transparent\"\n       }\n     }\n   },\n   \"name\": \"${service_name}\",\n   \"port\": ${service_port}\n }\n}</code></pre><p>Consul assigns a virtual IP in the <code>240.0.0.0/4</code> range to a service with transparent proxy enabled. This allows downstream services to connect to upstream services using a unique IP assigned by the service mesh. You can register the service with the <a href=\"https://developer.hashicorp.com/consul/api-docs/agent/service\">Consul API</a> or add the service definition to the Consul configuration directory on your VM. Adding the service definition to the configuration directory registers the service each time the Consul client restarts.</p>\n\n<h2>Redirect traffic to proxies</h2>\n\n<p>After installing and configuring Consul and Envoy, redirect traffic to and from the virtual machine using transparent proxy. If you have a <a href=\"https://developer.hashicorp.com/consul/docs/connect/config-entries/mesh#mesh-destinations-only\">mesh configuration entry</a> defined, check if <code>TransparentProxy.MeshDestinationsOnly</code> is <code>true</code>. This setting will deny all inbound and outbound requests to the VM once you redirect traffic. As a result, make sure you install the application and its dependencies before redirecting traffic since transparent proxy will deny requests to download packages by default.</p>\n\n<p>Issue the <a href=\"https://developer.hashicorp.com/consul/commands/connect/redirect-traffic\"><code>consul connect redirect-traffic command</code></a> to enable transparent proxy on the VM for the named service. The command should include the user ID for <code>consul</code> and <code>envoy</code> in order for transparent proxy to exclude traffic from Consul and Envoy from redirection.</p>\n<pre><code>consul connect redirect-traffic \\\n   -proxy-id=\"${service_name}-sidecar-proxy\" \\\n   -proxy-uid=\"$(id --user envoy)\" \\\n   -exclude-uid=\"$(id --user consul)\"</code></pre><p>Once you issue the command, any connection you have to the VM (including SSH) will disconnect. The command adds iptables rules that will deny existing inbound traffic unless you have specified exclusions. If you need to exclude inbound or outbound traffic from specific ports or IP addresses, append additional arguments specifying exclusions. For example, you may need to exclude inbound traffic to the SSH port for login:</p>\n<pre><code>consul connect redirect-traffic \\\n   -proxy-id=\"${service_name}-sidecar-proxy\" \\\n   -proxy-uid=\"$(id --user envoy)\" \\\n   -exclude-uid=\"$(id --user consul)\" \\\n   -exclude-inbound-port=22</code></pre><p>Next, install and run Envoy on the VM. Issue the <code><a href=\"https://developer.hashicorp.com/consul/commands/connect/envoy\">consul connect envoy command</a></code> for Consul to run Envoy. If you have ACLs enabled, make sure that you create a <a href=\"https://developer.hashicorp.com/consul/tutorials/security/access-control-setup-production#apply-individual-tokens-to-the-services\">service token</a> and pass it to the command using the <code>-token</code> argument.</p>\n<pre><code>consul connect envoy -sidecar-for=${service_name} -token=${CONSUL_HTTP_TOKEN}</code></pre><p>To automate transparent proxy configuration, you can add a script enabling traffic redirection to the proxy’s system file before you start the proxy. After stopping the proxy, you may want a script to clean up iptables. Use a systemd unit file to use the Consul ACL token from an environment file and redirect traffic before starting the proxy:</p>\n<pre><code>[Unit]\nDescription=Consul Envoy\nAfter=syslog.target network.target consul.service\nWants=consul.service\n\nConditionFileIsExecutable=</code></pre>","author":"Rosemary Wang","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"2c5aada698963e8ad7f497b67ada6a995ab267e748acc789f5cfdf9514b785c7","category":"Tech"}