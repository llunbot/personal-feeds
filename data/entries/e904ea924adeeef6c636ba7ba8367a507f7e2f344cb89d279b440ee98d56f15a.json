{"title":"Transforming The Relationship Between Designers And Developers","link":"https://smashingmagazine.com/2024/05/transforming-relationship-between-designers-developers/","date":1715767200000,"content":"<p>In the forever-shifting landscape of design and technology, some rare artifacts surprisingly never change.</p>\n<p>Throughout the last two decades, we have witnessed the astonishing evolution of creative tooling, methodologies, and working practices. However, after all of this advancement, we still have clients asking to make the logo bigger, designers despairing as their creations are built with not quite the exact amount of bottom-margin, and developers going crazy about last-minute design changes.</p>\n<p>Quite frankly, I’ve had <em>enough</em>. So join me in a parenting-style-hands-on-hips pose of disdain, roll up your sleeves, and let’s fix this mess together, <em>once and for all!</em></p>\nWhy Is This Still An Important Topic?\n<p>Ultimately, the quality of your designer-developer relations will have a vital impact on the quality of your product. In turn, this will impact <strong>customer experience</strong> (be it internal or external).</p>\n<p>Customer experience is everything, and these days the smallest of chinks can create an even bigger dent in the business itself.</p>\n<p>It may not even be an obvious or noticeable issue. Over time, those moments of misunderstanding in your team could result in a series of micro-inconsistencies that are felt by the customer yet sneak underneath the radar of quality assurance.</p>\n<p>Perhaps you’ll catch these things during user research, but in this scenario, you’d be playing catch-up instead of advancing forward.</p>\n<p>To cut a long story short, it could be slowing you down in the race against your competitors and costing you more money in the process.</p>\n<p>So, with that in mind, let’s get stuck into the techniques that can steer us in the right direction and inspire everyone on the team to deliver the slickest of user experiences together.</p>\nWorking Culture\n<p>In my opinion, process improvements may only get you so far. The <strong>working culture</strong> in your organization will heavily influence the output of your digital teams. Whilst the subject of culture is incredibly vast, there are a few key elements that I think are hugely important to foster a greater level of collaboration between design and developers:</p>\n<ol>\n<li><strong>Alignment on the goals</strong> of the project and/or business.</li>\n<li><strong>Encouraging a more “robotic” attitude to feedback.</strong> Of course, you can be passionate about what you do, but when it comes to feedback, I always try to encourage people to respond with logic before emotion.</li>\n<li><strong>Communication</strong>: Ultimately, you have to <em>trust</em> people to be proactive. You can have a great process, but the gaps and edge cases will still slip through the net unless you have people who are open and ready to prod each other when issues arise.</li>\n</ol>\n<p>This may seem like common sense to many of us, but many organizations (big ones, too!) still operate without this crucial foundation to motivate and support their teams.</p>\n<p>However, it is essential to be honest with yourself and consider the role <em>you</em> play within your team. Even if you think you have already fulfilled these criteria, I’d encourage you to investigate this further to ensure everyone feels the same. It can be as simple as having a 121 discussion with each member of the team, or you could even send out short questionnaires to gauge your workplace’s suitability for an optimal designer and developer collaboration.</p>\n<p>You might be surprised by what you hear back from people. <strong>Treat any criticism as gold dust.</strong> It’s an opportunity to improve.</p>\n<p>Once you’ve created this foundation within your organization, it’s important to <em>maintain</em> and <em>protect</em> it. Keep reviewing it regularly, and make sure that anyone joining the team will be able to fit in. This leads us nicely on to…</p>\nHiring\n<p>If you’re scaling your team, maintaining quality can always be a challenge as you grow. Despite the challenges, it’s important to continue hiring people who have a positive and empathetic attitude to ensure you can maintain this foundation within your workplace.</p>\n<p>In order to gauge this, I would like to include the following interview questions.</p>\n<h3>Developer</h3>\n<p>Begin by showing a sample screenshot of your product or a specially crafted concept design:</p>\n<blockquote>“You’ve just built X, and the designer wants to change Y. How do you respond?”<br /><br />Follow up:<br /><br />“The designer and PM reject your suggestion because of <strong>___</strong>. How do you respond?”</blockquote>\n\n<h3>Designer</h3>\n<p>Begin by showing a sample screenshot of your product or a specially crafted concept design:</p>\n<blockquote>“The developer says, “We can’t build X quickly; can we do Y instead to deliver faster?” How do you react?”<br /><br />Follow up:<br /><br />“The product owner says they are then disappointed with the design. How do you react?”</blockquote>\n\n<p>I recommend asking these kinds of questions in the middle or towards the end of the interview so you have already built rapport. If the candidate is at ease, they are more likely to let slip any negative attitudes that lurk beneath the surface.</p>\n<p>I’ve asked interview questions like these to many designers and developers, and every so often, they will openly criticize and stereotype each other with a smile on their faces. I’ve even seen some candidates become visibly frustrated as they recount real-life scenarios from their own experiences.</p>\n<p>How you score this is more difficult. Ultimately, <strong>skills and work ethic are the most important things</strong>, so concerning answers to these questions may not necessarily lead to an outright rejection but perhaps flag something you may need to work on with the candidate if they do later join your team.</p>\n<p>Hopefully, in most cases, the stronger candidates you speak to will naturally provide balanced and conscientious responses to these tests of character!</p>\nProcess\n<p>We talked a bit about hiring, but I’d imagine many people who need this article are more likely to be in the midst of a designer-developer flame-war as opposed to trying to prevent one in the future!</p>\n<p>So, what can we do <em>process-wise</em> to keep things flowing?</p>\n<p>Provided that there is plenty of <strong>early</strong> <strong><em>and</em></strong> <strong>ongoing collaboration</strong> in your workflow, there is no absolute right or wrong answer. It’s about what fits your team and your product best. Ultimately, you need to discard the silos of the past and start working together as a team early on.</p>\n<ul>\n<li>Developers would typically be the last people to get involved, but they should be involved from the start to guide technical feasibility and provide their own ideas.</li>\n<li>Designers are often more involved in the beginning but can often drift away before the end of a release. However, we need to keep them onboard and get them to <em>play</em> with the product so we can keep making it even better!</li>\n</ul>\n<p>It’s important to be open-minded about the solutions. Alas, I have even worked in organizations where different teams have different approaches. Bearing that in mind, here are some good places to start in terms of exploring what might work for your workplace.</p>\nScoping\n<p>When new features are on the horizon, getting everyone involved in these discussions is crucial.</p>\n<p>Sometimes, it can be difficult for developers to detach from the current sprint and think ahead, but it’s important that we have their guidance, and it is ultimately going to save them (and the whole team) time further down the line.</p>\n<p>Scoping can appear in many different forms across the spectrum of agile methodologies out there. It’s not my intention to cover any of these and discuss all the positives and negatives of each (that’d make this into a book, and not one that anyone would like to read!); in fact, I am deliberately not mentioning any of them. This article is ultimately about people, and the people we need at this early stage are not just the stakeholders and a product manager. We need designers and developers shaping these early discussions for the following reasons:</p>\n<ul>\n<li>They will bring their own ideas.</li>\n<li>They will visualize the idea very quickly and assess its feasibility.</li>\n<li>They will connect the concept with other parts of the domain.</li>\n<li>They will also (albeit rarely!) prevent an impossible dream or daft idea from growing on the face of the business like a festering wart.</li>\n</ul>\n<h3>Another Perspective On Scoping: SquaredUp</h3>\n<p>In order to take a deeper dive into the subject of scoping, I spoke to Dave Clarke, product manager at <a href=\"https://squaredup.com\">SquaredUp</a>.</p>\n<blockquote>“Developers are looped in during the design stage, and we’ll test interactive mockups with the engineering team as well as other internal stakeholders before going out to external audiences for feedback. This means that when a feature is ready to be built by an engineer, they’re already really familiar with what we’re building”<br /><br />— Dave Clarke</blockquote>\n\n<p>Back in late 2018, I met the SquaredUp team at an open day in their UK hub in Maidenhead. I was impressed by the quality of their product, considering it was a very technical audience. It looked beautiful, and you could tell that they went the extra mile in terms of collaboration. Not only do they involve developers in the design phase, but they get them involved even earlier than that.</p>\n<blockquote>“We send engineers to events so they can talk to customers and hear their pain points first-hand. This helps foster a real appreciation and understanding of the ‘user’ and ensures designers/developers/PMs are all coming at a problem with a solid understanding of the issue from the user’s perspective.”<br /><br />— Dave Clarke</blockquote>\n\n<p>This brings us back again to that all-important foundation. <strong>Alignment on goals</strong> is key, and what better way to reinforce that message than by getting everyone involved in hearing directly from the end users of your product?</p>\nDesign Presentations\n<p>Once the wheels are in motion on the big new thing, many teams like to have the designer present their work for forthcoming iteration(s) to the team. This allows everyone to have a say and get excited about what is coming up.</p>\n<p>Once again, there are many organizations that would simply agree on the design between stakeholders and designers alone. From the developer perspective, this is incredibly frustrating. Not only will it result in a <strong>lower-quality output</strong>, but it will also make developers <strong>feel as though their opinion doesn’t matter</strong>.</p>\n<p>With my developer hat on, though, I absolutely love these kinds of sessions. They allow us to question the details, suggest alternatives, and consider how we slice stuff up into smaller bundles of value that can be released faster.</p>\n<p>With my design hat on, it caters to my need to think about the bigger picture. It’s not always practical to design iteratively, but in these sessions, we can all <strong>get together and appreciate the end-to-end experience</strong>.</p>\n<p>Typically, we allow the designer time to talk through everything, allowing for questions throughout, and give everyone a chance to dive in and bring their ideas to the table. However, do what works for your team. If you have a designer who wants to present, take all questions at the end and then make changes afterward, do that. If you have one who likes handling lots of questions throughout and makes changes live, go with that.</p>\n<p>Perhaps even give it your own identity, too. In my current workplace, one of the squads calls it <em>Design Time</em> and in our squad, we decided to open the name to a poll, and thus (with one cheeky addition to the poll from a colleague) the <em>Itty Bitty Refinement Committee</em> was born!</p>\n<h3>Managing Conflict</h3>\n<p>However, these kinds of sessions do <strong>have the potential to get sidetracked</strong>. So, as with any meeting, it is essential to have a <strong>clear agenda</strong> and ensure that good facilitation prevents things from going off-piste. If there are conflicts, I always try to find resolutions by considering where we might find the answers. For example,</p>\n<ul>\n<li>Can we look at our analytics?</li>\n<li>Which option is a better fit for our company goals?</li>\n<li>Could we do an A/B test to see what is more effective?</li>\n</ul>\n<p>When people bring ideas to the table, it’s always important to <strong>acknowledge them positively and seek further exploration</strong>. Sometimes, we can agree on an approach quickly, and on other occasions, we can defer the discussion to a later refinement session.</p>\nSharing Responsibilities\n<p>In my opinion, there is also a gray area between designers and developers, where it often isn’t clear who holds responsibility. This is a big risk because, in many organizations, essential aspects can be completely forgotten.</p>\n<p>From my past experience, there are two key areas where I see this happening often. So this may not be exhaustive, but I encourage you to think about these and then ask yourself: Is there anything else — specific to my organization — that could have fallen into this void between our designers and developers?</p>\n<p>See if you can identify these risks and agree on a way of working together to ensure they are tackled effectively.</p>\n<h3>Animations</h3>\n<p>Nowadays, many dev teams are working on JavaScript-heavy applications, and most of us will have the power of CSS transitions at our disposal. Yet, I frequently land on new projects where they aren’t being leveraged to enhance the customer experience.</p>\n<p>Animations can be quite time-consuming to create using many design tools. In particular, I often find that <em>loading states</em> are quite fiddly to prototype in some cases.</p>\n<p>In my recent work at <a href=\"https://www.floww.io/\">Floww</a>, I collaborated with designer Hidemi Wenn on an animated progress bar. For the first version, Hidemi had begun with an idea crafted in After Effects. I replicated this in a <a href=\"https://codepen.io/chrisdaaaaay/pen/BaxOXRw\">CodePen</a> and suggested adding some bubbles to highlight the changes in the numbers.</p>\n<p><strong>Note</strong>: <em>Of course, CodePen is just one example of this. There are many other tools out there, such as Storybook, that can also allow us to build and collaborate on ideas quickly.</em></p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/abrOJBr\">Bar Chart of Destiny [forked]</a> by <a href=\"https://codepen.io/chrisdaaaaay\">Chris Day</a>.  </p>\n<p>This allowed Hidemi to see her creation working in the browser early — before it had been fully implemented into the product — and we then collaborated further to make more enhancements.</p>\n<blockquote>“Working together like this was awesome! We could easily bounce around ideas, and tweaking the animation was a breeze.”<br /><br />— Hidemi Wenn, Product Designer at <a href=\"https://www.floww.io/\">Floww</a></blockquote>\n\n\n<p>Pairing is often between developers, but why not jump on a call and pair with a designer whilst you write the CSS? This gives them full transparency, and you can collaborate together.</p>\n<p>Nowadays, we have amazing tools at our disposal to collaborate, and yet still, so many designers and developers elect to operate in silos.</p>\n<h3>Accessibility</h3>\n<p>One of the first things I do when joining any existing digital project is to spin up <a href=\"https://wave.webaim.org/extension/\">Wave</a> (an accessibility testing tool) and subsequently slump into my seat in despair.</p>\n<p><strong>Accessibility is something that always suffers as a result of a designer/developer standoff.</strong> Some might say it’s the realm of design, while others would argue it’s quite a technical thing and, therefore, lives in dev land. The truth is <strong>it is a shared responsibility</strong>.</p>\n<p>Take something like <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus\"><code>:focus</code></a>, for example. Whenever I review code, this is something I <em>always</em> check and often discover it’s missing. Ask the developer, and they’ll say, “We didn’t have designs for it.” Well, perhaps, <em>ask</em> the designer to create them, just as I’d expect the designer to query an unimplemented state they had designed for.</p>\n<p>We should scrutinize each other’s work and continue to channel our inner robot to respond with logic when it comes to constructive criticism. Keep encouraging everyone to embrace feedback because that is the gold dust that makes our product shine brighter.</p>\nDuring Implementation\n<p>Having steered our way together through the implementation of our features, at some point, we begin to approach the time to release our features into the wild. We are on the final stretch, and thus, it’s time for developers to stage a reverse-design presentation!</p>\n<p>Whilst mentoring developers on this subject, I always remind them <strong>not to take the feedback personally</strong>.</p>\n<p>Likewise, I ask designers <strong>to never hold back</strong>. Be persnickety (in a kind way!) and ensure all your concerns are addressed.</p>\n<p>It’s only natural for a developer to behave defensively in these scenarios. As a result, designers may hold back on some of the feedback they provide in order to prevent upsetting the developer.</p>\n<p>Developers are often very vocal, and if you are tasked with delivering a barrage of design feedback to them, it can appear daunting and make designers fearful of a backlash.</p>\n<p>Prevent the silo. Perhaps <strong>have a third party</strong>, such as the product owner/manager, attend the meetings. They can diffuse any situation by referring us all back to the business value.</p>\n<p>I’ve also witnessed rare cases where the developer has nodded and agreed with all the feedback and then just hasn’t implemented any of it afterward! So, <strong>make sure it’s all captured in whatever project management tools you use</strong> so you can follow up on the status. Sometimes, it’s easy to forget to do this when the changes are so small, so often (in my current team), we might create a single ticket on our board to implement all the feedback changes as opposed to creating a work item for each.</p>\n<p>Another common issue I’ve found is that I’ve met <strong>many designers who don’t actually ever test out the products that they design</strong>. For me, they are missing out on the opportunity to further hone their work, and to learn.</p>\n<p>If you’re a designer, ensure that you can log in to the app/website. Get a test account from someone, and <strong>try to break stuff</strong>!</p>\n<p>Once all the feedback is in, we can create more work items to give our product those magical finishing touches and ship our masterpiece to the World.</p>\nDesign Systems\n<p>Having mentioned focus states earlier on, you were probably already thinking about design systems before this heading came along! Of course, the design system plays a key role in helping us maintain that consistency, and ensuring accessibility concerns are baked-in to our library of beautiful components.</p>\n<p>There are many, many articles about design systems out there already but here, I am going to just consider them in the context of the working relationship.</p>\n<p>As the design system encourages reuse, it encourages us to think about other teams in our organization and be more mindful.</p>\n<p><strong>If the basic building blocks are covered, we can focus on solving more complex challenges together.</strong> I think this is also a really important value to get your teams on board with.</p>\n<p>Design systems can also cause friction. Not everyone will get on board with it. Some designers will feel as though it restricts their creativity. Some developers will be frustrated at having to update the design system instead of cracking on with their own features.</p>\n<p>In my opinion, these attitudes will not only slow you down but could harm the working culture of your business. Nowadays, I’d say it’s absolutely crucial for any product team (big or small) to have a design system and have the majority of your team buying into it.</p>\n<p>I’ve been present at organizations where the design system is neglected, and in these cases, it actually ends up worse than not having one at all. You really need the majority of your team to be committed to it; otherwise, some people will go off-piste and keep reinventing the wheel (probably without those focus states!).</p>\n<h3>Another Perspective On Design Systems: GOV.UK</h3>\n<p>The GDS (Government Digital Service) of the UK has built a design system that serves a vast spectrum of different services and tech stacks. An enormous challenge, which is almost certain to be of interest in our quest for knowledge! So, I got in touch with product designer Ed Horsford who has worked on <a href=\"https://www.edwardhorsford.com/renew-your-passport/\">a series of government services</a> that make use of this.</p>\n<blockquote>“GDS provides the <a href=\"https://prototype-kit.service.gov.uk/docs/\">GOV.UK Prototype Kit</a>, so as a designer, I can create something in the kit, make full use of the functionality of the design system, and point developers towards the prototype.”<br /><br />— Edward Horsford</blockquote>\n\n<p>Whilst many other organizations are now making use of tools such as Figma’s excellent <a href=\"https://www.figma.com/blog/introducing-dev-mode/\">Dev Mode</a> feature to streamline design handover, this still requires naming conventions to be lined up between the codebase and the Figma component library. What’s impressive about GDS’ approach here is that <strong>the provision of their own prototyping tool makes it absolutely clear to developers which components need to be used</strong>. However, the availability of a great design system tooling doesn’t always guarantee a smooth outcome, as Ed explains:</p>\n<blockquote>“It can be a bit of a mind-shift for developers new to the UK government or using design systems in general — they may default to hand coding the HTML and CSS to match a design, rather than using the components from the design system to match the prototype.”<br /><br />“If there is a bespoke requirement outside of the design system, then I will always call it out early so I can discuss it with the team.”<br /><br />— Edward Horsford</blockquote>\n\n<p>Once again, this takes us back to the importance of communication. In a landscape where a design system must be deployed amongst many different teams, <strong>it’s up to the designers and developers to scrutinize each other’s work</strong>. </p>\n<p>It was great to hear that as a designer, Ed was actively looking at the front-end code to assist the developer, ensuring the design system was respected so that all of its many benefits could be embedded into the product.</p>\nCrisis Mode\n<p>I appreciate that much of the advice in this article requires planning and a fair bit of trial and error. So what do you do if your designers and developers are already engulfed in a mass brawl that needs to be quelled?</p>\n<p>In these scenarios, I think it is an ideal moment to pause and simply ask each member of the team: <em>What is our goal? What are we working towards?</em></p>\n<p>If people are angry, in some ways, it’s a good thing because you know they care. People who care should always be open to a bit of a reset. Openly discuss what everyone wants, and you’ll probably be surprised at <strong>how aligned people really are</strong>; I always go back to this fundamental and work onwards from there.</p>\n<p>Sometimes, we get so tangled up in the details we forget what is truly important.</p>\n<h3>Apathy</h3>\n<p>For every angry team, there are probably many more that just don’t give a crap. For me, this is a far worse situation.</p>\n<p>Every problem described in this article could be present. The designers make mockups, the designers build them without question, and everyone gets paid. Who needs to question anything? It’s just a job, right?</p>\n<p>Can we really fix this?</p>\n<p>Well, in my opinion, you are going to need <strong>a much deeper dive into company culture to try and revive that team spirit</strong>. I have worked at places like this in the past, and it is very challenging to try and implement solutions when the people are just not bought into the vision of the organization.</p>\n<p>Whether this is feasible or not depends on your role and the organization itself. I have walked away from situations like this in the past because I didn’t feel as though the organization was willing to change or even be able to acknowledge the problem.</p>\nConclusion\n<p>The dynamic between designers and developers is a subject that has always been of great interest to me, as I’ve worked in both roles as well as being an agency owner.</p>\n<p>I’m confident as the years continue to progress, this will become less of a problem as the world of work continues to gravitate towards greater levels of inclusivity, honesty, and openness. The foundations of great company culture are so crucial to ensuring that designers and developers can unite and take on the world side-by-side on behalf of your organization.</p>\n<p>For now, though, in today’s fragmented and divided world, you can gain a true competitive advantage by leveraging the power of a harmonious digital team built on the foundations of your organizational values.</p>\n<p>Go smash it!</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"e904ea924adeeef6c636ba7ba8367a507f7e2f344cb89d279b440ee98d56f15a","category":"Tech"}