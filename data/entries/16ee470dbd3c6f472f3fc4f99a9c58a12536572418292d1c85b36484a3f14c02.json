{"title":"[MQTT] ลอง MQTT บน NodeJS เถอะครับ","link":"https://thanapon.info/nodejs-mqtt/","date":1573996290000,"content":"<p>ก่อนอื่นต้องบอกต้องอธิบายโปรโตคอล MQTT ก่อนนะครับว่าคืออะไร สำหรับคนที่เคยเล่นพวก IoT อะไรพวกนี้คงจะรู้จักดีเลยครับเพราะ MQTT กับตัว ESP32 หรือ ESP8266 นี้คือของคู่กันเลยครับ</p>\n\n\n\n<p>MQTT คืออะไร</p>\n\n\n\n<p>MQTT (Message Queueing Telemetry Transport protocol)คือโปรโตคอลที่ใช้สำหรับสื่อสารกันระหว่าง m2m หรือ machine to machine ซึ่งถูกออกแบบมาเพื่อรับส่งข้อมูลกันโดยจะมีตัวกลางในการรับส่งนั้นก็คือ MQTT Broker นั้นเองครับ ภายในโปรโตคอลจะมีรูปแบบการส่งแบบ publish(ผู้ส่ง) และ subscribe(ผู้รับ) การทำงานคือ ทั้ง subscribe และ publish จะต้องทำการเข้าร่วม topic เดียวกันก่อน ซึ่งสมมติ ผมเป็น publish เข้าร่วม topic ที่ชื่อว่า test, subscribe จะต้องเข้าร่วม topic ชื่อว่า test เช่นกัน ส่วนการส่งนั้น publish ก็แค่ทำหน้าที่ publish message ออกมาแล้ว message ก็จะถูกส่งไปหาตามผู้ที่ subscribe topic นั้นทั้งหมดเองครับ</p>\n\n\n\n<p>MQTT จะแบ่ง QOS สำหรับการรับส่งได้เป็น 3 ประเภทคือ</p>\n\n\n\n<ul><li>QOS0 : (at most once) คือส่งไปอย่างเดียวจะไม่รอรับ ACK จากปลายทาง</li><li>QOS1 : (at least once) คือหลังจากส่งไปแล้วจะรอรับ ACK ก่อนแล้วค่อยลบ message</li><li>QOS2 : (exactly once) หลังจากส่งข้อมูลไปแล้วจะรอรับ ACK จากปลายทางก่อนแล้วหลังจากนั้นจะทำการส่ง recheck flag ไปอีกรอบหนึ่ง</li></ul>\n\n\n\n<p>และเนื่องด้วยความสามารถทางด้าน physical ของ MQTT ที่มีขนาดเล็กอีกทั้งยังใช้ bandwidth ที่ต่ำกว่าพวก HTTP ทำให้ MQTT นั้นจะถูกประยุกต์ใช้กับอุปกรณ์ IoT ด้วยครับ</p>\n\n\n\n<h2>Mosquitto MQTT Broker</h2>\n\n\n\n<p>เมื่อพูดถึง MQTT Broker ทางด้านสาย IoT เราจะต้องนึกถึง Mosquitto เป็นอันดับต้นๆเสมอครับโดย Mosquitto นั้นเป็น MQTT Broker ซึ่งจะเป็นตัวจัดการ Data Broker Middleware สำหรับ Publish และ Subscribe โดยที่เราไม่ต้องไปยุ่งยากทำอะไรกับข้อมูลของเรา แค่ทำการติดตั้งแล้วก็สามารถใช้งานได้เลยครับ</p>\n\n\n\n<p>เริ่มต้นติดตั้ง Mosquitto เลยละกัน</p>\n\n\n\n<ul><li>อันดับแรกให้เราติดตั้งผ่าน terminal นะครับโดยเครื่องที่ผมจะติดตั้งเป็น Ubuntu OS นะครับ</li></ul>\n\n\n\n<pre>sudo apt-get install mosquitto mosquitto-client</pre>\n\n\n\n<ul><li>จากนั้นทำการทดสอบ subscribe topic โดยให้ทำการเปิดหน้า terminal ขึ้นมา 2 หน้าต่างด้วยกันนะครับซึ่งจะตั้งให้ terminal ตัวที่ 1 subscribe topic “test” ส่วนอีก terminal ตัวที่ 2 ให้ทำการ publish message “hello world” ผ่าน topic “test”</li></ul>\n\n\n\n<pre>//terminal 1\nmosquitto_sub -h localhost -t test\n//terminal 2\nmosquitto_pub -h localhost -t test -m \"hello world\" </pre>\n\n\n\n<p>ผลลัพท์ที่ได้คือ terminal ตัวที่ 1 จะมี message “hello world” ขึ้นมานะครับ</p>\n\n\n\n<div><pre><code>var mqtt = require('mqtt');\n\nconst MQTT_SERVER = \"Your Server Address\";\nconst MQTT_PORT = \"1883\";\n//if your server don't have username and password let blank.\nconst MQTT_USER = \"\"; \nconst MQTT_PASSWORD = \"\";\n\n// Connect MQTT\nvar client = mqtt.connect({\n    host: MQTT_SERVER,\n    port: MQTT_PORT,\n    username: MQTT_USER,\n    password: MQTT_PASSWORD\n});\n\nclient.on('connect', function () {\n    // Subscribe any topic\n    console.log(\"MQTT Connect\");\n    client.subscribe('test', function (err) {\n        if (err) {\n            console.log(err);\n        }\n    });\n});\n\n// Receive Message and print on terminal\nclient.on('message', function (topic, message) {\n    // message is Buffer\n    console.log(message.toString());\n});\n\nsetInterval(() =&gt; {\n    client.publish(\"test\", \"hello from NodeJS\");\n}, 5000);</code></pre></div>\n\n\n\n<ul><li>จากโปรแกรมด้านบนจะเป็นตัวอย่างสำหรับเชื่อมต่อเข้ากับ MQTT Broker ซึ่งหลังจากที่ MQTT เชื่อมต่อเข้ากับ Broker เสร็จแล้วตัวโปรแกรมจะทำการ subscribe topic “test” แล้วทำการวนลูปส่งข้อความ “hello from NodeJS” ทุกๆ 5 วินาทีครับ</li></ul>\n\n\n\n<div><figure><img src=\"https://miro.medium.com/max/1655/1*p99DrnSj2VIo8LvI-a17LQ.png\" /></figure></div>\n\n\n\n<ul><li>ซึ่งการทำงานของ MQTT จากรูปด้านบนเราจะเห็นได้ว่า ไม่ว่าตัวไหนก็ตามที่ทำการ subscribe topic นั้นๆ ใครที่ส่งข้อมูลอะไรมาก MQTT ก็จะทำการ broadcast ข้อมูลออกไปยังเครื่องที่ subscribe ไว้ไม่ว่าจะเป็น 10 เครื่อง หรือ 100 เครื่องก็จะได้รับข้อมูลทั้งหมดนะครับ</li></ul>\n\n\n\n<p>ก็เสร็จสิ้นสำหรับการส่งข้อความผ่าน MQTT กันนะครับผม สำหรับการประยุกต์ใช้ MQTT นั้นจริงๆจะมีอยู่มากมายเลยครับไม่ว่าจะเป็น Smart home โดยใช้ ESP32 หรือ ESP8266 ทำหน้าที่เป็น microcontroller ควบคุม relay ผ่าน MQTT ซึ่งใครที่มีพื้นฐานที่เป็น web developer หน่อยก็สามารถทำ web application สำหรับควบคุมไฟฟ้าในบ้านได้ง่ายๆด้วย MQTT + กับ <a href=\"https://medium.com/@thanapontapala/esp8266-sonoff-มาลอง-tasmota-firmware-สำหรับ-sonoff-กันครับ-97fbbbe18498\">Tasmota firmware</a> จากเรื่องคราวก่อนด้วยนะครับเพราะเนื่องจากว่า Tasmota firmware รองรับ MQTT อยู่แล้วด้วยเพียงแค่เราเข้าไปตั้งค่าตรงหัวข้อ configuration แล้วชี้มายัง MQTT Broker ของเราเท่านี้ก็สามารถใช้งาน MQTT ควบคุมได้แล้วครับ</p>\n\n\n\n<h2>สำหรับวันนี้ขอบคุณและสวัสดีครับ <img src=\"https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png\" /></h2>\n\n\n\n<blockquote><p><a href=\"http://thanapon.info/?p=92\">[ESP8266-Sonoff] มาลอง TASMOTA firmware สำหรับ Sonoff กันครับ</a></p><cite>พอดีได้มีโอกาสไปลองเล่น Sonoff มา ซึ่งรุ่นที่ได้ลองจะเป็น Module Sonoff Basic ลักษณะจะคล้ายๆกับบัลลาสต์เลยครับแต่ขนาดตัวจะเล็กกว่าประมาณครึ่งเลยที่เดียวครับ</cite></blockquote>\n\n\n\n<blockquote><p><a href=\"https://www.npmjs.com/package/mqtt\" target=\"_blank\">mqtt</a></p><cite>MQTT.js is a client library for the <a href=\"http://mqtt.org/\">MQTT</a> protocol, written in JavaScript for node.js and the browser.</cite></blockquote>\n<p>The post <a href=\"https://thanapon.info/nodejs-mqtt/\">[MQTT] ลอง MQTT บน NodeJS เถอะครับ</a> appeared first on <a href=\"https://thanapon.info\">Thanapon</a>.</p>","author":"thanapon.tap","siteTitle":"Thanapon","siteHash":"6a039c2f54d76e4c49227d80968f2a30de5427cc57525c047c383ea3563cde5f","entryHash":"16ee470dbd3c6f472f3fc4f99a9c58a12536572418292d1c85b36484a3f14c02","category":"Thai"}