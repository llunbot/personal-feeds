{"title":"Falling For Oklch: A Love Story Of Color Spaces, Gamuts, And CSS","link":"https://smashingmagazine.com/2023/08/oklch-color-spaces-gamuts-css/","date":1693229400000,"content":"<p>I woke up one morning in early 2022 and caught an article called “<a href=\"https://css-tricks.com/new-css-color-features-preview/\">A Whistle-Stop Tour of 4 New CSS Color Features</a>” over at CSS-Tricks.</p>\n<p>Wow, what a gas! A new and wider color gamut! New color spaces! New color functions! New syntaxes! It is truly a lot to take in.</p>\n<p>Now, I’m no color expert. But I enjoyed adding new gems to my CSS toolbox and made a note to come back to that article later for a deeper read. That, of course, led to a lot of fun rabbit holes that helped put the CSS Color Module Level 4 updates in a better context for me.</p>\n<p>That’s where Oklch comes into the picture. It’s a new color space in CSS that, according to experts smarter than me, <a href=\"https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/\">offers upwards of 50% more color than the sRGB gamut</a> we have worked with for so long because it supports a wider gamut of color.</p>\n<p>Color spaces? Gamuts? These are among many color-related terms I’m familiar with but have never really understood. It’s only now that my head is wrapping around these concepts and how they relate back to CSS, and how I use color in my own work.</p>\n<p>That’s what I want to share with you. This article is less of a comprehensive “how-to” guide than it is my own personal journey grokking new CSS color features. I actually like to this of this more as a “love story” where I fall for Oklch.</p>\nThe Deal With Gamuts And Color Spaces\n<p>I quickly learned that there’s no way to understand Oklch without at least a working understanding of the difference between <strong>gamuts</strong> and <strong>color spaces</strong>. My novice-like brain thinks of them as the same: a spectrum of colors. In fact, my mind goes straight to the color pickers we all know from apps like Figma and Sketch.</p>\n<p>I’ve always assumed that <em>gamut</em> is just a nerdier term for the available colors in a color picker and that a color picker is simply a convenient interface for choosing colors in the gamut.</p>\n<p>(Assumed. Just. Simply. Three words you never want to see in the same sentence.)</p>\n<p>Apparently not. A <strong>gamut</strong> really boils down to a range of something, which in this case, is a range of colors. That range might be based on a single point if we think of it on a single axis.</p>\n<p><img src=\"https://files.smashing.media/articles/oklch-color-spaces-gamuts-css/color-single-axis.jpg\" /></p>\n<p>Or it might be a range of multiple coordinates like we would see on a two-axe grid. Now the gamut covers a wider range that originates from the center and can point in any direction.</p>\n<p><img src=\"https://files.smashing.media/articles/oklch-color-spaces-gamuts-css/color-two-axes.jpg\" /></p>\n<p>The levels of those ranges can also constitute an axis, which results in some form of 3D space.</p>\n<p><img src=\"https://files.smashing.media/articles/oklch-color-spaces-gamuts-css/color-three-axes.jpg\" /></p>\n<p><a href=\"https://en.wikipedia.org/wiki/SRGB\">sRGB</a> is a gamut with an available range of colors. <a href=\"https://en.wikipedia.org/wiki/DCI-P3\">Display P3</a> is another gamut offering a wider range of colors.</p>\n<p>So, gamuts are ranges, and ranges need a reference to determine the upper and lower limits of those axes. That’s where we start talking about <em>color spaces</em>. A <strong>color space</strong> is what defines the format for plotting points on the gamut. While <a href=\"https://www.w3.org/Graphics/Color/Workshop/slides/talk/lilley\">more trained folks certainly have more technical explanations</a>, my basic understanding of color spaces is that they provide the map — or perhaps the “shape” — for the gamut and define how color is manipulated in it. So, sRGB is a color <em>gamut</em> that spans a <em>range</em> of colors, and Hex, RGB, and HSL (among others, of course) are the <em>spaces</em> we have to explore the gamut.</p>\n<p>That’s why you may hear a color space as having a “wider” or “narrower” gamut than another — it’s a range of possibilities within a shape.</p>\n<p>If I’ve piqued your interest enough, I’ve compiled a list of articles that will give you more thorough definitions of gamuts and color spaces <a href=\"#resources\">at the end of this article</a>.</p>\nWhy We Needed New Color Spaces\n<p>The short answer is that the sRGB gamut serves as the reference point for color spaces like Hex, RGB, and HSL that provide a narrower color gamut than what is available in the newer Display P3 gamut.</p>\n<p>We’re well familiar with many of <a href=\"https://www.w3.org/TR/css-color-4/#serializing-sRGB-values\">sRGB-based color notations and functions</a> in CSS. The values are essentially setting points along the gamut space with different types of coordinates.</p>\n<pre><code>  /* Hex */ #f8a100\n  /* RGB */ rgb(248, 161, 2)\n  /* HSL */ hsl(38.79 98% 49%)\n</code></pre>\n\n<p>For example, the <code>rgb()</code> function is designed to traverse the RGB color space by mixing red, blue, and green values to produce a point along the sRGB gamut.</p>\n<p><img src=\"https://files.smashing.media/articles/oklch-color-spaces-gamuts-css/srgb-vs-display-p3.png\" /></p>\n<p>If the difference between the two ranges in the image above doesn’t strike you as particularly significant or noticeable, that’s fair. I thought they were the same at first. But the Display P3 stripe is indeed a wider and smoother range of colors than the sRGB stripe above it when you examine it up close.</p>\n<p>The problem is that Hex, RGB, and HSL (among other existing spaces) only support the sRGB gamut. In other words, they are unable to map colors outside of the range of colors that sRGB offers. That means there’s no way to map them to colors in the Display P3 gamut. The traditional color formats we’ve used for a long time are simply incompatible with the range of colors that has started rolling out in new hardware. We needed a new space to accommodate the colors that new technology is offering us.</p>\n<h3>Dead Grey Zones</h3>\n<p>I love this term. It accurately describes an issue with the color spaces in the sRGB gamut — <a href=\"https://css-tricks.com/the-grey-dead-zone-of-gradients/\">greyish areas between two color points</a>. You can see it in the following demo.</p>\n<p><img src=\"https://files.smashing.media/articles/oklch-color-spaces-gamuts-css/hsl-cylinder-wikipedia.png\" /></p>\n<p>Oklch (as well as the other new spaces in the Level 4 spec) doesn’t have that issue. Hues are more like mountains, each with a different elevation.</p>\n<p><img src=\"https://files.smashing.media/articles/oklch-color-spaces-gamuts-css/oklch-picker-visuals.png\" /></p>\n<p>That’s why we needed new color spaces — to get around those dead grey zones. And we needed new color functions in CSS to produce coordinates on the space to select from the newly available range of colors.</p>\n<p>But there’s a catch. That mountain-shaped gamut of <a href=\"https://github.com/w3c/csswg-drafts/issues/7071\">Oklch doesn’t always provide a straight path between color points</a> which could result in clipped or unexpected colors between points. The issue appears to be case-specific depending on the colors in use, but that also seems to indicate that there are situations where using a different color space is <a href=\"https://codepen.io/argyleink/pen/OJObWEW\">going to yield better gradients</a>.</p>\n<h3>Consistent Lightness</h3>\n<p>It’s the consistent range of saturation in HSL muddying the waters that leads to another issue along this same train of thought: inconsistent levels of lightness between colors.</p>\n<p>The classic example is showing two colors in HSL with the same lightness value:</p>\n<p><img src=\"https://files.smashing.media/articles/oklch-color-spaces-gamuts-css/lch-vs-oklch.jpeg\" /></p>\n<p>The Oklab and Oklch color spaces were created to fix that shift. Black is more, well, black because the hues are more consistent in Oklab and Oklch than they are in LAB and LCH.</p>\n<p>So, that’s why it’s likely better to use the <code>oklch()</code> and <code>oklab()</code> functions in CSS than it is to use their <code>lch()</code> and <code>lab()</code> counterparts. There’s less of a shift happening in the hues.</p>\n<p>So, while Oklch/LCH and Oklab/LAB all use the same general color space, the Cartesian coordinates are the key difference. And I agree with Sitnik and Turner, who make the case that Oklch and LCH are easier to understand than LAB and Oklab. I wouldn’t be able to tell you the difference between LAB’s <code>a</code> and <code>b</code> values on the Cartesian coordinate system. But chroma and hue in LCH and Oklch? Sure! That’s as easy to understand as HSL but <em>better</em>!</p>\n<p>The reason I love Oklch over Oklab is that <em>lightness</em>, <em>chroma</em>, and <em>hue</em> are much more intuitive to me than <em>lightness</em> and a pair of Cartesian coordinates.</p>\n<p>And the reason I like Oklch better than HSL is because it produces more consistent results over a wider color gamut.</p>\nOKLCH And CSS\n<p>This is why you’re here, right? What’s so cool about all this is that we can start using Oklch in CSS today — there’s no need to wait around.</p>\n<p><em>“Browser support?”</em> you ask. We’re well covered, friends!</p>\n<p><img src=\"https://files.smashing.media/articles/oklch-color-spaces-gamuts-css/oklch-caniuse.png\" /></p>\n<p>In fact, <a href=\"https://www.mozilla.org/en-US/firefox/113.0/releasenotes/\">Firefox 113</a> shipped support for Oklch a mere ten days before I started writing the first draft of this article. It’s oven fresh!</p>\n<p>Using <code>oklch()</code> is a whole lot easier to explain now that we have all the context around color spaces and gamuts and how the new CSS Color Module Level 4 color functions fit into the picture.</p>\n<p>I think the most difficult thing for me is working with different ranges of values. For example, <code>hsl()</code> is easy for me to remember because the hue is measured in degrees, and both saturation and lightness use the same <code>0%</code> to <code>100%</code> range.</p>\n<p><code>oklch()</code> is different, and that’s by design to not only access the wider gamut but also produce <a href=\"https://www.w3.org/Graphics/Color/Workshop/slides/talk/lilley\">perceptively consistent results even as values change</a>. So, while we get what I’m convinced is a way better tool for specifying color in CSS, there is a bit of a learning curve to remembering the chroma value because it’s what separates OKLCH from HSL.</p>\n<h3>The <code>oklch()</code> Values</h3>\n<p>Here they are:</p>\n<ul>\n<li><strong><code>l</code></strong>: This controls the <em>lightness</em> of the color, and it’s measured in a range of <code>0%</code> to <code>100%</code> just like HSL.</li>\n<li><strong><code>c</code></strong>: This is the <em>chroma</em> value, measured in decimals between <code>0</code> and <code>0.37</code>.</li>\n<li><strong><code>h</code></strong>: This is the same ol’ hue we have in HSL, measured in the same range of <code>0deg</code> to <code>360deg</code>.</li>\n</ul>\n<p>Again, it’s <em>chroma</em> that is the biggest learning curve for me. Yes, I had to look it up because I kept seeing it used somewhat synonymously with <em>saturation</em>.</p>\n<p>Chroma and saturation are indeed different. And there are way better definitions of them out there than what I can provide. For example, I like how <a href=\"https://www.smashingmagazine.com/2010/02/color-theory-for-designers-part-2-understanding-concepts-and-terminology/\">Cameron Chapman explains it</a>:</p>\n<blockquote>“Chroma refers to the purity of a color. A hue with high chroma has no black, white, or gray added to it. Conversely, adding white, black, or gray reduces its chroma. It’s similar to saturation but not quite the same. Chroma can be thought of as the brightness of a color in comparison to white.”<br /><br />— Cameron Chapman</blockquote>\n\n<p>I mentioned that chroma has an upper limit of <code>0.37</code>. But it’s actually more nuanced than that, as <a href=\"https://evilmartians.com/chronicles/oklch-in-css-why-quit-rgb-hsl\">Sitnik and Turner explain</a>:</p>\n<blockquote>“[Chroma] goes from <code>0</code> (gray) to infinity. In practice, there is actually a limit, but it depends on a screen’s color gamut (P3 colors will have bigger values than sRGB), and each hue has a different maximum chroma. For both P3 and sRGB, the value will always be below <code>0.37</code>.”<br /><br />— Andrey Sitnik and Travis Turner</blockquote>\n\n<p>I’m so glad there are smart people out there to help sort this stuff out.</p>\nThe <code>oklch()</code> Syntax\n<p>The formal syntax? Here it is, <a href=\"https://www.w3.org/TR/css-color-4/#specifying-oklab-oklch\">straight from the spec</a>:</p>\n<pre><code>oklab() = oklab( [ &lt;percentage&gt; | &lt;number&gt; | none]\n    [ &lt;percentage&gt; | &lt;number&gt; | none]\n    [ &lt;percentage&gt; | &lt;number&gt; | none]\n    [ / [&lt;alpha-value&gt; | none] ]? )\n</code></pre>\n\n<p>Maybe we can “dumb” it down a bit:</p>\n<pre><code>oklch( [ lightness ] [ chroma ] [ hue ] )\n</code></pre>\n\n<p>And those values, again, are measured in different units:</p>\n<div>\n<pre><code>oklch( [ lightness = &lt;percentage&gt; ] [ chroma &lt;number&gt; ] [ hue &lt;degrees&gt; ]  )\n</code></pre>\n</div>\n\n<p>Those units have min and max limits:</p>\n<div>\n<pre><code>oklch( [ lightness = &lt;percentage (0%-100%)&gt; ] [ chroma &lt;number&gt; (0-0.37) ] [ hue &lt;degrees&gt; (0deg-360deg) ]  )\n</code></pre>\n</div>\n\n<p>An example might be the following:</p>\n<pre><code>color: oklch(70.9% 0.195 47.025);\n</code></pre>\n\n<p>Did you notice that there are no commas between values? Or that there is no unit on the hue? That’s thanks to the updated syntax defined in the CSS Color Module Level 4 spec. It also applies to functions in the sRGB gamut:</p>\n<pre><code>/* Old Syntax */\nhsl(26.06deg, 99%, 51%)\n\n/* New Syntax */\nhsl(26.06 99% 51%)\n</code></pre>\n\n<p>Something else that’s new? There’s no need for a separate function to set alpha transparency! Instead, we can indicate that with a <code>/</code> before the alpha value:</p>\n<pre><code>/* Old Syntax */\nhsla(26.06deg, 99%, 51%, .75)\n\n/* New Syntax */\nhsl(26.06 99% 51% / .75)\n</code></pre>\n\n<p>That’s why there is no <code>oklcha()</code> function — the new syntax allows <code>oklch()</code> to handle transparency on its own, like a grown-up.</p>\n<h3>Providing A Fallback</h3>\n<p>Yeah, it’s probably worth providing a fallback value for <code>oklch()</code> even if it does enjoy great browser support. Maybe you have to support a legacy browser like IE, or perhaps the user’s monitor or screen simply doesn’t support colors in the Display P3 gamut.</p>\n<p>Providing a fallback doesn’t have to be hard:</p>\n<pre><code>color: hsl(26.06 99% 51%);\ncolor: oklch(70.9% 0.195 47.025);\n</code></pre>\n\n<p>There are “smarter” ways to provide a fallback, like, say, using <code>@supports</code>:</p>\n<pre><code>.some-class {\n  color: hsl(26.06 99% 51%);\n}\n\n@supports (oklch(100% 0 0)) {\n  .some-class {\n    color: oklch(70.9% 0.195 47.025);\n  }\n}\n</code></pre>\n\n<p>Or detecting Display P3 support on the <code>@media</code> side of things:</p>\n<pre><code>.some-class {\n  color: hsl(26.06 99% 51%);\n}\n\n@media (color-gamut: p3) {\n  .some-class {\n    color: oklch(70.9% 0.195 47.025);\n  }\n}\n</code></pre>\n\n<p>Those all seem overly verbose compared to letting the cascade do the work. Maybe there’s a good reason for using media queries that I’m overlooking.</p>\n<h3>There’s A Polyfill</h3>\n<p>Of course, there’s one! There are two, in fact, that I am aware of: <a href=\"https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-oklab-function\"><code>postcss-oklab-function</code></a> and <a href=\"https://github.com/LeaVerou/color.js\">color.js</a>. The PostCSS plugin will preprocess support for you when compiling to CSS. Alternatively, color.js will convert it on the client side.</p>\nThat’s Oklch 🥰\n<p>O, Oklch! How much do I love thee? Let me count the ways:</p>\n<ul>\n<li>You support a wider gamut of colors that make my designs pop.</li>\n<li>Your space transitions between colors smoothly, like soft butter.</li>\n<li>You are as easy to understand as my former love, HSL.</li>\n<li>You are well-supported by all the major browsers.</li>\n<li>You provide fallbacks for handling legacy browsers that will never have the pleasure of knowing you.</li>\n</ul>\n<p>I know, I know. Get a room, right?!</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://www.w3.org/TR/css-color-4/\">CSS Color Module Level 4</a>, W3C</li>\n<li><a href=\"https://www.w3.org/Graphics/Color/Workshop/slides/talk/lilley\">W3C Workshop on Wide Color Gamut and High Dynamic Range for the Web</a>, Chris Lilley (W3C)</li>\n<li>“<a href=\"https://evilmartians.com/chronicles/oklch-in-css-why-quit-rgb-hsl/\">OKLCH in CSS: why we moved from RGB and HSL</a>,” Andrey Sitnik and \nTravis Turner</li>\n<li>“<a href=\"https://www.joshwcomeau.com/css/color-formats/\">Color Formats in CSS</a>,” Joshua Comeau</li>\n<li>“<a href=\"https://developer.chrome.com/articles/high-definition-css-color-guide/\">High Definition CSS Color Guide</a>,” Adam Argyle</li>\n<li>“<a href=\"https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/\">LCH colors in CSS: what, why, and how?</a>,” Lea Verou</li>\n<li>“<a href=\"https://chriscoyier.net/2023/01/22/ok-oklch-👑/\">OK, OKLCH 👑</a>,” Chris Coyier</li>\n<li>“<a href=\"https://keithjgrant.com/posts/2023/04/its-time-to-learn-oklch-color/\">It’s Time to Learn oklch Color</a>,” Keith J. Grant</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2010/02/color-theory-for-designers-part-2-understanding-concepts-and-terminology/\">Color Theory For Designers, Part 2: Understanding Concepts And Color Terminology</a>,” Cameron Chapman (Smashing Magazine)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\">HSL and HSV</a>, Wikipedia</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"ac12612c0449fd31cc7f5b51bbee39e1b18a9fabb5907edd775f3fe88189979b","category":"Tech"}