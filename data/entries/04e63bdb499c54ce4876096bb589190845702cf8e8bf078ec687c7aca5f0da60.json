{"title":"New – Deployment Pipelines Reference Architecture and Reference Implementations","link":"https://aws.amazon.com/blogs/aws/new_deployment_pipelines_reference_architecture_and_-reference_implementations/","date":1675110003000,"content":"<p>Today, we are launching <a href=\"https://pipelines.devops.aws.dev/\">a new reference architecture and a set of reference implementations</a> for enterprise-grade deployment pipelines. A deployment pipeline automates the building, testing, and deploying of applications or infrastructures into your AWS environments. When you deploy your workloads to the cloud, having deployment pipelines is key to gaining agility and lowering time to market.</p> \n<p>When I talk with you at conferences or on social media, I frequently hear that our documentation and tutorials are good resources to get started with a new service or a new concept. However, when you want to scale your usage or when you have complex or enterprise-grade use cases, you often lack resources to dive deeper.</p> \n<p>This is why we have created over the years <a href=\"https://aws.amazon.com/architecture/?cards-all.sort-by=item.additionalFields.sortDate&amp;cards-all.sort-order=desc&amp;awsf.content-type=content-type%23reference-arch-diagram&amp;awsf.methodology=*all&amp;awsf.tech-category=tech-category%23devtools&amp;awsf.industries=*all&amp;awsf.business-category=*all&amp;awsm.page-cards-all=1\">hundreds of reference architectures based on real-life use cases</a> and also <a href=\"https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html\">the security reference architecture</a>. Today, we are adding a new reference architecture to this collection.</p> \n<p>We used<a href=\"https://aws.amazon.com/builders-library/automating-safe-hands-off-deployments/\"> the best practices and lessons learned at Amazon</a> and with hundreds of customer projects to create this deployment pipeline reference architecture and implementations. They go well beyond the typical “Hello World” example: They document how to architect and how to implement complex deployment pipelines with multiple environments, multiple AWS accounts, multiple Regions, manual approval, automated testing, automated code analysis, etc. When you want to increase the speed at which you deliver software to your customers through DevOps and continuous delivery, this new reference architecture shows you how to combine AWS services to work together. They document the mandatory and optional components of the architecture.</p> \n<p>Having an architecture document and diagram is great, but having an implementation is even better. Each pipeline type in the reference architecture has at least one reference implementation. One of the reference implementations uses an <a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit (AWS CDK)</a> application to deploy the reference architecture on your accounts. It is a good starting point to study or customize the reference architecture to fit your specific requirements.</p> \n<p>You will find this reference architecture and its implementations at <a href=\"https://pipelines.devops.aws.dev\">https://pipelines.devops.aws.dev</a>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/19/2023-01-19_17-18-19.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/19/2023-01-19_17-18-19.png\" alt=\"Deployment pipeline reference architecture\" width=\"636\" height=\"555\" /></a></p> \n<p><span><strong>Let’s Deploy a Reference Implementation<br /> </strong></span>The new deployment pipeline reference architecture demonstrates how to build a pipeline <a href=\"https://pipelines.devops.aws.dev/application-pipeline/\">to deploy a Java containerized application and a database</a>. It comes with two reference implementations. We are working on additional pipeline types to deploy Amazon EC2 AMIs, manage a fleet of accounts, and manage dynamic configuration for your applications.</p> \n<p>The sample application is developed with <a href=\"https://spring.io/projects/spring-boot\">SpringBoot</a>. It runs on top of <a href=\"https://aws.amazon.com/corretto/\">Corretto</a>, the Amazon-provided distribution of the OpenJDK. The application is packaged with the CDK and is deployed on <a href=\"https://aws.amazon.com/fargate/\">AWS Fargate</a>. But the application is not important here; you can substitute your own application. The important parts are the infrastructure components and the pipeline to deploy an application. For this pipeline type, we provide two reference implementations. One deploys the application using <a href=\"https://codecatalyst.aws/explore\">Amazon CodeCatalyst</a>, the new service that <a href=\"https://aws.amazon.com/blogs/aws/announcing-amazon-codecatalyst-preview-a-unified-software-development-service/\">we announced at re:Invent 2022</a>, and one uses <a href=\"https://aws.amazon.com/codepipeline/\">AWS CodePipeline</a>. This is the one I choose to deploy for this blog post.</p> \n<p>The pipeline starts building the applications with <a href=\"https://aws.amazon.com/codebuild/\">AWS CodeBuild</a>. It runs the unit tests and also runs <a href=\"https://aws.amazon.com/codeguru/\">Amazon CodeGuru</a> to review <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/how-codeguru-reviewer-works.html\">code quality and security</a>. Finally, it runs <a href=\"https://github.com/aquasecurity/trivy\">Trivy</a> to detect additional security concerns, such as known vulnerabilities in the application dependencies. When the build is successful, the pipeline deploys the application in three environments: beta, gamma, and production. It deploys the application in the beta environment in a single Region. The pipeline runs end-to-end tests in the beta environment. All the tests must succeed before the deployment continues to the gamma environment. The gamma environment uses two Regions to host the application. After deployment in the gamma environment, the deployment into production is subject to manual approval. Finally, the pipeline deploys the application in the production environment in six Regions, with three waves of deployments made of two Regions each.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/16/pipeline.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/16/pipeline.png\" alt=\"Deployment Pipelines Reference Architecture\" width=\"931\" height=\"1101\" /></a></p> \n<p>I need four AWS accounts to deploy this reference implementation: one to deploy the pipeline and tooling and one for each environment (beta, gamma, and production). At a high level, there are two deployment steps: first, I <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/bootstrapping.html\">bootstrap the CDK</a> for all four accounts, and then I create the pipeline itself in the toolchain account. You must plan for 2-3 hours of your time to prepare your accounts, create the pipeline, and go through a first deployment.</p> \n<p>Once the pipeline is created, it builds, tests, and deploys the sample application from its source in <a href=\"https://aws.amazon.com/codecommit/\">AWS CodeCommit</a>. You can commit and push changes to the application source code and see it going through the pipeline steps again.</p> \n<p>My colleague <a href=\"https://www.linkedin.com/in/irshad-buchh-71a077b/\">Irshad Buchh</a> helped me try the pipeline on my account. He <a href=\"https://github.com/aws-samples/aws-deployment-pipeline-reference-architecture/tree/main/examples/cdk-application-pipeline\">wrote a detailed README with step-by-step instructions</a> to let you do the same on your side. <a href=\"https://pipelines.devops.aws.dev/\">The reference architecture that describes this implementation in detail</a> is available on <a href=\"https://pipelines.devops.aws.dev/\">this new web page</a>. The application source code, the AWS CDK scripts to deploy the application, and the AWS CDK scripts to create the pipeline itself are all <a href=\"https://github.com/aws-samples/aws-deployment-pipeline-reference-architecture\">available on AWS’s GitHub</a>. Feel free to <a href=\"https://github.com/aws-samples/aws-deployment-pipeline-reference-architecture/pulls\">contribute</a>, <a href=\"https://github.com/aws-samples/aws-deployment-pipeline-reference-architecture/issues\">report issues or suggest improvements</a>.</p> \n<p><span><strong>Available Now<br /> </strong></span>The deployment pipeline reference architecture and its reference implementations are available today, free of charge. If you decide to deploy a reference implementation, we will charge you for the resources it creates on your accounts. You can use <a href=\"https://github.com/aws-samples/aws-deployment-pipeline-reference-architecture/tree/main/examples/cdk-application-pipeline\">the provided AWS CDK code</a> and <a href=\"https://github.com/aws-samples/aws-deployment-pipeline-reference-architecture/blob/main/examples/cdk-application-pipeline/README.md\">the detailed instructions</a> to deploy this pipeline on your AWS accounts. <a href=\"https://github.com/aws-samples/aws-deployment-pipeline-reference-architecture/tree/main/examples/cdk-application-pipeline\">Try them today!</a></p> \n<p><a href=\"https://twitter.com/sebsto\">-- seb</a></p>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"04e63bdb499c54ce4876096bb589190845702cf8e8bf078ec687c7aca5f0da60","category":"Tech"}