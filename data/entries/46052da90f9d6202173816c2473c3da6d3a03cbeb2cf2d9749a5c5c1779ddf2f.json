{"title":"Automate networking across Google Cloud runtimes with Consul and Apigee","link":"https://www.hashicorp.com/blog/automate-networking-across-google-cloud-runtimes-with-consul-and-apigee","date":1699027200000,"content":"<p><a href=\"https://www.consul.io/\">HashiCorp Consul</a> is a service networking platform that can be used to automate networking across multiple cloud runtimes, including Google Cloud. Consul now includes <a href=\"https://www.hashicorp.com/blog/consul-1-16-enhances-service-mesh-reliability-user-experience-and-security\">Envoy extension capabilities</a> that allow operators to offload service-to-service authorization (AuthZ) to external tools and platforms. This unlocks more options to authorize traffic based on more conditions such as allow/deny based on business hours.</p>\n\n<p>The <a href=\"https://github.com/hashicorp-education/learn-consul-apigee-external-authz\">Apigee adapter for Envoy with Consul</a> is a prime example of Consul’s Envoy extension capabilities. In this post, you’ll learn about the benefits you can gain from this integration along with how it works and how to set it up. Apigee’s implementation requires an API key, JWT, or a third-party JWT to be passed between services in order to allow traffic. Once you have one of those, you’re ready to get started.</p>\n\n<h2>HashiCorp Consul</h2>\n\n<p>HashiCorp Consul is a service networking solution that provides global service discovery and service mesh capabilities. With Consul, platform operators can ensure the least privileged access between services based on a service identity rather than relying on firewalls to authorize communication based on IP addresses. </p>\n\n<p>One of the primary service mesh capabilities is service authorization: the process of allowing or denying service-to-service communication. In Consul 1.16 and above, this authorization capability can also be offloaded onto an external authority, like Apigee.</p>\n\n<h2>Apigee</h2>\n\n<p><a href=\"https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee\">Apigee</a> is Google Cloud's native API management platform that can be used to build, manage, and secure APIs for any use case, environment, or scale. Apigee offers high-performance API proxies to create a consistent, reliable interface for your backend services. The proxy layer gives you granular control over security, rate limiting, quotas, analytics, and more for all of your services.</p>\n\n<h2>Manage service-to-service communication across environments</h2>\n\n<p>Consul’s integration with Apigee combines Apigee’s extensive API lifecycle management features with Consul’s ability to authenticate, encrypt, and control traffic across any public or private cloud and across multi-runtime environments. In addition, Consul provides Apigee users with the ability to automate and offload mTLS authentication and encryption between network services, while still controlling authorization from a centralized cloud control plane.</p>\n\n<p>While you can install Apigee onto your own infrastructure, a full deployment of Apigee may be undesirable due to the size and complexity required to support its full feature set. Deploying the Apigee API management component close to target applications reduces the network latency. </p>\n\n<p>The solution proposed here is to install the <a href=\"https://cloud.google.com/apigee/docs/api-platform/envoy-adapter/v2.0.x/concepts\">Apigee remote Envoy service</a> and onboard that service onto the Consul service mesh to enforce authorization policies provided by the central Apigee authority residing in Google Cloud.</p>\n\n<p>Benefits of the integration include:</p>\n\n<ul>\n<li>Availability of the full suite of Apigee Analytics metrics, dashboards, and APIs.</li>\n<li>Keeping API traffic within the enterprise-approved boundaries for security or compliance purposes</li>\n<li>Asynchronous communication with Apigee, allowing API traffic data to be captured and sent to Apigee without affecting latency</li>\n<li>Resilience against temporary communication interruptions with the management plane</li>\n</ul>\n\n<p>Over time, however, an interruption can lead to a loss of functionality. The adapter requires communication with the management plane for:</p>\n\n<ul>\n<li>Retrieving fresh tokens from Apigee</li>\n<li>Verifying API keys (connection is required for the first verification, after which it is cached)</li>\n<li>Enforcing quotas</li>\n<li>Sending analytics data to the management plane</li>\n</ul>\n\n<p>For more information on the adapter, check out Google’s <a href=\"https://cloud.google.com/apigee/docs/api-platform/envoy-adapter/v2.0.x/concepts\">documentation</a>.  </p>\n\n<h2>How does it work?</h2>\n\n<p>The Consul Envoy extension system allows modification of Consul-generated Envoy resources without customizing the Consul binary, enabling additional Envoy features for service mesh traffic that passes through an Envoy proxy. You can learn more about Envoy extension and <a href=\"https://developer.hashicorp.com/consul/docs/connect/proxies/envoy-extensions#supported-extensions\">supported extensions here</a>.</p>\n\n<p>Apigee integrates with Consul using the<a href=\"https://developer.hashicorp.com/consul/docs/connect/proxies/envoy-extensions#external-authorization\"> external authorization</a> extension type. The diagram below illustrates the sequence of six events when a service attempts to communicate with another upstream service. The Apigee Remote Service asynchronously polls the external AuthZ management plane and downloads proxy, API product, and other configurations that it needs to respond to authorization requests.</p>\n<img src=\"https://www.datocms-assets.com/2885/1698940976-arch.png\" alt=\"Consul\" /><ol>\n<li>Service A (client app) tries to access Service B (service backend) in the Consul service mesh. Communication is routed through the local Envoy proxy on Service A.</li>\n<li>The Envoy proxy on Service A sends traffic to the Envoy proxy on Service B along with the authorization key.</li>\n<li>The Envoy proxy on Service B passes the security context (using HTTP headers) to the Apigee Remote Service.</li>\n<li>The Apigee Remote Service acts as a policy decision point (PDP) and advises the Envoy proxy to allow or deny access to the API consumer for the request.</li>\n<li>A response is sent back to the Envoy proxy on Service B.</li>\n<li>If the request call is allowed, the Envoy proxy on Service B forwards the traffic to Service B (client backend).</li>\n</ol>\n\n<h3>Configuration requirements</h3>\n\n<p>For a smooth integration of Apigee with Consul, complete the following prerequisites: </p>\n\n<ol>\n<li><strong>Install Apigee:</strong> Apigee can be provisioned in Google Cloud. For more information please refer to the <a href=\"https://cloud.google.com/apigee/pricing\">Google Cloud documentation</a>.</li>\n<li><strong>Install the Envoy adapter for Apigee:</strong> The Envoy adapter enables the remote service. Find more information in the <a href=\"https://cloud.google.com/apigee/docs/api-platform/envoy-adapter/v2.0.x/reference\">Apigee Envoy adapter documentation</a>.</li>\n<li><strong>Install HashiCorp Consul</strong>: For more information, please refer to the <a href=\"https://developer.hashicorp.com/consul/docs/install\">Consul installation guide</a>.</li>\n</ol>\n\n<p>Once you've completed these prerequisites, integrating Apigee with your Consul deployment you’ll need to use a Consul configuration entry called a service default. These entries encapsulate essential configuration parameters and dictate the behavior of each service within the service mesh.</p>\n\n<p>A service default should be created for both the <code>apigee-remote-service-envoy</code> service and for any additional service that requires authorization from Apigee. Below are some examples of the service default files.</p>\n\n<p><strong>Service default for the <code>apigee-remote-service-envoy</code> service</strong></p>\n\n<p>The service default below is used to configure the <code>apigee-remote-service</code> as a <code>grpc</code> service.</p>\n<pre><code>Kind = \"service-defaults\"\nName = \"apigee-remote-service-envoy\"\nProtocol = \"grpc\"</code></pre><p><strong>Service default with external authorization extension for each destination service</strong></p>\n\n<p>As mentioned above, a service default should also be created for each service that has inbound traffic and requires authorization from Apigee. These service defaults include an <code>EnvoyExtensions</code> section that allows the Envoy filters to route requests to the <code>apigee-remote-service-envoy</code>, which acts as the external authorization system. </p>\n\n<p>Each request is authorized by Apigee, which makes access control decisions based on the metadata extracted from the requests. The example service default below will ensure authorization is given by Apigee before inbound communication is allowed to the <code>api</code> service.</p>\n<pre><code>Kind = \"service-defaults\"\nName = \"api\"\nEnvoyExtensions = [\n  {\n    Name = \"builtin/ext-authz\"\n    Arguments = {\n      ProxyType = \"connect-proxy\"\n      Config = {\n        GrpcService = {\n          Target = {\n            Service = {\n              Name = \"apigee-remote-service-envoy\"\n            }\n          }\n        }\n      }\n    }\n  }\n]</code></pre><h2>Conclusion</h2>\n\n<p>In today’s modern cloud world, most customers have standardized their platform of choice for different market segments. This best-of-breed approach allows organizations to standardize around their preferred provider for cloud, identity, secrets management, observability, etc. This makes it mandatory that all vendors integrate well with their counterparts in the ecosystem. </p>\n\n<p>Consul supports this model and integrates well to extend capabilities to many existing platforms. Whether customers are looking to integrate Consul with their existing secrets management and PKI platform like <a href=\"https://developer.hashicorp.com/consul/docs/connect/ca/vault\">HashiCorp Vault</a>, centralize observability with <a href=\"https://www.datadoghq.com/blog/consul-datadog/\">Datadog</a>, or offload service-to-service authorization to <a href=\"https://cloud.google.com/apigee/docs\">Apigee</a>, Consul has the flexibility to accommodate many environments. </p>\n\n<p>For a full tutorial on how HashiCorp Consul integrates with Apigee follow the <a href=\"https://github.com/hashicorp-education/learn-consul-apigee-external-authz\">learn guide here</a>.</p>\n","author":"Gautam Baghel","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"46052da90f9d6202173816c2473c3da6d3a03cbeb2cf2d9749a5c5c1779ddf2f","category":"Tech"}