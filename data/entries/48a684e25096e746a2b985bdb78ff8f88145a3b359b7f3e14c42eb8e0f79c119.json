{"title":"Introducing Amazon Braket Hybrid Jobs – Set Up, Monitor, and Efficiently Run Hybrid Quantum-Classical Workloads","link":"https://aws.amazon.com/blogs/aws/introducing-amazon-braket-hybrid-jobs-set-up-monitor-and-efficiently-run-hybrid-quantum-classical-workloads/","date":1638204588000,"content":"<p>I find quantum computing fascinating! At its simplest level, it extends the concept of <strong>bits</strong>, that have <code>0</code> or <code>1</code> values, with quantum bits, or <strong>qubits</strong>, that can have a combination of two different (quantum) states.</p> \n<p>Two characteristics make qubits really interesting:</p> \n<ul> \n <li>When you look at the value of a qubit, you get only one of the two possible states with a probability that depends on how its own states are combined.</li> \n <li>Multiple qubits can be “connected” together (this is called quantum entanglement) so that by changing the state of one, even just by reading its value, you alter the states of the others.</li> \n</ul> \n<p>These characteristics come from low-level properties described by quantum mechanics, a fundamental theory in physics that provides a description of the physical properties of nature at atomic and subatomic scales. Luckily, we don’t need a degree in quantum mechanics to use quantum computing in the same way we don’t need to be expert in semiconductors to use an ordinary computer.</p> \n<p>Using qubits, researchers are designing new algorithms that have the potential to be much faster than what classical computers can achieve. To help speed up scientific research and software development for quantum computing, we <a href=\"https://aws.amazon.com/blogs/aws/amazon-braket-get-started-with-quantum-computing/\">introduced Amazon Braket at re:Invent 2019</a>. A fully managed quantum computing service, <a href=\"https://aws.amazon.com/braket/\">Amazon Braket</a> allows you to build, test, and run quantum algorithms on simulators and quantum computers.</p> \n<p><span><strong>Hybrid Algorithms and Quantum Processing Units (QPUs)<br /> </strong></span>Quantum algorithms, which would be transformational in many different areas, require the execution of hundreds of thousands to millions of quantum gates. Unfortunately, the current generation of QPUs suﬀer from noise, creating errors that limit operations to only a few hundreds or thousands of gates before the errors take over.</p> \n<p>To help solve this, we can take inspiration from machine learning: instead of using fixed quantum circuits, the logic that implements the algorithm, we let the algorithm “learn” by adjusting the parameters that tune the circuit to have a better chance of solving a given problem by adapting to the noise in a particular device (think of them as “self-learning quantum algorithms”).</p> \n<p>This is similar to computer vision: instead of hand-crafting the features to distinguish a dog from a cat (which is notoriously difficult for a computer), machine learning algorithms “learn” the right features by iteratively adjusting parameters of a neural network.</p> \n<p>A rapidly emerging area of research in quantum computing uses QPUs, the processors used by quantum computers, in the same way as GPUs are used in machine learning: Quantum circuits are parameterized, initialized with some values, and then run on the QPU. Like the weights in a neural network, these parameters are then iteratively adjusted based on the results of the computation. These so-called <strong>hybrid algorithms</strong> rely on rapid, iterative computations between classical computers and QPUs.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/11/aws-braket-jobs-hybrid-1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/11/aws-braket-jobs-hybrid-1-1024x439.png\" /></a></p> \n<p>To run hybrid algorithms, you need to manually set up a classical infrastructure, install the required software, and manage the interaction between your quantum and classical compute processes for the duration of your hybrid algorithm. You then need to build custom monitoring solutions to visualize the progress of your algorithm to make sure it converges to the solution as expected or intervene if necessary to adjust the parameters of the algorithm.</p> \n<p>Another big challenge is that QPUs are shared, inelastic resources, and you compete with others for access. This can slow down the execution of your algorithm. A single large workload from another customer can bring the algorithm to a halt, potentially extending your total runtime for hours. This is not only inconvenient but also impacts the quality of the results because today’s QPUs need periodic re-calibration, which can invalidate the progress of a hybrid algorithm. In the worst case, the algorithm fails, wasting budget and time.</p> \n<p><span><strong>Introducing Amazon Braket Hybrid Jobs<br /> </strong></span>Today, I am happy to introduce <strong>Amazon Braket Hybrid Jobs</strong>, a new capability of Amazon Braket that simplifies the process of setting up, monitoring, and efficiently executing hybrid quantum-classical algorithms. Jobs are fully managed so you can avoid extensive infrastructure and software management and confidently execute your algorithms quickly and predictably, with on-demand <strong>priority access</strong> to QPUs.</p> \n<p>When you create a job, Amazon Braket spins up the job instance (providing a CPU environment based on an <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instance), executes the algorithm (using quantum hardware or simulators), and releases the resources once the job is completed so that you only pay for what you use. You can also define custom metrics for algorithms, which are automatically logged by <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> and displayed in near real-time in the Amazon Braket console as the algorithm runs. This provides you with live insights into how your algorithm is progressing, creating the opportunity to adjust your algorithm as necessary and innovate more quickly.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/17/amazon-braket-hybrid-jobs.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/17/amazon-braket-hybrid-jobs-1024x411.png\" /></a></p> \n<p>To run hybrid algorithms as jobs, you can define your algorithm using the <a href=\"https://github.com/aws/amazon-braket-sdk-python\">Amazon Braket SDK</a> or with <a href=\"https://pennylane.ai/\">PennyLane</a>, an open-source library for hybrid quantum computing. Let’s see how that works in practice with a couple of examples.</p> \n<p><span><strong>Using Amazon Braket Hybrid Jobs<br /> </strong></span>Before building a trainable quantum algorithm, let’s get started by running a series of fixed quantum operations, what we’ll refer to as quantum <strong>tasks</strong>. I use Python and the <a href=\"https://github.com/aws/amazon-braket-sdk-python\">Amazon Braket SDK</a> to define a <strong>circuit</strong> that constructs what is called a <a href=\"https://en.wikipedia.org/wiki/Controlled_NOT_gate#Constructing_the_Bell_State_%7F'%22%60UNIQ--postMath-00000039-QINU%60%22'%7F\">bell state</a>, a state which has a fifty-fifty chance of resolving to each of two states. It’s the quantum computing equivalent of tossing a coin.</p> \n<p>Here’s the content of the <code>algorithm_script.py</code> file:</p> \n<pre><code>import os\n\nfrom braket.aws import AwsDevice\nfrom braket.circuits import Circuit\nfrom braket.jobs import save_job_result\n\n\ndef start_here():\n\n    print(\"Test job started!\")\n\n    device = AwsDevice(os.environ[\"AMZN_BRAKET_DEVICE_ARN\"])\n\n    results = []\n    \n    bell = Circuit().h(0).cnot(0, 1)\n    for count in range(5):\n        task = device.run(bell, shots=100)\n        print(task.result().measurement_counts)\n        results.append(task.result().measurement_counts)\n\n    save_job_result({ \"measurement_counts\": results })\n    \n    print(\"Test job completed!\")</code></pre> \n<p>This script uses the environment variable <code>AMZN_BRAKET_DEVICE_ARN</code> to instantiate the <strong>device</strong> that I select when creating the job.</p> \n<p>Quantum computing is probabilistic. For this reason, circuits need to be evaluated multiple times to get accurate results. A single run is called a <strong>shot</strong>. The higher the number of shots, the better the accuracy of the result. In this case, the circuit is run for 100 shots.</p> \n<p>I use the <code>save_job_result</code> function to store the <strong>results</strong> of my job so that I can analyze them at the end.</p> \n<p>In the Amazon Braket console, I choose <strong>Jobs</strong> on the left panel and then <strong>Create job</strong>. To start, I give the job a name.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/10/amazon-braket-create-job.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/10/amazon-braket-create-job-1024x284.png\" /></a></p> \n<p>Then, I pass the file with the algorithm. The CPU component of the hybrid algorithm runs in a container, and I can choose which container image to use. For example, I can use a pre-built container image that includes software my algorithm depends on, such as <a href=\"https://pennylane.ai/\">PennyLane</a>, <a href=\"https://www.tensorflow.org/\">TensorFlow</a>, or <a href=\"https://pytorch.org/\">PyTorch</a>, or bring my own custom image. I select the <strong>Base</strong> container image because I don’t have external dependencies.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/10/amazon-braket-create-job-algorithm-container.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/10/amazon-braket-create-job-algorithm-container-1024x426.png\" /></a></p> \n<p>I leave all other settings to their default value. In this way, I use the SV1 simulator, rather than quantum hardware, to run the quantum tasks.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/10/amazon-braket-create-job-execution-settings.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/10/amazon-braket-create-job-execution-settings-1024x459.png\" /></a></p> \n<p>After some time, the job has completed, and I follow the link to the <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> console to download the result. As expected, for each of the five tasks, the results show that the proportion of the <code>00</code> and <code>11</code> states is roughly 50:50. The proportions vary slightly because of the probabilistic nature of quantum computing.</p> \n<pre><code>{\n    \"braketSchemaHeader\": {\n        \"name\": \"braket.jobs_data.persisted_job_data\",\n        \"version\": \"1\"\n    },\n    \"dataDictionary\": {\n        \"measurement_counts\": [\n            {\n                \"00\": 51,\n                \"11\": 49\n            },\n            {\n                \"00\": 44,\n                \"11\": 56\n            },\n            {\n                \"11\": 51,\n                \"00\": 49\n            },\n            {\n                \"00\": 56,\n                \"11\": 44\n            },\n            {\n                \"00\": 49,\n                \"11\": 51\n            }\n        ]\n    },\n    \"dataFormat\": \"plaintext\"\n}</code></pre> \n<p>This example is quite basic because I am not running any classical logic other than initiating tasks. To see the real value, let’s see how it works with a hybrid algorithm where we tweak the parameters of the quantum circuit iteratively from task to task.</p> \n<p><span><strong>Using Amazon Braket Hybrid Jobs with Hybrid Algorithms<br /> </strong></span>For a more advanced example, I use a well-known example of an actual hybrid algorithm, called the <a href=\"https://arxiv.org/abs/1411.4028\">quantum approximate optimization algorithm (QAOA)</a>, included in the examples provided by Amazon Braket when creating a notebook from the Braket console. QAOA is a quantum algorithm that produces approximate solutions for combinatorial optimization problems. You can also find the example in <a href=\"https://github.com/aws/amazon-braket-examples/tree/main/examples/hybrid_jobs\">this GitHub repo</a>.</p> \n<p>In this case, I am using QAOA to solve the <a href=\"https://en.wikipedia.org/wiki/Maximum_cut\">Max-Cut</a> problem: when partitioning nodes of a graph in two, what is the maximum number of edges connecting nodes between the two parts? For example, in the figure below, there are six nodes connected by eight edges. The thick yellow line partitions the nodes into two sets by crossing six edges.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/03/aws-braket-jobs-max-cut.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/03/aws-braket-jobs-max-cut-1024x713.png\" /></a></p> \n<p>In the QAOA example, the tuning of parameters that are used to run the successive rounds of quantum tasks is optimized in a classical computing environment (such as an EC2 instance) using tools like <a href=\"https://www.tensorflow.org/\">TensorFlow</a> or <a href=\"https://pytorch.org/\">PyTorch</a>. In one of the notebook cells, I can choose which interface to use to tune the parameters as well as the other hyperparameters in a similar way to what I’d do for machine learning training.</p> \n<p>Braket jobs then coordinates running the classical and quantum computing parts of the algorithm and the exchange of parameters and results between them. I can just sit back and relax as I watch my algorithm converge, ready to retrieve my results from S3, as before, for deeper analysis.</p> \n<p><span><strong>Running Hybrid Algorithms in Local Mode<br /> </strong></span>To test and debug hybrid algorithms quickly, the <a href=\"https://github.com/aws/amazon-braket-sdk-python\">Amazon Braket SDK</a> can run jobs in <strong>local mode</strong>. With local mode, Braket jobs are run locally on your machine (for example, your laptop). In this way, you can get fast feedback and iterate quickly during the development of your algorithms.</p> \n<p>To run a job in local mode, you just need to replace <code>AwsQuantumJob</code> with <code>LocalQuantumJob</code>. Note that <code>AwsQuantumJob</code> is imported from <code>braket.aws</code> , while <code>LocalQuantumJob</code> is imported from <code>braket.jobs.local</code>.</p> \n<p><span><strong>Availability and Pricing<br /> </strong></span>Amazon Braket Hybrid Jobs are available today in all <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/#Regions\">AWS Regions</a> where <a href=\"https://aws.amazon.com/braket/\">Amazon Braket</a> is available. For more information, see the <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/\">AWS Regional Services List</a>.</p> \n<p>With Amazon Braket Hybrid Jobs, you only pay for the resources you use. There is no need to deploy, configure, and manage classical infrastructure, making it easy to experiment and improve algorithms iteratively. For more information, see the <a href=\"https://aws.amazon.com/braket/pricing/\">Amazon Braket pricing page</a>.</p> \n<p>Instead of relying on theoretical studies, you can start to use quantum computers as the primary tool to understand and improve hybrid algorithms and test their applicability for industry and research use cases. In this way, you can focus on your research and not deal with setting up and coordinating these different compute resources for your experiments.</p> \n<p>During the development of this new capability, we talked with customers and partners to understand their needs. “As application developers, Braket Hybrid Jobs gives us the opportunity to explore the potential of hybrid variational algorithms with our customers,” says Vic Putz head of engineering at <a href=\"https://www.qcware.com/\">QCWare</a>. “We are excited to extend our integration with Amazon Braket and the ability to run our own proprietary algorithms libraries in custom containers means we can innovate quickly in a secure environment. The operational maturity of Amazon Braket and the convenience of priority access to different types of quantum hardware means we can build this new capability into our stack with confidence.”</p> \n<p><a href=\"https://aws.amazon.com/braket/\"><strong>Simplify running hybrid quantum-classical workloads with Amazon Braket Hybrid Jobs.</strong></a></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"48a684e25096e746a2b985bdb78ff8f88145a3b359b7f3e14c42eb8e0f79c119","category":"Tech"}