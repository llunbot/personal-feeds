{"title":"Announcing on-demand data replication for Amazon FSx for OpenZFS","link":"https://aws.amazon.com/blogs/aws/on-demand-data-replication-for-amazon-fsx-for-openzfs/","date":1701053562000,"content":"<p>Today we’re adding to <a href=\"https://aws.amazon.com/fsx/openzfs/\">Amazon FSx for OpenZFS</a> the capability to send a snapshot from a file system to another file system in your account.</p> \n<p>You can trigger the copy with one single API call or CLI command, and we take care of the rest. You don’t need to use commands like <code>rsync</code> and monitor the state of the transfer. The service takes care of the copy on your behalf. It manages potential network interruptions and retries automatically until the transfer completes. It transfers data incrementally at block level using OpenZFS’s native <a href=\"https://openzfs.github.io/openzfs-docs/man/master/8/zfs-send.8.html\">send</a> and <a href=\"https://openzfs.github.io/openzfs-docs/man/master/8/zfs-recv.8.html\">receive</a> capabilities.</p> \n<p>This new capability helps you to maintain <strong>agility</strong> by, for example, allowing quicker and easier creation of testing and development environments, and <strong>performance</strong> improvements by simplifying the management of read replicas to provide scale-out performance.</p> \n<p>Amazon FSx for OpenZFS is a fully managed file storage service that lets you launch, run, and scale fully managed file systems built on the open source <a href=\"https://openzfs.org/wiki/Main_Page\">OpenZFS</a> file system. FSx for OpenZFS makes it easy to migrate your on-premises ZFS file servers without changing your applications or how you manage data and to build new high-performance, data-intensive applications on the cloud.</p> \n<p><a href=\"https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/snapshots-openzfs.html\">Snapshots</a> are one of the most powerful features of ZFS file systems. A snapshot is a read-only copy of a file system or volume. Snapshots can be created almost instantly and initially consume no additional disk space within the storage pool. When a snapshot is created, its space is initially shared between the snapshot and the file system and possibly with previous snapshots. As the file system changes, space that was previously shared becomes unique to the snapshot. The snapshot consumes incremental disk space by continuing to reference the old data and so prevents the space from being freed. Snapshots can be rolled back on-demand and almost instantly, even on very large file systems. Snapshots can also be cloned to form new volumes.</p> \n<p>Snapshots are block-level copies. They are more efficient to transfer than traditional file-level copies, where the system must sometimes traverse millions of files to detect the ones that changed. Transferring an incremental snapshot is also more efficient than transferring an incremental file-based copy because snapshots are incremental at block level. They only contain blocks modified since the last snapshot.</p> \n<p>On-demand replication of ZFS snapshots allows the transfer of terabytes of data using the native <a href=\"https://openzfs.org/wiki/Documentation/ZfsSend\">send and receive</a> capability of OpenZFS without having to worry about the underlying infrastructure. We detect and manage network interruptions and other types of errors for you, making it easier for you to replicate data across file systems.</p> \n<p>There are two main use cases where you might want to use this new capability.</p> \n<p>Developers and quality assurance (QA) engineers might send on-demand snapshots to development and testing environments. It allows them to work with production data, ensuring accurate testing and development outcomes. The use of recent snapshots as consistent starting points for testing enhances the efficiency of the development and testing processes.</p> \n<p>Data engineers might use on-demand replication to run parallel experiments on a dataset. Imagine your application processes a large dataset. You want to run multiple versions of your data processing algorithm on the same base dataset to find the best tuning for your use case. With on-demand data replication, you can create multiple identical copies of your file system and run each experiment in parallel.</p> \n<p><span><strong>Let’s see how it works<br /> </strong></span>To prepare this demo, I use the <a href=\"https://console.aws.amazon.com/fsx/home\">FSx for OpenZFS section</a> of the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a>. First, I create two Amazon FSx for OpenZFS volumes. Then, I <code>mount</code> the two file systems on one Amazon Linux instance (<code>/zfs-filesystem1</code> and <code>/zfs-filesystem2</code>). I prepare a file on the first volume, and I expect to find the same file on the second volume after an on-demand replication.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/04/2023-11-04_16-03-14.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/04/2023-11-04_16-03-14.png\" alt=\"ZFS file\" width=\"800\" height=\"183\" /></a></p> \n<p>To synchronize data between my two volumes, I navigate to t<a href=\"https://console.aws.amazon.com/fsx/home#snapshots\">he snapshot section of the console</a>. Then I select <strong>Copy snapshot and update volume</strong>. I also have the option to copy the snapshot to a new ZFS volume.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/04/2023-11-04_17-56-56-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/04/2023-11-04_17-56-56-1.png\" alt=\"ZFS snapshot replication - 1\" width=\"800\" height=\"234\" /></a></p> \n<p>On the <strong>Copy snapshot and update volume</strong> page, I select the destination<strong> File system</strong> and <strong>Volume</strong>. I also confirm the source snapshot. I choose the <strong>Source snapshot copy strategy</strong>, either requesting a full copy or an incremental copy. When ready, I select <strong>Update</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/04/2023-11-04_17-57-20.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/04/2023-11-04_17-57-20.png\" alt=\"ZFS snapshot replication - 2\" width=\"800\" height=\"1505\" /></a></p> \n<p>After a while—how long depends on the amount of data to transfer—I observe a new snapshot listed on the destination volume. In my demo scenario, it just takes a few seconds.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/04/2023-11-04_17-57-43-2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/04/2023-11-04_17-57-43-2.png\" alt=\"ZFS snapshot replication - 3\" width=\"800\" height=\"274\" /></a></p> \n<p>I return to my Linux instance and list the content available in my second mount point <code>/zfs-snapshot</code>. I am happy to see my cow ASCII art on the second file system <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f389.png\" alt=\"🎉\" /><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f42e.png\" alt=\"🐮\" />.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/04/2023-11-04_18-00-22.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/04/2023-11-04_18-00-22.png\" alt=\"ZFS the same file is available on teh volume restored from the snapshot\" width=\"800\" height=\"415\" /></a></p> \n<p>Alternatively, I can automate on-demand transfers using the new FSx APIs: <code>CopySnapshotAndUpdateVolume</code> and <code>CopySnapshotAndCreateVolume</code>.</p> \n<p>To set up an ongoing periodic replication, I use the provided CloudFormation <a href=\"https://solution-references.s3.amazonaws.com/fsx/snapshot/fsx-openzfs-periodic-replication.yaml\">template</a> to create an automated replication schedule. When deployed, the system periodically takes a snapshot of the volume on the source file system and performs an incremental replication to a volume on the destination file system. For example, I could schedule replication to a development file system to happen once every 15 minutes for testing purposes.</p> \n<p><span><strong>Pricing and availability<br /> </strong></span>This new capability is available in all AWS Regions where FSx for OpenZFS is available.</p> \n<p>It comes at no additional cost. AWS charges the usual fees for network data transfer between Availability Zones.</p> \n<p>You pay standard FSx for OpenZFS charges for the amount of storage used by the remote file system.</p> \n<p>The new on-demand replication for Amazon FSx for OpenZFS allows you to efficiently transfer incremental file system snapshots to a new volume on your account. It allows developers and QA engineers to work with copies of production data and data engineers to run parallel experiments on datases.</p> \n<p>Now go build and <a href=\"https://console.aws.amazon.com/fsx#file-systems\">configure your first on-demand replication today</a>!</p> \n<a href=\"https://twitter.com/sebsto\">-- seb</a>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"4549fcd7b44eea2bab220746194369f06911e46f3b328fb021b9cd018125c0e9","category":"Tech"}