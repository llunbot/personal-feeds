{"title":"HashiCorp releases a new CI/CD pipeline integration tool and templates for Terraform Cloud","link":"https://www.hashicorp.com/blog/hashicorp-releases-new-ci-cd-pipeline-integration-tool-templates-for-terraform","date":1684940400000,"content":"<p>HashiCorp is excited to announce the release of <a href=\"https://github.com/hashicorp/tfc-workflows-tooling\">pipeline templates for Terraform Cloud and Terraform Enterprise</a>. These templates come with a command line tool for prescriptively setting up and running a Terraform Cloud workflow within a CI/CD pipeline, reducing friction that can often occur in highly customized pipelines. The templates also provide prescriptive examples for other CI/CD platforms on how to integrate with Terraform Cloud.</p>\n\n<p>This post introduces two new pipeline templates and offers some background on how these integrations work and the customer feedback that led to them.</p>\n\n<h2>The need for a prescriptive approach to using Terraform with CI/CD</h2>\n\n<p>One request we often get from Terraform Cloud users is for prescriptive guidance on how to use Terraform Cloud in their CI/CD pipelines. In addition, we know that many of our partners who offer CI/CD platforms want to provide their users with prescriptive Terraform Cloud integration workflows from their side as well. While Terraform Cloud’s <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/run/ui\">VCS workflows</a> are the initial solution we recommend, many customers have existing CI/CD tooling in place and want to integrate Terraform Cloud into their custom pipelines.</p>\n\n<p>For tricky integrations, users typically embed Terraform Cloud as a job within CI/CD workflows and use the CLI workflow within a CI/CD tool to execute plans and applies. This approach is simple to implement but does not provide all the capabilities of Terraform Cloud, such as saving cloud runs and a bi-directional link back from Terraform Cloud to the code. These features are available only via API workflows, but those workflows are also more complex to set up.</p>\n\n<p>Terraform Cloud APIs represent the actions that are part of a run from Terraform Cloud’s perspective, such as packaging and uploading code, starting runs, and applying changes. These common actions are automatically executed as part of the CLI or VCS workflow, so they are harder to implement without more detailed knowledge of the Terraform Cloud APIs</p>\n\n<h2>How the application and templates work</h2>\n\n<p>To reduce the friction of this integration process, we created a new CLI tool called <code>tfci</code>. It’s a Go application inside a Docker container that automates Terraform Cloud runs via API and supports common Terraform Cloud operations that can be embedded into any CI tool. This allows users to onboard Terraform Cloud into more complex CI/CD pipelines.</p>\n\n<p>Along with <code>tfci</code>, we created a pair of initial pipeline templates that act as blueprints for integrating <code>tfci</code> into CI/CD platforms:</p>\n\n<ul>\n<li><a href=\"https://github.com/hashicorp/tfc-workflows-github\">GitHub Actions</a></li>\n<li><a href=\"https://github.com/hashicorp/tfc-workflows-gitlab\">GitLab CI</a></li>\n</ul>\n\n<p>GitHub Actions and GitLab CI are the two most common platforms for which users requested prescriptive workflows. Our intention is for third parties to participate and also add additional workflows and CI/CD platforms over time. Note that <code>tfci</code> can still be used to integrate Terraform Cloud into any CI/CD platform. Pipeline templates simply make the process faster and easier. Also note that <code>tfci</code>  works with current versions of Terraform Enterprise since it uses the same APIs.</p>\n<img src=\"https://www.datocms-assets.com/2885/1684939940-tfc-plan-output-pipeline-github-action.png\" alt=\"A\" /><h2>Final notes and next steps</h2>\n\n<p>HashiCorp has published <code>tfci</code> <a href=\"https://github.com/hashicorp/tfc-workflows-tooling\">on our tfc-workflows-tooling GitHub repository</a>. The CI/CD pipeline templates are located in these two repositories:</p>\n\n<ul>\n<li><a href=\"https://github.com/hashicorp/tfc-workflows-github\">GitHub Actions template</a></li>\n<li><a href=\"https://github.com/hashicorp/tfc-workflows-gitlab\">GitLab CI template</a> </li>\n</ul>\n\n<p>If you want a hands-on guide for setting up <code>tfci</code>-powered GitHub Actions workflows, follow our updated <a href=\"https://developer.hashicorp.com/terraform/tutorials/automation/github-actions\">Automate Terraform with GitHub Actions</a> tutorial.</p>\n\n<p>In each repository you can find documentation and open pull requests or issues. If you have an idea or want to see something new, please let us know by getting in touch through these GitHub repos.</p>\n","author":"Salil Subbakrishna","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"71b6c7901b28f37c5b3aa9419b51fe667f901e51661c3b0973bb9afb1fa97e45","category":"Tech"}