{"title":"บันทึกการอ่านบทความเรื่อง How the Medium iOS team works effectively with legacy code","link":"https://www.somkiat.cc/note-how-to-works-effectively-with-legacy-code/","date":1722323480000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/legacy-code-commitstrip-01-150x150.jpg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/07/legacy-code-commitstrip-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2024/07/legacy-code-commitstrip-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/07/legacy-code-commitstrip-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/legacy-code-commitstrip-01.jpg\" width=\"529\" height=\"494\" /></a></figure>\n\n\n\n<p>บทความเรื่อง <a href=\"https://medium.engineering/how-the-medium-ios-team-works-effectively-with-legacy-code-0a9ddc45df19\" target=\"_blank\">How the Medium iOS team works effectively with legacy code</a><br />อธิบายถึงแนวทางในการทำงานกับ Legacy code <br />ในฝั่งของ iOS App team ของ Medium.com ว่าเป็นอย่างไรบ้าง ?<br />โดยแนวทางการทำงานจะอ้างอิงมาจากหนังสือ <strong><em>Working effectively with legacy code</em></strong><br />มาเริ่มกันเลย</p>\n\n\n\n<span></span>\n\n\n\n<p>\"<em>Legacy Code is code without tests</em>\"</p>\n\n\n\n<p>เริ่มจากที่มาของ iOS app ของ medium.com นั้นมีอายุมากกว่า 10 ปีแล้ว<br />ซึ่ง code หลาย ๆ ส่วนตั้งแต่เริ่มต้น ยังคงถูกในงานใน app ปัจจุบัน<br />ดังนั้นในทุกวัน ทีมพัฒนายังต้องทำงานกับ code เก่า ๆ <br />โดยทีมพัฒนาทำการสรุปว่ามีแนวทางในการจัดการ code เก่า ๆ เหล่านี้อย่างไรบ้าง ?<br /></p>\n\n\n\n<p><strong>เริ่มต้นด้วยเรื่องของการเปลี่ยนแปลง</strong></p>\n\n\n\n<p>แน่นอนว่า ยังต้องแก้ไข และ เพิ่มความสามารถต่าง ๆ เข้ามาใน app อย่างต่อเนื่อง<br />แถมต้องไม่ส่งผลกระทบ หรือ ส่งผลต่อระบบน้อยมาก ๆ ด้วย<br />หรือช่วยทีมพัฒนาสามารถส่งมอบ feature ให้ทาง business ได้อย่างสม่ำเสมอ</p>\n\n\n\n<p>ยกตัวอย่างเช่นการระบบการ render ของ app<br />ที่ทำการ rewrite ไปบางส่วน<br />แต่วันดีคืนดีต้องทำการเพิ่มความสามารถใหม่ ๆ เข้าไป<br />ดังนั้นจำเป็นต้องไปแก้ไข code เก่า ๆ<br />ทำอย่างไรที่จะลดการแก้ไข code เก่า ๆ ที่มีความซับซ้อนลงไป<br />หนึ่งในวิธีการที่เลือกใช้จากหนังสือข้างต้น คือ <strong>Sprouts (Sprout method or Sprout class)</strong></p>\n\n\n\n<p>แนวทางที่ทีมพัฒนาใช้งานคือ <br />สร้างส่วนการทำงานใหม่ขึ้นมา จากนั้นค่อย embedded ส่วนใหม่เข้าไป<br />โดยในส่วนใหม่จะพัฒนาด้วย SwiftUI<br />สร้างเป็น SPM module (Swift Package Manager)<br />จากนั้นก็เรียกใช้งาน แล้ว render ด้วย UIKit ของระบบ render ที่สร้างเอาไว้<br />ซึ่งช่วยให้ง่ายต่อการเพิ่มความสามารถใหม่ ๆ และลดผลกระทบลงไป<br />แถมได้ใช้ technology ใหม่ ๆ อีกด้วย</p>\n\n\n\n<p><strong>ปัญหาต่อมาคือ ไม่เข้าใจ code เก่า ๆ เหล่านั้นดีพอ ก่อนที่จะแก้ไขมัน</strong></p>\n\n\n\n<p>ปัญหานี้เกิดขึ้นบ่อยมาก ๆ <br />ทำให้ solution ในการแก้ไขมักจะผิด หรือ สร้างความซับซ้อนเพิ่มเข้ามาได้อีก<br />ดังนั้นแค่ทำให้มันทำงานได้ยังไม่เพียงพอ<br />แต่ยังต้องปรับปรุงมันให้ดียิ่งขึ้นด้วยเสมอ</p>\n\n\n\n<p><strong>ปัญหาต่อมาคือ App ไม่มีโครงสร้างที่ชัดเจน !!</strong></p>\n\n\n\n<p>แต่การที่จะหยุดการพัฒนา เพื่อปรับปรุงโครงสร้างของ code ใหม่เป็นเดือน ๆ<br />น่าจะไม่ใช้แนวคิดที่ดีนัก<br />ดังนั้นจึงใช้แนวทาง ๆ ค่อย ๆ เปลี่ยนโครงสร้างทีละเล็กทีละน้อยแทน<br />โดยจะมีรูปแบบของ <strong>modular</strong> ที่กำหนด และ ตกลงกันไว้<br /><strong><em>และตกลงกันไว้ว่า จะไม่เพิ่ม code เข้าไปยัง code เดิม</em></strong> <br />ซึ่งช่วยให้การพัฒนาง่ายและรวดเร็วมากยิ่งขึ้น</p>\n\n\n\n<p><strong>ปัญหาต่อมาคือ ถ้า class มันใหญ่มากแล้ว ยังจะเพิ่ม code เข้าไปอีกหรือ ?</strong></p>\n\n\n\n<p>โดยโครงสร้าง หรือ code ของระบบงานมันอาจจะทำงานได้ดี<br />มี function การทำงานต่าง ๆ ครบ<br />แต่ว่ามันเอื้อต่อการพัฒนาต่อไปหรือไม่ ?</p>\n\n\n\n<p>ดังนั้นแนวทางคือ เรื่องของ responsibility หรือ หน้าที่รับผิดชอบ<br />ว่ามีหน้าที่รับผิดชอบเยอะเกินไปไหม<br />ถ้าใช่ ก็พยายามแยกออกมาจากกัน</p>\n\n\n\n<p><strong>แต่ปัญหาต่อมาจากการเปลี่ยนแปลง ปรับปรุงสิ่งต่าง ๆ คือ <br />เราจะรู้ได้อย่างไร ว่ายังคงทำงานได้เช่นเดิม</strong></p>\n\n\n\n<p>ไม่ไปทำให้ code หรือ การทำงานส่วนอื่น ๆ ไม่พัง หรือ กระทบ !!<br />เพราะว่ามันคือ การ refactor code นะ </p>\n\n\n\n<p><strong>วิธีการที่ใช้งานประกอบไปด้วย</strong></p>\n\n\n\n<ul>\n<li>Preserve signature</li>\n\n\n\n<li>Lean on the compiler</li>\n</ul>\n\n\n\n<p><strong>เรื่องสุดท้ายคือ To rewrite or not to rewrite</strong></p>\n\n\n\n<p>เป็นคำถามที่น่าสนใจมาก ๆ<br />แต่จากบทความนี้ ไม่ทำการ rewrite ทั้งหมดแน่นอน<br />แต่ใช้แนวทางในการทำงานร่วมกับ code เก่า ๆ<br />ปรับปรุง และ ลด code เก่าลงไป<br />จากนั้นก็เพิ่ม code ใหม่ ที่จัดการ หรือ ควบคุมได้ดียิ่งขึ้นเข้ามา<br />ค่อย ๆ ปรับเปลี่ยนทีละเล็กละน้อย ค่อย ๆ นำ technology ใหม่ ๆ เข้ามาใช้<br />แค่ให้ code มันทำงานได้ยังไม่เพียงพอ ต้องให้มันดีขึ้นด้วยเสมอ<br />รวมทั้งก่อนแก้ไข ต้องทำความเข้าใจให้ดีก่อนว่า code เหล่านั้นทำงานอย่างไร</p>\n\n\n\n<p><em><strong>Good design should be a goal for all of us, but in legacy code, it is something that we arrive at in discrete steps.</strong></em></p>\n\n\n\n<p>ลองนำไปประยุกต์ใช้งานกันดูครับ<br />ขอให้สนุกกับการ coding</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"2c03a3ee153091813dc1c892139a7d14df4aebdde1479f56ab083408eafcceec","category":"Thai"}