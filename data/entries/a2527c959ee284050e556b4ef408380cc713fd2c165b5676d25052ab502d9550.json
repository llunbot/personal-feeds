{"title":"Amazon Titan Text Embeddings V2 now available in Amazon Bedrock, optimized for improving RAG","link":"https://aws.amazon.com/blogs/aws/amazon-titan-text-v2-now-available-in-amazon-bedrock-optimized-for-improving-rag/","date":1714507611000,"content":"<p>The <a href=\"https://aws.amazon.com/bedrock/titan/\">Amazon Titan family of models</a>, available exclusively in <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a>, is built on top of 25 years of Amazon expertise in artificial intelligence (AI) and machine learning (ML) advancements. Amazon Titan foundation models (FMs) offer a comprehensive suite of pre-trained image, multimodal, and text models accessible through a fully managed API. Trained on extensive datasets, Amazon Titan models are powerful and versatile, designed for a range of applications while adhering to <a href=\"https://aws.amazon.com/machine-learning/responsible-ai/\">responsible AI</a> practices.</p> \n<p>The latest addition to the Amazon Titan family is Amazon Titan Text Embeddings V2, the second-generation text embeddings model from Amazon now available within Amazon Bedrock. This new text embeddings model is optimized for <a href=\"https://aws.amazon.com/what-is/retrieval-augmented-generation/\">Retrieval-Augmented Generation (RAG)</a>. It is pre-trained on 100+ languages and on code.</p> \n<p>Amazon Titan Text Embeddings V2 now lets you choose the size of the output vector (either 256, 512, or 1024). Larger vector sizes create more detailed responses, but will also increase the computational time. Shorter vector lengths are less detailed but will improve the response time. Using smaller vectors helps to reduce your storage costs and the latency to search and retrieve document extracts from a vector database. <strong>We measured the accuracy of the vectors generated by Amazon Titan Text Embeddings V2</strong> and we observed that <strong>vectors with 512 dimensions keep approximately 99 percent of the accuracy</strong> provided by vectors with 1024 dimensions. <strong>Vectors with 256 dimensions keep 97 percent of the accuracy</strong>. This means that <strong>you can save 75 percent in vector storage</strong> (from 1024 down to 256 dimensions) <strong>and keep approximately 97 percent of the accuracy provided by larger vectors</strong>.</p> \n<p>Amazon Titan Text Embeddings V2 also proposes an improved unit vector normalization that helps improve the accuracy when measuring vector similarity. You can choose between normalized or unnormalized versions of the embeddings based on your use case (normalized is more accurate for RAG use cases). Normalization of a vector is the process of scaling it to have a unit length or magnitude of 1. It is useful to ensure that all vectors have the same scale and contribute equally during vector operations, preventing some vectors from dominating others due to their larger magnitudes.</p> \n<p>This new text embeddings model is well-suited for a variety of use cases. It can help you perform semantic searches on documents, for example, to detect plagiarism. It can classify labels into data-based learned representations, for example, to categorize movies into genres. It can also improve the quality and relevance of retrieved or generated search results, for example, recommending content based on interest using RAG.</p> \n<p><span><strong>How embeddings help to improve accuracy of RAG<br /> </strong></span>Imagine you’re a superpowered research assistant for a large language model (LLM). LLMs are like those brainiacs who can write different creative text formats, but their knowledge comes from the massive datasets they were trained on. This training data might be a bit outdated or lack specific details for your needs.</p> \n<p>This is where RAG comes in. RAG acts like your assistant, fetching relevant information from a custom source, like a company knowledge base. When the LLM needs to answer a question, RAG provides the most up-to-date information to help it generate the best possible response.</p> \n<p>To find the most up-to-date information, RAG uses embeddings. Imagine these embeddings (or vectors) as super-condensed summaries that capture the key idea of a piece of text. A high-quality embeddings model, such as Amazon Titan Text Embeddings V2, can create these summaries accurately, like a great assistant who can quickly grasp the important points of each document. This ensures RAG retrieves the most relevant information for the LLM, leading to more accurate and on-point answers.</p> \n<p>Think of it like searching a library. Each page of the book is indexed and represented by a vector. With a bad search system, you might end up with a pile of books that aren’t quite what you need. But with a great search system that understands the content (like a high-quality embeddings model), you’ll get exactly what you’re looking for, making the LLM’s job of generating the answer much easier.</p> \n<p><span><strong>Amazon Titan Text Embeddings V2 overview<br /> </strong></span>Amazon Titan Text Embeddings V2 is optimized for high accuracy and retrieval performance at smaller dimensions for reduced storage and latency. We measured that vectors with 512 dimensions maintain approximately 99 percent of the accuracy provided by vectors with 1024 dimensions. Those with 256 dimensions offer 97 percent of the accuracy.</p> \n<table> \n <tbody> \n  <tr> \n   <td>Max tokens</td> \n   <td>8,192</td> \n  </tr> \n  <tr> \n   <td>Languages</td> \n   <td>100+ in pre-training</td> \n  </tr> \n  <tr> \n   <td>Fine-tuning supported</td> \n   <td>No</td> \n  </tr> \n  <tr> \n   <td>Normalization supported</td> \n   <td>Yes</td> \n  </tr> \n  <tr> \n   <td>Vector size</td> \n   <td>256, 512, 1,024 (default)</td> \n  </tr> \n </tbody> \n</table> \n<p><span><strong>How to use Amazon Titan Text Embeddings V2<br /> </strong></span>It’s very likely you will interact with Amazon Titan Text Embeddings V2 indirectly through <a href=\"https://aws.amazon.com/bedrock/knowledge-bases/\">Knowledge Bases for Amazon Bedrock</a>. Knowledge Bases takes care of the heavy lifting to create a RAG-based application. However, you can also use the <a href=\"https://docs.aws.amazon.com/bedrock/latest/APIReference/API_Operations_Amazon_Bedrock_Runtime.html\">Amazon Bedrock Runtime API</a> to directly invoke the model from your code. Here is a simple example in the <a href=\"https://www.swift.org/documentation/server/\">Swift</a> programming language (just to show you you can use any programming language, not just <a href=\"https://docs.aws.amazon.com/code-library/latest/ug/python_3_bedrock-runtime_code_examples.html\">Python</a>):</p> \n<pre><code>import Foundation\nimport AWSBedrockRuntime \n\nlet text = \"This is the text to transform in a vector\"\n\n// create an API client\nlet client = try BedrockRuntimeClient(region: \"us-east-1\")\n\n// create the request \nlet request = InvokeModelInput(\n   accept: \"application/json\",\n   body: \"\"\"\n   {\n      \"inputText\": \"\\(text)\",\n      \"dimensions\": 256,\n      \"normalize\": true\n   }\n   \"\"\".data(using: .utf8), \n   contentType: \"application/json\",\n   modelId: \"amazon.titan-embed-text-v2:0\")\n\n// send the request \nlet response = try await client.invokeModel(input: request)\n\n// decode the response\nlet response = String(data: (response.body!), encoding: .utf8)\n\nprint(response ?? \"\")</code></pre> \n<p>The model takes three parameters in its payload:</p> \n<ul> \n <li><code>inputText</code> – The text to convert to embeddings.</li> \n <li><code>normalize</code> – A flag indicating whether or not to normalize the output embeddings. It defaults to true, which is optimal for RAG use cases.</li> \n <li><code>dimensions</code> – The number of dimensions the output embeddings should have. Three values are accepted: 256, 512, and 1024 (the default value).</li> \n</ul> \n<p>I added the dependency on the <a href=\"https://github.com/awslabs/aws-sdk-swift\">AWS SDK for Swift</a> in my <code>Package.swift</code>. I type <code>swift run</code> to build and run this code. It prints the following output (truncated to keep it brief):</p> \n<pre><code>{\"embedding\":[-0.26757812,0.15332031,-0.015991211...-0.8203125,0.94921875],\n\"inputTextTokenCount\":9}</code></pre> \n<p>As usual, do not forget to <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html\">enable access to the new model</a> in the <a href=\"https://console.aws.amazon.com/bedrock/\">Amazon Bedrock console</a> before using the API.</p> \n<p>Amazon Titan Text Embeddings V2 will soon be the default LLM proposed by Knowledge Bases for Amazon Bedrock. Your existing knowledge bases created with the original Amazon Titan Text Embeddings model will continue to work without changes.</p> \n<p>To learn more about the Amazon Titan family of models, view the following video:</p> \n<p></p> \n<p>The new Amazon Titan Text Embeddings V2 model is available today in Amazon Bedrock in the US East (N. Virginia) and US West (Oregon) AWS Regions. Check the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/models-regions.html\">full Region list</a> for future updates.</p> \n<p>To learn more, check out the <a href=\"https://aws.amazon.com/bedrock/titan/\">Amazon Titan in Amazon Bedrock</a> product page and <a href=\"https://aws.amazon.com/bedrock/pricing/\">pricing</a> page. Also, do not miss this blog post to <a href=\"https://aws.amazon.com/blogs/machine-learning/getting-started-with-amazon-titan-text-embeddings/\">learn how to use Amazon Titan Text Embeddings models</a>. You can also visit our <a href=\"https://community.aws/generative-ai?trk=e8665609-785f-4bbe-86e8-750a3d3e9e61&amp;sc_channel=el\">community.aws</a> site to find deep-dive technical content and to discover how our Builder communities are using Amazon Bedrock in their solutions.</p> \n<p>Give Amazon Titan Text Embeddings V2 a try in the <a href=\"https://console.aws.amazon.com/bedrock\">Amazon Bedrock console</a> today, and send feedback to <a href=\"https://repost.aws/tags/TAQeKlaPaNRQ2tWB6P7KrMag/amazon-bedrock\">AWS re:Post for Amazon Bedrock</a> or through your usual AWS Support contacts.</p> \n<p><a href=\"https://twitter.com/sebsto\">-- seb</a></p>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"a2527c959ee284050e556b4ef408380cc713fd2c165b5676d25052ab502d9550","category":"Tech"}