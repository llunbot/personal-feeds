{"title":"The Importance Of Graceful Degradation In Accessible Interface Design","link":"https://smashingmagazine.com/2024/12/importance-graceful-degradation-accessible-interface-design/","date":1733475600000,"content":"<p>Graceful degradation is a design approach that ensures the basics of a website will still function even if specific individual parts of it stop working. The approach removes <strong>single points of failure</strong>: just because one thing stops working doesn’t mean the system as a whole fails. A site following this principle fails in pieces instead of all at once, so the most important features remain available when some components encounter an error.</p>\n<p>The idea or the concept of single points of failure is well known in the manufacturing sector. It’s <a href=\"https://link.springer.com/article/10.1007/s00170-024-13223-5\">one of the most common resilience</a> strategies in manufacturing and supply chain operations. A factory with multiple sources of material can keep working even when one supplier becomes unavailable. However, it’s become increasingly crucial to web development as user expectations around availability and functionality rise.</p>\n<p><strong>Data center redundancy</strong> is a common example of graceful degradation in web development. By using multiple server components, websites ensure they’ll stay up when one or more servers fail. In a design context, it may look like guaranteeing the lack of support for a given feature in a user’s browser or device doesn’t render an app unusable.</p>\n<p><img src=\"https://files.smashing.media/articles/importance-graceful-degradation-accessible-interface-design/1-escalators.jpg\" /></p>\n<p>Escalators are a familiar real-world example of the same concept. When they stop working, they can still get people from one floor to the next by acting as stairs. They may not be as functional as they normally are, but they’re not entirely useless.</p>\n<p><img src=\"https://files.smashing.media/articles/importance-graceful-degradation-accessible-interface-design/2-bbc-page.png\" /></p>\n<p>The BBC News webpage is a good example of graceful degradation in web design. As this screenshot shows, the site prioritizes loading navigation and the text within a news story over images. Consequently, slow speeds or old, incompatible browser plugins may make pictures unavailable, but the site’s core function — sharing the news — is still accessible.</p>\n<p><img src=\"https://files.smashing.media/articles/importance-graceful-degradation-accessible-interface-design/3-adobe-express.png\" /></p>\n<p>In contrast, the Adobe Express website is an example of what happens without graceful degradation. Instead of making some features unavailable or dropping load times, the entire site is inaccessible on some browsers. Consequently, users have to update or switch software to use the web app, which isn’t great for accessibility.</p>\nGraceful Degradation vs. Progressive Enhancement\n<p>The graceful degradation approach acts as the opposite of <strong>progressive enhancement</strong> — an <a href=\"https://piccalil.li/blog/its-about-time-i-tried-to-explain-what-progressive-enhancement-actually-is/\">approach in which a designer</a> builds the basics of a website and progressively adds features that are turned on only if a browser is capable of running them. Each layer of features is turned off by default, allowing for one seamless user experience designed to work for everyone.</p>\n<p>There is much debate between designers about whether graceful degradation or progressive enhancement is the best way to build site functionality. In reality, though, both are important. Each method has unique <em>pros and cons</em>, so the two can complement each other to provide the most resilience.</p>\n<p>Progressive enhancement is a good strategy when building a <em>new</em> site or app because you ensure a functional experience for everyone from the start. However, new standards and issues can emerge in the future, which is where graceful degradation comes in. This approach helps you <em>adjust</em> an existing website to comply with new accessibility standards or resolve a compatibility problem you didn’t notice earlier.</p>\n<p>Focusing solely on one design principle or the other will limit accessibility. Progressive enhancement alone struggles to account for post-launch functionality issues, while graceful degradation alone may fail to provide the most feature-rich baseline experience. Combining both will produce the best result.</p>\nHow Graceful Degradation Impacts Accessibility\n<p>Ensuring your site or app remains functional is crucial for accessibility. When core functions become unavailable, the platform is no longer accessible to anyone. On a smaller scale, if features like text-to-speech readers or video closed captioning stop working, users with sight difficulties may be unable to enjoy the site.</p>\n<p>Graceful degradation’s impact on accessibility is all the larger when considering varying device capabilities. As the average person spends <a href=\"https://www.bdo.com/getmedia/fcbde42a-6a36-4e5f-be6b-143276d7cdd0/RCP_Smart-Retail_Insight_3-20_WEB.pdf?ext=.pdf\">3.6 hours each day</a> on their phone, failing to ensure a site supports less powerful mobile browsers will alienate a considerable chunk of your audience. Even if some complex functions may not work on mobile, sacrificing those to keep the bulk of the website available on phones ensures broader accessibility.</p>\n<p>Outdated browsers are another common accessibility issue you can address with graceful degradation. Consider this <a href=\"https://it.fdu.edu/tech-alert/adobe-flash-is-not-supported-on-the-fdu-network/\">example from Fairleigh Dickinson University</a> about Adobe Flash, which most modern browsers no longer support.</p>\n<p><img src=\"https://files.smashing.media/articles/importance-graceful-degradation-accessible-interface-design/4-adobe-flash.png\" /></p>\n<p>Software still using Flash cannot use the multi-factor authentication feature in question. As a result, users with older programs can’t log in. Graceful degradation may compromise by making some functionality unavailable to Flash-supporting browsers while still allowing general access. That way, people don’t need to upgrade to use the service.</p>\nHow to Incorporate Graceful Degradation Into Your Site\n<p>Graceful degradation removes technological barriers to accessibility. In a broader sense, it also keeps your site or app running at all times, even amid unforeseen technical difficulties. While there are many ways you can achieve that, here are some general best practices to follow.</p>\n<h3>Identify Mission-Critical Functions</h3>\n<p>The first step in ensuring graceful degradation is determining what your <strong>core functions</strong> are. You can only guarantee the availability of mission-critical features once you know what’s essential and what isn’t.</p>\n<p>Review your user data to see what your audience interacts with most — these are generally elements worth prioritizing. Anything related to site security, transactions, and readability is also crucial. Infrequently used features or elements like video players and interactive maps are nice to have but okay to sacrifice if you must to ensure mission-critical components remain available.</p>\n<h3>Build Redundancy</h3>\n<p>Once you’ve categorized site functions by criticality, you can ensure redundancy for the most important ones. That may mean <strong>replicating elements in a few forms</strong> to work on varying browsers or devices. Alternatively, you could provide multiple services to carry out important functions, like supporting alternate payment methods or providing both video and text versions of content.</p>\n<p>Remember that redundancy applies to the hardware your platform runs on, too. The Uptime Institute <a href=\"https://uptimeinstitute.com/tiers\">classifies data centers into tiers</a>, which you can use to determine what redundant systems you need. Similarly, make sure you can run your site on multiple servers to avoid a crash should one go down.</p>\n<h3>Accommodate All Browsers</h3>\n<p>Remember that graceful degradation is also about supporting software and hardware of varying capabilities. One of the most important considerations under that umbrella for web design is to <strong>accommodate outdated browsers</strong>.</p>\n<p>While <a href=\"https://designerly.com/how-to-make-a-mobile-version-of-your-website/\">mobile devices don’t support Flash</a>, some older versions of desktop browsers still use it. You can work with both by avoiding Flash — you can often use HTML5 instead — but not requiring users to have a non-Flash-supporting browser. Similarly, you can offer low-bandwidth, simple alternatives to any features that take up considerable processing power to keep things accessible on older systems.</p>\n<p><img src=\"https://files.smashing.media/articles/importance-graceful-degradation-accessible-interface-design/5-microsoft-edge-error-message.png\" /></p>\n<p>Remember to <strong>pay attention to newer software’s security settings</strong>, too. Error messages like this one <a href=\"https://answers.microsoft.com/en-us/microsoftedge/forum/all/i-am-trying-to-go-to-a-website-but-it-says-that/82486fec-02b2-4e83-9ca6-c9f8088d8d97\">a Microsoft user posted about</a> can appear if a site does not support some browsers’ updated security protocols. Always keep up with updates from popular platforms like Chrome and Safari to meet these standards and avoid such access issues.</p>\n<h3>Employ Load Balancing and Caching</h3>\n<p>Load balancing is another crucial step in graceful degradation. Many cloud services automatically distribute traffic between server resources to prevent overloading. Enabling this also ensures that requests can be processed on a different part of the system if another fails.</p>\n<p>Caching is similar. By storing critical data, you build a fallback plan if an external service or application program interface (API) doesn’t work. When the API doesn’t respond, you can load the cached data instead. As a result, <a href=\"https://aws.amazon.com/caching/\">caches significantly reduce latency</a> in many cases, but you should be aware that you can’t cache everything. Focus on the most critical functions.</p>\n<h3>Test Before Publishing</h3>\n<p>Finally, be sure to test your website for accessibility issues before taking it live. Access it from multiple devices, including various browser versions. See if you can run it on a single server to test its ability to balance loads.</p>\n<p>You likely won’t discover all possible errors in testing, but it’s better to catch some than none. Remember to test your site’s functionality before any updates or redesigns, too.</p>\nGetting Started With Graceful Degradation\n<p>Designers, both big and small, can start their graceful degradation journey by tweaking some settings with their web hosting service. AWS <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_mitigate_interaction_failure_graceful_degradation.html\">offers guidance for managing failures</a> you can use to build degradation into your site’s architecture. Hosting providers should also allow you to upgrade your storage plan and configure your server settings to provide redundancy and balance loads.</p>\n<p>Businesses large enough to run their own data centers should install redundant server capacity and uninterruptible power supplies to keep things running. Smaller organizations can instead rely on their code, using semantic HTML to keep it simple enough for multiple browsers. Programming nonessential things like images and videos to stop when bandwidth is low will also help.</p>\n<p>Virtualization systems like <a href=\"https://kubernetes.io/\">Kubernetes</a> are also useful as a way to scale site capacity and help load elements separately from one another to maintain accessibility. Testing tools like <a href=\"https://www.browserstack.com/\">BrowserStack</a>, <a href=\"https://wave.webaim.org/\">WAVE</a>, and <a href=\"https://www.htmlvalidator.com/\">CSS HTML Validator</a> can assist you by revealing if your site has functional issues on some browsers or for certain users.</p>\n<p>At its core, web accessibility is about <strong>ensuring a platform works as intended for all people</strong>. While design features may be the most obvious part of that goal, technical defenses also play a role. A site is only accessible when it works, so you must <strong>keep it functional</strong>, even when unexpected hiccups occur.</p>\n<p>Graceful degradation is not a perfect solution, but it prevents a small issue from becoming a larger one. Following these five steps to implement it on your website or app will ensure that your work in creating an accessible design doesn’t go to waste.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"9dbae22de7a0f50e84ba2920cdfef892916c53beebed76f516f8482e34dd3255","category":"Tech"}