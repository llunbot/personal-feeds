{"title":"บันทึกการแบ่งปันเรื่องการพัฒนาระบบงานด้วยภาษา Go","link":"https://www.somkiat.cc/note-workshop-go-2023/","date":1684997489000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/learn-go-2023-150x150.jpg\" alt srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/05/learn-go-2023-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2023/05/learn-go-2023-75x75.jpg 75w\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/learn-go-2023.jpg\" alt width=\"569\" height=\"357\" /></figure>\n\n\n\n<p>ช่วงกลางเดือนมีโอกาสไปแบ่งปันการพัฒนาระบบงานด้วยภาษา Go จำนวน 2 วัน<br />โดยเป็นการแบ่งปันแบบ onsite ครั้งแรกเลยก็ว่า<br />เพราะว่าก่อนหน้านี้จะเป็นแบบ online เกือบหมด<br /></p>\n\n\n\n<p>ในครั้งนี้ทำการปูพื้นฐานสุด ๆ เพื่อช่วยให้นำไปต่อยอดได้ง่าย<br />ซึ่งมีเนื้อหาดังนี้</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เรื่องแรกคือ development process กับเครื่องมือของ Go</strong></p>\n\n\n\n<p>ในเรื่องนี้จะแนะนำว่าในการพัฒนาระบบด้วย Go <br />มีขั้นตอนและเครื่องมืออย่างไร<br />เพื่อให้เริ่มต้นได้ง่ายมากขึ้น<br />ประกอบไปด้วย</p>\n\n\n\n<ul><li>การสร้าง project ด้วย Go module (go mod)</li><li>การใช้งาน Go workspace สำหรับการทำงานร่วมกันหลาย ๆ module (go work)</li><li>ในการพัฒนา ผมจะเน้นเรื่อง learn by test ดังนั้นการเขียน test ด้วย Go จึงสำคัญมาก ๆ  (go test) และเรื่อง test coverage + report</li><li>จากนั้นเรื่องของการจัดการ format ของ code การตรวจสอบ code ก็เป็นสิ่งที่น่าสนใจ และขาดไม่ได้ เช่น Static code analysis, Lint, Vet</li><li>รวมทั้งยังมีเรื่องของ Security scanning ที่หลาย ๆ ทีมขาดไป หรือ ลืมไป เช่นการใช้งาน <a href=\"https://github.com/gitleaks/gitleaks\" target=\"_blank\">Go leak</a> เป็นต้น</li><li>ขั้นตอนการ build และ install package</li><li>การใช้งาน Docker เข้ามาช่วยให้ส่งมอบงานได้ง่ายและสะดวกมากยิ่งขึ้น </li><li>ขั้นตอนการทดสอบพวก API testing ทั้งจาก external tool เช่น Postman และ internal tool ผ่าน package <a href=\"https://pkg.go.dev/net/http/httptest\" target=\"_blank\">net/http/httptest</a></li><li>การจำลอง dependency รอบข้าง ที่ระบบงานต้องการใช้งาน หรือ ทำงานร่วม เช่น Database และ External API เป็นต้น</li><li>พัฒนา RESTFul API ด้วย Gin หรือ Echo</li></ul>\n\n\n\n<p><strong>สิ่งที่ลืมไป คือ การ build binary file ตามแต่ละ OS และ CPU Architecture</strong><br />เลยเพิ่มไว้หน่อย</p>\n\n\n\n[gist id=\"18ee71edfd894ec52cf650db0ac8a966\" file=\"1.txt\"]\n\n\n\n<p><strong>เรื่องที่สองคือ Learn by test</strong></p>\n\n\n\n<p>ในส่วนนี้พยายามให้เริ่มการแก้ไขปัญหา จากการเขียน test<br />ซึ่งใน Go จะอยู่ใน package testing ประกอบไปด้วย</p>\n\n\n\n<ul><li>Testing</li><li>Benchmark</li><li>Example</li><li>Fuzzing</li></ul>\n\n\n\n<p>รวมไปถึงการจัดการ tag หรือ กลุ่มของการทดสอบ<br />ผ่าน //go:build tagname อีกด้วย</p>\n\n\n\n<p>โดยการทดสอบจะแบ่งเป็น</p>\n\n\n\n<ul><li>Unit testing</li><li>Component testing</li><li>Contract testing ด้วย <a href=\"https://docs.pact.io/\" target=\"_blank\">Pact</a> </li></ul>\n\n\n\n<p>ในการทำ workshop จะเน้นทั้ง 3 ชนิดการทดสอบ <br />เพื่อทำให้รู้และเข้าใจว่า การทดสอบแต่ละชนิด<br />ทดสอบเพื่ออะไร<br />มีประโยชน์อะไร<br />มีขอบเขตของการทดสอบอย่างไร<br />ทำการทดสอบอย่างไร</p>\n\n\n\n<p>ที่เน้นมาก ๆ คือ</p>\n\n\n\n<ul><li>Component test จะใช้งานร่วมกับ <a href=\"https://github.com/h2non/gock\" target=\"_blank\">Gock</a> และ Test containers</li><li>Contract test ให้เข้าใจแนวคิด ขั้นตอนของการสร้าง contract จัดเก็บ และการ vertify หรือ ตรวจสอบ contract ด้วยเครื่องมือชื่อว่า Pact + Pack broker และ Docker</li></ul>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/pact-01-1024x764.png\" alt width=\"500\" height=\"372\" /></figure>\n\n\n\n<p><strong>เรื่องที่สามคือ <a href=\"https://www.youtube.com/watch?v=oL6JBUk6tj0\" target=\"_blank\">Project structure</a></strong></p>\n\n\n\n<p>ในส่วนนี้พยายามอธิบายให้เห็นถึง<br />วิวัฒนาการของ project เพื่อทำให้เข้าใจมากยิ่งขึ้น<br />โดยเริ่มตั้งแต่ Flat structure<br />เริ่มมาที่ Layer structure (responsibility) ว่าเป็นมาอย่างไร มีข้อดีข้อเสียอย่างไร<br />ต่อไปก็แนวทางแบ่งตามกลุ่มการทำงาน เช่น domain, function, use case เป็นต้น<br />รวมทั้งชี้ให้เห็นแนวคิดอื่น ๆ ที่ชอบใช้งาน หรือ พูดคุยกัน<br />เช่น Clean architecture และ Hexagonal architecture เป็นต้น</p>\n\n\n\n<p>แต่สิ่งที่สำคัญมาก ๆ คือ ไม่ว่าจะเป็นรูปแบบไหน<br />เราทำการทดสอบไหม<br />เราทดสอบได้ง่ายไหม<br />ทำให้ทีมเดินไปข้างหน้าได้เร็วไหม หรือ มี productivity ที่ดีไหม</p>\n\n\n\n<p></p>\n\n\n\n<p><strong><em>เป็นสามเรื่องพื้นฐานที่จะเน้นเสมอ จากนั้นก็ลงมือทำ workshop แต่ละเรื่องไป<br />เพื่อทำการฝึก เรียนรู้ กันต่อไป</em></strong></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"1155f4871dc8a9a2667d72a6800a2f13c4788add681f7992c67551b2dc705a92","category":"Thai"}