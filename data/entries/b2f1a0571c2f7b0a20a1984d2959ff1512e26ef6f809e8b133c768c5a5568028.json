{"title":"CSS And Accessibility: Inclusion Through User Choice","link":"https://smashingmagazine.com/2023/08/css-accessibility-inclusion-user-choice/","date":1690887600000,"content":"<p>We make a series of choices every day. Get up early to work out or hit the snooze button? Double foam mocha latte or decaf green tea? Tabs or spaces? Our choices, even the seemingly insignificant ones, shape our identities and influence our perspectives on the world. In today’s modern landscape, we have come to expect a broad range of choices, regardless of the products or services we seek. However, this has not always been the case.</p>\n<p>For example, there was a time when the world had only one font family. The first known typeface, a variant of <a href=\"https://en.wikipedia.org/wiki/Blackletter\">Blackletter</a>, graced Johannes Gutenberg’s pioneering printing press in 1440. The first set of publicly-available <a href=\"https://webtrainingguides.com/css-color-names-the-tragicomedy\">GUI colors</a> shipped with the 10th version of the <a href=\"https://www.x.org/wiki/\">X Window System</a> consisted of 69 primary shades and 138 entries to account for various color variations (e.g., “dark red”). In September 1995, a Netscape programmer, Brendan Eich, introduced “Mocha,” a scripting language that would later be renamed LiveScript and eventually <a href=\"https://en.wikipedia.org/wiki/JavaScript\">JavaScript</a>.</p>\n<p>Fast forward to the present day, and we now have access to over <a href=\"https://kinsta.com/blog/web-safe-fonts\">650,000 web fonts</a>, a hexadecimal system capable of representing <a href=\"https://en.wikipedia.org/wiki/Web_colors\">16,777,216 colors</a>, and over <a href=\"https://en.wikipedia.org/wiki/List_of_JavaScript_libraries\">100 public-facing JavaScript frameworks and libraries</a> to choose from. While this is great news for professionals designing and building user interfaces, what choices are we giving actual users? Shouldn’t they have a say in their experience?</p>\nCSS Media Features\n<p>While designers and developers may have some insights into user needs, it is very challenging to understand the actual user preferences of 7.8 billion people at any given time. Supporting the needs of individuals with disabilities and assistive technology adds a layer of complexity to an already complex situation. Nonetheless, designers and developers are responsible for addressing these user needs as best we can by providing accessible choices. One promising solution is <strong>user-focused <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media#media_features\">CSS media features</a></strong> that allow us to customize the user experience and cater to individual preferences.</p>\nMedia Features For Color\n<p>Let’s first focus on CSS media features for color. Color plays a vital role in design, impacting how we perceive brands. Studies suggest that <a href=\"https://www.emerald.com/insight/content/doi/10.1108/00251740610673332/full/html\">color alone</a> can influence up to 90% of snap judgments about products. Considering the large number of people worldwide with visual deficiencies such as color blindness and low vision, developers and designers have a significant opportunity to improve accessibility with this element alone.</p>\n<h3><code>@prefers-color-scheme</code></h3>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme\"><code>@prefers-color-scheme</code> CSS media feature</a> helps identify whether users prefer light or dark color themes. Users can indicate their preferences through settings in the operating system or user agent.</p>\n<p>There are two values for this CSS media feature: <code>light</code> and <code>dark</code>. Typically, the default theme presented to users is the light version, even if the user expresses no preference. However, the opposite can also be true, and websites or apps default to a dark theme and switch to a light theme using the <code>@media (prefers-color-scheme: light)</code> media feature and corresponding code.</p>\n<p>Users opting for a dark mode signifies their preference for a dark-themed page. Using <code>@media (prefers-color-scheme: dark)</code>, various theme elements, such as text, links, and buttons, are adjusted to ensure they stand out against darker background colors.</p>\n<p>In the past, there was also a <code>no-preference</code> value to indicate when users had no theme preference. However, user agents now treat light themes as the default, rendering the <code>no-preference</code> value obsolete.</p>\n<pre><code>@media (prefers-color-scheme: dark) {\n  body {\n    background-color: #282828;\n  }\n\n  .without [data-word=\"without\"] .char:before,\n  .without [data-word=\"without\"] .char:after {\n    color: #fff;\n  }\n}\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/css-accessibility-inclusion-user-choice/color-light-dark.png\" /></p>\n<p>The <a href=\"https://caniuse.com/mdn-css_at-rules_media_prefers-color-scheme\"><code>@prefers-color-scheme</code></a> is one of the most widely used CSS media features today and it has a very large percentage of browser support at 94%. It is so popular that additional values may be introduced in the future to express more specific preferences or color schemes, such as sepia or grayscale.</p>\n<p>Switching from the default light mode to dark mode is relatively straightforward. Consult the user setting guides for <a href=\"https://support.apple.com/guide/mac-help/use-a-light-or-dark-appearance-mchl52e1c2d2/mac\">Mac</a> and <a href=\"https://support.microsoft.com/en-us/windows/change-colors-in-windows-d26ef4d6-819a-581c-1581-493cfcc005fe\">Windows</a> operating systems to learn more (select the relevant hardware and operating system version), then navigate to a browser that supports this CSS media feature.</p>\n<p><strong>Pro-tip:</strong> <em>A more sophisticated solution to demo user preference settings is using Chrome’s <a href=\"https://developer.chrome.com/docs/devtools/rendering\">Rendering tab</a> coupled with <a href=\"https://youtu.be/gOkM1L6azEI\">CSS media features emulator</a> to easily switch from light to dark modes to <a href=\"https://developer.chrome.com/docs/devtools/rendering/emulate-css/#emulate-css-media-feature-prefers-color-scheme\">emulate <code>@prefers-color-scheme</code></a> as users experience it. This solution is convenient for live demos where you need to show the user preference changes quickly or emulate media features not fully supported by your OS or browser.</em></p>\n<p><img src=\"https://files.smashing.media/articles/css-accessibility-inclusion-user-choice/prefers-color-scheme.png\" /></p>\n<h3><code>@forced-colors</code></h3>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors\"><code>@forced-colors</code> CSS media feature</a> enables the detection of the forced colors mode enforced by the user agent. This mode imposes a limited color palette the user chooses onto the page. This newer media feature provides an alternative approach to handle colors for non-Window devices, and we expect it will replace Windows High Contrast Mode in the future.</p>\n<p>There are two values for the forced-colors media feature: <code>none</code> and <code>active</code>. The <code>@media (forced-colors: none)</code> value indicates that the forced colors mode is inactive and uses the default color scheme, while the <code>@media (forced-colors: active)</code> value means that the forced colors mode is active and the user agent enforces the user-selected limited color palette.</p>\n<p>It’s worth noting that enabling <code>@forced-colors</code> mode does not necessarily imply a preference for higher contrast. The color adjustments align with the user’s choice, which may not strictly fit into the low or high-contrast categories.</p>\n<p><strong>Note</strong>: <em>There are some <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors#properties_affected_by_forced-color_mode\">properties affected by the <code>forced-color</code> mode</a> that you need to be aware of when designing and testing your forced-colors theme. Check out Eric Bailey’s article “<a href=\"https://www.smashingmagazine.com/2022/03/windows-high-contrast-colors-mode-css-custom-properties\">Windows High Contrast Mode, Forced Colors Mode And CSS Custom Properties</a>” for more information about this media feature and its integration with CSS custom properties.</em></p>\n<pre><code>@media (forced-colors: active) {\n  body {\n    background-color: #fcba03;\n  }\n\n  .without [data-word=\"without\"] .char:before,\n  .without [data-word=\"without\"] .char:after {\n    color: #ac1663;\n  }\n\n  .without {\n    color: #004a72;\n  }\n}\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/css-accessibility-inclusion-user-choice/color-forced.png\" /></p>\n<p>The <a href=\"http://caniuse.com/mdn-css_at-rules_media_forced-colors\"><code>@forced-colors</code> CSS media feature</a> is currently supported by 31% of the most popular browsers, including desktop versions of Chrome, Edge, and Firefox. Although the browser support for this feature is increasing, not all operating systems currently offer a setting to activate the forced colors mode. The <a href=\"https://support.microsoft.com/en-us/windows/change-color-contrast-in-windows-fedc744c-90ac-69df-aed5-c8a90125e696\">Windows</a> operating system is the only exception, as it provides the necessary functionality for users to create customized themes that override the default ones by utilizing the Windows High Contrast mode.</p>\n<p>If you are using a non-Windows machine, you can emulate the behavior of this media feature by following the steps mentioned earlier in the <code>@prefers-color-scheme</code> section using Chrome’s <a href=\"https://developer.chrome.com/docs/devtools/rendering/#open-rendering\">Rendering tab</a> and emulator, but with a focus on <a href=\"https://developer.chrome.com/docs/devtools/rendering/emulate-css/#emulate-css-media-feature-forced-colors\">emulating <code>@forced-colors</code></a> instead.</p>\n<p><img src=\"https://files.smashing.media/articles/css-accessibility-inclusion-user-choice/forced-colors.png\" /></p>\n<h3><code>@inverted-colors</code></h3>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/inverted-colors\"><code>@inverted-colors</code> CSS media feature</a> determines whether to show the content in its standard colors or if it reverses the colors.</p>\n<p>Two modes are available for the <code>@inverted-colors</code> media feature: <code>none</code> and <code>inverted</code>. The <code>@media (inverted-colors: none)</code> value indicates that the forced colors mode is not activated and uses the default color scheme. Using the <code>@media (inverted-colors: inverted)</code> value indicates that all pixels within the displayed area have been inverted and renders the inverted color theme when a user chooses this option.</p>\n<p>When writing code for the <code>@inverted-colors</code> CSS media feature, one option is to write your code using the <a href=\"https://wtools.io/invert-color-code-online\"><code>inverted</code> value</a> of what you want a user to see to ensure correct rendering after applying the user’s setting.</p>\n<p>For example, you want your element’s background to be <code>#e87b2d</code>, which is a tangerine orange. In the theme code, you would write the opposite color, <code>#1784d2</code>, powder blue. Incorporating this inverse color into the code renders the intended tangerine orange instead of its inverse when users enable the <code>@inverted-colors</code> setting.</p>\n<pre><code>@media (inverted-colors: inverted) {\n  body {\n    background-color: #99cc66;\n  }\n\n  .without [data-word=\"without\"] .char:before,\n  .without [data-word=\"without\"] .char:after {\n    color: #ee1166;\n  }\n\n  .without {\n    color: #111111;\n  }\n}\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/css-accessibility-inclusion-user-choice/inverted-colors-green-purple.png\" /></p>\n<p>Current browser support for <a href=\"https://caniuse.com/mdn-css_at-rules_media_inverted-colors\"><code>@inverted-colors</code></a> is 20% for Safari desktop and iOS browsers. While Chrome’s Rendering tab and emulator do not work for this particular media feature, you can <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Experimental_features#inverted-colors_media_feature\">emulate <code>@inverted-colors</code></a> using Firefox (version 114 or newer).</p>\n<ol>\n<li>Open a new tab in Firefox and type or paste <code>about:config</code> in the address bar, and press Enter/Return. Click the button acknowledging that you will be careful.</li>\n<li>In the search box, enter <code>layout.css.inverted-colors</code> and wait for the list to be filtered.</li>\n<li>Use the toggle button to switch the preference from <code>false</code> to <code>true</code>.</li>\n<li>Enable the inverted colors setting in your operating system and navigate to a webpage or code example with the <code>@inverted-colors</code> theme to observe the inverted effect.</li>\n</ol>\n<p>The setting for the <code>@inverted-colors</code> media feature is available on <a href=\"https://support.apple.com/guide/mac-help/change-display-settings-for-accessibility-unac089/mac\">Mac</a> and <a href=\"https://support.microsoft.com/en-gb/office/use-color-and-contrast-for-accessibility-in-microsoft-365-bb11486d-fc7d-4cd9-b344-16e2bc2a2387#bkmk_invertwin11\">Windows</a> operating systems.</p>\n<p><img src=\"https://files.smashing.media/articles/css-accessibility-inclusion-user-choice/inverted-colors.png\" /></p>\nMedia Features For Contrast\n<p>Next, let’s talk about CSS media features related to contrast. Contrast plays a crucial role in conveying visual information to users, working hand in hand with color. When proper levels of color contrast are not implemented, it becomes difficult to distinguish essential elements such as text, icons, and important graphics. As a result, the design can become inaccessible not only to the 46 million people worldwide with low vision but also to older adults, individuals using monochrome displays, or those in specific situations like low lighting in a room.</p>\n<h3><code>@prefers-contrast</code></h3>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-contrast\">@prefers-contrast CSS media feature</a> detects the user’s preference for higher or lower contrast on a page. The feature uses the information to make appropriate adjustments, such as modifying the contrast ratio between colors nearby or altering the visual prominence of elements, such as adjusting their borders, to better suit the user’s contrast requirements.</p>\n<p>There are four values for this CSS media feature: <code>no-preference</code>, <code>less</code>, <code>more</code>, and <code>custom</code>. The <code>@media (prefers-contrast: no-preference)</code> value indicates that the user has no preference (or did not choose one since it is the default setting), and the <code>@media (prefers-contrast: less)</code> value indicates a user’s preference for less contrast. Conversely, the <code>@media (prefers-contrast: more)</code> value indicates a user’s preference for stronger contrast.</p>\n<p>The <code>@media (prefers-contrast: custom)</code> value is a bit more complex as it allows users to use a custom set of colors — which could be specific to contrast — or choose a palette. For example, a user could select a theme composed entirely of shades of blue, primary colors, or even a rainbow theme — anything they choose.</p>\n<p><strong>Note</strong>: <em>When a user selects the custom contrast setting, it will align with the color palette defined by users of <code>forced-colors: active</code> value, so be sure to account for that in the code.</em></p>\n<pre><code>@media (prefers-contrast: more) {\n  .title2 {\n    color: var(--clr-6);\n  }\n\n  .aurora2__item:nth-of-type(1),\n  .aurora2__item:nth-of-type(2),\n  .aurora2__item:nth-of-type(3),\n  .aurora2__item:nth-of-type(4) {\n    background-color: var(--clr-6);\n  }\n}\n\n@media (prefers-contrast: less) {\n  .title {\n    color: var(--clr-5);\n  }\n\n  .aurora__item:nth-of-type(1),\n  .aurora__item:nth-of-type(2),\n  .aurora__item:nth-of-type(3),\n  .aurora__item:nth-of-type(4) {\n    background-color: var(--clr-5);\n  }\n}\n\n@media (prefers-contrast: custom) {\n  .aurora2__item:nth-of-type(1) {\n    background-color: var(--clr-1);\n  }\n  .aurora2__item:nth-of-type(2) {\n    background-color: var(--clr-2);\n  }\n  .aurora2__item:nth-of-type(3) {\n    background-color: var(--clr-3);\n  }\n  .aurora2__item:nth-of-type(4) {\n    background-color: var(--clr-4);\n  }\n}\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/css-accessibility-inclusion-user-choice/prefers-contrast-comparisons.jpg\" /></p>\n<p>Currently, 91% of the most widely used browsers offer support for the <a href=\"https://caniuse.com/mdn-css_at-rules_media_prefers-contrast\"><code>@prefers-contrast</code> media feature</a>. However, the majority of this support is focused on enhancing contrast rather than reducing it or allowing for personalized contrast themes.</p>\n<p>To effectively demo and test all the different contrast options for this CSS media feature, use the Chrome <a href=\"https://developer.chrome.com/docs/devtools/rendering/#open-rendering\">Rendering tab</a> and emulator as described earlier, but with a specific emphasis on <a href=\"https://developer.chrome.com/docs/devtools/rendering/emulate-css/#emulate-css-media-feature-prefers-contrast\">emulating the <code>@prefers-contrast</code> media feature</a> this time.</p>\n<p><img src=\"https://files.smashing.media/articles/css-accessibility-inclusion-user-choice/prefers-color-scheme.png\" /></p>\n<h3><code>@prefers-reduced-transparency</code></h3>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-transparency\"><code>@prefers-reduced-transparency</code> CSS media feature</a> determines if the user has requested the system to use fewer transparent or translucent layer effects.</p>\n<p>It takes one of two possible values: <code>no-preference</code> and <code>reduce</code>. The <code>@media (prefers-reduced-transparency: no-preference)</code> value indicates that the user has not specified any preference for the system (this is also the default setting). On the other hand, the <code>@media (prefers-reduced-transparency: reduce)</code> value indicates that the user has informed the system about their preference for an interface that minimizes the application of transparent or translucent layer effects.</p>\n<pre><code>@media (prefers-reduced-transparency: reduce) {\n  .title,\n  .title2 {\n    opacity: 0.7;\n  }\n}\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/css-accessibility-inclusion-user-choice/prefers-reduced-transparency-comparison.jpg\" /></p>\n<p>The current browser support for <a href=\"https://caniuse.com/mdn-css_at-rules_media_prefers-reduced-transparency\">@prefers-reduced-transparency</a> stands at 0%. This CSS media feature is highly experimental and should not be utilized in production code at the time I’m writing this article.</p>\n<p>However, if you wish to <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Experimental_features#prefers-reduced-transparency_media_feature\">emulate the <code>@prefers-reduced-transparency</code> media feature behavior</a>, you can follow these steps using Firefox (version 113 or newer).</p>\n<ol>\n<li>Open a new tab in Firefox and type or paste <code>about:config</code> in the address bar, and press Enter/Return. Click the button acknowledging that you will be careful.</li>\n<li>In the search box, type or paste <code>layout.css.prefers-reduced-transparency</code> and wait for the list to be filtered.</li>\n<li>Use the toggle button to switch the preference from the default state of false to true.</li>\n<li>Adjust your operating system’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-transparency#user_preferences\">transparency settings</a> and navigate to a webpage or code example with the <code>@prefers-reduced-transparency</code> theme to observe the effect of reduced transparency.</li>\n</ol>\n<p><img src=\"https://files.smashing.media/articles/css-accessibility-inclusion-user-choice/prefers-reduced-transparency.png\" /></p>\nMedia Features For Motion\n<p>Lastly, let’s turn our focus to motion. Whether it involves videos, GIFs, or SVGs, movement can enrich our online experiences. However, this media type can also adversely affect many individuals. People with vestibular disabilities, seizure disorders, and migraine disorders can benefit from accessible media. CSS media features for motion allow us to incorporate both dynamic movement and static states for elements, enabling us to have the best of both worlds.</p>\n<h3><code>@prefers-reduced-motion</code></h3>\n<p>Using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\"><code>@prefers-reduced-motion</code> CSS media feature</a> helps determine whether the user has requested the system to minimize the usage of non-essential motion.</p>\n<p>This CSS media feature accepts one of two values: <code>no-preference</code> and <code>reduce</code>. The <code>@media (prefers-reduced-motion: no-preference)</code> value indicates that the user has not specified any preference for the system (this is also the default setting). Conversely, the <code>@media (prefers-reduced-motion: reduce)</code> value indicates that the user has informed the system about their preference for an interface that eliminates or substitutes motion-based animations that may cause discomfort or serve as distractions for them.</p>\n<div>\n<pre><code>@media (prefers-reduced-motion: reduce) {\n  .bg-rainbow {\n    animation: none;\n  }\n\n  .perfection {\n    .word {\n      .char {\n        animation: slide-down 5s cubic-bezier(0.75, 0, 0.25, 1) both;\n        animation-delay: calc(#{$delay} + (0.5s * var(--word-index)));\n      }\n    }\n\n    [data-word=\"perfection\"] {\n      animation: slide-over 4.5s cubic-bezier(0.5, 0, 0.25, 1) both;\n      animation-delay: $delay;\n\n      .char {\n        animation: none;\n        visibility: hidden;\n      }\n\n      .char:before,\n      .char:after {\n        animation: split-in 4.5s cubic-bezier(0.75, 0, 0.25, 1) both alternate;\n        animation-delay: calc(\n          3s + -0.2s * (var(--char-total) - var(--char-index))\n        );\n      }\n    }\n  }\n}\n</code></pre>\n</div>\n\n<p>You can compare the difference in the following videos and by viewing a <a href=\"https://codepen.io/cariefisher/pen/zYmmZZZ\">live demo</a>.</p>\n<p><img src=\"https://files.smashing.media/articles/css-accessibility-inclusion-user-choice/prefers-reduced-motion.png\" /></p>\n<h3><code>@prefers-reduced-data</code></h3>\n<p>Last but certainly not least, let’s examine the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-data\"><code>@prefers-reduced-data</code> CSS media feature</a>. This media feature determines whether the user prefers to receive alternate content that consumes less data when rendering the page.</p>\n<p>This CSS media feature has two possible values: <code>no-preference</code> and <code>reduce</code>. The <code>@media (prefers-reduced-motion: no-preference)</code> value indicates that the user has not specified any preference for the system (which is also the default setting). On the other hand, the <code>@media (prefers-reduced-data: reduce)</code> value indicates that the user has expressed a preference for lightweight alternate content.</p>\n<p>Unlike other CSS media features, a user’s preference for the <code>@prefers-reduced-data</code> media feature could vary. It may be a system-wide setting exposed by the operating system or settings controlled by the user agent. In the case of the user agent, they may determine this value based on the same user or system preference used for setting the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Save-Data\">Save-Data</a> HTTP request header.</p>\n<p>Note that the Save-Data network client request header is still considered experimental technology, but it has achieved a remarkable <a href=\"https://caniuse.com/mdn-http_headers_save-data\">72% browser support</a> across various browsers, except Safari and Firefox on desktop and mobile.</p>\n<pre><code>@media (prefers-reduced-data: reduce) {\n  .bg-rainbow {\n    animation: none;\n  }\n\n  .perfection {\n    .word {\n      .char {\n        animation: none;\n      }\n    }\n\n    [data-word=\"perfection\"] {\n      animation: none;\n\n      .char {\n        animation: none;\n        visibility: hidden;\n      }\n\n      .char:before,\n      .char:after {\n        animation: none;\n      }\n    }\n  }\n}\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/css-accessibility-inclusion-user-choice/demo-prefers-redued-data.png\" /></p>\n<p>Similar to <code>@prefers-reduced-transparency</code>, the <a href=\"https://caniuse.com/mdn-css_at-rules_media_prefers-reduced-data\"><code>@prefers-reduced-data</code></a> CSS media feature is highly experimental and should not be utilized in production code at this time as the current browser support for it stands at 0%.</p>\n<p>However, if you wish to emulate the <code>@prefers-reduced-data</code> behavior, you can follow these steps using Chrome (version 85 or newer).</p>\n<ol>\n<li>Open a new tab in Chrome and type or paste <code>chrome://flags</code> in the address bar and press Enter/Return.</li>\n<li>In the search box, type or paste <code>experimental-web-platform-features</code> and wait for the list to be filtered.</li>\n<li>Use the dropdown option to switch the preference from the default state of disabled to enabled.</li>\n<li>Use the Chrome <a href=\"https://developer.chrome.com/docs/devtools/rendering/#open-rendering\">Rendering tab</a> and choose the appropriate CSS media feature to emulate.</li>\n</ol>\n<p>Note that you can also enable the <code>@prefers-reduced-data</code> feature in Edge, Opera, and Chrome Android (all behind the same <code>experimental-web-platform-features</code> flag), but it is less clear how you would emulate the media feature without the rendering tab and emulator found in the desktop version of Chrome.</p>\n<p><img src=\"https://files.smashing.media/articles/css-accessibility-inclusion-user-choice/prefers-reduced-data.png\" /></p>\nAmplifying Inclusion Through User Choice\n<p>In the tech world, accessibility often receives criticism, particularly with aesthetics and advanced features. However, this negative perception can be changed. It is possible to incorporate stunning design and innovative functionality while prioritizing accessibility by leveraging CSS user-focused media features that address <strong>color</strong>, <strong>contrast</strong>, and <strong>motion</strong>.</p>\n<p>Today, by incorporating all available options for each CSS media feature currently supported by browsers (with support exceeding 90%), you can provide users with 16 combinations of options. However, when the browsers and operating systems implement and support more experimental media features, the impact on user customization expands significantly to a staggering 256 combinations of options. A large number of possible options truly amplifies the potential impact designers and developers can have on user experiences.</p>\n<p>As professionals within the technology industry, our goal should be to ensure that digital products are accessible to all individuals. By offering users the ability to personalize their experience, we can include an array of remarkable features in a responsible manner. Our job is to provide options and let people choose their own adventure.</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/01/creating-high-contrast-design-system-css-custom-properties/\">Creating A High-Contrast Design System With CSS Custom Properties</a>,” Brecht De Ruyte</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/02/guide-building-accessible-carousels/\">A Step-By-Step Guide To Building Accessible Carousels</a>,” Sonja Weckenmann</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/07/designing-age-inclusive-products-guidelines-best-practices/\">Designing Age-Inclusive Products: Guidelines And Best Practices</a>,” Michal Halperin Ben Zvi</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/11/guide-keyboard-accessibility-html-css-part1/\">A Guide To Keyboard Accessibility: HTML And CSS (Part 1)</a>,” Cristian Díaz</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"b2f1a0571c2f7b0a20a1984d2959ff1512e26ef6f809e8b133c768c5a5568028","category":"Tech"}