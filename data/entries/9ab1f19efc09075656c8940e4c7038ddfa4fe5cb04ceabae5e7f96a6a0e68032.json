{"title":"Azure Managed Identities with the HashiCorp Stack: Part 2","link":"https://www.hashicorp.com/blog/azure-managed-identities-with-the-hashicorp-stack-part-2","date":1628089200000,"content":"<p><em>This post is part two of a three-part blog series on Azure managed identities with the HashiCorp stack. In <a href=\"https://www.hashicorp.com/blog/azure-managed-identities-with-the-hashicorp-stack-part-1\">part one</a>, we learned about Microsoft Azure managed identities, how they work, how to provision them with HashiCorp Terraform, and how HashiCorp’s Packer and Terraform can use them to authenticate against Azure. In <a href=\"https://www.hashicorp.com/blog/azure-managed-identities-with-the-hashicorp-stack-part-3\">part three</a> we look at how HashiCorp Nomad and Consul can take advantage of managed identities.</em></p>\n<p>In this post, we will explore how secrets management with HashiCorp’s Vault can take advantage of Microsoft Azure managed identities to ease the operational burden of Vault cluster availability. <a href=\"https://www.vaultproject.io/\">Vault</a> allows users to store static secrets and provision dynamic, short-lived secrets. <a href=\"https://www.hashicorp.com/blog/why-we-need-dynamic-secrets\">Dynamic credentials</a>, often referred to as ephemeral secrets, are credentials that are provisioned on-demand, for a predetermined period of time. Once this predetermined period of time has elapsed, the credential is automatically revoked.</p>\n<h2><a href=\"#protecting-data-in-vault-s-storage-backend\">»</a><a></a>Protecting Data in Vault’s Storage Backend</h2>\n<p>Vault as a secrets management platform is decoupled from the storage backend where the actual secrets live. It encrypts all the data before storing it in the storage backend and decrypts the data it reads from the storage backend.</p>\n<p>In order for Vault to be able to encrypt and decrypt data in the storage backend, it needs a master key. This master key gives Vault the ability to read the cryptographic key used to decrypt the data. The <a href=\"https://www.vaultproject.io/docs/concepts/seal\">unseal key</a> encrypts the master key. The hierarchy of keys unlock access to the data in a process called unsealing.</p><img src=\"https://www.datocms-assets.com/2885/1627937543-unseal-flow.png\" /><p>You can start the process of unlocking by obtaining the unseal key. By default, Vault uses an algorithm called <a href=\"https://www.vaultproject.io/docs/concepts/seal\">Shamir’s Secret Sharing</a> to split the unseal key into multiple shards. You distribute shards to multiple operators, one shard per operator. You need to input a minimum number of shards to unseal Vault. The default configuration splits the unseal key into five shards and requires any three of those five shards to unseal Vault.</p>\n<p>While the process of distributing shards secures Vault, it adds operational overhead. Any time a Vault node restarts, it comes back up in a sealed state and requires the unsealing process to unlock access to the data. If a server restarts in the middle of the night, for example, you’ll need to wake up three on-call operators to unseal Vault and enable applications and users to read secrets! You might also restart a server when you patch an operating system. Server patching will bring the Vault server back up in a sealed state, which again, will require the unseal process to make it operational.</p>\n<h2><a href=\"#auto-unseal-to-reduce-operational-overhead\">»</a><a></a>Auto-Unseal to Reduce Operational Overhead</h2>\n<p>To avoid these problems, you can configure Vault with an <a href=\"https://learn.hashicorp.com/collections/vault/auto-unseal\">auto unseal</a> feature. A cloud provider’s key management system (KMS) becomes responsible for securing the unseal key. You can use <a href=\"https://learn.hashicorp.com/tutorials/vault/autounseal-azure-keyvault?in=vault/auto-unseal\">Azure Key Vault</a> to store the unseal key. Vault will automatically obtain this directly from the Azure Key Vault and unseal itself in the event of a restart.</p>\n<p>In order for this to work, Vault needs to be able to authenticate against Azure to gain access to the unseal key in Azure Key Vault. You can configure auto unseal in a few different ways, including using environment variables or a <a href=\"https://www.vaultproject.io/docs/configuration/seal\"><code>seal</code> stanza in the Vault configuration</a>:</p><pre><code>seal \"azurekeyvault\" {\n  tenant_id      = \"41646709-b60e-4747-be42-511edeaf1e144\"\n  client_id      = \"03dc31fc-16x9-4b07-8122-3ef568f8af6v\"\n  client_secret  = \"DUJDS3...\"\n  vault_name     = \"hc-vault\"\n  key_name       = \"vault_key\"\n}</code></pre><p>The <code>seal</code> stanza contains sensitive parameters, especially the client ID and secret. In <a href=\"https://www.hashicorp.com/blog/azure-managed-identities-with-the-hashicorp-stack-part-1\">part 1</a> of this series, I discussed the <a href=\"https://www.hashicorp.com/resources/secret-zero-mitigating-the-risk-of-secret-introduction-with-vault\">secret zero challenge</a> of secure secret introduction.  Introducing the client ID and secret has the same issue.</p>\n<p>If you host a Vault deployment in Azure, you can use Azure managed identity for Vault to authenticate against Azure and gain access to the unseal key in Azure Key Vault. The <code>seal</code> stanza no longer needs the client ID and secret:</p><p>seal \"azurekeyvault\" {\ntenant_id      = \"41646709-b60e-4747-be42-511edeaf1e14\"\nvault_name     = \"hc-vault\"\nkey_name       = \"vault_key\"\n}</p><p>You can also set the tenant ID and Azure Key Vault name and key using environment variables:</p><img src=\"https://www.datocms-assets.com/2885/1627939041-vault-azure-environment-variables-table.png\" /><p>When you use a managed identity and set the environment variables, you can have an empty <code>seal</code> stanza within Vault’s configuration file:</p>\n<pre><code>seal \"azurekeyvault\" {}\n</code></pre>\n<h2><a href=\"#further-reading\">»</a><a></a>Further Reading</h2>\n<p>For more on auto unseal for Azure Key Vault, check out our <a href=\"https://learn.hashicorp.com/tutorials/vault/autounseal-azure-keyvault\">Learn tutorial</a>.</p>\n<p><em>In <a href=\"https://www.hashicorp.com/blog/azure-managed-identities-with-the-hashicorp-stack-part-3\">part three</a>, we will look at how Nomad and Consul can take advantage of Azure managed identities.</em></p>","author":"Rob Barnes","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"9ab1f19efc09075656c8940e4c7038ddfa4fe5cb04ceabae5e7f96a6a0e68032","category":"Tech"}