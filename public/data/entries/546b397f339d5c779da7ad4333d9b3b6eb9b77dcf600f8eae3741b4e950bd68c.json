{"title":"ว่าด้วยเรื่องของ Law of Demeter ในการออกแบบ service","link":"https://www.somkiat.cc/law-of-demeter-with-service/","date":1678104006000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/lod-150x150.jpeg\" alt srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/03/lod-150x150.jpeg 150w, https://www.somkiat.cc/wp-content/uploads/2023/03/lod-75x75.jpeg 75w\" /></p>\n<p></p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/lod-2.jpeg\" alt /></figure>\n\n\n\n<p>จากบทความเรื่อง <strong><a href=\"https://www.somkiat.cc/law-of-demeter-with-golang/\" target=\"_blank\">Law of Demeter (LoD)</a></strong> ในการเขียน code นั้น<br />เพื่อช่วยลด coupling ระหว่าง class<br />หรือเป็นแนวคิดที่ช่วยให้เรามีความรู้เกี่ยวกับปลายทางที่จะเรียกให้น้อยลง<br />ทำให้มีอิสระมากยิ่งขึ้น</p>\n\n\n\n<p>โดยถ้าเรานำแนวคิดนี้ มาใช้กับการแยก service ด้วย<br />ก็น่าจะได้ผลดีเช่นกันนะ</p>\n\n\n\n<span></span>\n\n\n\n<p>ยกตัวอย่างเช่น</p>\n\n\n\n<p><strong>เรื่องแรก แต่ละ service  ควรมีข้อมูลที่จะใช้เป็นของตัวเอง</strong></p>\n\n\n\n<p>ไม่ให้ใครมาใช้งานตรง ๆ<br />หรือไม่ไปดึงข้อมูลจาก service มาใช้งานทุกครั้ง<br />มองเป็นเรื่องของ local data ให้มากขึ้น<br />ก็น่าจะช่วยเพิ่มความรวดเร็วในการทำงาน<br />และเป็นอิสระจาก service อื่น ๆ มากขึ้น<br />ทำให้ scale และ deploy ง่ายขึ้นอีก</p>\n\n\n\n<p><strong>เรื่องที่สอง ถ้าแต่ละ service ต้องใช้ข้อมูลจาก service อื่น ๆ ก็ควรมี interface ให้ใช้งาน</strong></p>\n\n\n\n<p>ไม่ว่างจะเป็น REST API, gRPC, messsaging หรือ protocol อื่น ๆ<br />เพื่อซ่อนการทำงานหรือข้อมูลภายในไว้<br />จะช่วยให้ระหว่าง consumer และ provider เป็นอิสระแก่กัน<br />แต่ก็ต้องระวังเรื่องการเปลี่ยนแปลงรูปแบบข้อมูลที่ตกลงกันไว้<br />ดังนั้นเรื่อง compatability ก็สำคัญมาก ๆ</p>\n\n\n\n<p>หรืออาจจะต้องเรื่องของ validate schema ข้อข้อมูลเอาไว้ด้วย</p>\n\n\n\n<p><strong>เรื่องที่สาม แต่ละ service จะติดต่อกัน ก็ไม่ควรเรียกกันตรง ๆ</strong></p>\n\n\n\n<p>ดังนั้นเพื่อลดการผูกมัด ควรใช้งาน service discovery/registry เข้ามาช่วย<br />ทำให้เรียกใช้งานผ่านชื่อ ส่วนที่อยู่จริง ๆ สามารถเปลี่ยนได้ง่าย<br />โดยไม่กกระทบต่อผู้ใช้งาน</p>\n\n\n\n<p>หรือถ้าต้องการลดข้อผู้มัดไปอีก ก็ไปทาง event-based ไปเลย<br />โดยฝั่ง provider ก็ไม่รู้ด้วยว่าฝั่ง consumer มีใครบ้าง<br />ยิ่งทำให้เป็นอิสระต่อกันมากยิ่งขึ้น<br />แต่ก็ตามมาด้วยระบบ observability ที่ดีด้วย<br />มีได้ก็ต้องมีเสีย</p>\n\n\n\n<p><strong>จะเห็นได้ว่า เราเน้นไปที่ความเป็นอิสระต่อกัน</strong></p>\n\n\n\n<p>เพื่อให้พัฒนา ทดสอบ deploy scale และ maintain ได้ง่าย<br />รวมไปถึงเรื่อง resielince ของระบบด้วย<br />แต่ไม่ใช่จะแยก service เสมอไปนะ<br />ต้องดูการทำงานใช้งานด้วยว่า เป็นแบบใด<br />แยกมาก ๆ อาจจะแย่ก็ได้ ตรงนี้ต้องระมัดระวัง</p>\n\n\n\n<p>หรือแทนที่จะเรียกต่อกันยาว ๆ<br />อาจจะใช้แนวคิด composition ก็ได้<br />มีหลายแนวทางที่น่าสนใจ</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"546b397f339d5c779da7ad4333d9b3b6eb9b77dcf600f8eae3741b4e950bd68c","category":"Thai"}