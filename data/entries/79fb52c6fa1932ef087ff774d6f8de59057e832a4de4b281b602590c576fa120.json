{"title":"6 สิ่งที่สำคัญต่อ Code Quality จากหนังสือ Good code, Bad Code","link":"https://www.somkiat.cc/6-properties-of-code-quality/","date":1634194016000,"content":"<p><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/10/code-quailty-good-code-150x150.png\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/10/code-quailty-good-code.png\" /></figure>\n\n\n\n<p>จากหนังสือ <strong><a href=\"https://www.manning.com/books/good-code-bad-code\" target=\"_blank\">Good code, Bad code</a></strong> นั้น<br />จะเน้นในเรื่องของความรู้และความสามารถพื้นฐานของการพัฒนา<br />เพื่อช่วยให้พัฒนาระบบให้เป็นไปตามเป้าหมายที่ตั้งไว้<br />โดยในเรื่องของ Code Quality นั้นมีคำแนะนำที่สำคัญ 6 อย่างไว้ให้<br />จึงทำการสรุปการอ่านไว้นิดหน่อย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>ข้อที่ 1 Make code readable</strong></p>\n\n\n\n<p>เป็นเรื่องที่พูดถึงตลอด แต่มันก็ต้องดูความสามารถของทีมด้วยเช่นกัน<br />โดย code ที่ดีควรจะ<br />บอกได้ว่าทำอะไร<br />บอกได้ว่าทำงานอย่างไรต้องมี input หรือ state อะไรบ้าง<br />หลังจากที่ code ส่วนนั้นทำงานแล้ว จะได้ผลลัพธ์อะไรออกมาที่ชัดเจน<br /><br />ถ้าเป็น code ที่ไม่ดี จะตอบสิ่งที่อธิบายมากยากขึ้นเรื่อย ๆ<br />แน่นอนว่า ส่งผลต่อเวลาในการพัฒนาอย่างแน่นอน</p>\n\n\n\n<p><strong>ข้อที่ 2 Avoid surprises</strong></p>\n\n\n\n<p>หลาย ๆ จะเคยบอกว่า code ชุดนี้ <br />เดี๋ยวมันก็ทำงานได้ เดี๋ยวก็ทำงานไม่ได้<br />หรือผิดพลาด ทั้ง ๆ ที่ยังไม่แก้ไขอะไรเลย<br />แก้ไขตรงนี้ กระทบตรงไหนก็ไม่รู้<br />ถ้าเจอปัญหาแบบนี้บ่อย ๆ เราจะทำอย่างไรดี ?</p>\n\n\n\n<p><strong>ข้อที่ 3 Make code hard to misuse</strong></p>\n\n\n\n<p>หมายความว่า code ส่วนหนึ่งทำงานแบบเฉพาะเจาะจง<br />ทำให้ผู้ใช้งานใช้ง่าย ไม่ผิด<br />ผู้สร้างก็จะได้เข้าใจอย่างชัดเจน ว่าต้องทำอะไร<br />ไม่ใช่เขียน code เพื่อให้ทุก ๆ คนมาใช้งาน ในทุก ๆ กรณี<br />ก่อให้เกิดการใช้งานที่ผิดพลาดก็เป็นได้</p>\n\n\n\n<p><strong>ข้อที่ 4 Make code modular</strong></p>\n\n\n\n<p>เรื่องของ modular จะช่วยให้เรา<br />สามารถแบ่งการทำงานออกเป็นส่วนเล็ก ๆ ที่จบในตัวเอง<br />จากนั้นแต่ละส่วนสามารถนำมาประกอบ<br />หรือแยกกันทำงานได้ง่าย<br />รวมทั้งง่ายต่อการเปลี่ยนแปลงอีกด้วย<br /><br />ไม่ง่ายสำหรับการพัฒนา เนื่องจากต้องการความรู้ความเข้าใจสูงเช่นกัน<br />แต่เป็นสิ่งที่สำคัญมาก ๆ</p>\n\n\n\n<p>เมื่อพัฒนาเป็น modular แล้วก็ระวังเรื่องของการเรียกใช้งานข้าม modular ด้วย !!</p>\n\n\n\n<p><strong>ข้อที่ 5 Make code reusable and generalizable</strong></p>\n\n\n\n<p>code ที่ดีต้องสามารถ reuse ได้<br />ถ้ามีการใช้งานหรือทำงานเหมือนกันจริง ๆ<br />แต่ต้องระวังการ over-reuse ด้วย<br /><br />เราจะ reuse เมื่อเกิดการใช้ซ้ำ <br />ถ้าไม่ซ้ำก็อย่าไปพยายาม reuse<br /><br />อีกอย่างคือ เมื่อต้องแก้ไข ต้องระวังเรื่องผลกระทบเช่นกัน<br />code ที่สามารถ reuse ก็มาจาก modular นั่นเอง<br /></p>\n\n\n\n<p><strong>ข้อที่ 6 Make code testable and test it properly</strong></p>\n\n\n\n<p>ในการสร้าง แก้ไข และลบ code นั้นสิ่งที่ต้องคิดคือ ผลกระทบที่ตามมา<br />ดังนั้นเราจำเป็นต้องทดสอบด้วยว่า code เหล่านั้น<br />ยังคงทำงานตามที่คาดหวังไว้หรือไม่<br /><br />โดย code ที่ดีจำเป็นต้องคิดเรื่องของ code ที่ testable ด้วย<br />เพื่อตอบโจทย์ที่เราต้องการ<br />ซึ่งการทดสอบมีหลาย level เช่น</p>\n\n\n\n<ul><li>Unit test</li><li>Integration test</li><li>End-to-End test</li></ul>\n\n\n\n<p>ถ้าเราไม่ได้คิดเรื่องเหล่านี้ไว้ ก็เป็นไปได้ยากที่จะทดสอบ<br />และรู้ผลกระทบจากการเปลี่ยนต่าง ๆ<br />ทำให้เข้าสู่วัฎจักรการพัฒนาแบบเดิม ๆ !!</p>\n\n\n\n<p><strong><em>ทั้ง 6 ข้อน่าจะพอเป็นแนวทางในการพัฒนาระบบงาน<br />เพื่อเพิ่มคุณภาพของ code ให้ดียิ่งขึ้น</em></strong><br /><br />ขอให้สนุกกับการเขียน code</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"79fb52c6fa1932ef087ff774d6f8de59057e832a4de4b281b602590c576fa120","category":"Thai"}