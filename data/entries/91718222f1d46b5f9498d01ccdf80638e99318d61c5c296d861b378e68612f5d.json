{"title":"สรุปการแบ่งปันเรื่อง API-First development (Design-First)","link":"https://www.somkiat.cc/sharing-on-api-first-development/","date":1687775980000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/06/API_First_Design_Practices-150x150.png\" alt loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/06/API_First_Design_Practices-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2023/06/API_First_Design_Practices-75x75.png 75w\" /></p>\n<p>มีโอกาสแบ่งปันประสบการณ์เรื่องของ <strong><a href=\"https://www.postman.com/api-first/\" target=\"_blank\">API-First development</a></strong> (Design-First)<br />ซึ่งจะตรงข้ามกับ Code-First ที่มักจะมีขั้นตอนการทำงานดังนี้</p>\n\n\n\n<ul>\n<li>ทำการออกแบบ API Specfication ในรูปแบบของ spreadsheet โดยคนออกแบบเช่น SA/BA</li>\n\n\n\n<li>ทำการพัฒนาตาม API Specification โดยนักพัฒนา</li>\n\n\n\n<li>ทำการ generate API Documentation จาก code ที่เขียนโดยนักพัฒนา</li>\n\n\n\n<li>จากนั้นก็มาคิดว่าจะทดสอบอย่างไร จะทำการจำลองเพื่อทดสอบใช้งานอย่างไร</li>\n</ul>\n\n\n\n<p>แต่แนวทางของ API-First development จะแตกต่างออกไปดังนี้</p>\n\n\n\n<span></span>\n\n\n\n<p>ขั้นตอนเป็นดังนี้</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/06/API_First_Design_Practices.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/06/API_First_Design_Practices-1024x539.png\" alt width=\"737\" height=\"388\" /></a></figure>\n\n\n\n<p><strong>ขั้นตอนที่ 1 ทำการออกแบบ API Specification ในรูปแบบที่เป็นมาตรฐานกลาง</strong></p>\n\n\n\n<p>ยกตัวอย่างรูปแบบที่ใช้งาน</p>\n\n\n\n<ul>\n<li><a href=\"https://swagger.io/\" target=\"_blank\">Swagger หรือ OpenAPI</a></li>\n\n\n\n<li><a href=\"https://www.postman.com/\" target=\"_blank\">Postman collection และ request</a></li>\n\n\n\n<li><a href=\"https://apiblueprint.org/\" target=\"_blank\">API Blueprint</a></li>\n</ul>\n\n\n\n<p>ในส่วนนี้ต้องทำงานเป็นทีม ไม่ใช่แค่ทีมออกแบบเท่านั้น<br />แต่ยังรวมไปถึงทีมพัฒนา (ผู้สร้างและผู้ใช้งาน) และ ทีมทดสอบ ด้วย<br /></p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/06/three-amigos.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/06/three-amigos-1024x516.jpg\" alt width=\"510\" height=\"257\" /></a></figure>\n\n\n\n<p><strong>ขั้นตอนที่ 2 ทีมทำการ review สิ่งที่ออกแบบมาว่าเป็นอย่างไร</strong></p>\n\n\n\n<p>จากนั้นทำการคิดว่า</p>\n\n\n\n<ul>\n<li>จะทำการทดสอบอย่างไร (API Testing) ทั้งในแง่ของ functional และ non-functional</li>\n\n\n\n<li>คนใช้งานจะใช้งานอย่างไรในการพัฒนา เช่น ทำการ Mock/Stub API ได้ไหม อย่างไร</li>\n\n\n\n<li>ทำการ generate API Documentation อย่างไร ในรูปแบบที่ต้องการ</li>\n</ul>\n\n\n\n<p>ทั้งสองขั้นตอนนี้ ยังไม่ได้เริ่มพัฒนา และ ทดสอบ นะ<br />เป็นเพียงขั้นตอนการออกแบบ เพื่อให้พร้อมต่อการพัฒนาและทดสอบต่อไป</p>\n\n\n\n<p><strong>ขั้นตอนที่ 3 ลงมือสร้างจากสิ่งที่ต้องการ จากขั้นตอนที่ 2</strong></p>\n\n\n\n<p>ยกตัวอย่างการออกแบบ API ด้วย Swagger หรือ OpenAPI<br />สามารถทำสิ่งต่าง ๆ ได้ดังนี้</p>\n\n\n\n<ul>\n<li>ใช้งาน <a href=\"https://editor.swagger.io/\" target=\"_blank\">Swagger Editor</a> ทำการออกแบบ</li>\n\n\n\n<li>ใช้งาน <a href=\"https://swagger.io/tools/swagger-codegen/\" target=\"_blank\">Swagger Codegen</a> สำหรับการสร้าง API Documentation, Mock/Stub API และ code ฝั่ง client</li>\n\n\n\n<li> หรือใช้งาน <a href=\"https://redocly.com/\" target=\"_blank\">Redocly</a> ในการสร้าง API Documentation</li>\n\n\n\n<li>หรือทำการ Mock/Stub API ด้วย <a href=\"https://github.com/jormaechea/open-api-mocker\" target=\"_blank\">OpenAPI Mocker</a></li>\n</ul>\n\n\n\n<p><strong><em>เป็นอีกแนวทางของการออกแบบ และ พัฒนา ระบบ API ของระบบ<br />ลองเรียนรู้ และ ใช้งานกันดูครับ ว่าเป็นอย่างไรกันบ้าง</em></strong></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"91718222f1d46b5f9498d01ccdf80638e99318d61c5c296d861b378e68612f5d","category":"Thai"}