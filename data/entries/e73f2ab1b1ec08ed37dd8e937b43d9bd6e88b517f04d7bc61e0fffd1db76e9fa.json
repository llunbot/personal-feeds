{"title":"Disaster recovery strategies with Terraform","link":"https://www.hashicorp.com/blog/disaster-recovery-strategies-with-terraform","date":1742400000000,"content":"<p>The total cost of unplanned outages has been rising exponentially each year. A 2016 study conducted by the <a href=\"https://www.vertiv.com/globalassets/documents/reports/2016-cost-of-data-center-outages-11-11_51190_1.pdf\">Ponemon Institute</a> stated that the mean total cost per minute of an unplanned outage was $8,851, a 32% increase since 2013, and a 81% increase since 2010. A 2022 <a href=\"https://www.bigpanda.io/blog/it-outage-costs-2024/\">study by EMA Research</a> says that number is up to $12,900. These metrics showcase how crucial it is for organizations to have a solid and well-thought disaster recovery strategy in place in order to reduce downtime and data loss as much as possible once disaster strikes.</p>\n\n<p>Ensuring business continuity and safeguarding mission-critical systems against unexpected failures can be time-consuming, expensive, and difficult to maintain, especially as systems scale. It is also not uncommon for disaster recovery (DR) solutions to cost enterprises anywhere from several hundreds of thousands to millions of dollars per year, creating significant strain on IT budgets within organizations.</p>\n\n<p>However, setting up and maintaining DR infrastructure doesn't have to be so cumbersome nor costly. This is where leveraging infrastructure as code (IaC) within your DR plan comes into play.</p>\n\n<p>This blog post showcases how <a href=\"https://www.hashicorp.com/en/blog/products/terraform\">HashiCorp Terraform</a> can be used to effectively setup, test, and validate your DR environments in a cost-efficient, practical, and consistent manner by codifying the infrastructure provisioning process.</p>\n\n<h2>Disaster recovery strategies and terminologies</h2>\n\n<p>Before diving into how Terraform can help provision and manage DR related infrastructure, it’s important to understand the concepts of Recovery Time Objective (RTO) and Recovery Point Objective (RPO), including how they differ from each other along with how they should be applied to your organization’s particular DR strategy:</p>\n\n<ul>\n<li><strong>Recovery Time Objective (RTO):</strong> Refers to the amount of time required to restore business operations after an unplanned outage takes place before negatively impacting the organization’s mission.</li>\n<li><strong>Recovery Point Objective (RPO):</strong> RPO refers to the amount of data a business can afford to lose, measured in time. This typically can vary anywhere from a few minutes to several hours depending on business requirements.</li>\n</ul>\n\n<p>It’s also necessary to understand some of the most popular disaster recovery strategies. The list below starts with the least expensive strategy and the strategies get more expensive as you go further down the list (<em>Figure 1 below shows each method on a spectrum of complexity and RTO/RPO</em>). </p>\n\n<p>Keep in mind that you will typically see a combination of these methods being used simultaneously within an organization’s DR strategy. For example, a container/VM cluster orchestrator will typically leverage the Pilot Light methodology, while database infrastructure might use the Backup &amp; Data Recovery method:</p>\n\n<ul>\n<li><strong>Backup &amp; Data Recovery:</strong> The least complex and least costly DR strategy covered here. This method involves backing up your systems/data to a different location and, in case of disaster, the data is restored from backup onto either an existing, or new system. This can be a simple and cost-effective strategy. However, depending on the amount of data and recovery process, can lead to high RTOs and/or RPOs.</li>\n<li><strong>Pilot Light:</strong> The goal of a Pilot Light environment is to have a minimalistic copy of your production environment with only the key components/services running in another location. When disaster occurs, the additional required components are provisioned and scaled up to production capacity. This strategy is typically quicker than the Backup/Data Recovery option, but it brings more complexity and cost as well.</li>\n<li><strong>Active/Passive:</strong> In this strategy, a fully functional replica of the production environment is created in a secondary location. This is a more expensive and complex strategy out of all the options discussed so far. However, it also provides the quickest recovery-time and minimal data loss compared to all of the previous methods.</li>\n<li><strong>Multi-Region Active/Active:</strong> This is where systems/applications are built to be distributed across various geographic regions. If one region fails, traffic is automatically redirected to other healthy regions. This is the most complex and expensive out of all strategies. It also provides the highest level of resilience and availability while also protecting mission-critical applications against full-region outages.</li>\n</ul>\n<img src=\"https://www.datocms-assets.com/2885/1742328800-dr-complexity_uptime-diagram.png\" alt=\"Disaster\" /><h2>Why use Terraform with your DR strategy?</h2>\n\n<p>If you have gone through the process of selecting and using DR tooling in the past, you most likely encountered one, or more, of the following problems:</p>\n\n<ul>\n<li><strong>Cost:</strong> As I previously mentioned, disaster recovery tools can be extremely expensive. Licensing fees coupled with ongoing costs of maintaining redundant, idle infrastructure can be a significant strain on IT budgets.</li>\n<li><strong>Lack of flexibility:</strong> DR toolsets are typically tied to a particular platform. This results in additional complexity and reduced flexibility when it comes to setting DR strategies across multiple cloud providers. This also applies to leveraging a managed solution from one of the major public clouds. While leveraging a cloud-specific DR solution may be convenient at first, it will limit your options for multi-cloud and hybrid strategies in the future as you expand.</li>\n<li><strong>Performance:</strong> These tools can also be very slow when it comes to performance and recovery speed. Legacy DR solutions typically rely on complex mechanisms that are slow and error prone, making desired RTO and RPO difficult to achieve.</li>\n</ul>\n\n<p>Terraform not only helps solve all these issues, but provides several other key advantages when it is leveraged within your disaster recovery strategy:</p>\n\n<ul>\n<li><strong>Automation:</strong> Terraform allows you to automate the entire infrastructure deployment and recovery process, minimizing the need for manual intervention and greatly reducing risk of human error. This also ensures consistency and repeatability within your DR infrastructure setup.</li>\n<li><strong>Repeatability:</strong> With Terraform, you are adopting an <a href=\"https://www.hashicorp.com/en/resources/what-is-infrastructure-as-code\">infrastructure as code</a> mindset, meaning that you ensure consistent infrastructure configuration across multiple environments by defining your infrastructure once in a codified manner. This mitigates <a href=\"https://www.hashicorp.com/en/resources/how-can-i-prevent-configuration-drift\">configuration drift</a> and ensures that your DR environment accurately mirrors your production setup.</li>\n<li><strong>Scalability:</strong> Terraform enables you to scale your environments as needed with ease, allowing you to test your DR infrastructure plans at scale, ensuring they can handle real-world scenarios.</li>\n<li><strong>Cost efficiency:</strong> Terraform allows you to dynamically provision and destroy ephemeral resources as needed, resulting in greatly reduced infrastructure costs as you only pay for the resources utilized during your DR exercise instead of incurring ongoing costs from resources that remain idle most of the time.</li>\n<li><strong>Flexibility:</strong> With Terraform being a cloud agnostic solution, you have the ability to not only spin up infrastructure in different availability zones or regions within a single cloud provider, but you can provision and manage resources across multiple cloud providers as well.</li>\n</ul>\n\n<h2>How to use Terraform with your DR strategy</h2>\n\n<p>Lets revisit the DR strategies mentioned previously and take a look at examples of how Terraform can be utilized with each one:</p>\n\n<ul>\n<li><strong>Backup &amp; Data Recovery:</strong> The <a href=\"https://developer.hashicorp.com/terraform/tutorials/state/refresh\">-refresh-only</a> flag can update the Terraform state file to match the actual infrastructure state without modifying the infrastructure itself. This can be used after a backup or recovery operation in order to sync Terraform state and reduce drift.</li>\n<li><strong>Pilot Light and Active/Passive:</strong> <a href=\"https://developer.hashicorp.com/terraform/language/expressions/conditionals\">Terraform conditional expressions</a> can be leveraged to deploy only the required infrastructure components needed for a Pilot Light while keeping other resources in a dormant state, or label an Active/Passive configuration as on/off until a DR event occurs. Once a DR event occurs, conditionals can trigger resource scaling to full production capacity, ensuring minimal downtime and operational impact. The next section of this post shows an example of this Active/Passive cutover. </li>\n<li><strong>Multi-Region Active/Active:</strong> <a href=\"https://developer.hashicorp.com/terraform/language/modules\">Terraform modules</a> can be used to encapsulate and re-use infrastructure components. This plays a crucial role in ensuring consistency is maintained in large-scale, multi-region environments while simplifying infrastructure management by ensuring a single source of truth for your infrastructure code. As an example, you can parameterize our modules by region, ensuring you deploy the same infrastructure across various regions: </li>\n</ul>\n<pre><code>#Terraform modules parameterized by region\n\nmodule \"vpc\" {\n  source = \"./modules/vpc\"\n  region = var.region\n}\n\nmodule \"compute\" {\n  source = \"./modules/compute\"\n  region = var.region\n  instance_count = var.instance_count\n}</code></pre><p>It is also worth noting that the <a href=\"https://developer.hashicorp.com/terraform/cli/import\">Terraform import</a> command can be a valuable tool within your DR strategy by ensuring existing infrastructure created outside of Terraform is integrated and managed.</p>\n\n<h2>Disaster Recovery Active/Passive cutover example</h2>\n\n<p>To demonstrate how you can leverage Terraform for your DR strategy, the example below shows how to conduct a complete region failover within AWS for a web server hosted on an <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html\">Amazon EC2 instance</a> behind <a href=\"https://aws.amazon.com/route53/\">Route 53</a> (<em>Refer to Figure 2 below</em>).</p>\n\n<p>The complete code repository for this example can be found <strong><a href=\"https://github.com/andrefaria24/terraform-dr-failover-example\">here</a></strong>.</p>\n\n<p><strong>Note:</strong> I will be using my own domain already set up as an <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-working-with.html\">AWS Route 53 Hosted Zone</a> (andrecfaria.com). If you are following along, this value should be replaced with whatever domain you set up within your Terraform configuration.</p>\n\n<p>In a real-world scenario, your environment typically will be much more robust, most likely including: </p>\n\n<ul>\n<li>Multiple web servers across several availability zones</li>\n<li>Load balancers sitting in front of the web servers</li>\n<li>Databases in both regions with cross-region replication in place</li>\n<li>And more </li>\n</ul>\n\n<p>However, for simplicity, this example only uses EC2 instance.</p>\n<img src=\"https://www.datocms-assets.com/2885/1742328961-solution_overview.png\" alt=\"Figure\" /><p>This scenario,  employs the Active/Passive DR strategy with all of your infrastructure provisioned and managed through Terraform. However, the infrastructure required for a DR failover will only be provisioned when you trigger the failover itself, preventing ongoing costs related to idle compute instances and other cloud resources. After running a <code>terraform apply</code>, you see the following outputs:</p>\n<pre><code>Outputs:\n\ncurrent_active_environment = \"Production\"\ndns_record = \"test.andrecfaria.com\"\nproduction_public_ip = \"18.234.86.230\"</code></pre><p>You can use the <code>dig</code> command to verify that your DNS record points to the production IP address:</p>\n<pre><code>$ dig test.andrecfaria.com\n\n; &lt;&lt;&gt;&gt; DiG 9.18.28-0ubuntu0.22.04.1-Ubuntu &lt;&lt;&gt;&gt; test.andrecfaria.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 58089\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 512\n;; QUESTION SECTION:\n;test.andrecfaria.com.      \tIN  \tA\n\n;; ANSWER SECTION:\ntest.andrecfaria.com.   60  \tIN  \tA   \t18.234.86.230\n\n;; Query time: 9 msec\n;; SERVER: 10.255.255.254#53(10.255.255.254) (UDP)\n;; WHEN: Mon Feb 10 16:04:47 EST 2025\n;; MSG SIZE  rcvd: 65</code></pre><p>You can also run a <code>curl</code> command to visualize the contents of your production webpage:</p>\n<pre><code>$ curl \"http://test.andrecfaria.com\"\n<h1>Hello World from Production!</h1></code></pre><p>Looking at the Terraform code, within the <code>variables.tf</code> file you can find the following <code>dr_switchover</code> variable:</p>\n<pre><code>variable \"dr_switchover\" {\n  type        = bool\n  description = \"Flag to control environment switchover (false = Production | true = Disaster Recovery)\"\n  default     = false\n}</code></pre><p>This variable is a key component of the DR configuration because it will define whether the Route 53 DNS record points to the production web server (by keeping the default value of <code>false</code>), or if the record should switch over to the DR web server and create the required infrastructure resources for the DR failover to take place, by setting its value to <code>true</code>. </p>\n\n<p>This is accomplished by leveraging the conditional expressions functionality of Terraform when setting the <code>records</code> argument within the <code>aws_route53_record</code> resource declaration, as well as leveraging the <code>count</code> argument within the DR resources.</p>\n<pre><code># Route53 Record - Conditional based on dr_switchover\n\nresource \"aws_route53_record\" \"test\" {\n  zone_id = data.aws_route53_zone.selected.zone_id\n  name    = \"${var.subdomain}.${var.domain_name}\"\n  type    = \"A\"\n  ttl = 60\n  records = [var.dr_switchover ? aws_instance.dr_webserver.public_ip : aws_instance.prod_webserver.public_ip]\n}</code></pre><pre><code># Disaster Recovery EC2 Instance\n\nresource \"aws_instance\" \"dr_webserver\" {\n  count                  = var.dr_switchover ? 1 : 0\n  provider               = aws.dr\n  ami                    = var.dr_ami_id\n  instance_type          = var.instance_type\n  key_name               = var.key_name\n  vpc_security_group_ids = [aws_security_group.dr_sg.id]\n  user_data              = &lt;&lt;-EOF\n              #!/bin/bash\n              sudo yum update -y\n              sudo yum install -y nginx\n              sudo systemctl start nginx\n              sudo systemctl enable nginx\n              echo \"<h1>Hello World from Disaster Recovery!</h1>\" | sudo tee /usr/share/nginx/html/index.html\n              EOF\n  tags = {\n    Name        = \"dr-instance\"\n    Environment = \"Disaster Recovery\"\n  }\n  depends_on = [aws_security_group.dr_sg]\n}</code></pre><p>The only change required in order to cutover to the DR environment is setting the value of the <code>dr_switchover</code> variable to <code>true</code>:</p>\n<pre><code>$ terraform apply -var=\"dr_switchover=true\" -auto-approve</code></pre><p>Below are the actions and output that Terraform will display when creating the DR EC2 instance and performing an in-place update to the Route 53 record resource, changing the records argument to point to your DR web server IP address instead of the production IP address:</p>\n<pre><code>Terraform will perform the following actions:\n\n  # aws_instance.dr_webserver[0] will be created\n  + resource \"aws_instance\" \"dr_webserver\" {\n  \t...\n    }\n\n  # aws_route53_record.test will be updated in-place\n  ~ resource \"aws_route53_record\" \"test\" {\n    \tid = \"Z0441403334ANN7OFVRF1_test.andrecfaria.com_A\"\n    \tname = \"test.andrecfaria.com\"\n  \t~ records = [\n      \t- \"18.234.86.230\",\n    \t] -&gt; (known after apply)\n    \t# (7 unchanged attributes hidden)\n\t}\n\nPlan: 1 to add, 1 to change, 0 to destroy.\n\nChanges to Outputs:\n  ~ current_active_environment = \"Production\" -&gt; \"Disaster Recovery\"\n  + dr_public_ip  = (known after apply)\n\n\nOutputs:\n\ncurrent_active_environment = \"Disaster Recovery\"\ndns_record = \"test.andrecfaria.com\"\ndr_public_ip = \"54.219.217.97\"\nproduction_public_ip = \"18.234.86.230\n</code></pre><p>Once the Terraform run is complete, you can validate that the DNS record now points to the DR web server by using the same <code>dig</code> and <code>curl</code> commands as before):</p>\n<pre><code>#dig command results showing DR IP address\n\n$ dig test.andrecfaria.com\n\n; &lt;&lt;&gt;&gt; DiG 9.18.28-0ubuntu0.22.04.1-Ubuntu &lt;&lt;&gt;&gt; test.andrecfaria.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 19471\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 512\n;; QUESTION SECTION:\n;test.andrecfaria.com.      \tIN  \tA\n\n;; ANSWER SECTION:\ntest.andrecfaria.com.   60  \tIN  \tA   \t54.219.217.97\n\n;; Query time: 19 msec\n;; SERVER: 10.255.255.254#53(10.255.255.254) (UDP)\n;; WHEN: Mon Feb 10 16:16:25 EST 2025\n;; MSG SIZE  rcvd: 65</code></pre><pre><code>#curl command showcasing DR webpage contents\n\n$ curl \"http://test.andrecfaria.com\"\n<h1>Hello World from Disaster Recovery!</h1></code></pre><p>Finally, we can fail back to production by simply running the <code>terraform apply</code> command again, this time while setting the <code>dr_switchover</code> variable back to <code>false</code>. This will also destroy all the infrastructure created when failing over to DR, enabling us to prevent unnecessary spend related to idle resources.</p>\n<pre><code>#Setting the dr_switchover variable value via CLI\n\n$ terraform apply -var=\"dr_switchover=false\" -auto-approve</code></pre><pre><code>#Terraform apply run output\n\nTerraform will perform the following actions:\n\n  # aws_instance.dr_webserver[0] will be destroyed\n  # (because index [0] is out of range for count)\n  - resource \"aws_instance\" \"dr_webserver\" {\n  \t...\n    }\n\n  # aws_route53_record.test will be updated in-place\n  ~ resource \"aws_route53_record\" \"test\" {\n    \tid = \"Z0441403334ANN7OFVRF1_test.andrecfaria.com_A\"\n    \tname = \"test.andrecfaria.com\"\n  \t~ records = [\n      \t- \"54.219.217.97\",\n      \t+ \"18.234.86.230\",\n    \t]\n    \t# (7 unchanged attributes hidden)\n\t}\n\nPlan: 0 to add, 1 to change, 1 to destroy.\n\nChanges to Outputs:\n  ~ current_active_environment = \"Disaster Recovery\" -&gt; \"Production\"\n  - dr_public_ip = \"54.219.217.97\" -&gt; null</code></pre><h2>Cleanup</h2>\n\n<p>If you have been following along by deploying your own resources, don’t forget to run the <code>terraform destroy</code> command in order to clean up your environment and not incur any unwanted costs.</p>\n\n<h2>Other considerations</h2>\n\n<p>Some additional considerations to be mindful of when using Terraform for DR infrastructure provisioning include, but are not limited to:</p>\n\n<ul>\n<li><strong>Application install time:</strong> Applications that are not dependent on Terraform can take additional time to be installed and configured when performing a DR failover. Ensure that this is accounted for when determining RTO.</li>\n<li><strong>DNS propagation time:</strong> Keep in mind that DNS changes might take time to propagate. This can be mitigated by proactively lowering the time-to-live values of your DNS records a few days prior to the migration in the event of a planned failover.</li>\n<li><strong>Backups:</strong> Terraform does not backup your data and is not a replacement for your backup systems. Ensure that you have a solid backup strategy in place that meets your requirements in addition to your DR strategy.</li>\n</ul>\n\n<h2>Conclusion</h2>\n\n<p>This blog post demonstrated how Terraform can be leveraged to automate, simplify, and reduce costs related to provisioning and managing infrastructure within your disaster recovery strategy. To learn more about Terraform, visit the <a href=\"https://developer.hashicorp.com/terraform/docs\">HashiCorp developer portal</a>, where you can find more information regarding best practices, integrations, and reference architectures.</p>\n","author":"Andre Faria","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"e73f2ab1b1ec08ed37dd8e937b43d9bd6e88b517f04d7bc61e0fffd1db76e9fa","category":"Tech"}