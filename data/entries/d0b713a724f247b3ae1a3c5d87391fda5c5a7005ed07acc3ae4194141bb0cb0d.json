{"title":"Preview – Connect Foundation Models to Your Company Data Sources with Agents for Amazon Bedrock","link":"https://aws.amazon.com/blogs/aws/preview-connect-foundation-models-to-your-company-data-sources-with-agents-for-amazon-bedrock/","date":1694614425000,"content":"<p>In July, we announced the preview of <a href=\"https://aws.amazon.com/blogs/aws/preview-enable-foundation-models-to-complete-tasks-with-agents-for-amazon-bedrock/\">agents for Amazon Bedrock</a>, a new capability for developers to create generative AI applications that complete tasks. Today, I’m happy to introduce a new capability to <strong>securely connect foundation models (FMs) to your company data sources using agents</strong>.</p> \n<p>With a <strong>knowledge base</strong>, you can use agents to give FMs in Bedrock access to additional data that helps the model generate more relevant, context-specific, and accurate responses without continuously retraining the FM. Based on user input, agents identify the appropriate knowledge base, retrieve the relevant information, and add the information to the input prompt, giving the model more context information to generate a completion.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/amazon-bedrock-knowledgebase-2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/amazon-bedrock-knowledgebase-2.png\" alt=\"Knowledge Base for Amazon Bedrock\" width=\"2172\" height=\"1472\" /></a></p> \n<p>Agents for Amazon Bedrock use a concept known as retrieval augmented generation (RAG) to achieve this. To create a knowledge base, specify the <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> location of your data, select an embedding model, and provide the details of your vector database. Bedrock converts your data into embeddings and stores your embeddings in the vector database. Then, you can add the knowledge base to agents to enable RAG workflows.</p> \n<p>For the vector database, you can choose between <a href=\"https://aws.amazon.com/opensearch-service/serverless-vector-engine/\">vector engine for Amazon OpenSearch Serverless</a>, <a href=\"https://www.pinecone.io/\">Pinecone</a>, and <a href=\"https://redis.com/\">Redis Enterprise Cloud</a>. I’ll share more details on how to set up your vector database later in this post.</p> \n<p><strong><u>Primer on Retrieval Augmented Generation, Embeddings, and Vector Databases<br /> </u></strong>RAG isn’t a specific set of technologies but a concept for providing FMs access to data they didn’t see during training. Using RAG, you can augment FMs with additional information, including company-specific data, without continuously retraining your model.</p> \n<p>Continuously retraining your model is not only compute-intensive and expensive, but as soon as you’ve retrained the model, your company might have already generated new data, and your model has stale information. RAG addresses this issue by providing your model access to additional external data at runtime. Relevant data is then added to the prompt to help improve both the relevance and the accuracy of completions.</p> \n<p>This data can come from a number of data sources, such as document stores or databases. A common implementation for document search is converting your documents, or chunks of the documents, into vector embeddings using an embedding model and then storing the vector embeddings in a vector database, as shown in the following figure.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/15/rag_1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/15/rag_1.png\" alt=\"Knowledge Base for Amazon Bedrock\" width=\"844\" height=\"221\" /></a></p> \n<p>The vector embedding includes the numeric representations of text data within your documents. Each embedding aims to capture the semantic or contextual meaning of the data. Each vector embedding is put into a vector database, often with additional metadata such as a reference to the original content the embedding was created from. The vector database then indexes the vectors, which can be done using a variety of approaches. This indexing enables quick retrieval of relevant data.</p> \n<p>Compared to traditional keyword search, vector search can find relevant results without requiring an exact keyword match. For example, if you search for “What is the cost of product X?” and your documents say “The price of product X is […]”, then keyword search might not work because “price” and “cost” are two different words. With vector search, it will return the accurate result because “price” and “cost” are semantically similar; they have the same meaning. Vector similarity is calculated using distance metrics such as Euclidean distance, cosine similarity, or dot product similarity.</p> \n<p>The vector database is then used within the prompt workflow to efficiently retrieve external information based on an input query, as shown in the figure below.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/02/rag_2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/02/rag_2.png\" alt=\"Knowledge Base for Amazon Bedrock\" width=\"904\" height=\"487\" /></a></p> \n<p>The workflow starts with a user input prompt. Using the same embedding model, you create a vector embedding representation of the input prompt. This embedding is then used to query the database for similar vector embeddings to return the most relevant text as the query result.</p> \n<p>The query result is then added to the prompt, and the augmented prompt is passed to the FM. The model uses the additional context in the prompt to generate the completion, as shown in the following figure.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/15/rag_3.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/15/rag_3.png\" alt=\"Knowledge Stores for Amazon Bedrock\" width=\"937\" height=\"297\" /></a></p> \n<p>Similar to the fully managed agents experience I described in the blog post on <a href=\"https://aws.amazon.com/blogs/aws/preview-enable-foundation-models-to-complete-tasks-with-agents-for-amazon-bedrock/\">agents for Amazon Bedrock</a>, the knowledge base for Amazon Bedrock manages the data ingestion workflow, and agents manage the RAG workflow for you.</p> \n<p><strong><u>Get Started with Knowledge Bases for Amazon Bedrock<br /> </u></strong>You can add a knowledge base by specifying a data source, such as Amazon S3, select an embedding model, such as Amazon Titan Embeddings to convert the data into vector embeddings, and a destination vector database to store the vector data. Bedrock takes care of creating, storing, managing, and updating your embeddings in the vector database.</p> \n<p>If you add knowledge bases to an agent, the agent will identify the appropriate knowledge base based on user input, retrieve the relevant information, and add the information to the input prompt, providing the model with more context information to generate a response, as shown in the figure below. All information retrieved from knowledge bases comes with source attribution to improve transparency and minimize hallucinations.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/02/kb_02.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/02/kb_02.png\" alt=\"Knowledge Base for Amazon Bedrock\" width=\"2772\" height=\"1102\" /></a></p> \n<p>Let me walk you through those steps in more detail.</p> \n<p><strong><u>Create a Knowledge Base for Amazon Bedrock<br /> </u></strong>Let’s assume you’re a developer at a tax consulting company and want to provide users with a generative AI application—a TaxBot—that can answer US tax filing questions. You first create a knowledge base that holds the relevant tax documents. Then, you configure an agent in Bedrock with access to this knowledge base and integrate the agent into your TaxBot application.</p> \n<p>To get started, open the <a href=\"https://console.aws.amazon.com/bedrock/home\">Bedrock console</a>, select <strong>Knowledge base</strong> in the left navigation pane, then choose <strong>Create knowledge base</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/amazon-bedrock-knowledgebase-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/amazon-bedrock-knowledgebase-1.png\" alt=\"Knowledge Base for Amazon Bedrock\" width=\"2788\" height=\"1472\" /></a></p> \n<p><strong>Step 1 – Provide knowledge base details.</strong> Enter a name for the knowledge base and a description (optional). You also must select an <a href=\"https://aws.amazon.com/iam/\">AWS Identity and Access Management (IAM)</a> runtime role with a trust policy for Amazon Bedrock, permissions to access the S3 bucket you want the knowledge base to use, and read/write permissions to your vector database. You can also assign tags as needed.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/amazon-bedrock-kb-create1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/amazon-bedrock-kb-create1.png\" alt=\"Knowledge Base for Amazon Bedrock\" width=\"2636\" height=\"1556\" /></a></p> \n<p><strong>Step 2 – Set up data source.</strong> Enter a data source name and specify the Amazon S3 location for your data. Supported data formats include .txt, .md, .html, .doc and .docx, .csv, .xls and .xlsx, and .pdf files. You can also provide an <a href=\"https://aws.amazon.com/kms/\">AWS Key Management Service (AWS KMS)</a> key to allow Bedrock to decrypt and encrypt your data and another AWS KMS key for transient data storage while Bedrock is converting your data into embeddings.</p> \n<p>Choose the embedding model, such as Amazon Titan Embeddings – Text, and your vector database. For the vector database, as mentioned earlier, you can choose between vector engine for Amazon OpenSearch Serverless, Pinecone, or Redis Enterprise Cloud.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/02/KB_create_02.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/02/KB_create_02.png\" alt=\"Knowledge Base for Amazon Bedrock\" width=\"1403\" height=\"1173\" /></a></p> \n<p><strong>Important note on the vector database: </strong>Amazon Bedrock is not creating a vector database on your behalf. You must create a new, empty vector database from the list of supported options and provide the vector database index name as well as index field and metadata field mappings. This vector database will need to be for exclusive use with Amazon Bedrock.</p> \n<p>Let me show you what the setup looks like for vector engine for Amazon OpenSearch Serverless. Assuming you’ve <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-getting-started.html\">set up an OpenSearch Serverless collection as described in the Developer Guide</a> and <a href=\"https://aws.amazon.com/blogs/big-data/introducing-the-vector-engine-for-amazon-opensearch-serverless-now-in-preview/\">this AWS Big Data Blog post</a>, provide the ARN of the OpenSearch Serverless collection, specify the vector index name, and the vector field and metadata field mapping.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/amazon-bedrock-kb-vectordb.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/amazon-bedrock-kb-vectordb.png\" alt=\"Knowledge Base for Amazon Bedrock\" width=\"2398\" height=\"2420\" /></a></p> \n<p>The configuration for Pinecone and Redis Enterprise Cloud is similar. Check out this <a href=\"https://pinecone.io/blog/amazon-bedrock-integration\">Pinecone blog post</a> and this <a href=\"https://redis.com/blog/amazon-bedrock-integration-with-redis-enterprise/\">Redis Inc. blog post</a> for more details on how to set up and prepare their vector database for Bedrock.</p> \n<p><strong>Step 3 – Review and create.</strong> Review your knowledge base configuration and choose <strong>Create knowledge base</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/02/KB_create_04.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/02/KB_create_04.png\" alt=\"Knowledge Base for Amazon Bedrock\" width=\"2768\" height=\"2992\" /></a></p> \n<p>Back in the knowledge base details page, choose <strong>Sync</strong> for the newly created data source, and whenever you add new data to the data source, to start the ingestion workflow of converting your Amazon S3 data into vector embeddings and upserting the embeddings into the vector database. Depending on the amount of data, this whole workflow can take some time.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/amazon-bedrock-kb-ds-sync-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/amazon-bedrock-kb-ds-sync-1.png\" alt=\"Knowledge Base for Amazon Bedrock\" width=\"2430\" height=\"532\" /></a></p> \n<p>Next, I’ll show you how to add the knowledge base to an agent configuration.</p> \n<p><strong><u>Add a Knowledge Base to Agents for Amazon Bedrock<br /> </u></strong>You can add a knowledge base when creating or updating an agent for Amazon Bedrock. Create an agent as described in this <a href=\"https://aws.amazon.com/blogs/aws/preview-enable-foundation-models-to-complete-tasks-with-agents-for-amazon-bedrock/\">AWS News Blog post on agents for Amazon Bedrock.</a></p> \n<p>For my tax bot example, I’ve created an agent called “TaxBot,” selected a foundation model, and provided these instructions for the agent in step 2: “You are a helpful and friendly agent that answers US tax filing questions for users.” In step 4, you can now select a previously created knowledge base and provide instructions for the agent describing when to use this knowledge base.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/02/KB_add_agent.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/02/KB_add_agent.png\" alt=\"Knowledge Base for Amazon Bedrock\" width=\"1455\" height=\"742\" /></a></p> \n<p>These instructions are very important as they help the agent decide whether or not a particular knowledge base should be used for retrieval. The agent will identify the appropriate knowledge base based on user input and available knowledge base instructions.</p> \n<p>For my tax bot example, I added the knowledge base “TaxBot-Knowledge-Base” together with these instructions: “Use this knowledge base to answer tax filing questions.”</p> \n<p>Once you’ve finished the agent configuration, you can test your agent and how it’s using the added knowledge base. Note how the agent provides a source attribution for information pulled from knowledge bases.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/amazon-bedrock-kb-agent-preview.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/amazon-bedrock-kb-agent-preview.png\" alt=\"Knowledge Base for Amazon Bedrock\" width=\"1850\" height=\"1770\" /></a></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/generative-ai-with-llms.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/generative-ai-with-llms.png\" alt=\"Generative AI with large language models\" width=\"300\" height=\"150\" /></a><strong><u>Learn the Fundamentals of Generative AI</u></strong><br /> <a href=\"https://www.deeplearning.ai/courses/generative-ai-with-llms/\">Generative AI with large language models (LLMs)</a> is an on-demand, three-week course for data scientists and engineers who want to learn how to build generative AI applications with LLMs, including RAG. It’s the perfect foundation to start building with Amazon Bedrock. <a href=\"https://www.deeplearning.ai/courses/generative-ai-with-llms/\">Enroll for generative AI with LLMs today.</a></p> \n<p><strong><u>Sign up to Learn More about Amazon Bedrock (Preview)<br /> </u></strong><a href=\"https://us-east-1.console.aws.amazon.com/bedrock\">Amazon Bedrock</a> is currently available in preview. Reach out through your usual AWS support contacts if you’d like access to knowledge bases for Amazon Bedrock as part of the preview. We’re regularly providing access to new customers. To learn more, <a href=\"https://aws.amazon.com/bedrock/features/?trk=80acb49a-e4e5-48be-8dd5-24a05b52f386&amp;sc_channel=el\">visit the Amazon Bedrock Features page</a> and <a href=\"https://pages.awscloud.com/generative-AI-interest-learn.html\">sign up to learn more about Amazon Bedrock</a>.</p> \n<p>— <a href=\"https://www.linkedin.com/in/antje-barth/\" target=\"_blank\">Antje</a></p>","author":"Antje Barth","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"d0b713a724f247b3ae1a3c5d87391fda5c5a7005ed07acc3ae4194141bb0cb0d","category":"Tech"}