{"title":"HashiCorp Vault observability: Monitoring Vault at scale","link":"https://www.hashicorp.com/blog/hashicorp-vault-observability-monitoring-vault-at-scale","date":1691496000000,"content":"<p>Observability is the ability to measure the internal states of a system by examining its outputs. In the context of HashiCorp Vault, the key outputs to examine are log files, telemetry metrics, and data scraped from API endpoints.</p>\n\n<p>A mature Vault monitoring and observability strategy simplifies finding answers to important Vault questions. For example:</p>\n\n<ul>\n<li>Are there any security threats to secret data or the service itself?</li>\n<li>Are all compliance requirements satisfied?</li>\n<li>Who has access to what? Is secret access meeting ‘least privilege’ requirements?</li>\n<li>Is the Vault cluster healthy and adequately handling current workloads?</li>\n<li>Can the Vault cluster handle anticipated workloads and growth?</li>\n<li>What Vault features are being used the most?</li>\n<li>Are there opportunities to optimize client usage patterns to reduce the operating cost of Vault?</li>\n<li>Are the service-level agreement (SLA) and operational-level agreement (OLA) for consumers of the Vault service being met?</li>\n</ul>\n\n<p>This post will walk through how to architect a well-rounded Vault monitoring strategy with log analysis, telemetry analysis, and API/synthetic monitoring</p>\n\n<h2>Vault monitoring strategy</h2>\n\n<p>A comprehensive, production-grade HashiCorp Vault monitoring strategy should include three major components:</p>\n\n<ol>\n<li><strong>Log analysis:</strong> Detecting runtime errors, granular usage monitoring, and audit request activity</li>\n<li><strong>Telemetry analysis:</strong> Monitoring the health of the various Vault internals, and aggregated usage data</li>\n<li><strong>API and synthetic monitoring:</strong> Monitoring the actual response times users are experiencing, SLA/OLA reporting, and ensuring Vault service/API endpoints are available</li>\n</ol>\n\n<p>While there is some overlap in capabilities between the components, they are each focused on a different aspect of observability. When combined, they enable quick identification, analysis, and resolution of issues.</p>\n\n<p>For example, a Vault operator might receive an alert from a synthetic monitor that detected a breached SLA in authenticating to Vault and reading a secret. Telemetry data might show that Vault is experiencing an abnormally high login request volume, resulting in high disk I/O. A subsequent audit log analysis would identify the source of the login traffic. </p>\n\n<p>Perhaps the offender is a runaway application or team not conforming to Vault usage best practices. The operator could then have a conversation with that team or quickly push a fix to that app. They could also use telemetry and log data to set a reasonable rate limit for the app in question, preventing this situation from occurring again.</p>\n\n<h3>Infrastructure monitoring</h3>\n\n<p>Infrastructure monitoring is a critical component of a comprehensive monitoring/observability strategy. Infrastructure and host-level events that should be adequately logged and observed include:</p>\n\n<ul>\n<li>Hardware failures</li>\n<li>Network failures</li>\n<li>Kernel errors/warnings</li>\n<li>File handle exhaustion</li>\n<li>Storage consumption</li>\n<li>Remote access events</li>\n<li>Events relevant to the health and security of the Vault hosts </li>\n</ul>\n\n<p>If the infrastructure hosting Vault is not healthy or stable, it will most likely impact its reliability and performance. Logs provided by the operating system in use, as well as metrics/telemetry agents, can be used as a source for these events. </p>\n\n<p>There are many publicly available guides to system/host-level monitoring, and organizations should follow industry standards and best practices. If an organization already uses a specific log and metrics analysis solution, that vendor likely provides useful guidance. Here are some helpful guides:</p>\n\n<ul>\n<li><a href=\"https://www.techtarget.com/searchitoperations/The-definitive-guide-to-enterprise-IT-monitoring\">The definitive guide to enterprise IT monitoring</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-metrics-monitoring-and-alerting\">An Introduction to Metrics, Monitoring, and Alerting</a></li>\n<li><a href=\"https://geekflare.com/prometheus-grafana-setup-for-linux/\">A Guide to Monitor Linux Server using Prometheus and Grafana</a></li>\n</ul>\n\n<h3>Vault performance and health</h3>\n\n<p>To ensure adherence to SLAs defined by the organization, it is important to know how the Vault software is performing on top of the platform or infrastructure on which it is hosted. This includes an understanding of how much of the allocated system resources Vault is using on average and during busy periods such as a large deployment or other events that drive high request rates to Vault. It is also important to know the rate and timing of requests being made to Vault. The speed of Vault request handling and the times of high request volume are key factors to monitor for anomalous activity.</p>\n\n<h3>Vault service consumption</h3>\n\n<p>In order to know how Vault is being used, it is important to understand that Vault handles requests from both applications and users. Analyzing the requests that Vault is handling can help answer some important questions, such as: </p>\n\n<ul>\n<li>What types of operations are being performed? </li>\n<li>What features of Vault are being leveraged? </li>\n<li>Which teams, entities, or applications are using Vault the most?</li>\n</ul>\n\n<p>An understanding of Vault service consumption can help Vault operators be sure that teams and applications are using Vault properly. It can help them discover patterns of use that are not efficient or that go against best practices. For example, teams may not be practicing proper token hygiene or limiting time-to-live (TTLs) reasonably. A team might be unnecessarily relying on Vault during the run time of their application instead of just fetching secrets once at deploy time, causing a high reliance on Vault and a high volume of requests.</p>\n\n<p>If a company uses chargebacks to recoup the cost of running Vault within the organization, Vault service consumption data can help determine each team’s bill. Service consumption data can help Vault operators identify and partner with the top teams by usage or with teams that use a particular feature to test Vault changes or upgrades in a development environment before going to production.</p>\n\n<h2>Log analysis</h2>\n\n<p>There are two types of Vault logs: the Vault operational log and the Vault audit log. Both logs contain useful and important information for teams operating a Vault service. It is important to understand what information exists in each of these logs to understand why and how they should be monitored.</p>\n\n<p>The Vault logs should be sent to a log-analysis tool that allows analysis, search, and building of reports and dashboards using the log data. Examples of suitable log aggregation and analysis tools include:</p>\n\n<ul>\n<li><a href=\"https://www.datadoghq.com/\">Datadog</a></li>\n<li><a href=\"https://www.dynatrace.com/\">Dynatrace</a></li>\n<li><a href=\"https://www.elastic.co/what-is/elk-stack\">ELK Stack</a></li>\n<li><a href=\"https://newrelic.com/\">New Relic</a></li>\n<li><a href=\"https://www.splunk.com/\">Splunk</a></li>\n</ul>\n\n<h3>Vault operational log</h3>\n\n<p>Like many modern apps, Vault writes details about its internal operation and subsystem to standard output and standard error. On systemd-based Linux distributions, the journald daemon automatically captures Vault’s output to the system journal. Depending on the Linux distribution and specific journald configuration, the journald logs are typically found in log files matching one of these patterns: </p>\n\n<ul>\n<li> <code>/var/log/journal*</code></li>\n<li> <code>/var/log/syslog*</code></li>\n<li> <code>/var/log/messages*</code></li>\n</ul>\n\n<p>It’s also possible to configure systemd to send the logs from a specific unit to a separate file, such as <code>/var/log/vault*</code>.</p>\n\n<p>The events logged in the Vault operational log match the format of many other common system logs and are time-stamped and categorized by severity.</p>\n\n<h4>Example event types</h4>\n\n<p>Important event types logged in the Vault operational log include:</p>\n\n<ul>\n<li>Vault Enterprise license expiry</li>\n<li>Vault seal/unseal events</li>\n<li>Replication-related events</li>\n<li>Vault cluster events (raft, quorum, active/passive nodes, leader election)</li>\n<li>Audit log failures</li>\n<li>Network connection issues</li>\n<li>Secrets engine errors</li>\n<li>Storage backend events</li>\n<li>TLS certificate errors</li>\n</ul>\n\n<p>It is important to note that some of these events are also exposed in Vault telemetry. When the events are available in both logs and telemetry, it is up to the team implementing the monitoring to determine which source to use for monitoring/alerting purposes. The logs will likely have more context as they are often more verbose and can be compared with other log events occurring just before or just after the triggered event. For more information, see <a href=\"https://support.hashicorp.com/hc/en-us/articles/360000995548-Audit-and-Operational-Log-Details#:%7E:text=Vault%20Operational%20Log%20Details\">Vault operational log details</a> in our documentation.</p>\n\n<h3>Vault audit log</h3>\n\n<p>This log keeps a detailed record of all requests to Vault, and the associated responses, in JSON format. Sensitive fields in the request and response events are hashed with a salt value using HMAC-SHA256 before being written to the log. </p>\n\n<p>The Vault audit log is not enabled by default; it will need to be specifically configured and enabled using audit logging settings within Vault. Supported audit devices include file, syslog, and socket. </p>\n\n<p>Because audit device failures can block Vault from processing further requests, we recommend configuring at least two audit devices. The audit devices can be of the same type. For example, it is possible to configure two file audit devices with each on a separate and independent disk volume.</p>\n\n<h4>Example event types</h4>\n\n<p>Events that can be found in the Vault audit log include:</p>\n\n<ul>\n<li>Authentication successes/failures for both humans and machines</li>\n<li>The details of any request made to Vault\n\n<ul>\n<li>Read/write/update/delete/list</li>\n<li>Changes to Vault configuration or Vault policies</li>\n<li>Secret engines enabled/disabled</li>\n<li>Dynamic credentials creation</li>\n<li>Interactions with <a href=\"https://developer.hashicorp.com/vault/docs/concepts/policies#root-protected-api-endpoints\">root protected endpoints</a></li>\n</ul></li>\n<li>For each request, the response that Vault sends to the client is also captured\n\n<ul>\n<li>Successes versus failures</li>\n<li>Access denied or allowed</li>\n</ul></li>\n</ul>\n\n<p>Typically, the events logged in the Vault audit log are authenticated requests or attempts to authenticate. Unauthenticated actions can be found in the Vault operational log.</p>\n\n<p>For more information, see <a href=\"https://support.hashicorp.com/hc/en-us/articles/360001722947-Audit-Log-Notes\">Audit device notes</a> in our documentation.</p>\n\n<h2>Telemetry</h2>\n\n<p>Vault telemetry provides both real-time and interval-based metrics about the status and usage of each Vault deployment. It is useful for determining current cluster health and identifying issues before they become critical. </p>\n\n<p>Some metrics should be observed for anomalous values whereas others have specific recommended values on which to trigger alerts. Profile telemetry data over time to observe any abnormalities in resource usage, consumption patterns, and overall load. Establish baselines and trends, with any significant deviation indicating a potential problem. </p>\n\n<p>Please note that new metrics are added periodically in new Vault releases, so some may be unavailable for teams using older versions of Vault. You can view available metrics by selecting your Vault version from the dropdown on the <a href=\"https://developer.hashicorp.com/vault/docs/internals/telemetry\">Vault telemetry internals page</a>.</p>\n\n<h3>Telemetry configuration</h3>\n\n<p>Telemetry is enabled and configured using the <a href=\"https://developer.hashicorp.com/vault/docs/configuration/telemetry\">telemetry stanza</a> in Vault’s configuration file. Like most changes to the config file, enabling telemetry requires a restart of the Vault service on each node. Vault provides built-in support for multiple telemetry providers, including:</p>\n\n<ul>\n<li>Circonus</li>\n<li>DogStatsD</li>\n<li>Prometheus</li>\n<li>Stackdriver</li>\n<li>StatsD</li>\n<li>Statsite</li>\n</ul>\n\n<p>It is up to each organization to select an appropriate telemetry provider compatible with its chosen monitoring tool. Depending on the selection, one can either stream telemetry to an available monitoring endpoint or scrape this data from the Prometheus-compatible <code>/v1/sys/metrics</code> API endpoint. </p>\n\n<p>Vault’s server process aggregates runtime metrics about performance every 10 seconds. It also includes high-cardinality usage data such as token, entity, and secret counts. These high cardinality items are aggregated every 10 minutes, by default, but this frequency is tunable by adjusting the <code>usage_gauge_period</code> property in the telemetry stanza. Bear in mind that high-cardinality metrics put a larger load on Vault than real-time metrics. For this reason, it is best to avoid collecting them more frequently than the default without performance testing and a good reason.</p>\n\n<p>We also recommend avoiding providers that don’t support labels (such as vanilla StatsD), as this results in a flattened metric key that requires additional processing to be useful. For example, the <code>vault.token.count.by_policy</code> metric would display as separate metrics (shown below) instead of a single metric with multiple labels that can be can split or filtered on.</p>\n\n<pre><code>vault.token.count.by_policy.mycluster.ns1.policy1\nvault.token.count.by_policy.mycluster.ns1.policy2\nvault.token.count.by_policy.mycluster.ns2.policy3\nvault.token.count.by_policy.mycluster.ns2.policy4\n…\n</code></pre>\n\n<p>A detailed write-up on one Vault monitoring pattern option is available in our documentation at <a href=\"https://developer.hashicorp.com/vault/tutorials/monitoring/monitor-telemetry-audit-splunk\">Monitor telemetry &amp; audit device log data</a>.</p>\n\n<h3>Critical metrics</h3>\n\n<p>As a starting point, the most critical metrics that could indicate an immediate threat to Vault stability are listed below. Create alerts for these metrics.</p>\n\n<h4>Operational</h4>\n\n<ul>\n<li> <code>vault.core.unsealed</code></li>\n<li> <code>vault.core.leadership_lost</code></li>\n<li> <code>vault.core.leadership_setup_failed</code></li>\n<li> <code>vault.core.license.expiration_time_epoch</code></li>\n<li> <code>vault.autopilot.node.healthy</code></li>\n<li> <code>vault.raft.leader.lastContact</code></li>\n<li> <code>vault.raft.commitTime</code></li>\n<li> <code>vault.audit.log_request_failure</code></li>\n<li> <code>vault.audit.log_response_failure</code></li>\n<li> <code>vault.autosnapshots.save.errors</code></li>\n<li> <code>vault.runtime.total_gc_pause_ns</code></li>\n<li> <code>vault.wal.flushReady</code></li>\n<li> <code>vault.wal.persistWALs</code></li>\n</ul>\n\n<h4>System</h4>\n\n<ul>\n<li>File descriptors</li>\n<li>Memory usage</li>\n<li>CPU usage and CPU IO wait</li>\n<li>Disk IO latency and remaining disk capacity</li>\n</ul>\n\n<h4>Usage</h4>\n\n<p>To better understand the request load on Vault, start with the metrics below. You might alert on anomalous changes and sudden spikes in request load.</p>\n\n<ul>\n<li> <code>vault.token.creation</code></li>\n<li> <code>vault.expire.num_leases</code></li>\n<li> <code>vault.core.in_flight_requests</code></li>\n<li> <code>vault.core.handle_request.count</code></li>\n<li> <code>vault.core.handle_login_request.count</code></li>\n</ul>\n\n<p><strong>Note:</strong> Unauthenticated requests against endpoints that are not handled at Vault’s outer HTTP layer, like <code>sys/replication/status</code>, are also captured in the <code>vault_core_handle_login_request</code> metric. This means the metric may display authentication requests in an otherwise idle cluster that is not receiving any client authentication requests.</p>\n\n<p>For specific telemetry monitoring recommendations, please see our <a href=\"https://developer.hashicorp.com/vault/tutorials/monitoring/telemetry-metrics-reference\">Telemetry metrics reference</a>. Specifics on values that should trigger an alert are called out in the “what to look for” section of key metrics on that page. </p>\n\n<h3>A note on metric names</h3>\n\n<p>Metric names and how they are formatted can vary depending on monitoring tool, telemetry provider, and whether the metrics are coming from <a href=\"https://developer.hashicorp.com/hcp/docs/vault\">HashiCorp-managed HCP Vault</a> or from a self-managed Vault deployment.</p>\n\n<p>HCP Vault emits a subset of the metrics available in the self-hosted Vault Enterprise release. This is meant to simplify monitoring by exposing only metrics that are actionable by operators while abstracting away those that are ultimately HashiCorp’s responsibility as a service provider. These metric names may appear slightly different from those emitted by a self-managed Vault and will be prefixed with <code>hcp</code>. For more information, please reference the <a href=\"https://developer.hashicorp.com/vault/tutorials/cloud-monitoring/vault-metrics-guide\">HCP Vault metrics guide</a>. </p>\n\n<h3>Missing metrics</h3>\n\n<p>While each node in a cluster emits many metrics, there are exceptions. </p>\n\n<p>Certain metrics are emitted only when there is a matching event, so it is normal to be “missing” data in some areas. Examples include the <code>vault.core.leadership_setup_failed</code> and <code>vault.core.leadership_lost</code> metrics.</p>\n\n<p>Furthermore, some metrics emit only from the current cluster leader node because only the leader actively handles write operations and various other tasks. In a typical Vault cluster, non-leader nodes are in a standby state where they service read requests and forward all write requests to the leader.  </p>\n\n<p>Examples of metrics emitted only by the leader include:</p>\n\n<ol>\n<li>Replication metrics like <code>vault.wal.flushready</code>, <code>vault.wal.persistWALs</code>, and <code>vault.replication.wal.last_wal</code></li>\n<li>Lease metrics like <code>vault.expire.*</code> </li>\n<li>Leadership metrics like <code>vault.core.leadership_lost</code></li>\n</ol>\n\n<p>In Vault versions prior to 1.13.0, 1.12.3, and 1.11.12, a further metrics subset is not emitted by non-performance standby nodes and is only emitted from the leader. This applies to all disaster recovery (DR) secondary clusters on earlier versions. One such example is the <code>vault.core.unsealed</code> metric, which is reported only by the leader in a DR secondary cluster. This is important to note when viewing dashboards and configuring alerts.</p>\n\n<h2>Synthetic monitoring</h2>\n\n<p>Synthetic monitoring involves simulating user interactions instead of relying on real user traffic to a service. This type of monitoring is valuable in measuring the performance of, and detecting issues with, the Vault service. The data collected provides a snapshot of what users are actually experiencing when interacting with Vault, which is particularly useful for SLA/OLA reporting.</p>\n\n<p>Some monitoring solutions (e.g. Datadog, Dynatrace, and Splunk) provide out-of-the-box support for synthetic monitoring. If your chosen tool does not, you can build a simple script, run it on a recurring schedule, and stream the results to a service endpoint such as the Splunk HTTP Event Collector. </p>\n\n<p>For each run, measure and track:</p>\n\n<ol>\n<li>Successes</li>\n<li>Failures</li>\n<li>Total execution time</li>\n<li>Execution time of each individual step (Auth/read/write/delete/token revocation)</li>\n</ol>\n\n<p>Using these measures, you can build an accurate understanding of how the Vault service is performing, from the perspective of the people and machines consuming it.</p>\n\n<h3>Synthetic monitoring recommendations</h3>\n\n<ol>\n<li>Run monitors at a defined interval. One minute is a reasonable starting point.\n\n<ol>\n<li>Consider your Vault SLA/OLA/SLO, usage patterns, and infrastructure hardware when selecting your interval.</li>\n</ol></li>\n<li>Run monitors from the location(s) where clients are running so that results reflect what client applications and users are experiencing. </li>\n<li>Follow best practices around lease and token creation. Use short TTLs and explicit revocation wherever possible. </li>\n<li>Store critical data, like success/failure and execution time, long-term.</li>\n<li>Aggregate this data in your monitoring solution for evaluation and analysis.</li>\n<li>Visualize the data on relevant dashboards.</li>\n<li>Create new monitors as usage patterns expand, new secret engines are added, and new auth methods are enabled.</li>\n<li>Review and update existing monitors to ensure they’re still relevant and useful. </li>\n<li>Consider sending an alert upon an SLA/OLA/SLO breach.</li>\n</ol>\n\n<h3>Synthetic monitoring examples</h3>\n\n<p>To effectively monitor HashiCorp Vault, the organization’s platform team should design comprehensive synthetic monitoring scenarios. These scenarios should mimic real-world user interactions and include critical functionality and features of Vault. Here are some starter examples:</p>\n\n<h4>Simple K/V</h4>\n\n<ol>\n<li>Authenticate with Vault using an enabled auth method and retrieve a service token.</li>\n<li>Use the service token to write a secret.</li>\n<li>Use the service token to retrieve a secret.</li>\n<li>Compare the secret to expected values.</li>\n<li>Use the service token to delete the secret.</li>\n<li>Revoke the service token.</li>\n</ol>\n\n<h4>Replication</h4>\n\n<ol>\n<li>Authenticate with the Vault primary and retrieve a service token.</li>\n<li>Use the service token to write a secret to the Vault primary.</li>\n<li>Use the service token to retrieve the secret from a Vault performance secondary.</li>\n<li>Compare the secret to expected values.</li>\n</ol>\n\n<h2>Dashboarding</h2>\n\n<p>When designing a dashboard, focus on how to visualize data in an easily consumable format. Consider the target user group of each dashboard. The best way to construct and break out dashboards depends on an enterprise’s choice of tools, service architecture, and team skill set. What is natural and obvious to one team may be unclear to another. </p>\n\n<p>A dashboard should satisfy a particular need or answer a particular question, such as:</p>\n\n<ul>\n<li>What is the current high-level health state of each Vault cluster?</li>\n<li>Are SLA/OLA/SLO measures being met?</li>\n<li>How is the Vault service being consumed? Which teams or apps are the top consumers?</li>\n<li>How can I analyze and troubleshoot an issue occurring in one of the deployments?</li>\n<li>Where are high TTL tokens created?</li>\n<li>Are any quotas or rate limits being violated?</li>\n</ul>\n\n<p>Include dashboard-wide filters for different dimensions such as:</p>\n\n<ul>\n<li>Cluster</li>\n<li>Storage backend</li>\n<li>Environment</li>\n<li>Host</li>\n</ul>\n\n<p>Consider also including the following dashboard-wide filters on a consumption-focused dashboard:</p>\n\n<ul>\n<li>Namespace</li>\n<li>Auth method</li>\n<li>Mount point</li>\n<li>Creation TTL</li>\n<li>Token type</li>\n<li>Secret engine</li>\n</ul>\n\n<p>After completing prototype dashboards, build automation around the deployment and ongoing maintenance of them. It is important to drive consistency in naming and tile configuration across environments (i.e. dev should look the same as prod). An operator having to hunt for important data complicates analysis and wastes valuable time during an outage.</p>\n\n<h2>Reporting</h2>\n\n<p>Similar to dashboarding, generating reports based on Vault data provides operators and management insights into compliance, security, access patterns, performance, and Vault adoption. Teams typically generate reports using a combination of the previously mentioned observability mechanisms and, in some cases, custom scripts that extract data directly from Vault.</p>\n\n<h3>Generating reports</h3>\n\n<p>Most enterprises find it valuable to correlate key indicators with organizational constructs (e.g. team, business unit, application, service, etc.). This is considerably easier when working with a well-defined path structure, naming convention, and tagging standard.</p>\n\n<p>Path structure should tie back to how teams are organized within the enterprise. This makes it easier to generate a report that is split by each team or business unit. Reference the <a href=\"https://developer.hashicorp.com/vault/tutorials/enterprise/namespace-structure\">Vault namespace and mount structuring guide</a> for more information.</p>\n\n<p>Make naming consistent wherever possible. The most critical items are paths, policies, and namespaces. This not only eases report generation, but also allows humans to more quickly understand the structure and data within Vault.</p>\n\n<p>Many Vault constructs — like namespaces, entities, entity aliases, and KV secrets — support custom metadata tagging. We recommend seeding key organizational information associated with each of these constructs via custom tags. This provides another way to map data back to the many dimensions of your business.</p>\n\n<h3>Reporting recommendations</h3>\n\n<p>The reporting needs of each organization vary, but the examples below are common across many of our customers.</p>\n\n<h4>Security</h4>\n\n<ul>\n<li>Anomalous request activity</li>\n<li>Active root tokens</li>\n<li>Long-lived leases or tokens by team</li>\n</ul>\n\n<h4>Usage</h4>\n\n<ul>\n<li>Number of transactions by team and overall</li>\n<li>Number of leases by team</li>\n<li>Long-lived leases or tokens by team</li>\n<li>Number and size of KV secrets by team</li>\n</ul>\n\n<h4>Performance</h4>\n\n<ul>\n<li>SLA/OLA reporting</li>\n<li>Response time (read, write, auth) (month-to-month trending)</li>\n</ul>\n\n<h4>Executive summary</h4>\n\n<ul>\n<li>Vault adoption</li>\n<li>Automation index: Number of human logins versus machine logins</li>\n<li>Dynamic secrets adoption: Dynamic vs. KV workloads</li>\n</ul>\n\n<h2>Conclusion</h2>\n\n<p>Comprehensive monitoring and observability of Vault is one of the most important components for operating Vault successfully as a shared service within an organization. If issues arise, proper monitoring can help a platform team confidently identify the source and the impact, enabling quicker issue resolution. </p>\n\n<p>With the right strategy, organizations proactively discover risks and address them before they impact Vault consumers. A complete monitoring strategy offers a clear overview of how Vault is being implemented and utilized throughout the organization, enabling platform teams and leadership to make informed decisions based on data-driven insights.</p>\n\n<h2>References</h2>\n\n<h3>Log analysis</h3>\n\n<ul>\n<li><a href=\"https://support.hashicorp.com/hc/en-us/articles/360000995548-Audit-and-Operational-Log-Details#:%7E:text=Vault%20Operational%20Log%20Details\">Explanation of Vault operational log format</a></li>\n<li><a href=\"https://support.hashicorp.com/hc/en-us/articles/360001722947-Audit-Log-Notes\">Audit device notes</a></li>\n</ul>\n\n<h3>Telemetry</h3>\n\n<ul>\n<li><a href=\"https://developer.hashicorp.com/vault/docs/configuration\">Telemetry configuration</a></li>\n<li><a href=\"https://developer.hashicorp.com/vault/docs/internals/telemetry\">Vault telemetry internals</a></li>\n<li><a href=\"https://developer.hashicorp.com/vault/tutorials/monitoring\">Vault monitoring tutorials</a></li>\n<li><a href=\"https://developer.hashicorp.com/vault/tutorials/monitoring/telemetry-metrics-reference\">Telemetry metrics reference</a></li>\n<li><a href=\"https://developer.hashicorp.com/vault/tutorials/monitoring/monitor-replication\">Monitoring Vault replication</a></li>\n<li><a href=\"https://developer.hashicorp.com/vault/tutorials/cloud-monitoring/vault-metrics-guide\">HCP Vault metrics guide</a></li>\n<li><a href=\"https://developer.hashicorp.com/vault/tutorials/monitoring/monitor-telemetry-audit-splunk#splunk-app\">Monitor telemetry and audit device data log data – Splunk app</a></li>\n</ul>\n","author":"JD Goins","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"05cd1267805631c9e1506f18d888af5e4d914a58109f20de6cd1d6f82c863688","category":"Tech"}