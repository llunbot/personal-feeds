{"title":"ผลจากการ review code ในภาษา Go","link":"https://www.somkiat.cc/note-review-code-with-go/","date":1687074676000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/06/qc2-150x150.jpg\" alt loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/06/qc2-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2023/06/qc2-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/06/qc2.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/06/qc2-1024x429.jpg\" alt width=\"706\" height=\"295\" /></a></figure>\n\n\n\n<p>วันนี้ทำการ review code ที่เขียนด้วยภาษา Go กับทีม<br />พบว่ามี pattern แปลก ๆ มาใน code ด้วย<br />อาจจะเรียกได้ว่าเป็น <a href=\"https://www.somkiat.cc/6-properties-of-code-quality/\" target=\"_blank\">B.A.D code</a> ก็ได้<br />ซึ่งขึ้ยอยู่กับ use case ด้วยเช่นกัน<br />เลยทำการสรุปไว้นิดหน่อย เพื่อใช้ในการปรับปรุงต่อไป</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เรื่องแรก เจอเยอะมาก ๆ คือ การใช้งาน function init()</strong></p>\n\n\n\n<p>โดยที่ init() นั้นจะใช้สำหรับการ initial ต่าง ๆ ที่ต้องการใช้งาน<br />ใน package นั้น ๆ เนื่องจากจะถูกเรียกใช้งานแบบอัตโนมัติ<br />บ่อยครั้งพบว่า ใน init() นั้นจะมี logic ต่าง ๆ เยอะ<br />ส่งผลให้จากต่อการทำความเข้าใจ<br />เกิดความผูกมัดมากยิ่งขึ้น<br />ยิ่งถ้ามีการเรียกใช้ข้าม package ก็จะมีขั้นตอนการทำงานเพิ่มเข้ามา<br />เป็นรูปแบบการเขียน code ที่เพิ่มความซับซ้อนเข้ามา<br />และทำให้การทดสอบยากขึ้นอีกด้วย<br />ดังนั้น ถ้าต้องการใช้งานต้องคิดดี ๆ</p>\n\n\n\n<p><strong>เรื่องที่สอง เจอการใช้งาน Global variable เยอะมาก ๆ</strong></p>\n\n\n\n<p>เนื่องจาก global variable นั้น<br />ช่วยให้ง่ายต่อการ share ข้อมูล หรือ state ต่าง ๆ ของการทำงาน<br />แต่ถ้าจัดการไม่ดี อาจจะก่อให้เกิดปัญหามากขึ้นตามมา เช่น</p>\n\n\n\n<ul>\n<li>เกิด race condition คือการอ่านและเขียนพร้อม ๆ กัน จากหลาย ๆ process เช่น การใช้งานจาก go routine ทำให้เกิดปัญหาที่ไม่คาดฝันขึ้นมาได้ ซึ่งหาปัญหายากมาก ๆ</li>\n\n\n\n<li>ทดสอบยากขึ้น</li>\n\n\n\n<li>การแยกในระดับ module และ package หรือการ reuse จะยากมาก ๆ</li>\n</ul>\n\n\n\n<p>ดังนั้นสิ่งที่ดีคือ ควรแยกให้ชัด ๆ ของ module และ package<br />เพื่อจัดการ scope ได้อย่างถูกต้องและเหมาะสม</p>\n\n\n\n<p><strong>เรื่องที่สาม มักจะไม่ใช้งาน defer และ recovery</strong></p>\n\n\n\n<p>บ่อยครั้งมักจะเจอว่า ไม่ค่อยใช้ defer ในการคืน resource ที่ขอใช้งาน<br />เช่นการเปิดอ่านไฟล์ หรือ เชื่อมต่อ database เป็นต้น<br />อักอย่างคือ ใช้ defer แต่ไม่ได้ตรวจสอบว่า resource เหล่านั้นขอใช้งานได้หรือไม่ !!</p>\n\n\n\n<p><br />รวมทั้งไม่ได้ใช้งาน recovery สำหรับจัดการ panic() ต่าง ๆ ที่เกิดขึ้น<br />ในขณะ runtime ส่งผลทำให้ระบบพังง่ายมาก ๆ<br />ซึ่งตรงนี้ต้องระมัดระวังอย่างมาก</p>\n\n\n\n<p><strong>เรื่องที่สี่ ชอบ ignore error ต่าง ๆ ที่ส่งกลับมาจาก function ต่าง ๆ</strong></p>\n\n\n\n<p>ปกติ function ต่าง ๆ มักจะ return error กลับมา<br />เพื่อบอกว่า ผลการทำงานของ function นั้น ๆ มี error หรือไม่<br />แต่บ่อยครั้งพบว่า จะ ignore ด้วย _ ในการรับ error นั้น ๆ<br />ซึ่งอาจจะทำให้ระบบทำงานผิดพลาดก็ได้<br />ดังนั้นควรระวังให้มาก ๆ</p>\n\n\n\n<p><strong>เรื่องที่ห้า จะเจอเกือบทุกภาษาคือ nest if หรือ if ซ้อน if ซ้อน if</strong></p>\n\n\n\n<p>ตรงนี้ลดละเลิกเถอะนะ เพราะว่า อ่าน และ แก้ไขยากมาก ๆ</p>\n\n\n\n<p>มีอีกอย่างคือ  ใน switch case ชอบไม่ใช้ default case อีก<br />ตรงนี้อาจจะทำให้เกิดปัญหาที่ไม่คาดหวังเกิดขึ้นได้<br />ดังนั้น จำเป้นต้องเขียน code ให้ปลอดภัยกันด้วยนะ</p>\n\n\n\n<p>เพิ่มอีกหน่อย คือ ไม่ยอมเขียน comment อีก<br />มีบางระบบจำเป็นต้องสร้าง document ขึ้นมาจาก code<br />เพื่อช่วยให้ทีมเข้าใจ code มากยิ่งขึ้น ว่าทำงานอะไร อย่างไร</p>\n\n\n\n<p><strong><em>ขอให้สนุกกับการ coding ครับ</em></strong></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"61602a844b8ef003a52020ff58efdd7791e097d2f2068e0eb3d5a6919893eba0","category":"Thai"}