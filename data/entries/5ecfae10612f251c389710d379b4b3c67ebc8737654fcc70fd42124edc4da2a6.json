{"title":"GitHub App vs. OAuth for Terraform integration","link":"https://www.hashicorp.com/blog/github-app-vs-oauth-for-terraform-integration","date":1747839600000,"content":"<p>When using GitHub as the version control system (VCS) provider for Terraform, it’s hard to decide which authentication methods the organization should adopt: GitHub App or GitHub OAuth? </p>\n\n<p>In this blog, we’ll explore the differences between these two methods, their advantages, drawbacks, and best practices. This will help you choose the right approach based on your team’s security and operational requirements. Whether you're managing a small project or an enterprise Terraform setup, understanding these options will help you optimize your workflow and security posture.</p>\n\n<h2>About GitHub App vs. OAuth</h2>\n\n<p>If you have already know how GitHub App and GitHub OAuth work in the Terraform integration, you can skip this section. </p>\n\n<h3>About GitHub App</h3>\n\n<p>A GitHub App is a type of integration designed to interact with GitHub repositories and organizations independently of any individual user. It uses fine-grained permissions, gives the user more control over which repositories the app can access, can be installed in multiple repositories, and remains active even if a user who installed the app on an organization leaves the organization.</p>\n\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/github-app\">Set up the GitHub.com (GitHub App) VCS provider for HCP Terraform</a>.</li>\n</ul>\n\n<h3>About GitHub OAuth</h3>\n\n<p>GitHub OAuth apps use personal user authentication to access repositories. You can create and register an OAuth app under your personal account or under any organization you have administrative access to. If the user who created the GitHub Oauth app leaves the organization, access may be lost. </p>\n\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/github\">Set up the GitHub.com OAuth VCS provider for HCP Terraform</a>.</li>\n</ul>\n\n<h2>Categories to consider</h2>\n\n<p>When an organization uses GitHub as the VCS provider for Terraform to create workspaces, it must choose an authentication method: GitHub App, OAuth, or both. Each method has its own advantages and limitations. Several factors should be considered when making this decision. Key considerations include: </p>\n\n<h3>GitHub repository setup</h3>\n\n<p>In this blog, we will focus on repository setup and access control for GitHub repositories.</p>\n\n<ul>\n<li><strong>Repository structure</strong>: Repositories can be structured either by projects or teams:\n\n<ul>\n<li><strong>By IT projects</strong>: Each project is independent, with minimal cross-team collaboration.</li>\n<li><strong>By organization teams</strong>: Teams often need to share resources across multiple projects they own.</li>\n</ul></li>\n<li><strong>Repository permissions</strong>: Setting the right permissions is essential for Terraform workspaces. Organizations must follow the least-privilege principle when granting access rights.\n\n<ul>\n<li><strong>Read access</strong>: Required for Terraform to pull the latest configuration from GitHub.</li>\n<li><strong>Write/admin access:</strong> Only required for the admin managing the repositories.<br /></li>\n</ul></li>\n</ul>\n\n<h3>Organizational authentication and permission standards</h3>\n\n<p>Authentication and permission determine how an organization manages connections between GitHub and Terraform, ensuring secure and controlled access. </p>\n\n<ul>\n<li><strong>Management and maintenance of GitHub connections:</strong>\nHere are common concerns from customers regarding GitHub-Terraform integration…\n\n<ul>\n<li>Who can set up the connection? How do you define the roles and permissions for configuring GitHub-Terraform connections?</li>\n<li>What happens if the person who set the connection leaves the company? What are the options for ensuring continuity? </li>\n<li>Who or which team can see those connections? How do you control visibility and access to Terraform’s VCS integrations?</li>\n</ul></li>\n<li><strong>Permissions when creating workspaces:</strong> \n\n<ul>\n<li>Who can use the connection? How do you define which teams or individuals are allowed to use the GitHub-Terraform connection?</li>\n<li>How do you restrict access and where can you set the restrictions?</li>\n</ul></li>\n</ul>\n\n<h3>Webhooks and communication</h3>\n\n<p>Different authentication methods handle webhooks and repository updates differently. Understanding their impact on Terraform workspaces is key to maintaining efficiency and scalability. </p>\n\n<ul>\n<li>How do webhooks affect Terraform workspaces? When there are updates in a GitHub repository, Terraform workspaces may be triggered based on the webhook configuration. The impact depends on:\n\n<ul>\n<li><strong>Authentication method:</strong> GitHub App vs OAuth. </li>\n<li><strong>Repository changes:</strong> Commits, pull requests, or branch merges can trigger Terraform runs.</li>\n<li><strong>Workspace configuration:</strong> Workspaces linked to specific branches may trigger runs automatically, while others require manual confirmation. And you can also define <a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud-get-started/cloud-vcs-change\">automatic speculative plans</a> in the Terraform workspace.</li>\n</ul></li>\n<li>Impact on workload and performance: The organization needs to consider the current and future sizes of Terraform deployments. \n\n<ul>\n<li><strong>Size of the Terraform deployment:</strong> Small-scale deployment vs large-scale deployment. </li>\n<li><strong>Terraform concurrency limits:</strong> HCP Terraform and Enterprise enforce concurrent run limits based on the chosen plan.</li>\n<li><strong>Free and Standard plans:</strong> Lower concurrency, potential queuing delays.</li>\n<li><strong>Plus, Premium, and Enterprise plans:</strong> Higher concurrency but still requires monitoring to prevent performance issues.</li>\n<li><strong>Number of GitHub repositories per connection:</strong> A single GitHub connection can manage multiple repositories, but excessive repositories on one connection may impact webhook performance. </li>\n</ul></li>\n</ul>\n\n<p>In the next sections, I will dive deeper into these considerations, compare different methods, and discuss their pros and cons. </p>\n\n<h2>GitHub repository setup</h2>\n\n<p>Repository structure and permissions are the first things you will look at as you decide whether to use  GitHub App, OAuth, or both.</p>\n\n<h3>Repository structure</h3>\n\n<p>There are many factors to consider when designing a GitHub repository structure for an organization. When GitHub is used as the VCS provider for Terraform, one of the key decisions is whether to secure repositories by project or by team. Below is a comparison table outlining the pros, cons, and common use cases for structuring IT projects vs organization teams. The GitHub repository structure can impact your choice between GitHub App and GitHub OAuth.</p>\n\n<table>\n  <tr>\n   <td><strong>Factor</strong>\n   </td>\n   <td><strong>By IT projects</strong>\n   </td>\n   <td><strong>By organization teams</strong>\n   </td>\n  </tr>\n  <tr>\n   <td>Pros\n   </td>\n   <td>\n<ul>\n\n<li>Easier integration with Terraform workspaces when workspaces are separated by IT projects.</li>\n\n<li>Avoids unintended cross-project dependencies.</li>\n\n<li>Granular repository access, ensuring only project members have access.</li>\n</ul>\n   </td>\n   <td>\n<ul>\n\n<li>Easier integration with Terraform workspaces when workspaces are separated by the organization teams.</li>\n\n<li>Fewer repositories to manage, reducing repo sprawl.</li>\n</ul>\n   </td>\n  </tr>\n  <tr>\n   <td>Cons\n   </td>\n   <td>\n<ul>\n\n<li>As the number of IT projects grows, the organization must manage more repositories, potentially increasing Terraform traffic when updates occur. </li>\n</ul>\n   </td>\n   <td>\n<ul>\n\n<li>Harder to enforce access control when team members need to manage resources across different projects.</li>\n\n<li>Terraform files for multiple projects are stored in a single repository, which may lead to access control issues.</li>\n</ul>\n   </td>\n  </tr>\n  <tr>\n   <td>Common use case\n   </td>\n   <td>Recommended for most Terraform setups, especially when the company’s cost structure is IT project-based and requires strict access control by user.\n   </td>\n   <td>Can be used when resources aren’t tied to specific IT projects. Some orgs track costs by department or team instead of project-based cost centers, so provisioning outside project scope is acceptable.\n   </td>\n  </tr>\n</table>\n\n<h3>Repository permissions</h3>\n\n<p>Based on the repository structure, the organization needs to determine how to grant and maintain repository access permissions for its members. More information about the access permissions on GitHub can be found <a href=\"https://docs.github.com/en/get-started/learning-about-github/access-permissions-on-github\">here</a>.</p>\n\n<h2>Deep dive: Authentication and permission</h2>\n\n<p>GitHub provides an article on the <a href=\"https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/differences-between-github-apps-and-oauth-apps#about-github-apps-and-oauth-apps\">differences between GitHub Apps and OAuth Apps</a>, comparing several factors. However, when it comes to Terraform VCS connections, there is limited information on how these two approaches differ in practice and where to configure access restrictions. This section will present a visualized comparison to help you better understand these differences and make an informed decision.</p>\n\n<h3>GitHub App authentication</h3>\n\n<p>This method uses a preconfigured GitHub App for HCP Terraform.This VCS provider is only available on HCP Terraform. If you are using Terraform Enterprise, you can follow the instructions for creating a GitHub<a href=\"https://developer.hashicorp.com/terraform/enterprise/admin/application/github-app-integration\"> App for Terraform Enterprise</a> or connecting to <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/github\">GitHub.com via OAuth</a>.</p>\n\n<h4>Key data point overview:</h4>\n\n<ul>\n<li><strong><a href=\"https://developer.hashicorp.com/terraform/enterprise/users-teams-organizations/users\">Terraform user account</a></strong>: Created within Terraform. </li>\n<li><strong>Repo access list</strong>: Defined per GitHub organization, linked to the corresponding Terraform user account (which matches the GitHub user account). </li>\n<li><strong>GitHub</strong>: \n\n<ul>\n<li>Organization: Each GitHub organization manages a set of repositories.</li>\n<li><a href=\"https://docs.github.com/en/get-started/learning-about-github/types-of-github-accounts#personal-accounts\">GitHub personal account</a></li>\n</ul></li>\n</ul>\n\n<h4>Authentication set up</h4>\n\n<ul>\n<li><p><strong>Set up requirements</strong>:</p>\n\n<ul>\n<li>The HCP Terraform App needs to be installed to each GitHub Organization / Personal account. This can be done through a service account/user account in GitHub for the GitHub Organization. </li>\n<li>The admin (the service account/user account) who manages the GitHub App configuration needs to add the Terraform user accounts with the repositories that they could access. </li>\n<li>Each HCP Terraform user authenticates individually, and can use GitHub resources within HCP Terraform according to their own GitHub organization memberships and access permissions.</li>\n</ul></li>\n<li><p><strong>Installation</strong>: </p>\n\n<ul>\n<li>GitHub: Each GitHub organization needs to <a href=\"https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/differences-between-github-apps-and-oauth-apps#who-can-install-github-apps-and-authorize-oauth-apps\">install</a> the HCP Terraform app. </li>\n<li>HCP Terraform/Terraform Enterprise: </li>\n<li>Each Terraform user must <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/github-app#installing\">install</a> the GitHub App initially, but only once. After installation, the user can leverage the GitHub App across multiple organizations within the HCP Terraform platform or Terraform Enterprise tenant. </li>\n<li>Each user in HCP Terraform will need to authorize the App once, before being able to see available installations and selecting a repository to connect a workspace. </li>\n<li>HCP Terraform can only have <em>one</em> GitHub App installed. \n<br />\n<strong>Terraform user account and the corresponding repo access list</strong></li>\n</ul></li>\n</ul>\n\n<table>\n  <tr>\n   <td><strong>Terraform user account name</strong>\n   </td>\n   <td><strong>Repo access list (GitHub Org A)</strong>\n   </td>\n   <td><strong>Repo access list (GitHub Org B)</strong>\n   </td>\n   <td><strong>Repo access list (GitHub personal account)</strong>\n   </td>\n  </tr>\n  <tr>\n   <td>TF_User1\n   </td>\n   <td>A_Dev1\n<p>\nA_Test2\n   </p></td>\n   <td>B_Dev4\n   </td>\n   <td>User1_test1\n   </td>\n  </tr>\n  <tr>\n   <td>TF_User2\n   </td>\n   <td>A_Prod 2\n   </td>\n   <td>None\n   </td>\n   <td>None\n   </td>\n  </tr>\n  <tr>\n   <td>TF_User3\n   </td>\n   <td>None\n   </td>\n   <td>B_Prod1\n   </td>\n   <td>None\n   </td>\n  </tr>\n</table>\n\n<p><br />\n<strong>GitHub App authentication flow</strong></p>\n<img src=\"https://www.datocms-assets.com/2885/1747768693-diagram_githubvcs-1.png\" alt=\"GitHub\" /><ul>\n<li><strong>Access permissions</strong>: \n\n<ul>\n<li>Each Terraform user account is linked to a GitHub user account.</li>\n<li>A Terraform user's repository list remains the same across the HCP Terraform platform or Terraform Enterprise tenant. For example, <strong>TF_User1</strong> will see the same repository list in <strong>Terraform Org1</strong> and <strong>Terraform Org2</strong>. </li>\n<li><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/github-app#github-permissions\">Repository access</a> is managed at the GitHub organization level, where admins define access per user. In the example diagram above, the access is defined in the table <strong>“Terraform user account and the corresponding repo access list”.</strong> For example, in GitHub Organization A, <strong>TF_User1</strong> may have access to repositories <strong>A_Dev1</strong> and <strong>A_Test2</strong>. When <strong>TF_User1</strong> creates a workspace using the GitHub App, they will see <strong>Organization A: A<em>Dev1, A</em>Test2</strong> in the repository list. </li>\n<li>The same is applicable to the GitHub personal account. </li>\n<li>With GitHub App, customers can limit which repositories the app has access to. This control is managed within GitHub (under Personal Account/Organization App settings).</li>\n<li>There is currently no way to limit access within HCP Terraform, and repositories cannot be added except by administering changes directly in GitHub.</li>\n<li>Users cannot restrict which repositories are available for specific projects or workspaces, unlike in OAuth.</li>\n<li>A workaround would be to create the workspace programmatically using the <a href=\"https://registry.terraform.io/providers/hashicorp/tfe/latest/docs\">TFE provider</a>, specifying which repository will be used in the VCS section. Alternatively, you can block access at plan or apply time using <a href=\"https://developer.hashicorp.com/sentinel/docs/concepts/policy-as-code\">Sentinel</a> for the VCS source.</li>\n<li>GitHub App installation remains active even after the user who installed it leaves the GitHub organization. As long as the user has access in GitHub to the installation and authorizes the GitHub App within Terraform Enterprise, workspaces can continue to connect to it. </li>\n</ul></li>\n</ul>\n\n<h3>GitHub OAuth authentication</h3>\n\n<p>This method uses a per-organization OAuth connection.</p>\n\n<h4>Key data point overview:</h4>\n\n<ul>\n<li><strong><a href=\"https://developer.hashicorp.com/terraform/enterprise/users-teams-organizations/users\">Terraform user account</a></strong>: In Terraform, user accounts can be created and managed within Terraform itself. When using the GitHub OAuth authentication model, there are two key roles in this approach:\n\n<ul>\n<li><strong>Owner</strong>: This role is responsible for establishing the GitHub OAuth connection between Terraform and GitHub using personal credentials. The owner can be either an individual user account or a dedicated service account. This role requires <a href=\"https://developer.hashicorp.com/terraform/enterprise/users-teams-organizations/permissions\">permission</a> to manage VCS settings for the organization. </li>\n<li><strong>User</strong>: This role utilizes the existing GitHub OAuth authentication connections within the Terraform project, without needing to establish a new connection.</li>\n</ul></li>\n<li><strong>Repo access list</strong>: Defined per GitHub organization, linked to the corresponding Terraform user account (which matches the GitHub user account). </li>\n<li><strong>GitHub</strong>: \n\n<ul>\n<li>Organization: Each GitHub organization manages a set of repositories.</li>\n</ul></li>\n</ul>\n\n<h4>Authentication set up</h4>\n\n<ul>\n<li><strong><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/github\">Installation</a></strong>: \n\n<ul>\n<li>Below are the steps between GitHub and HCP Terraform to set up the connection: </li>\n</ul></li>\n</ul>\n\n<table>\n  <tr>\n   <td>\n<strong>In your GitHub organization</strong>\n   </td>\n   <td><strong>In HCP Terraform (Owner role)</strong>\n   </td>\n  </tr>\n  <tr>\n   <td> \n   </td>\n   <td>1. Create a new connection in HCP Terraform. Get a callback URL.\n   </td>\n  </tr>\n  <tr>\n   <td>2. Register your HCP Terraform organization as a new app. Provide callback URL.\n   </td>\n   <td> \n   </td>\n  </tr>\n  <tr>\n   <td> \n   </td>\n   <td>3. Provide HCP Terraform with ID and key. Request VCS access.\n   </td>\n  </tr>\n  <tr>\n   <td>4. Approve access request.\n   </td>\n   <td> (optional) Configure advanced settings. For example, use the “Scope of VCS Provider” to limit which projects can use this connection. \n   </td>\n  </tr>\n</table>\n\n<ul>\n<li>Below are the settings on the Terraform side to limit which projects can use which connection to access repositories in the GitHub organization. </li>\n</ul>\n\n<table>\n  <tr>\n   <td>\n<strong>GitHub OAuth connection name</strong>\n   </td>\n   <td><strong>Terraform projects in the allow list</strong>\n   </td>\n   <td><strong>GitHub organization</strong>\n   </td>\n  </tr>\n  <tr>\n   <td>A_Dev\n   </td>\n   <td>\n<ul>\n\n<li>Org1_Dev</li>\n\n<li>Org1_Test</li>\n</ul>\n   </td>\n   <td>Organization A / all repositories that the owner has access to.\n   </td>\n  </tr>\n  <tr>\n   <td>A_Test\n   </td>\n   <td>\n<ul>\n\n<li>Org1_Dev</li>\n\n<li>Org1_Prod</li>\n</ul>\n   </td>\n   <td>Organization A /  all repositories that the owner has access to.\n   </td>\n  </tr>\n  <tr>\n   <td>A_Prod\n   </td>\n   <td>\n<ul>\n\n<li>Org2_Prod</li>\n\n<li>Org2_Dev</li>\n</ul>\n   </td>\n   <td>Organization A / all repositories that the owner has access to.\n   </td>\n  </tr>\n  <tr>\n   <td>B_Prod\n   </td>\n   <td>\n<ul>\n\n<li>Org2_Stage</li>\n\n<li>Org2_Dev</li>\n</ul>\n   </td>\n   <td>Organization B / all repositories that the owner has access to.\n   </td>\n  </tr>\n</table>\n\n<ul>\n<li>Each Terraform organization can have multiple GitHub OAuth connections. For example, Org1 has two GitHub OAuth connections: A<em>Dev and A</em>Test. \n<br />\n<strong>Terraform user account and the corresponding repo access list</strong>\n\n<ul>\n<li>Owner role: </li>\n</ul></li>\n<li>TF_Owner could create VCS connections in both Terraform organizations: Org1 and Org2. </li>\n<li>TF_Owner has access to the repos in GitHub organization A and GitHub organization B. \n\n<ul>\n<li>User role: </li>\n</ul></li>\n<li>TF_User can access Terraform organizations: Org1 and Org2.\n<br />\n<strong>GitHub OAuth authentication flow</strong></li>\n</ul>\n<img src=\"https://www.datocms-assets.com/2885/1747767031-diagram_githubvcs-3.png\" alt=\"GitHub\" /><ul>\n<li><strong>Access permission</strong>\n\n<ul>\n<li>The owner (TF_Owner) needs to have the <a href=\"https://developer.hashicorp.com/terraform/enterprise/users-teams-organizations/permissions\">permission</a> to manage VCS settings for the organization. </li>\n<li>The Terraform user ( TF<em>User 1, TF</em>User 2…) needs to have access to the Terraform organization and projects to create workspaces. For example, TF_User 1 could create workspaces in all projects in Org1, it means:</li>\n<li>If the user is in project Org1_Dev, then the user would see two GitHub OAuth connections are available to use when creating workspaces:\n\n<ul>\n<li>A_Dev to create workspaces from all repositories in Organization A.</li>\n<li>A_Test to create workspaces from all repositories in Organization A.</li>\n</ul></li>\n<li>If the user is in project Org2_Dev, then the user would see two GitHub OAuth connections are available to use when creating workspaces in Organization A and Organization B: \n\n<ul>\n<li>A_Prod to create workspaces from all repositories in Organization A.</li>\n<li>B_Prod to create workspaces from all repositories in Organization B.</li>\n</ul></li>\n<li>With GitHub OAuth, providers can have different scopes to define which workspaces can use repositories from the VCS provider.</li>\n<li>If the user account is removed (e.g. when an employee leaves the company), the rest of the team loses access to the connection.</li>\n<li>A workaround is to create an OAuth connection from GitHub using an organization account.</li>\n</ul></li>\n</ul>\n\n<h3>Comparison between GitHub App and GitHub OAuth: Authentication and permissions</h3>\n\n<table>\n  <tr>\n   <td>\n   </td>\n   <td><strong>GitHub App</strong>\n   </td>\n   <td><strong>GitHub OAuth</strong>\n   </td>\n  </tr>\n  <tr>\n   <td>Setup complexity\n   </td>\n   <td>Requires installation of the GitHub App in the organization\n   </td>\n   <td>Simpler setup using personal OAuth tokens\n   </td>\n  </tr>\n  <tr>\n   <td>Permission: Install / uninstall\n   </td>\n   <td>Organization owner or users with admin permissions\n   </td>\n   <td>Individual users who have access to the Github repositories. \n   </td>\n  </tr>\n  <tr>\n   <td>Connections per Terraform organization\n   </td>\n   <td>One\n   </td>\n   <td>Multiple\n   </td>\n  </tr>\n  <tr>\n   <td>Access control \n   </td>\n   <td>Supports organization-level and repository-level permissions\n   </td>\n   <td>Grants access at the user level, affecting all repositories the user has access to\n   </td>\n  </tr>\n  <tr>\n   <td>Access control setup \n   </td>\n   <td>Setup repository access in GitHub\n   </td>\n   <td>Setup Terraform project access in Terraform\n   </td>\n  </tr>\n  <tr>\n   <td>Token expiry &amp; rotation\n   </td>\n   <td>\n<ul>\n\n<li>Tokens are managed by GitHub and do not expire unless revoked.</li>\n\n<li>The GitHub App remains available for other Terraform users even if the user who installed it on GitHub leaves.</li>\n</ul>\n   </td>\n   <td>\n<ul>\n\n<li>OAuth tokens can expire and may require re-authentication</li>\n\n<li>The OAuth connection becomes unusable if the user who set it up for the organization leaves.</li>\n</ul>\n   </td>\n  </tr>\n  <tr>\n   <td>End-user access to GitHub repository list\n   </td>\n   <td>The list of repositories is linked to the Terraform user's personal GitHub account, regardless of which project the user is creating the workspace for.\n   </td>\n   <td>The list of repositories is linked to the Terraform project, regardless of which Terraform user creates the workspace.\n   </td>\n  </tr>\n</table>\n\n<h2>Webhooks and communication</h2>\n\n<p>HCP Terraform uses <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs#webhooks\">webhooks</a> to monitor new commits and pull requests. This section explains how webhooks function differently in a GitHub App connection versus a GitHub OAuth connection. This will help you understand the communication between GitHub and Terraform, as well as the workload triggered when changes occur in the GitHub repository.</p>\n\n<h3>GitHub App authentication</h3>\n\n<p>The chart below illustrates how webhooks work with Terraform and the GitHub App. </p>\n<img src=\"https://www.datocms-assets.com/2885/1747767126-diagram_githubvcs-2.png\" alt=\"How\" /><ul>\n<li><strong>GitHub</strong>:\n\n<ul>\n<li>The organization admin adds the user (TF_User1) to GitHub Organization A.</li>\n<li>TF<em>User1 is granted access to the repositories: A</em>Dev1, A<em>Test2, and A</em>Dev2.</li>\n<li>The GitHub App has a callback URL, for example: callback<em>user1</em>url, to manage webhook communications.</li>\n</ul></li>\n<li><strong>Terraform</strong>:\n\n<ul>\n<li>User account: TF_User1</li>\n<li>The user creates two workspaces from the GitHub App connection: </li>\n<li>Workspace TF<em>A</em>Test2 from GitHub repository A_Test2</li>\n<li>Workspace TF<em>A</em>Dev1 from GitHub repository A_Dev1</li>\n<li>The yellow tunnel represents the global webhook for the GitHub App.\n\n<ul>\n<li>All installation events are transmitted through this bridge.</li>\n<li>The volume of messages received is controlled by:</li>\n<li>The repositories the GitHub App has access to.</li>\n<li>The events the GitHub App is subscribed to.</li>\n</ul></li>\n</ul></li>\n<li>GitHub App does not require manual webhook registration; it automatically sends requests for all or selected repositories to a single webhook callback URL. If only 10 out of 1,000 repositories are selected, the GitHub App will not receive webhook events from the other 990 repositories.</li>\n<li>Communication between GitHub and Terraform is based on the number of users × the number of repositories assigned to each user. A single pull request (PR) in Repo1 could trigger communication with multiple HCP Terraform/Terraform Enterprise instances.</li>\n</ul>\n\n<h3>GitHub OAuth authentication</h3>\n\n<p>The chart below illustrates how webhooks work with Terraform and GitHub OAuth. </p>\n<img src=\"https://www.datocms-assets.com/2885/1747767159-diagram_githubvcs-4.png\" alt=\"How\" /><ul>\n<li>GitHub OAuth requires the application to register a webhook on each repository to receive webhook events.\n\n<ul>\n<li>When connecting a workspace to a repository, Terraform registers a webhook for that repository. For example:</li>\n<li>In project Org1<em>Test, the workspace WS1 is created using a GitHub OAuth connection with the repository A</em>Repo1_dev, which triggers the registration of a webhook on that repository.</li>\n<li>In project Org1<em>Prod, the workspace WS2 is created using a GitHub OAuth connection with the repository A</em>Repo1_dev, which triggers the registration of another webhook on that repository.</li>\n<li>If a repository is not connected to any workspace, GitHub will not send webhook events for it. For example, the repository A<em>Repo1</em>test does not have a webhook registered because it is not connected to any workspace in Terraform.</li>\n<li>Customers may encounter duplicate webhook registrations if they create multiple OAuth clients. For example, the repository A<em>Repo1</em>dev has two webhook registrations.</li>\n</ul></li>\n<li>Communication between GitHub and Terraform is based on the sum of all workspace connections for each repository. For example:\n\n<ul>\n<li>If repository A<em>Repo1</em>dev has a PR, it will send webhook events to the two workspaces (WS1 and WS2) but will not send webhook events to WS3. </li>\n<li>If repository A<em>Repo2</em>prod has a PR, it will send webhook events to WS3 only. </li>\n<li>If another repo, e.g. A<em>Repo1</em>test has a PR, it won’t send a webhook event to any workspaces. </li>\n</ul></li>\n</ul>\n\n<h3>Comparison between GitHub App and GitHub OAuth: Webhook and communication</h3>\n\n<table>\n  <tr>\n   <td>\n   </td>\n   <td>GitHub App\n   </td>\n   <td>GitHub OAuth\n   </td>\n  </tr>\n  <tr>\n   <td>Webhook registration\n   </td>\n   <td>Automatically managed by the GitHub App\n   </td>\n   <td>Requires manual <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs/github\">webhook registration</a>. \n   </td>\n  </tr>\n  <tr>\n   <td>Webhook scope\n   </td>\n   <td>Webhooks apply only to the selected repositories. \n   </td>\n   <td>Webhooks are registered only for repositories connected to workspaces. \n   </td>\n  </tr>\n  <tr>\n   <td>Event filtering\n   </td>\n   <td>Receives events only for the repositories selected in the GitHub App installation.\n   </td>\n   <td>GitHub only sends events for repositories linked to a Terraform workspace.\n   </td>\n  </tr>\n  <tr>\n   <td>Duplicate webhooks\n   </td>\n   <td>No risk of duplicate webhook registration\n   </td>\n   <td>Possible duplicate webhooks if multiple OAuth clients are created.\n   </td>\n  </tr>\n  <tr>\n   <td>Communication model\n   </td>\n   <td>Based on (# of users × # of assigned repositories)\n   </td>\n   <td>Based on the sum of all workspace connections for each repository\n   </td>\n  </tr>\n  <tr>\n   <td>Triggering workloads\n   </td>\n   <td>A single PR in a repository can trigger multiple workspaces\n   </td>\n   <td>A PR triggers webhook events only for linked workspaces\n   </td>\n  </tr>\n  <tr>\n   <td>Webhook URL management\n   </td>\n   <td>Uses a single callback URL for all selected repositories\n   </td>\n   <td>Each repository requires its own webhook registration\n   </td>\n  </tr>\n</table>\n\n<h2>Example scenario</h2>\n\n<p>There is no right or wrong approach when choosing between GitHub App and OAuth, and both can coexist in certain scenarios.</p>\n\n<p>For example, in this case, the customer has the following requirements:</p>\n\n<ul>\n<li>Restrict workspace creation to a specific project. For example, in project A, the user can only choose certain repositories, while the same user in project B, can choose a different set of repositories. </li>\n<li>Limit repository selection when creating a workspace via the VCS provider.</li>\n<li>Ensure connection continuity when the person who created the VCS connection leaves the team.</li>\n</ul>\n\n<p>Recommended Solution - GitHub OAuth, with the following considerations:</p>\n\n<ul>\n<li>Manage repositories through a separate GitHub organization since GitHub OAuth does not allow limiting which repositories are listed.</li>\n<li>Use a system/service account in Terraform (or an account that won’t expire) when creating the connections to ensure long-term stability.</li>\n<li>Reduce duplicate webhooks by standardizing OAuth clients within the organization</li>\n</ul>\n\n<h2>Helpful links</h2>\n\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs\">Connect to VCS Providers</a> </li>\n<li><a href=\"https://developer.hashicorp.com/terraform/enterprise/application-administration/github-app-integration\">Integration with GitHub App</a>: Describes how to integrate your Terraform Enterprise deployment with a GitHub App. </li>\n<li><a href=\"https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/differences-between-github-apps-and-oauth-apps\">Differences between GitHub Apps and OAuth apps</a></li>\n</ul>\n","author":"Ting Li","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"5ecfae10612f251c389710d379b4b3c67ebc8737654fcc70fd42124edc4da2a6","category":"Tech"}