{"title":"Terraform 1.6 adds a test framework for enhanced code validation","link":"https://www.hashicorp.com/blog/terraform-1-6-adds-a-test-framework-for-enhanced-code-validation","date":1696442400000,"content":"<p>Today, we are excited to announce the general availability of HashiCorp Terraform 1.6, which is <a href=\"https://developer.hashicorp.com/terraform/downloads\">ready for download</a> and immediately available for use in <a href=\"https://www.hashicorp.com/products/terraform\">Terraform Cloud</a>. This release adds numerous features to enhance developer productivity and practitioner workflows, including a powerful new testing framework, improvements to config-driven import, enhancements for Terraform Cloud CLI workflows, and more.</p>\n\n<p>Let’s take a look at what’s new.</p>\n\n<h2>Terraform test framework</h2>\n\n<p>Terraform practitioners need to know that their configurations will function as expected. This is especially true for authors publishing reusable modules for their team, organization, or the public community. Over time, HashiCorp has added several testing capabilities to Terraform, including <a href=\"https://developer.hashicorp.com/terraform/language/expressions/custom-conditions#input-variable-validation\">input variable validation</a>, <a href=\"https://developer.hashicorp.com/terraform/language/expressions/custom-conditions#preconditions-and-postconditions\">resource preconditions and postconditions</a>, and <a href=\"https://developer.hashicorp.com/terraform/language/expressions/custom-conditions#checks-with-assertions\">check blocks</a>. These features provide actionable feedback to module consumers during regular Terraform operations but do not fill the need for more traditional, developer-centric unit and integration testing.</p>\n\n<p>The general availability of Terraform 1.6 brings a new Terraform test framework that deprecates and replaces the previous experimental feature first added in version 0.15. Terraform <em>tests</em> allow authors to consistently validate the functionality of their configuration in a safe environment. Tests are written using familiar HashiCorp Configuration Language (HCL) syntax, so there is no need to learn a new language to get started.</p>\n\n<p>Using a sequence of one or more <code>run</code> blocks, authors can create a suite of unit and integration tests with custom assertions evaluated against various combinations of input values and provider configurations. For more comprehensive testing, helper modules can be invoked to set up a temporary testing environment or perform advanced validations.</p>\n\n<p>Tests are executed with the <code>terraform test</code> command, which:</p>\n\n<ul>\n<li>Locates test files within your configuration (ending in <code>.tftest.hcl</code>)</li>\n<li>Provisions your configuration based on the tests defined in <code>run</code> blocks</li>\n<li>Evaluates your custom assertions</li>\n<li>Automatically destroys the provisioned infrastructure at the end of the test</li>\n</ul>\n\n<p>Terraform test is a powerful framework for authors to automate the validation of Terraform configurations and modules, improving the quality and reliability of their code. You can learn more about the framework on the <a href=\"https://developer.hashicorp.com/terraform/cli/test\">Testing Terraform overview page</a>, refer to the <a href=\"https://developer.hashicorp.com/terraform/language/tests\">configuration documentation</a> for the full syntax and usage examples, and get hands-on with the <a href=\"https://developer.hashicorp.com/terraform/tutorials/configuration-language/test\">Write Terraform tests tutorial</a>.</p>\n<h2>Expressions support for config-driven import</h2>\n\n<p>Terraform 1.5 <a href=\"https://www.hashicorp.com/blog/terraform-1-5-brings-config-driven-import-and-checks#config-driven-import\">introduced config-driven import</a>, a new method for importing existing resources into Terraform. Initially, however, the <code>id</code> attribute in <code>import</code> blocks supported only static values. In Terraform 1.6, the <code>id</code> attribute now accepts expressions referring to other values, such as variables or resource attributes. String interpolation is also supported to help build more complex IDs. The examples below show both techniques:</p>\n<pre><code>import {\n  # You can now provide the import ID via a variable\n  id = var.bucket_name\n  to = aws_s3_bucket.example\n}\n\nimport {\n  # The aws_s3_bucket_versioning resource includes the AWS account in its import ID\n  id = \"${var.bucket_name},${data.aws_caller_identity.current.account_id}\"\n  to = aws_s3_bucket_versioning.example\n}</code></pre><h2>Terraform Cloud CLI workflow improvements</h2>\n\n<p>For Terraform Cloud customers using the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/run/cli\">CLI-driven run workflow</a>, Terraform 1.6 brings two new features. First, the <code>cloud</code> block now accepts a Terraform Cloud project name. The project will be used when creating new workspaces via the CLI and to filter workspaces returned by the <code>terraform workspace list</code> command:</p>\n<pre><code>terraform {\n  cloud {\n    organization = \"my-org\"\n\n    workspaces {\n      project = \"networking-development\"\n      tags    = [\"networking\", \"source:cli\"]\n    }\n  }\n}</code></pre><p>Second, Terraform Cloud CLI workflows now have the ability to save cloud plans to be applied later. <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/run/modes-and-options#saved-plans\">Saved plans</a> is a new run mode that works with the Terraform 1.6 CLI or the Terraform Cloud API. This mode allows you to:</p>\n\n<ul>\n<li>Perform multiple exploratory plans before choosing a specific plan to apply.</li>\n<li>Perform other tasks in your terminal between the plan and apply stages.</li>\n<li>Perform the plan and apply operations on separate machines, a common practice in continuous integration workflows using temporary worker nodes.</li>\n</ul>\n\n<p>Saved cloud plans use the same <code>terraform plan -out &lt;file&gt;</code> syntax as locally executed plans. To preserve the security of sensitive data in the plan file, only a thin reference to the remote run is saved locally. Once a suitable plan has been identified, use <code>terraform apply &lt;file&gt;</code> to apply it. You can learn more in the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/run/cli#remote-saved-plans\">Terraform Cloud CLI-driven run workflow documentation</a>.</p>\n\n<h2>Amazon S3 backend improvements</h2>\n\n<p>Terraform 1.6 also brings several significant changes to the configuration format of the <a href=\"https://developer.hashicorp.com/terraform/language/settings/backends/s3\">Amazon S3 remote state backend</a>. These changes are intended to better align with the AWS SDK and the official Terraform AWS provider. Examples include the relocation of several attributes into nested blocks, support for additional environment variables, and new options to customize the AWS service endpoints. (Note that existing configurations will continue to work as in previous versions, but users may receive warnings about deprecated attributes after upgrading to Terraform 1.6.)</p>\n\n<h2>Learn more and get started with Terraform 1.6</h2>\n\n<p>For more details about everything new and changed in Terraform 1.6, please review the full HashiCorp Terraform 1.6 <a href=\"https://github.com/hashicorp/terraform/releases/tag/v1.6.0\">changelog</a>. To get started with HashiCorp Terraform, you can:</p>\n\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/downloads\">Download Terraform 1.6</a></li>\n<li><a href=\"https://app.terraform.io/public/signup/account\">Sign up for a free Terraform Cloud account</a></li>\n<li>Read the <a href=\"https://developer.hashicorp.com/terraform/language/v1.6.x/upgrade-guides\">Terraform 1.6 upgrade guide</a></li>\n<li>Get hands-on with tutorials at <a href=\"https://developer.hashicorp.com/terraform/tutorials\">HashiCorp Developer</a></li>\n</ul>\n\n<p>As always, the latest Terraform release wouldn't have been possible without the great community feedback received via GitHub issues and from our customers. We are particularly grateful to everyone who provided feedback on the Terraform test framework during the experimental phase. Thank you!</p>\n","author":"Dan Barr","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"e173e6d820f8c486c3f029ddf77803a35b6caf785b3c6cbf83fecf3941b44107","category":"Tech"}