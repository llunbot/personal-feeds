{"title":"How To Build A Multilingual Website With Nuxt.js","link":"https://smashingmagazine.com/2024/08/how-build-multilingual-website-nuxt-i18n/","date":1722524400000,"content":"<p>This article is a sponsored by <a href=\"https://hygraph.com/\">Hygraph</a></p>\n<p>Internationalization, often abbreviated as i18n, is the process of designing and developing software applications in a way that they can be easily adapted to various spoken languages like English, German, French, and more without requiring substantial changes to the codebase. It involves <strong>moving away from hardcoded strings and techniques</strong> for translating text, formatting dates and numbers, and handling different character encodings, among other tasks.</p>\n<p>Internationalization can <strong>give users the choice</strong> to access a given website or application in their native language, which can have a positive impression on them, making it crucial for reaching a global audience.</p>\nWhat We’re Making\n<p>In this tutorial, we’re making a website that puts these i18n pieces together using a combination of libraries and a UI framework. You’ll want to have intermediate proficiency with JavaScript, Vue, and Nuxt to follow along. Throughout this article, we will <strong>learn by examples</strong> and incrementally <strong>build a multilingual Nuxt website</strong>. Together, we will learn how to provide i18n support for different languages, lazy-load locale messages, and switch locale on runtime.</p>\n<p>After that, we will explore features like interpolation, pluralization, and date/time translations.</p>\n<p>And finally, we will fetch dynamic localized content from an API server using Hygraph as our API server to get localized content. If you do not have a Hygraph account <a href=\"https://hygraph.com/\">please create one for free</a> before jumping in.</p>\n<p>As a final detail, we will use <a href=\"https://vuetifyjs.com/en/\">Vuetify</a> as our UI framework, but please feel free to use another framework if you want. The final code for what we’re building is published in a <a href=\"https://github.com/hygraph/hygraph-examples/tree/master/with-nuxtjs-i18n\">GitHub repository</a> for reference. And finally, you can also take a look at the final result <a href=\"https://nuxtjs-i18n.withheadlesscms.com/\">in a live demo</a>.</p>\nThe <code>nuxt-i18n</code> Library\n<p><a href=\"https://i18n.nuxtjs.org/\"><code>nuxt-i18n</code></a> is a library for implementing internationalization in Nuxt.js applications, and it’s what we will be using in this tutorial. The library is built on top of <a href=\"https://vue-i18n.intlify.dev/\">Vue I18n</a>, which, again, is the de facto standard library for implementing i18n in Vue applications.</p>\n<p>What makes <code>nuxt-i18n</code> ideal for our work is that it provides the comprehensive set of features included in Vue I18n while adding more functionalities that are specific to Nuxt, like lazy loading locale messages, route generation and redirection for different locales, SEO metadata per locale, locale-specific domains, and more.</p>\nInitial Setup\n<p>Start a new Nuxt.js project and set it up with a UI framework of your choice. Again, I will be using Vue to establish the interface for this tutorial.</p>\n<p>Let us add a basic layout for our website and set up some sample Vue templates.</p>\n<p>First, a “Blog” page:</p>\n<pre><code>&lt;!-- pages/blog.vue --&gt;\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;v-card color=\"cardBackground\"&gt;\n      &lt;v-card-title class=\"text-overline\"&gt;\n        Home\n      &lt;/v-card-title&gt;\n      &lt;v-card-text&gt;\n        This is the home page description\n      &lt;/v-card-text&gt;\n    &lt;/v-card&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n\n<p>Next, an “About” page:</p>\n<pre><code>&lt;!-- pages/about.vue --&gt;\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;v-card color=\"cardBackground\"&gt;\n      &lt;v-card-title class=\"text-overline\"&gt;\n        About\n      &lt;/v-card-title&gt;\n      &lt;v-card-text&gt;\n        This is the about page description\n      &lt;/v-card-text&gt;\n    &lt;/v-card&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n\n<p>This gives us a bit of a boilerplate that we can integrate our i18n work into.</p>\nTranslating Plain Text\n<p>The page templates look good, but notice how the text is hardcoded. As far as i18n goes, hardcoded content is difficult to translate into different locales. That is where the <code>nuxt-i18n</code> library comes in, providing the language-specific strings we need for the Vue components in the templates.</p>\n<p>We’ll start by installing the library via the command line:</p>\n<pre><code>npx nuxi@latest module add i18n\n</code></pre>\n\n<p>Inside the <code>nuxt.config.ts</code> file, we need to ensure that we have <code>@nuxtjs/i18n</code> inside the <code>modules</code> array. We can use the <code>i18n</code> property to provide module-specific configurations.</p>\n<pre><code>// nuxt.config.ts\nexport default defineNuxtConfig({\n  // ...\n  modules: [\n    ...\n    \"@nuxtjs/i18n\",\n    // ...\n  ],\n  i18n: {\n    // nuxt-i18n module configurations here\n  }\n  // ...\n});\n</code></pre>\n\n<p>Since the <code>nuxt-i18n</code> library is built on top of the Vue I18n library, we can utilize its features in our Nuxt application as well. Let us create a new file, <code>i18n.config.ts</code>, which we will use to provide all <code>vue-i18n</code> configurations.</p>\n<pre><code>// i18n.config.ts\nexport default defineI18nConfig(() =&gt; ({\n  legacy: false,\n  locale: \"en\",\n  messages: {\n    en: {\n      homePage: {\n        title: \"Home\",\n        description: \"This is the home page description.\"\n      },\n      aboutPage: {\n        title: \"About\",\n        description: \"This is the about page description.\"\n      },\n    },\n  },\n}));\n</code></pre>\n\n<p>Here, we have specified internationalization configurations, like using the <code>en</code> locale, and added messages for the <code>en</code> locale. These messages can be used inside the markup in the templates we made with the help of a <code>$t</code> function from Vue I18n.</p>\n<p>Next, we need to link the <code>i18n.config.ts</code> configurations in our Nuxt config file.</p>\n<pre><code>// nuxt.config.ts\nexport default defineNuxtConfig({\n  ...\n  i18n: {\n    vueI18n: \"./i18n.config.ts\"\n  }\n  ...\n});\n</code></pre>\n\n<p>Now, we can use the <code>$t</code> function in our components — as shown below — to parse strings from our internationalization configurations.</p>\n<p><strong>Note</strong>: <em>There’s no need to import <code>$t</code> since we have Nuxt’s default auto-import functionality.</em></p>\n<pre><code>&lt;!-- i18n.config.ts --&gt;\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;v-card color=\"cardBackground\"&gt;\n      &lt;v-card-title class=\"text-overline\"&gt;\n        {{ $t(\"homePage.title\") }}\n      &lt;/v-card-title&gt;\n      &lt;v-card-text&gt;\n        {{ $t(\"homePage.description\") }}\n      &lt;/v-card-text&gt;\n    &lt;/v-card&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/how-build-multilingual-website-nuxtjs/1-home-page.png\" /></p>\nLazy Loading Translations\n<p>We have the title and description served from the configurations. Next, we can add more languages to the same config. For example, here’s how we can establish translations for English (<code>en</code>), French (<code>fr</code>) and Spanish (<code>es</code>):</p>\n<pre><code>// i18n.config.ts\nexport default defineI18nConfig(() =&gt; ({\n  legacy: false,\n  locale: \"en\",\n  messages: {\n    en: {\n      // English\n    },\n    fr: {\n      // French\n    },\n    es: {\n      // Spanish\n    }\n  },\n}));\n</code></pre>\n\n<p>For a production website with a lot of content that needs translating, it would be unwise to bundle all of the messages from different locales in the main bundle. Instead, we should use the <code>nuxt-i18</code> lazy loading feature asynchronously load only the required language rather than all of them at once. Also, having messages for all locales in a single configuration file can become difficult to manage over time, and breaking them up like this makes things easier to find.</p>\n<p>Let’s set up the lazy loading feature in <code>nuxt.config.ts</code>:</p>\n<pre><code>// etc.\n  i18n: {\n    vueI18n: \"./i18n.config.ts\",\n    lazy: true,\n    langDir: \"locales\",\n    locales: [\n      {\n        code: \"en\",\n        file: \"en.json\",\n        name: \"English\",\n      },\n      {\n        code: \"es\",\n        file: \"es.json\",\n        name: \"Spanish\",\n      },\n      {\n        code: \"fr\",\n        file: \"fr.json\",\n        name: \"French\",\n      },\n    ],\n    defaultLocale: \"en\",\n    strategy: \"no_prefix\",\n  },\n\n// etc.\n</code></pre>\n\n<p>This enables lazy loading and specifies the <code>locales</code> directory that will contain our locale files. The <code>locales</code> array configuration specifies from which files Nuxt.js should pick up messages for a specific language.</p>\n<p>Now, we can create individual files for each language. I’ll drop all three of them right here:</p>\n<pre><code>\n// locales/en.json\n{\n  \"homePage\": {\n    \"title\": \"Home\",\n    \"description\": \"This is the home page description.\"\n  },\n  \"aboutPage\": {\n    \"title\": \"About\",\n    \"description\": \"This is the about page description.\"\n  },\n  \"selectLocale\": {\n    \"label\": \"Select Locale\"\n  },\n  \"navbar\": {\n    \"homeButton\": \"Home\",\n    \"aboutButton\": \"About\"\n  }\n}\n</code></pre>\n\n<div>\n<pre><code>// locales/fr.json\n{\n  \"homePage\": {\n    \"title\": \"Bienvenue sur la page d'accueil\",\n    \"description\": \"Ceci est la description de la page d'accueil.\"\n  },\n  \"aboutPage\": {\n    \"title\": \"À propos de nous\",\n    \"description\": \"Ceci est la description de la page à propos de nous.\"\n  },\n  \"selectLocale\": {\n    \"label\": \"Sélectionner la langue\"\n  },\n  \"navbar\": {\n    \"homeButton\": \"Accueil\",\n    \"aboutButton\": \"À propos\"\n  }\n}\n</code></pre>\n</div>\n\n<div>\n<pre><code>// locales/es.json\n{\n  \"homePage\": {\n    \"title\": \"Bienvenido a la página de inicio\",\n    \"description\": \"Esta es la descripción de la página de inicio.\"\n  },\n  \"aboutPage\": {\n    \"title\": \"Sobre nosotros\",\n    \"description\": \"Esta es la descripción de la página sobre nosotros.\"\n  },\n  \"selectLocale\": {\n    \"label\": \"Seleccione el idioma\"\n  },\n  \"navbar\": {\n    \"homeButton\": \"Inicio\",\n    \"aboutButton\": \"Acerca de\"\n  }\n}\n</code></pre>\n</div>\n\n<p>We have set up lazy loading, added multiple languages to our application, and moved our locale messages to separate files. The user gets the right locale for the right message, and the locale messages are kept in a maintainable manner inside the code base.</p>\nSwitching Between Languages\n<p>We have different locales, but to see them in action, we will build a component that can be used to switch between the available locales.</p>\n<pre><code>&lt;!-- components/select-locale.vue --&gt;\n&lt;script setup&gt;\nconst { locale, locales, setLocale } = useI18n();\n\nconst language = computed({\n  get: () =&gt; locale.value,\n  set: (value) =&gt; setLocale(value),\n});\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;v-select\n    :label=\"$t('selectLocale.label')\"\n    variant=\"outlined\"\n    color=\"primary\"\n    density=\"compact\"    \n    :items=\"locales\"\n    item-title=\"name\"\n    item-value=\"code\"\n    v-model=\"language\"\n  &gt;&lt;/v-select&gt;\n&lt;/template&gt;\n</code></pre>\n\n<p>This component uses the <code>useI18n</code> hook provided by the Vue I18n library and a computed property <code>language</code> to get and set the global locale from a <code>&lt;select&gt;</code> input. To make this even more like a real-world website, we’ll include a small navigation bar that links up all of the website’s pages.</p>\n<pre><code>&lt;!-- components/select-locale.vue --&gt;\n&lt;template&gt;\n  &lt;v-app-bar app :elevation=\"2\" class=\"px-2\"&gt;\n    &lt;div&gt;\n      &lt;v-btn color=\"button\" to=\"/\"&gt;\n        {{ $t(\"navbar.homeButton\") }}\n      &lt;/v-btn&gt;\n      &lt;v-btn color=\"button\" to=\"/about\"&gt;\n        {{ $t(\"navbar.aboutButton\") }}\n      &lt;/v-btn&gt;\n    &lt;/div&gt;\n    &lt;v-spacer /&gt;\n    &lt;div class=\"mr-4 mt-6\"&gt;\n      &lt;SelectLocale /&gt;\n    &lt;/div&gt;\n  &lt;/v-app-bar&gt;\n&lt;/template&gt;\n</code></pre>\n\n<p>That’s it! Now, we can switch between languages on the fly.</p>\n<p><img src=\"https://files.smashing.media/articles/how-build-multilingual-website-nuxtjs/2-current-state-homepage.png\" /></p>\n<p><img src=\"https://files.smashing.media/articles/how-build-multilingual-website-nuxtjs/3-homepage-french-translation.png\" /></p>\n<p>We have a basic layout, but I thought we’d take this a step further and build a playground page we can use to explore more i18n features that are pretty useful when building a multilingual website.</p>\nInterpolation and Pluralization\n<p>Interpolation and pluralization are internationalization techniques for handling dynamic content and grammatical variations across different languages. <strong>Interpolation</strong> allows developers to insert dynamic variables or expressions into translated strings. <strong>Pluralization</strong> addresses the complexities of plural forms in languages by selecting the appropriate grammatical form based on numeric values. With the help of interpolation and pluralization, we can create more natural and accurate translations.</p>\n<p>To use pluralization in our Nuxt app, we’ll first add a configuration to the English locale file.</p>\n<pre><code>// locales/en.json\n{\n  // etc.\n  \"playgroundPage\": {\n    \"pluralization\": {\n      \"title\": \"Pluralization\",\n      \"apple\": \"No Apple | One Apple | {count} Apples\",\n      \"addApple\": \"Add\"\n    }\n  }\n  // etc.\n}\n</code></pre>\n\n<p>The pluralization configuration set up for the key <code>apple</code> defines an output — <code>No Apple</code> — if a count of 0 is passed to it, a second output — <code>One Apple</code> — if a count of 1 is passed, and a third — <code>2 Apples</code>, <code>3 Apples</code>, and so on — if the count passed in is greater than 1.</p>\n<p>Here is how we can use it in your component: Whenever you click on the add button, you will see pluralization in action, changing the strings.</p>\n<div>\n<pre><code>&lt;!-- pages/playground.vue --&gt;\n&lt;script setup&gt;\nlet appleCount = ref(0);\nconst addApple = () =&gt; {\n  appleCount.value += 1;\n};\n&lt;/script&gt;\n&lt;template&gt;\n  &lt;v-container fluid&gt;\n    &lt;!-- PLURALIZATION EXAMPLE  --&gt;\n    &lt;v-card color=\"cardBackground\"&gt;\n      &lt;v-card-title class=\"text-overline\"&gt;\n        {{ $t(\"playgroundPage.pluralization.title\") }}\n      &lt;/v-card-title&gt;\n\n      &lt;v-card-text&gt;\n        {{ $t(\"playgroundPage.pluralization.apple\", { count: appleCount }) }}\n      &lt;/v-card-text&gt;\n      &lt;v-card-actions&gt;\n        &lt;v-btn\n          @click=\"addApple\"\n          color=\"primary\"\n          variant=\"outlined\"\n          density=\"comfortable\"\n          &gt;{{ $t(\"playgroundPage.pluralization.addApple\") }}&lt;/v-btn\n        &gt;\n      &lt;/v-card-actions&gt;\n    &lt;/v-card&gt;\n  &lt;/v-container&gt;\n&lt;/template&gt;\n</code></pre>\n</div>\n\n<p>To use interpolation in our Nuxt app, first, add a configuration in the English locale file:</p>\n<div>\n<pre><code>// locales/en.json\n{\n  ...\n  \"playgroundPage\": {\n    ... \n    \"interpolation\": {\n      \"title\": \"Interpolation\",\n      \"sayHello\": \"Hello, {name}\",\n      \"hobby\": \"My favourite hobby is {0}.\",\n      \"email\": \"You can reach out to me at {account}{'@'}{domain}.com\"\n    },\n    // etc. \n  }\n  // etc.\n}\n</code></pre>\n</div>\n\n<p>The message for <code>sayHello</code> expects an object passed to it having a key <code>name</code> when invoked — a process known as <a href=\"https://vue-i18n.intlify.dev/guide/essentials/syntax#named-interpolation\">named interpolation</a>.</p>\n<p>The message <code>hobby</code> expects an array to be passed to it and will pick up the 0th element, which is known as <a href=\"https://vue-i18n.intlify.dev/guide/essentials/syntax#list-interpolation\">list interpolation</a>.</p>\n<p>The message <code>email</code> expects an object with keys <code>account</code>, and <code>domain</code> and joins both with a literal string <code>\"@\"</code>. This is known as <a href=\"https://vue-i18n.intlify.dev/guide/essentials/syntax#literal-interpolation\">literal interpolation</a>.</p>\n<p>Below is an example of how to use it in the Vue components:</p>\n<div>\n<pre><code>&lt;!-- pages/playground.vue --&gt;\n&lt;template&gt;\n  &lt;v-container fluid&gt;\n    &lt;!-- INTERPOLATION EXAMPLE  --&gt;\n    &lt;v-card color=\"cardBackground\"&gt;\n      &lt;v-card-title class=\"text-overline\"&gt;\n        {{ $t(\"playgroundPage.interpolation.title\") }}\n      &lt;/v-card-title&gt;\n      &lt;v-card-text&gt;\n        &lt;p&gt;\n          {{\n            $t(\"playgroundPage.interpolation.sayHello\", {\n              name: \"Jane\",\n            })\n          }}\n        &lt;/p&gt;\n        &lt;p&gt;\n          {{\n            $t(\"playgroundPage.interpolation.hobby\", [\"Football\", \"Cricket\"])\n          }}\n        &lt;/p&gt;\n        &lt;p&gt;\n          {{\n            $t(\"playgroundPage.interpolation.email\", {\n              account: \"johndoe\",\n              domain: \"hygraph\",\n            })\n          }}\n        &lt;/p&gt;\n      &lt;/v-card-text&gt;\n    &lt;/v-card&gt;\n  &lt;/v-container&gt;\n&lt;/template&gt;\n</code></pre>\n</div>\n\n<p><img src=\"https://files.smashing.media/articles/how-build-multilingual-website-nuxtjs/4-pluralization-interpolation.png\" /></p>\nDate &amp; Time Translations\n<p>Translating dates and times involves translating date and time formats according to the conventions of different locales. We can use Vue I18n’s features for formatting date strings, handling time zones, and translating day and month names for managing date time translations. We can give the configuration for the same using the <code>datetimeFormats</code> key inside the <code>vue-i18n</code> config object.</p>\n<pre><code>// i18n.config.ts\nexport default defineI18nConfig(() =&gt; ({\n  fallbackLocale: \"en\",\n  datetimeFormats: {\n    en: {\n      short: {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n      },\n      long: {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n        weekday: \"short\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        hour12: false,\n      },\n    },\n    fr: {\n      short: {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n      },\n      long: {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n        weekday: \"long\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        hour12: true,\n      },\n    },\n    es: {\n      short: {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n      },\n      long: {\n        year: \"2-digit\",\n        month: \"short\",\n        day: \"numeric\",\n        weekday: \"long\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        hour12: true,\n      },\n    },\n  },\n}));\n</code></pre>\n\n<p>Here, we have set up <code>short</code> and <code>long</code> formats for all three languages. If you are coding along, you will be able to see available configurations for fields, like month and year, thanks to TypeScript and Intellisense features provided by your code editor. To display the translated dates and times in components, we should use the <code>$d</code> function and pass the format to it.</p>\n<div>\n<pre><code>&lt;!-- pages.playground.vue --&gt;\n&lt;template&gt;\n  &lt;v-container fluid&gt;\n    &lt;!-- DATE TIME TRANSLATIONS EXAMPLE  --&gt;\n    &lt;v-card color=\"cardBackground\"&gt;\n      &lt;v-card-title class=\"text-overline\"&gt;\n        {{ $t(\"playgroundPage.dateTime.title\") }}\n      &lt;/v-card-title&gt;\n      &lt;v-card-text&gt;\n        &lt;p&gt;Short: {{ (new Date(), $d(new Date(), \"short\")) }}&lt;/p&gt;\n        &lt;p&gt;Long: {{ (new Date(), $d(new Date(), \"long\")) }}&lt;/p&gt;\n      &lt;/v-card-text&gt;\n    &lt;/v-card&gt;\n  &lt;/v-container&gt;\n&lt;/template&gt;\n</code></pre>\n</div>\n\n<p><img src=\"https://files.smashing.media/articles/how-build-multilingual-website-nuxtjs/5-default-date-time.png\" /></p>\n<p><img src=\"https://files.smashing.media/articles/how-build-multilingual-website-nuxtjs/6-date-time-translated-spanish.png\" /></p>\nLocalization On the Hygraph Side\n<p>We saw how to implement localization with static content. Now, we’ll attempt to understand how to fetch dynamic localized content in Nuxt.</p>\n<p>We can build a blog page in our Nuxt App that fetches data from a server. The server API should accept a locale and return data in that specific locale.</p>\n<p>Hygraph has a flexible localization API that allows you to publish and query localized content. If you haven’t created a free Hygraph account yet, <a href=\"https://hygraph.com/\">you can do that on the Hygraph website</a> to continue following along.</p>\n<p>Go to <strong>Project Settings</strong> → <strong>Locales</strong> and add locales for the API.</p>\n<p><img src=\"https://files.smashing.media/articles/how-build-multilingual-website-nuxtjs/7-hygraph-studio-locales.png\" /></p>\n<p>We have added two locales: English and French. Now we need aq <code>localized_post</code> model in our schema that only two fields: <code>title</code> and <code>body.</code> Ensure to make these “Localized” fields while creating them.</p>\n<p><img src=\"https://files.smashing.media/articles/how-build-multilingual-website-nuxtjs/8-hygraph-studio-schema.png\" /></p>\n<p>Add permissions to consume the localized content, go to <strong>Project settings</strong> → <strong>Access</strong> → <strong>API Access</strong> → <strong>Public Content API</strong>, and assign <strong>Read</strong> permissions to the <code>localized_post</code> model.</p>\n<p><img src=\"https://files.smashing.media/articles/how-build-multilingual-website-nuxtjs/9-hygraph-studio-permissions.png\" /></p>\n<p>Now, we can go to the <a href=\"https://hygraph.com/docs/api-reference/basics/api-playground\">Hygrapgh API playground</a> and add some localized data to the database with the help of GraphQL mutations. To limit the scope of this example, I am simply adding data from the Hygraph API playground. In an ideal world, a create/update mutation would be triggered from the front end after receiving user input.</p>\n<p>Run this mutation in the Hygraph API playground:</p>\n<div>\n<pre><code>mutation createLocalizedPost {\n  createLocalizedPost(\n    data: {\n      title: \"A Journey Through the Alps\", \n      body: \"Exploring the majestic mountains of the Alps offers a thrilling experience. The stunning landscapes, diverse wildlife, and pristine environment make it a perfect destination for nature lovers.\", \n      localizations: {\n        create: [\n          {locale: fr, data: {title: \"Un voyage à travers les Alpes\", body: \"Explorer les majestueuses montagnes des Alpes offre une expérience palpitante. Les paysages époustouflants, la faune diversifiée et l'environnement immaculé en font une destination parfaite pour les amoureux de la nature.\"}}\n        ]\n      }\n    }\n  ) {\n    id\n  }\n}\n</code></pre>\n</div>\n\n<p>The mutation above creates a post with the <code>en</code> locale and includes a <code>fr</code> version of the same post. Feel free to add more data to your model if you want to see things work from a broader set of data.</p>\nPutting Things Together\n<p>Now that we have Hygraph API content ready for consumption let’s take a moment to understand how it’s consumed inside the Nuxt app.</p>\n<p>To do this, we’ll install <a href=\"https://nuxt.com/modules/graphql-client\">nuxt-graphql-client</a> to serve as the app’s GraphQL client. This is a minimal GraphQL client for performing GraphQL operations without having to worry about complex configurations, code generation, typing, and other setup tasks.</p>\n<pre><code>npx nuxi@latest module add graphql-client\n</code></pre>\n\n<pre><code>// nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: [\n    // ...\n    \"nuxt-graphql-client\"\n    // ...\n  ],\n  runtimeConfig: {\n    public: {\n      GQL_HOST: 'ADD_YOUR_GQL_HOST_URL_HERE_OR_IN_.env'\n    }\n  },\n});\n</code></pre>\n\n<p>Next, let's add our GraphQL queries in <code>graphql/queries.graphql</code>.</p>\n<pre><code>query getPosts($locale: [Locale!]!) {\n  localizedPosts(locales: $locale) {\n    title\n    body\n  }\n}\n</code></pre>\n\n<p>The GraphQL client will automatically scan <code>.graphql</code> and <code>.gql</code> files and generate client-side code and typings in the <code>.nuxt/gql</code> folder. All we need to do is stop and restart the Nuxt application. After restarting the app, the GraphQL client will allow us to use a <code>GqlGetPosts</code> function to trigger the query.</p>\n<p>Now, we will build the Blog page where by querying the Hygraph server and showing the dynamic data.</p>\n<pre><code>// pages/blog.vue\n&lt;script lang=\"ts\" setup&gt;\n  import type { GetPostsQueryVariables } from \"#gql\";\n  import type { PostItem, Locale } from \"../types/types\";\n\n  const { locale } = useI18n();\n  const posts = ref&lt;PostItem[]&gt;([]);\n  const isLoading = ref(false);\n  const isError = ref(false);\n\n  const fetchPosts = async (localeValue: Locale) =&gt; {\n    try {\n      isLoading.value = true;\n      const variables: GetPostsQueryVariables = {\n        locale: [localeValue],\n      };\n      const data = await GqlGetPosts(variables);\n      posts.value = data?.localizedPosts ?? [];\n    } catch (err) {\n      console.log(\"Fetch Error, Something went wrong\", err);\n      isError.value = true;\n    } finally {\n      isLoading.value = false;\n    }\n  };\n\n  // Fetch posts on component mount\n  onMounted(() =&gt; {\n    fetchPosts(locale.value as Locale);\n  });\n\n  // Watch for locale changes\n  watch(locale, (newLocale) =&gt; {\n    fetchPosts(newLocale as Locale);\n  });\n&lt;/script&gt;\n</code></pre>\n\n<p>This code fetches only the current locale from the <code>useI18n</code> hook and sends it to the <code>fetchPosts</code> function when the Vue component is mounted. The <code>fetchPosts</code> function will pass the locale to the GraphQL query as a variable and obtain localized data from the Hygraph server. We also have a watcher on the <code>locale</code> so that whenever the global locale is changed by the user we make an API call to the server again and fetch posts in that locale.</p>\n<p>And, finally, let’s add markup for viewing our fetched data!</p>\n<div>\n<pre><code>&lt;!-- pages/blog.vue --&gt;\n&lt;template&gt;\n  &lt;v-container fluid&gt;\n    &lt;v-card-title class=\"text-overline\"&gt;Blogs&lt;/v-card-title&gt;\n    &lt;div v-if=\"isLoading\"&gt;\n      &lt;v-skeleton-loader type=\"card\" v-for=\"n in 2\" :key=\"n\" class=\"mb-4\" /&gt;\n    &lt;/div&gt;\n    &lt;div v-else-if=\"isError\"&gt;\n      &lt;p&gt;Something went wrong while getting blogs please check the logs.&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div v-else&gt;\n      &lt;div\n        v-for=\"(post, index) in posts\"\n        :key=\"post.title || index\"\n        class=\"mb-4\"\n      &gt;\n        &lt;v-card color=\"cardBackground\"&gt;\n          &lt;v-card-title class=\"text-h6\"&gt;{{ post.title }}&lt;/v-card-title&gt;\n          &lt;v-card-text&gt;{{ post.body }}&lt;/v-card-text&gt;\n        &lt;/v-card&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/v-container&gt;\n&lt;/template&gt;\n</code></pre>\n</div>\n\n<p>Awesome! If all goes according to plan, then your app should look something like the one in the following video.</p>\nWrapping Up\n<p>Check that out — we just made the <strong>functionality for translating content for a multilingual website</strong>! Now, a user can select a locale from a list of options, and the app fetches content for the selected locale and automatically updates the displayed content.</p>\n<p>Did you think that translations would require more difficult steps? It’s pretty amazing that we’re able to cobble together a couple of libraries, hook them up to an API, and wire everything up to render on a page.</p>\n<p>Of course, there are other libraries and resources for handling internationalization in a multilingual context. The exact tooling is less the point than it is seeing what pieces are needed to handle dynamic translations and how they come together.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"2c2ebcb658b74f53d7da95a79b249fc6262801d37084bf5b2b73a6a4a355999f","category":"Tech"}