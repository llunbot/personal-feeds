{"title":"The CSS shape() function","link":"https://webkit.org/blog/16794/the-css-shape-function/","date":1744736506000,"content":"<p>Shapes are an important aspect of graphic design. The <code>shape()</code> function provides a new way to author shapes that can adapt and scale with mixed proportions based on the size of the element. </p>\n<p>For many years now, CSS has given web developers the ability to use shapes for clipping and animation. The most common usage of shapes is in the<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path\"><code>clip-path</code></a> property. This applies a clip after the element has been laid out, which allows you, as a web developer, to do things like trim the edge to a decorative wavy shape. This can give a similar effect to masking, but is more efficient to render than a mask. Another use case for shapes is in the<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/offset-path\"><code>offset-path</code></a> property, which allows you to animate something along a path. Finally,<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside\"><code>shape-outside</code></a> provides a way to wrap text around a non-rectangular shape (but currently only supports a subset of the shape types).</p>\n<p>CSS provides <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape\">a set of shapes</a> that can be used with each of these properties. (In the web standards, these are fully defined in <a href=\"https://drafts.csswg.org/css-shapes/#basic-shape-functions\">Basic Shapes</a>.) There are various ways to describe rectangles, as well as <code>circle()</code> and <code>ellipse()</code>, <code>polygon()</code> (a set of straight-line segments) and the <code>path()</code> function, which takes an SVG-style path.</p>\n<p>For example, consider this simple arrow shape:</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/svg-shape.png\" alt=\"SVG arrow shape with right angle pointing right and slight right-set curve\" width=\"642\" height=\"434\" srcset=\"https://webkit.org/wp-content/uploads/svg-shape.png 642w, https://webkit.org/wp-content/uploads/svg-shape-300x203.png 300w\" /></figure>\n<p>The SVG that produces this shape is:</p>\n<pre><code><span>&lt;<span>svg</span> <span>viewBox</span>=<span>\"0 0 150 100\"</span> <span>xmlns</span>=<span>\"http://www.w3.org/2000/svg\"</span>&gt;</span>\n  <span>&lt;<span>path</span> <span>fill</span>=<span>\"black\"</span> <span>d</span>=<span>\"M0 0 L 100 0 L 150 50 L 100 100 L 0 100 Q 50 50 0 0 z \"</span> /&gt;</span>\n<span>&lt;/<span>svg</span>&gt;</span>\n</code></pre>\n<p>We’ll break down this path later. For now, let’s take that path and apply it to an HTML element in <code>clip-path</code>:</p>\n<pre><code><span>.clipped</span> {\n    <span>width</span>: <span>150px</span>;\n    <span>height</span>: <span>100px</span>;\n    <span>box-sizing</span>: <span>border-box</span>;\n    <span>background-color</span>: <span>blue</span>;\n    <span>border</span>: <span>10px</span> <span>solid</span> <span>orange</span>;\n    <span>clip-path</span>: <span>path</span>(<span>\"M0 0 L 100 0 L 150 50 L 100 100 L 0 100 Q 50 50 0 0 z\"</span>);\n}\n</code></pre>\n<p>Which produces this:</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/clipped-path.png\" alt=\"Unique arrow shape with blue rectangle and orange border where the tip of the right angle shows a portion of the orange border\" width=\"328\" height=\"226\" srcset=\"https://webkit.org/wp-content/uploads/clipped-path.png 328w, https://webkit.org/wp-content/uploads/clipped-path-300x207.png 300w\" /></figure>\n<p>Note how I’ve added a border so that you can see how <code>clip-path</code> is clipping out parts of the element.</p>\n<p>But what happens now if we change the dimensions of the element? For example, what if we wanted a longer arrow?</p>\n<pre><code><span>.clipped</span> {\n    <span>width</span>: <span>200px</span>;\n    ...\n}\n</code></pre>\n<p>Alas, we get the same shape, only we no longer see the border at the tip of the arrow.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/clipped-path-extended.png\" alt=\"Unique arrow shape with blue rectangle and orange border where the tip of the right angle does not show the orange border\" width=\"328\" height=\"232\" srcset=\"https://webkit.org/wp-content/uploads/clipped-path-extended.png 328w, https://webkit.org/wp-content/uploads/clipped-path-extended-300x212.png 300w\" /></figure>\n<p>This means that using <code>path()</code> in <code>clip-path</code> can’t be <em>responsive</em>; you can’t write CSS rules so that the path adapts to the size of the element. This is where the new <code>shape()</code> function comes in.</p>\n<h2><code>shape()</code></h2>\n<p>The new <code>shape()</code> function addresses this responsiveness problem head-on by allowing you to specify the path in terms of CSS keywords and units that you’re already familiar with, including the full power of <code>calc()</code> and CSS variables, and it’s much more readable.</p>\n<p>Let’s go back and break down that SVG path which looks like an incomprehensible list of letters and numbers: “M0 0 L 100 0 L 150 50 L 100 100 L 0 100 Q 50 50 0 0 z”. We can break this down into a sequence of “<a href=\"https://www.w3.org/TR/svg-paths/#PathData\">commands</a>”, which describe each section of the path:</p>\n<table>\n<thead>\n<tr>\n<th>M 0 0</th>\n<th>move to 0, 0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>L 100 0</td>\n<td>line to 100, 0</td>\n</tr>\n<tr>\n<td>L 150 50</td>\n<td>line to 150, 50</td>\n</tr>\n<tr>\n<td>L 100 100</td>\n<td>line to 100, 100</td>\n</tr>\n<tr>\n<td>L 0 100</td>\n<td>line to 0, 100</td>\n</tr>\n<tr>\n<td>Q 50 50 0 0</td>\n<td>quadratic curve with control point at 50, 50, ending at 0, 0</td>\n</tr>\n<tr>\n<td>z</td>\n<td>close path</td>\n</tr>\n</tbody>\n</table>\n<p>We can transcribe this path into a shape using the names specified in the <a href=\"https://drafts.csswg.org/css-shapes-2/#shape-function\">CSS spec</a>; note how the first “move” command becomes the “from” in the shape:</p>\n<pre><code><span>clip-path</span>: <span>shape</span>(<span>from</span> <span>top</span> <span>left</span>,\n    <span>line</span> <span>to</span> 100<span>px</span> <span>top</span>,\n    <span>line</span> <span>to</span> 150<span>px</span> 50%,\n    <span>line</span> <span>to</span> 100<span>px</span> <span>bottom</span>,\n    <span>line</span> <span>to</span> <span>bottom</span> <span>left</span>,\n    <span>curve</span> <span>to</span> <span>top</span> <span>left</span> <span>with</span> 50<span>px</span> 50%,\n    <span>close</span>);\n</code></pre>\n<p>Note that we can use keywords like “top” and “bottom left” when the point is in absolute coordinates, and we can use percentages.</p>\n<p>That gives us the same result as above, but we haven’t made it fully responsive yet. Our next step is to make the shape stretch horizontally with the element’s width, but keep the height fixed to 100px. Let’s use a bit of math to achieve that. To simplify things a little, lets put the desired height of the element into a variable:</p>\n<pre><code><span>.responsive-clip</span> {\n    <span>--height</span>: <span>100px</span>;\n    <span>height</span>: <span>var</span>(<span>--height</span>);\n    ...\n}\n</code></pre>\n<p>We’ll also define the half-height value to compute the arrow shape on the right side, and for the control point of the quadratic curve.</p>\n<pre><code>    <span>--half-height</span>: <span>calc</span>(<span>var</span>(<span>--height</span>) / 2);\n</code></pre>\n<p>The responsive parts of the shape can be written in terms of percentages. Percentages used in <code>x</code> coordinates are relative to the element’s width, while the ones used in <code>y</code> coordinates are relative to the element’s height:</p>\n<pre><code><span>clip-path</span>: <span>shape</span>(<span>from</span> <span>top</span> <span>left</span>,\n    <span>line</span> <span>to</span> <span>calc</span>(100% - <span>var</span>(<span>--half-height</span>)) 0%,\n    <span>line</span> <span>to</span> 100% <span>var</span>(<span>--half-height</span>),\n    <span>line</span> <span>to</span> <span>calc</span>(100% - <span>var</span>(<span>--half-height</span>)) 100%,\n    <span>line</span> <span>to</span> <span>left</span> <span>bottom</span>,\n    <span>curve</span> <span>to</span> <span>left</span> <span>top</span> <span>with</span> <span>var</span>(<span>--half-height</span>) <span>var</span>(<span>--half-height</span>),\n    <span>close</span>);\n</code></pre>\n<p>Now we have a clip that can be as long as the element!</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/clipped-shape-extended.png\" alt=\"Unique right pointing arrow that stretches maintaining the 90 degree angle of the arrow point while still showing the orange border at the tip\" width=\"836\" height=\"254\" srcset=\"https://webkit.org/wp-content/uploads/clipped-shape-extended.png 836w, https://webkit.org/wp-content/uploads/clipped-shape-extended-300x91.png 300w, https://webkit.org/wp-content/uploads/clipped-shape-extended-768x233.png 768w\" /></figure>\n<p>Making this shape adapt to the height of the element is trickier, because we need to be able to refer to the height in values on the horizontal axis. This is something we can do using Container Queries. First, let’s create a container in the HTML markup:</p>\n<pre><code><span>&lt;<span>div</span> <span>class</span>=<span>\"responsive-clip-container\"</span>&gt;</span>\n  <span>&lt;<span>div</span> <span>class</span>=<span>\"responsive-clip\"</span>&gt;</span><span>&lt;/<span>div</span>&gt;</span>\n<span>&lt;/<span>div</span>&gt;</span>\n</code></pre>\n<p>Once we’ve defined the container and moved the element’s dimensions there, we can now replace <code>var(--half-height)</code> with <code>50cqh</code> :</p>\n<pre><code><span>.responsive-clip-container</span> {\n  <span>width</span>: <span>100%</span>;\n  <span>aspect-ratio</span>: <span>5</span> / <span>1</span>;\n  <span>container-type</span>: <span>size</span>;\n}\n\n<span>.responsive-clip</span> {\n  <span>height</span>: <span>100%</span>;\n  <span>background</span>: <span>blue</span>;\n  <span>border</span>: <span>10px</span> <span>solid</span> <span>orange</span>;\n  <span>box-sizing</span>: <span>border-box</span>;\n  <span>clip-path</span>: <span>shape</span>(<span>from</span> <span>top</span> <span>left</span>,\n    <span>line</span> <span>to</span> <span>calc</span>(<span>100%</span> - <span>50</span><span>cqh</span>) <span>0%</span>,\n    <span>line</span> <span>to</span> <span>100%</span> <span>50</span><span>cqh</span>,\n    <span>line</span> <span>to</span> <span>calc</span>(<span>100%</span> - <span>50</span><span>cqh</span>) <span>100%</span>,\n    <span>line</span> <span>to</span> <span>bottom</span> <span>left</span>,\n    <span>curve</span> <span>to</span> <span>top</span> <span>left</span> <span>with</span> <span>50</span><span>cqh</span> <span>50</span><span>cqh</span>,\n    <span>close</span>);\n}\n</code></pre>\n<p>Let’s add a resizer to the container so you can play around with the responsiveness!</p>\n<pre><code><span>.responsive-clip-container</span> {\n  <span>resize</span>: <span>both</span>;\n  <span>overflow</span>: <span>clip</span>;\n}\n</code></pre>\n<p>Try <a href=\"https://codepen.io/jensimmons/pen/GgRXXMx?editors=1100\">this demo</a> in Safari 18.4 or <a href=\"https://caniuse.com/mdn-css_types_basic-shape_shape\">another browser with support</a>.</p>\n<figure>\n  <span>See the Pen <a href=\"https://codepen.io/jensimmons/pen/GgRXXMx\"><br />\n  shape() – demo 3</a> by Jen Simmons (<a href=\"https://codepen.io/jensimmons\">@jensimmons</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span><br />\n</figure>\n<p>Resizing the arrow helps to truly demonstrate what <code>shape()</code> can do. Notice how the curve and the 90 degree angle are preserved, which is not something you would get if you stretched an SVG.</p>\n<figure></figure>\n<p>There are more features of the <code>shape()</code> function that we haven’t touched on here, like <em>relative</em> instead of <em>absolute</em> commands (e.g. <code>move by 10px, 2em</code>), other commands like <code>arc</code>, and various ways of describing curve control points. Dive into <a href=\"https://drafts.csswg.org/css-shapes-2/#shape-function\">the web standard</a> to learn more about these. And, of course, you can animate between shapes, as long as they contain the same list of commands, which can make for some very cool effects.</p>\n<figure>\n  <span>See the Pen <a href=\"https://codepen.io/smfr/pen/XJWOjvw\"><br />\n  Shape animation</a> by Simon Fraser (<a href=\"https://codepen.io/smfr\">@smfr</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span><br />\n</figure>\n<p>Let us know what you think of <code>shape()</code>. We’d love to see what you make!</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"186b4b6b5f847415789994f0243c41554e17c20467b7fc7e09c2e35015121c0a","category":"Tech"}