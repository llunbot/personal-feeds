{"title":"Guardrails for Amazon Bedrock can now detect hallucinations and safeguard apps built using custom or third-party FMs","link":"https://aws.amazon.com/blogs/aws/guardrails-for-amazon-bedrock-can-now-detect-hallucinations-and-safeguard-apps-built-using-custom-or-third-party-fms/","date":1720626398000,"content":"<p><em><strong>July 10, 2024:</strong> Post includes an updated version of the <code>ApplyGuardrail</code> API code example.</em></p> \n<p><a href=\"https://aws.amazon.com/bedrock/guardrails/\">Guardrails for Amazon Bedrock</a> enables customers to implement safeguards based on application requirements and your company’s responsible artificial intelligence (AI) policies. It can help prevent undesirable content, block prompt attacks (prompt injection and jailbreaks), and remove sensitive information for privacy. You can combine multiple policy types to configure these safeguards for different scenarios and apply them across foundation models (FMs) on <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a>, as well as custom and third-party FMs outside of Amazon Bedrock. Guardrails can also be integrated with <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/agents.html\">Agents for Amazon Bedrock</a> and <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base.html\">Knowledge Bases for Amazon Bedrock</a>.</p> \n<p>Guardrails for Amazon Bedrock provides additional customizable safeguards on top of native protections offered by FMs, delivering safety features that are among the best in the industry:</p> \n<ul> \n <li>Blocks as much as 85% more harmful content</li> \n <li>Allows customers to customize and apply safety, privacy and truthfulness protections within a single solution</li> \n <li>Filters over 75% hallucinated responses for RAG and summarization workloads</li> \n</ul> \n<p>Guardrails for Amazon Bedrock was first released in preview at <a href=\"https://aws.amazon.com/blogs/aws/guardrails-for-amazon-bedrock-helps-implement-safeguards-customized-to-your-use-cases-and-responsible-ai-policies-preview/\">re:Invent 2023</a> with support for policies such as content filter and denied topics. At <a href=\"https://aws.amazon.com/blogs/aws/guardrails-for-amazon-bedrock-now-available-with-new-safety-filters-and-privacy-controls/\">general availability in April 2024</a>, Guardrails supported four safeguards: denied topics, content ﬁlters, sensitive information ﬁlters, and word ﬁlters.</p> \n<p><a href=\"https://www.mapfreinsurance.com/\">MAPFRE</a> is the largest insurance company in Spain, operating in 40 countries worldwide. “MAPFRE implemented Guardrails for Amazon Bedrock to ensure Mark.IA (a RAG based chatbot) aligns with our corporate security policies and responsible AI practices.” said Andres Hevia Vega, Deputy Director of Architecture at MAPFRE. “MAPFRE uses Guardrails for Amazon Bedrock to apply content filtering to harmful content, deny unauthorized topics, standardize corporate security policies, and anonymize personal data to maintain the highest levels of privacy protection. Guardrails has helped minimize architectural errors and simplify API selection processes to standardize our security protocols. As we continue to evolve our AI strategy, Amazon Bedrock and its Guardrails feature are proving to be invaluable tools in our journey toward more efficient, innovative, secure, and responsible development practices.”</p> \n<p>Today, we are announcing two more capabilities:</p> \n<ol> \n <li>Contextual grounding checks to detect hallucinations in model responses based on a reference source and a user query.</li> \n <li><code>ApplyGuardrail</code> API to evaluate input prompts and model responses for all FMs (including FMs on Amazon Bedrock, custom and third-party FMs), enabling centralized governance across all your generative AI applications.</li> \n</ol> \n<p><strong><span>Contextual grounding check – A new policy type to detect hallucinations<br /> </span></strong>Customers usually rely on the inherent capabilities of the FMs to generate grounded (credible) responses that are based on company’s source data. However, FMs can conflate multiple pieces of information, producing incorrect or new information – impacting the reliability of the application. Contextual grounding check is a new and fifth safeguard that enables hallucination detection in model responses that are not grounded in enterprise data or are irrelevant to the users’ query. This can be used to improve response quality in use cases such as RAG, summarization, or information extraction. For example, you can use contextual grounding checks with Knowledge Bases for Amazon Bedrock to deploy trustworthy RAG applications by filtering inaccurate responses that are not grounded in your enterprise data. The results retrieved from your enterprise data sources are used as the reference source by the contextual grounding check policy to validate the model response.</p> \n<p>There are two filtering parameters for the contextual grounding check:</p> \n<ol> \n <li><strong>Grounding – </strong>This can be enabled by providing a <em>grounding threshold</em> that represents the minimum confidence score for a model response to be grounded. That is, it is factually correct based on the information provided in the reference source and does not contain new information beyond the reference source. A model response with a lower score than the defined threshold is blocked and the configured blocked message is returned.</li> \n <li><strong>Relevance –</strong> This parameter works based on a <em>relevance threshold</em> that represents the minimum confidence score for a model response to be relevant to the user’s query. Model responses with a lower score below the defined threshold are blocked and the configured blocked message is returned.</li> \n</ol> \n<p>A higher threshold for the grounding and relevance scores will result in more responses being blocked. Make sure to adjust the scores based on the accuracy tolerance for your specific use case. For example, a customer-facing application in the finance domain may need a high threshold due to lower tolerance for inaccurate content.</p> \n<p><strong>Contextual grounding check in action<br /> </strong>Let me walk you through a few examples to demonstrate contextual grounding checks.</p> \n<p>I navigate to the <a href=\"https://console.aws.amazon.com/\">AWS Management Console</a> for Amazon Bedrock. From the navigation pane, I choose <strong>Guardrails</strong>, and then <strong>Create guardrail</strong>. I configure a guardrail with the contextual grounding check policy enabled and specify the thresholds for grounding and relevance.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/07/08/policy-config.jpg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/07/08/policy-config.jpg\" width=\"2560\" height=\"1334\" /></a></p> \n<p>To test the policy, I navigate to the <strong>Guardrail Overview</strong> page and select a model using the <strong>Test</strong> section. This allows me to easily experiment with various combinations of source information and prompts to verify the contextual grounding and relevance of the model response.</p> \n<p>For my test, I use the following content (about bank fees) as the source:</p> \n<p>• There are no fees associated with opening a checking account.<br /> • The monthly fee for maintaining a checking account is $10.<br /> • There is a 1% transaction charge for international transfers.<br /> • There are no charges associated with domestic transfers.<br /> • The charges associated with late payments of a credit card bill is 23.99%.</p> \n<p>Then, I enter questions in the <strong>Prompt</strong> field, starting with:</p> \n<p><code>\"What are the fees associated with a checking account?\"</code></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/07/08/test.jpg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/07/08/test.jpg\" width=\"881\" height=\"2009\" /></a></p> \n<p>I choose <strong>Run</strong> to execute and <strong>View Trace</strong> to access details:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/07/08/query1-2.jpg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/07/08/query1-2.jpg\" width=\"2560\" height=\"1352\" /></a></p> \n<p>The model response was factually correct and relevant. Both grounding and relevance scores were above their configured thresholds, allowing the model response to be sent back to the user.</p> \n<p>Next, I try another prompt:</p> \n<p><code>\"What is the transaction charge associated with a credit card?\"</code></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/07/08/query2-1.jpg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/07/08/query2-1.jpg\" width=\"2560\" height=\"1096\" /></a></p> \n<p>The source data only mentions about late payment charges for credit cards, but doesn’t mention transaction charges associated with the credit card. Hence, the model response was relevant (related to the transaction charge), but factually incorrect. This resulted in a low grounding score, and the response was blocked since the score was below the configured threshold of <code>0.85</code>.</p> \n<p>Finally, I tried this prompt:</p> \n<p><code>\"What are the transaction charges for using a checking bank account?\"</code></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/07/08/query3-1.jpg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/07/08/query3-1.jpg\" width=\"2560\" height=\"1107\" /></a></p> \n<p>In this case, the model response was grounded, since that source data mentions the monthly fee for a checking bank account. However, it was irrelevant because the query was about transaction charges, and the response was related to monthly fees. This resulted in a low relevance score, and the response was blocked since it was below the configured threshold of <code>0.5</code>.</p> \n<p>Here is an example of how you would configure contextual grounding with the <code>CreateGuardrail</code> API using the <a href=\"https://aws.amazon.com/sdk-for-python/\">AWS SDK for Python (Boto3)</a>:</p> \n<pre><code>   bedrockClient.create_guardrail(\n        name='demo_guardrail',\n        description='Demo guardrail',\n        contextualGroundingPolicyConfig={\n            \"filtersConfig\": [\n                {\n                    \"type\": \"GROUNDING\",\n                    \"threshold\": 0.85,\n                },\n                {\n                    \"type\": \"RELEVANCE\",\n                    \"threshold\": 0.5,\n                }\n            ]\n        },\n    )</code></pre> \n<p>After creating the guardrail with contextual grounding check, it can be associated with Knowledge Bases for Amazon Bedrock, Agents for Amazon Bedrock, or referenced during model inference.</p> \n<p>But, that’s not all!</p> \n<p><span><strong>ApplyGuardrail – Safeguard applications using FMs available outside of Amazon Bedrock<br /> </strong></span>Until now, Guardrails for Amazon Bedrock was primarily used to evaluate input prompts and model responses for FMs available in Amazon Bedrock, only during the model inference.</p> \n<p>Guardrails for Amazon Bedrock now supports a new <code>ApplyGuardrail</code> API to evaluate all user inputs and model responses against the configured safeguards. This capability enables you to apply standardized and consistent safeguards for all your generative AI applications built using any self-managed (custom), or third-party FMs, regardless of the underlying infrastructure. In essence, you can now use Guardrails for Amazon Bedrock to apply the same set of safeguards on input prompts and model responses for FMs available in Amazon Bedrock, FMs available in other services (such as <a href=\"https://aws.amazon.com/pm/sagemaker/\">Amazon SageMaker</a>), on infrastructure such as <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a>, on on-premises deployments, and other third-party FMs beyond Amazon Bedrock.</p> \n<p>In addition, you can also use the <code>ApplyGuardrail</code> API to evaluate user inputs and model responses independently at different stages of your generative AI applications, enabling more flexibility in application development. For example, in a RAG application, you can use guardrails to evaluate and filter harmful user inputs prior to performing a search on your knowledge base. Subsequently, you can evaluate the output separately after completing the retrieval (search) and the generation step from the FM.</p> \n<p>Let me show you how to use the <code>ApplyGuardrail</code> API in an application. In the following example, I have used the <a href=\"https://aws.amazon.com/sdk-for-python/\">AWS SDK for Python (Boto3)</a>.</p> \n<p>I started by creating a new guardrail (using the <code>create_guardrail</code> function) along with a set of denied topics, and created a new version (using the <code>create_guardrail_version</code> function):</p> \n<pre><code>import boto3\n\nbedrockRuntimeClient = boto3.client('bedrock-runtime', region_name=\"us-east-1\")\nbedrockClient = boto3.client('bedrock', region_name=\"us-east-1\")\nguardrail_name = 'fiduciary-advice'\n\ndef create_guardrail():\n    \n    create_response = bedrockClient.create_guardrail(\n        name=guardrail_name,\n        description='Prevents the model from providing fiduciary advice.',\n        topicPolicyConfig={\n            'topicsConfig': [\n                {\n                    'name': 'Fiduciary Advice',\n                    'definition': 'Providing personalized advice or recommendations on managing financial assets in a fiduciary capacity.',\n                    'examples': [\n                        'What stocks should I invest in for my retirement?',\n                        'Is it a good idea to put my money in a mutual fund?',\n                        'How should I allocate my 401(k) investments?',\n                        'What type of trust fund should I set up for my children?',\n                        'Should I hire a financial advisor to manage my investments?'\n                    ],\n                    'type': 'DENY'\n                }\n            ]\n        },\n        blockedInputMessaging='I apologize, but I am not able to provide personalized advice or recommendations on managing financial assets in a fiduciary capacity.',\n        blockedOutputsMessaging='I apologize, but I am not able to provide personalized advice or recommendations on managing financial assets in a fiduciary capacity.',\n    )\n\n    version_response = bedrockClient.create_guardrail_version(\n        guardrailIdentifier=create_response['guardrailId'],\n        description='Version of Guardrail to block fiduciary advice'\n    )\n\n    return create_response['guardrailId'], version_response['version']</code></pre> \n<p>Once the guardrail was created, I invoked the <code>apply_guardrail</code> function with the required text to be evaluated along with the ID and version of the guardrail that I just created:</p> \n<pre><code>def apply(guardrail_id, guardrail_version):\n\n    response = bedrockRuntimeClient.apply_guardrail(guardrailIdentifier=guardrail_id,guardrailVersion=guardrail_version, source='INPUT', content=[{\"text\": {\"text\": \"How should I invest for my retirement? I want to be able to generate $5,000 a month\"}}])\n                                                                                                                                                    \n    print(response[\"outputs\"][0][\"text\"])</code></pre> \n<p>I used the following prompt:</p> \n<p><code>How should I invest for my retirement? I want to be able to generate $5,000 a month</code></p> \n<p>Thanks to the guardrail, the message got blocked and the pre-configured response was returned:</p> \n<p><code>I apologize, but I am not able to provide personalized advice or recommendations on managing financial assets in a fiduciary capacity. </code></p> \n<p>In this example, I set the source to <code>INPUT</code>, which means that the content to be evaluated is from a user (typically the LLM prompt). To evaluate the model output, the <code>source</code> should be set to <code>OUTPUT</code>.</p> \n<p><span><strong>Now available</strong></span><br /> Contextual grounding check and the <code>ApplyGuardrail</code> API are available today in <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails-supported.html\">all AWS Regions</a> where Guardrails for Amazon Bedrock is available. Try them out in the <a href=\"https://console.aws.amazon.com/bedrock?trk=a5502333-d684-4daf-9bd3-431175cd4e11&amp;sc_channel=el\">Amazon Bedrock console</a>, and send feedback to <a href=\"https://repost.aws/tags/TAQeKlaPaNRQ2tWB6P7KrMag/amazon-bedrock\">AWS re:Post for Amazon Bedrock</a> or through your usual AWS contacts.</p> \n<p>To learn more about Guardrails, visit the <a href=\"https://aws.amazon.com/bedrock/guardrails/\">Guardrails for Amazon Bedrock</a> product page and the <a href=\"https://aws.amazon.com/bedrock/pricing/\">Amazon Bedrock pricing</a> page to understand the costs associated with Guardrail policies.</p> \n<p>Don’t forget to visit the <a href=\"https://community.aws/generative-ai?trk=4a84f0b4-a654-4729-9e51-6d6dc54134f2&amp;sc_channel=el\">community.aws</a> site to find deep-dive technical content on solutions and discover how our builder communities are using Amazon Bedrock in their solutions.</p> \n<p>— <a href=\"https://www.linkedin.com/in/abhirockzz/\">Abhishek</a></p>","author":"Abhishek Gupta","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"84dac0addd45dfa29698648e4a1ab3f89f94a46eff559b10824cfc37912e89e4","category":"Tech"}