{"title":"Enhance AI-assisted development with Amazon ECS, Amazon EKS and AWS Serverless MCP server","link":"https://aws.amazon.com/blogs/aws/enhance-ai-assisted-development-with-amazon-ecs-amazon-eks-and-aws-serverless-mcp-server/","date":1748545909000,"content":"<p>Today, we’re introducing specialized <a href=\"https://github.com/modelcontextprotocol\">Model Context Protocol (MCP)</a> servers for <a href=\"https://aws.amazon.com/ecs/\">Amazon Elastic Container Service (Amazon ECS)</a>, <a href=\"https://aws.amazon.com/eks/\">Amazon Elastic Kubernetes Service (Amazon EKS)</a>, and <a href=\"https://aws.amazon.com/serverless/\">AWS Serverless</a>, now available in the <a href=\"https://github.com/awslabs/mcp\">AWS Labs GitHub repository</a>. These open source solutions extend AI development assistants capabilities with real-time, contextual responses that go beyond their pre-trained knowledge. While<a href=\"https://aws.amazon.com/what-is/large-language-model/\"> Large Language Models (LLM)</a> within AI assistants rely on public documentation, MCP servers deliver current context and service-specific guidance to help you prevent common deployment errors and provide more accurate service interactions.</p> \n<p>You can use these open source solutions to develop applications faster, using up-to-date knowledge of <a href=\"https://aws.amazon.com/\">Amazon Web Services (AWS)</a> capabilities and configurations during the build and deployment process. Whether you’re writing code in your <a href=\"https://console.aws.amazon.com/\">integrated development environment (IDE)</a>, or debugging production issues, these MCP servers support AI code assistants with deep understanding of Amazon ECS, Amazon EKS, and AWS Serverless capabilities, accelerating the journey from code to production. They work with popular AI-enabled IDEs, including <a href=\"https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line.html\">Amazon Q Developer on the command line (CLI)</a>, to help you build and deploy applications using natural language commands.</p> \n<ul> \n <li>The <a href=\"https://awslabs.github.io/mcp/servers/ecs-mcp-server/\">Amazon ECS MCP Server</a> containerizes and deploys applications to Amazon ECS within minutes by configuring all relevant AWS resources, including load balancers, networking, auto-scaling, monitoring, Amazon ECS task definitions, and services. Using natural language instructions, you can manage cluster operations, implement auto-scaling strategies, and use real-time troubleshooting capabilities to identify and resolve deployment issues quickly.</li> \n <li>For Kubernetes environments, the <a href=\"https://awslabs.github.io/mcp/servers/eks-mcp-server/\">Amazon EKS MCP Server</a> provides AI assistants with up-to-date, contextual information about your specific EKS environment. It offers access to the latest EKS features, knowledge base, and cluster state information. This gives AI code assistants more accurate, tailored guidance throughout the application lifecycle, from initial setup to production deployment.</li> \n <li>The <a href=\"https://awslabs.github.io/mcp/servers/aws-serverless-mcp-server/\">AWS Serverless MCP Server</a> enhances the serverless development experience by providing AI coding assistants with comprehensive knowledge of serverless patterns, best practices, and AWS services. Using <a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/using-sam-cli.html\">AWS Serverless Application Model Command Line Interface (AWS SAM CLI)</a> integration, you can handle events and deploy infrastructure while implementing proven architectural patterns. This integration streamlines function lifecycles, service integrations, and operational requirements throughout your application development process. The server also provides contextual guidance for infrastructure as code decisions, <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> specific best practices, and event schemas for AWS Lambda event source mappings.</li> \n</ul> \n<p><span><strong>Let’s see it in action</strong></span><br /> If this is your first time using AWS MCP servers, visit the <a href=\"https://github.com/awslabs/mcp?tab=readme-ov-file#installation-and-setup\">Installation and Setup guide in the AWS Labs GitHub repository</a> to installation instructions. Once installed, add the following MCP server configuration to your local setup:</p> \n<p>Install <a href=\"https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html\">Amazon Q for command line</a> and add the conﬁguration to<code> ~/.aws/amazonq/mcp.json</code>. If you’re already an Amazon Q CLI user, add only the configuration.</p> \n<pre><code>{\n  \"mcpServers\": {\n    \"awslabs.aws-serverless-mcp\":  {\n      \"command\": \"uvx\",\n      \"timeout\": 60,\n      \"args\": [\"awslabs.aws_serverless_mcp_server@latest\"],\n    },\n    \"awslabs.ecs-mcp-server\": {\n      \"disabled\": false,\n      \"command\": \"uv\",\n      \"timeout\": 60,\n      \"args\": [\"awslabs.ecs-mcp-server@latest\"],\n    },\n    \"awslabs.eks-mcp-server\": {\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"command\": \"uv\",\n      \"args\": [\"awslabs.eks-mcp-server@latest\"],\n    }\n  }\n}</code></pre> \n<p>For this demo I’m going to use the Amazon Q CLI to create an application that understands video using <code><a href=\"https://github.com/aws-samples/amazon-nova-samples/blob/main/multimodal-understanding/getting-started/02_using_converse_api.ipynb\">02_using_converse_api.ipynb</a></code> from <a href=\"https://github.com/aws-samples/amazon-nova-samples\">Amazon Nova model cookbook repository</a> as sample code. To do this, I send the following prompt:</p> \n<p><code>I want to create a backend application that automatically extracts metadata and understands the content of images and videos uploaded to an S3 bucket and stores that information in a database. I'd like to use a serverless system for processing. Could you generate everything I need, including the code and commands or steps to set up the necessary infrastructure, for it to work from start to finish? - Use 02_using_converse_api.ipynb as example code for the image and video understanding.</code></p> \n<p>Amazon Q CLI identifies the necessary tools, including the MCP server<code>awslabs.aws-serverless-mcp-server</code>. Through a single interaction, the AWS Serverless MCP server determines all requirements and best practices for building a robust architecture.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/28/new_serveless-1024x459.jpg\" alt=\"\" width=\"1024\" height=\"459\" /></p> \n<p>I ask to Amazon Q CLI that build and test the application, but encountered an error. Amazon Q CLI quickly resolved the issue using available tools. I verified success by checking the record created in the <a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a> table and testing the application with the <a href=\"https://github.com/aws-samples/amazon-nova-samples/blob/main/multimodal-understanding/getting-started/media/dog2.jpeg?raw=true\">dog2.jpeg file</a>.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/26/analysis_dog-1024x466.jpg\" alt=\"\" width=\"1024\" height=\"466\" /></p> \n<p>To enhance video processing capabilities, I decided to migrate my media analysis application to a containerized architecture. I used this prompt:</p> \n<p><code>I'd like you to create a simple application like the media analysis one, but instead of being serverless, it should be containerized. Please help me build it in a new CDK stack.</code></p> \n<p>Amazon Q Developer begins building the application. I took advantage of this time to grab a coffee. When I returned to my desk, coffee in hand, I was pleasantly surprised to find the application ready. To ensure everything was up to current standards, I simply asked:</p> \n<p><code>please review the code and all app using the awslabsecs_mcp_server tools </code></p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/26/ecs_review-1024x356.jpeg\" alt=\"\" width=\"1024\" height=\"356\" /></p> \n<p>Amazon Q Developer CLI gives me a summary with all the improvements and a conclusion.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/26/ecs_conclusion-1024x197.jpeg\" alt=\"\" width=\"1024\" height=\"197\" /></p> \n<p>I ask it to make all the necessary changes, once ready I ask Amazon Q developer CLI to deploy it in my account, all using natural language.</p> \n<p>After a few minutes, I review that I have a complete containerized application from the S3 bucket to all the necessary networking.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/26/Screenshot-2025-05-26-at-7.57.14 PM-1024x759.png\" alt=\"\" width=\"1024\" height=\"759\" /></p> \n<p>I ask Amazon Q developer CLI to test the app send it <a href=\"https://github.com/aws-samples/amazon-nova-samples/blob/main/multimodal-understanding/getting-started/media/the-sea.mp4\">the-sea.mp4 video file</a> and received a timed out error, so Amazon Q CLI decides to use the <code>fetch_task_logs</code> from <code>awslabsecs_mcp_server</code> tool to review the logs, identify the error and then fix it.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/27/error_eks-1024x453.jpeg\" alt=\"\" width=\"1024\" height=\"453\" /></p> \n<p>After a new deployment, I try it again, and the application successfully processed the video file</p> \n<p>I can see the records in my Amazon DynamoDB table.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/26/videotest-1024x476.jpeg\" alt=\"\" width=\"1024\" height=\"476\" /></p> \n<p>To test the Amazon EKS MCP server, I have code for a web app in the auction-website-main folder and I want to build a web robust app, for that I asked Amazon Q CLI to help me with this prompt:</p> \n<p><code>Create a web application using the existing code in the auction-website-main folder. This application will grow, so I would like to create it in a new EKS cluster</code></p> \n<p>Once the Docker file is created, Amazon Q CLI identifies <code>generate_app_manifests</code> from <code>awslabseks_mcp_server</code> as a reliable tool to create a Kubernetes manifests for the application.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/27/docker_1-1024x513.jpeg\" alt=\"\" width=\"1024\" height=\"513\" /></p> \n<p>Then create a new EKS cluster using the <code>manage_eks_staks</code> tool.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/27/docker_2-1024x276.jpeg\" alt=\"\" width=\"1024\" height=\"276\" /></p> \n<p>Once the app is ready, the Amazon Q CLI deploys it and gives me a summary of what it created.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/27/docker_3-1024x543.jpeg\" alt=\"\" width=\"1024\" height=\"543\" /></p> \n<p>I can see the cluster status in the console.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/27/console_eks-1024x173.jpeg\" alt=\"\" width=\"1024\" height=\"173\" /></p> \n<p>After a few minutes and resolving a couple of issues using the <code>search_eks_troubleshoot_guide</code> tool the application is ready to use.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/27/eks_done-1024x464.jpeg\" alt=\"\" width=\"1024\" height=\"464\" /></p> \n<p>Now I have a Kitties marketplace web app, deployed on Amazon EKS using only natural language commands through Amazon Q CLI.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/27/kitty_place-1024x548.jpeg\" alt=\"\" width=\"1024\" height=\"548\" /></p> \n<p><span><strong>Get started today</strong></span><br /> Visit the <a href=\"https://github.com/awslabs/mcp?tab=readme-ov-file#installation-and-setup\">AWS Labs GitHub repository</a> to start using these AWS MCP servers and enhance your AI-powered developmen there. The repository includes implementation guides, example configurations, and additional specialized servers <a href=\"https://github.com/awslabs/mcp/tree/main?tab=readme-ov-file#aws-lambda-mcp-server\">to run AWS Lambda function</a>, which transforms your existing AWS Lambda functions into AI-accessible tools without code modifications, and <a href=\"https://github.com/awslabs/mcp/tree/main?tab=readme-ov-file#amazon-bedrock-knowledge-bases-retrieval-mcp-server\">Amazon Bedrock Knowledge Bases Retrieval MCP server</a>, which provides seamless access to your Amazon Bedrock knowledge bases. Other<a href=\"https://github.com/awslabs/mcp?tab=readme-ov-file#installation-and-setup\"> AWS specialized servers</a> in the repository include documentation, example configurations, and implementation guides to begin building applications with greater speed and reliability.</p> \n<p>To learn more about MCP Servers for AWS Serverless and Containers and how they can transform your AI-assisted application development, visit the <a href=\"https://aws.amazon.com/blogs/compute/introducing-aws-serverless-mcp-server-ai-powered-development-for-modern-applications/\">Introducing AWS Serverless MCP Server: AI-powered development for modern applications</a>, <a href=\"https://aws.amazon.com/blogs/containers/automating-ai-assisted-container-deployments-with-amazon-ecs-mcp-server/\">Automating AI-assisted container deployments with the Amazon ECS MCP Server</a>, and <a href=\"https://aws.amazon.com/blogs/containers/accelerating-application-development-with-the-amazon-eks-model-context-protocol-server/\">Accelerating application development with the Amazon EKS MCP server</a> deep-dive blogs.</p> \n<p>— <a href=\"https://www.linkedin.com/in/lizfue/\">Eli</a></p>","author":"Elizabeth Fuentes","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"d3d53fa57f0f422ea224de9c943a7d26a4abf1e4fe20e41bb13af97714844677","category":"Tech"}