{"title":"Better Context Menus With Safe Triangles","link":"https://smashingmagazine.com/2023/08/better-context-menus-safe-triangles/","date":1692604800000,"content":"<p>You’ve no doubt wrestled with menus that have nested menus before. I can’t count how many times I’ve hovered over a menu item that reveals another list of menu items, then tried to hover over that nested menu only to have the entire menu close on me.</p>\n<p>That’s the setup for what I think is a pretty common issue when making menus — preventing nested menus from closing inadvertently. It’s not the users’ fault; leaving hover between menu levels is easy. It’s also not exactly the web’s fault; the menu is supposed to close if the pointer leaves the interactive area.</p>\n<p><img src=\"https://files.smashing.media/articles/better-context-menus-safe-triangles/2-safe-triangle-safe-area.jpg\" /></p>\n<p>As long as the pointer is hovering over the SVG element, we have something we can use to maintain the nested menu’s open state.</p>\n<h3>Pointer Events</h3>\n<p>There are two steps we need to take to achieve this. First, we’ll create a “desired” path that connects our cursor to the submenu.</p>\n<p>A triangular shape is the most straightforward path we can construct between a menu item and a nested menu. You can visualize what this triangle might look like in the image below. The green represents the safe area, indicating that it won’t trigger any <code>onMouseLeave</code> events. Conversely, the red area signifies that it will start the <code>onMouseLeave</code> event since we’re likely moving toward a sibling menu item.</p>\n<p><img src=\"https://files.smashing.media/articles/better-context-menus-safe-triangles/safe-triangle-pointer-events.jpg\" /></p>\n<p>I approached this by creating a <code>SafeArea</code> component in React that contains the SVG markup:</p>\n<pre><code>&lt;svg\n  style={{\n    position: \"fixed\",\n    width: svgWidth,\n    height: submenuHeight,\n    pointerEvents: \"none\",\n    zIndex: 2,\n    top: submenuY,\n    left: mouseX - 2\n  }}\n  id=\"svg-safe-area\"\n&gt;\n  {/* Safe Area */}\n  &lt;path\n    pointerEvents=\"auto\"\n    stroke=\"red\"\n    strokeWidth=\"0.4\"\n    fill=\"rgb(114 140 89 / 0.3)\"\n    d={\n      `M 0, ${mouseY-submenuY} \n        L ${svgWidth},${svgHeight}\n        L ${svgWidth},0 \n        z`\n    }\n  /&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p>Also, to constantly update our safe triangle and position it appropriately, we need a mouse listener, specifically <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event\"><code>onmousemove</code></a>. I relied on a <a href=\"https://www.joshwcomeau.com/snippets/react-hooks/use-mouse-position/\">React hook from Josh Comeau</a> called <code>useMousePosition</code> in a <code>useMousePosition.tsx</code> file that provides the safe triangle component, designating the mouse position with <code>mouseX</code> and <code>mouseY</code>.</p>\n<h3>The Safe Triangle</h3>\n<p>The triangle is the SVG’s only <code>path</code> element. For this to work correctly, we must set the CSS <code>pointer-events</code> property to <code>none</code>, which we can do inline directly in the SVG. Then we set <code>pointer-events</code> to <code>auto</code> inline in the <code>path</code> element. This way, we stop propagating events when they are coming from the <code>path</code> element — the safe triangle — but not when events come from the SVG’s <code>red</code> area.</p>\n<p>Let’s break down the path we are drawing, as it’s way more straightforward than it looks:</p>\n<pre><code>&lt;path\n  pointerEvents=\"auto\"\n  stroke=\"red\"\n  strokeWidth=\"0.4\"\n  fill=\"rgb(114 140 89 / 0.3)\"\n  d={\n    `M 0, ${mouseY-submenuY} \n      L ${svgWidth},${svgHeight}\n      L ${svgWidth},0 \n      z`\n  }\n/&gt;\n</code></pre>\n\n<p>We set the <code>pointer-events</code> property to <code>auto</code> to capture all mouse events, and it does not trigger the <code>onMouseLeave</code> event as long as the cursor is inside the path.</p>\n<p>Next, we provide the path with some basic CSS styles for debugging purposes. This way, we can see the safe area while testing interactions.</p>\n<p>The <code>0, ${mouseY-submenuY}</code> part is the path’s starting point, designating the center of the SVG’s area.</p>\n<p>Then we continue our path drawing with two lines: <code>L ${svgWidth},${svgHeight}</code> and <code>L ${svgWidth},0</code>. The former represents the first line (<code>L</code>) based on the SVG’s width and height, while the latter draws the second line (<code>L</code>) based on the SVG’s width.</p>\n<p>The <code>z</code> part of the path is what makes everything work. <code>z</code> is what closes the path, making a straight line to the path’s starting point, preventing the need to draw a third line.</p>\n<p><img src=\"https://files.smashing.media/articles/better-context-menus-safe-triangles/safe-triangle-path-points.jpg\" /></p>\n<p>You can explore the path in more detail or adjust it using <a href=\"https://yqnn.github.io/svg-path-editor/#P=M_0_300_L_600_600_L_600_0_z\">this SVG path editor</a>.</p>\nThere Are Some Gotchas\n<p>This is a relatively simple solution on purpose. There are some situations where this approach may be too simple, and you will need another creative solution, particularly if you’re not working in React like me.</p>\n<p>For example, what if the user’s pointer moves diagonally and touches a different menu item? This approach does not capture that interaction to prevent the current nested menu from closing, but that might not be what you want it to do. Perhaps you <em>want</em> the nested menu to close and need to adjust the SVG with a different shape. An “easy” way to solve this is to debounce a cleanup function so that, on every mouse movement, you call the cleanup function. And after some number of milliseconds have passed without a mouse movement, you would remove the SVG element, and the sibling listeners would trigger as expected.</p>\n<p>Another example is the navigation paths. A triangle is terrific but might not be the ideal shape for your menu and how it is designed. After doing some of my own tests, I’ve found that a curved path tends to be more effective, closer to <a href=\"https://www.neo4j.design/40a8cff71/p/96952e-context-menu\">Needle’s approach</a> for a safe area:</p>\n<a href=\"https://files.smashing.media/articles/better-context-menus-safe-triangles/needle-context-menu-safe-area-paths.gif\"><img src=\"https://files.smashing.media/articles/better-context-menus-safe-triangles/needle-context-menu-safe-area-paths-800.gif\" /></a>Needle’s Context Menu Safe Area paths. (<a href=\"https://files.smashing.media/articles/better-context-menus-safe-triangles/needle-context-menu-safe-area-paths.gif\">Large preview</a>)\n\nWrapping Up\n<p>As you now know, coming up with a solution for nested menus that reveal on hover is more of a challenge than it looks on the surface. Whether a hover-based approach and the clicks it saves are worth the additional considerations that make a better user experience versus a click-based approach is totally up to you. If you go with a menu that relies on a mouse hover to reveal a nested menu, you now have a resource that enhances its usability.</p>\n<p>What about you? Is this a UX challenge you’ve struggled with? Have you attempted to solve it differently? Is the “safe triangle” concept effective for your particular use case? I’d love to know in the comments!</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"82c9664be0aae99e56ffa072e49e0d44de0581b6a6a41c7195a7b8273b41c1c0","category":"Tech"}