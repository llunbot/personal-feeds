{"title":"New Amazon CloudWatch Database Insights: Comprehensive database observability from fleets to instances","link":"https://aws.amazon.com/blogs/aws/new-amazon-cloudwatch-database-insights-comprehensive-database-observability-from-fleets-to-instances/","date":1733085046000,"content":"<p>Observing your <a href=\"https://aws.amazon.com/rds/aurora/\">Amazon Aurora</a> databases is now a whole lot easier. Instead of spending time setting up telemetry, building dashboards, and configuring alarms, you just open <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> Database Insights and take a look. With no further setup, you can monitor the health of all of your <span>Amazon Aurora</span> MySQL and PostgreSQL instances in the selected Region:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/dbi_main_mega_5.png\" width=\"794\" height=\"1283\" /></p> \n<p>Each of the sections contains a wealth of detail and I’ll get to that in a moment (this may be the ultimate “<a href=\"https://tvtropes.org/pmwiki/pmwiki.php/Main/ButWaitTheresMore\">but wait, there’s more</a>” post). From this view, I can open the filter control on the left and filter the set of instances in a couple of different ways. For example, I can filter for all of the instances running Amazon Aurora MySQL, and see that I have 66 such instances, with 3 raising alarms:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/dbi_mysql_fleet_3.png\" width=\"694\" height=\"474\" /></p> \n<p>I can save the filter as a Fleet (note that Fleets are defined by specific properties and tags of the database instances and as such are inherently dynamic):</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/dbi_fleet_myql_def_4.png\" width=\"590\" height=\"384\" /></p> \n<p>And then I can see the overall health of the fleet with a click. The entire page updates to reflect the fleet; I focus on the summary:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/dbi_aurora_mysql_fleet_1.png\" width=\"394\" height=\"776\" /></p> \n<p>Behind the scenes, Database Insights looks for CloudWatch alarms that include a <strong>DBInstanceIdentifier</strong> dimension, and uses these alarms to establish a correlation between database instances and alarms. This, along with other built-in heuristics and correlation steps, allows Database Insights to deliver helpful, well-organized information that will help you to better understand the overall health of your fleet and to dive deep in order to find bottlenecks and other issues.</p> \n<p>Clicking on an instance (represented by a hexagon) reveals details; I click on the instance name (<strong>demo-mysql-reader0</strong>) to learn more:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/dbi_fleet_hex_2.png\" width=\"494\" height=\"528\" /></p> \n<p>In the per-instance view I can also see a myriad of details:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/dbi_instance_reader0_2.png\" width=\"794\" height=\"991\" /></p> \n<p>Each of the tabs at the bottom provides additional insights into what’s happening inside the database instance. For example, selecting <strong>DB Load Analysis</strong> / <strong>Top SQL</strong> / <strong>SQL Metrics</strong> shows me which SQL statements are imposing the heaviest load, along with 29 additional metrics (not shown):</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/dbi_instance_dbload_top_sql_3.png\" width=\"894\" height=\"747\" /></p> \n<p>From past experience, I know that finding and understanding slow queries is a tedious yet important task. with Database Insights I can see patterns that are common to the slow queries, as well as the actual queries:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/dbi_slow_q_2.png\" width=\"795\" height=\"440\" /></p> \n<p>With help from <a href=\"https://aws.amazon.com/x-ray/\">AWS X-Ray</a>, <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Application-Monitoring-Sections.html\">Application Signals</a>, and the <a href=\"https://aws.amazon.com/otel/\">AWS Distro for OpenTelemetry SDK</a>, I can see the services and operations that originate the queries to the database instance:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/dbi_inst_cso_2.png\" width=\"793\" height=\"315\" /></p> \n<p>The red X indicates that this operation is failing the associated <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-ServiceLevelObjectives.html\">Service Level Objective</a> (SLO), an application performance monitoring aspect of <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Application-Monitoring-Sections.html\">Application Signals</a>. An SLO defines the reliability of a service against customer expectations, and can be set up by selecting the service and clicking <strong>Create SLO</strong>. There are a couple of steps and some very helpful options, but at the core a SLO is measured as a percentage of successful requests over an extended period of time:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/dbi_set_slo_3.png\" width=\"694\" height=\"430\" /></p> \n<p>If the database instance is configured to send logs to CloudWatch Logs, I can see and search the logs, filtered by the selected time period, and within a particular log group:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/dbi_logs_2.png\" width=\"794\" height=\"422\" /></p> \n<p>There’s still a lot more to explore at the fleet level. For example, I can see the ten calling services which drive the highest DB load (again, this is powered by <a href=\"https://aws.amazon.com/x-ray/\">AWS X-Ray</a>, <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Application-Monitoring-Sections.html\">Application Signals</a>, and the <a href=\"https://aws.amazon.com/otel/\">AWS Distro for OpenTelemetry SDK</a>):</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/dbi_top10_callers_2.png\" width=\"693\" height=\"240\" /></p> \n<p>And I can see the top 10 instances with respect to any of eight different metrics:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/dbi_top10_metrics_2.png\" width=\"741\" height=\"359\" /></p> \n<p>I could go on all day, but I will leave the rest for you to explore. As I never tire of saying, this feature is available now and you can start using it today.</p> \n<p><span><strong>Things to Know</strong></span><br /> Here are a couple of things to know about Database Insights:</p> \n<p><strong>Supported Databases</strong> – You can use Database Insights with Amazon Aurora MySQL and Amazon Aurora PostgreSQL database instances.</p> \n<p><strong>Pricing</strong> – There is a per-hour, per-database instance charge based on the average number of vCPUs used (for provisioned instances) or Aurora Capacity Units (for Serverless v2 databases) monitored, with separate charges for ingestion and storage of database logs. See the <a href=\"https://aws.amazon.com/cloudwatch/pricing/\">CloudWatch Pricing</a> page for more information.</p> \n<p><strong>Regions</strong> – This feature is available in all commercial AWS Regions.</p> \n<p>— <a href=\"https://twitter.com/jeffbarr\">Jeff</a>;</p>","author":"Jeff Barr","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"b5fef3c71d12512c053f3b445767adf08a8dccbdd3c8b3432c5deb47b1b31033","category":"Tech"}