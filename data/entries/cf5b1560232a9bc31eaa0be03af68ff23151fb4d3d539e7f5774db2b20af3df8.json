{"title":"ลองใช้งาน Spring Cloud Contract (HTTP) กันหน่อย สำหรับ Contract testing","link":"https://www.somkiat.cc/spring-cloud-contract-with-http/","date":1637211282000,"content":"<p><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/11/ContractTestingModel-150x150.png\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/11/ContractTestingModel-1024x468.png\" /></figure>\n\n\n\n<p>ในการทดสอบระบบงานพวก RESTful API นั้น ๆ<br />เราสามารถทดสอบได้หลายวิธี ไม่ว่าจะเป็น</p>\n\n\n\n<ul><li>API testing tools เช่น Postman</li><li>Unit, Integration, Component และ End-to-End testing</li></ul>\n\n\n\n<p>แต่อีกตัวที่น่าสนใจคือ <strong><a href=\"https://www.somkiat.cc/tag/contract-testing/\" target=\"_blank\">Contract Testing</a></strong><br />สำหรับการทดสอบการทำงานร่วมกันระหว่าง services ต่าง ๆ</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>พอดีมี project ต้องใช้งาน</strong><br />จึงลองสรุป Contract testing ด้วย Spring Cloud Contract ไว้<br />โดยสามารถดูเพิ่มเติมใน <strong><a href=\"https://spring.io/projects/spring-cloud-contract\" target=\"_blank\">Spring Cloud Contract Reference</a></strong><br />จะสนับสนุนทั้ง HTTP และ messaging<br />มาเขียนกันเลย</p>\n\n\n\n<p><strong>ขั้นตอนที่ 1 เริ่มจากการออกแบบการทำงานของผู้ใช้งาน(Consumer)และผู้ให้บริการ (Provider)</strong></p>\n\n\n\n<p>โดยติดต่อกับผ่าน HTTP protocol ปกติด้วย REST + JSON<br />ซึ่งทั้ง consumer และ provider จะต้องมาสรุปรูปแบบของการติดต่อสื่อสาร<br />ว่าจะต้องมีรูปแบบอย่างไร <br />มันคือ API specification นั่นเอง<br />จะเรียกว่า <strong>Contract</strong> หรือสัญญาระหว่างกัน<br />ดังนั้นถ้ามีการเปลี่ยนสัญญาจะรู้ได้ทันที</p>\n\n\n\n<p><strong>ขั้นตอนที่ 2 ทำการสร้าง Contract ขึ้นมา ซึ่งสามารถ execute ได้ ไม่ใช่เป็นเพียงไฟล์เอกสารที่โยนไปมา</strong></p>\n\n\n\n<p>โดยสามารถสร้าง contract ได้หลายรูปแบบ<br />จะเรียกว่า Contract DSL ประกอบไปด้วย</p>\n\n\n\n<ul><li>Java</li><li>Groovy</li><li>Kotlin</li><li>YAML</li></ul>\n\n\n\n<p><strong>ตัวอย่างของ Contract ที่เขียนด้วยภาษา Groovy</strong></p>\n\n\n\n[gist id=\"579a527696a6ec0e86f08cd90dffd3d5\" file=\"first-contract.groovy\"]\n\n\n\n<p><strong>ขั้นตอนที่ 3 ในฝั่ง provider ทำการเขียน test โดยนำข้อมูลจาก Contract ที่สร้างไว้มาใช้</strong></p>\n\n\n\n<p>จะเรียกว่าการสร้าง Contract test<br />ในส่วนนี้เราจะเขียนเพียง Based-test class เท่านั้น<br />เพื่อระบุว่าเป็น class หลักของการทดสอบด้วย Contract ดังนี้</p>\n\n\n\n[gist id=\"579a527696a6ec0e86f08cd90dffd3d5\" file=\"BaseTests.java\"]\n\n\n\n<p><strong>จากนั้นทำการ run test ผ่าน gradle ได้คำสั่ง</strong></p>\n\n\n\n[code]$gradlew contractTest[/code]\n\n\n\n<p>โดยคำสั่งนี้จะทำการ generate test case class จาก contract <br />ที่อยู่ใน folder contract ให้แบบอัตโนมัติ<br />และทำการทดสอบให้อีกด้วย</p>\n\n\n\n<p><strong>ขั้นตอนที่ 4 เมื่อฝั่ง provider ทำการทดสอบผ่านแล้ว ทำการสร้าง stub server และ upload ไปยังตรงกลาง</strong></p>\n\n\n\n<p>การสร้าง stub server จาก Contract นั่นเอง<br />เพื่อให้ทางฝั่ง consumer หรือผู้ใช้งานนำไปใช้<br />เพื่อใช้ในการทดสอบ หรือ มันคือ Mock API server นั่นเอง<br />ถูกสร้างมาให้ทุกครั้งเมื่อมีการเปลี่ยนแปลง</p>\n\n\n\n<p><strong>ขั้นตอนที่ 5 ในฝั่ง consumer ก็ทำการเขียน test case เพื่อใช้งาน Contract test + Stub server</strong></p>\n\n\n\n<p>ทำการใช้งาน stub server ที่สร้างจาก provider<br />และถูกจัดเก็บไว้ใน Apache Maven Repository แบบ local<br />เขียนได้ดังนี้</p>\n\n\n\n[gist id=\"579a527696a6ec0e86f08cd90dffd3d5\" file=\"CustomerGatewayTest.java\"]\n\n\n\n<p>จากนั้นก็ทดสอบแบบปกติ<br />เพียงเท่านี้เราก็สามารถเริ่มต้นทำ Contract testing <br />ด้วย Spring Cloud Contract ได้แล้ว<br />เป็นอีกแนวทางในการทดสอบและการทำงานร่วมกันที่น่าสนใจ<br />ส่วนเครื่องมืออื่น ๆ ก็เช่น <a href=\"https://docs.pact.io/\" target=\"_blank\">Pact</a> เป็นต้น<br /><br />ขอให้สนุกกับการ coding ครับ<br /><br />ดูตัวอย่าง code แบบเต็ม ๆ ได้ที่ <strong><a href=\"https://github.com/up1/workshop-spring-contract-testing\" target=\"_blank\">GitHub:Up1</a></strong></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"cf5b1560232a9bc31eaa0be03af68ff23151fb4d3d539e7f5774db2b20af3df8","category":"Thai"}