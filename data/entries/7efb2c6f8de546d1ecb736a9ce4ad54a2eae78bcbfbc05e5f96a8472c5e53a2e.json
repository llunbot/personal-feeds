{"title":"บันทึกเรื่อง Architecture ของระบบ Twitch","link":"https://www.somkiat.cc/note-architecture-journey-from-twitch/","date":1682232920000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/04/btmpt2-1-150x150.jpg\" alt srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/04/btmpt2-1-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2023/04/btmpt2-1-75x75.jpg 75w\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/04/btmpt2-1-1024x512.jpg\" alt /></figure>\n\n\n\n<p>บันทึกการอ่านเรื่องของปรับปรุง architecture ของระบบ Twitch<br />ซึ่งทำการปรังปรุงระบบ Monolith มายัง Microservice<br />โดยมีขั้นตอนการปรับปรุงที่น่าสนใจ<br />ทำการเขียนใน blog 2 ตัวคือ</p>\n\n\n\n<ul><li><a href=\"https://blog.twitch.tv/en/2022/03/30/breaking-the-monolith-at-twitch/\" target=\"_blank\">Breaking the Monolith at Twitch: Part One</a></li><li><a href=\"https://blog.twitch.tv/en/2022/04/12/breaking-the-monolith-at-twitch-part-2/\" target=\"_blank\">Breaking the Monolith at Twitch: Part Two</a></li></ul>\n\n\n\n<span></span>\n\n\n\n<p>อธิบายการเดินทางของระบบตั้งแต่เริ่มต้น<br />มาจนถึงมีการใช้งานที่สูงมาก ๆ<br />จนก่อให้เกิดปัญหาคอขวดต่าง ๆ ของระบบ<br />พร้อมทั้งแนวทางการแก้ไขปัญหา</p>\n\n\n\n<p><strong>เริ่มต้นทาง Monolith ทุกอย่างรวมกันที่เดียว</strong></p>\n\n\n\n<p>ง่ายต่อการพัฒนา ส่งมอบ<br />แน่นอนว่า เร็ว และ ดีต่อทีมที่มีขนาดเล็กในช่วงเริ่มต้น (Startup)<br />ทั้ง Web, database , file system<br />พัฒนาด้วย Ruby On Rails (RoR)</p>\n\n\n\n<p>แต่เมื่อระบบใหญ่ขึ้น คนใช้งานมากขึ้น<br />จำเป็นที่จะต้องแยกส่วนการทำงานออกจากกันมาขึ้น<br />ด้วยเหตุผลดังนี้</p>\n\n\n\n<ul><li>ทำงานร่วมกันมาเกินไป (Coordination)</li><li>Resilience</li><li>Scalability</li></ul>\n\n\n\n<p><strong>โดยที่ Twitch นั้นมีปัญหาคอขวดของการ scale เป็นหลัก !! </strong><br />เช่น</p>\n\n\n\n<ul><li>ระบบ chat</li><li>ระบบ VDO</li><li>ระบบ Search</li></ul>\n\n\n\n<p>ดังนั้นจึงเริ่มมีแนวคิดที่จะพยายามแยกส่วนต่าง ๆ ออกมา<br />จากเดิมที่พัฒนาด้วย Ruby On Rails อย่างเดียว<br />เริ่มทำงานแบบ background ด้วย <a href=\"https://github.com/sidekiq/sidekiq\" target=\"_blank\">Sidekiq</a><br />แต่พบว่ายังอยู่ใน codebase เดิมซึ่งใหญ่ จึงพยายามแยกออกมา</p>\n\n\n\n<p><strong>ความพยายามแรกคือ พัฒนาส่วนใหม่ด้วย NodeJS</strong><br />แต่ก็เจอปัญหาตอนการ scale<br />ในบทความบอกคร่าว ๆ ว่าเป็น ปัญหาที่ core ของ NodeJS<br />ซึ่งตอนนั้น NodeJS ยังใหม่มาก ๆ<br />จึงไม่ได้นำมาใช้งาน</p>\n\n\n\n<p><strong>ความพยายามที่สองคือ Python + Tonado</strong><br />โดยได้พัฒนาระบบ chat ตัวใหม่ขึ้นมา</p>\n\n\n\n<p><strong>จากนั้นได้เริ่มนำภาษา Go มาลองสร้างเครื่องมือในระบบงาน</strong><br />เช่นระบบ pubsub ที่เขียน code ไม่กี่ร้อยบรรทัด<br />เพื่อใช้ในการแลกเปลี่ยนข้อมูลในระบบ<br />หรือการ mock service เพื่อช่วยตรวจสอบ bug ในระบบ<br />ซึ่งเป็นการทดลองใช้ Go </p>\n\n\n\n<p>เป็นจุดเริ่มต้นของการนำภาษา Go มาใช้งาน<br />และใช้เป็นภาษาหลักของระบบต่อมานั่นเอง</p>\n\n\n\n<p><strong>ในส่วนของ Frontend ก็เปลี่ยนแปลงเช่นกัน</strong></p>\n\n\n\n<p>จาก jQuery -&gt; Ember.js มาจนถึง React.js</p>\n\n\n\n<p><strong>ขั้นตอนการย้ายระบบเก่ามาใหม่</strong></p>\n\n\n\n<p>จะเป็นการทำงานแบบขนานกันไป<br />โดยจะมี proxy มากั้น request เพื่อแยกไประบบเก่าและใหม่<br />ทำให้สามารถ redirect traffic ได้ง่ายขึ้น<br />ซึ่งใช้ NGINX ดังรูป</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/04/architecture-01.png\" alt /></figure>\n\n\n\n<p><strong>การเปลี่ยนแปลงครั้งนี้ จะกระทบเยอะมาก ๆ</strong></p>\n\n\n\n<p>ทั้งเรื่องของโครงสร้างของบริษัท<br />ทั้งเรื่องการเขียน code ใน repository เยอะ ๆ<br />เพื่อทำการส่งมอบ feature เดียวกัน<br />จะ deploy อย่างไร</p>\n\n\n\n<p>การ provisioning infrastructure บน Cloud provider<br />ด้วยภาษา Go</p>\n\n\n\n<p>การเรียกกันข้าม service ผ่านระบบ network<br />ซึ่งก่อนนี้จะเป็นแบบเรียก functiom/method<br />ทำให้เกิดปัญหาใหม่ ๆ ขึ้นมา เช่น</p>\n\n\n\n<ul><li>Error handling</li><li>Monitoring</li><li>Circuit breaker</li><li>Rate limit</li><li>Request tracing</li><li>API versioning</li><li>Service-to-service security</li><li>Authorization</li><li>Integration test</li></ul>\n\n\n\n<p>ซึ่งหลาย ๆ อย่างมักจะทำการ copy-and-paste กันในแต่ละ service<br />ดังนั้นทีมจึงทำการสร้าง <a href=\"https://github.com/twitchtv/twirp\" target=\"_blank\">Twirp framework</a> มาใช้งาน<br />สำหรับ service-to-service communication</p>\n\n\n\n<p><strong>ในตอนนี้จะใช้ภาษาโปรแกรมเยอะ</strong></p>\n\n\n\n<p>แยกตามไปแต่ละส่วนงาน<br />เช่น Go, TypeScript, Python, C++, Java/Kotlin และ ObjectiveC/Swift<br />และแต่ละทีมก็มี account สำหรับ Cloud provider แยกกัน<br />ส่งผลให้แต่ละส่วนงานมีความเป็นอิสระมากขึ้น<br />แต่ละทีมสามารถเข้ามา contribute ได้เลย</p>\n\n\n\n<p>และเมื่อทีมแข็งแรงขึ้น จะเริ่มเกิด standard ต่าง ๆ ขึ้นมา<br />เกิด framework ต่าง ๆ ขึ้นมา<br />เกิด tool ต่าง ๆ ขึ้นมา<br />เพื่อช่วยให้การพัฒนา deployment และ operation มีประสิทธิภาพที่ดีขึ้น</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"7efb2c6f8de546d1ecb736a9ce4ad54a2eae78bcbfbc05e5f96a8472c5e53a2e","category":"Thai"}