{"title":"Simplify Service-to-Service Connectivity, Security, and Monitoring with Amazon VPC Lattice – Now Generally Available","link":"https://aws.amazon.com/blogs/aws/simplify-service-to-service-connectivity-security-and-monitoring-with-amazon-vpc-lattice-now-generally-available/","date":1680275771000,"content":"<p>At <a href=\"https://reinvent.awsevents.com/\">AWS re:Invent 2022</a>, we <a href=\"https://aws.amazon.com/blogs/aws/introducing-vpc-lattice-simplify-networking-for-service-to-service-communication-preview/\">introduced in preview Amazon VPC Lattice</a>, a new capability of <a href=\"https://aws.amazon.com/vpc/\">Amazon Virtual Private Cloud (Amazon VPC)</a> that gives you a consistent way to connect, secure, and monitor communication between your services. With VPC Lattice, you can define policies for network access, traffic management, and monitoring to connect compute services across instances, containers, and serverless applications.</p> \n<p>Today, I am happy to share that VPC Lattice is now generally available. Compared to the preview, you have access to new capabilities:</p> \n<ul> \n <li>Services can use a custom domain name in addition to the domain name automatically generated by VPC Lattice. When using HTTPS, you can configure an SSL/TLS certificate that matches the custom domain name.</li> \n <li>You can deploy the open-source <a href=\"https://github.com/aws/aws-application-networking-k8s\">AWS Gateway API Controller</a> to use VPC Lattice with a Kubernetes-native experience. It uses the <a href=\"https://gateway-api.sigs.k8s.io/\">Kubernetes Gateway API</a> to let you connect services across multiple Kubernetes clusters and services running on EC2 instances, containers, and serverless functions.</li> \n <li>You can use an <a href=\"https://aws.amazon.com/elasticloadbalancing/application-load-balancer/\">Application Load Balancer (ALB)</a> or a <a href=\"https://aws.amazon.com/elasticloadbalancing/network-load-balancer/\">Network Load Balancer (NLB)</a> as a target for a service.</li> \n <li>The IP address target type now supports IPv6 connectivity.</li> \n</ul> \n<p>Let’s see some of these new features in practice.</p> \n<p><span><strong>Using Amazon VPC Lattice for Service-to-Service Connectivity</strong></span><br /> In <a href=\"https://aws.amazon.com/blogs/aws/introducing-vpc-lattice-simplify-networking-for-service-to-service-communication-preview/\">my previous post introducing VPC Lattice</a>, I show how to create a service network, associate multiple VPCs and services, and configure target groups for EC2 instances and Lambda functions. There, I also show how to route traffic based on request characteristics and how to use weighted routing. Weighted routing is really handy for blue/green and canary-style deployments or for migrating from one compute platform to another.</p> \n<p>Now, let’s see how to use VPC Lattice to allow the services of an e-commerce application to communicate with each other. For simplicity, I only consider four services:</p> \n<ul> \n <li>The <code>Order</code> service, running as a Lambda function.</li> \n <li>The <code>Inventory</code> service, deployed as an <a href=\"https://aws.amazon.com/ecs/\">Amazon Elastic Container Service (Amazon ECS)</a> service in a <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html#ipv4-ipv6-comparison\">dual-stack VPC</a> supporting IPv6.</li> \n <li>The <code>Delivery</code> service, deployed as an ECS service using an ALB to distribute traffic to the service tasks.</li> \n <li>The <code>Payment</code> service, running on an EC2 instance.</li> \n</ul> \n<p>First, I create a service network. The <code>Order</code> service needs to call the <code>Inventory</code> service (to check if an item is available for purchase), the <code>Delivery</code> service (to organize the delivery of the item), and the <code>Payment</code> service (to transfer the funds). The following diagram shows the service-to-service communication from the perspective of the service network.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/28/vpc-lattice-ga-service-network-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/28/vpc-lattice-ga-service-network-1-1024x266.png\" alt=\"Diagram describing the service network view of the e-commerce services.\" width=\"1024\" height=\"266\" /></a></p> \n<p>These services run in different AWS accounts and multiple VPCs. VPC Lattice handles the complexity of setting up connectivity across VPC boundaries and permission across accounts so that service-to-service communication is as simple as an HTTP/HTTPS call.</p> \n<p>The following diagram shows how the communication flows from an implementation point of view.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/28/vpc-lattice-ga-implementation-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/28/vpc-lattice-ga-implementation-1-1024x551.png\" alt=\"Diagram describing the implementation view of the e-commerce services.\" width=\"1024\" height=\"551\" /></a></p> \n<p>The <code>Order</code> service runs in a Lambda function connected to a VPC. Because all the VPCs in the diagram are associated with the service network, the <code>Order</code> service is able to call the other services (<code>Inventory</code>, <code>Delivery</code>, and <code>Payment</code>) even if they are deployed in different AWS accounts and in VPCs with overlapping IP addresses.</p> \n<p><span><strong>Using a Network Load Balancer (NLB) as Target<br /> </strong></span>The <code>Inventory</code> service runs in a dual-stack VPC. It’s deployed as an ECS service with an NLB to distribute traffic to the tasks in the service. To get the IPv6 addresses of the NLB, I look for the network interfaces used by the NLB in the <a href=\"https://console.aws.amazon.com/ec2\">EC2 console</a>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/25/vpc-lattice-ga-ipv6-lb-network-interfaces.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/25/vpc-lattice-ga-ipv6-lb-network-interfaces-1024x201.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"201\" /></a></p> \n<p>When creating the target group for the <code>Inventory</code> service, under <strong>Basic configuration</strong>, I choose <strong>IP addresses</strong> as the target type. Then, I select <strong>IPv6</strong> for the <strong>IP Address type</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/25/vpc-lattice-ga-ipv6-address-type.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/25/vpc-lattice-ga-ipv6-address-type-1024x173.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"173\" /></a></p> \n<p>In the next step, I enter the IPv6 addresses of the NLB as targets. After the target group is created, the health checks test the targets to see if they are responding as expected.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/25/vpc-lattice-ga-ipv6-registered-targets.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/25/vpc-lattice-ga-ipv6-registered-targets-1024x307.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"307\" /></a></p> \n<p><span><strong>Using an Application Load Balancer (ALB) as Target</strong></span><br /> Using an ALB as a target is even easier. When creating a target group for the <code>Delivery</code> service, under <strong>Basic configuration</strong>, I choose the new <strong>Application Load Balancer</strong> target type.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/30/vpc-lattice-ga-alb-target-type.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/30/vpc-lattice-ga-alb-target-type-1024x641.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"641\" /></a></p> \n<p>I select the <strong>VPC</strong> in which to look for the ALB and choose the <strong>Protocol version</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/30/vpc-lattice-ga-alb-vpc-protocol.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/30/vpc-lattice-ga-alb-vpc-protocol-1024x468.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"468\" /></a></p> \n<p>In the next step, I choose <strong>Register now</strong> and select the ALB from the dropdown. I use the default port used by the target group. VPC Lattice does not provide additional health checks for ALBs. However, load balancers already have their own health checks configured.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/30/vpc-lattice-ga-alb-register.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/30/vpc-lattice-ga-alb-register-1024x471.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"471\" /></a></p> \n<p><span><strong>Using Custom Domain Names for Services</strong></span><br /> To call these services, I use custom domain names. For example, when I create the <code>Payment</code> service in the <a href=\"https://console.aws.amazon.com/vpc/\">VPC console</a>, I choose to <strong>Specify a custom domain configuration</strong>, enter a <strong>Custom domain name</strong>, and select an SSL/TLS certificate for the HTTPS listener. The <strong>Custom SSL/TLS certificate</strong> dropdown shows available certificates from <a href=\"https://aws.amazon.com/certificate-manager/\">AWS Certificate Manager (ACM)</a>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/30/vpc-lattice-ga-custom-domain-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/30/vpc-lattice-ga-custom-domain-1-1024x719.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"719\" /></a></p> \n<p><span><strong>Securing Service-to-Service Communications</strong></span><br /> Now that the target groups have been created, let’s see how I can secure the way services communicate with each other. To implement zero-trust authentication and authorization, I use <a href=\"https://aws.amazon.com/iam/\">AWS Identity and Access Management (IAM)</a>. When creating a service, I select the <strong>AWS IAM</strong> as <strong>Auth type</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/25/vpc-lattice-ga-auth-type.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/25/vpc-lattice-ga-auth-type-1024x454.png\" alt width=\"1024\" height=\"454\" /></a></p> \n<p>I select the <strong>Allow only authenticated access</strong> policy template so that requests to services need to be signed using <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\">Signature Version 4, the same signing protocol used by AWS APIs</a>. In this way, requests between services are authenticated by their IAM credentials, and I don’t have to manage secrets to secure their communications.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/25/vpc-lattice-ga-auth-policy.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/25/vpc-lattice-ga-auth-policy-1024x562.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"562\" /></a></p> \n<p>Optionally, I can be more precise and use an auth policy that only gives access to some services or specific URL paths of a service. For example, I can apply the following auth policy to the <code>Order</code> service to give to the Lambda function these permissions:</p> \n<ul> \n <li>Read-only access (GET method) to the <code>Inventory</code> service <code>/stock</code> URL path.</li> \n <li>Full access (any HTTP method) to the <code>Delivery</code> service <code>/delivery</code> URL path.</li> \n</ul> \n<pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"&lt;Order Service Lambda Function IAM Role ARN&gt;\"\n            },\n            \"Action\": \"vpc-lattice-svcs:Invoke\",\n            \"Resource\": \"&lt;Inventory Service ARN&gt;/stock\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"vpc-lattice-svcs:RequestMethod\": \"GET\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"&lt;Order Service Lambda Function IAM Role ARN&gt;\"\n            },\n            \"Action\": \"vpc-lattice-svcs:Invoke\",\n            \"Resource\": \"&lt;Delivery Service ARN&gt;/delivery\"\n        }\n    ]\n}</code></pre> \n<p>Using VPC Lattice, I quickly configured the communication between the services of my e-commerce application, including security and <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/monitoring-overview.html\">monitoring</a>. Now, I can focus on the business logic instead of managing how services communicate with each other.</p> \n<p><span><strong>Availability and Pricing</strong></span><br /> <a href=\"https://aws.amazon.com/vpc/lattice/\">Amazon VPC Lattice</a> is available today in the following <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\">AWS Regions</a>: US East (Ohio), US East (N. Virginia), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), and Europe (Ireland).</p> \n<p>With VPC Lattice, you pay for the time a service is provisioned, the amount of data transferred through each service, and the number of requests. There is no charge for the first 300,000 requests every hour, and you only pay for requests above this threshold. For more information, see <a href=\"https://aws.amazon.com/vpc/lattice/pricing/\">VPC Lattice pricing</a>.</p> \n<p>We designed VPC Lattice to allow incremental opt-in over time. Each team in your organization can choose if and when to use VPC Lattice. Other applications can connect to VPC Lattice services using standard protocols such as HTTP and HTTPS. By using VPC Lattice, you can focus on your application logic and improve productivity and deployment flexibility with consistent support for instances, containers, and serverless computing.</p> \n<p><strong><a href=\"https://aws.amazon.com/vpc/lattice/\">Simplify the way you connect, secure, and monitor your services with VPC Lattice.</a></strong></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"f24cbf8193752c9b387f36f7c9cc139bcbce81e1776a9d2cae0614b7cec4bb59","category":"Tech"}