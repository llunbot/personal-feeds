{"title":"Speedometer 3.0: The Best Way Yet to Measure Browser Performance","link":"https://webkit.org/blog/15131/speedometer-3-0-the-best-way-yet-to-measure-browser-performance/","date":1710172835000,"content":"<p>As <a href=\"https://browserbench.org/announcements/speedometer3/\">announced on browserbench.org</a> today, in collaboration with other browser engine developers, Apple’s WebKit team is excited to introduce <a href=\"https://browserbench.org/Speedometer3.0/\">Speedometer 3.0</a>, a major update that better reflects the Web of today. It’s built together by the developers of all major browser engines: Blink, Gecko, and WebKit with hundreds of contributions from companies like Apple, Google, Intel, Microsoft, and Mozilla. This post is a deep dive into how the collaborative Speedometer project improved the benchmark’s measurements methods and test content.</p>\n<p>To recap history, in 2014, <a href=\"https://webkit.org/blog/3395/speedometer-benchmark-for-web-app-responsiveness/\">the WebKit team at Apple released the Speedometer browser benchmark</a>, designed to measure the responsiveness of websites and web apps.</p>\n<p>The original Speedometer simulated user interactions in web applications, driving TodoMVC sample apps written using different JavaScript frameworks to add, complete, and remove todo items. It was unlike other DOM or web app benchmarks publicly available at the time. These older benchmarks were mostly collections of micro-benchmarks, and didn’t reflect how DOM APIs were used in real web apps, or how individual APIs interacted with the rest of the web browser engine. Speedometer quickly became an important tool for performance measurement and tuning not just in WebKit but also in other browser engines.</p>\n<p>In 2018 the WebKit team, in collaboration with Google’s Chrome team, <a href=\"https://webkit.org/blog/8063/speedometer-2-0-a-benchmark-for-modern-web-app-responsiveness/\">released Speedometer 2.0</a>, updated to use the latest frameworks and libraries available at the time. The Speedometer benchmark has since gained even more popularity among browser engines as a guide for optimization, and among independent testers and reviewers to compare different devices, operating systems, and browsers.</p>\n<p>Today’s release of Speedometer 3.0 marks a major step forward in web browser performance testing. It improves the accuracy of measurement and measures the performance of a wide variety of contents.</p>\n<h2>Cross-Browser Collaboration</h2>\n<p>Speedometer 3.0’s release is a result of the collaboration among browser developers to improve the Web as a whole together. Much as <a href=\"https://webkit.org/blog/14955/the-web-just-gets-better-with-interop/\">Interop 2024</a> represents joint work to test and improve standards compliance, Speedometer 3.0 is a joint effort to test and improve browser performance.</p>\n<p>Where previous Speedometer versions were developed as part of the WebKit project, Speedometer 3.0 has been developed and released under a joint <a href=\"https://github.com/WebKit/Speedometer/blob/main/Governance.md\">multi-stakeholder governance model</a> including the three major engine browsers: Blink, Gecko, and WebKit, and the <a href=\"https://github.com/WebKit/Speedometer/\">repository</a> has received hundreds of open source contributions since <a href=\"https://twitter.com/webkit/status/1603435731375992833\">the original announcement in December 2022</a>. This collaboration better ensures fairness in measurement and workload composition. And together, the group created a <a href=\"https://github.com/WebKit/Speedometer/blob/main/README.md\">shared vision</a> for the benchmark.</p>\n<h2>Improved Test Harness</h2>\n<p>We’ve improved the way Speedometer measures runtime performance. Prior Speedometer versions measured the time to run a test script synchronously as “sync” time; and the time until a zero-delay timer scheduled at the end of “sync” work fires as “async” time, as shown in the following diagram:</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/test-harness-1-2.png\" alt=\"In Speedometer 2, async time was measured as between when a timer is scheduled at the end of sync time and when the timer fires. That sometimes captures layout and paint and other tasks running after synchronous script execution but before the timer fires.\" width=\"1256\" height=\"264\" srcset=\"https://webkit.org/wp-content/uploads/test-harness-1-2.png 1256w, https://webkit.org/wp-content/uploads/test-harness-1-2-300x63.png 300w, https://webkit.org/wp-content/uploads/test-harness-1-2-1024x215.png 1024w, https://webkit.org/wp-content/uploads/test-harness-1-2-768x161.png 768w\" /></figure>\n<p>However, this method sometimes misses important work that browser engines do in response to script-driven changes, because synchronous tasks and the zero-delay timer are scheduled without considering the timing of rendering updates. It also didn’t capture any work frameworks delay until the next <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\">requestAnimationFrame</a> (rAF) callback, a common technique in modern frameworks. The following diagram illustrates how important work could be missed by the time calculations.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/test-harness-2.png\" alt=\"In Speedometer 2, it was possible that requestAnimationFrame, layout, and paint to happen after the async timer had fired in some cases. In such cases, we fail to capture the time browser spends updating the rendering of a web page.\" width=\"1260\" height=\"268\" srcset=\"https://webkit.org/wp-content/uploads/test-harness-2.png 1260w, https://webkit.org/wp-content/uploads/test-harness-2-300x64.png 300w, https://webkit.org/wp-content/uploads/test-harness-2-1024x218.png 1024w, https://webkit.org/wp-content/uploads/test-harness-2-768x163.png 768w\" /></figure>\n<p>Speedometer 3.0 takes advantage of the fact that all browser engines have adopted the <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model\">HTML5 event loop</a> model for updating the webpage rendering. It measures test scripts within a requestAnimationFrame callback as “sync” time, and the time to fire zero-delay timer scheduled in a second requestAnimationFrame as “async” time:</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/test-harness-3.png\" alt=\"In Speedometer 3, we schedule two requestAnimationFrame callbacks. The first one runs and measures sync time, and the second one schedules a timer to measure the async time. Because browsers are expected to update the rendering after invoking requestAnimationFrame callback but before running any other tasks, we always capture the time browser spends updating the rendering of a web page.\" width=\"1262\" height=\"262\" srcset=\"https://webkit.org/wp-content/uploads/test-harness-3.png 1262w, https://webkit.org/wp-content/uploads/test-harness-3-300x62.png 300w, https://webkit.org/wp-content/uploads/test-harness-3-1024x213.png 1024w, https://webkit.org/wp-content/uploads/test-harness-3-768x159.png 768w\" /></figure>\n<p>Because the zero-delay timer is now scheduled in a second requestAnimationFrame, it’s guaranteed to be fired after all the zero-delay timers scheduled during the synchronous portion of the test had fired. Thanks to HTML5’s event loop processing model, browser engines update the rendering of web pages after all requestAnimationFrame are called before the next zero-delay timer fires. These changes greatly improved Speedometer’s ability to accurately measure the runtime of synchronous work and asynchronous work browsers do in response to script that handles user events.</p>\n<p>The test harness has also been rewritten to use modern JavaScript features like modules, native promises, let &amp; const, async &amp; await, and class syntax, which were not widely available at the time Speedometer 1.0 was first written.</p>\n<p>Like its precursors, Speedometer 3.0 sums up the runtime taken to simulate user actions such as adding todo items, completing them, and removing them per each workload, and computes the <a href=\"https://en.wikipedia.org/wiki/Geometric_mean\">geometric mean</a> of the totals across different workloads. The final score is calculated as the arithmetic mean of the reciprocal of the geometric mean:</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/test-harness-4.png\" alt=\"In Speedometer 3, each workload can have multiple sync and async times. The total time for all sync and async time is calcualted for each workload, and the score is calculated as the reciprocal of the geometric mean of the totals across workloads.\" width=\"1844\" height=\"836\" srcset=\"https://webkit.org/wp-content/uploads/test-harness-4.png 1844w, https://webkit.org/wp-content/uploads/test-harness-4-300x136.png 300w, https://webkit.org/wp-content/uploads/test-harness-4-1024x464.png 1024w, https://webkit.org/wp-content/uploads/test-harness-4-768x348.png 768w, https://webkit.org/wp-content/uploads/test-harness-4-1536x696.png 1536w\" /></figure>\n<h2>Adjustment to Score</h2>\n<p>Since Speedometer’s benchmark content was last updated in 2018, web browsers have gotten increasingly better at handling Speedometer content. Moreover, new hardware, such as Apple Silicon Macs, continues to push the boundary of what’s possible in computing. Where originally scores were scaled to be under 100, modern browsers now can score over 500 on the fastest devices. To make scores easier to compare and to make room for future improvements, we’ve adjusted the score so that a typical web browser will get a score in the 20-30 range to start out.</p>\n<h2>Updated UI Frameworks</h2>\n<p>Now let’s take a look at the test content in Speedometer 3. Like the past versions of Speedometer, version 3.0 includes TodoMVC-based todo apps that emulate adding, completing, and removing todo items. To better represent the modern Web, the most widely used JavaScript UI frameworks were identified from <a href=\"https://httparchive.org/\">the HTTP Archive</a> in March 2023:</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/frameworks-1b.png\" alt=\"In the order of popularity, React, Vue.js, React, Backbone.js, AngularJS, Next.js, Angular, Nuxt.js, lit-html, Knockout.js, Alpine.js, Marionette.js, Gatsby, Svelte, React Redux\" width=\"984\" height=\"585\" srcset=\"https://webkit.org/wp-content/uploads/frameworks-1b.png 984w, https://webkit.org/wp-content/uploads/frameworks-1b-300x178.png 300w, https://webkit.org/wp-content/uploads/frameworks-1b-768x457.png 768w\" /></figure>\n<p>The monthly downloads in NPM was also taken into account to find frameworks with high momentum:</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/frameworks-2b.png\" alt=\"In the order of NPM monthly downloads, React, React Redux, Next.js, Vue.js, Angular, Preact, lit-html, Backbone.js, Nuxt.js, Svelte, AngularJS, Gatsby, Alpine.js, Knockout.js, Marionette.js\" width=\"984\" height=\"575\" srcset=\"https://webkit.org/wp-content/uploads/frameworks-2b.png 984w, https://webkit.org/wp-content/uploads/frameworks-2b-300x175.png 300w, https://webkit.org/wp-content/uploads/frameworks-2b-768x449.png 768w\" /></figure>\n<p>Based on these data points, we’ve included the following JavaScript frameworks in our todo apps: <a href=\"https://angular.io/\">Angular</a>, <a href=\"https://backbonejs.org/\">Backbone</a>, <a href=\"https://jquery.com/\">jQuery</a>, <a href=\"https://lit.dev/\">Lit</a>, <a href=\"https://preactjs.com/\">Preact</a>, <a href=\"https://react.dev/\">React</a>, React+<a href=\"https://redux.js.org/\">Redux</a>, <a href=\"https://svelte.dev/\">Svelte</a>, and <a href=\"https://vuejs.org/\">Vue</a>. For each framework, the most commonly used version at the time was picked. Todo implementations written in vanilla JavaScript using ES5, ES6, and web components are also included.</p>\n<h2>Complex DOM Versions</h2>\n<p>In addition, Speedometer 3.0 includes “complex DOM” versions of some of the TodoMVC applications. In these complex DOM versions, each todo app is embedded inside a UI structure which mimics a web application with many deeply nested DOM nodes and plenty of CSS rules. Even though the benchmark still emulates the same set of operations, doing so in the context of more DOM elements and CSS rules adds work and captures additional performance bottlenecks.</p>\n<p>In order to ensure the variety of performance scenarios to be tested, Speedometer 3.0 includes 6 simple DOM todo applications and 6 complex DOM todo applications.</p>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Speedometer-3-to-do-app.png\" alt=\"Complex DOM workloads has ribbon menus, side bar tree view, search field, and other complex UI elements surrounding the todo app.\" width=\"1922\" height=\"1418\" srcset=\"https://webkit.org/wp-content/uploads/Speedometer-3-to-do-app.png 1922w, https://webkit.org/wp-content/uploads/Speedometer-3-to-do-app-300x221.png 300w, https://webkit.org/wp-content/uploads/Speedometer-3-to-do-app-1024x755.png 1024w, https://webkit.org/wp-content/uploads/Speedometer-3-to-do-app-768x567.png 768w, https://webkit.org/wp-content/uploads/Speedometer-3-to-do-app-1536x1133.png 1536w\" /></p>\n<h2>Broader Content</h2>\n<p>Together, these changes to todo apps dramatically improved the coverage of the benchmark. But Speedometer 3.0 takes it a step further and includes entirely new kinds of applications.</p>\n<p>Speedometer 3.0 includes two test apps that mimic typical news sites, built using the popular single page application frameworks <a href=\"https://nextjs.org/\">Next.js</a> and <a href=\"https://nuxt.com/\">Nuxt</a>. It emulates user actions such as clicking on menu items and navigating to another page in the single page app setup.</p>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Speedometer-3-news-app.png\" alt=\"News sites workload mimics a popular news site with navigation menu, hero images, headlines, and a summary of articles.\" width=\"1884\" height=\"1394\" srcset=\"https://webkit.org/wp-content/uploads/Speedometer-3-news-app.png 1884w, https://webkit.org/wp-content/uploads/Speedometer-3-news-app-300x222.png 300w, https://webkit.org/wp-content/uploads/Speedometer-3-news-app-1024x758.png 1024w, https://webkit.org/wp-content/uploads/Speedometer-3-news-app-768x568.png 768w, https://webkit.org/wp-content/uploads/Speedometer-3-news-app-1536x1137.png 1536w\" /></p>\n<p>Speedometer 3.0 also includes four charting applications based on <a href=\"https://observablehq.com/plot/\">Observable Plot</a>, <a href=\"https://www.chartjs.org/\">chart.js</a>, <a href=\"http://rrag.github.io/react-stockcharts/\">React stockcharts</a>, and <a href=\"https://perf.webkit.org/v3/\">WebKit’s performance dashboards</a>. Observable Plot and React Stockcharts are based on <a href=\"https://d3js.org/\">D3</a> and test manipulating SVG-based graphics. Chart.js and WebKit’s performance dashboards test drawing canvas-based graphics.</p>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Speedometer-3-chart-app.png\" alt=\"Charting workloads draw bar graphs of the number of airports in each U.S. state for example.\" width=\"1866\" height=\"1384\" srcset=\"https://webkit.org/wp-content/uploads/Speedometer-3-chart-app.png 1866w, https://webkit.org/wp-content/uploads/Speedometer-3-chart-app-300x223.png 300w, https://webkit.org/wp-content/uploads/Speedometer-3-chart-app-1024x759.png 1024w, https://webkit.org/wp-content/uploads/Speedometer-3-chart-app-768x570.png 768w, https://webkit.org/wp-content/uploads/Speedometer-3-chart-app-1536x1139.png 1536w\" /></p>\n<p>Finally, Speedometer 3.0 has added two text editing applications: a JavaScript code editor built with <a href=\"https://codemirror.net/\">CodeMirror</a> and a WYSIWYG editor built with <a href=\"https://tiptap.dev/\">TipTap</a>. In both scenarios, it emulates the steps to create a new editable region, loading a large amount of text, and syntax highlighting or boldening text:</p>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Speedometer-3-code-app.png\" alt=\"CodeMirror workload, for example, loads React's codebase and enables syntax highlighting\" width=\"1870\" height=\"1386\" srcset=\"https://webkit.org/wp-content/uploads/Speedometer-3-code-app.png 1870w, https://webkit.org/wp-content/uploads/Speedometer-3-code-app-300x222.png 300w, https://webkit.org/wp-content/uploads/Speedometer-3-code-app-1024x759.png 1024w, https://webkit.org/wp-content/uploads/Speedometer-3-code-app-768x569.png 768w, https://webkit.org/wp-content/uploads/Speedometer-3-code-app-1536x1138.png 1536w\" /></p>\n<p>The addition of these new applications dramatically broadens the scope of what Speedometer 3.0 measures, and provide new opportunities for browser engines to optimize a broad spectrum of features like JavaScript, style, layout, graphics, and DOM.</p>\n<h2>Future Work</h2>\n<p>Today marks a remarkable milestone for the Web platform. Speedometer 3.0 sets a whole new standard for measuring web browser performance. As browser developers optimize their engines, this will expand the horizon of what Web developers can achieve in the years to come. Because the goal of the Speedometer benchmark is to reflect the real-world Web as much as possible, we’re expecting this benchmark to evolve over time. We’ll be regularly updating the list of frameworks to be tested, and periodically updating the tested framework’s versions to reflect the real world usage. You can<br />\n<a href=\"https://browserbench.org/Speedometer3.0/\">try Speedometer 3 benchmark</a> on <a href=\"https://browserbench.org/\">browserbench.org</a>. If you have any feedback or questions, feel free to file issues on <a href=\"https://github.com/WebKit/Speedometer\">Github</a>.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"7512f942711afc047e6e5a28163d6d2fff44eff19abe8e3e03f1b621d3218eca","category":"Tech"}