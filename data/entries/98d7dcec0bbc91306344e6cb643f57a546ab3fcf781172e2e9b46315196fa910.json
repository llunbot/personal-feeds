{"title":"Popular DevTools Tips","link":"https://smashingmagazine.com/2023/06/popular-devtools-tips/","date":1687867200000,"content":"<p>When it comes to browser DevTools, we all have our own preferences and personal workflows, and we pride ourselves in knowing that “one little trick” that makes our debugging lives easier.</p>\n<p>But also — and I know this from having worked on DevTools at Mozilla and Microsoft for the past ten years — most people tend to use the same three or four DevTools features, leaving the rest unused. This is unfortunate as there are dozens of panels and hundreds of features available in DevTools across all browsers, and even the less popular ones can be quite useful when you need them.</p>\n<p>As it turns out, I’ve maintained the <a href=\"https://devtoolstips.org/\">DevTools Tips website</a> for the past two years now. More and more tips get added over time, and traffic keeps growing. I recently started tracking the most popular tips that people are accessing on the site, and I thought it would be interesting to share some of this data with you!</p>\n<p>So, here are the top 15 most popular DevTools tips from the website.</p>\n<p>If there are other tips that you love and that make you more productive, consider sharing them with our community in the comments section!</p>\n<p>Let’s count down, starting with…</p>\n15: Zoom DevTools\n<p>If you’re like me, you may find the text and buttons in DevTools too small to use comfortably. I know I’m not alone here, judging by the number of people who ask our team how to make them bigger!</p>\n<p>Well, it turns out you can actually zoom into the DevTools UI.</p>\n<p>DevTools’ user interface is built with HTML, CSS, and JavaScript, which means that it’s rendered as web content by the browser. And just like any other web content in browsers, it can be zoomed in or out by using the Ctrl+ and Ctrl- keyboard shortcuts (or Cmd+ and Cmd- on macOS).</p>\n<p>So, if you find the text in DevTools too small to read, click anywhere in DevTools to make sure the focus is there, and then press Ctrl+ (or Cmd+ on macOS).</p>\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/1-devtools-list-fonts.png\" /></p>\n<p>Chromium-based browsers such as Chrome, Edge, Brave, or Opera can also display the font used by an element that contains the text:</p>\n<ul>\n<li>Select an element that only contains text children.</li>\n<li>Open the <strong>Computed</strong> tab in the sidebar of the <strong>Elements</strong> tool.</li>\n<li>Scroll down to the bottom of the tab.</li>\n<li>The rendered fonts are displayed.</li>\n</ul>\n<p><strong>Note</strong>: <em>To learn more, see “<a href=\"https://devtoolstips.org/tips/en/list-used-fonts/\">List the fonts used on a page or an element</a>.”</em></p>\n12: Measure Arbitrary Distances On A Page\n<p>Sometimes it can be useful to quickly measure the size of an area on a webpage or the distance between two things. You can, of course, use DevTools to get the size of any given element. But sometimes, you need to measure an arbitrary distance that may not match any element on the page.</p>\n<p>When this happens, one nice way is to use Firefox’s measurement tool:</p>\n<ol>\n<li>If you haven’t done so already, enable the tool. This only needs to be done once: Open DevTools, go into the <strong>Settings</strong> panel by pressing F1 and, in the <strong>Available Toolbox Buttons</strong>, check the <strong>Measure a portion of the page</strong> option.</li>\n<li>Now, on any page, click the new <strong>Measure a portion of the page</strong> icon in the toolbar.</li>\n<li>Click and drag with the mouse to measure distances and areas.</li>\n</ol>\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/2-measure-arbitrary-distances.png\" /></p>\n<p><strong>Note</strong>: <em>To learn more, see “<a href=\"https://devtoolstips.org/tips/en/measure-distances/\">Measure arbitrary distances in the page</a>.”</em></p>\n11: Detect Unused Code\n<p>One way to make a webpage appear fast to your users is to make sure it only loads the JavaScript and CSS dependencies it truly needs.</p>\n<p>This may seem obvious, but today’s complex web apps often load huge bundles of code, even when only a small portion is needed to render the first page.</p>\n<p>In Chromium-based browsers, you can use the <strong>Coverage</strong> tool to identify which parts of your code are unused. Here is how:</p>\n<ol>\n<li>Open the <strong>Coverage</strong> tool. You can use the Command Menu as a shortcut: press Ctrl+Shift+P (or Cmd+Shift+P on macOS), type “coverage” and then press Enter.)</li>\n<li>Click <strong>Start instrumenting coverage and refresh the page</strong>.</li>\n<li>Wait for the page to reload and for the coverage report to appear.</li>\n<li>Click any of the reported files to open them in the <strong>Sources</strong> tool.</li>\n</ol>\n<p>The file appears in the tool along with blue and red bars that indicate whether a line of code is used or unused, respectively.</p>\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/3-coverage-tool-unused-code.png\" /></p>\n<p><strong>Note</strong>: <em>To learn more, see “<a href=\"https://devtoolstips.org/tips/en/detect-unused-code/\">Detect unused CSS and JavaScript code</a>.”</em></p>\n10: Change The Playback Rate Of A Video\n<p>Usually, when a video appears on a webpage, the video player that displays it also provides buttons to control its playback, including a way to speed it up or slow it down. But that’s not always the case.</p>\n<p>In cases when the webpage makes it difficult or impossible to control a video, you can use DevTools to control it via JavaScript istead.</p>\n<ol>\n<li>Open DevTools.</li>\n<li>Select the <code>&lt;video&gt;</code> element in the <strong>Elements</strong> tool (called <strong>Inspector</strong> in Firefox).</li>\n<li>Open the <strong>Console</strong> tool.</li>\n<li>Type the following: <code>$0.playbackRate = 2;</code> and press Enter.</li>\n</ol>\n<p>The <a href=\"https://devtoolstips.org/tips/en/get-recently-selected-dom-nodes-in-console/\"><code>$0</code> expression</a> is a shortcut that refers to whatever element is currently selected in DevTools; in this case, it refers to the <code>&lt;video&gt;</code> HTML element.</p>\n<p>By using the <code>playbackRate</code> property of the <code>&lt;video&gt;</code> element, you can speed up or slow down the video. Note that you could also use any of the other <code>&lt;video&gt;</code> element properties or methods, such as:</p>\n<ul>\n<li><code>$0.pause()</code> to pause the video;</li>\n<li><code>$0.play()</code> to resume playing the video;</li>\n<li><code>$0.loop = true</code> to repeat the video in a loop.</li>\n</ul>\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/4-playback-rate-video.png\" /></p>\n<p><strong>Note</strong>: <em>To learn more, see “<a href=\"https://devtoolstips.org/tips/en/change-video-playback-rate/\">Speed up or slow down a video</a>.”</em></p>\n9: Use DevTools In Another Language\n<p>If, like me, English isn’t your primary language, using DevTools in English might make things harder for you.</p>\n<p>If that’s your case, know that you can actually use a translated version of DevTools that either matches your operating system, your browser, or a language of your choice.</p>\n<p>The procedure differs per browser.</p>\n<p>In Safari, both the browser and Web Inspector (which is what DevTools is called in Safari) inherit the language of the operating system. So if you want to use a different language for DevTools, you’ll need to set it globally by going into <strong>System preferences</strong> → <strong>Language &amp; Region</strong> → <strong>Apps</strong>.</p>\n<p>In Firefox, DevTools always matches the language of the browser. So, if you want to use DevTools in, say, French, then download Firefox in French.</p>\n<p>Finally, in Chrome or Edge, you can choose to either match the language of the browser or set a different language just for DevTools. </p>\n<p>To make your choice:</p>\n<ol>\n<li>Open DevTools and press F1 to open the <strong>Settings</strong>.</li>\n<li>In the <strong>Language</strong> drop-down, choose either <strong>Browser UI language</strong> to match the browser language or choose another language from the list.</li>\n</ol>\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/5-devtools-different-languages.png\" /></p>\n<p><strong>Note</strong>: <em>To learn more, see “<a href=\"https://devtoolstips.org/tips/en/use-another-language/\">Use DevTools in another language</a>.”</em></p>\n8: Disable Event Listeners\n<p>Event listeners can sometimes get in the way of debugging a webpage. If you’re investigating a particular issue, but every time you move your mouse or use the keyboard, unrelated event listeners are triggered, this could make it harder to focus on your task.</p>\n<p>A simple way to disable an event listener is by selecting the element it applies to in the <strong>Elements</strong> tool (or <strong>Inspector</strong> in Firefox). Once you’ve found and selected the element, do either of the following:</p>\n<ul>\n<li>In Firefox, click the <strong>event</strong> badge next to the element, and in the popup that appears, uncheck the listeners you want to disable.</li>\n<li>In Chrome or Edge, click the <strong>Event Listeners</strong> tab in the sidebar panel, find the listener you want to remove, and click <strong>Remove</strong>.</li>\n</ul>\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/6-devtools-disable-event-listeners.png\" /></p>\n<p><strong>Note</strong>: <em>To learn more, see “<a href=\"https://devtoolstips.org/tips/en/disable-event-listeners/\">Remove or disable event listeners</a>.”</em></p>\n7: View Console Logs On Non-Safari Browsers On iOS\n<p>As you might know, Safari isn’t the only browser you can install and use on an iOS device. Firefox, Chrome, Edge, and others can also be used. Technically, they all run on the same underlying browser rendering engine, WebKit, so a website should more or less look the same in all of these browsers in iOS.</p>\n<p>However, it’s possible to have bugs on other browsers that don’t replicate in Safari. This can be quite tricky to investigate. While it’s possible to debug Safari on an iOS device by attaching the device to a Mac with a USB cable, it’s impossible to debug non-Safari browsers.</p>\n<p>Thankfully, there is a way to at least see your console logs in Chrome and Edge (and possibly other Chromium-based browsers) when using iOS:</p>\n<ol>\n<li>Open Chrome or Edge on your iOS device and go to the special <strong><code>about:inspect</code></strong> page.</li>\n<li>Click <strong>Start Logging</strong>.</li>\n<li>Keep this tab open and then open another one.</li>\n<li>In the new tab, go to the page you’re trying to debug.</li>\n<li>Return to the previous tab. Your console logs should now be displayed.</li>\n</ol>\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/7-console-logs-non-safari-browsers.png\" /></p>\n<p><strong>Note</strong>: <em>To learn more, see “<a href=\"https://devtoolstips.org/tips/en/view-logs-for-other-browsers-on-ios/\">View console logs from non-Safari browsers on an iPhone</a>.”</em></p>\n6: Copy Element Styles\n<p>Sometimes it’s useful to extract a single element from a webpage, maybe to test it in isolation. To do this, you’ll first need to extract the element’s HTML code via the <strong>Elements</strong> tool by right-clicking the element and choosing <strong>Copy</strong> → <strong>Copy outer HTML</strong>.</p>\n<p>Extracting the element’s styles, however, is a bit more difficult as it involves going over all of the CSS rules that apply to the element.</p>\n<p>Chrome, Edge, and other Chromium-based browsers make this step a lot faster:</p>\n<ol>\n<li>In the <strong>Elements</strong> tool, select the element you want to copy styles from.</li>\n<li>Right-click the selected element.</li>\n<li>Click <strong>Copy</strong> → <strong>Copy styles</strong>.</li>\n<li>Paste the result in your text editor.</li>\n</ol>\n<p>You now have all the styles that apply to this element, including inherited styles and custom properties, in a single list.</p>\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/8-devtools-copy-element-styles.png\" /></p>\n<p><strong>Note</strong>: <em>To learn more, see “<a href=\"https://devtoolstips.org/tips/en/copy-element-styles/\">Copy an element’s styles</a>.”</em></p>\n5: Download All Images On The Page\n<p>This nice tip isn’t specific to any browser and can be run anywhere as long as you can execute JavaScript. If you want to download all of the images that are on a webpage, open the <strong>Console</strong> tool, paste the following code, and press Enter:</p>\n<pre><code>$$('img').forEach(async (img) =&gt; {\n try {\n   const src = img.src;\n   // Fetch the image as a blob.\n   const fetchResponse = await fetch(src);\n   const blob = await fetchResponse.blob();\n   const mimeType = blob.type;\n   // Figure out a name for it from the src and the mime-type.\n   const start = src.lastIndexOf('/') + 1;\n   const end = src.indexOf('.', start);\n   let name = src.substring(start, end === -1 ? undefined : end);\n   name = name.replace(/[^a-zA-Z0-9]+/g, '-');\n   name += '.' + mimeType.substring(mimeType.lastIndexOf('/') + 1);\n   // Download the blob using a &lt;a&gt; element.\n   const a = document.createElement('a');\n   a.setAttribute('href', URL.createObjectURL(blob));\n   a.setAttribute('download', name);\n   a.click();\n } catch (e) {}\n});\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/9-devtools-download-images.png\" /></p>\n<p>Note that this might not always succeed: the CSP policies in place on the web page may cause some of the images to fail to download.</p>\n<p>If you happen to use this technique often, you might want to turn this into a <a href=\"https://devtoolstips.org/tips/en/use-scripts-as-snippets/\">reusable snippet</a> of code by pasting it into the <strong>Snippets</strong> panel, which can be found in the left sidebar of the <strong>Sources</strong> tool in Chromium-based browsers.</p>\n<p>In Firefox, you can also press Ctrl+I on any webpage to open <strong>Page Info</strong>, then go to <strong>Media</strong> and select <strong>Save As</strong> to download all the images.</p>\n<p><strong>Note</strong>: <em>To learn more, see “<a href=\"https://devtoolstips.org/tips/en/download-all-images/\">Download all images from the page</a>.”</em></p>\n4: Visualize A Page In 3D\n<p>The HTML and CSS code we write to create webpages gets parsed, interpreted, and transformed by the browser, which turns it into various tree-like data structures like the DOM, compositing layers, or the stacking context tree.</p>\n<p>While these data structures are mostly internal in-memory representations of a running webpage, it can sometimes be helpful to explore them and make sure things work as intended.</p>\n<p>A three-dimensional representation of these structures can help see things in a way that other representations can’t. Plus, let’s admit it, it’s cool!</p>\n<p>Edge is the only browser that provides a tool dedicated to visualizing webpages in 3D in a variety of ways.</p>\n<ol>\n<li>The easiest way to open it is by using the <strong>Command Menu</strong>. Press Ctrl+Shift+P (or Cmd+Shift+P on macOS), type “3D” and then press Enter.</li>\n<li>In the <strong>3D View</strong> tool, choose between the three different modes: <strong>Z-Index</strong>, <strong>DOM</strong>, and <strong>Composited Layers</strong>.</li>\n<li>Use your mouse cursor to pan, rotate, or zoom the 3D scene.</li>\n</ol>\n<p>The <strong>Z-Index</strong> mode can be helpful to know which elements are stacking contexts and which are positioned on the z-axis.</p>\n<p>The <strong>DOM</strong> mode can be used to easily see how deep your DOM tree is or find elements that are <a href=\"https://devtoolstips.org/tips/en/spot-out-of-viewport-elements/\">outside of the viewport</a>.</p>\n<p>The <strong>Composited Layers</strong> mode shows all the different layers the browser rendering engine creates to paint the page as quickly as possible.</p>\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/10-devtools-visualize-page-3D.png\" /></p>\n<p>Consider that Safari and Chrome also have a <strong>Layers</strong> tool that shows composited layers.</p>\n<p><strong>Note</strong>: <em>To learn more, see “<a href=\"https://devtoolstips.org/tips/en/see-the-page-in-3d/\">See the page in 3D</a>.”</em></p>\n3: Disable Abusive Debugger Statements\n<p>Some websites aren’t very nice to us web developers. While they seem normal at first, as soon as you open DevTools, they immediately get stuck and pause at a JavaScript breakpoint, making it very hard to inspect the page!</p>\n<p>These websites achieve this by adding a <code>debugger</code> statement in their code. This statement has no effect as long as DevTools is closed, but as soon as you open it, DevTools pauses the website’s main thread.</p>\n<p>If you ever find yourself in this situation, here is a way to get around it:</p>\n<ol>\n<li>Open the <strong>Sources</strong> tool (called <strong>Debugger</strong> in Firefox).</li>\n<li>Find the line where the debugger statement is. That shouldn’t be hard since the debugger is currently paused there, so it should be visible right away.</li>\n<li>Right-click on the line number next to this line.</li>\n<li>In the context menu, choose <strong>Never pause here</strong>.</li>\n<li>Refresh the page.</li>\n</ol>\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/11-disable-abusive-debugger-statements.png\" /></p>\n<p><strong>Note</strong>: <em>To learn more, see “<a href=\"https://devtoolstips.org/tips/en/disable-abusive-debugger-statement/\">Disable abusive debugger statements that prevent inspecting websites</a>.”</em></p>\n2: Edit And Resend Network Requests\n<p>When working on your server-side logic or API, it may be useful to send a request over and over again without having to reload the entire client-side webpage and interact with it each time. Sometimes you just need to tweak a couple of request parameters to test something.</p>\n<p>One of the easiest ways to do this is by using Edge’s <strong>Network Console</strong> tool or Firefox’s <strong>Edit and Resend</strong> feature of the <strong>Network</strong> tool. Both of them allow you to start from an existing request, modify it, and resend it.</p>\n<p>In Firefox:</p>\n<ul>\n<li>Open the <strong>Network</strong> tool.</li>\n<li>Right-click the network request you want to edit and then click <strong>Edit and Resend</strong>.</li>\n<li>A new sidebar panel opens up, which lets you change things like the URL, the method, the request parameters, and even the body.</li>\n<li>Change anything you need and click <strong>Send</strong>.</li>\n</ul>\n<p>In Edge:</p>\n<ul>\n<li>First, enable the <strong>Network Console</strong> tool by going into the <strong>Settings</strong> panel (press F1) → <strong>Experiments</strong> → <strong>Enable Network Console</strong>.</li>\n<li>Then, in the <strong>Network</strong> tool, find the request you want to edit, right-click it and then click <strong>Edit and Resend</strong>.</li>\n<li>The <strong>Network Console</strong> tool appears, which lets you change the request just like in Firefox.</li>\n<li>Make the changes you need, and then click <strong>Send</strong>.</li>\n</ul>\n<p>Here is what the feature looks like in Firefox:</p>\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/12-edit-resend-network-requests.png\" /></p>\n<p><strong>Note</strong>: <em>To learn more, see “<a href=\"https://devtoolstips.org/tips/en/edit-and-resend-network-requests/\">Edit and resend faulty network requests to debug them</a>.”</em></p>\n<p>If you need to resend a request without editing it first, you can do so too. (See: <a href=\"https://devtoolstips.org/tips/en/replay-xhr/\">Replay a XHR request</a>)</p>\n<p>And the honor of being the Number One most popular DevTools tip in this roundup goes to… 🥁</p>\n1: Simulate Devices\n<p>This is, by far, the most widely viewed DevTools tip on my website. I’m not sure why exactly, but I have theories:</p>\n<ul>\n<li>Cross-browser and cross-device testing remain, to this day, one of the most important pain points that web developers face, and it’s nice to be able to simulate other devices from the comfort of your development browser.</li>\n<li>People might be using it to achieve non-dev tasks. For example, people use it to post photos on Instagram from their laptops or desktop computers!</li>\n</ul>\n<p>It’s important to realize, though, that DevTools can’t simulate what your website will look like on another device. Underneath it, it is all still the same browser rendering engine. So, for example, when you simulate an iPhone by using Firefox’s <strong>Responsive Design Mode</strong>, the page still gets rendered by Firefox’s rendering engine, Gecko, rather than Safari’s rendering engine, WebKit.</p>\n<p>Always test on actual browsers and actual devices if you don’t want your users to stumble upon bugs you could have caught.</p>\n<p>That being said, </p>\n<p>Simulating devices in DevTools is very useful for testing how a layout works at different screen sizes and device pixel ratios. You can even use it to simulate touch inputs and other user agent strings.</p>\n<p>Here are the easiest ways to simulate devices per browser:</p>\n<ul>\n<li>In Safari, press Ctrl+Cmd+R, or click <strong>Develop</strong> in the menu bar and then click <strong>Enter Responsive Design Mode</strong>.</li>\n<li>In Firefox, press Ctrl+Shift+M (or Cmd+Shift+M), or use the browser menu → <strong>More tools</strong> → <strong>Responsive design mode</strong>.</li>\n<li>In Chrome or Edge, open DevTools first, then press Ctrl+Shift+M (or Cmd+Shift+M), or click the <strong>Device Toolbar</strong> icon.</li>\n</ul>\n<p>Here is how simulating devices looks in Safari:</p>\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/13-simulating-devices-safari.png\" /></p>\n<p><strong>Note</strong>: <em>To learn more, see “<a href=\"https://devtoolstips.org/tips/en/simulate-devices/\">Simulate different devices and screen sizes</a>.”</em></p>\n<p>Finally, if you find yourself simulating screen sizes often, you might be interested in using <a href=\"https://polypane.app/\">Polypane</a>. Polypane is a great development browser that lets you simulate multiple synchronized viewports at the same time, so you can see how your website renders at different sizes at the same time.</p>\n<p><img src=\"https://files.smashing.media/articles/popular-devtools-tips/14-devtools-polypane-browser.png\" /></p>\n<p>Polypane comes with its own set of unique features, which you can also find on <a href=\"https://devtoolstips.org/browser/polypane/\">DevTools Tips</a>.</p>\nConclusion\n<p>I’m hoping you can see now that DevTools is very versatile and can be used to achieve as many tasks as your imagination allows. Whatever your debugging use case is, <a href=\"https://devtoolstips.org/tips/en/discover-all-tools/\">there’s probably a tool</a> that’s right for the job. And if there isn’t, you may be able to find out what you need to know by running JavaScript in the <strong>Console</strong>!</p>\n<p>If you’ve discovered cool little tips that come in handy in specific situations, please share them in the comments section, as they may be very useful to others too.</p>\n<h3>Further Reading on Smashing Magazine</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/03/css-auditing-tools/\">CSS Auditing Tools</a>,” Iris Lješnjanin</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/02/useful-chrome-firefox-devtools-tips-shortcuts/\">DevTools Debugging Tips And Shortcuts (Chrome, Firefox, Edge)</a>,” Vitaly Friedman</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2020/08/accessibility-chrome-devtools/\">Accessibility In Chrome DevTools</a>,” Umar Hansa</li>\n<li>“<a href=\"https://www.smashingmagazine.com/make-life-easier-when-using-git/\">How To Make Life Easier When Using Git</a>,” Shane Hudson</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"98d7dcec0bbc91306344e6cb643f57a546ab3fcf781172e2e9b46315196fa910","category":"Tech"}