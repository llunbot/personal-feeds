{"title":"แนะนำการใช้งาน tRPC","link":"https://www.somkiat.cc/introduction-to-trpc/","date":1720372237000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/trpc-01-150x150.png\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/07/trpc-01-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2024/07/trpc-01-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/07/trpc-01.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/trpc-01-1024x501.png\" width=\"615\" height=\"300\" /></a></figure>\n\n\n\n<p>จากการแบ่งปันเรื่องการพัฒนาระบบงานด้วย TypeScript <br />ทั้งส่วนของ frontend และ backend นั้น<br />โดยปกติจะติดต่อสื่อสารผ่าน HTTP <br />ซึ่งมักจะเป็น RESTful APIs นั่นเอง<br />แต่มักจะมีปัญหาเรื่องของการเปลี่ยนแปลง<br />นั่นคือเมื่อฝั่งของ backend ทำการเปลี่ยนแปลงรูปแบบของ request หรือ response แล้ว<br />มักจะส่งผลกระทบต่อฝั่ง frontend เสมอ ถ้าไม่ทำการแจ้งการเปลี่ยนแปลง<br />จึงแนะนำอีกรูปแบบคือ <strong><a href=\"https://trpc.io/\" target=\"_blank\">tRPC (TypeScript Remote Procedure Call)</a></strong></p>\n\n\n\n<span></span>\n\n\n\n<p>โดยที่ tRPC นั้นเป็นหนึ่งใน implmentation ของ RPC<br />ซึ่งถูกออกแบบมาสำหรับ TypeScript โดยเฉพาะเท่านั้น<br />และทั้ง frontend และ backend ต้อง share code ร่วมกัน หรืออยู่ใน <strong>Monorepo</strong></p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/07/monorepo-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/monorepo-01-1024x346.jpg\" width=\"530\" height=\"178\" /></a></figure>\n\n\n\n<p>ขั้นตอนการใช้งาน tRPC ในการพัฒนาระบบเป็นดังนี้</p>\n\n\n\n<p><strong>ขั้นตอนที่ 1 ทำการสร้าง tRPC server ขึ้นมา</strong></p>\n\n\n\n<p>เพื่อสร้าง procudure สำหรับการใช้งานจากฝั่งของ client ขึ้นมา<br />โดยปกติจะกำหนดเป็น HTTP request/response ของ RESTful API<br />แต่ใน tRPC นั้นจะกำหนดเป็นชื่อ procedure แบบ public<br />จากนั้นกำหนด data type ของ procedure ต่าง  ๆ<br />ซึ่งจะใช้ <a href=\"https://www.npmjs.com/package/zod\" target=\"_blank\">package zod</a> สำหรับตรวจสอบโครงสร้างของข้อมูล</p>\n\n\n\n<p>ตัวอย่างของ code</p>\n\n\n\n[gist id=\"c670cb4478219698ce305e15a55c00b4\" file=\"app-router.ts\"]\n\n\n\n<p><strong>คำอธิบาย</strong></p>\n\n\n\n<ul>\n<li>ในแต่ละ procedure นั้น ถ้าต้องการดึงข้อมูลจะใช้ query ส่วนการ update ข้อมูลใช้ mutation</li>\n\n\n\n<li>ทำการจัดกลุ่มของ procedure ต่าง ๆ ด้วย AppRouter</li>\n\n\n\n<li>การตรวขสอบข้อมูลหรือ validation จะทำในการเรียกใช้งานจากฝั่งของ client ดังนั้นถ้ามีการเปลี่ยนแปลงฝั่ง server แล้ว ทาง client จะรู้ผลกระทบทันที</li>\n</ul>\n\n\n\n<p><strong>ขั้นตอนที่ 2 ทำการพัฒนาส่วนของ Server ด้วย package express เพื่อให้ client ใช้งาน</strong></p>\n\n\n\n<p>ทำการ expose AppRouter ที่สร้างไว้ให้สามารถเข้าถึงผ่าน HTTP protocol</p>\n\n\n\n[gist id=\"c670cb4478219698ce305e15a55c00b4\" file=\"server.ts\"]\n\n\n\n<p><strong>ขั้นตอนที่ 3 สร้างส่วนของ Client เพื่อเรียกใช้งาน</strong></p>\n\n\n\n[gist id=\"c670cb4478219698ce305e15a55c00b4\" file=\"client.ts\"]\n\n\n\n<p>เพียงเท่านี้ก็สามารถใช้งาน tRPC แบบง่าย ๆ ได้แล้ว<br />หรือสามารถเรียกผ่าน curl ได้ดังนี้</p>\n\n\n\n[gist id=\"c670cb4478219698ce305e15a55c00b4\" file=\"1.txt\"]\n\n\n\n<p><br />ขอให้สนุกกับการ coding ครับ</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"0fcc1347408396e64c6b7eedc2ffec40063ab443d9708056dd748ab982697a8f","category":"Thai"}