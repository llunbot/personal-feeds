{"title":"Target CLI: The context switcher for HashiCorp tools","link":"https://www.hashicorp.com/blog/target-cli-the-context-switcher-for-hashicorp-tools","date":1704733200000,"content":"<p>As an engineer, you may be required to interact with multiple HashiCorp Vault, Nomad, Consul, and Boundary clusters, including dev, staging, and production clusters for each tool. Using each product’s respective CLI tools, engineers have to set environment variables to switch between these clusters when running commands. Remembering the connectivity details of each cluster can involve setting multiple environment variables, which is cumbersome, time consuming, and sometimes error prone.</p>\n\n<p>To address these issues, I developed <a href=\"https://github.com/devops-rob/target-cli\">Target CLI</a> to store these details in context profiles, which engineers can easily switch between. Currently, Target CLI  supports HashiCorp <a href=\"https://www.vaultproject.io\">Vault</a>, <a href=\"https://www.boundaryproject.io\">Boundary</a>, <a href=\"https://www.consul.io\">Consul</a>, <a href=\"https://www.nomadproject.io\">Nomad</a>, and <a href=\"https://www.terraform.io\">Terraform</a>. Support for all the tools except Terraform is based on connecting to and interacting with clusters. Support for Terraform is based on groupings of Terraform configurations that represent a single environment.</p>\n\n<h2>Installing Target CLI</h2>\n\n<p>Target CLI can be installed on Mac and Linux. We plan to add Windows support in the near future. Here are the instructions for installing Target CLI on various platforms:</p>\n\n<h3>MacOS Brew</h3>\n\n<p>Run this command to install Target CLI using <a href=\"https://brew.sh/\">brew</a>.:</p>\n\n<pre><code>brew tap devops-rob/tap &amp;&amp; \\\n  brew install target\n</code></pre>\n\n<h3>MacOS and Linux quick install script</h3>\n\n<p>You can also use a shell script to install Target CLI on both Mac and Linux distributions. To execute the script, run this command in your terminal:</p>\n\n<pre><code>curl https://raw.githubusercontent.com/devops-rob/target-cli/main/install.sh | bash\n</code></pre>\n\n<h3>Testing your installation</h3>\n\n<p>No matter which installation method you chose, Target CLI should be installed and available on your <code>PATH</code>. To test this, type the following command in your terminal:</p>\n\n<pre><code>target\n</code></pre>\n\n<p>If Target CLI is installed correctly, you should see this output:</p>\n\n<pre><code>target\n</code></pre>\n\n<p>Target CLI allows users to configure and switch between different context profiles for their Vault, Nomad, Consul, Terraform, and Boundary targets by setting tool-specific environment variables.</p>\n\n<p>A context profile contains connection details for a given target, as shown below.</p>\n\n<p><strong>Example</strong>: \nA vault-dev context profile could point to:\n<code>https://example-dev-vault.com:8200</code> with a vault token value of <code>s.jidjibndiyuqepjepwo</code></p>\n\n<p><strong>Usage</strong>:\n<code>target [command]</code></p>\n\n<p><strong>Available commands</strong>:\n</p><table>\n  <tr>\n   <td><code>boundary</code>\n   </td>\n   <td>Manage Boundary context profiles\n   </td>\n  </tr>\n  <tr>\n   <td><code>completion</code>\n   </td>\n   <td>Generate the autocompletion script for the specified shell\n   </td>\n  </tr>\n  <tr>\n   <td><code>config</code>\n   </td>\n   <td>Configure target CLI for shell sessions\n   </td>\n  </tr>\n  <tr>\n   <td><code>consul</code>\n   </td>\n   <td>Manage Consul context profiles \n   </td>\n  </tr>\n  <tr>\n   <td><code>help</code>\n   </td>\n   <td>Help for any command\n   </td>\n  </tr>\n  <tr>\n   <td><code>nomad</code>\n   </td>\n   <td>Manage Nomad context profiles\n   </td>\n  </tr>\n  <tr>\n   <td><code>terraform</code>\n   </td>\n   <td>Manage Terraform context profiles\n   </td>\n  </tr>\n  <tr>\n   <td><code>vault</code>\n   </td>\n   <td>Manage Vault context profiles\n   </td>\n  </tr>\n  <tr>\n   <td><code>version</code>\n   </td>\n   <td>Show current installed version of target-cli\n   </td>\n  </tr>\n</table><p></p>\n\n<p><strong>Flags:</strong></p>\n\n<table>\n  <tr>\n   <td><code>-h</code>, <code>--help</code>\n   </td>\n   <td>help for target\n   </td>\n  </tr>\n  <tr>\n   <td><code>-v</code>, <code>--version</code>\n   </td>\n   <td>version for target\n   </td>\n  </tr>\n</table>\n\n<p>Use <code>target [command] --help</code> for more information about a command.</p>\n\n<h3>Setting up Target CLI</h3>\n\n<p>Target CLI supports setting up default context profiles that load all of your default configurations when a shell is spawned. To enable this behavior, Target CLI must place a small helper script in your shell’s startup script. The <code>config</code> command is a helper utility command to perform this task.</p>\n\n<p>For example, if you are using Zsh as your shell, the helper script goes in the <code>.zshrc</code> file, which is usually located in the <code>HOME</code> directory.</p>\n\n<p>The following command configures your Zsh shell for Target CLI defaults:</p>\n\n<pre><code>Target config --path ~/.zshrc\n</code></pre>\n\n<p>This command adds the following lines to your <code>.zshrc</code> file:</p>\n\n<pre><code># Target CLI Defaults\n\nfor file in /Users/rbarnes/.target/defaults/*; do\n    if [ -f \"$file\" ]; then\n        source \"$file\"\n    fi\ndone\n</code></pre>\n\n<h3>Creating context profiles</h3>\n\n<p>Creating context profiles for all tools with the exception of Terraform requires an <code>endpoint</code> config parameter (all other configurations are optional):</p>\n\n<pre><code>target vault create local-dev \\\n  --endpoint “http://localhost:8200” \\\n  --token “root” \\\n  --namespace “droids”\n</code></pre>\n\n<p>The above example creates a Vault context profile called <code>local-dev</code>, which points to the <code>http://localhost:8200</code> endpoint, using the token <code>root</code> and pointing to the <code>droids</code> namespace. </p>\n\n<p>The same thing can be done for all of the other tools with the exception of Terraform. Each tool has its own specific configurations available. Here’s a Nomad example:</p>\n\n<pre><code>target nomad create local-cluster \\\n  --endpoint “http://localhost:4646” \\\n  --token “secret-id” \\\n  --namespace “local”\\\n  --region “uk”\n</code></pre>\n\n<p>To view a complete list of the configuration parameters, use the <code>help</code> flag for your desired tool as shown here:</p>\n\n<pre><code>target nomad create -h\n</code></pre>\n\n<h3>Listing context profiles</h3>\n\n<p>Once you create context profiles, you can list them for each tool using the list command. Here is an example of this for Vault:</p>\n\n<pre><code>target vault list\n</code></pre>\n\n<p><strong>Example output</strong>:</p>\n\n<pre><code>+----------------------+-------------------------------------------+\n| PROFILE NAME         | ENDPOINT                                  |\n+----------------------+-------------------------------------------+\n| local-dev            | http://localhost:8200                     |\n| new-vault            | https://some-vault-cluster:8200           |\n+----------------------+-------------------------------------------+\n</code></pre>\n\n<h3>Switching context profiles</h3>\n\n<p>The <code>select</code> subcommand for each tool prints out the export commands to set the context profile configurations in the current shell. For example:</p>\n\n<pre><code>target vault select local-dev\n</code></pre>\n\n<p>This outputs:</p>\n\n<pre><code>export VAULT_ADDR=http://localhost:8200; export VAULT_TOKEN=root\n</code></pre>\n\n<p>In order for this to take effect in the current shell session, simply wrap this command in the <code>eval</code> command, as shown here:</p>\n\n<pre><code>eval $(target vault select local-dev)\n</code></pre>\n\n<p>Once this is done, any Vault CLI commands will be run against the cluster specified in the <code>local-dev</code> context profile.</p>\n\n<h3>Setting default context profiles</h3>\n\n<p>If you would like a particular context profile to be loaded by default any time a shell is spawned, you can set it as the default with this command: </p>\n\n<pre><code>target vault set-default local-dev\n</code></pre>\n\n<p>The above example sets the local-dev profile as default and as such, the configured environment variables will be set automatically. This assumes that you have configured Target CLI for your chosen shell as described above in the <a href=\"#setting-up-target-cli\">Setting up Target CLI</a> section. </p>\n\n<p>It’s worth noting that setting a profile as default will not take effect in the current shell session.</p>\n\n<h3>Target CLI for Terraform</h3>\n\n<p>As mentioned earlier, support for Terraform differs from the other tools. Instead of managing connections to clusters and servers, Target CLI manages groupings of Terraform configurations, allowing the same Terraform code to be used to deploy multiple environments.</p>\n\n<p>In order for this to work, the configuration parameters within the Terraform code that you want Target CLI to specify must be set up to use <a href=\"https://developer.hashicorp.com/terraform/language/values/variables\">variables</a>, as shown here:</p>\n<pre><code>resource \"digitalocean_droplet\" \"nomad_client\" {\n  image  = \"ubuntu-20-04-x64\"\n  name   = var.droplet_name\n  region  = var.region\n  size     = var.droplet_size\n}</code></pre><p>The above example code deploys a droplet for a Nomad server to DigitalOcean cloud. Notice the <code>name</code>, <code>region</code>, and <code>size</code> configuration parameters are all set using variables. This allows Target CLI to set their values according to the context profiles created.</p>\n\n<p>Using this example, you could set up two context profiles: one for New York, called <code>nyc-prod</code> and another for London, called <code>ldn-dev</code>. The latter droplet will be used for development purposes as the engineering team is based in London, whereas the first droplet will be used for production, because the clients are in New York. The snippet below shows the Target CLI command that would be run to create the London context profile:</p>\n\n<pre><code>target terraform create ldn-dev \\\n  --var \"droplet_name=ldn-dev\" \\\n  --var \"region=lon1\" \\\n  --var \"droplet_size=s-2vcpu-4gb\"\n</code></pre>\n\n<p>The above command creates a context profile called <code>ldn-dev</code> with the specified configuration parameters. Notice the <code>--var</code> flag can be specified as many times as required:</p>\n\n<pre><code>target terraform create nyc-prod \\\n  --var \"droplet_name=nyc-prod\" \\\n  --var \"region=nyc2\" \\\n  --var \"droplet_size=s-8vcpu-16gb\"\n</code></pre>\n\n<p>This command example above does the same thing for our New York instance. Selecting a context profile in the current shell and setting a default context profile can be done in the same way, as specified in the <a href=\"#switching-context-profiles\">Switching context profiles</a> and the <a href=\"#setting-default-context-profiles\">Setting default context profiles</a> sections, respectively.</p>\n\n<p>Once a context profile is selected, or the default context profile has been loaded into your shell, run the usual <code>terraform plan</code> and <code>terraform apply</code> commands and Terraform will pick up the configuration values from the selected context profile.</p>\n\n<h3>Summary</h3>\n\n<p>The primary benefit of Target CLI lies in its ability to simplify the process of switching between different clusters and configurations of HashiCorp tools like Vault, Nomad, Consul, Boundary, and Terraform. By storing connection details in easy-to-switch context profiles, Target CLI eliminates the need for setting and remembering multiple environment variables for each cluster. This not only saves time but also reduces the likelihood of errors that can occur when manually configuring environments. Target CLI’s support for managing Terraform configurations further extends its utility, making it a versatile solution for environment management across various HashiCorp products.</p>\n\n<p>Install Target CLI using the <a href=\"#installing-target-cli\">instructions above</a> and simplify your connection and environment settings. If you would like additional HashiCorp tool support added to Target CLI, <a href=\"https://github.com/devops-rob/target-cli/issues/new\">open a Github issue</a> and share your requirements.</p>\n","author":"Rob Barnes","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"dd0d8635451a784995cd1751c0e7534a338476b753e879076354dba7f9274b3a","category":"Tech"}