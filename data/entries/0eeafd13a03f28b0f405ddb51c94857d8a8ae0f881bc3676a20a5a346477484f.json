{"title":"สรุปจากบทความการเปลี่ยนแปลง database ของ Discord","link":"https://www.somkiat.cc/note-from-database-journey-at-discord/","date":1679838218000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/discord-database-150x150.jpg\" alt srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/03/discord-database-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2023/03/discord-database-75x75.jpg 75w\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/discord-database.jpg\" alt width=\"569\" height=\"331\" /></figure>\n\n\n\n<p>เห็นว่ามีการ share บทความเรื่อง <br /><strong><a href=\"https://discord.com/blog/how-discord-stores-trillions-of-messages\">HOW DISCORD STORES TRILLIONS OF MESSAGES ?</a></strong></p>\n\n\n\n<p>ซึ่งเป็นบันทึกการเปลี่ยนแปลง database ที่ใช้เก็บข้อมูล<br />ที่พูดคุยต่าง ๆ ในระบบ Discord<br />จาก MongoDB -&gt; Cassandra -&gt; ScyllaDB<br />ทำให้เราเห็น use case และ เหตุผลในการเปลี่ยนแปลง<br />นั่นคือการแก้ไขปัญหานั่นเอง<br />จึงทำการสรุปสิ่งที่สนใจเอาไว้ดังนี้</p>\n\n\n\n<span></span>\n\n\n\n<p>สิ่งที่ผมสนใจคือ database ที่เลือกใช้<br />โดยเริ่มต้นจากการใช้งาน MonogoDB<br />เป็น NoSQL แบบ Document-based<br />ซึ่งมีโครสร้างแบบ primary for write + secondary for read (Replication)<br />ตัวอย่างการ <a href=\"https://www.mongodb.com/docs/manual/tutorial/deploy-replica-set/\" target=\"_blank\">deploy แบบ replica set</a></p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/Screenshot-2566-03-26-at-19.35.21-1024x407.png\" alt width=\"483\" height=\"191\" /></figure>\n\n\n\n<p>แต่เมื่อข้อมูลมีเกิน 100 ล้าน document แล้ว<br />ทำให้ข้อมูลใหญ่กว่า memory<br />ส่งผลให้เวลาการจัดการข้อมูลผ่าน MongoDB มีปัญหา ช้าบ้างเร็วบ้าง<br />ทำให้เกิดปัญหาต่อระบบ</p>\n\n\n\n<p>ดังนั้นจึงต้องทำการเปลี่ยนแปลง !!<br />โดยสิ่งที่เลือก ต้องตรงกับความต้องการดังนี้</p>\n\n\n\n<ul><li>Linear Scalability</li><li>การดูแลรักษาง่าย</li><li>เมื่อเกิดปัญหาสามารถ recovery แบบอัตโนมัติได้</li><li>รองรับอัตราการ read/write แบบ 50/50 ได้ดี</li><li>รองรับการทำ caching ของแต่ละกลุ่มข้อมูลของ user</li><li>รองรับ full text search </li></ul>\n\n\n\n<p>ซึ่งจากความต้องการเหล่านี้ จึงเลือก <a href=\"https://cassandra.apache.org/_/index.html\" target=\"_blank\">Cassandra</a> มาใช้งาน<br />เป็น NoSQL แบบ Wide-column based<br />เน้นที่ Availability มากกว่า Consistency<br />ในเรื่องความถูกต้องจึงต้องมีวิธีการตรวจสอบข้อมูลเยอะหน่อย</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/cassandra.jpg\" alt width=\"460\" height=\"302\" /></figure>\n\n\n\n<p>ผลจากการเปลี่ยนแปลงทำให้การ write และ read เร็วขึ้นอย่างมาก</p>\n\n\n\n<ul><li>Latency ของการ write &lt; 1 ms</li><li>Latency ของการ read &lt; 5 ms</li></ul>\n\n\n\n<p>ระบบทำงานได้ปกติ ไม่มีปัญหาอะไร<br />จนมาถึงปี 2022 นั้น ข้อมูลที่จัดเก็บมาถึงหลักล้านล้าน  (trillion)!!<br />พร้อมกับ Cassandra 177 node<br />มาพร้อมกับปัญหาเรื่อง latency ที่เหวี่ยงไปมา<br />จากเรื่องการทำงานของ Garbase Collector(GC) ของ JVM !!<br />และปัญหา <a href=\"https://www.scylladb.com/learn/apache-cassandra/introduction-to-apache-cassandra/\" target=\"_blank\">Hot partition</a> ที่มาจากการแบ่งข้อมูลตาม key ที่กำหนด<br />ดังนั้นถ้ามีข้อมูลใน partition ไหนใช้งานสูง ก็ส่งผลต่อความเร็วอีก !!</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/Screenshot-2566-03-26-at-19.58.07-1024x629.png\" alt width=\"501\" height=\"308\" /></figure>\n\n\n\n<p>จึงได้เวลาของการเปลี่ยนแปลงอีกครั้ง<br />นั่นคือการเลือกใช้ <a href=\"https://www.scylladb.com/\" target=\"_blank\">ScyllaDB</a><br />เป็นตัวแทนของ Cassandra<br />พัฒนาด้วยภาษา C++ จึงไม่มีปัญหาเรื่อง GC<br />และยังมี API ที่ compatibility กับ DynamoDB และ Cassandra อีกด้วย<br />แต่เรื่องของ  Hot partition ยังคงมี</p>\n\n\n\n<p>จึงทำการแก้ไขด้วยการสร้าง <strong>Data Layer</strong> ขึ้นมาด้วยภาษา Rust<br />อยู่ระหว่าง API ที่เขียนด้วยภาษา Python กับ Database นั่นเอง<br />ของเดิม API ยิงไปที่ Database ตรง ๆ เลย</p>\n\n\n\n<p><strong>โดยใน Data Layer ทำหน้าที่ดังนี้</strong></p>\n\n\n\n<ul><li>ถ้ามีการดึงข้อมูลเดิม ๆ ซ้ำกันมา จะมีเพียง request แรกเท่านั้นที่วิ่งไปยัง Database ทำหน้าที่ Caching data นั่นเอง</li></ul>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/data_layer_01-1024x627.jpeg\" alt width=\"446\" height=\"273\" /></figure>\n\n\n\n<ul><li>ทำการเตรียม routing key ไว้สำหรับการจัดการ message ให้ไปอยู่ใน channel ต่าง ๆ เพื่อดึงข้อมูลจาก database  เป้าหมายเพื่อลดปัญหาเรื่อง Hot partition</li></ul>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/data_layer_02-1024x551.jpeg\" alt width=\"447\" height=\"240\" /></figure>\n\n\n\n<p>นั่นหมายความว่าทางทีม Discord พยายาม<br />ลดจำนวน request ที่วิ่งไปยัง Database ลงให้มากที่สุด</p>\n\n\n\n<p>อีกเรื่องที่น่าสนใจคือ การ migrate data จาก Cassandra มายัง ScyllaDB<br />แบบไม่ให้มี downtime !!<br />ต้องไปอ่านรายละเอียดเพิ่มอีก</p>\n\n\n\n<p><strong>ดูเพิ่มเติมได้ที่</strong></p>\n\n\n\n<ul><li><a href=\"https://www.slideshare.net/ScyllaDB/how-discord-migrated-trillions-of-messages-from-cassandra-to-scylladb\" target=\"_blank\">Slideshare</a></li><li><a href=\"https://twitter.com/alexxubyte/status/1635306946034294784\" target=\"_blank\">Diagram จาก Twitter ของ ByteByteGo</a></li></ul>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/FrHG_eEaEAALZvd-1024x869.jpeg\" alt width=\"566\" height=\"480\" /></figure>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"0eeafd13a03f28b0f405ddb51c94857d8a8ae0f881bc3676a20a5a346477484f","category":"Thai"}