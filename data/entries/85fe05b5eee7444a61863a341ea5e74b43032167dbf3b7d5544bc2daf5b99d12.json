{"title":"Polishing your typography with line height units","link":"https://webkit.org/blog/16831/line-height-units/","date":1745520315000,"content":"<p>It’s been possible to create gorgeous layouts on the web for decades, but often refining the details to perfection can take a lot of effort. Arguably too much effort, and developers just don’t have the time. Happily, the last few years of CSS have seen a lot of new tools, sometimes very simple tools, that when used in a smart fashion suddenly make polishing graphic design details incredibly easy. One such tool is the <code>lh</code> unit.</p>\n<h3>Line height units</h3>\n<p>It might seem like no big deal that the web gained two new units, <code>lh</code> and <code>rlh</code>, to reference line heights. Support <a href=\"https://caniuse.com/mdn-css_types_length_lh\">shipped in every browser in 2023</a> without much fanfare. But wow, are they powerful.</p>\n<p>Basically, <code>1lh</code> equals the height of one line of text, for the current font at the current line height. “LH” stands for Line Height. The accompanying <code>1rlh</code> unit is the equivalent of one line height at the root, just like how <code>rem</code> is the <code>em</code> at the root. “RLH” stands for Root Line Height.</p>\n<p>My favorite thing to do with the <code>lh</code> unit is to set margins on content. Let’s set a new universal margin on paragraphs with:</p>\n<pre><code><span>p</span> { <span>margin-block</span>: <span>1</span><span>lh</span>; } \n</code></pre>\n<p>You can see the results in the following screenshots. On the left, the margin in the block direction is set to <code>1em</code>, the default in UA stylesheets since the 90s. On the right it’s changed to <code>1lh</code>.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/comparison-light.png\" alt=\"Two example articles typeset side-by-side. The one on the right has a bit more space between each paragraph. \" width=\"2500\" height=\"2140\" srcset=\"https://webkit.org/wp-content/uploads/comparison-light.png 2500w, https://webkit.org/wp-content/uploads/comparison-light-300x257.png 300w, https://webkit.org/wp-content/uploads/comparison-light-1024x877.png 1024w, https://webkit.org/wp-content/uploads/comparison-light-768x657.png 768w, https://webkit.org/wp-content/uploads/comparison-light-1536x1315.png 1536w, https://webkit.org/wp-content/uploads/comparison-light-2048x1753.png 2048w\" /></figure>\n<p>Many people who have an eye for layout and spacing can immediately see the difference. You might agree that the version on the right just looks more polished. It looks refined. While the version on the left looks a bit clunky. It looks, well, like everything on the web has looked for decades. Slightly awkward.</p>\n<p>Many other people will look at this comparison and think “I don’t see it” or “what’s the big deal”? Let’s draw a line grid over the text to make the difference more clear. Hopefully now it’s more obvious that the blank space between paragraphs is equivalent to a line of text when it’s defined in <code>lh</code> units.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/comparison-guides-light.png\" alt=\"The same side-by-side comparison of two typeset articles — only now there's a light blue line underneath each line of text, spaced exactly line height apart. On the left, the lines of text get messy. They aren't lining up correctly. On the right, every line of text falls on the line grid.\" width=\"2500\" height=\"2140\" srcset=\"https://webkit.org/wp-content/uploads/comparison-guides-light.png 2500w, https://webkit.org/wp-content/uploads/comparison-guides-light-300x257.png 300w, https://webkit.org/wp-content/uploads/comparison-guides-light-1024x877.png 1024w, https://webkit.org/wp-content/uploads/comparison-guides-light-768x657.png 768w, https://webkit.org/wp-content/uploads/comparison-guides-light-1536x1315.png 1536w, https://webkit.org/wp-content/uploads/comparison-guides-light-2048x1753.png 2048w\" />\n</figure>\n<p>Line height units give us a direct way to tie any size in our layout to the vertical rhythm of the text. Margins are just one possibility — padding is another, gaps, width and height, or any other measurement in the layout.</p>\n<h3>Try it yourself</h3>\n<p>You can try out combinations of options to see the effects of using <code>lh</code> for paragraph margins <a href=\"https://codepen.io/jensimmons/pen/YPKZgvX?editors=1100\">in this demo</a>.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/demo-light-1-scaled.png\" alt=\"A screenshot of the demo in a web browser. It shows the same sample text as the other images, this time with a control panel of options. You can switch the block margins from 1em to 1lh, adjust margin-trim, switch fonts, and turn on/off margin guides and line grid guides.\" width=\"2560\" height=\"1621\" srcset=\"https://webkit.org/wp-content/uploads/demo-light-1-scaled.png 2560w, https://webkit.org/wp-content/uploads/demo-light-1-300x190.png 300w, https://webkit.org/wp-content/uploads/demo-light-1-1024x648.png 1024w, https://webkit.org/wp-content/uploads/demo-light-1-768x486.png 768w, https://webkit.org/wp-content/uploads/demo-light-1-1536x973.png 1536w, https://webkit.org/wp-content/uploads/demo-light-1-2048x1297.png 2048w\" /><p></p>\n</figure>\n<h3>Browser support</h3>\n<p>Line height units are <a href=\"https://caniuse.com/mdn-css_types_length_lh\">supported in over 94% of the browsers</a> people use today. For that last 6%, you can use progressive enhancement to ensure they get a good experience. For example:</p>\n<pre><code><span>article</span> {\n  <span>padding</span>: <span>1em</span>; <span>/* fallback for browsers lh without support */</span>\n  <span>padding</span>: <span>1</span><span>lh</span>;\n} \n</code></pre>\n<p>Using this technique causes browsers without support to render <code>1em</code> of padding, while the browsers with support render <code>1lh</code> of padding.</p>\n<h3>Take your typography to the next level</h3>\n<p>It really is a great time for typography on the web. There’re over a dozen small features that shipped in the last few years  that empower web designers &amp; developers to polish typographic details to a far better result, especially with the kind of easy robustness that makes it practical to accomplish. It’s my hope you use them!</p>\n<p>Let me know what you think on <a href=\"https://bsky.app/profile/jensimmons.bsky.social\">Bluesky</a> or <a href=\"https://front-end.social/@jensimmons\">Mastodon</a>. I’d love to hear your stories, plans and questions.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"85fe05b5eee7444a61863a341ea5e74b43032167dbf3b7d5544bc2daf5b99d12","category":"Tech"}