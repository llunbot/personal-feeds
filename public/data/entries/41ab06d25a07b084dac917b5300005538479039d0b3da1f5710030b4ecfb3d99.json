{"title":"Behind the Scenes at AWS – DynamoDB UpdateTable Speedup","link":"https://aws.amazon.com/blogs/aws/behind-the-scenes-at-aws-dynamodb-updatetable-speedup/","date":1676476799000,"content":"<p>We often talk about the <a href=\"https://aws.amazon.com/innovation/\">Pace of Innovation</a> at AWS, and share the results in this blog, in the <a href=\"https://aws.amazon.com/about-aws/whats-new/2022/\">AWS What’s New</a> page, and in our weekly <a href=\"https://aws.amazon.com/developer/community/live-video/aws-on-air/?twitch-list.sort-by=item.additionalFields.StartDateTime&amp;twitch-list.sort-order=desc\">AWS on Air</a> streams. Today I would like to talk about a slightly different kind of innovation, the kind that happens behind the scenes.</p> \n<p>Each AWS customer uses a different mix of services, and uses those services in unique ways. Every service is instrumented and monitored, and the team responsible for designing, building, running, scaling, and evolving the service pays continuous attention to all of the resulting metrics. The metrics provide insights into how the service is being used, how it performs under load, and in many cases highlights areas for optimization in pursuit of higher availability, better performance, and lower costs.</p> \n<p>Once an area for improvement has been identified, a plan is put in to place, changes are made and tested in pre-production environments, then deployed to multiple AWS regions. This happens routinely, and (to date) without fanfare. Each part of AWS gets better and better, with no action on your part.</p> \n<p><span><strong>DynamoDB UpdateTable</strong></span><br /> <img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/15/ddb_change_class_1.png\" alt width=\"460\" height=\"314\" />In late 2021 we <a href=\"https://aws.amazon.com/blogs/aws/new-dynamodb-table-class-save-up-to-60-in-your-dynamodb-costs/\">announced</a> the Standard-Infrequent Access table class for <a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a>. As <a href=\"https://www.linkedin.com/in/marciavillalba/\">Marcia</a> noted in her post, using this class can reduce your storage costs by 60% compared to the existing (Standard) class. She also showed you how you could modify a table to use the new class. The modification operation calls the <code><a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateTable.html\">UpdateTable</a></code> function, and that function is the topic of this post!</p> \n<p>As is the case with just about every AWS launch, customers began to make use of the new table class right away. They created new tables and modified existing ones, benefiting from the lower pricing as soon as the modification was complete.</p> \n<p>DynamoDB uses a highly distributed storage architecture. Each table is split into multiple partitions; operations such as changing the storage class are done in parallel across the partitions. After looking at a lot of metrics, the DynamoDB team found ways to increase parallelism and to reduce the amount of time spent managing the parallel operations.</p> \n<p><strong>This change had a dramatic effect for Amazon DynamoDB tables over 500 GB in size, reducing the time to update the table class by up to 97%.</strong></p> \n<p>Each time we make a change like this, we capture the “before” and “after” metrics, and share the results internally so that other teams can learn from the experience while they are in the process of making similar improvements of their own. Even better, each change that we make opens the door to other ones, creating a positive feedback loop that (once again) benefits everyone that uses a particular service or feature.</p> \n<p>Every DynamoDB user can take advantage of this increased performance right away without the need for a version upgrade or downtime for maintenance (DynamoDB does not even have maintenance windows).</p> \n<p>Incremental performance and operational improvements like this one are done routinely and without much fanfare. However it is always good to hear back from our customers when their own measurements indicate that some part of AWS became better or faster.</p> \n<p><span><strong>Leadership Principles</strong></span><br /> As I was thinking about this change while getting ready to write this post, several <a href=\"https://amazon.jobs/content/en/our-workplace/leadership-principles\">Amazon Leadership Principles</a> came to mind. The DynamoDB team showed Customer Obsession by implementing a change that would benefit any DynamoDB user with tables over 500 GB in size. To do this they had to Invent and Simplify, coming up with a better way to implement the <code>UpdateTable</code> function.</p> \n<p>While you, as an AWS customer, get the benefits with no action needed on your part, this does not mean that you have to wait until we decide to pay special attention to your particular use case. If you are pushing any aspect of AWS to the limit (or want to), I recommend that you make contact with the appropriate service team and let them know what’s going on. You might be running into a quota or other limit, or pushing bandwidth, memory, or other resources to extremes. Whatever the case, the team would love to hear from you!</p> \n<p><span><strong>Stay Tuned</strong></span><br /> I have a long list of other internal improvements that we have made, and will be working with the teams to share more of them throughout the year.</p> \n<p>— <a href=\"https://twitter.com/jeffbarr\">Jeff</a>;</p>","author":"Jeff Barr","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"41ab06d25a07b084dac917b5300005538479039d0b3da1f5710030b4ecfb3d99","category":"Tech"}