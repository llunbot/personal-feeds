{"title":"Agents for Amazon Bedrock: Introducing a simplified creation and configuration experience","link":"https://aws.amazon.com/blogs/aws/agents-for-amazon-bedrock-introducing-a-simplified-creation-and-configuration-experience/","date":1713871547000,"content":"<p><em><strong>May 8, 2024</strong>: Post updated with a link showing how to handle return of control in code.</em></p> \n<p>With <a href=\"https://aws.amazon.com/bedrock/agents/\">Agents for Amazon Bedrock</a>, applications can use <a href=\"https://aws.amazon.com/generative-ai/\">generative artificial intelligence (generative AI)</a> to run tasks across multiple systems and data sources. Starting today, these new capabilities streamline the creation and management of agents:</p> \n<p><strong>Quick agent creation</strong> – You can now quickly create an agent and optionally add instructions and action groups later, providing flexibility and agility for your development process.</p> \n<p><strong>Agent builder</strong> – All agent configurations can be operated in the new agent builder section of the console.</p> \n<p><strong>Simplified configuration</strong> – Action groups can use a simplified schema that just lists functions and parameters without having to provide an API schema.</p> \n<p><strong>Return of control</strong> – You can skip using an <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> function and return control to the application invoking the agent. In this way, the application can directly integrate with systems outside AWS or call internal endpoints hosted in any <a href=\"https://aws.amazon.com/vpc/\">Amazon Virtual Private Cloud (Amazon VPC)</a> without the need to integrate the required networking and security configurations with a Lambda function.</p> \n<p><strong>Infrastructure as code </strong>– You can use <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> to deploy and manage agents with the new simplified configuration, ensuring consistency and reproducibility across environments for your generative AI applications.</p> \n<p>Let’s see how these enhancements work in practice.</p> \n<p><span><strong>Creating an agent using the new simplified console<br /> </strong></span>To test the new experience, I want to build an agent that can help me reply to an email containing customer feedback. I can use generative AI, but a single invocation of a <a href=\"https://aws.amazon.com/what-is/foundation-models/\">foundation model (FM)</a> is not enough because I need to interact with other systems. To do that, I use an agent.</p> \n<p>In the <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a> <a href=\"https://console.aws.amazon.com/bedrock\">console</a>, I choose <strong>Agents</strong> from the navigation pane and then <strong>Create Agent</strong>. I enter a name for the agent (<strong>customer-feedback</strong>) and a description. Using the new interface, I proceed and create the agent without providing additional information at this stage.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-create.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-create.png\" alt=\"Console screenshot.\" width=\"2304\" height=\"1012\" /></a></p> \n<p>I am now presented with the <strong>Agent builder</strong>, the place where I can access and edit the overall configuration of an agent. In the <strong>Agent resource role</strong>, I leave the default setting as <strong>Create and use a new service role</strong> so that the <a href=\"https://aws.amazon.com/iam/\">AWS Identity and Access Management (IAM)</a> role assumed by the agent is automatically created for me. For the model, I select <strong>Anthropic</strong> and <strong>Claude 3 Sonnet</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-agent-builder-existing.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-agent-builder-existing.png\" alt=\"Console screenshot.\" width=\"1436\" height=\"1282\" /></a></p> \n<p>In <strong>Instructions for the Agent</strong>, I provide clear and specific instructions for the task the agent has to perform. Here, I can also specify the style and tone I want the agent to use when replying. For my use case, I enter:</p> \n<p><code>Help reply to customer feedback emails with a solution tailored to the customer account settings.</code></p> \n<p>In <strong>Additional settings</strong>, I select <strong>Enabled</strong> for <strong>User input</strong> so that the agent can ask for additional details when it does not have enough information to respond. Then, I choose <strong>Save</strong> to update the configuration of the agent.</p> \n<p>I now choose <strong>Add</strong> in the <strong>Action groups</strong> section. Action groups are the way agents can interact with external systems to gather more information or perform actions. I enter a name (<strong>retrieve-customer-settings</strong>) and a description for the action group:</p> \n<p><code>Retrieve customer settings including customer ID.</code></p> \n<p>The description is optional but, when provided, is passed to the model to help choose when to use this action group.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-action-group.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-action-group.png\" alt=\"Console screenshot.\" width=\"1428\" height=\"1102\" /></a></p> \n<p>In <strong>Action group type</strong>, I select <strong>Define with function details</strong> so that I only need to specify functions and their parameters. The other option here (<strong>Define with API schemas</strong>) corresponds to the previous way of configuring action groups using an API schema.</p> \n<p>Action group functions can be associated to a Lambda function call or configured to return control to the user or application invoking the agent so that they can provide a response to the function. The option to return control is useful for four main use cases:</p> \n<ul> \n <li>When it’s easier to call an API from an existing application (for example, the one invoking the agent) than building a new Lambda function with the correct authentication and network configurations as required by the API</li> \n <li>When the duration of the task goes beyond the maximum Lambda function timeout of 15 minutes so that I can handle the task with an application running in containers or virtual servers or use a workflow orchestration such as <a href=\"https://aws.amazon.com/step-functions\">AWS Step Functions</a></li> \n <li>When I have time-consuming actions because, with the return of control, the agent doesn’t wait for the action to complete before proceeding to the next step, and the invoking application can run actions asynchronously in the background while the orchestration flow of the agent continues</li> \n <li>When I need a quick way to mock the interaction with an API during the development and testing and of an agent</li> \n</ul> \n<p>In <strong>Action group invocation</strong>, I can specify the Lambda function that will be invoked when this action group is identified by the model during orchestration. I can ask the console to quickly create a new Lambda function, to select an existing Lambda function, or return control so that the user or application invoking the agent will ask for details to generate a response. I select <strong>Return Control</strong> to show how that works in the console.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-action-group-invocation.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-action-group-invocation.png\" alt=\"Console screenshot.\" width=\"1430\" height=\"610\" /></a></p> \n<p>I configure the first function of the action group. I enter a name (<strong>retrieve-customer-settings-from-crm</strong>) and the following description for the function:</p> \n<p><code>Retrieve customer settings from CRM including customer ID using the customer email in the sender/from fields of the email.</code></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-action-group-function.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-action-group-function.png\" alt=\"Console screenshot.\" width=\"1428\" height=\"1194\" /></a></p> \n<p>In <strong>Parameters</strong>, I add <code>email</code> with <code>Customer email</code> as the description. This is a parameter of type <strong>String</strong> and is required by this function. I choose <strong>Add</strong> to complete the creation of the action group.</p> \n<p>Because, for my use case, I expect many customers to have issues when logging in, I add another action group (named <strong>check-login-status</strong>) with the following description:</p> \n<p><code>Check customer login status.</code></p> \n<p>This time, I select the option to create a new Lambda function so that I can handle these requests in code.</p> \n<p>For this action group, I configure a function (named <strong>check-customer-login-status-in-login-system</strong>) with the following description:</p> \n<p><code>Check customer login status in login system using the customer ID from settings.</code></p> \n<p>In <strong>Parameters</strong>, I add <code>customer_id</code>, another required parameter of type <strong>String</strong>. Then, I choose <strong>Add</strong> to complete the creation of the second action group.</p> \n<p>When I open the configuration of this action group, I see the name of the Lambda function that has been created in my account. There, I choose <strong>View</strong> to open the Lambda function in the console.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-action-group-invocation-lambda.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-action-group-invocation-lambda.png\" alt=\"Console screenshot.\" width=\"1432\" height=\"934\" /></a></p> \n<p>In the <a href=\"https://console.aws.amazon.com/lambda\">Lambda console</a>, I edit the starting code that has been provided and implement my business case:</p> \n<pre><code>import json\n\ndef lambda_handler(event, context):\n    print(event)\n    \n    agent = event['agent']\n    actionGroup = event['actionGroup']\n    function = event['function']\n    parameters = event.get('parameters', [])\n\n    # Execute your business logic here. For more information,\n    # refer to: https://docs.aws.amazon.com/bedrock/latest/userguide/agents-lambda.html\n    if actionGroup == 'check-login-status' and function == 'check-customer-login-status-in-login-system':\n        response = {\n            \"status\": \"unknown\"\n        }\n        for p in parameters:\n            if p['name'] == 'customer_id' and p['type'] == 'string' and p['value'] == '12345':\n                response = {\n                    \"status\": \"not verified\",\n                    \"reason\": \"the email address has not been verified\",\n                    \"solution\": \"please verify your email address\"\n                }\n    else:\n        response = {\n            \"error\": \"Unknown action group {} or function {}\".format(actionGroup, function)\n        }\n    \n    responseBody =  {\n        \"TEXT\": {\n            \"body\": json.dumps(response)\n        }\n    }\n\n    action_response = {\n        'actionGroup': actionGroup,\n        'function': function,\n        'functionResponse': {\n            'responseBody': responseBody\n        }\n\n    }\n\n    dummy_function_response = {'response': action_response, 'messageVersion': event['messageVersion']}\n    print(\"Response: {}\".format(dummy_function_response))\n\n    return dummy_function_response\n</code></pre> \n<p>I choose <strong>Deploy</strong> in the Lambda console. The function is configured with a resource-based policy that allows Amazon Bedrock to invoke the function. For this reason, I don’t need to update the IAM role used by the agent.</p> \n<p>I am ready to test the agent. Back in the Amazon Bedrock console, with the agent selected, I look for the <strong>Test Agent</strong> section. There, I choose <strong>Prepare</strong> to prepare the agent and test it with the latest changes.</p> \n<p>As input to the agent, I provide this sample email:</p> \n<p><code>From: danilop@example.com</code></p> \n<p><code>Subject: Problems logging in</code></p> \n<p><code>Hi, when I try to log into my account, I get an error and cannot proceed further. Can you check? Thank you, Danilo</code></p> \n<p>In the first step, the agent orchestration decides to use the first action group (<strong>retrieve-customer-settings</strong>) and function (<strong>retrieve-customer-settings-from-crm</strong>). This function is configured to return control, and in the console, I am asked to provide the output of the action group function. The customer email address is provided as the input parameter.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-test.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-test.png\" alt=\"Console screenshot.\" width=\"2304\" height=\"1128\" /></a></p> \n<p>To simulate an interaction with an application, I reply with a JSON syntax and choose <strong>Submit</strong>:</p> \n<p><code>{ \"customer id\": 12345 }</code></p> \n<p>In the next step, the agent has the information required to use the second action group (<strong>check-login-status</strong>) and function (<strong>check-customer-login-status-in-login-system</strong>) to call the Lambda function. In return, the Lambda function provides this JSON payload:</p> \n<pre><code>{\n  \"status\": \"not verified\",\n  \"reason\": \"the email address has not been verified\",\n  \"solution\": \"please verify your email address\"\n}</code></pre> \n<p>Using this content, the agent can complete its task and suggest the correct solution for this customer.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-test-second-step.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-test-second-step.png\" alt=\"Console screenshot.\" width=\"2304\" height=\"1152\" /></a></p> \n<p>I am satisfied with the result, but I want to know more about what happened under the hood. I choose <strong>Show trace</strong> where I can see the details of each step of the agent orchestration. This helps me understand the agent decisions and correct the configurations of the agent groups if they are not used as I expect.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-test-show-trace.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/19/bedrock-agents-test-show-trace.png\" alt=\"Console screenshot.\" width=\"2368\" height=\"1664\" /></a></p> \n<p><span><strong>Things to know</strong></span><br /> You can use the new simplified experience to create and manage <a href=\"https://aws.amazon.com/bedrock/agents/\">Agents for Amazon Bedrock</a> in the US East (N. Virginia) and US West (Oregon) AWS Regions.</p> \n<p>You can now create an agent without having to specify an API schema or provide a Lambda function for the action groups. You just need to list the parameters that the action group needs. When invoking the agent, you can choose to return control with the details of the operation to perform so that you can handle the operation in your existing applications or if the duration is longer than the maximum Lambda function timeout.</p> \n<p><a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-agent.html\">CloudFormation support for Agents for Amazon Bedrock</a> has been released recently and is now being updated to support the new simplified syntax.</p> \n<p>To learn more:</p> \n<ul> \n <li>Here’s an <a href=\"https://community.aws/content/2g8NsQl8CvJhxQ0635HKkg6hMga/agents-for-amazon-bedrock-handling-return-of-control-in-code\">example of how to use the same agent from this blog post in your code</a>.</li> \n <li>See the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/agents.html\">Agents for Amazon Bedrock section of the User Guide</a>.</li> \n <li>Visit our <a href=\"https://community.aws/generative-ai?trk=e8665609-785f-4bbe-86e8-750a3d3e9e61&amp;sc_channel=el\">community.aws site</a> to find deep-dive technical content and discover how others are using Amazon Bedrock in their solutions.</li> \n</ul> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"3f7c8d59e8667dcf13be36a42d307630f8c76be72bb1f391f662681e3c1ab311","category":"Tech"}