{"title":"Replicate changes from databases to Apache Iceberg tables using Amazon Data Firehose (in preview)","link":"https://aws.amazon.com/blogs/aws/replicate-changes-from-databases-to-apache-iceberg-tables-using-amazon-data-firehose/","date":1731699922000,"content":"<p>Today, we’re announcing the availability, in preview, of a new capability in <a href=\"https://aws.amazon.com/firehose/\">Amazon Data Firehose</a> that captures changes made in databases such as PostgreSQL and MySQL and replicates the updates to <a href=\"https://iceberg.apache.org/\">Apache Iceberg</a> tables on <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>.</p> \n<p>Apache Iceberg is a high-performance open-source table format for performing big data analytics. Apache Iceberg brings the reliability and simplicity of SQL tables to S3 data lakes and makes it possible for open source analytics engines such as <a href=\"https://spark.apache.org/\">Apache Spark</a>, <a href=\"https://flink.apache.org/\">Apache Flink</a>, <a href=\"https://trino.io/\">Trino</a>, <a href=\"https://hive.apache.org/\">Apache Hive</a>, and <a href=\"https://impala.apache.org/\">Apache Impala</a> to concurrently work with the same data.</p> \n<p>This new capability provides a simple, end-to-end solution to stream database updates without impacting transaction performance of database applications. You can set up a Data Firehose stream in minutes to deliver <a href=\"https://en.wikipedia.org/wiki/Change_data_capture\">change data capture (CDC)</a> updates from your database. Now, you can easily replicate data from different databases into Iceberg tables on Amazon S3 and use up-to-date data for large-scale analytics and machine learning (ML) applications.</p> \n<p>Typical <a href=\"https://aws.amazon.com/\">Amazon Web Services (AWS)</a> enterprise customers use hundreds of databases for transactional applications. To perform large scale analytics and ML on the latest data, they want to capture changes made in databases, such as when records in a table are inserted, modified, or deleted, and deliver the updates to their data warehouse or Amazon S3 data lake in open source table formats such as Apache Iceberg.</p> \n<p>To do so, many customers develop extract, transform, and load (ETL) jobs to periodically read from databases. However, ETL readers impact database transaction performance, and batch jobs can add several hours of delay before data is available for analytics. To mitigate impact on database transaction performance, customers want the ability to stream changes made in the database. This stream is referred to as a change data capture (CDC) stream.</p> \n<p>I met multiple customers that use open source distributed systems, such as <a href=\"https://debezium.io/\">Debezium</a>, with connectors to popular databases, an <a href=\"https://docs.confluent.io/platform/current/connect/index.html\">Apache Kafka Connect</a> cluster, and Kafka Connect Sink to read the events and deliver them to the destination. The initial configuration and test of such systems involves installing and configuring multiple open source components. It might take days or weeks. After setup, engineers have to monitor and manage clusters, and validate and apply open source updates, which adds to the operational overhead.</p> \n<p>With this new data streaming capability, Amazon Data Firehose adds the ability to acquire and continually replicate CDC streams from databases to Apache Iceberg tables on Amazon S3. You set up a Data Firehose stream by specifying the source and destination. Data Firehose captures and continually replicates an initial data snapshot and then all subsequent changes made to the selected database tables as a data stream. To acquire CDC streams, Data Firehose uses the database replication log, which reduces impact on database transaction performance. When the volume of database updates increases or decreases, Data Firehose automatically partitions the data, and persists records until they’re delivered to the destination. You don’t have to provision capacity or manage and fine-tune clusters. In addition to the data itself, Data Firehose can automatically create Apache Iceberg tables using the same schema as the database tables as part of the initial Data Firehose stream creation and automatically evolve the target schema, such as new column addition, based on source schema changes.</p> \n<p>Since Data Firehose is a fully managed service, you don’t have to rely on open source components, apply software updates, or incur operational overhead.</p> \n<p>The continual replication of database changes to Apache Iceberg tables in Amazon S3 using Amazon Data Firehose provides you with a simple, scalable, end-to-end managed solution to deliver CDC streams into your data lake or data warehouse, where you can run large-scale analysis and ML applications.</p> \n<p><span><strong>Let’s see how to configure a new pipeline<br /> </strong></span>To show you how to create a new CDC pipeline, I setup a Data Firehose stream using the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a>. As usual, I also have the choice to use the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a>, <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a>, <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a>, or <a href=\"https://www.terraform.io/\">Terraform</a>.</p> \n<p>For this demo, I choose a MySQL database on <a href=\"https://aws.amazon.com/rds/\">Amazon Relational Database Service (Amazon RDS)</a> as source. Data Firehose also works with self-managed databases on <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a>. To establish connectivity between my virtual private cloud (VPC)—where the database is deployed—and the RDS API without exposing the traffic to the internet, I create an <a href=\"https://aws.amazon.com/privatelink/\">AWS PrivateLink</a> VPC service endpoint. You can learn <a href=\"https://aws.amazon.com/blogs/database/access-amazon-rds-across-vpcs-using-aws-privatelink-and-network-load-balancer/\">how to create a VPC service endpoint for RDS API</a> by following instructions in the <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/vpc-interface-endpoints.html\">Amazon RDS documentation</a>.</p> \n<p>I also have an S3 bucket to host the Iceberg table, and I have an <a href=\"https://aws.amazon.com/iam/\">AWS Identity and Access Management (IAM)</a> role setup with correct permissions. You can refer to the list of <a href=\"https://docs.aws.amazon.com/firehose/latest/dev/database-as-source-prereq.html\">prerequisites</a> in the Data Firehose documentation.</p> \n<p>To get started, I open the console and navigate to the Amazon Data Firehose section. I can see the stream already created. To create a new one, I select<strong> Create Firehose stream</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-26-25.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-26-25.png\" alt=\"Create Firehose Stream\" width=\"800\" height=\"378\" /></a></p> \n<p>I select a <strong>Source</strong> and <strong>Destination</strong>. In this example: a MySQL database and Apache Iceberg Tables. I also enter a <strong>Firehose stream name</strong> for my stream.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-26-59.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-26-59.png\" alt=\"Create Firehose Stream - screen 1\" width=\"831\" height=\"682\" /></a></p> \n<p>I enter the fully qualified DNS name of my <strong>Database endpoint</strong> and the <strong>Database VPC endpoint service name</strong>. I verify that <strong>Enable SSL</strong> is checked and, under <strong>Secret name</strong>, I select the name of the secret in <a href=\"https://aws.amazon.com/secrets-manager/\">AWS Secrets Manager</a> where the database username and password are securely stored.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-41-48.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-41-48.png\" alt=\"Create Firehose Stream - screen 2\" width=\"725\" height=\"704\" /></a></p> \n<p>Next, I configure Data Firehose to capture specific data by specifying databases, tables, and columns using explicit names or regular expressions.</p> \n<p>I must create a watermark table. A watermark, in this context, is a marker used by Data Firehose to track the progress of incremental snapshots of database tables. It helps Data Firehose identify which parts of the table have already been captured and which parts still need to be processed. I can create the watermark table manually or let Data Firehose automatically create it for me. In that case, the database credentials passed to Data Firehose must have permissions to create a table in the source database.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-46-23.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-46-23.png\" alt=\"Create Firehose Stream - screen 3\" width=\"788\" height=\"705\" /></a></p> \n<p>Next, I configure the S3 bucket <a href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#region\">Region</a> and name to use. Data Firehose can automatically create the Iceberg tables when they don’t exist yet. Similarly, it can update the Iceberg table schema when detecting a change in your database schema.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-42-15.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-42-15.png\" alt=\"Create Firehose Stream - screen 4\" width=\"797\" height=\"844\" /></a></p> \n<p>As a final step, it’s important to enable <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> error logging to get feedback about the stream progress and the eventual errors. You can <a href=\"https://docs.aws.amazon.com/managedservices/latest/userguide/log-customize-retention.html\">configure a short retention period on the CloudWatch log group</a> to reduce the cost of log storage.</p> \n<p>After having reviewed my configuration, I select <strong>Create Firehose stream</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-42-41.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-42-41.png\" alt=\"Create Firehose Stream - screen 5\" width=\"824\" height=\"926\" /></a></p> \n<p>Once the stream is created, it will start to replicate the data. I can monitor the stream’s status and check for eventual errors.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-46-59.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_15-46-59.png\" alt=\"Create Firehose Stream - screen 6\" width=\"800\" height=\"600\" /></a></p> \n<p><strong>Now, it’s time to test the stream.</strong></p> \n<p>I open a connection to the database and insert a new line in a table.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_19-12-50.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/25/2024-10-25_19-12-50.png\" alt=\"Firehose - MySQL\" width=\"800\" height=\"434\" /></a></p> \n<p>Then, I navigate to the S3 bucket configured as the destination and I observe that a file has been created to store the data from the table.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/28/2024-10-28_10-36-55.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/28/2024-10-28_10-36-55.png\" alt=\"View parquet files on S3 bucket\" width=\"800\" height=\"272\" /></a></p> \n<p>I download the file and inspect its content with the <code>parq</code> command (you can install that command with <code>pip install parquet-cli</code>)</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/28/2024-10-28_10-56-06.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/28/2024-10-28_10-56-06.png\" alt=\"Parquet file content\" width=\"800\" height=\"123\" /></a></p> \n<p>Of course, downloading and inspecting <a href=\"https://en.wikipedia.org/wiki/Apache_Parquet\">Parquet</a> files is something I do only for demos. In real life, you’re going to use <a href=\"https://aws.amazon.com/glue/\">AWS Glue</a> and <a href=\"https://aws.amazon.com/athena\">Amazon Athena</a> to manage your <a href=\"https://docs.aws.amazon.com/glue/latest/dg/catalog-and-crawler.html\">data catalog</a> and to run <a href=\"https://docs.aws.amazon.com/athena/latest/ug/querying-athena-tables.html\">SQL queries</a> on your data.</p> \n<p><span><strong>Things to know<br /> </strong></span>Here are a few additional things to know.</p> \n<p>This new capability supports self-managed PostgreSQL and MySQL databases on Amazon EC2 and the following databases on Amazon RDS:</p> \n<ul> \n <li><a href=\"https://aws.amazon.com/rds/postgresql/\">Amazon RDS for PostgreSQL</a>, <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.AuroraPostgreSQL.html\">Amazon Aurora PostgreSQL-Compatible Edition</a></li> \n <li><a href=\"https://aws.amazon.com/rds/mysql/\">Amazon RDS for MySQL</a>, <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.AuroraMySQL.html\">Amazon Aurora MySQL-Compatible Edition</a></li> \n</ul> \n<p>The team will continue to add support for additional databases during the preview period and after general availability. They told me they are already working on supporting SQL Server, Oracle, and MongoDB databases.</p> \n<p>Data Firehose uses <a href=\"https://aws.amazon.com/privatelink/\">AWS PrivateLink</a> to connect to databases in your <a href=\"https://aws.amazon.com/vpc/\">Amazon Virtual Private Cloud (Amazon VPC)</a>.</p> \n<p>When setting up an Amazon Data Firehose delivery stream, you can either specify specific tables and columns or use wildcards to specify a class of tables and columns. When you use wildcards, if new tables and columns are added to the database after the Data Firehose stream is created and if they match the wildcard, Data Firehose will automatically create those tables and columns in the destination.</p> \n<p><span><strong>Pricing and availability<br /> </strong></span>The new data streaming capability is available today in all AWS Regions except China Regions, AWS GovCloud (US) Regions, and Asia Pacific (Malaysia) Regions. We want you to evaluate this new capability and provide us with feedback. There are no charges for your usage at the beginning of the preview. At some point in the future, it will be priced based on your actual usage, for example, based on the quantity of bytes read and delivered. There are no commitments or upfront investments. Make sure to read <a href=\"https://aws.amazon.com/firehose/pricing/\">the pricing page</a> to get the details.</p> \n<p>Now, go <a href=\"https://docs.aws.amazon.com/firehose/latest/dev/database-as-source-iceberg.html\">configure your first continual database replication</a> to Apache Iceberg tables on Amazon S3 and visit <a href=\"http://aws.amazon.com/firehose\">http://aws.amazon.com/firehose</a>.</p> \n<p><a href=\"https://twitter.com/sebsto\">-- seb</a></p>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"5c063e497a41b6103b48e4a958390d857e922c6f10a7816bc28ff49d56479810","category":"Tech"}