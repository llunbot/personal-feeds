{"title":"Terraform AWS provider tops 4 billion downloads, 6.0 now in public beta","link":"https://www.hashicorp.com/blog/terraform-aws-provider-tops-4-billion-downloads-6-0-now-in-public-beta","date":1746550800000,"content":"<p>The Terraform AWS provider serves as the bridge between Terraform configurations and AWS, enabling users to define and manage AWS resources as code. We are excited to share that version 6.0 of the Terraform AWS provider is now available in public beta. Along with bugfixes, the latest update brings enhanced multi-region support and other workflow improvements. </p>\n\n<p>This post will explore the enhanced mult-region support features and announce the provider’s latest downloads milestone.</p>\n\n<h2>Terraform AWS provider reaches 4 billion downloads</h2>\n\n<p>We are excited to announce that this release coincides with a new milestone: The Terraform AWS provider has surpassed 4 billion downloads.</p>\n<img src=\"https://www.datocms-assets.com/2885/1746632363-screenshot-2025-05-07-at-11-38-45-am.png\" alt=\"AWS\" /><p>As we approach 5 billion downloads, AWS and HashiCorp continue to expand their partnership — delivering new integrations that help customers move faster, adopt more AWS services and features, and deploy infrastructure with developer-friendly workflows. For example, we recently partnered to develop <a href=\"https://www.hashicorp.com/en/blog/simplify-policy-adoption-in-terraform-with-pre-written-sentinel-policies-for-aws\">pre-written Sentinel policy sets for AWS</a> to simplify policy adoption and provide a turnkey governance solution for our customers. </p>\n\n<p>With Terraform, HashiCorp aims to provide launch-day support for all AWS services, ensuring immediate access to the latest innovations. We also recommend you learn about the <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest\">AWSCC provider</a> and <a href=\"https://www.hashicorp.com/en/blog/aws-and-awscc-terraform-providers-better-together\">compare it to the AWS provider</a>.</p>\n\n<h2>Enhanced region support</h2>\n\n<p>Previously in the Terraform AWS provider, each provider configuration targeted a single AWS region. With this limitation, practitioners had to update every configuration file individually if they wanted to change a particular resource’s configuration. For global companies, this could mean editing the same parameter in up to 32 separate configuration files for each region.</p>\n\n<p>With 6.0, the AWS provider now supports multiple regions all within a single configuration file. This new approach leverages an injected <code>region</code> attribute at the resource level to simplify configuration efforts. This method also reduces the need to load multiple instances of the AWS provider, lowering memory usage overall.</p>\n\n<p>Here are some more key highlights in this feature:</p>\n\n<ul>\n<li><strong>Single provider configuration</strong>: Reduces the need to load multiple instances of the AWS provider, lowering memory usage.<br /></li>\n<li><strong>Region attribute injection</strong>: The <code>region</code> argument is added to all resources (except global resources) without requiring explicit schema changes.<br /></li>\n<li><strong>Global resources exclusion</strong>: Services like IAM, CloudFront, and Route 53 remain unaffected as they operate globally.<br /></li>\n<li><strong>Terraform plugin framework updates</strong>: Adjustments to the AWS API client mechanism support per-region API client mappings.<br /></li>\n<li><strong>Resource import enhancements</strong>: A new <code>@&lt;regionID&gt;</code> suffix allows importing of resources from different regions.<br /></li>\n<li><strong>Documentation and testing</strong>: Changes are documented at the provider level and tested to ensure backward compatibility.</li>\n</ul>\n\n<p>This example shows how to use the new region attribute for the <code>aws\\vpc\\peering\\connection\\accepter</code> in your Terraform configuration: </p>\n<pre><code>provider \"aws\" {\n  region = \"us-east-1\"\n}\n\nresource \"aws_vpc\" \"main\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n\nresource \"aws_vpc\" \"peer\" {\n  region = \"us-west-2\"\n\n  cidr_block = \"10.1.0.0/16\"\n}\n\n# Requester's side of the connection.\nresource \"aws_vpc_peering_connection\" \"main\" {\n  vpc_id      = aws_vpc.main.id\n  peer_vpc_id = aws_vpc.peer.id\n  peer_region = \"us-west-2\"\n  auto_accept = false\n}\n\n# Accepter's side of the connection.\nresource \"aws_vpc_peering_connection_accepter\" \"peer\" {\n  region = \"us-west-2\"\n\n  vpc_peering_connection_id = aws_vpc_peering_connection.main.id\n  auto_accept               = true\n}</code></pre><p>This is an example of how to use the new region attribute for the <code>aws\\kms\\replica\\key</code> in your Terraform configuration: </p>\n<pre><code>### KMS Replica Key\n\n#### Terraform AWS Provider v6 (and above)\n\n```terraform\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\nresource \"aws_kms_key\" \"primary\" {\n  region = \"us-east-1\"\n\n  description             = \"Multi-Region primary key\"\n  deletion_window_in_days = 30\n  multi_region            = true\n}\n\nresource \"aws_kms_replica_key\" \"replica\" {\n  description             = \"Multi-Region replica key\"\n  deletion_window_in_days = 7\n  primary_key_arn         = aws_kms_key.primary.arn\n}</code></pre><h2>Getting started</h2>\n\n<p>The Terraform AWS provider 6.0 pre-release is labeled \"beta\" and uploaded to the Terraform Registry as usual. It is important to note that users with permissive version constraints will not automatically use the new beta version. Instead, they will need to opt in by specifying the <a href=\"https://developer.hashicorp.com/terraform/language/expressions/version-constraints#specify-a-pre-release-version\">pre-release version</a> in their <a href=\"https://developer.hashicorp.com/terraform/language/providers/requirements#version-constraints\">provider requirements</a>:</p>\n<pre><code>terraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"= 6.0.0-beta1\"\n    }\n  }\n}</code></pre><p>When upgrading to version 6.0 of the Terraform AWS provider, please consult the <a href=\"https://registry.terraform.io/providers/hashicorp/aws/6.0.0-beta1/docs/guides/version-6-upgrade\">upgrade guide</a> on the Terraform Registry as it contains not only a list of changes but also examples. Because this release introduces breaking changes, we recommend <a href=\"https://developer.hashicorp.com/terraform/language/providers/requirements#best-practices-for-provider-versions\">pinning your provider version</a> to protect against unexpected results. </p>\n\n<p>For the full list of updates in version 6.0, please refer to the <a href=\"https://github.com/hashicorp/terraform-provider-aws/issues/41101\">summary of changes</a> on GitHub. The beta will run for six weeks. Please submit any feedback by creating an issue in the provider using the <a href=\"https://github.com/hashicorp/terraform-provider-aws/issues/new?template=05_beta_feedback.yml\">beta-feedback form</a>.</p>\n\n<p>To learn the basics of Terraform using this provider, follow the hands-on tutorials for <a href=\"https://developer.hashicorp.com/terraform/tutorials/aws-get-started\">getting started with Terraform on AWS</a> on our developer education platform. Interact with AWS services, including <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a>, <a href=\"https://aws.amazon.com/rds/\">Amazon RDS</a>, and <a href=\"https://aws.amazon.com/iam/\">AWS IAM</a> by following the <a href=\"https://developer.hashicorp.com/terraform/tutorials/aws\">AWS services tutorials</a>.</p>\n\n<p>If you are currently using Terraform Community Edition or are completely new to Terraform, <a href=\"http://hashi.co/tf-cloud-bc\">try HCP Terraform</a> for free today.</p>\n","author":"Mitchell Ross","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"06e613ea90e3e4dc1e4d46a9774209e247a7c1343ec69331c41c362296556544","category":"Tech"}