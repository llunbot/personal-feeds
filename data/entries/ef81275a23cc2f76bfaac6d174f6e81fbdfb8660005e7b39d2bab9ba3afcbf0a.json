{"title":"Three Insights I Gained While Researching Vue.js Accessibility","link":"https://smashingmagazine.com/2021/07/three-insights-vuejs-accessibility/","date":1626440400000,"content":"<p>JavaScript frameworks like React, Angular and Vue have a very bad reputation when it comes to web accessibility. But is this due to inherent technical limitations or insurmountable problems of those tools? I think not. During the research phase of my book, “<a href=\"https://accessible-vue.com/\">Accessible Vue</a>,” I gained three insights regarding web app accessibility in general and the framework in particular. Considering these, perhaps it’s worth taking another perspective around accessible Vue apps.</p>\nInsight 1: JavaScript Framework Features For Accessibility Are Underused\n<p>Component-based design, enabled and enforced by modern JavaScript frameworks, does not only provide great developer experiences and project ergonomics when used in a smart way, but it can also offer advantages for accessibility. The first is <strong>the factor of reusability</strong>, i.e. when your component gets used in several places within your app (perhaps in different forms or shapes) and it only has to be made accessible only once. In this case, an increased developer experience actually helps the user and “baking accessibility into components” (<a href=\"https://hiddedevries.nl/en/blog/2019-05-24-baking-accessibility-into-components-how-frameworks-help\">as Hidde de Vries puts it)</a> creates a win-win scenario for everyone.</p>\n<p>The second aspect that comes with component based-designs are <code>props</code> — namely in the form that one component can inherit or get context from its parent environment. This forwarding of “environment data” can serve accessibility as well.</p>\n<p>Take headlines, for example. A solid and comprehensible headline structure is not only good for SEO but especially for people using screen readers. When they encounter a sound document outline, constructed with headlines that structure a web page or app, screen reader users gain a quick overview of the web page they are on. Just like visually-abled users don’t read every word on a page but scan for interesting things, <strong>blind screen reader users don’t make their software read each and every word</strong>. Instead, they are checking a document for content and functionality they are interested in. Headlines, for that matter, are keeping pieces of content together and are at the same time providing a structural frame of a document (<a href=\"https://en.wikipedia.org/wiki/Timber_framing\">think timber frame houses</a>).</p>\n<p>What makes headlines providing a structure is not only their mere existence. It is also their nesting that creates an image inside a user’s mind. For that, a web developer’s headline toolbox contains six levels (<code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code>). By applying these levels, both editors and developers can create an outline of content and a reliable functionality that users can expect in the document.</p>\n<p>For example, let’s take the (abridged) headline tree from the <a href=\"https://www.gov.uk/\">GOV.UK website</a>:</p>\n<pre><code>1 — Welcome to GOV.UK\n  2 — Popular on GOV.UK\n  2 — Services and information\n    3 — Benefits\n    3 — Births, deaths, marriages and care\n    3 — Business and self-employment\n    // …etc\n  2 — Departments and policy\n    3 — Coronavirus (COVID 19)\n    3 — Travel abroad: step by step\n…etc\n</code></pre>\n\n<p>Even without visiting the actual page and without actually perceiving it visually, this headline tree created a table of contents helping you understand what sections can be expected on the front page. The creators used headline elements <a href=\"https://hiddedevries.nl/en/blog/2020-09-05-when-there-is-no-content-between-headings\">to herald data following it</a> and didn’t skip headline levels.</p>\n<p>So far, so familiar (at least in correlation with search engines, I guess). However, because a component can be used in different places of your app, hardwired headline levels inside them can sometimes create a suboptimal headline tree overall. <strong>Relations between headlines</strong> possibly aren’t conveyed as clear as in the example above (“Business and self-employment” does not stand on its own but is related to “Services and information”). </p>\n<p>For example, imagine a listing of a shop’s newest products that can be placed both in the main content and a sidebar — it’s quite possible that both sections live in different contexts. A headline such as <code>&lt;h1&gt;Our latest arrivals&lt;/h1&gt;</code> would make sense above the product list in the main content — given it is the central content of the whole document or view. </p>\n<p>The same component sporting the same <code>&lt;h1&gt;</code>  but placed in a sidebar of another document, however, would suggest the most important content lives in the sidebar and competes with the <code>&lt;h1&gt;</code> in the main content. While what I described above is a peculiarity of component-based design in general this gives us a perfect opportunity to put both aspects together — the need for a sound headline tree and our knowledge about props:</p>\n<h3>Context Via <code>props</code></h3>\n<p>Let’s progress from theoretical considerations into hands-on code. In the following code block, you see a component listing the newest problems in an online shop. It is extremely simplyified but the emphasis is on line 3, the hardcoded <code>&lt;h1&gt;</code>:</p>\n<pre><code>&lt;template&gt;\n    &lt;div&gt;\n        &lt;h1&gt;Our latest arrivals&lt;/h1&gt;\n        &lt;ol&gt;\n            &lt;li&gt;Product A&lt;/li&gt;\n            &lt;li&gt;Product B&lt;/li&gt;\n            &lt;!-- etc --&gt;\n        &lt;/ol&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n\n<p>To use this component in different places of the app without compromising the document’s headline tree, we want to make the headline level dynamic. To achieve this, we replace the <code>&lt;h1&gt;</code> with Vue’s <a href=\"https://vuejs.org/v2/guide/components.html#Dynamic-Components\">dynamic component name</a> helper called, well, <code>component</code>:</p>\n<pre><code>&lt;component :is=\"headlineElement\"&gt;Our latest arrivals&lt;/component&gt;\n</code></pre>\n\n<p>In the script part of our component, we now have to add two things:</p>\n<ul>\n<li>A component prop that receives the exact headline level as a string, <code>headlineLevel</code>;</li>\n<li>A computed property (<code>headlineElement</code> from the code example above) that builds a proper HTML element out of the string <code>h</code> and the value of <code>headlineLevel</code>.</li>\n</ul>\n<p>So our simplified script block looks like this:</p>\n<pre><code>&lt;script&gt;\nexport default {\n    props: {\n      headlineLevel: {\n        type: String\n    },\n    computed: {\n        headlineElement() {\n          return \"h\" + this.headlineLevel;\n        }\n    }\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>And that’s all!</p>\n<p>Of course, adding checks and sensible defaults on the prop level is necessary — for example, we have to make sure that <code>headlineLevel</code> can only be a number between 1 and 6. Both Vue’s native <a href=\"https://vuejs.org/v2/guide/components-props.html#Prop-Validation\">Prop Validation</a>, as well as TypeScript, are tools at your disposal to do just that, but I wanted to keep it out of this example.</p>\n<p>If you happen to be interested in learning how to accomplish the exact same concept using React, <a href=\"https://medium.com/@Heydon/managing-heading-levels-in-design-systems-18be9a746fa3\">friend of the show magazine Heydon Pickering wrote about the topic back in 2018</a> and supplied React/JSX sample code. Tenon UI’s Heading Components, also written for React, take this concept even further and aim to automate headline level creation by using so-called “LevelBoundaries” and a generic <code>&lt;Heading&gt;</code> element. <a href=\"https://www.tenon-ui.info/headings/\">Check it out</a>!</p>\nInsight 2: There Are Established Strategies To Tackle Web App Accessibility Problems\n<p>While web app accessibility may look daunting the first time you encounter the topic, there’s no need to despair: vested accessibility patterns to tackle typical web app characteristics do exist. In the following Insight, I will introduce you to strategies for supplying <strong>accessible notifications</strong>, including an easy implementation in Vue.js (<a href=\"#strategy-1-announcing-dynamic-updates-with-live-regions\">Strategy 1</a>), then point you towards recommended patterns and their Vue counterparts (<a href=\"#strategy-2-using-undisputed-wai-aria-authoring-practices\">Strategy 2</a>). Lastly, I recommend taking a look at both Vue’s emerging (<a href=\"#strategy-3-view-and-help-vue-s-accessibility-initiatives-grow\">Strategy 3</a>) and React’s established accessibility community (<a href=\"#strategy-4-learn-from-react-accessibility-leads\">Strategy 4</a>).</p>\n<h3>Strategy 1: Announcing Dynamic Updates With Live Regions</h3>\n<p>While accessibility is more than making things screen reader compatible, improving the screen reader experience plays a big part of web app accessibility. This is rooted in the general working principle of this form of assistive technology: screen reader software transforms content on the screen into <strong>either audio or braille output</strong>, thus enabling blind people to interact with the web and technology in general.</p>\n<p>Like keyboard focus, a screen reader’s output point, the so-called <strong>virtual cursor</strong>, can only be at one place at once. At the same time, one core aspect of web apps is a dynamic change in parts of the document without page reload. But what happens, for example, when the update in the DOM is actually <em>above</em> the virtual cursor’s position in the document? Users likely would not notice the change because do not tend to traverse the document in reverse — unless they are somehow informed of the dynamic update.</p>\n<p>In the following short video, I demonstrate what happens (or rather, what <em>not</em> happens) if an interaction causes a <strong>dynamic DOM change</strong> nowhere near the virtual cursor — the screen reader just stays silent:</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e15cfbad-5787-4c55-82a8-7bd8aa687007/off-canvas-navigation.png\" /></p>\n<p>In this case, you need to establish at least two refs: One for the trigger button that opens the navigation (let’s call it <code>navTrigger</code>), and one for the element that gains focus as soon as the navigation is visible (<code>navContainer</code> in this example, an element which needs <code>tabindex=\"-1\"</code> to be programmatically focusable). So that, when the trigger button is clicked, the focus will be sent into the navigation itself. And vice versa: As soon as the navigation closes, the focus must return to the trigger.</p>\n<p>After having read the paragraphs above, I hope one thing becomes clear for you, dear reader: Once you understand the importance of focus management, you realize that all the necessary tools are at your fingertips — namely Vue’s <code>this.$refs</code> and JavaScript’s native <code>.focus()</code></p>\nConclusion\n<p>By highlighting some of my core findings regarding web app accessibility, I hope that I have been able to help reduce any diffuse fear of this topic that may have existed, and you now feel more confident to build accessible apps with the help of Vue.js (if you want to dive deeper into the topic, check out if my little ebook <a href=\"https://accessible-vue.com/\">“Accessible Vue”</a> can help you along the journey).</p>\n<p>More and more websites are becoming more and more app-like, and it would be sad if these amazing digital products were to remain so barrier-laden only because web developers don’t know exactly where to start with the topic. It’s a <strong>genuinely enabling moment</strong> once you realize that a vast majority of web app accessibility is actually “good old” web accessibility, and for the rest of it, cowpaths are already paved. </p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"ef81275a23cc2f76bfaac6d174f6e81fbdfb8660005e7b39d2bab9ba3afcbf0a","category":"Tech"}