{"title":"New for AWS Amplify – Query MySQL and PostgreSQL database for AWS CDK","link":"https://aws.amazon.com/blogs/aws/new-for-aws-amplify-query-mysql-and-postgresql-database-for-aws-cdk/","date":1702404021000,"content":"<p>Today we are announcing the general availability to connect and query your existing MySQL and PostgreSQL databases with support for <a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit</a> (AWS CDK), a new feature to create a real-time, secure GraphQL API for your relational database within or outside Amazon Web Services (AWS). You can now generate the entire API for all relational database operations with just your database endpoint and credentials. When your database schema changes, you can run a command to apply the latest table schema changes.</p> \n<p>In 2021, we announced <a href=\"https://aws.amazon.com/about-aws/whats-new/2021/11/aws-amplify-redesigned-graphql-transformer-app-backends/\">AWS Amplify GraphQL Transformer version 2</a>, enabling developers to develop more feature-rich, flexible, and extensible GraphQL-based app backends even with minimal cloud expertise. This new GraphQL Transformer was redesigned from the ground up to generate extensible pipeline resolvers to route a GraphQL API request, apply business logic, such as authorization, and communicate with the underlying data source, such as <a href=\"https://aws.amazon.com/dynamodb\">Amazon DynamoDB</a>.</p> \n<p>However, customers wanted to use <a href=\"https://github.com/aws-amplify/amplify-category-api/issues/815\">relational database sources for their GraphQL APIs</a> such as their <a href=\"https://aws.amazon.com/rds\">Amazon RDS</a> or <a href=\"https://aws.amazon.com/rds/aurora\">Amazon Aurora</a> databases in addition to Amazon DynamoDB. You can now use <code>@model</code> types of Amplify GraphQL APIs for both relational database and DynamoDB data sources. Relational database information is generated to a separate <code>schema.sql.graphql</code> file. You can continue to use the regular <code>schema.graphql</code> files to create and manage DynamoDB-backed types.</p> \n<p>When you simply provide any MySQL or PostgreSQL database information, whether behind a virtual private cloud (VPC) or publicly accessible on the internet, <a href=\"https://aws.amazon.com/amplify/\">AWS Amplify</a> automatically generates a modifiable GraphQL API that securely connects to your database tables and exposes <a href=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\">create, read, update, or delete</a> (CRUD) queries and mutations. You can also rename your data models to be more idiomatic for the frontend. For example, a database table is called “todos” (plural, lowercase) but is exposed as “ToDo” (singular, PascalCase) to the client.</p> \n<p>With one line of code, you can add any of the existing <a href=\"https://docs.amplify.aws/react/build-a-backend/graphqlapi/customize-authorization-rules/\">Amplify GraphQL authorization rules</a> to your API, making it seamless to build use cases such as owner-based authorization or public read-only patterns. Because the generated API is built on <a href=\"https://aws.amazon.com/appsync/\">AWS AppSync</a>‘ GraphQL capabilities, secure real-time subscriptions are available out of the box. You can subscribe to any CRUD events from any data model with a few lines of code.</p> \n<p><strong><u>Getting started with your MySQL database in AWS CDK</u></strong><br /> The AWS CDK lets you build reliable, scalable, cost-effective applications in the cloud with the considerable expressive power of a programming language. To get started, <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/getting_started.html\">install the AWS CDK</a> on your local machine.</p> \n<pre><code>$ npm install -g aws-cdk</code></pre> \n<p>Run the following command to verify the installation is correct and print the version number of the AWS CDK.</p> \n<pre><code>$ cdk –version</code></pre> \n<p>Next, create a new directory for your app:</p> \n<pre><code>$ mkdir amplify-api-cdk\n$ cd amplify-api-cdk</code></pre> \n<p>Initialize a CDK app by using the <code>cdk init</code> command.</p> \n<pre><code>$ cdk init app --language typescript</code></pre> \n<p>Install Amplify’s GraphQL API construct in the new CDK project:</p> \n<pre><code>$ npm install @aws-amplify/graphql-api-construct</code></pre> \n<p>Open the main stack file in your CDK project (usually located in <code>lib/&lt;your-project-name&gt;-stack.ts</code>). Import the necessary constructs at the top of the file:</p> \n<pre><code>import {\n    AmplifyGraphqlApi,\n    AmplifyGraphqlDefinition\n} from '@aws-amplify/graphql-api-construct';</code></pre> \n<p>Generate a GraphQL schema for a new relational database API by executing the following SQL statement on your MySQL database. Make sure to output the results to a .csv file, including column headers, and replace <code>&lt;database-name&gt;</code> with the name of your database, schema, or both.</p> \n<pre><code>SELECT\n  INFORMATION_SCHEMA.COLUMNS.TABLE_NAME,\n  INFORMATION_SCHEMA.COLUMNS.COLUMN_NAME,\n  INFORMATION_SCHEMA.COLUMNS.COLUMN_DEFAULT,\n  INFORMATION_SCHEMA.COLUMNS.ORDINAL_POSITION,\n  INFORMATION_SCHEMA.COLUMNS.DATA_TYPE,\n  INFORMATION_SCHEMA.COLUMNS.COLUMN_TYPE,\n  INFORMATION_SCHEMA.COLUMNS.IS_NULLABLE,\n  INFORMATION_SCHEMA.COLUMNS.CHARACTER_MAXIMUM_LENGTH,\n  INFORMATION_SCHEMA.STATISTICS.INDEX_NAME,\n  INFORMATION_SCHEMA.STATISTICS.NON_UNIQUE,\n  INFORMATION_SCHEMA.STATISTICS.SEQ_IN_INDEX,\n  INFORMATION_SCHEMA.STATISTICS.NULLABLE\n      FROM INFORMATION_SCHEMA.COLUMNS\n      LEFT JOIN INFORMATION_SCHEMA.STATISTICS ON INFORMATION_SCHEMA.COLUMNS.TABLE_NAME=INFORMATION_SCHEMA.STATISTICS.TABLE_NAME AND INFORMATION_SCHEMA.COLUMNS.COLUMN_NAME=INFORMATION_SCHEMA.STATISTICS.COLUMN_NAME\n      WHERE INFORMATION_SCHEMA.COLUMNS.TABLE_SCHEMA = '&lt;database-name&gt;';\n</code></pre> \n<p>Run the following command, replacing <code>&lt;path-schema.csv&gt;</code> with the path to the .csv file created in the previous step.</p> \n<pre><code>$ npx @aws-amplify/cli api generate-schema \\\n    --sql-schema &lt;path-to-schema.csv&gt; \\\n    --engine-type mysql –out lib/schema.sql.graphql</code></pre> \n<p>You can open <code>schema.sql.graphql</code> file to see the imported data model from your MySQL database schema.</p> \n<pre><code>input AMPLIFY {\n     engine: String = \"mysql\"\n     globalAuthRule: AuthRule = {allow: public}\n}\n\ntype Meals @model {\n     id: Int! @primaryKey\n     name: String!\n}\n\ntype Restaurants @model {\n     restaurant_id: Int! @primaryKey\n     address: String!\n     city: String!\n     name: String!\n     phone_number: String!\n     postal_code: String!\n     ...\n}</code></pre> \n<p>If you haven’t already done so, go to the <strong>Parameter Store</strong> in the <a href=\"https://console.aws.amazon.com/systems-manager/parameters\">AWS Systems Manager console</a> and create a parameter for the connection details of your database, such as <code>hostname/url</code>, <code>database name</code>, <code>port</code>, <code>username</code>, and <code>password</code>. These will be required in the next step for Amplify to successfully connect to your database and perform GraphQL queries or mutations against it.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/12/08/Amplify-system-manager-console.jpg\" width=\"1856\" height=\"744\" /></p> \n<p>In the main stack class, add the following code to define a new GraphQL API. Replace the <code>dbConnectionConfg</code> options with the parameter paths created in the previous step.</p> \n<pre><code>new AmplifyGraphqlApi(this, \"MyAmplifyGraphQLApi\", {\n  apiName: \"MySQLApi\",\n  definition: AmplifyGraphqlDefinition.fromFilesAndStrategy(\n    [path.join(__dirname, \"schema.sql.graphql\")],\n    {\n      name: \"MyAmplifyGraphQLSchema\",\n      dbType: \"MYSQL\",\n      dbConnectionConfig: {\n        hostnameSsmPath: \"/amplify-cdk-app/hostname\",\n        portSsmPath: \"/amplify-cdk-app/port\",\n        databaseNameSsmPath: \"/amplify-cdk-app/database\",\n        usernameSsmPath: \"/amplify-cdk-app/username\",\n        passwordSsmPath: \"/amplify-cdk-app/password\",\n      },\n    }\n  ),\n  authorizationModes: { apiKeyConfig: { expires: cdk.Duration.days(7) } },\n  translationBehavior: { sandboxModeEnabled: true },\n});</code></pre> \n<p>This configuration assums that your database is accessible from the internet. Also, the default authorization mode is set to Api Key for AWS AppSync and the sandbox mode is enabled to allow public access on all models. This is useful for testing your API before adding more fine-grained authorization rules.</p> \n<p>Finally, deploy your GraphQL API to AWS Cloud.</p> \n<pre><code>$ cdk deploy</code></pre> \n<p>You can now go to the <a href=\"http://console.aws.amazon.com/appsync\">AWS AppSync console</a> and find your created GraphQL API.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/12/08/Amplify-fig1-API-1.png\" width=\"1092\" height=\"396\" /></p> \n<p>Choose your project and the <strong>Queries</strong> menu. You can see newly created GraphQL APIs compatible with your tables of MySQL database, such as <code>getMeals</code> to get one item or <code>listRestaurants</code> to list all items.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/10/Amplify-fig2-queries.png\" width=\"1092\" height=\"594\" /></p> \n<p>For example, when you select items with fields of <code>address</code>, <code>city</code>, <code>name</code>, <code>phone_number</code>, and so on, you can see a new GraphQL query. Choose the <strong>Run</strong> button and you can see the query results from your MySQL database.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/10/Amplify-fig3-querie-results.png\" width=\"1092\" height=\"430\" /></p> \n<p>When you query your MySQL database, you can see the same results.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/10/Amplify-fig4-mySQL-db.png\" width=\"1092\" height=\"498\" /></p> \n<p><strong><u>How to customize your GraphQL schema for your database</u></strong><br /> To add a custom query or mutation in your SQL, open the generated <code>schema.sql.graphql</code> file and use the <code>@sql(statement: \"\")</code> pass in parameters using <code>the :&lt;variable&gt;</code> notation.</p> \n<pre><code>type Query {\n     listRestaurantsInState(state: String): Restaurants @sql(\"SELECT * FROM Restaurants WHERE state = :state;”)\n}</code></pre> \n<p>For longer, more complex SQL queries, you can reference SQL statements in the <code>customSqlStatements</code> config option. The reference value must match the name of a property mapped to a SQL statement. In the following example, a <code>searchPosts</code> property on <code>customSqlStatements</code> is being referenced:</p> \n<pre><code>type Query {\n      searchPosts(searchTerm: String): [Post]\n      @sql(reference: \"searchPosts\")\n}</code></pre> \n<p>Here is how the SQL statement is mapped in the API definition.</p> \n<pre><code>new AmplifyGraphqlApi(this, \"MyAmplifyGraphQLApi\", { \n    apiName: \"MySQLApi\",\n    definition: AmplifyGraphqlDefinition.fromFilesAndStrategy( [path.join(__dirname, \"schema.sql.graphql\")],\n    {\n        name: \"MyAmplifyGraphQLSchema\",\n        dbType: \"MYSQL\",\n        dbConnectionConfig: {\n        //\t...ssmPaths,\n     }, customSqlStatements: {\n        searchPosts: // property name matches the reference value in schema.sql.graphql \n        \"SELECT * FROM posts WHERE content LIKE CONCAT('%', :searchTerm, '%');\",\n     },\n    }\n  ),\n//...\n});\n</code></pre> \n<p>The SQL statement will be executed as if it were defined inline in the schema. The same rules apply in terms of using parameters, ensuring valid SQL syntax, and matching return types. Using a reference file keeps your schema clean and allows the reuse of SQL statements across fields. It is best practice for longer, more complicated SQL queries.</p> \n<p>Or you can change a field and model name using the <code>@refersTo</code> directive. If you don’t provide the <code>@refersTo</code> directive, AWS Amplify assumes that the model name and field name exactly match the database table and column names.</p> \n<pre><code>type Todo @model @refersTo(name: \"todos\") {\n     content: String\n     done: Boolean\n}</code></pre> \n<p>When you want to create relationships between two database tables, use the <code>@hasOne</code> and <code>@hasMany</code> directives to establish a 1:1 or 1:M relationship. Use the <code>@belongsTo</code> directive to create a bidirectional relationship back to the relationship parent. For example, you can make a 1:M relationship between a restaurant and its meals menus.</p> \n<pre><code>type Meals @model {\n     id: Int! @primaryKey\n     name: String!\n     menus: [Restaurants] @hasMany(references: [\"restaurant_id\"])\n}\n\ntype Restaurants @model {\n     restaurant_id: Int! @primaryKey\n     address: String!\n     city: String!\n     name: String!\n     phone_number: String!\n     postal_code: String!\n     meals: Meals @belongsTo(references: [\"restaurant_id\"])\n     ...\n}</code></pre> \n<p>Whenever you make any change to your GraphQL schema or database schema in your DB instances, you should deploy your changes to the cloud:</p> \n<p>Whenever you make any change to your GraphQL schema or database schema in your DB instances, you should re-run the SQL script and export to .csv step mentioned earlier in this guide to re-generate your <code>schema.sql.graphql</code> file and then deploy your changes to the cloud:</p> \n<p><code>$ cdk deploy</code></p> \n<p>To learn more, see <a href=\"https://docs.amplify.aws/react/build-a-backend/graphqlapi/connect-api-to-existing-database/\">Connect API to existing MySQL or PostgreSQL database</a> in the AWS Amplify documentation.</p> \n<p><strong><u>Now available</u></strong><br /> The relational database support for AWS Amplify now works with any MySQL and PostgreSQL databases hosted anywhere within Amazon VPC or even outside of AWS Cloud.</p> \n<p>Give it a try and send feedback to <a href=\"https://repost.aws/tags/TAxd9wmFJAQp-XtLjE63hasw/aws-amplify\">AWS re:Post for AWS Amplify</a>, the <a href=\"https://github.com/aws-amplify/amplify-category-api/issues\">GitHub repository</a> of Amplify GraphQL API, or through your usual AWS Support contacts.</p> \n<p>— <a href=\"https://twitter.com/channyun\">Channy</a></p> \n<p><em>P.S. Specially thanks to <a href=\"https://www.linkedin.com/in/renebrandel/\">René Huangtian Brandel</a>, a principal product manager at AWS for his contribution to write sample codes.</em></p>","author":"Channy Yun","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"7433c16f4eaa8fd0fc31347b5710a6b8bc2f86032f1abdccfb45e97c7a911eb1","category":"Tech"}