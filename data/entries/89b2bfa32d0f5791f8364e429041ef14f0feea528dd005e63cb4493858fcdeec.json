{"title":"สรุปเรื่องปรับปรุงประสิทธิภาพการทำงานของ APIs","link":"https://www.somkiat.cc/note-api-performacne-improvement/","date":1696745178000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/10/plan-do-study-act-150x150.png\" alt loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/10/plan-do-study-act-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2023/10/plan-do-study-act-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/10/plan-do-study-act.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/10/plan-do-study-act.png\" alt width=\"715\" height=\"438\" /></a></figure>\n\n\n\n<p>หนึ่งในคำถามใน <strong><a href=\"https://www.skooldio.com/workshops/bundle-microservices?skuCode=P00016-14\" target=\"_blank\">course Microservice Design ที่ Skooldio</a></strong> ที่น่าสนใจคือ<br />แนวทางในการปรับปรุงประสิทธิภาพการทำงานของ APIs ให้ดีขึ้น<br />ว่าเราควรทำอย่างไรบ้าง ?<br />เท่าที่จำได้ก็จะตอบไปบางส่วน<br />จึงได้ทำการหาและสรุปข้อมูลเพิ่มเติม ได้ดังนี้<br />คิดว่าน่าจะพอมีประโยชน์</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>ไปเจอแหล่งข้อมูลที่น่าสนใจ ประกอบไปด้วย</strong></p>\n\n\n\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=zvWKqUiovAM\" target=\"_blank\">VDO Top 7 Ways to 10x Your API Performance จาก ByteByteGo</a></li>\n\n\n\n<li><a href=\"https://blog.dreamfactory.com/8-tips-for-optimizing-an-api/\" target=\"_blank\">8 Tips for Optimizing an API</a></li>\n</ul>\n\n\n\n<p>มาดูรายละเอียดกันนิดหน่อย</p>\n\n\n\n<p><strong>เรื่องที่ 1 คือ การออกแบบ API ให้มีมาตรฐานเดียวกัน (Consistency)</strong></p>\n\n\n\n<p>อาจจะไม่เกี่ยวกับ performance มากเท่าไร<br />แต่เป็นสิ่งที่สำคัญมาก ๆ เพื่อให้ทั้งคนออกแบบ และ ใช้งาน และ พัฒนา ทำงานง่ายขึ้น<br />เพื่อเพิ่ม productivity ให้กับงานอีกด้วย<br />รวมทั้งเรื่องของการ monitoring/observability อีกด้วย<br />แล้วอย่างลืมเรื่องของ API compatablity ด้วย</p>\n\n\n\n<p><strong>เรื่องที่ 2 การจัดการกับข้อมูลจำนวนมาก</strong></p>\n\n\n\n<p>ยกตัวอย่างเช่น<br />การดึงข้อมูลจำนวนมาก ๆ ควรใช้งาน pagination เข้ามาด้วย<br />คงไม่มีใครดึงข้อมูล หรือ return ข้อมูลจำนวนมาก ๆ กลับมาจาก request เดียวกันหรอกนะครับ<br />แต่ถ้ามีหลาย ๆ หน้าแล้ว ปัญหาที่ตามมาคือ ยิ่งมีจำนวนหน้ามาก ๆ การดึงข้อมูลยิ่งช้า<br />ซึ่งต้องระมัดระวังให้มาก ๆ</p>\n\n\n\n<p>ถ้าข้อมูลมากจริง ๆ ควรทำการแยกข้อมูลเป็นส่วน ๆ ไปตามการใช้งาน<br />ยกตัวอย่างเช่น</p>\n\n\n\n<ul>\n<li>แยกข้อมูลตามช่วงเวลา เช่น แยกเป็นรายปี รายเดือน เป็นต้น</li>\n\n\n\n<li>แยกข้อมูลตามจังหวัด หรือ ประเทศ หรือ กลุ่มการใช้งาน</li>\n\n\n\n<li>การทำ pre-join หรือ pre-aggregate เพื่อลดการประมวลผล</li>\n\n\n\n<li>ลดการ order by ลงไปให้มาก ๆ เพราะว่า ใช้ resource เยอะมาก ๆ</li>\n</ul>\n\n\n\n<p>ในการแยกข้อมูลของ database นั้นมีทั้ง partition และ sharding ที่ควรต้องทำ<br />เราคงไม่อยากไปดึงข้อมูลบางส่วน จากข้อมูลทั้งหมดที่มีจำนวนเยอะ ๆ หรอกนะ</p>\n\n\n\n<p><strong><a href=\"https://www.somkiat.cc/basic-of-caching/\" target=\"_blank\">เรื่องที่ 3 คือ Caching data ลองอ่านเพิ่มเติมได้</a></strong></p>\n\n\n\n<p><strong>เรื่องที่ 4 ข้อมูลที่ส่งไปมาของ API ควรมีขนาดที่เล็ก</strong></p>\n\n\n\n<p>การออกแบบข้อมูลให้มีเท่าที่ใช้งานจริง ๆ จึงสำคัญมาก ๆ<br />รวมทั้งการบีดอัดข้อมูลก่อนส่งทั้ง request และ response<br />หรือการใช้งานรูปแบบข้อมูลที่เหมาะสม <br />เช่น</p>\n\n\n\n<ul>\n<li>Plain-text</li>\n\n\n\n<li>Binary</li>\n</ul>\n\n\n\n<p>ตัวอย่างหนึ่งที่แนะนำคือ <strong><a href=\"https://github.com/up1/demo-grpc-go\" target=\"_blank\">REST VS gRPC</a></strong> เป็นต้น</p>\n\n\n\n<p><strong>เรื่องที่ 5 การเลือกใช้ Database model ให้เหมาะสมกับงาน</strong></p>\n\n\n\n<p>เนื่องจาก Database model นั้นมีหลายรูปแบบ เช่น</p>\n\n\n\n<ul>\n<li>Relation</li>\n\n\n\n<li>Key-value</li>\n\n\n\n<li>Document</li>\n\n\n\n<li>Column</li>\n\n\n\n<li>Graph</li>\n\n\n\n<li>Search</li>\n\n\n\n<li>Time-series</li>\n</ul>\n\n\n\n<p>จึงต้องเข้าใจก่อนว่า งานของเราเป็นอย่างไร เหมาะสมกับ Database model ประเภทใด<br />เพื่อลดงาน แต่เพิ่มประสิทธิภาพ<br />แต่ถ้านำมาใช้แล้วเพิ่มงาน แสดงว่า น่าจะเลือกใช้งานผิดประเภทแล้วนะ</p>\n\n\n\n<p><strong>เรื่องที่ 6 ปรับปรุงการเข้าถึงข้อมูล หรือ API หรือ Legacy system จำนวนมาก</strong></p>\n\n\n\n<p>ปัญหาที่มักจะพบเจอคือ</p>\n\n\n\n<ul>\n<li>การเข้าถึง database</li>\n\n\n\n<li>การทำ caching</li>\n\n\n\n<li>การ composition ข้อมูล</li>\n\n\n\n<li>การลด latency time ต่าง ๆ</li>\n\n\n\n<li>การลดขนาดของข้อมูล</li>\n\n\n\n<li>การจัดการเรื่อง security</li>\n</ul>\n\n\n\n<p>สามารถนำ API gateway, GraphQL และ Load balance มาใช้งานเพิ่มเติมได้<br />รวมทั้งเรื่องของ CDN (Content Delivery Network) มาช่วยอีกด้วย</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"89b2bfa32d0f5791f8364e429041ef14f0feea528dd005e63cb4493858fcdeec","category":"Thai"}