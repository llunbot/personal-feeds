{"title":"ใช้งาน OpenTelemetry ใน Deno 2.2 กัน","link":"https://www.somkiat.cc/opentelemetry-in-deno/","date":1740205273000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2025/02/deno-lgtm-01-150x150.jpg\" alt=\"\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2025/02/deno-lgtm-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2025/02/deno-lgtm-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/02/deno-lgtm-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/02/deno-lgtm-01.jpg\" alt=\"\" width=\"627\" height=\"356\" /></a></figure>\n\n\n\n<p>จากที่ Deno 2.2 ปล่อยออกมานั้น<br />หนึ่งในความสามารถที่น่าสนใจคือ <strong><a href=\"https://deno.com/blog/v2.2#built-in-opentelemetry\" target=\"_blank\">สนับสนุน OpenTelemetry</a></strong> แล้ว<br />ทำให้การจัดการ log, trace และ metric ของระบบงานง่ายขึ้น<br />โดยจะทำงานแบบ <strong>auto instrumentation</strong> หรือแบบอัตโนมัติโดยที่ไม่ต้องเขียน code เลย<br />แต่ถ้าต้องการ custom หรือสร้าง span ต่าง ๆ ก็ได้อีกด้วย<br />ดังนั้นมาลองใช้งานกัน</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เริ่มด้วยการติดตั้งหรือ upgrade Deno ก่อน</strong></p>\n\n\n\n[gist id=\"f0c267da5087ace024ef2d4964da7501\" file=\"1.txt\"]\n\n\n\n<p><strong>ในการทดลองจะใช้งานร่วมกัน <a href=\"https://github.com/grafana/docker-otel-lgtm\" target=\"_blank\">LGTM stack</a> ผ่าน Docker</strong></p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/02/lgtm-02.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/02/lgtm-02-1024x427.png\" alt=\"\" width=\"506\" height=\"211\" /></a></figure>\n\n\n\n<p><strong>จากนั้นทำการสร้าง server.ts เป็น web server</strong><br />และทำการเรียกใช้งาน service 2 ผ่าน fetch()<br />code ตัวอย่างเป็นดังนี้</p>\n\n\n\n[gist id=\"f0c267da5087ace024ef2d4964da7501\" file=\"server.ts\"]\n\n\n\n<p>คำอธิบาย</p>\n\n\n\n<ul>\n<li>ทำการสร้าง span ใหม่ขึ้นมาจาก current trace (active) สำหรับการทำงานของ function doWork()</li>\n</ul>\n\n\n\n<p>จากนั้นในการ run ต้องเปิดใช้งาน OpenTelemetry ใน Deno ก่อน<br />ด้วยการกำหนด <strong>OTEL_DEMO=true</strong><br />และ feature นี้ยังคงพัฒนาอยู่ท่านั้น อย่าใช้งานจริงนะครับ !!<br />ดังนั้นในการ run ให้ใส่ flag <strong>--unstable-otel</strong> เข้าไปด้วย</p>\n\n\n\n<p><strong>ตัวอย่างของ Dockerfile ของการ run server </strong></p>\n\n\n\n[gist id=\"f0c267da5087ace024ef2d4964da7501\" file=\"Dockerfile\"]\n\n\n\n<p><strong>ทำการ run ทั้งหมดด้วย Docker compose</strong></p>\n\n\n\n<p>โดยทำการกำหนดชื่อ service, url ที่จัดเก็บข้อมูลต่าง ๆ  ใน LGTM stack</p>\n\n\n\n[gist id=\"f0c267da5087ace024ef2d4964da7501\" file=\"compose.yml\"]\n\n\n\n<p><strong>ผลการทำงานจะมี trace เข้ามาใน LGTM stack ดังนี้</strong></p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/02/deno-lgtm-02.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/02/deno-lgtm-02.jpg\" alt=\"\" width=\"691\" height=\"316\" /></a></figure>\n\n\n\n<p>เพียงเท่านี้ก็สามารถลองใช้งานแบบง่าย ๆ ได้แล้ว</p>\n\n\n\n<p><strong>แต่ยังมี<a href=\"https://docs.deno.com/runtime/fundamentals/open_telemetry/#limitations\" target=\"_blank\">ข้อจำกัด</a>พอสมควร เช่น</strong></p>\n\n\n\n<ul>\n<li>ยังไม่สนับสนุน auto propagation ของ Deno.serve() และ fetch() ทำให้เมื่อเมื่อการเรียกข้าม service จะทำให้ trace ไม่เชื่อมต่อกัน</li>\n</ul>\n\n\n\n<p>Code ตัวอย่างอยู่ที่ <a href=\"https://github.com/up1/demo-deno-lgtm\" target=\"_blank\">GitHub:Up1</a></p>\n\n\n\n<p><strong>Reference websites</strong></p>\n\n\n\n<ul>\n<li><a href=\"https://dev.to/grunet/leveraging-opentelemetry-in-deno-45bj\" target=\"_blank\">Leveraging OpenTelemetry in Deno</a></li>\n</ul>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"99f69f7e16e5d6a8f23b2b7899bee76df502cb950c231d9799b6c767a4344ceb","category":"Thai"}