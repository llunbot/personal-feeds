{"title":"Convert AWS console actions to reusable code with AWS Console-to-Code, now generally available","link":"https://aws.amazon.com/blogs/aws/convert-aws-console-actions-to-reusable-code-with-aws-console-to-code-now-generally-available/","date":1728578315000,"content":"<p>Today, we are announcing the general availability (GA) of AWS Console-to-Code that makes it easy to convert AWS console actions to reusable code. You can use AWS Console-to-Code to record your actions and workflows in the console, such as launching an <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instance, and review the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a> commands for your console actions. With just a few clicks, <a href=\"https://aws.amazon.com/q/\">Amazon Q</a> can generate code for you using the infrastructure-as-code (IaC) format of your choice, including <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> template (YAML or JSON), and <a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit (AWS CDK)</a> (TypeScript, Python or Java). This can be used as a starting point for infrastructure automation and further customized for your production workloads, included in pipelines, and more.</p> \n<p>Since we <a href=\"https://aws.amazon.com/about-aws/whats-new/2023/11/aws-console-to-code-preview-generate-console-actions/\">announced the preview last year</a>, AWS Console-to-Code has garnered positive response from customers. It has now been improved further in this GA version, because we have continued to work backwards from customer feedback.</p> \n<p><span><strong>New features in GA<br /> </strong></span></p> \n<ul> \n <li><strong>Support for more services </strong>– During preview, the only supported service was Amazon EC2. At GA, AWS Console-to-Code has extended support to include <a href=\"https://aws.amazon.com/rds/\">Amazon Relational Database Service (RDS)</a> and <a href=\"https://aws.amazon.com/vpc/\">Amazon Virtual Private Cloud (Amazon VPC)</a>.</li> \n <li><strong>Simplified experience</strong> – The new user experience makes it easier for customers to manage the prototyping, recording and code generation workflows.</li> \n <li><strong>Preview code</strong> – The launch wizards for EC2 instances and Auto Scaling groups have been updated to allow customers to generate code for these resources without actually creating them.</li> \n <li><strong>Advanced code generation</strong> – AWS CDK and CloudFormation code generation is powered by Amazon Q machine learning models.</li> \n</ul> \n<p><span><strong>Getting started with AWS Console-to-Code</strong></span><br /> Let’s begin with a simple scenario of launching an Amazon EC2 instance. Start by accessing the <a href=\"https://console.aws.amazon.com/ec2\">Amazon EC2 console</a>. Locate the AWS Console-to-Code widget on the right and choose <strong>Start recording</strong> to initiate the recording.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/06/c2c-1-1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/06/c2c-1-1.png\" width=\"556\" height=\"740\" /></a></p> \n<p>Now, <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-instance-wizard.html\">launch an Amazon EC2 instance</a> using the launch instance wizard in the Amazon EC2 console. After the instance is launched, choose <strong>Stop</strong> to complete the recording.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/06/c2c-2-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/06/c2c-2-1.png\" width=\"556\" height=\"740\" /></a></p> \n<p>In the <strong>Recorded actions</strong> table, review the actions that were recorded. Use the <strong>Type</strong> dropdown list to filter by write actions (<strong>Write</strong>). Choose the <code>RunInstances</code> action. Select <strong>Copy CLI</strong> to copy the corresponding AWS CLI command.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/06/c2c-3-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/06/c2c-3-1.png\" width=\"898\" height=\"490\" /></a></p> \n<p>This is the CLI command that I got from AWS Console-to-Code:</p> \n<pre><code>aws ec2 run-instances \\\n  --image-id \"ami-066784287e358dad1\" \\\n  --instance-type \"t2.micro\" \\\n  --network-interfaces '{\"AssociatePublicIpAddress\":true,\"DeviceIndex\":0,\"Groups\":[\"sg-1z1c11zzz1c11zzz1\"]}' \\\n  --credit-specification '{\"CpuCredits\":\"standard\"}' \\\n  --tag-specifications '{\"ResourceType\":\"instance\",\"Tags\":[{\"Key\":\"Name\",\"Value\":\"c2c-demo\"}]}' \\\n  --metadata-options '{\"HttpEndpoint\":\"enabled\",\"HttpPutResponseHopLimit\":2,\"HttpTokens\":\"required\"}' \\\n  --private-dns-name-options '{\"HostnameType\":\"ip-name\",\"EnableResourceNameDnsARecord\":true,\"EnableResourceNameDnsAAAARecord\":false}' \\\n  --count \"1\"</code></pre> \n<p>This command can be easily modified. For this example, I updated it to launch two instances (<code>--count 2</code>) of type <code>t3.micro</code> (<code>--instance-type</code>). This is a simplified example, but the same technique can be applied to other workflows.</p> \n<p>I executed the command using <a href=\"https://aws.amazon.com/cloudshell/\">AWS CloudShell</a> and it worked as expected, launching two <code>t3.micro</code> EC2 instances:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/09/16/getting-started-4.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/09/16/getting-started-4.png\" width=\"3346\" height=\"1296\" /></a></p> \n<p>The single-click CLI code generation experience is based on the API commands that were used when actions were executed (while launching the EC2 instance). Its interesting to note that the companion screen surfaces recorded actions as you complete them in console. And thanks to the interactive UI with start and stop functionality, its easy to clearly scope actions for prototyping.</p> \n<p><span><strong>IaC generation using AWS CDK<br /> </strong></span>AWS CDK is an open-source framework for defining cloud infrastructure in code and provisioning it through AWS CloudFormation. With AWS Console-to-Code, you can generate AWS CDK code (currently in Java, Python and TypeScript) for your infrastructure workflows.</p> \n<p>Lets continue with the EC2 launch instance use case. If you haven’t done it already, in the <a href=\"https://console.aws.amazon.com/ec2\">Amazon EC2 console</a>, locate the AWS Console-to-Code widget on the right, choose <strong>Start recording</strong>, and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-instance-wizard.html\">launch an EC2 instance</a>. After the instance is launched, choose <strong>Stop</strong> to complete the recording and choose the <code>RunInstances</code> action from the <strong>Recorded actions</strong> table.</p> \n<p>To generate AWS CDK Python code, choose the <strong>Generate CDK Python</strong> button from the dropdown list.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/06/c2c-4-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/06/c2c-4-1.png\" width=\"898\" height=\"490\" /></a></p> \n<p>You can use the code as a starting point, customizing it to make it production-ready for your specific use case.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/06/c2c-5-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/06/c2c-5-1.png\" width=\"898\" height=\"850\" /></a></p> \n<p>I already had the AWS CDK installed, so I created a new Python CDK project:</p> \n<pre><code>mkdir c2c_cdk_demo\ncd c2c_cdk_demo\ncdk init app --language python\n</code></pre> \n<p>Then, I plugged in the generated code in the Python CDK project. For this example, I refactored the code into a <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/stacks.html\">AWS CDK Stack</a>, changed the EC2 instance type, and made other minor changes to ensure that the code was correct. I successfully deployed it using <code>cdk deploy</code>.</p> \n<p>I was able to go from the console action to launch an EC2 instance and then all the way to AWS CDK to reproduce the same result.</p> \n<pre><code>from aws_cdk import (\n    Stack,\n    aws_ec2 as ec2,\n)\nfrom constructs import Construct\n\nclass MyProjectStack(Stack):\n\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        existing_vpc = ec2.Vpc.from_lookup(self, \"ExistingVPC\",\n            is_default=True\n        )\n\n        instance = ec2.Instance(self, \"Instance\",\n                instance_type=ec2.InstanceType(\"t3.micro\"),\n                machine_image=ec2.AmazonLinuxImage(),\n                vpc=existing_vpc,\n                vpc_subnets=ec2.SubnetSelection(\n                    subnet_type=ec2.SubnetType.PUBLIC\n                )\n        )\n</code></pre> \n<p>You can also generate CloudFormation template in YAML or JSON format:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/06/c2c-6-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/06/c2c-6-1.png\" width=\"898\" height=\"490\" /></a></p> \n<p><span><strong>Preview code<br /> </strong></span>You can also directly access AWS Console-to-Code from <strong>Preview code</strong> feature in Amazon EC2 and <a href=\"https://aws.amazon.com/ec2/autoscaling/\">Amazon EC2 Auto Scaling</a> group launch experience. This means that you don’t have to actually create the resource in order to get the infrastructure code.</p> \n<p>To try this out, follow the steps to <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-launch-template.html\">create an Auto Scaling group using a launch template</a>. However, instead of <strong>Create Auto Scaling group</strong>, click <strong>Preview code</strong>. You should now see the options to generate infrastructure code or copy the AWS CLI command.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/08/c2c-7-2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/08/c2c-7-2.png\" width=\"1515\" height=\"921\" /></a></p> \n<p><span><strong>Things to know</strong></span><br /> Here are a few things you should consider while using AWS Console-to-Code:</p> \n<ul> \n <li>Anyone can use AWS Console-to-Code to generate AWS CLI commands for their infrastructure workflows. The code generation feature for AWS CDK and CloudFormation formats has a free quota of 25 generations per month, after which you will need an <a href=\"https://aws.amazon.com/q/developer/pricing/\">Amazon Q Developer subscription</a>.</li> \n <li>It’s recommended that you test and verify the generated IaC code code before deployment.</li> \n <li>At GA, AWS Console-to-Code only records actions in Amazon EC2, Amazon VPC and Amazon RDS consoles.</li> \n <li>The <strong>Recorded actions</strong> table in AWS Console-to-Code only display actions taken during the current session within the specific browser tab, and it does not retain actions from previous sessions or other tabs. Note that refreshing the browser tab will result in the loss of all recorded actions.</li> \n</ul> \n<p><span><strong>Now available</strong></span><br /> AWS Console-to-Code is available in all commercial Regions. You can learn more about it in the <a href=\"https://docs.aws.amazon.com/ec2/latest/devguide/console-to-code.html\">Amazon EC2 documentation</a>. Give it a try in the <a href=\"https://console.aws.amazon.com/ec2\">Amazon EC2 console</a> and send feedback to the <a href=\"https://repost.aws/tags/TAO-wqN9fYRoyrpdULLa5y7g/amazon-ec2\">AWS re:Post for Amazon EC2</a> or through your usual AWS Support contacts.</p>","author":"Abhishek Gupta","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"62730e7fa9bb3595b86e11c544ef1441ea738189caf9b1fe075426515b981f0f","category":"Tech"}