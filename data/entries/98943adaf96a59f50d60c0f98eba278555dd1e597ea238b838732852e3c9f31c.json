{"title":"Managing resources with the Terraform AWS Cloud Control provider","link":"https://www.hashicorp.com/blog/managing-resources-with-the-terraform-aws-cloud-control-provider","date":1701104400000,"content":"<p>The HashiCorp Terraform AWS Cloud Control (AWSCC) provider aims to bring Amazon Web Services (AWS) resources to Terraform users faster. The provider is automatically generated, which means new features and services on AWS can be supported right away, addressing any coverage gaps in the main Terraform AWS provider. The AWS Cloud Control provider supports over 750 AWS resources and data sources, with more support being added as AWS service teams continue to adopt the Cloud Control API standard.</p>\n\n<p>For Terraform users managing infrastructure on AWS, this provider can be used alongside the existing <a href=\"https://registry.terraform.io/providers/hashicorp/aws/5.26.0\">Terraform AWS provider</a>. Terraform users can access new features and services on AWS sooner with the AWSCC provider, while continuing to manage their existing resources with the AWS provider. AWS and HashiCorp will continue to deliver high-quality, consistent releases to both the AWS and AWSCC providers.</p>\n\n<p>The Cloud Control provider is a long-running joint project between HashiCorp and AWS to address the needs of our combined customers. HashiCorp is announcing that the Terraform AWS Cloud Control provider, currently in tech preview, will be generally available in 2024. </p>\n\n<h2>Unified set of actions with AWS Cloud Control API</h2>\n\n<p><a href=\"https://aws.amazon.com/cloudcontrolapi/\">AWS Cloud Control API</a> is a set of common APIs that make it easy for developers and partners to manage the lifecycle of AWS and third-party services. Cloud Control API provides five operations for developers to create, read, update, delete, and list (CRUDL) their cloud infrastructure. This unified set of API actions, as well as common input parameters and error types across AWS services, makes it easy for developers to manage their cloud infrastructure in a consistent manner and to leverage the latest AWS capabilities faster. As a result, any resource type published to the <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry.html\">CloudFormation Public Registry</a> exposes a standard JSON schema and can be acted upon by this interface. </p>\n\n<p>AWS Cloud Control API makes it easier to build solutions to integrate with new and existing AWS services, while HashiCorp’s foundational technologies solve the core challenges around infrastructure so that teams can focus on business-critical tasks. Integrating Terraform with AWS Cloud Control API means developers are able to use new AWS features and services as soon as they are available in Cloud Control API, typically on the day of launch.</p>\n\n<h2>Manage new AWS resources with the Terraform AWS Cloud Control provider</h2>\n\n<p>To understand how the AWS Cloud Control provider works, let’s take a look at a real example. AWS has a service called <a href=\"https://aws.amazon.com/chatbot/\">AWS Chatbot</a> that can monitor, operate, and troubleshoot AWS resources with interactive ChatOps. </p>\n\n<p>The traditional AWS provider does not currently support AWS Chatbot, but the Cloud Control provider does. The work to add support for Chatbot or another new service on the Terraform AWS provider is labor-intensive and the interest level for new services at launch is not always clear. </p>\n\n<p>With the AWS Cloud Control provider automatically generating resources and data source schema, AWS Chatbot can be supported right away. A search for ‘aws chatbot’ in the AWS Cloud Control provider will show you the resources and data sources available for the service. </p>\n<img src=\"https://www.datocms-assets.com/2885/1701103354-awscc-example.jpeg\" alt=\"Resources\" /><p>Other examples of AWS services that are supported by Cloud Control provider but unsupported by the standard AWS provider include <a href=\"https://aws.amazon.com/devops-guru/\">Amazon DevOps Guru</a>, <a href=\"https://aws.amazon.com/aws-cost-management/aws-billing-conductor/\">AWS Billing Conductor</a>, and <a href=\"https://aws.amazon.com/panorama/\">AWS Panorama</a>. For more detailed tutorials, check out how to <a href=\"https://developer.hashicorp.com/terraform/tutorials/aws/aws-cloud-control?in=terraform%2Faws\">manage new AWS resources with the Cloud Control provider</a> or the <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest/docs\">AWS Cloud Controller documentation</a>.</p>\n\n<h2>Provider enhancements</h2>\n\n<p>While in technical preview, a number of significant user experience enhancements have been added to the AWS Cloud Control provider, including sample configurations and enhanced schema-level documentation. These provider enhancements will help practitioners use resources more easily and efficiently, as they include full context about each of the attributes within the resource. They will also reduce errors and the time required for practitioners to provision a resource, as all of the documentation on how to use the attribute is contained within the resources registry page.</p>\n\n<p><strong>Sample configurations</strong></p>\n\n<p>While the AWS Cloud Control provider has been in technical preview, the biggest feature request we received from customers is that they need “sample configurations” to use as a starting point when beginning to configure a new resource. Without the availability of a sample configuration, practitioners have to start with a completely blank slate to figure out which attributes are required (specifically for their use case) and the values for each attribute. </p>\n\n<p>As a direct result of this feedback, over 100 resources (with more on the way) now have sample configurations; the starting point for customers to use resources. The sample configuration for a given resource will show the structure of the attribute and the expected values for each attribute. Customers can now start with the sample configuration, copy code, and begin building their resources. Here’s an example of a sample config for starting a <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest/docs/resources/ec2_vpc\">VPC in AWS</a>:</p>\n<img src=\"https://www.datocms-assets.com/2885/1701103507-awscc-vpc.png\" alt=\"awscc_ec2_vpc\" /><p><strong>Enhanced schema-level documentation</strong></p>\n\n<p>All 25 of the <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest/docs/resources/apigateway_documentation_part\">API Gateway</a> resources have now been enhanced with attribute-level documentation, and hundreds of resources will be enhanced with the same attribute-level documentation in the coming month. For each of these resources, the documentation provides detailed descriptions of how to use the attribute within the resource-accepted values. This will provide practitioners with context about each attribute and how it’s used, along with the expected values for each attribute. For more information, see this <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest/docs/resources/apigateway_method\">example of a resource with enhanced documentation</a>.</p>\n\n<h2>The state of Terraform providers and AWS</h2>\n\n<p>Since the initial release of Terraform version 0.1 in 2014, HashiCorp has continuously provided out-of-the-box support for AWS resources. In 2023, the Terraform AWS provider surpassed a major milestone — <a href=\"https://aws.amazon.com/blogs/aws-insights/two-billion-downloads-of-the-terraform-aws-provider-shows-value-of-iac-for-infrastructure-management/\">2 billion downloads</a> — and as of the publication of this blog post, the count stands at 2.3 billion downloads.</p>\n<img src=\"https://www.datocms-assets.com/2885/1701103524-image4.png\" alt=\"Terraform\" /><h2>Learn more about AWS and HashiCorp</h2>\n\n<p>Developers can use the Terraform AWS provider to interact with the many resources supported by AWS. To learn the basics of Terraform using this provider, follow the <a href=\"https://developer.hashicorp.com/terraform/tutorials/aws-get-started\">hands-on tutorials for getting started with Terraform on AWS</a> on our developer education platform. Interact with AWS services, including Lambda, RDS, and IAM by following the <a href=\"https://developer.hashicorp.com/terraform/tutorials/aws\">AWS services tutorials</a>. </p>\n\n<p>For a more detailed tutorial on the AWS Cloud Control provider, check out how to <a href=\"https://developer.hashicorp.com/terraform/tutorials/aws/aws-cloud-control?in=terraform%2Faws\">manage new AWS resources with the Cloud Control provider</a> or the <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest/docs\">AWS Cloud Controller documentation</a>.</p>\n","author":"Mike Doheny","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"98943adaf96a59f50d60c0f98eba278555dd1e597ea238b838732852e3c9f31c","category":"Tech"}