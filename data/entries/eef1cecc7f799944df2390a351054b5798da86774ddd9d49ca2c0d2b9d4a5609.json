{"title":"Vault client libraries for Go and .NET are now in public beta","link":"https://www.hashicorp.com/blog/vault-client-libraries-for-go-and-net-are-now-in-public-beta","date":1678809600000,"content":"<p>We are excited to announce that our OpenAPI-based Vault client libraries for <a href=\"https://github.com/hashicorp/vault-client-go\">Go</a> and <a href=\"https://github.com/hashicorp/vault-client-dotnet\">.NET</a> are now available in public beta. We will continue to expand functionality and add features as we move towards general availability.</p>\n<h2><a href=\"#why-client-libraries\">»</a><a></a>Why client libraries?</h2>\n<p>Vault can be accessed in several different ways today, including through Vault Agent, CLI, REST API, and through various platform-specific integrations. Client libraries offer an application-native mechanism to fetch required secrets in a simple-to-adopt developer experience with an extremely secure posture.</p>\n<h2><a href=\"#openapi-code-generation-approach\">»</a><a></a>OpenAPI code generation approach</h2>\n<p>The previous approach with regard to Vault client libraries has been inconsistent and scattered. If you refer to our <a href=\"https://developer.hashicorp.com/vault/api-docs/libraries\">client libraries</a> page, you’ll see that today HashiCorp only officially supports Go and Ruby. Libraries for other languages, including Python, C#, and Java, are all community-managed. Some of these libraries are no longer maintained and haven’t seen changes in years. This results in an inconsistent and unfamiliar developer experience across different languages.</p>\n<p>To address this problem, we have chosen to leverage <a href=\"https://www.openapis.org/\">OpenAPI</a> code generation. It allows us to easily keep libraries up-to-date with the latest changes to the Vault API, ensuring minimal downtime between additions to Vault and providing visibility of the functionality across all client libraries. This approach also allows us to incorporate every single built-in Vault plugin into the client library. Using an OpenAPI specification as the basis for code generation means that developers have the ability to generate their own client libraries in other languages as well.</p>\n<p>With the new libraries, we have chosen to prioritize developer experience and maintainability. Code generation allows us to achieve a familiar look and feel between languages while being idiomatic.</p>\n<h2><a href=\"#getting-started-with-the-go-client-library\">»</a><a></a>Getting started with the Go client library</h2>\n<p>The new Go client library aims to be a future replacement for the existing API library included with Vault. As such, it follows similar structural patterns for an easier migration path, but offers a number of quality-of-life improvements. The library provides almost 1,000 generated methods as well as a few handcrafted ones, all with a consistent interface and easily discoverable functionality.</p>\n<p>Below is a simple example of how you can retrieve your first secret in Go with just a few lines of code:</p><pre><code>// Prepare a client with the given Vault server/cluster address\nclient, _ := vault.New(vault.WithAddress(\"http://127.0.0.1:8200\"))\n\n// Read a secret from key-value secrets engine\nsecret, _ := client.Secrets.KVv2Read(\n  context.Background(),\n  \"my-secret\",\n  vault.WithToken(\"my-token\"),\n)\nlog.Println(\"Secret retrieved:\", secret.Data)</code></pre><p>For additional examples of how to use the library, please refer to the <a href=\"https://github.com/hashicorp/vault-client-go#examples\">README</a> page of vault-client-go.</p>\n<h2><a href=\"#getting-started-with-the-net-client-library\">»</a><a></a>Getting started with the .NET client library</h2>\n<p>Previously, Vault developers have had to rely on community maintained libraries to integrate Vault with their .NET applications, such as <a href=\"https://github.com/rajanadar/VaultSharp\">VaultSharp</a>. With this release, you can use the official HashiCorp-supported library with an emphasis on developer experience. We’ve created the library to be idiomatic with the .NET ecosystem.</p>\n<p>Below is an example of how you can retrieve your first secret in C# with just a few lines of code:</p><pre><code>// Prepare a client with the given Vault server/cluster address\nVaultConfiguration config = new VaultConfiguration(\"http://127.0.0.1:8200\");\n\nVaultClient client = new VaultClient(config);\nclient.SetToken(\"my-token\"); \n\n// Read a secret from key-value secrets engine\nVaultResponse secret = vaultClient.Secrets.KVv2Read(\"my-secret\");\nConsole.WriteLine(\"Secret received: {0}\", secret.Data);</code></pre><p>For additional examples of how to use the library, please refer to the <a href=\"https://github.com/hashicorp/vault-client-dotnet#examples\">README</a> page of vault-client-dotnet.</p>\n<h2><a href=\"#next-steps\">»</a><a></a>Next steps</h2>\n<p>With this being the beta release of our Vault client libraries, we will continue to work towards making the libraries (vault-client-dotnet and vault-client-go) generally available and production-ready. We also have plans to continue expanding the available feature set with many requested features, including structured responses, automated token renewal, authentication wrappers, etc.</p>\n<p>We would like to continue improving these libraries and would like to hear from you! If you have questions or suggestions feel free to open a <a href=\"https://github.com/hashicorp\">GitHub issue</a> in the library repos or post in the <a href=\"https://discuss.hashicorp.com/c/vault/30\">HashiCorp discussion forum</a>. We also have more code examples available in our <a href=\"https://developer.hashicorp.com/vault/docs/get-started/developer-qs\">developer quickstart</a>.</p>\n<p>Get started with <a href=\"https://www.hashicorp.com/products/vault\">Vault</a> for free to begin managing your secrets.</p>","author":"Kartik Lunkad","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"eef1cecc7f799944df2390a351054b5798da86774ddd9d49ca2c0d2b9d4a5609","category":"Tech"}