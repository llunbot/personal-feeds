{"title":"WebKit Features in Safari 17.5","link":"https://webkit.org/blog/15383/webkit-features-in-safari-17-5/","date":1715625002000,"content":"<p>Happy May! It’s time for another release of Safari — our third significant update of 2024. With just a month until <a href=\"https://developer.apple.com/wwdc24/\">WWDC24</a> and the unveiling of what’s coming later this year, we are happy to get these 7 features and 22 bug fixes into the hands of your users today.</p>\n<h2>CSS</h2>\n<p>There are several exciting new CSS features in Safari 17.5, including <code>text-wrap: balance</code>, the <code>light-dark()</code> color function, and <code>@starting-style</code>, plus the ability to use feature queries with <code>@import</code> rules. Let’s look at how you can put each one to use.</p>\n<h3>Text wrap balance</h3>\n<p>On the web, with its flexible container widths, inconsistent lengths of content, and variation between browsers, it can feel impossible to avoid having text wrap in such a way that too few words end up all by themselves on a very short last line.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/regular-wrapping-light.png\" alt=\"Very long text headline wrapping using the normal algorithm — which leaves a single word on the last line, all by itself\" width=\"1874\" height=\"464\" srcset=\"https://webkit.org/wp-content/uploads/regular-wrapping-light.png 1874w, https://webkit.org/wp-content/uploads/regular-wrapping-light-300x74.png 300w, https://webkit.org/wp-content/uploads/regular-wrapping-light-1024x254.png 1024w, https://webkit.org/wp-content/uploads/regular-wrapping-light-768x190.png 768w, https://webkit.org/wp-content/uploads/regular-wrapping-light-1536x380.png 1536w\" /></figure>\n<p>When type was set by hand, typographers would painstakingly avoid this undesirable result by manually moving content around. Over the decades, web developers have tried a series of different tricks to avoid orphans in CSS, in HTML, in JavaScript, and in content management systems. None work very well. The attempts usually feel hacky, laborious, and fragile.</p>\n<p>To solve this and other frustrations, the CSS Working Group has <a href=\"https://www.w3.org/TR/css-text-4/#text-wrap-style\">defined</a> three new options that you can use to change how text will wrap. You can switch from default wrapping to another style with <code>text-wrap</code>. WebKit for Safari 17.5 adds support for the first of these new options — balancing.</p>\n<p>The <code>text-wrap: balance</code> rule asks the browser to “balance” the lines of text and make them all about the same length.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/balanced-wrapping-light.png\" alt=\"A very long headline wrapped using text-wrap: balance, so each of the three lines are the same length as each other — and none of them fill all the horizontal space available \" width=\"1874\" height=\"352\" srcset=\"https://webkit.org/wp-content/uploads/balanced-wrapping-light.png 1874w, https://webkit.org/wp-content/uploads/balanced-wrapping-light-300x56.png 300w, https://webkit.org/wp-content/uploads/balanced-wrapping-light-1024x192.png 1024w, https://webkit.org/wp-content/uploads/balanced-wrapping-light-768x144.png 768w, https://webkit.org/wp-content/uploads/balanced-wrapping-light-1536x289.png 1536w\" /></figure>\n<p>You can see how now the text no longer fills the containing block — there’s a large amount of space on the right of the words. This is expected, and something you’ll want to think about as you decide when to use <code>text-wrap: balance</code>.</p>\n<p>Where <em>exactly</em> each line of text will break when using <code>text-wrap: balance</code> may be slightly different in each browser. The <a href=\"https://drafts.csswg.org/css-text-4/\">CSS Text level 4</a> web standard leaves it up to each browser engine team to decide which algorithm they want to use in determining how exactly to wrap balanced text.</p>\n<p>It can be computationally expensive for the browser to count characters and balance multiple lines of text, so the standard allows browsers to limit the number of lines that are balanced. Chromium browsers balance 6 or fewer lines, Firefox balances 10 or fewer, while Safari/WebKit balances an unlimited numbers of lines.</p>\n<p>For now, Safari does not balance text if it’s surrounding a float or initial letter. And Safari disables the balancer if the content contains preserved tabs or soft hyphens.</p>\n<h3>Text wrap shorthands and longhands</h3>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap\"><code>text-wrap</code></a> property is actually a shorthand for two longhand properties: <code>text-wrap-style</code> and <code>text-wrap-mode</code>.</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap-mode\"><code>text-wrap-mode</code></a> property provides a mechanism for expressing whether or not text should wrap.</p>\n<pre><code><span>text-wrap-mode</span>: <span>wrap</span>; <span>/* initial value */</span>\n<span>text-wrap-mode</span>: <span>nowrap</span>;\n</code></pre>\n<p>The  <code>wrap</code> value turns it on, and the <code>nowrap</code> value turns it off, just like the values for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/white-space\"><code>white-space</code></a>. (In fact, <code>text-wrap-mode</code> is the newly introduced longhand of <code>white-space</code>.) WebKit added support for <code>text-wrap-mode: wrap</code> and <code>nowrap</code> in <a href=\"https://webkit.org/blog/15063/webkit-features-in-safari-17-4/\">Safari 17.4</a>.</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap-style\"><code>text-wrap-style</code></a> property selects <em>how</em> to wrap. The initial value is <code>auto</code> — asking text to wrap in the way it has for decades. Or, you can choose a value to switch to another “style” of wrapping.</p>\n<p>WebKit for Safari 17.5 adds support for  <code>text-wrap-style: balance</code>, <code>stable</code>, and <code>auto</code>.</p>\n<pre><code><span>text-wrap-style</span>: <span>auto</span>; <span>/* initial value */</span>\n<span>text-wrap-style</span>: <span>balance</span>;\n<span>text-wrap-style</span>: <span>stable</span>;\n</code></pre>\n<p>Of course, the <code>text-wrap</code> shorthand is a way to combine <code>text-wrap-mode</code> and <code>text-wrap-style</code> and declare them together. If you write <code>text-wrap: balance</code> it’s the same as <code>text-wrap: wrap balance</code>, meaning: “yes, please wrap, and when you do, please balance the text”.</p>\n<p>Full support will eventually include three properties and six values. No browser supports everything yet, so be sure to look up support for the <a href=\"https://caniuse.com/mdn-css_properties_text-wrap\"><code>text-wrap</code></a>, <a href=\"https://caniuse.com/mdn-css_properties_text-wrap-mode\"><code>text-wrap-mode</code></a>, and <a href=\"https://caniuse.com/mdn-css_properties_text-wrap-style\"><code>text-wrap-style</code></a> properties, as well as the <a href=\"https://caniuse.com/mdn-css_properties_text-wrap_balance\"><code>balance</code></a>, <a href=\"https://caniuse.com/mdn-css_properties_text-wrap_pretty\"><code>pretty</code></a>, <a href=\"https://caniuse.com/mdn-css_properties_text-wrap_stable\"><code>stable</code></a>, <code>auto</code>, <a href=\"https://caniuse.com/mdn-css_properties_text-wrap_wrap\">wrap</a>, and <a href=\"https://caniuse.com/mdn-css_properties_text-wrap_nowrap\"><code>nowrap</code></a> values.</p>\n<p>The <code>balance</code>, <code>pretty</code>, and <code>stable</code> values will simply fall back to <code>auto</code> in browsers without support, so progressive enhancement is easy. You can use these values today, no matter how many of your users don’t yet have a browser with support. They will simply get <code>auto</code>-wrapped text, just like they would if you didn’t use <code>text-wrap</code>. Meanwhile, those users with support will get an extra boost of polish.</p>\n<h3>Dark mode and the <code>light-dark()</code> color function</h3>\n<p>More and more, users expect websites and web apps to <a href=\"https://webkit.org/blog/8840/dark-mode-support-in-webkit/\">support dark mode</a>. Since <a href=\"https://caniuse.com/prefers-color-scheme\">Safari 12.1</a>, the <code>prefers-color-scheme</code> media query has given you the ability to write code like this:</p>\n<pre><code><span>body</span> {\n  <span>background</span>: <span>white</span>;\n  <span>color</span>: <span>black</span>;\n}\n<span>@media</span> (<span>prefers-color-scheme</span>: <span>dark</span>) {\n  <span>body</span> {\n    <span>background</span>: <span>darkslategray</span>;\n    <span>color</span>: <span>white</span>;\n  }\n}\n</code></pre>\n<p>Or perhaps you’ve used variables to define colors for both light and dark mode at once, making it easier to use them everywhere.</p>\n<pre><code><span>:root</span> {\n  <span>--background</span>: <span>white</span>;\n  <span>--text</span>: <span>black</span>;\n}\n<span>@media</span> (<span>prefers-color-scheme</span>: <span>dark</span>) {\n  :<span>root</span> {\n    <span>--background</span>: <span>darkslategray</span>;\n    <span>--text</span>: <span>white</span>;\n  }\n}\n<span>body</span> {\n  <span>background</span>: <span>var</span>(<span>--background</span>);\n  <span>color</span>: <span>var</span>(<span>--text</span>);\n}\n</code></pre>\n<p>Well, now there’s a new option — the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/light-dark\"><code>light-dark()</code></a> function. It makes defining colors for dark mode even easier.</p>\n<p>First, inform the browser you are providing a design for both light and dark modes with the <code>color-scheme</code> property. This prompts the browser to switch the default user agent styles when in dark mode, ensuring the form controls appear in dark mode, for example. It’s also required for <code>light-dark()</code> to work correctly.</p>\n<pre><code><span>:root</span> {\n  <span>color-scheme</span>: <span>light</span> <span>dark</span>;\n}\n</code></pre>\n<p>Then, any time you define a color, you can use the <code>light-dark()</code> function to define the first color for light mode, and the second color for dark mode.</p>\n<pre><code><span>color</span>: <span>light-dark</span>(<span>black</span>, <span>white</span>);\n<span>background-color</span>: <span>light-dark</span>(<span>white</span>, <span>darkslategray</span>);\n</code></pre>\n<p>You can still use variables, if you’d like. Perhaps you want to structure your code like this.</p>\n<pre><code><span>:root</span> {\n  <span>color-scheme</span>: <span>light</span> <span>dark</span>;\n  <span>--background</span>: <span>light-dark</span>(<span>black</span>, <span>white</span>);\n  <span>--text</span>: <span>light-dark</span>(<span>white</span>, <span>darkslategray</span>);\n}\n<span>body</span> {\n  <span>background</span>: <span>var</span>(<span>--background</span>);\n  <span>color</span>: <span>var</span>(<span>--text</span>);\n}\n</code></pre>\n<p>An often-asked question when learning about <code>light-dark()</code> is “does this only work for colors?” Yes, this function only works for colors. Use the <code>prefers-color-scheme</code> media query to define the rest of your color-scheme dependent styles.</p>\n<h3>Starting style</h3>\n<p>WebKit for Safari 17.5 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@starting-style\"><code>@starting-style</code></a>. It lets you define starting values for a particular element. This is needed to enable a transition when the element’s box is created (or re-created).</p>\n<pre><code><span>.alert</span> {\n  <span>transition</span>: <span>background-color</span> <span>2s</span>;\n  <span>background-color</span>: <span>green</span>;\n  @<span>starting-style</span> {\n    <span>background-color</span>: <span>transparent</span>;\n  }\n}\n</code></pre>\n<p>In the above example, the <code>background-color</code> will transition from transparent to green when the element is added to the document.</p>\n<p>Many developers are excited to use <code>@starting-style</code> along with <code>display: none</code> interpolation. To do so, WebKit also needs to <a href=\"https://bugs.webkit.org/show_bug.cgi?id=267762\">support</a> animation of the <code>display</code> property, which has not yet shipped in Safari. You can test this use case today in <a href=\"https://developer.apple.com/safari/technology-preview/\">Safari Technology Preview</a>.</p>\n<h3>Features queries for importing CSS</h3>\n<p>WebKit for Safari 17.5 adds the <code>supports()</code> syntax to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@import\"><code>@import</code></a> rules. Now you can conditionally import CSS files based on whether or not there’s support for a certain feature.</p>\n<pre><code><span>@import</span> &lt;<span>url</span>&gt; <span>supports</span>(&lt;<span>feature</span>&gt;);\n</code></pre>\n<p>For example, you could load different stylesheets based on whether or not <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting/Using_CSS_nesting\">CSS Nesting</a> is <a href=\"https://caniuse.com/css-nesting\">supported</a>.</p>\n<pre><code><span>@import</span> <span>\"nested-styles.css\"</span> <span>supports</span>(<span>selector</span>(&amp;));\n<span>@import</span> <span>\"unnested-styles.css\"</span> <span>supports</span>(<span>not</span> <span>selector</span>(&amp;));\n</code></pre>\n<p>Or you could load certain CSS files when a browser does not have <a href=\"https://caniuse.com/css-cascade-layers\">support</a> for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@layer\">Cascade Layers</a>. (Note that any <code>@import</code> rules with <code>layer()</code> will automatically be ignored in a browser without layer support.)</p>\n<pre><code><span>@import</span> <span>url(\"reset.css\")</span> <span>layer</span>(<span>reset</span>);\n<span>@import</span> <span>url(\"framework.css\")</span> <span>layer</span>(<span>framework</span>);\n<span>@import</span> <span>url(\"custom.css\")</span> <span>layer</span>(<span>custom</span>);\n\n<span>@import</span> <span>url(\"unlayered-fallback-styles.css\")</span> <span>supports</span>(<span>not</span> <span>at-rule</span>(<span>@layer</span>));\n</code></pre>\n<p>Or simply test for a feature. Here, these layout styles will only be loaded if <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Subgrid\">Subgrid</a> is <a href=\"https://caniuse.com/css-subgrid\">supported</a>.</p>\n<pre><code><span>@import</span> <span>url(\"layout.css\")</span> <span>supports</span>(<span>grid-template-columns</span>: <span>subgrid</span>);\n</code></pre>\n<h2>WebCodecs</h2>\n<p>WebKit for Safari 17.5 adds support for AV1 to WebCodecs when an AV1 hardware decoder is available.</p>\n<h2>WebGL</h2>\n<p>WebKit for Safari 17.5 adds WebGL support for <code>EXT_conservative_depth</code> and <code>NV_shader_noperspective_interpolation</code>.</p>\n<h2>WKWebView</h2>\n<p>WKWebView adds support for logging MarketplaceKit errors to the JavaScript console. This will make errors easier to debug.</p>\n<h2>Bug Fixes and more</h2>\n<p>In addition to these new features, WebKit for Safari 17.5 includes work polishing existing features.</p>\n<h3>Accessibility</h3>\n<ul>\n<li>Fixed a bug preventing VoiceOver word echoing in some text fields.  (122451549) (FB13592798)  </li>\n</ul>\n<h3>Animations</h3>\n<ul>\n<li>Fixed flickering with multiple accelerated animations and direction changes.  (117815004)  </li>\n</ul>\n<h3>Authentication</h3>\n<ul>\n<li>Fixed <code>excludeCredentials</code> property being ignored during a passkey registration request.  (124405037)  </li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Fixed the proximity calculation for implicit <code>@scope</code>.  (124640124)  </li>\n<li>Fixed the Grid track sizing algorithm logical height computation avoid unnecessary grid item updates.  (124713418)  </li>\n<li>Fixed any <code>@scope</code> limit making the element out of scope.  (124956673)  </li>\n</ul>\n<h3>Forms</h3>\n<ul>\n<li>Fixed native text fields becoming invisible in dark mode.  (123658326)  </li>\n<li>Fixed fallback native <code>&lt;select&gt;</code> rendering in dark mode.  (123845293)  </li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed scrolling for an element when a video element with <code>pointer-events: none</code> is placed over it.  (118936715)  </li>\n<li>Fixed HTML5 <code>&lt;audio&gt;</code> playback to continue to the next media activity when in the background.  (121268089) (FB13551577)  </li>\n<li>Fixed AV1 to decode in hardware on iPhone 15 Pro.  (121924090)  </li>\n<li>Fixed audio distortion over internal speakers when streaming content in web browsers.  (122590884)  </li>\n<li>Fixed firing <code>loadeddata</code> events for <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code> on page load.  (124079735) (FB13675360)  </li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Fixed adjusting the size of the scrollable area when changing betwen non-overlay and overlay scrollbars.  (117507268)  </li>\n<li>Fixed flickering when showing a layer on a painted background for the first time by avoiding async image decoding.  (117533495)  </li>\n<li>Fixed line breaking before or between ruby sequences.  (122663646)  </li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Fixed <code>mousemove</code> events in an <code>iframe</code> when the mouse is clicked from outside the <code>iframe</code> and then moves into it while the button is held down.  (120540148) (FB13517196)  </li>\n</ul>\n<h3>Web Apps</h3>\n<ul>\n<li>Fixed several issues that caused Web Push to not show notifications when the web app or Safari was not already running.  (124075358)  </li>\n</ul>\n<h3>Web Inspector</h3>\n<ul>\n<li>Fixed info and debug buttons not appearing in the Console Tab until new console messages are displayed.  (122923625)  </li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Fixed WebCodecs to correctly use the VP9 hardware decoder. (123475343)  </li>\n<li>Fixed no incoming video in Teams VA. (124406255)  </li>\n<li>Fixed the camera pausing occasionally when torch is enabled. (124434403)  </li>\n</ul>\n<h2>Updating to Safari 17.5</h2>\n<p>Safari 17.5 is available on <a href=\"https://www.apple.com/ios/ios-17/\">iOS 17.5</a>, <a href=\"https://www.apple.com/ipados/ipados-17/\">iPadOS 17.5</a>, <a href=\"https://www.apple.com/macos/sonoma/\">macOS Sonoma 14.5</a>, macOS Ventura, macOS Monterey and in visionOS 1.2.</p>\n<p>If you are running macOS Ventura or macOS Monterey, you can update Safari by itself, without updating macOS. On macOS Ventura, go to  &gt; System Settings &gt; General &gt; Software Update and click “More info…” under Updates Available.</p>\n<p>To get the latest version of Safari on iPhone, iPad, or Apple Vision Pro, go to Settings &gt; General &gt; Software Update, and tap to update.</p>\n<h2>Feedback</h2>\n<p>We love hearing from you. To share your thoughts on Safari 17.5, find us on Mastodon at <a href=\"https://front-end.social/@jensimmons\">@jensimmons@front-end.social</a> and <a href=\"https://mastodon.social/@jondavis\">@jondavis@mastodon.social</a>. Or send a reply on X to <a href=\"https://twitter.com/webkit\">@webkit</a>. You can also <a href=\"https://www.linkedin.com/in/apple-webkit/\">follow WebKit on LinkedIn</a>. If you run into any issues, we welcome your <a href=\"https://feedbackassistant.apple.com/\">feedback</a> on Safari UI, or your <a href=\"https://bugs.webkit.org/\">WebKit bug report</a> about web technologies or Web Inspector. Filing issues really does make a difference.</p>\n<p>Download the latest <a href=\"https://developer.apple.com/safari/technology-preview/\">Safari Technology Preview</a> on macOS to stay at the forefront of the web platform and to use the latest Web Inspector features.</p>\n<p>You can also find this information in the <a href=\"https://developer.apple.com/documentation/safari-release-notes/\">Safari 17.5 release notes</a>.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"2673e4560ad667fa8806cc23bfefd00a1cc4069115a147ac5e0bff00500c2b8f","category":"Tech"}