{"title":"Item Flow – Part 1: A new unified concept for layout","link":"https://webkit.org/blog/16587/item-flow-part-1-a-new-unified-concept-for-layout/","date":1743202810000,"content":"<p>CSS Grid and Flexbox brought incredible layout tools to the web, but they don’t yet do everything a designer might want. One of those things is a popular layout pattern called “masonry” or “waterfall,” which currently still requires <a href=\"https://masonry.desandro.com/\">a Javascript library</a> to accomplish.</p>\n<p>Masonry layouts in CSS feature was first proposed by Mozilla and implemented in Firefox behind a flag <a href=\"https://caniuse.com/mdn-css_properties_grid-template-rows_masonry\">in 2020</a>. From the beginning, there’s been a hot debate about this mechanism. The WebKit team at Apple picked up where Mozilla left off, implemented the drafted spec, and landed it in <a href=\"https://webkit.org/blog/13839/release-notes-for-safari-technology-preview-163/\">Safari Technology Preview 163</a>. This reinvigorated the conversation. By October 2024, there were two competing ideas being debated — to “Just Use Grid” or to create a whole “New Masonry Layout”. <a href=\"https://webkit.org/blog/16026/css-masonry-syntax/\">We wrote extensively about these ideas</a> in a previous article on this website.</p>\n<p>A lot has happened since October. Now, a third path forward is emerging — a path that would mean the CSS Working Group doesn’t choose either “Just Use Grid” or “New Masonry Layout”. It merges ideas from both with a completely-new idea to create a unified system of Item Flow properties. This article explains what Item Flow is, and its impact on both Flexbox and Grid. In Part 2, another article will more fully explain the implications for the future of masonry-style layouts.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/masonry-options-2.jpg\" alt=\"The three options for CSS Masonry.\" width=\"2532\" height=\"1418\" srcset=\"https://webkit.org/wp-content/uploads/masonry-options-2.jpg 2532w, https://webkit.org/wp-content/uploads/masonry-options-2-300x168.jpg 300w, https://webkit.org/wp-content/uploads/masonry-options-2-1024x573.jpg 1024w, https://webkit.org/wp-content/uploads/masonry-options-2-768x430.jpg 768w, https://webkit.org/wp-content/uploads/masonry-options-2-1536x860.jpg 1536w, https://webkit.org/wp-content/uploads/masonry-options-2-2048x1147.jpg 2048w\" /></figure>\n<p>But first, why is a third possibility called Item Flow emerging at all? Why not just pick between the “Just Use Grid” and “New Masonry Layout” options? Well, back in October, the folks working on masonry <a href=\"https://github.com/w3ctag/design-reviews/issues/1003\">asked the W3C Technical Architecture Group (TAG) to weigh in</a> on the debate. The TAG had <a href=\"https://github.com/w3ctag/design-reviews/issues/1003#issuecomment-2489688718\">a lengthy response</a>, but one of the most interesting parts was this:</p>\n<blockquote><p>Overall, we think masonry, grid, and wrapping-flexbox should be incorporated into a unified set of properties. Chrome’s [New Masonry Layout] proposal splits apart property sets too eagerly, but even the WebKit [originally Mozilla | Just Use Grid] proposal seems to miss a chance to develop more-general properties.</p>\n</blockquote>\n<p>Wow. Incorporate Flexbox, Grid and Masonry into a unified set of properties? What would that even look like?</p>\n<p>The suggestion isn’t to combine all of Flexbox with all of Grid — but rather to create a new set of properties and values to “replace” specifically the <code>flex-flow</code> and <code>grid-auto-flow</code> properties. (You will always be able to use the older syntax if you prefer.) Think how originally the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_alignment/Box_alignment\">Alignment properties</a> and the<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/gap\"><code>gap</code></a> property were defined to work only in one layout system, and then later got modified and extended to work in multiple layout contexts.</p>\n<p>Several of us here at Apple got together and started figuring out how a such unified system for layout <code>*-flow</code> could work. We decided to tentatively name the shorthand  <code>item-flow</code>. It’d be the main property from which the longhands and values follow. Together, the new rules would all control the direction of flow, how items wrap, how items pack, whether or not there’s “slack” in the layout, and more.</p>\n<p>As we worked through the details, we started to get excited. Suddenly new features for Flexbox and Grid that people have wanted for years had an obvious home. Things seemed to click together elegantly. New capabilities emerged:</p>\n<ul>\n<li>Flexbox could gain a way to do dense packing</li>\n<li>Grid could gain the ability to turn off wrapping</li>\n<li>Masonry layouts could now be triggered with a value for <code>item-flow</code> </li>\n<li>and more…</li>\n</ul>\n<p>In this article, we want to describe Item Flow to you, the people who make websites and web apps, to see what you think. So, let’s go on a journey to imagine what this future would be like…</p>\n<h2><a name=\"combining-flexbox-and-grid\"></a>Combining Flexbox and Grid</h2>\n<p>Flexbox has <code>flex-flow</code>. It’s a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Shorthand_properties\">shorthand</a> for these two longhands:</p>\n<ul>\n<li><code>flex-direction: row | row-reverse | column | column-reverse;</code></li>\n<li><code>flex-wrap: nowrap | wrap | wrap-reverse;</code></li>\n</ul>\n<p>Flex-direction determines which direction the content flows, while flex-wrap determines whether or not to wrap content.</p>\n<p>CSS Grid has <code>grid-auto-flow</code>.</p>\n<ul>\n<li><code>grid-auto-flow: row | column | dense;</code></li>\n</ul>\n<p>It determines the direction in which the content flows, and whether or not dense packing is used, all in one property. It has no longhands.</p>\n<p>So how shall we unify these capabilities? We proposed calling the new shorthand <code>item-flow</code>, with four new longhands:</p>\n<ul>\n<li><code>item-direction</code></li>\n<li><code>item-wrap</code></li>\n<li><code>item-pack</code></li>\n<li><code>item-slack</code> </li>\n</ul>\n<p>(It’s important to note all of these are brand new, baby fresh ideas. They will get discussed at length and changed before they become reality in browsers. To make this article to be readable, we are glossing over the current debates and present just one name for each property/value, not list the all the variations proposed at the CSSWG.)</p>\n<h2><a name=\"item-direction\"></a>Item Direction</h2>\n<p>The <code>item-direction</code> property would determine how content flows. Should content flow in rows or columns? In the normal direction or reversed? This would work just like <code>flex-direction</code> and the corresponding part of <code>grid-auto-flow</code>.</p>\n<pre><code><span>item-direction</span>: <span>row</span> | <span>column</span> | <span>row-reverse</span> | <span>column-reverse</span>\n</code></pre>\n<p>This is pretty straightforward to understand because it works just like we expect from years of working with Flexbox and Grid. There is a debate about what “row” and “column” mean for masonry-style layouts — we’ll get into that in our next article,  <em>Item Flow – Part 2: next steps for Masonry</em>.</p>\n<h2><a name=\"item-wrap\"></a>Item Wrap</h2>\n<p>The <code>item-wrap</code> property would determine whether or not content will wrap, and if so, in which direction. The new default would be <code>auto</code> — which resolves to <code>nowrap</code> in Flexbox and <code>wrap</code> in Grid, matching the current initial values.</p>\n<p>This is familiar territory, but creating a new property gives us the opportunity to clean up the values and make them more sensical. We could add a new <code>reverse</code> keyword, so that <code>[ nowrap | wrap ]</code> is one choice, while <code>[ normal | reverse ]</code> is a second, separate choice, improving on how this currently works in Flexbox. (We could also keep <code>wrap-reverse</code> around for the sake of supporting legacy habits.) This would give us:</p>\n<pre><code><span>item-wrap</span>: <span>auto</span> | <span>nowrap</span> | <span>wrap</span> | <span>normal</span> | <span>reverse</span>\n</code></pre>\n<p>But CSS Grid hasn’t had a concept of <code>nowrap</code> before! So what would that be?!? Here’s one idea…</p>\n<p>With Flexbox, there are many use cases for laying out your items in one line, one row, without any wrapping. Perhaps it’s a navigation bar, where each item is a phrase of a different length. The amount of space for each item is determined by the size of that item — you get flexible boxes.</p>\n<p>What if you want to lay out all your content in one row, but, instead, for each item to get the same amount of space — for every item to be <code>1fr</code> wide? Since the size of the columns is extrinsically determined, CSS Grid is the right tool for this job. But because Grid wraps by default, developers often hack Flexbox instead, not realizing they can get the desired effect today with <code>grid-auto-flow: column</code>.</p>\n<p>In a future with Item Flow, it’d be very obvious how to use <code>nowrap</code> to tell Grid to fit everything on one line.</p>\n<pre><code><span>.container</span> {\n  <span>display</span>: <span>grid</span>;\n  <span>grid-auto-columns</span>: <span>1</span><span>fr</span>;\n  <span>item-wrap</span>: <span>nowrap</span>;\n}\n</code></pre>\n<p>Now, if there are nine items, we get nine columns. If there are five items, we get five columns, like this:</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/grid-in-one-row.png\" alt=\"A grid of five columns, filled with five items, all in just one row.\" width=\"1980\" height=\"310\" srcset=\"https://webkit.org/wp-content/uploads/grid-in-one-row.png 1980w, https://webkit.org/wp-content/uploads/grid-in-one-row-300x47.png 300w, https://webkit.org/wp-content/uploads/grid-in-one-row-1024x160.png 1024w, https://webkit.org/wp-content/uploads/grid-in-one-row-768x120.png 768w, https://webkit.org/wp-content/uploads/grid-in-one-row-1536x240.png 1536w\" /></figure>\n<h2><a name=\"item-pack\"></a>Item Pack</h2>\n<p>The <code>item-pack</code> property would let us switch between different kinds of packing.</p>\n<h3><a name=\"dense-packing\"></a>Dense packing</h3>\n<p>In Grid, we currently have the ability to switch to a mode of dense packing, with <code>grid-auto-flow: dense</code>. In the new integrated system, this same capability would be available with <code>item-pack: normal | dense</code> — adding an explicit value for switching back to not-dense for the first time.</p>\n<p>Flexbox currently has no concept of dense packing. So what feature could we add to it here?</p>\n<pre><code><span>.container</span> {\n  <span>display</span>: <span>flex</span>;\n  <span>item-pack</span>: <span>dense</span>;\n}\n</code></pre>\n<p>Two ideas have been debated so far:</p>\n<ol>\n<li>Dense packing could mean Flexbox will attempt to cram one more item on the row (or column) before starting a new row. It would shrinking the items on the row just enough, instead of leaving extra space and growing them. </li>\n<li>Or, to behave like Grid, dense packing could mean Flexbox will look back to previous spots in the layout and place smaller items in any available space. </li>\n</ol>\n<p>To understand what these option means, let’s review how Flexbox currently works, and then take a look at what <code>dense</code> could do.</p>\n<p>Today, when Flexbox starts to lay out content, fills up a row with the items that fit in the available space. When it runs out of space, it wraps (if wrapping is allowed), and fills up the next row… until all the items have a home. And then, it distributes all the extra space according to the <code>flex</code> and Alignment properties. (See these two steps on the left &amp; right of the illustration.)</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/flex-now.png\" alt=\"A diagram of the two stages of Flexbox laying out — the current way it works.\" width=\"3828\" height=\"702\" srcset=\"https://webkit.org/wp-content/uploads/flex-now.png 3828w, https://webkit.org/wp-content/uploads/flex-now-300x55.png 300w, https://webkit.org/wp-content/uploads/flex-now-1024x188.png 1024w, https://webkit.org/wp-content/uploads/flex-now-768x141.png 768w, https://webkit.org/wp-content/uploads/flex-now-1536x282.png 1536w, https://webkit.org/wp-content/uploads/flex-now-2048x376.png 2048w\" /></figure>\n<p>With the first idea listed above, dense packing in Flexbox could instead shrink items just enough to be able to fit one more item on the row, shrinking each item instead of distributing extra space.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/flex-alt-1.png\" alt=\"A similar diagram, with the changes if Idea 1 is chosen. Instead of being stretched, more items are on each line, shrunk to fit.\" width=\"3832\" height=\"720\" srcset=\"https://webkit.org/wp-content/uploads/flex-alt-1.png 3832w, https://webkit.org/wp-content/uploads/flex-alt-1-300x56.png 300w, https://webkit.org/wp-content/uploads/flex-alt-1-1024x192.png 1024w, https://webkit.org/wp-content/uploads/flex-alt-1-768x144.png 768w, https://webkit.org/wp-content/uploads/flex-alt-1-1536x289.png 1536w, https://webkit.org/wp-content/uploads/flex-alt-1-2048x385.png 2048w\" /></figure>\n<p>With the second idea, to behave more like Grid dense packing, Flexbox could instead rearrange the order of items and back-fill smaller spaces with smaller items. In this case, item 6 and 10 end up out of the normal order, placed on previous rows.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/flex-alt-2.png\" alt=\"A similar diagram, with the changes if Idea 2 is chosen. Item 6 &amp; 10 are reordered to be visually earlier in the layout.\" width=\"3828\" height=\"702\" srcset=\"https://webkit.org/wp-content/uploads/flex-alt-2.png 3828w, https://webkit.org/wp-content/uploads/flex-alt-2-300x55.png 300w, https://webkit.org/wp-content/uploads/flex-alt-2-1024x188.png 1024w, https://webkit.org/wp-content/uploads/flex-alt-2-768x141.png 768w, https://webkit.org/wp-content/uploads/flex-alt-2-1536x282.png 1536w, https://webkit.org/wp-content/uploads/flex-alt-2-2048x376.png 2048w\" /></figure>\n<p>This second idea would cause smaller items to pile up on the right (on the end edge). Because of this, some folks have wondered if this would be at all useful in practice.</p>\n<p>What do you want “dense” to mean for Flexbox? Do you like the first or second idea more — or do you have a third?</p>\n<h3><a name=\"balanced-packing\"></a>Balanced packing</h3>\n<p>The <code>item-pack</code> property could also allow for new kinds of packing that don’t yet exist. For example, we could invent <code>item-pack: balance</code>.</p>\n<p>Currently, Flexbox places items on each line without any regard to what’s happening on the other lines. This can often end up with a very few number of items on the last line.</p>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/flex-unbalanced.png\" alt=\"A diagram of how Flexbox layouts works today. Five items are on the first row, and only one item is in the second row, stretched to span across the whole.\" width=\"1120\" height=\"408\" srcset=\"https://webkit.org/wp-content/uploads/flex-unbalanced.png 1120w, https://webkit.org/wp-content/uploads/flex-unbalanced-300x109.png 300w, https://webkit.org/wp-content/uploads/flex-unbalanced-1024x373.png 1024w, https://webkit.org/wp-content/uploads/flex-unbalanced-768x280.png 768w\" /></p>\n<p>A new <code>balance</code> value could tell the browser to instead balance the items in some fashion, similar to <code>text-wrap: balance</code>, ensuring the last line doesn’t stand out as weird.</p>\n<pre><code><span>.container</span> {\n  <span>display</span>: <span>flex</span>;\n  <span>item-pack</span>: <span>balance</span>;\n}\n</code></pre>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/flex-balanced.png\" alt=\"Now instead, three items are on the first row of the layout, and three items are on the second row. This looks better.\" width=\"1120\" height=\"422\" srcset=\"https://webkit.org/wp-content/uploads/flex-balanced.png 1120w, https://webkit.org/wp-content/uploads/flex-balanced-300x113.png 300w, https://webkit.org/wp-content/uploads/flex-balanced-1024x386.png 1024w, https://webkit.org/wp-content/uploads/flex-balanced-768x289.png 768w\" /></p>\n<p>This could be incredibly useful and solve a long-standing frustration with Flexbox.</p>\n<h3><a name=\"collapsed-packing\"></a>Collapsed packing</h3>\n<p>The <code>item-pack</code> property could also give us a new home for the trigger for masonry-style layouts. This is a change from the previous Masonry proposals:</p>\n<table>\n<thead>\n<tr>\n<th>Proposal</th>\n<th>Trigger for masonry layouts</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Just Use Grid</td>\n<td><code>grid-template-rows: collapse</code></td>\n</tr>\n<tr>\n<td>New Masonry Layout</td>\n<td><code>display: masonry</code></td>\n</tr>\n<tr>\n<td>the Item Pack approach</td>\n<td><code>item-pack: collapse</code></td>\n</tr>\n</tbody>\n</table>\n<p>Going in this direction means we might not use either of the triggers for masonry layouts from <a href=\"https://webkit.org/blog/16026/css-masonry-syntax/\">Just Use Grid or New Masonry Layouts</a>. We could abandon both in favor of this new trigger.</p>\n<p>We’ll write more about how collapsed item packing could work for masonry layouts in our next article, <em>Item Flow – Part 2: next steps for Masonry.</em></p>\n<h2><a name=\"item-slack\"></a>Item slack</h2>\n<p>The <code>item-slack</code> property would allow you to control just how picky the layout engine is when determining where to put the next item.</p>\n<p>For masonry-style layouts, this would be the new name for the property previously discussed as <code>grid-slack</code> or <code>masonry-slack</code>. A default slack of <code>1em</code> means, “hey, when you are looking to see which column has an empty space closest to the top (as you decide where to put the next item), don’t worry about it if the difference is 1em or less. Just consider those tied.”</p>\n<p>For Flexbox, this could set a point to switch from loose packing to cramming in extra item — which is currently set to zero. A value of <code>1em</code> would mean, if it’s within 1em of fitting, cram it in, otherwise wrap to the next line. This idea could integrate with the first idea for Flexbox dense packing (described above), or replace it entirely.</p>\n<p>Maybe <code>-slack</code> is not the best name. You can suggest other words <a href=\"https://github.com/w3c/csswg-drafts/issues/10884\">in the CSSWG issue</a>. Perhaps <code>item-tolerance</code> would be better, for example — or threshold, strictness, adjust, sensitivity.</p>\n<h2><a name=\"the-overall-plan\"></a>The Overall Plan</h2>\n<p>Put all of these ideas together, and you get this matrix.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/item-flow-matrix.png\" alt=\"A table showing the list of properties, values, and what they do. Everything here is described in this article. \" width=\"2126\" height=\"1200\" srcset=\"https://webkit.org/wp-content/uploads/item-flow-matrix.png 2126w, https://webkit.org/wp-content/uploads/item-flow-matrix-300x169.png 300w, https://webkit.org/wp-content/uploads/item-flow-matrix-1024x578.png 1024w, https://webkit.org/wp-content/uploads/item-flow-matrix-768x433.png 768w, https://webkit.org/wp-content/uploads/item-flow-matrix-1536x867.png 1536w, https://webkit.org/wp-content/uploads/item-flow-matrix-2048x1156.png 2048w\" /></figure>\n<p>In case it’s not clear, web developers will be able to use the longhands or the shorthand as desired. You could, for example, define a Flexbox context with:</p>\n<pre><code><span>.container</span> {\n  <span>display</span>: <span>flex</span>;\n  <span>item-direction</span>: <span>column</span>;\n  <span>item-wrap</span>: <span>nowrap</span>;\n}\n</code></pre>\n<p>Or get the exact same result with:</p>\n<pre><code><span>.container</span> {\n  <span>display</span>: <span>flex</span>;\n  <span>item-flow</span>: <span>column</span> <span>nowrap</span>;\n}\n</code></pre>\n<p>Of course, this whole idea for Item Flow is still a work in progress. Big changes can still be made. The names are temporary. This article’s description of how works is just the first draft. There are many conversations and many decisions to be had.</p>\n<h2><a name=\"what-do-you-think\"></a>What do you think?</h2>\n<p>We would love to hear what you think about Item Flow.</p>\n<ul>\n<li>Is this a good idea to combine <code>flex-flow</code> and <code>grid-auto-flow</code> into a unified system?</li>\n<li>As a developer would you use the new syntax to accomplish the things you do today with <code>flex-flow</code> and <code>grid-auto-flow</code>?\n<ul>\n<li><code>item-direction: row | column | row-reverse | column-reverse</code>  </li>\n<li><code>item-wrap: auto | nowrap | wrap | normal | reverse</code></li>\n<li><code>item-pack: normal | dense</code> </li>\n</ul>\n</li>\n<li>What other ideas might you have for combining existing functionality in Flexbox and Grid into a unified system?</li>\n<li>Are you excited about the possibilities of adding new capabilities to Grid and Flexbox? Which ones have the most potential to help you do your work, and unlock new designs?\n<ul>\n<li>No wrapping for Grid with: <code>item-wrap: nowrap</code></li>\n<li>Dense packing for Flexbox with: <code>item-pack: dense</code></li>\n<li>Balanced wrapping for Flexbox with: <code>item-pack: balance</code></li>\n<li>Adjusting when content is crammed/not in Flexbox with: <code>item-slack: &lt;length-percentage&gt;</code> </li>\n</ul>\n</li>\n<li>What other new ideas might you want to add in this unified system?</li>\n</ul>\n<p>We’d love to hear what you think. Find Jen Simmons on <a href=\"https://bsky.app/profile/jensimmons.bsky.social\">Bluesky</a> or <a href=\"https://front-end.social/@jensimmons\">Mastodon</a> to share your feedback. Or even better, publish your thoughts in a blog post and share the link. Explore examples. Explain ideas. And let us know if you like this direction. While the CSS Working Group has resolved to pursue Item Flow, there’s still plenty of time to go in another direction if need be once we hear from web developers.</p>\n<p>Stay tuned for <em>Item Flow – Part 2: next steps for Masonry</em> to learn more about how all this affects the plans for masonry layouts, and to learn more about the specific debates about how <code>item-flow</code> syntax could work.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"eadd1c2a530101400421e3f028b7072a11e3fe17ad331b50e3890d23562a3b14","category":"Tech"}