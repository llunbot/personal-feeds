{"title":"Vector search for Amazon DocumentDB (with MongoDB compatibility) is now generally available","link":"https://aws.amazon.com/blogs/aws/vector-search-for-amazon-documentdb-with-mongodb-compatibility-is-now-generally-available/","date":1701279179000,"content":"<p>Today, we are announcing the general availability of <strong>vector search for Amazon DocumentDB</strong> (with MongoDB compatibility), a new built-in capability that lets you store, index, and search millions of vectors with millisecond response times within your document database.</p> \n<p>Vector search is an emerging technique used in <a href=\"https://aws.amazon.com/machine-learning/\">machine learning (ML)</a> to find similar data points to given data by comparing their vector representations using distance or similarity metrics. Vectors are numerical representation of unstructured data created from large language models (LLM) hosted in Amazon Bedrock, Amazon SageMaker, and other open source or proprietary ML services. This approach is useful in creating <a href=\"https://aws.amazon.com/generative-ai\">generative artificial intelligence (AI)</a> applications, such as intuitive search, product recommendation, personalization, and chatbots using <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/jumpstart-foundation-models-customize-rag.html\">Retrieval Augmented Generation</a> (RAG) model approach. For example, if your data set contained individual documents for movies, you could semantically search for movies similar to <em>Titanic</em> based on shared context such as “boats”, “tragedy”, or “movies based on true stories” instead of simply matching keywords.</p> \n<p>With vector search for Amazon DocumentDB, you can effectively search the database based on nuanced meaning and context without spending time and cost to manage a separate vector database infrastructure. You also benefit from the fully managed, scalable, secure, and highly available JSON-based document database that Amazon DocumentDB provides.</p> \n<p><strong><u>Getting started with vector search on Amazon DocumentDB</u></strong><br /> The vector search feature is available on your Amazon DocumentDB 5.0 instance-based clusters. To implement a vector search application, you generate vectors using embedding models for fields inside your document and store vectors side by side your source data inside Amazon DocumentDB.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/12/2023-vector-search-for-documentdb.png\" width=\"2190\" height=\"520\" /></p> \n<p>Next, you create a vector index on a vector field that will help retrieve similar vectors and can search the Amazon DocumentDB database using semantic search. Finally, user-submitted queries are converted to vectors using the same embedding model to get semantically similar documents and return them to the client.</p> \n<p>Let’s look at how to implement a simple semantic search application using vector search on Amazon DocumentDB.</p> \n<p><strong>Step 1. Create vector embeddings using the Amazon Titan Embeddings model</strong><br /> Let’s use the <a href=\"https://aws.amazon.com/bedrock/titan/\">Amazon Titan Embeddings</a> model to create an embedding vector. Amazon Titan Embeddings model is available in Amazon Bedrock, a serverless generative AI service. You can easily access it using a single API and without managing any infrastructure.</p> \n<pre><code>prompt = \"I love dog and cat.\"\nresponse = bedrock_runtime.invoke_model(\n    body= json.dumps({\"inputText\": prompt}), \n    modelId='amazon.titan-embed-text-v1', \n    accept='application/json', \n    contentType='application/json'\n)\nresponse_body = json.loads(response['body'].read())\nembedding = response_body.get('embedding')</code></pre> \n<p>The returned vector embedding will look similar to this:</p> \n<p><code>[0.82421875, -0.6953125, -0.115722656, 0.87890625, 0.05883789, -0.020385742, 0.32421875, -0.00078201294, -0.40234375, 0.44140625, ...]</code></p> \n<p><strong>Step 2. Insert vector embeddings and create a vector index</strong><br /> You can add generated vector embeddings using the<code> insertMany( [{},...,{}] )</code> operation with a list of the documents that you want added to your collection in Amazon DocumentDB.</p> \n<pre><code>db.collection.insertMany([\n    {sentence: \"I love a dog and cat.\", vectorField: [0.82421875, -0.6953125,...]},\n    {sentence: \"My dog is very cute.\", vectorField: [0.05883789, -0.020385742,...]},\n    {sentence: \"I write with a pen.\", vectorField: [-0.020385742, 0.32421875,...]},\n  ...\n]);\n</code></pre> \n<p>You can create a vector index using the <code>createIndex</code> command. Amazon DocumentDB performs an approximate nearest neighbor (ANN) search using the inverted file with flat compression (IVFFLAT) vector index. The feature supports three distance metrics: euclidean, cosine, and inner product. We will use the euclidean distance, a measure of the straight-line distance between two points in space. The smaller the euclidean distance, the closer the vectors are to each other.</p> \n<pre><code>db.collection.createIndex (\n   { vectorField: \"vector\" },\n   { \"name\": \"index name\",\n     \"vectorOptions\": {\n        \"dimensions\": 100, // the number of vector data dimensions\n        \"similarity\": \"euclidean\", // Or cosine and dotProduct\n        \"lists\": 100 \n      }\n   }\n);</code></pre> \n<p><strong>Step 3.  Search vector embeddings from Amazon DocumentDB</strong><br /> You can now search for similar vectors within your documents using a new aggregation pipeline operator within <code>$search</code>. The example code to search “<code>I like pets</code>” is as follows:</p> \n<pre><code>db.collection.aggregate ({\n  $search: {\n    \"vectorSearch\": {\n      \"vector\": [0.82421875, -0.6953125,...], // Search for ‘I like pets’\n      \"path\": vectorField,\n      \"k\": 5,\n      \"similarity\": \"euclidean\", // Or cosine and dotProduct\n      \"probes\": 1 // the number of clusters for vector search\n      }\n     }\n   });</code></pre> \n<p>This returns search results such as “<code>I love a dog and cat.</code>” which is semantically similar.</p> \n<p>To learn more, see Amazon DocumentDB documentation. To see a more practical example—a semantic movie search with Amazon DocumentDB—find the Python source codes and data-sets in the <a href=\"https://github.com/aws-samples/amazon-documentdb-samples/tree/master/blogs\">GitHub repository</a>.</p> \n<p><strong><u>Now available</u></strong><br /> Vector search for Amazon DocumentDB is now available at no additional cost to all customers using Amazon DocumentDB 5.0 instance-based clusters in all AWS Regions where <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/\">Amazon DocumentDB is available</a>. Standard compute, I/O, storage, and backup charges will apply as you store, index, and search vector embeddings on Amazon DocumentDB.</p> \n<p>To learn more, see the <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/vector-search.html\">Amazon DocumentDB documentation</a> and send feedback to <a href=\"https://repost.aws/tags/TAeCCo4G99RSWdEcbwRH2bdQ/amazon-documentdb\">AWS re:Post for Amazon DocumentDB</a> or through your usual AWS Support contacts.</p> \n<p>— <a href=\"https://twitter.com/channyun\">Channy</a></p>","author":"Channy Yun","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"492b21aa9b4cb9c7538f0d92c294021aa56aeead1927428f4082af05e5841459","category":"Tech"}