{"title":"Amazon RDS for MySQL zero-ETL integration with Amazon Redshift, now generally available, enables near real-time analytics","link":"https://aws.amazon.com/blogs/aws/amazon-rds-for-mysql-zero-etl-integration-with-amazon-redshift-now-generally-available-enables-near-real-time-analytics/","date":1726177645000,"content":"<p>Zero-ETL integrations help unify your data across applications and data sources for holistic insights and breaking data silos. They provide a fully managed, no-code, near real-time solution for making petabytes of transactional data available in <a href=\"https://aws.amazon.com/redshift/\">Amazon Redshift</a> within seconds of data being written into <a href=\"https://aws.amazon.com/rds/mysql/\">Amazon Relational Database Service (Amazon RDS) for MySQL</a>. This eliminates the need to create your own ETL jobs simplifying data ingestion, reducing your operational overhead and potentially lowering your overall data processing costs. Last year, we announced the general availability of zero-ETL integration with Amazon Redshift for <a href=\"https://aws.amazon.com/rds/aurora/\">Amazon Aurora MySQL-Compatible Edition</a> as well as the availability in preview of Aurora PostgreSQL-Compatible Edition, <a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a>, and RDS for MySQL.</p> \n<p>I am happy to announce that Amazon RDS for MySQL zero-ETL with Amazon Redshift is now generally available. This release also includes new features such as data filtering, support for multiple integrations, and the ability to configure zero-ETL integrations in your <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> template.</p> \n<p>In this post, I’ll show how you can get started with data filtering and consolidating your data across multiple databases and data warehouses. For a step-by-step walkthrough on how to set up zero-ETL integrations, see <a href=\"https://aws.amazon.com/blogs/aws/amazon-aurora-mysql-zero-etl-integration-with-amazon-redshift-is-now-generally-available/\">this blog post</a> for a description of how to set one up for Aurora MySQL-Compatible, which offers a very similar experience.</p> \n<p><span><strong>Data filtering</strong></span><br /> Most companies, no matter the size, can benefit from adding filtering to their ETL jobs. A typical use case is to reduce data processing and storage costs by selecting only the subset of data needed to replicate from their production databases. Another is to exclude personally identifiable information (PII) from a report’s dataset. For example, a business in healthcare might want to exclude sensitive patient information when replicating data to build aggregate reports analyzing recent patient cases. Similarly, an e-commerce store may want to make customer spending patterns available to their marketing department, but exclude any identifying information. Conversely, there are certain cases when you might not want to use filtering, such as when making data available to fraud detection teams that need all the data in near real time to make inferences. These are just a few examples, so I encourage you to experiment and discover different use cases that might apply to your organization.</p> \n<p>There are two ways to enable filtering in your zero-ETL integrations: when you first create the integration or by modifying an existing integration. Either way, you will find this option on the “Source” step of the zero-ETL creation wizard.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/07/22/zero-etl-filtering-screenshot.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/07/22/zero-etl-filtering-screenshot.png\" alt=\"Interface for adding data filtering expressions to include or exclude databases or tables.\" width=\"3128\" height=\"1779\" /></a></p> \n<p>You apply filters by entering filter expressions that can be used to either include or exclude databases or tables from the dataset in the format of database*.table*. You can add multiple expressions and they will be evaluated in order from left to right.</p> \n<p>If you’re modifying an existing integration, the new filtering rules will apply from that point in time on after you confirm your changes and Amazon Redshift will drop tables that are no longer part of the filter.</p> \n<p>If you want to dive deeper, I recommend you read this blog post, which goes in depth into <a href=\"https://aws.amazon.com/blogs/big-data/announcing-data-filtering-for-amazon-aurora-mysql-zero-etl-integration-with-amazon-redshift/\">how you can set up data filters for Amazon Aurora zero-ETL integrations</a> since the steps and concepts are very similar.</p> \n<p><span><strong>Create multiple zero-ETL integrations from a single database<br /> </strong></span>You are now also able to configure up integrations from a single RDS for MySQL database to up to 5 Amazon Redshift data warehouses. The only requirement is that you must wait for the first integration to finish setting up successfully before adding others.</p> \n<p>This allows you to share transactional data with different teams while providing them ownership over their own data warehouses for their specific use cases. For example, you can also use this in conjunction with data filtering to fan out different sets of data to development, staging, and production Amazon Redshift clusters from the same Amazon RDS production database.</p> \n<p>Another interesting scenario where this could be really useful is consolidation of Amazon Redshift clusters by using zero-ETL to replicate to different warehouses. You could also use Amazon Redshift materialized views to explore your data, power your <a href=\"https://aws.amazon.com/quicksight/\">Amazon Quicksight</a> dashboards, share data, train jobs in Amazon SageMaker, and more.</p> \n<p><strong><span>Conclusion</span><br /> </strong>RDS for MySQL zero-ETL integrations with Amazon Redshift allows you to replicate data for near real-time analytics without needing to build and manage complex data pipelines. It is generally available today with the ability to add filter expressions to include or exclude databases and tables from the replicated data sets. You can now also set up multiple integrations from the same source RDS for MySQL database to different Amazon Redshift warehouses or create integrations from different sources to consolidate data into one data warehouse.</p> \n<p>This zero-ETL integration is available for RDS for MySQL versions 8.0.32 and later, Amazon Redshift Serverless, and Amazon Redshift RA3 instance types in <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RDS_Fea_Regions_DB-eng.Feature.ZeroETL.html\">supported AWS Regions.</a></p> \n<p>In addition to using the AWS Management Console, you can also set up a zero-ETL integration via the AWS Command Line Interface (AWS CLI) and by using an AWS SDK such as boto3, the official AWS SDK for Python.</p> \n<p>See the documentation to learn more about <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/zero-etl.html\">working with zero-ETL integrations</a>.</p> \n<p>— <a href=\"https://youtube.com/@codingmatheus\">Matheus Guimaraes</a></p>","author":"Matheus Guimaraes","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"ab098767ef6e9c00dcd3326122f2d801b94c578a852ac76d5f652b280984e1ae","category":"Tech"}