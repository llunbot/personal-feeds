{"title":"ว่าด้วยเรื่องของการ Scaling ระบบในรูปแบบ Monolith","link":"https://www.somkiat.cc/scaling-monolith/","date":1737454106000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2025/01/architecture-01-150x150.jpg\" alt=\"\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2025/01/architecture-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2025/01/architecture-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/01/architecture-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/01/architecture-01-1024x602.jpg\" alt=\"\" width=\"662\" height=\"388\" /></a></figure>\n\n\n\n<p>จากการไปแบ่งปันเรื่องของ Software Architecture ในมุมมองด้านโครงสร้าง<br />พบว่าจะมีโครงสร้างของระบบหลายรูปแบบ<br />แต่ส่วนใหญ่ที่พบคือ จะแยกเป็น tier ต่าง ๆ ออกมา<br />แล้วแต่ละ tier จะมีขนาดที่ใหญ่มาก ๆ ตามเวลาหรือจำนวน feature<br />ไม่ว่าจะเป็น web tier, business tier, service tier และ database tier<br />โดยการโตแบบนี้จะเรียกว่า Monolith<br />หรือบ่อยครั้งจะเรียกว่า Legacy system นั่นเอง<br />ส่งผลให้ดูแลรักษายาก <br />พัฒนายาก <br />build นาน<br />scale ยาก !!</p>\n\n\n\n<span></span>\n\n\n\n<p>และต่อมาก็คิดว่าแยกออกไปเป็น service เล็ก ๆ จะช่วยได้<br />ทั้ง micro-service, nano-service หรือ macro-service<br />แต่ก็ไม่ได้ช่วย อาจจะสร้างปัญหาใหม่ ๆ ขึ้นมาอีก !!</p>\n\n\n\n<p><strong><em>ดังนั้นแนวทางที่มักจะแนะนำก่อนที่จะแยกคือ ทำของเดิมให้มันดีขึ้นก่อนไหม ?</em></strong></p>\n\n\n\n<p>Q: ถ้าระบบมีปัญหาแก้ไขอย่างไร ?<br />A: restart ไงละ<br />Q: ถ้ามีปัญหาทุก ๆ วัน แก้ไขอย่างไร ?<br />A: ตั้ง schedule restart มันทุกวันไงละ ง่ายจะตาย !!</p>\n\n\n\n<p>เราคงไม่ทำในระยะยาวกันนะ แต่ระยะสั้น ๆ อาจจะทำก็ได้</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/01/restart-server-01.jpeg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/01/restart-server-01.jpeg\" alt=\"\" width=\"248\" height=\"275\" /></a></figure>\n\n\n\n<p><strong>ถ้าความต้องการของระบบต้องการ scale ให้รองรับผู้ใช้งานที่มากขึ้น</strong></p>\n\n\n\n<p>คำว่ามากขึ้นมีทั้ง</p>\n\n\n\n<ul>\n<li>ผู้ใช้งานมากขึ้น</li>\n\n\n\n<li>ข้อมูลมากขึ้น</li>\n</ul>\n\n\n\n<p><em><strong>แต่ก่อนอื่นระบบงานต้องมีระบบ monitoring หรือ observability ที่ดีก่อน<br />ทั้ง log, metric และ tracing<br />เพื่อช่วยให้การวิเคราะห์ การปรับปรุงได้ดียิ่งขึ้น</strong></em></p>\n\n\n\n<p>มาเริ่มกันเลย</p>\n\n\n\n<p>ก่อนอื่นต้องเข้าใจก่อนว่า เมื่อระบบโตขึ้น <br />feature มากขึ้น<br />ผู้ใช้งานมากขึ้น<br />ข้อมูลมากยิ่งขึ้น<br />มันส่งผลต่อการพัฒนา ทดสอบ และ deploy รวมทั้งการ scale ด้วยหรือไม่ ?<br />ถ้าใช่ แสดงว่า เราเจอปัญหาเข้าให้แล้ว<br />จำเป็นจะต้องแก้ไขปัญหานั้น ๆ ให้เร็วที่สุด<br />อย่าผลัดวันประกันพรุ่ง !!</p>\n\n\n\n<p><strong>ตัวอย่างของ scale ระบบที่มักจะทำกันอย่างแรกคือ Vertical scale หรือ Scale up</strong></p>\n\n\n\n<p>คือการขยายเครื่องให้ใหญ่ขึ้นทั้ง CPU, Memory, Disk และ Network<br />มีกี่เครื่อง หรือ กี่ส่วนของขยายกันไป<br />ยิ่งระบบไหนอยู่บน cloud ได้ลากไปทางขวากันง่าย ๆ และ สนุกเลย !!<br />เป็นแนวทางที่เรียบง่าย <br />ไม่ต้องเปลี่ยนแปลง architecture <br />ไม่ต้องเปลี่ยนแปลงรูปแบบการ deploy<br />ไม่ต้องเปลี่ยนแปลงรูปแบบการ monitor</p>\n\n\n\n<p><strong>แต่การ scale แบบนี้ก็มี limit ที่กำหนดไว้</strong><br />ยิ่งกว่านั้นเมื่อค่าใช้จ่ายที่ใช้ไป <br />มันไม่สมเหตุสมผลต่อทาง business <br />ค่าใช้จ่ายมากกว่ารายรับที่ได้<br />รวมทั้ง performance ที่ได้รับกลับมา</p>\n\n\n\n<p><em><strong>ยิ่งถ้าล่มไปกระทบต่อผู้ใช้งาน และ business อีก<br />โดนด่าอีก<br />มี single-point-of-failure อีก</strong></em></p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/01/scaling.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/01/scaling.png\" alt=\"\" width=\"497\" height=\"331\" /></a></figure>\n\n\n\n<p><br /></p>\n\n\n\n<p><strong>ดังนั้นอาจจะต้อง scale ในรูปแบบของ Horizontal scale หรือ Scale out</strong></p>\n\n\n\n<p>คือการเพิ่มเครื่องเข้าไป<br />ทั้งฝั่งของ frontend<br />ทั้งฝั่งของ backend/service<br />ทั้งฝั่งของ database<br />และยังต้องเพิ่มพวก Load balance เข้ามา<br />เพื่อช่วยกระจาย load ไปยังเครื่องต่าง ๆ ที่เพิ่มเข้ามา<br />หรืออาจจะมี API gateway เข้ามาอีก<br />ซึ่งแน่นอนว่า ช่วยทำให้ระบบงานดีขึ้น รองรับผู้ใช้งานได้มากขึ้น<br />แต่ตามมาด้วยความซับซ้อนที่สูงขึ้น<br />อีกอย่าง Architecture ของระบบงานที่ออกแบบและพัฒนากันมา<br />สนับสนุนโครงสร้างแบบนี้หรือไม่ ? (Stateless vs Stateful)<br />รูปแบบของการ monitor และ deploy ก็เปลี่ยนไป</p>\n\n\n\n<p><strong>ต้องทำการเพิ่ม Caching ใน layer/tier ต่าง ๆ ด้วยหรือไม่ ?</strong></p>\n\n\n\n<p>เพื่อปรับ response time ให้รวดเร็วมากขึ้น<br />ลด load ต่าง ๆ ที่เข้ามาในระบบ เช่น</p>\n\n\n\n<ul>\n<li>Web browser caching</li>\n\n\n\n<li>CDN caching</li>\n\n\n\n<li>Application-level caching</li>\n\n\n\n<li>Database query caching</li>\n</ul>\n\n\n\n<p>จะจัดการเรื่อง caching ได้ดี<br />จำเป็นต้องเข้าใจการใช้งานข้อมูล (Read vs Write)<br />การออกแบบ data model ที่เหมาะสมต่อการใช้งาน<br />อย่าลืมว่า caching มันคือ การสร้าง duplication data ขึ้นมานะ !!</p>\n\n\n\n<p><strong>ต่อมาในส่วนของ Database ก็ต้อง scale ด้วย</strong></p>\n\n\n\n<p>เช่นการทำ replica เพื่อรองรับการ read ที่มากขึ้น<br />แต่ระวังเรื่อง lag time ระหว่างการ write ที่ primary กับการ read ที่ replica ด้วย</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/01/replica-database.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/01/replica-database-1024x726.jpg\" alt=\"\" width=\"434\" height=\"307\" /></a></figure>\n\n\n\n<p>ยังไม่พอเรื่องของ data model ที่ใช้งาน<br />ต้องมองทั้งการ read และ write<br />บ่อยครั้งพบว่า เรามักจะออกแบบ model เดียวแล้วใช้ทั้ง read และ write<br />ซึ่งอาจจะไม่เหมาะสมนัก<br />จึงต้องปรับปรุงเรื่องนี้ เพื่อลดการ read หรือ query ที่หนักเกินไป<br />เพราะว่าจะใช้งาน CPU และ memory ของ database มากเกินไป<br />จากนัั้นก็จะกระทบต่อ operation อื่น ๆ<br />ในเรื่องนี้อาจจะเรียกว่าการทำ</p>\n\n\n\n<ul>\n<li>Materialized view</li>\n\n\n\n<li>Denormalization vs Nomalizarion</li>\n\n\n\n<li>Pre-aggregate/summarize data</li>\n</ul>\n\n\n\n<p>ในเรื่องของข้อมูลใน database ก็เช่นเดียวกัน<br />ข้อมูลอะไรไม่ใช้งานแล้ว หรือ นาน ๆ  ใช้ครั้ง<br />อาจจะต้องแยกออกจากกัน <br />มิเช่นนั้น ระบบอาจจะมีปัญหาเมื่อ data สูงขึ้นเรื่อย ๆ</p>\n\n\n\n<p><strong>ในส่วนนี้อาจจะทำพวก house keeping ก็ได้</strong><br />ทำ data partitioning ก็ได้<br />ทำ data sharding ก็ได้<br />อยู่ที่ use case ของระบบงานนั่นเอง</p>\n\n\n\n<p><strong>ใน database นั้นอย่าลืมดูพวก slow query ด้วย</strong><br />เพื่อทำการปรับปรุงให้ดีขึ้น<br />หรือแม้แต่ query ไหนที่ใช้งานเยอะ ๆ <br />ก็ต้องปรับในส่วนของ application ให้ใช้งานลดลง <br />เช่น caching และ data model ก่อนหน้านั่นเอง</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/01/slow-query.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/01/slow-query.png\" alt=\"\" width=\"403\" height=\"404\" /></a></figure>\n\n\n\n<p><strong>ยังไม่พออาจจะทำการแยกงานบางอย่างออกมาจากระบบ</strong></p>\n\n\n\n<p>เช่นงานที่ใช้ resource เยอะ หรือ งานที่ทำงานนาน ๆ<br />สามารภแยกออกไปทำด้วยการใช้งาน messaging queue เข้ามาช่วย<br />เช่น</p>\n\n\n\n<ul>\n<li>Upload file</li>\n\n\n\n<li>ส่ง email หรือพวก notification ต่าง ๆ</li>\n\n\n\n<li>การ generate report</li>\n\n\n\n<li>พวก batch operation</li>\n</ul>\n\n\n\n<p>จะช่วยลดการใช้งาน resource ในส่วนหลักไปได้เยอะ<br />หรือสร้าง buffer ขึ้นมาให้ระบบงานค่อย ๆ  ทำงานไปนั่นเอง</p>\n\n\n\n<p><strong>ดังนั้นจะเห็นได้ว่าระบบ Monilith นั้นมีรูปแบบของการปรับปรุงหลายรูปแบบ</strong></p>\n\n\n\n<p>เราจำเป็นที่จะต้องเรียนรู้ด้วยเช่นกัน<br />ว่าระบบงานของเราอยู่ใน stage ไหน<br />จะได้เลือกวิธีการที่เหมาะสม<br />ก่อนที่สุดท้ายจึงจะแยกออกมาเป็น service เล็ก ๆ<br /><em>เพราะว่าทุกครั้งที่เราแยกอะไรออกมา<br />จะทำให้ระบบเราซับซ้อนขึ้นอย่างมาก (มีได้ก็มีเสีย)</em></p>\n\n\n\n<p><strong>ขั้นตอนทั่วไปที่ผมชอบทำ มีดังนี้</strong></p>\n\n\n\n<ul>\n<li>ปรับปรุง code และ การ query database ก่อน</li>\n\n\n\n<li>เพิ่ม caching เข้าไปในจุดที่เจอปัญหา</li>\n\n\n\n<li>ขยายเครื่องก่อน จนค่าใช้จ่ายไม่สมเหตุสมผล</li>\n\n\n\n<li>ทำการเพิ่มเครื่องทั้ง web, business และ database ตามปัญหาที่พบเจอ</li>\n\n\n\n<li>จัดการข้อมูลให้ดี</li>\n\n\n\n<li>ใช้ messaging queue เข้ามาช่วย</li>\n</ul>\n\n\n\n<p><em><strong>ลองดูว่าระบบของเราเป็นอย่างไร ?</strong></em><br /></p>\n\n\n\n<p></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"9d69aa9f697c1a3472a4e5d71a5f50ee07b6b5ce93a522196f0fe01d5a200c36","category":"Thai"}