{"title":"แนวทางในการปรับปรุงให้ระบบงานเร็วขึ้น","link":"https://www.somkiat.cc/improve-speed-of-service/","date":1722333361000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/improve-speed-150x150.jpeg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/07/improve-speed-150x150.jpeg 150w, https://www.somkiat.cc/wp-content/uploads/2024/07/improve-speed-75x75.jpeg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/07/improve-speed.jpeg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/improve-speed-1024x546.jpeg\" width=\"623\" height=\"331\" /></a></figure>\n\n\n\n<p>หนึ่งในปัญหาของระบบงานคือ ล่ม<br />แต่การล่มอีกหนึ่งรูปแบบคือ ช้า<br /><strong>ช้า === ล่ม</strong><br />ซึ่งล้วนส่งผลต่อความน่าเชื่อถือของระบบ<br />ทั้งจากผู้ใช้งาน และ business ด้วย<br />ดังนั้นสิ่งทีมพัฒนาจะต้องเข้าใจคือ แนวทางในการปรับปรุงระบบให้ทำงานเร็วขึ้น<br />มาดูว่ามีอะไรบ้าง ?<br /><br /><strong><em>ฝั่งคนใช้งาน คงไม่แก้ไขด้วยการเพิ่ม timeout หรอกนะ ?<br />ไม่มีใครเขาทำกัน !!</em></strong></p>\n\n\n\n<span></span>\n\n\n\n<p>จากการเข้าไป review architecture และ source code<br />รวมถึงการปรับปรุงไปนิดหน่อย<br />จึงทำการสรุปไว้ดังนี้</p>\n\n\n\n<ul>\n<li>ทำ caching และ pre-caching ในทุก ๆ  level ทั้ง frontend, backend, data (denormalization), network, file, CDN </li>\n\n\n\n<li>ทำ caching แล้วอย่าลืมเรื่องของการ purge data ด้วย หรือเรื่อง expired time</li>\n\n\n\n<li>ออกแบบ business process flow ให้ชัดเจน ไม่ยาวจนเกินไป หรือ ไม่โดยน flow ของภายใน ออกไปให้ลูกค้า หรือ ผู้ใช้งานมารอ ให้รอเท่าที่จำเป็นเท่านั้น</li>\n\n\n\n<li>จากเรื่อง business process flow นั้น อาจจะต้องออกแบบ UX/UI flow ใหม่ด้วย เพื่อปรับเปลี่ยนพฤติกรรมการทำงานของระบบ</li>\n\n\n\n<li>ถ้าแยกเป็น frontend/backend/micoroservice อย่าให้ผูกมันกันมากนัก อาจจะกันด้วย api gateway, load balancing, service discovery ไว้ด้วย ทำให้เอื้อต่อการเปลี่ยนแปลง หรือ จัดการง่ายเมื่อมันพัง</li>\n\n\n\n<li>การติดต่อสื่อสารระหว่างส่วนงานต่าง ๆ อาจจะต้องปรับเปลี่ยนไปใช้งาน asynchonous communication หรือ processing อีกด้วย แต่อย่าลืมว่า ช้า === ล่มนะ ถึงแม้ทาง IT จะบอกว่าไม่ล่ม แต่ส่ง responseไปยังลูกค้าช้า !! ดังนั้นต้องมองให้ครบแบบ end-to-end</li>\n\n\n\n<li>การทำงานกับ database ถ้ามันช้าก็จัดการหลาย ๆ ส่วน ทั้ง design for read และ design for write, normalization vs normalization, indexing ให้เหมาะสม, data sharding/partition, เลือกใช้ databasae model ให้เหมาะกับงานด้วย อย่าลืมดู slow log กันด้วย</li>\n\n\n\n<li>เมื่อพูดถึงเรื่อง data ก็อย่าลืมบีบอัดข้อมูลที่ส่งไปมาผ่านระบบ network กันด้วย รวมทั้ง connection ด้วยว่าต้องใช้ keep-alive นานเท่าไร อย่างไร ในแต่ละ usecase</li>\n\n\n\n<li>วาด flow การทำงานของระบบด้วยในแต่ละเรื่องด้วย เพื่อให้เข้าใจว่าทำงานอย่างไร</li>\n\n\n\n<li>เรื่องของ observability ของระบบขาดไม่ได้เลย เช่น metric, trace และ log เป็นต้น อีกตัวที่ชอบใช้คือ exception tracking</li>\n\n\n\n<li>เรื่องของการ write log ของระบบ เจอว่ายังทำงานแบบ synchพonous อยู่เลย ตรงนี้แก้ได้แก้เลย</li>\n</ul>\n\n\n\n<p></p>\n\n\n\n<p><strong>ปล. ระบบทำงานเร็วอย่างเดียวยังไม่เพียงพอ</strong></p>\n\n\n\n<p>ต้องทำงานได้อย่างถูกต้องด้วย ดังนั้น<br />เรื่องของ การทดสอบ จึงสำคัญ<br />เรื่องของ observability จึงสำคัญ<br />และรับ feedback จากผู้ใช้งาน ยิ่งสำคัญมาก ๆ<br /><strong><em>ดังนั้น feedback loop ยิ่งเร็วยิ่งดี</em></strong></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"cee07875a24eb39b5e6d7e5cdfc7673c948880213e30c2ba1b0854171d59b503","category":"Thai"}