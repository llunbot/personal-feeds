{"title":"Modern CSS Tooltips And Speech Bubbles (Part 2)","link":"https://smashingmagazine.com/2024/03/modern-css-tooltips-speech-bubbles-part2/","date":1709899200000,"content":"<p>I hope you were able to spend time getting familiar with <a href=\"https://www.smashingmagazine.com/2024/03/modern-css-tooltips-speech-bubbles-part1/\">the techniques we used to create tooltips in Part 1</a> of this quick two-parter. Together, we were able to create a flexible tooltip pattern that supports different directions, positioning, and coloration without adding any complexity whatsoever to the HTML.</p>\n<p>We leveraged the CSS <code>border-image</code> property <a href=\"https://www.smashingmagazine.com/2024/01/css-border-image-property/\">based on another article I wrote</a> while applying clever <code>clip-path</code> tricks to control the tooltip’s tail. If you haven’t checked out that article or the first part of this series, please do because we’re jumping straight into things today, and the context will be helpful.</p>\n<p>So far, we’ve looked at tooltip shapes with triangular tails with the option to have rounded corners and gradient coloration. Sure, we were able to do lots of things but there are many other — and more interesting — shapes we can accomplish. That’s what we’re doing in this article. We will handle cases where a tooltip may have a border and different tail shapes, still with the least amount of markup and most amount of flexibility.</p>\n<p>Before we start, I want to remind you that I’ve created <a href=\"https://css-generators.com/tooltip-speech-bubble/\">a big collection of 100 tooltip shapes</a>. I said in Part 1 that we would accomplish all of them in these two articles. We covered about half of them in Part 1, so let’s wrap things up here in Part 2.</p>\nThe HTML\n<p>Same as before!</p>\n<pre><code>&lt;div class=\"tooltip\"&gt;Your text content goes here&lt;/div&gt;\n</code></pre>\n\n<p>That’s the beauty of what we’re making: We can create many, many different tooltips out of the same single HTML element without changing a thing.</p>\nTooltips With Borders\n<p>Adding a border to the tooltips we made in Part 1 is tricky. We need the border to wrap around both the main element and the tail in a continuous fashion so that the combined shape is seamless. Let’s start with the first simple shape we created in Part 1 using only two CSS properties:</p>\n<pre><code>.tooltip {\n  /* tail dimensions */\n  --b: 2em; /* base */\n  --h: 1em; /* height*/\n\n  /* tail position */\n  --p: 50%;\n\n  border-image: fill 0 // var(--h)\n    conic-gradient(#CC333F 0 0);\n  clip-path: \n    polygon(0 100%, 0 0,100% 0, 100% 100%,\n      min(100%, var(--p) + var(--b) / 2) 100%,\n      var(--p) calc(100% + var(--h)),\n      max(0%, var(--p) - var(--b) / 2) 100%);\n}\n</code></pre>\n\n<p>Here’s the demo. You can use the range slider to see how flexible it is to change the tail position by updating the <code>--p</code> variable.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-speech-bubbles-part2/1-close-up-tooltip-tail-border-800px.png\" /></p>\n<p>This probably is not that a big deal in most cases. A few pixels aren’t a glaring visual issue, but you can decide whether or not it meets your needs. Me? I’m a perfectionist, so let’s try to fix this minor detail even if the code will get a little more complex.</p>\n<p>We need to do some math that requires trigonometric functions. Specifically, we need to change some of the variables because we cannot get what we want with the current setup. Instead of using the <strong>base</strong> variable for the tail’s dimensions, I will consider an <strong>angle</strong>. The second variable that controls the <strong>height</strong> will remain unchanged.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-speech-bubbles-part2/2-tail-base-height-angle-height.png\" /></p>\n<p>The relationship between the base (<code>--b</code>) and the angle (<code>--a</code>) is equal to <code>B = 2*H*tan(A/2)</code>. We can use this to update our existing code:</p>\n<pre><code>.tooltip {\n  /* tail dimensions */\n  --a: 90deg; /* angle */\n  --h: 1em; /* height */\n\n  --p: 50%; /* position */\n  --t: 5px; /* border thickness */\n\n  border-image: fill 0 // var(--h)\n    conic-gradient(#5e412f 0 0); /* the border color */\n  clip-path: \n    polygon(0 100%, 0 0, 100% 0, 100% 100%,\n      min(100%, var(--p) + var(--h) * tan(var(--a) / 2)) 100%,\n      var(--p) calc(100% + var(--h)),\n      max(0%, var(--p) - var(--h) * tan(var(--a) / 2)) 100%);\n  position: relative;\n  z-index: 0;\n}\n.tooltip:before {\n  content: \"\";\n  position: absolute;\n  inset: var(--t) 0;\n  border-image: fill 0 / 0 var(--t) / var(--h) 0\n    conic-gradient(#CC333F 0 0); /* the background color */\n  clip-path: inherit;\n}\n</code></pre>\n\n<p>Nothing drastic has changed. We introduced a new variable to control the border thickness (<code>--t</code>) and updated the <code>clip-path</code> property with the new variables that define the tail’s dimensions.</p>\n<p>Now, all the work will be done on the pseudo-element’s <code>clip-path</code> property. It will no longer <code>inherit</code> the main element’s value, but it does need a new value to get the correct border thickness around the tail. I want to avoid getting deep into the complex math behind all of this, so here is the implementation:</p>\n<div>\n<pre><code>clip-path: \n  polygon(0 100%, 0 0, 100% 0, 100% 100%,\n    min(100% - var(--t), var(--p) + var(--h)<em>tan(var(--a)/2) - var(--t)</em>tan(45deg - var(--a) / 4)) 100%,\n    var(--p) calc(100% + var(--h) + var(--t)<em>(1 - 1/sin(var(--a)/2))),\n    max(var(--t), var(--p) - var(--h)</em>tan(var(--a)/2) + var(--t)*tan(45deg - var(--a)/4)) 100%);\n</code></pre>\n</div>\n\n<p>It looks complex because it is! You don’t really need to understand the formulas since all you have to do is adjust a few variables to control everything.</p>\n<p>Now, finally, our tooltip is perfect. Here is an interactive demo where you can adjust the position and the thickness. Don’t forget to also play with the dimension of the tail as well.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-speech-bubbles-part2/3-tooltip-variations.png\" /></p>\n<p>Let’s move on to the rounded corners. We can simply use the code we created in the previous article. We duplicate the shape using a pseudo-element and make a few adjustments for perfect alignment and a correct border thickness.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-speech-bubbles-part2/4-tooltip-variations-border-rounded-corners.png\" /></p>\n<p>The reason I’m not going into details for this one is to make the point that you don’t have to remember all the various use cases and code snippets by heart. The goal is to understand the actual concepts we are using to build the tooltips, like working with <code>border-image</code>, <code>clip-path()</code>, gradients, and math functions.</p>\n<p>I can’t even remember most of the code I write after it’s done, but it’s no issue since all I have to do is copy and paste then adjust a few variables to get the shape I want. That’s the benefit of leveraging modern CSS features — they handle a lot of the work for us.</p>\nBorder-Only Tooltips\n<p>I’d like to do one more exercise with you, this time making a tooltip with no fill but still with a full border around the entire shape. So far, we’ve been able to reuse a lot of the code we put together in Part 1, but we’re going to need new tricks to pull this one off.</p>\n<p>The goal is to establish a transparent background while maintaining the border. We’ll start <em>without</em> rounded corners for the moment.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-speech-bubbles-part2/5-tooltip-thick-solid-border.png\" /></p>\n<p>See how we’re going to be working with gradients again? I could have used a single color to produce a solid, single-color border, but I put a hard stop in there to demonstrate the idea. We’ll be able to create even more variations, thanks to this little detail, like using multiple colors, different color stops, and even different types of gradients.</p>\n<p>You’ll see that the code looks fairly straightforward:</p>\n<div>\n<pre><code>.tooltip {\n  /* tail dimension */\n  --a: 90deg; /* angle */\n  --h: 1em; /* height */\n\n  --p: 50%; /* tail position */\n  --b: 7px; /* border thickness */\n\n  position: relative;\n}\n.tooltip:before {\n  content: \"\";\n  position: absolute;\n  inset: 0 0 calc(-1*var(--h));\n  clip-path: polygon( ... ); /* etc. */\n  background: linear-gradient(45deg, #cc333f 50%, #79bd9a 0); /* colors */\n}\n</code></pre>\n</div>\n\n<p>We’re using pseudo element again, this time with a <code>clip-path</code> to establish the shape. From there, we set a <code>linear-gradient()</code> on the <code>background</code>. </p>\n<p>I said the code “looks” very straightforward. Structurally, yes. But I purposely put a placeholder <code>clip-path</code> value because that’s the complicated part. We needed to use a 16-point polygon and math formulas, which honestly gave me big headaches.</p>\n<p>That’s why I turn to my <a href=\"https://css-generators.com/tooltip-speech-bubble/\">online generator</a> in most cases. After all, what’s the point of everyone spending hours trying to suss out which formulas to use if math isn’t your thing? May as well use the tools that are available to you! But note how much better it feels to use those tools when you understand the concepts that are working under the hood.</p>\n<p>OK, let’s tackle rounded corners:</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-speech-bubbles-part2/6-tooltip-with-transparent-background.png\" /></p>\n<p>For this one, we are going to rely on not one, but <em>two</em> pseudo-elements, <code>:before</code> and <code>:after</code>. One will create the rounded shape, and the other will serve as the tail.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-speech-bubbles-part2/7-illustrating-three-step-process.png\" /></p>\n<p>The above figure illustrates the process for creating the rounded part with the <code>:before</code> pseudo-element. We first start with a simple rectangular shape that’s filled with a conic gradient containing three colors. Then, we mask the shape so that the inner area is transparent. After that, we use a <code>clip-path</code> to cut out a small part of the bottom edge to reserve space for the tail we’ll make with the <code>:after</code> pseudo-element.</p>\n<div>\n<pre><code>/* the main element */\n.tooltip {\n  /* tail dimension */\n  --a: 90deg; /* angle */\n  --h: 1em; /* height */\n\n  --p: 50%; /* tail position  */\n  --b: 7px; /* border thickness */\n  --r: 1.2em; /* the radius */\n\n  position: relative;\n  z-index: 0;\n}\n\n/* both pseudo-elements */\n.tooltip:before,\n.tooltip:after {\n  content: \"\";\n  background: conic-gradient(#4ECDC4 33%, #FA2A00 0 66%, #cf9d38 0);  /* the coloration */\n  inset: 0;\n  position: absolute;\n  z-index: -1;\n}\n\n/* the rounded rectangle */\n.tooltip:before {\n  background-size: 100% calc(100% + var(--h));\n  clip-path: polygon( ... );\n  mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);\n  mask-composite: exclude;\n  padding: var(--b);\n}\n\n/* the tail */\n.tooltip:after {\n  content: \"\";\n  position: absolute;\n  bottom: calc(-1 * var(--h));\n  clip-path: polygon( ... );\n}\n</code></pre>\n</div>\n\n<p>Once again, the structure is not all that complex and the <code>clip-path</code> value is the tough part. As I said earlier, there’s really no need to get deep into an explanation on it when we can use the points from an online generator to get the exact shape we want.</p>\n<p>The new piece that is introduced in this code is the <code>mask</code> property. It uses the same technique we covered in yet <a href=\"https://www.smashingmagazine.com/2023/09/revealing-images-css-mask-animations/\">another Smashing article</a> I wrote. Please read that for the full context of how <code>mask</code> and <code>mask-composite</code> work together to trim the transparent area. That’s the first part of your homework after finishing this article.</p>\nFun Tail Shapes\n<p>We’ve covered pretty much every single one of the tooltips available in <a href=\"https://css-generators.com/tooltip-speech-bubble/\">my collection</a>. The only ones we have not specifically touched use a variety of different shapes for the tooltip’s tail.</p>\n<p>All of the tooltips we created in this series used a simple triangle-shaped tail, which is a standard tooltip pattern. Sure, we learned how to change its dimensions and position, but what if we want a different sort of tooltip? Maybe we want something fancier or something that looks more like a speech or thought bubble.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-speech-bubbles-part2/8-tooltips.png\" /></p>\n<p>If the rounded corners in the last section are the first part of your homework, then the next part is to try making these tail variations yourself using what we have learned together in these two articles. You can always find the code over at <a href=\"https://css-generators.com/tooltip-speech-bubble\">my collection</a> for reference and hints. And, leave a comment here if you have any additional questions — I’m happy to help!</p>\nConclusion\n<p>I hope you enjoyed this little series because I sure had a blast writing it. I mean, look at all of the things we accomplished in a relatively short amount of space: simple rectangular tooltips, rounded corners, different tail positions, solid and gradient backgrounds, a bunch of border options, and finally, custom shapes for the tail.</p>\n<p>I probably went too far with how many types of tooltips we could make — <a href=\"https://css-generators.com/tooltip-speech-bubble/\">there are 100 in total</a> when you count them up! But it goes to show just how many possibilities there are, even when we’re always using the same single element in the HTML.</p>\n<p>And, it’s great practice to consider all of the different use cases and situations you may run into when you need a tooltip component. Keep these in your back pocket for when you need them, and use my collection as a reference, for inspiration, or as a starting point for your own work!</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/11/css-responsive-multi-line-ribbon-shapes-part1/\">CSS Responsive Multi-Line Ribbon Shapes (Part 1)</a>,” Temani Afif</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2019/04/art-direction-for-the-web-using-css-shapes/\">Art Direction For The Web Using CSS Shapes</a>,” Andrew Clarke</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2018/09/css-shapes/\">Take A New Look At CSS Shapes</a>,” Rachel Andrew</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/10/animate-along-path-css/\">How To Animate Along A Path In CSS</a>,” Preethi Sam</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"1bb8f31edeb1b38b2bed756d8e07ff0f2aac8b4848a8c43fd866276beef3d94f","category":"Tech"}