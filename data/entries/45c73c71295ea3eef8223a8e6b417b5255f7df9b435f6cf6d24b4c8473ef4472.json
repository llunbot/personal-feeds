{"title":"Deploying securely into Azure architecture with Terraform Cloud and HCP Vault","link":"https://www.hashicorp.com/blog/deploying-securely-into-azure-architecture-with-terraform-cloud-and-hcp-vault","date":1684427400000,"content":"<p>HashiCorp and Microsoft have partnered to create a number of <a href=\"https://developer.hashicorp.com/terraform/tutorials/modules/module\">Terraform modules</a> that build an N-tier architecture following Microsoft's <a href=\"https://learn.microsoft.com/en-us/azure/architecture/framework/\">Azure Well-Architected Framework</a> and security best practices. In the <a href=\"https://www.hashicorp.com/blog/building-a-secure-azure-reference-architecture-with-terraform\">first part of this series</a>, we walked through how to use HashiCorp Terraform to deploy Azure resources using security best practices and policy as code. In this part, we will set up more security utilities to provide a defense-in-depth approach to cloud vulnerabilities. These utilities include:</p>\n\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/azure/defender-for-cloud/defender-for-cloud-introduction\">Microsoft Defender for Cloud</a></li>\n<li><a href=\"https://www.hashicorp.com/blog/dynamic-provider-credentials-now-ga-for-terraform-cloud\">Dynamic provider credentials in Terraform Cloud</a></li>\n<li><a href=\"https://developer.hashicorp.com/hcp/docs/vault\">HashiCorp Cloud Platform (HCP) Vault</a><br /></li>\n</ul>\n\n<h2>Reference architecture</h2>\n\n<p>Similar to the previous post, we will use an <a href=\"https://learn.microsoft.com/en-us/azure/architecture/guide/architecture-styles/n-tier\">N-tier architecture</a>, since it is a common starting point for traditional on-premises applications migrating to Azure infrastructure. The code for this architecture can be found <a href=\"https://github.com/dawright22/Secure-N-Tier-Arch-With-Defender.git\">in this GitHub repository</a>.</p>\n<img src=\"https://www.datocms-assets.com/2885/1681399105-image-1-n-tier-architecture.png\" alt=\"A\" /><h2>Microsoft Defender for Cloud</h2>\n\n<p>After forking the repository, you’ll see the module from part one in the series, with some additions. The first addition is the <a href=\"https://learn.microsoft.com/en-us/azure/defender-for-cloud/defender-for-cloud-introduction\">Defender</a> module, which is used to deploy Microsoft Defender for Cloud. Defender is a cloud-native application protection platform (CNAPP) with a set of security measures and practices designed to protect cloud-based applications from various cyber threats and vulnerabilities.</p>\n<img src=\"https://www.datocms-assets.com/2885/1684424826-defender-files.png\" alt=\"Defender\" /><p>The main.tf file in this folder has the <a href=\"https://techcommunity.microsoft.com/t5/microsoft-defender-for-cloud/deploy-microsoft-defender-for-cloud-via-terraform/ba-p/3563710\">elements needed to deploy Defender</a>. To add them to the overall environment deployment, add the code below to main.tf. This injects the name, resource group, and location of the overall deployment.</p>\n<pre><code># Adding in Security Features\n\n######################################\n# Deploy Defender.\n######################################\n\nmodule \"defender\" {\n source                  = \"./modules/Defender\"\n name                    = random_pet.name.id\n resource_group_location = var.resource_group_location\n resource_group_name     = azurerm_resource_group.rg.name\n email                   = var.email\n phone                   = var.phone\n}</code></pre><h3>Dynamic provider credentials with Terraform Cloud and HCP Vault</h3>\n\n<p>The next step helps you follow <a href=\"https://learn.microsoft.com/en-us/azure/security/fundamentals/encryption-overview\">security best practices for data/storage security</a> for the Azure platform. It involves a new feature in Terraform Cloud: <a href=\"https://www.hashicorp.com/blog/terraform-cloud-adds-dynamic-provider-credentials-vault-official-cloud-providers\">dynamic provider credentials</a>. </p>\n\n<p>Terraform Cloud will use native support for OpenID Connect (OIDC) to <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials\">integrate with Azure to generate dynamic credentials</a> for the AzureRM or AzureAD providers in your Terraform Cloud runs. The process of generating short-lived, just-in-time (JIT) credentials for your cloud deployment limits the amount of time an attacker would have to do damage even if they did obtain the credentials.</p>\n\n<p>The tutorial <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials/azure-configuration\">Dynamic Credentials with the Azure Provider</a> covers the required configuration steps. In the GitHub repository for this tutorial, <a href=\"https://github.com/hashicorp/terraform-dynamic-credentials-setup-examples/tree/main/azure\">we leveraged the Terraform Cloud provider</a> for a fast setup. This is a simple process of cloning the repo, changing into the azure directory, and running the commands shown below:</p>\n\n<pre><code>azure git:(main) ✗ Git clone https://github.com/hashicorp/terraform-dynamic-credentials-setup-examples.git\n\nazure git:(main) ✗ az login\n\nazure git:(main) ✗ terraform login\nTerraform will request an API token for app.terraform.io using your browser.\n\nIf login is successful, Terraform will store the token in plain text in\nthe following file for use by subsequent commands:\n    /Users/dwright/.terraform.d/credentials.tfrc.json\n\nDo you want to proceed?\n  Only 'yes' will be accepted to confirm.\n\n  Enter a value: yes\n\n\n---------------------------------------------------------------------------------\n\nTerraform must now open a web browser to the tokens page for app.terraform.io.\n\nIf a browser does not open this automatically, open the following URL to proceed:\n    https://app.terraform.io/app/settings/tokens?source=terraform-login\n\n\n---------------------------------------------------------------------------------\n\nGenerate a token using your browser, and copy-paste it into this prompt.\n\nTerraform will store the token in plain text in the following file\nfor use by subsequent commands:\n    /Users/dwright/.terraform.d/credentials.tfrc.json\n\nToken for app.terraform.io:\n  Enter a value: xxxxxxxx-xxxxxx-xxxxx-xxxxxxx-xx\n\n\nazure git:(main) ✗ Terraform apply\n</code></pre>\n<p>The next step is to associate your Azure subscription and tenant ID to the workspace. This example takes advantage of <a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/cloud-multiple-variable-sets\">Terraform variable sets</a> to have this ready to associate with the new workspace. The variable page should have the following:</p>\n<img src=\"https://www.datocms-assets.com/2885/1684424814-azur-provider-variable-sets.png\" alt=\"Variable\" /><p>With these variables set, you can then go into Terraform Cloud and associate a code repository to deploy at:</p>\n\n<p><code>organization/workspaces/dr-azure-workspace/settings/version-control</code></p>\n\n<p>Once complete, you should see something similar to the image below:</p>\n<img src=\"https://www.datocms-assets.com/2885/1684424885-workspace-confirm-changes.png\" alt=\"Confirming\" /><p>When your version control system (VCS) is associated with the workspace it will automatically start a run to deploy the code within the VCS.</p>\n\n<h3>Adding HCP Vault on Azure</h3>\n\n<p>HCP allows users to deploy a fully managed version of <a href=\"https://www.hashicorp.com/blog/hcp-vault-on-microsoft-azure-is-now-generally-available\">Vault on Azure</a>, connecting workloads that are running on Azure virtual machines (VMs) or Azure Kubernetes Service (AKS) and, in this case, allowing dynamic secrets to be used in the environment.</p>\n\n<p>HCP is a fully managed cloud platform and HCP Vault is the easiest way to secure, store, and tightly control access to tokens, passwords, certificates, encryption keys, and other sensitive data in a hybrid or multi-cloud environment. HCP Vault is designed to minimize the steps necessary to use Vault within your Azure environments. At a high level, operators need to take three steps to start using HCP Vault:</p>\n\n<ol>\n<li>Create a <a href=\"https://portal.cloud.hashicorp.com/sign-up\">HashiCorp Cloud Platform</a> account.</li>\n<li>Deploy a cluster: Select HCP Vault from the HCP dashboard and follow the <a href=\"https://developer.hashicorp.com/vault/tutorials/cloud/get-started-vault?in=vault%2Fcloud\">quickstart deployment guide</a> that will walk you through the process of creating your HashiCorp Virtual Network (HVN) and a Vault cluster.</li>\n<li>Peer with Azure: Once you have deployed the HVN and cluster, <a href=\"https://developer.hashicorp.com/hcp/tutorials/networking/azure-peering-hcp\">peer that network with your existing Azure environments</a>.</li>\n</ol>\n\n<p>In this example, we use the <a href=\"https://registry.terraform.io/providers/hashicorp/hcp/latest/docs\">HCP provider</a> to build a cluster and connect it to your Azure environment. To do this we have added the hcp_vault module:</p>\n<img src=\"https://www.datocms-assets.com/2885/1684424857-hcpvmodule.png\" alt=\"HCP\" /><p>The HCP provider also requires authentication — this can be client credentials, obtained on the creation of a service principal key or a user session, obtained via browser login (as of version 0.45). Client credentials are recommended for CI and local development and they require the addition of values for <code>client_id</code> and <code>client_secret</code> in your variable file.</p>\n\n<p>To add HCP to the overall environment, use the code below within the main.tf. This injects the name, resource group, and location of the overall deployment plus the peer information.</p>\n<pre><code>######################################\n# Deploy HCP Vault.\n######################################\nmodule \"hcp_vault_cluster\" {\n source                  = \"./modules/hcp_vault\"\n name                    = random_pet.name.id\n resource_group_location = var.resource_group_location\n resource_group_name     = azurerm_resource_group.rg.name\n VNet                    = module.networks.Net-vm-ref-arch\n hcp_region              = var.hcp_region\n}</code></pre><p>Let's walk through what this code does. First, it references the location of the <code>hcp_vault</code> module. Then it injects the resource group, its location, and its name. It also brings the <a href=\"https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/pet\">pet name</a> into the module to keep all naming references synchronized. The two unique elements are the VNet that we want to attach the HVN to, and the region it's in.</p>\n\n<p>An HVN is used to establish a peering connection between Vault and the cloud provider. This ensures that only trusted clients (users, applications, containers, etc.) running in the peered public cloud provider can connect to Vault.</p>\n\n<p>Here's a diagram of how HVN connects to the environment:</p>\n<img src=\"https://www.datocms-assets.com/2885/1684424865-hvn-azure-arch.png\" alt=\"HVN\" /><p>The <code>hcp_region</code> is the location of the primary cluster, which acts as the system of record for Vault data. If you require more redundancy and scale, then you can use <a href=\"https://developer.hashicorp.com/vault/tutorials/cloud-ops/vault-replication\">replication</a>.</p>\n<img src=\"https://www.datocms-assets.com/2885/1684424879-maintf-hcpv.png\" alt=\"main.tf\" /><p>The hcp_vault module is divided into two major elements: the role assignments and permissions to establish a peer, and the creation of the peer and the HCP cluster.</p>\n\n<p>Permissions are important to allow the establishment of the peer network with the HCP cluster. In this code snippet, you can see a permissions list giving the cluster only the privileges needed to complete the deployment.</p>\n<pre><code>permissions {\n   actions = [\n         \"Microsoft.Network/virtualNetworks/read\",\n         \"Microsoft.Network/virtualNetworks/virtualNetworkPeerings/read\",\n         \"Microsoft.Network/virtualNetworks/virtualNetworkPeerings/write\",\n         \"Microsoft.Network/virtualNetworks/peer/action\"\n   ]\n }\n}</code></pre><p>The comments below highlight the individual resource functions:</p>\n<pre><code>// This is the the resource used to create the HVN for the HCP cluster network.\nresource \"hcp_hvn\" \"hvn\" {\n#redacted\n}\n\n\n// This resource creates the HCP vault cluster.\nresource \"hcp_vault_cluster\" \"azure_hcp_vault\" {\n#redacted\n}\n\n// This resource initially returns in a Pending state, because its application_id\n// is required to complete acceptance of the connection.\nresource \"hcp_azure_peering_connection\" \"peer\" {\n#redacted\n}\n\n\n// This is a data source that reads the peering information but waits for the connection \n// to be Active before returning any information thus making sure the correct order is maintained.\n\ndata \"hcp_azure_peering_connection\" \"peer\" {\n#redacted\n}\n// This route depends on the completion of the above data source to ensure the\n//connection has peered and is Active before creating the routes.\nresource \"hcp_hvn_route\" \"route\" {\n#redacted\n}</code></pre><h2>Next steps</h2>\n\n<p>Incorporating security tools along with best practices into your infrastructure as code is essential for maintaining secure and reliable infrastructure. By doing so, organizations help ensure that their cloud deployments are secure, compliant, and easily maintainable. </p>\n\n<p>To learn more, watch the HCP on Azure launch video.</p>\n<p>Be sure to also check out our video on <a href=\"https://www.youtube.com/watch?v=PMH516I8Pdk\">Securing Your Cloud with Terraform Foundational Policy Library</a> and join Microsoft and HashiCorp for our ongoing webinar series: <a href=\"https://www.hashicorp.com/events/webinars/azure-webinar-series-2-enforce-compliance-with-azure-identity-and-hashicorp-vault\">Enforce Compliance with Azure Identity and HashiCorp Vault</a>.</p>\n","author":"David Wright","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"45c73c71295ea3eef8223a8e6b417b5255f7df9b435f6cf6d24b4c8473ef4472","category":"Tech"}