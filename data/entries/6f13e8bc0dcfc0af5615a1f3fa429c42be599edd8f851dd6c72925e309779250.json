{"title":"Go :: มาทำการทดสอบระบบงานกับ Database ด้วย TestContainer กัน","link":"https://www.somkiat.cc/go-testing-with-database-using-testcontainer/","date":1738164991000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2025/01/Screenshot-2568-01-29-at-21.16.26-150x150.png\" alt=\"\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2025/01/Screenshot-2568-01-29-at-21.16.26-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2025/01/Screenshot-2568-01-29-at-21.16.26-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/01/Screenshot-2568-01-29-at-21.16.26.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/01/Screenshot-2568-01-29-at-21.16.26.png\" alt=\"\" width=\"608\" height=\"338\" /></a></figure>\n\n\n\n<p>จากที่แบ่งปันเรื่อง <a href=\"https://www.skooldio.com/workshops/fullstack-automation-software-testing\" target=\"_blank\">Full Stack Testing ที่ Skooldio</a> ไปนั้น<br />ได้อธิบายถึงการสร้างหรือจำลอง dependencies ต่าง ๆ  ที่ระบบงานต้องใช้งาน<br />เพื่อควบคุมผลการทำงานให้เป็นไปตามที่ต้องการ<br />ไม่ว่าจะ success หรือ failure<br />เพื่อช่วยให้เราทดสอบระบบงานของเราได้อย่างมั่นใจ และ ทำซ้ำ ๆ ได้บ่อยเท่าที่ต้องการ<br />หนึ่งในวิธีการที่แนะนำไป แต่ยังไม่ทำการ demo ให้ดู<br />นั่นก็คือ การใช้งาน <strong><a href=\"https://testcontainers.com/\" target=\"_blank\">TestContainer</a></strong><br />จึงมาเขียนอธิบายให้เพิ่มเติมดังนี้</p>\n\n\n\n<span></span>\n\n\n\n<p><strong><em>ต้องติดตั้ง Docker ลงเครื่องก่อนนะครับ</em></strong></p>\n\n\n\n<p><strong>ความต้องการของระบบประกอบไปด้วย</strong></p>\n\n\n\n<ul>\n<li>ทำการดึงข้อมูลจาก MySQL database</li>\n\n\n\n<li>ทำการดึงข้อมูลด้วย id จะมีทั้ง success และ failure case </li>\n\n\n\n<li>ใน failure case จะมี 2 cases คือ ไม่พบข้อมูล และ database error</li>\n</ul>\n\n\n\n<p><strong>สามารถเขียน code การเชื่อมต่อและดึงข้อมูลจาก database แบบง่าย ๆ  ได้ดังนี้</strong></p>\n\n\n\n[gist id=\"ceaff31729dacf305bd75d78b4916c36\" file=\"db.go\"]\n\n\n\n<p><strong>คำถามต่อมาคือ จะทำการทดสอบอย่างไรดี ?</strong></p>\n\n\n\n<p>ซึ่งมีทั้ง unit test และ integration test <br />สามารถทดสอบได้ตามที่ต้องการ หรือ ตามความสามารถ<br />แต่หัวใจของการทดสอบต้อง</p>\n\n\n\n<ul>\n<li>สร้างความเชื่อมั่นให้เรา ทีม และ  product</li>\n\n\n\n<li>สามารถทดสอบซ้ำได้ ทั้งบนเครื่อง และ CI/CD server</li>\n</ul>\n\n\n\n<p>ดังนั้นจึงเลือกวิธีการสร้าง database server ขึ้นมาด้วย container (Docker)<br />แต่ให้ทำการสร้าง container ในการ test ด้วย <a href=\"https://golang.testcontainers.org/\" target=\"_blank\">TestContainer for Go</a> ไปเลย<br />ยังไม่พอ ให้ทำการสร้าง table และ data for test ตาม test case ที่กำหนดไว้</p>\n\n\n\n<p><strong>ยกตัวอย่างเช่นการทดสอบ Success case</strong></p>\n\n\n\n[gist id=\"ceaff31729dacf305bd75d78b4916c36\" file=\"db_test.go\"]\n\n\n\n<p>ตัวอย่าง data for test ใน success case</p>\n\n\n\n[gist id=\"ceaff31729dacf305bd75d78b4916c36\" file=\"schema.sql\"]\n\n\n\n<p>ทำการ run test กันหน่อย</p>\n\n\n\n[gist id=\"ceaff31729dacf305bd75d78b4916c36\" file=\"1.txt\"]\n\n\n\n<p>ลองเพิ่มอีกสัก case เช่น หาข้อมูลที่ต้องการไม่เจอใน database</p>\n\n\n\n[gist id=\"ceaff31729dacf305bd75d78b4916c36\" file=\"db_2_test.go\"]\n\n\n\n<p>เพียงเท่านี้ก็สามารถทดสอบระบบงาน กับ database ได้แบบง่าย ๆ<br />น่าจะเป็นอีกหนึ่งวิธีการในการทดสอบระบบงาน<br />ลองศึกษาและนำไปใช้งานกันดูครับ<br />ขอให้สนุกกับการ coding และ testing ...</p>\n\n\n\n<p>ตัวอย่างของ source code ที่ <a href=\"https://github.com/up1/demo-testcontainer-go-mysql\" target=\"_blank\">GitHub:Up1</a></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"6f13e8bc0dcfc0af5615a1f3fa429c42be599edd8f851dd6c72925e309779250","category":"Thai"}