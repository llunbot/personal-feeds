{"title":"CSS Nesting and the Cascade","link":"https://webkit.org/blog/14571/css-nesting-and-the-cascade/","date":1695920446000,"content":"<p>You might have noticed that <a href=\"https://webkit.org/blog/14532/release-notes-for-safari-technology-preview-179/\">Safari Technology Preview 179</a> includes an update to CSS Nesting that adds support for the new “relaxed parsing behavior”.</p>\n<p>What does this mean? It means you no longer have to worry about whether or not each nested selector starts with a symbol. It means that now nested CSS like this will work just fine:</p>\n<pre><code><span>article</span> {\n  <span>h1</span> { \n    <span>font-size</span>: <span>1.8</span><span>rem</span>;\n  }\n  <span>p</span> {\n    <span>font-size</span>: <span>1.2</span><span>rem</span>;  \n  }\n}\n</code></pre>\n<p>(If you didn’t realize there was a previous limitation and are curious about what it was, you can read about it in <a href=\"https://webkit.org/blog/13813/try-css-nesting-today-in-safari-technology-preview/\">Try out CSS Nesting today</a>, from Feb 2023. But also, you can ignore this limitation since it’s going away soon.)</p>\n<p>This is fantastic news. After many months of debates over how CSS Nesting could work, we ended up with the best possible solution. In the end, browser engineers figured out how to make the parsing engine handle nested <a href=\"https://developer.mozilla.org/docs/Web/CSS/Type_selectors\">type selectors</a> (element selectors).</p>\n<p>How is <a href=\"https://caniuse.com/css-nesting\">browser support</a>? In late August 2023, Firefox 117 shipped support for Nesting using the relaxed parsing behavior from the beginning. Safari 16.5 shipped the original version of Nesting in May 2023, and Safari Technology Preview 179 brought the update to the relaxed parsing behavior in September 2023. Chrome is tracking their coming update in <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1427259\">this issue</a>.</p>\n<h2>Another question</h2>\n<p>There is one more thing about CSS Nesting that’s still up for debate. We still have time to make the change if we do so <em>very</em> soon.</p>\n<p>Let us ask you a question. If you wrote this nested CSS, which color would you want the article text to be?</p>\n<pre><code><span>article</span> {\n  <span>color</span>: <span>blue</span>;\n  @<span>supports</span> (<span>text-shadow</span>: <span>0</span> <span>0</span>) {\n    <span>color</span>: <span>red</span>;\n  }\n  <span>color</span>: <span>yellow</span>;\n}\n</code></pre>\n<p>Do you want it to result in this unnested equivalent, Option 1, where <code>color: red</code> wins?</p>\n<pre><code><span>article</span> {\n  <span>color</span>: <span>blue</span>;\n  <span>color</span>: <span>yellow</span>; \n}\n<span>@supports</span> (<span>text-shadow</span>: 0 0) {\n  <span>article</span> {\n      <span>color</span>: <span>red</span>;\n  }\n}\n</code></pre>\n<p>Or do you want it be computed to be this equivalent, Option 2, where <code>color: yellow</code> wins?</p>\n<pre><code><span>article</span> {\n  <span>color</span>: <span>blue</span>;\n}\n<span>@supports</span> (<span>text-shadow</span>: 0 0) {\n  <span>article</span> {\n      <span>color</span>: <span>red</span>;\n  }\n}\n<span>article</span> {\n  <span>color</span>: <span>yellow</span>; \n}\n</code></pre>\n<p>Currently, the <a href=\"https://drafts.csswg.org/css-nesting/\">Nesting specification</a> says Option 1 is correct, and so that’s how it’s implemented in browsers. This is how all of the preprocessors work: Less (<a href=\"https://lesscss.org/less-preview/#eyJjb2RlIjoiI2xpYigpIHtcbiAgICAuY29sb3JzKCkge1xuICAgICAgQHByaW1hcnk6IGJsdWU7XG4gICAgICBAc2Vjb25kYXJ5OiBncmVlbjtcbiAgICB9XG4gICAgLnJ1bGVzKEBzaXplKSB7XG4gICAgICBib3JkZXI6IEBzaXplIHNvbGlkIHdoaXRlO1xuICAgIH1cbiAgfVxuICBcbiAgLmJveCB3aGVuICgjbGliLmNvbG9yc1tAcHJpbWFyeV0gPSBibHVlKSB7XG4gICAgd2lkdGg6IDEwMHB4O1xuICAgIGhlaWdodDogKCR3aWR0aCAvIDIpO1xuICB9XG4gIFxuICAuYmFyOmV4dGVuZCguYm94KSB7XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDYwMHB4KSB7XG4gICAgICB3aWR0aDogMjAwcHg7XG4gICAgICAjbGliLnJ1bGVzKDFweCk7XG4gICAgfVxuICB9IiwiYWN0aXZlVmVyc2lvbiI6IjQueCJ9\">demo</a>), Sass (<a href=\"https://www.sassmeister.com/\">demo</a>), Stylus (<a href=\"https://runkit.com/kizu/648cbbea05e821000873adde\">demo</a>), PostCSS (<a href=\"https://sneakertack.github.io/postcss-playground/\">demo</a>), and more. Perhaps matching over fifteen years of third-party tooling is the best way to go.</p>\n<p>But many people find this to be an <a href=\"https://kilianvalkhof.com/2023/css-html/the-gotchas-of-css-nesting/\">unexpected gotcha</a>, since it seemingly reorders styles. It makes something that’s earlier in the cascade override something that’s later in the cascade. These folks expect Option 2 to be how it works, where the fundamentals of the cascade stay fully intact — when two declarations have the same specificity, the later one always wins.</p>\n<p>What do you think? How do you want it to work?</p>\n<p></p><div>\n<div>\n    <h3>Which option is best for the future of CSS Nesting?</h3>\n    <ul>\n                <li>\n            <div>\n                <div>Option 1</div>\n                <div>40%</div>\n            </div>\n            <div> </div>\n        </li>\n            <li>\n            <div>\n                <div>Option 2</div>\n                <div>60%</div>\n            </div>\n            <div> </div>\n        </li>\n        </ul>\n</div>\n\n\n\n    <h3>Which option is best for the future of CSS Nesting?</h3>\n    \n    <ul>\n            <li> <span>Option 1</span>\n                </li>\n            <li> <span>Option 2</span>\n                </li>\n        </ul>\n<p>\n        \n        \n</p>\n\n\n</div>\n<p>Your input will help the CSS Working Group <a href=\"https://github.com/w3c/csswg-drafts/issues/8738\">make a final decision</a> on how code like this should work. It’s still not fully clear if Option 2 is possible, but before embarking on a deeper effort to find out, it helps to know what web developers want.</p>\n<p>Thanks for participating!</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"57a5559b3be2bf4e29dc995da0c16a76aab415c0fa01f616e3f02d5de93347cb","category":"Tech"}