{"title":"Terraform provider code generation now in tech preview","link":"https://www.hashicorp.com/blog/terraform-provider-code-generation-now-in-tech-preview","date":1697612940000,"content":"<p>Today, we are excited to announce a tech preview of HashiCorp Terraform provider code generation, consisting of a suite of tools that generate <a href=\"https://developer.hashicorp.com/terraform/plugin\">Terraform provider</a> code from an <a href=\"https://www.openapis.org/\">OpenAPI specification</a>. Included in this preview is a provider code specification that lets developers extend code generation to work with their own tooling and development practices.</p>\n\n<h2>A new ecosystem for Terraform provider code generation</h2>\n\n<p>Providers are executable binaries written in the Go language that act as a bridge between Terraform and an API service. Terraformâ€™s ecosystem currently has more than 3,600 providers in the <a href=\"https://registry.terraform.io/browse/providers\">public registry</a>, of which a majority of the code has been manually developed. </p>\n\n<p>Bridging between API services and Terraform provider code is often repetitive across resources and operations. This repetitive maintenance can result in code consistency issues such as schema definitions missing attributes and validation, or data mapping that has invalid conversions between types.</p>\n\n<p>Provider maintainers have managed these issues with shared code, linting tools, and in some cases, specialized code generation. Code generation can reduce maintenance burden, as well as create more consistency in the codebase. However, existing provider code generation tooling tends to be very specialized to individual providers. </p>\n\n<p>The HashiCorp Terraform provider code generation tech preview introduces a scalable code generation ecosystem based on a shared specification that can be extended by the existing provider developer community. HashiCorp is offering three general-purpose solutions to bootstrap the ecosystem that can be used together or independently.</p>\n\n<ol>\n<li>The <a href=\"https://developer.hashicorp.com/terraform/plugin/code-generation/specification\">provider code specification</a> is a versioned interface, implemented with a JSON schema, upon which specialized provider code generation tools can be based.</li>\n<li>The <a href=\"https://developer.hashicorp.com/terraform/plugin/code-generation/openapi-generator\">OpenAPI provider spec generator</a> is a CLI tool that transforms an OpenAPI 3.x specification into a provider code specification.</li>\n<li>The <a href=\"https://developer.hashicorp.com/terraform/plugin/code-generation/framework-generator\">framework code generator</a> is a CLI tool that generates <a href=\"https://developer.hashicorp.com/terraform/plugin/framework\">Terraform plugin framework</a> code from a provider code specification. This tool currently generates schema and data modeling provider code.</li>\n</ol>\n\n<p>If your Terraform provider interacts with an API service that is documented with an OpenAPI specification, you could use all of the available tools to generate provider code, as shown here:</p>\n<img src=\"https://www.datocms-assets.com/2885/1697571159-openapi-diagram-white.jpg\" alt=\"Generate\" /><p>However, if your API service uses a different interface definition language (IDL), such as Protobuf, you may prefer to build your own provider spec generator specific to your API, then use the available framework code generator, as shown here:</p>\n<img src=\"https://www.datocms-assets.com/2885/1697571255-protobuf-diagram-white.jpg\" alt=\"Generate\" /><h2>Getting started with Terraform provider code generation</h2>\n\n<p>To learn more about the code generation tools and the overall solution design, please refer to the <a href=\"https://developer.hashicorp.com/terraform/plugin/code-generation\">code generation documentation</a>. You can get a hands-on understanding of the new tools in the <a href=\"https://developer.hashicorp.com/terraform/plugin/code-generation/workflow-example\">code generation tools tutorial</a> and workflow example.  </p>\n\n<p>Please share any bugs, enhancement requests, or questions with us via the <a href=\"https://discuss.hashicorp.com/c/terraform-providers/tf-plugin-sdk/43\">Terraform discussion forum</a>. We look forward to your feedback and want to thank you for being such a great community! </p>\n\n<p>If you are completely new to Terraform, <a href=\"http://hashi.co/tf-cloud-bc\">sign up for Terraform Cloud</a> and get started using the Free offering today.</p>\n","author":"Austin Valle","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"21de26702c53ea26bff8e9e9e466c60fd76f5aec3ba51bb22c653c956b0ad1c5","category":"Tech"}