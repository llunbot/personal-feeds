{"title":"WordPress Playground: From 5-Minute Install To Instant Spin-Up","link":"https://smashingmagazine.com/2023/11/wordpress-playground-5-minute-install-instant-spin-up/","date":1699531200000,"content":"<p>Many things have changed in WordPress over the years, but installation has largely remained the same: download WordPress, drop it on a server, create a database, sprinkle in some configuration, and <em>presto</em>, we have a WordPress site. This process was once lovingly referred to as the “famous five-minute install,” although that moniker <a href=\"https://developer.wordpress.org/advanced-administration/before-install/howto-install/#:~:text=less%20than%20five%20minutes\">seems to have faded with time</a>, particularly as many hosting providers offer a more streamlined experience.</p>\n<p>But what if WordPress didn’t require any setup at all? As in, you tap a link, and WordPress spins up a site for you right there, on demand? That’s probably difficult to imagine, considering WordPress runs on top of PHP, MySQL databases, and Apache. It’s not the most portable system.</p>\n<p>That’s the aim of WordPress Playground, which got its first public boost <a href=\"https://wptavern.com/state-of-the-word-2022-matt-mullenweg-highlights-gutenbergs-progress-announces-new-community-tools#:~:text=WordPress%20Playground\">when Matt Mullenweg introduced it during State of Word 2022</a>.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/1-onboarding-experience-tastewp.png\" /></p>\n<p>Notice how the URL is a subdomain of a TasteWP-related top-level domain: <code>hangingpurpose.s1-tastewp.com</code>. It generates an instance on the multi-site network and establishes a URL for it based on a randomized naming system.</p>\n<p>There’s a giant countdown timer on the screen that indicates when the site is scheduled to expire. That makes sense, right? Allowing anyone and everyone to create a site on the spot without so much as a login could become taxing on the server, so allowing sites to self-destruct on a schedule is likely as much to do with self-preservation as it does economics.</p>\n<p>Speaking of economics, the countdown timer is immediately followed by a call to action to upgrade, which buys you <strong>permanence</strong>, <strong>extra server space</strong>, and <strong>customer support</strong>.</p>\n<p>Without upgrading, though, you are only allowed two free instant sites. But if you create an account and log into TasteWP, then you can create up to six test sites on a free pricing tier.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/2-tastewp-error-message.png\" /></p>\n<p>That’s a look at the “quick” onboarding, but TasteWP does indeed have a more robust way to spin up a WordPress testing site with a set of advanced configurations, including which WordPress version to use with which version of PHP, settings you might normally define in <code>wp-config.php</code>, and options for adding specific themes and plugins.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/3-tastewp-advanced-configurations.png\" /></p>\n<p>So, how does that compare to WordPress Playground? Perhaps the greatest difference is that a TasteWP site is connected to the internet. It’s not a WordPress simulation, but an actual instance with a URL you can link up and share with others… as long as the site hasn’t expired. That could very well be enough of a differentiation to warrant more players in this space, even with WordPress Playground hanging around.</p>\n<p>I wanted to give you a sense of what’s already offered before actually unboxing WordPress Playground. Now that we know what else is out there let’s turn our attention back to Playground and explore it.</p>\nStarting Up WordPress Playground\n<p>One of the first interesting things about WordPress Playground is that it is <strong>available in not just one but several places</strong>. I wouldn’t liken it completely to a service like TasteWP, where you create an account to create and manage WordPress instances. It’s more like a developer tool, one that you can reach for when testing your work in a WordPress environment.</p>\n<p>You can simply hit the <code>playground.wordpress.net</code> URL in your browser to launch a new site on the spot. Or, you can launch an instance <a href=\"https://github.com/WordPress/playground-tools/tree/trunk/packages/wp-now/#readme\">from the command line</a>. Perhaps you prefer to <a href=\"https://chrome.google.com/webstore/detail/open-in-wordpress-playgro/khfpfafeepbfdhggfoalfmbhkmjkolmo/\">use the official Chrome extension</a> instead. Whatever the case, let’s look at those options.</p>\n<h3>1. Using The WordPress Playground URL</h3>\n<p>This is the most straightforward way to get a WordPress Playground instance up and running. That’s because all you do is visit the <code>playground.wordpress.net</code> address in the browser, and a WordPress site is created immediately.</p>\n<p>This is exactly how the WordPress Playground demo works, prompting you to click a button to open a new WordPress site. In fact, try clicking the following button to create one now.</p>\n<p><a href=\"https://playground.wordpress.net/\">Create A WordPress Site</a></p>\n<p>If you want to use a specific version of WordPress and PHP in your Playground, all it takes is adding a couple of parameters to the URL. For example, we can instruct Playground to run WordPress 6.2 on PHP 8.2 with the following URL:</p>\n<pre><code>https://playground.wordpress.net/?php=8.2&amp;wp=6.2\n</code></pre>\n\n<p>You can even try out the developmental versions of WordPress using Playground by using the following parameter:</p>\n<pre><code>https://playground.wordpress.net/?wp=beta\n</code></pre>\n\n<h3>2. Using The GitHub Repository</h3>\n<p>True to the WordPress ethos, WordPress Playground is very much an open-source project. <a href=\"https://github.com/WordPress/wordpress-playground\">The repo is available over at GitHub</a>, and we can pull it into a local environment and use WordPress Playground right from a terminal.</p>\n<p>First, let’s clone the repository from the command line:</p>\n<pre><code>git clone https://github.com/WordPress/wordpress-playground.git\n</code></pre>\n\n<p>There is a <a href=\"https://github.com/WordPress/wordpress-playground#cloning-wordpress-playground-repo\">slightly <em>faster</em> alternative</a> that fetches just the latest revision:</p>\n<div>\n<pre><code>git clone -b trunk --single-branch --depth 1 <a href=\"mailto:git@github.com\">git@github.com</a>:WordPress/wordpress-playground.git\n</code></pre>\n</div>\n\n<p>Now that we have the WordPress Playground package in our local environment, we can formally install it:</p>\n<pre><code>cd wordpress-playground\nnpm install\nnpm run dev\n</code></pre>\n\n<p>Once the local server is running, we should get a URL from the terminal that we can use to access the new Playground instance, likely pointed to <code>http://localhost:5400/website-server/</code>.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/4-url-new-playground-instance.png\" /></p>\n<p>We are also able to set which versions of WordPress and PHP to use in the virtual environment by adding a couple of instructions to the command. For example, this command triggers a new WordPress 5.9 instance running on PHP 7.4:</p>\n<pre><code>wp-now start --wp=5.9 --php=7.4\n</code></pre>\n\n<h3>3. Using <code>wp-now</code> In The Command Line</h3>\n<p>An even quicker way to get Playground running from the command line is to globally install <a href=\"https://www.npmjs.com/package/@wp-now/wp-now\">the wp-now CLI tool</a>:</p>\n<pre><code>npm install -g @wp-now/wp-now\n</code></pre>\n\n<p>This way, we can create a new Playground instance anytime you want with a single command:</p>\n<pre><code>wp-now start\n</code></pre>\n\n<p>Be sure that you’re using Node 18 or higher. Otherwise, you’re likely to bump into some errors. Once the command executes, however, the browser will automatically open a new tab pointing to the new instance. You’re already signed into WordPress and everything!</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/5-new-tab-pointing-new-instance.png\" /></p>\n<p>We can configure the environment just as we could with the npm package:</p>\n<pre><code>wp-now start --wp=5.9 --php=7.4\n</code></pre>\n\n<p>A neat thing about this method is that there are several different “modes” you can run this in, and which one you use depends on the directory you’re in when running the command. For example, if you run the command from a directory that already contains WordPress, then Playground will automatically recognize that and run the directory as a full WordPress installation. Or, it’s possible to execute the command from a directory that contains nothing but an <code>index.php</code> file, and Playground will start the server and run requests through that file.</p>\n<p>There are other options, including modes for <code>theme</code>, <code>plugin</code>, <code>wp-content</code>, and <code>wordpress-develop</code>, that are worth <a href=\"https://www.npmjs.com/package/@wp-now/wp-now#automatic-modes\">checking out in the documentation</a>.</p>\n<h3>4. Using The Visual Studio Code Extension</h3>\n<p>WordPress Playground is also available as a <a href=\"https://marketplace.visualstudio.com/items?itemName=WordPressPlayground.wordpress-playground#:~:text=Using%20the%20WordPress%20Playground%20VS,%22Start%20WordPress%20Server%22%20button.\">Visual Studio Code extension</a>. It provides a nice one-click process to launch a local WordPress site. </p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/6-wordpress-playground-visual-studio-code-extension.png\" /></p>\n<p>Installing the extension adds a WordPress icon to the sidebar menu that, when clicked, opens a panel for launching a new WordPress Playground site.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/7-wordpres-icon-sidebar-menu.png\" /></p>\n<p>Open a project folder, click the “Start WordPress Server,” and the Playground extension boots up a new site on the spot. The extension also provides server details, including the local URL, the mode it’s in, and settings to change which versions of WordPress and PHP are in use.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/8-wordpress-extension-server-details.png\" /></p>\n<p>One thing I noticed while poking at the instance is that it automatically installs and activates the \n<a href=\"https://wordpress.org/plugins/sqlite-database-integration/\">SQLite Database Integration</a> plugin. Obviously, that’s a required component for things to work, but I thought it was worth pointing out that the installation does indeed include at least one pre-installed plugin right out of the gate.</p>\n<h3>5. Using A Chrome Extension To Preview Themes &amp; Plugins</h3>\n<p>Have you ever found yourself perusing the WordPress Theme Directory and wanting to take a particular theme out for a test drive? There’s already a “Preview” button baked right into the directory to do exactly that.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/9-wordpress-theme-preview.png\" /></p>\n<p>That’s nice, as it opens up the theme in a frame that looks a lot like the classic WordPress Customizer.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/10-wordpress-theme-preview.png\" /></p>\n<p>But how cool would it be to <em>really</em> open up the theme and see what it is like to do actual tasks with it in the WordPress admin, such as creating a post, editing a page, or exploring its block patterns?</p>\n<p>That is what the <a href=\"https://chrome.google.com/webstore/detail/open-in-wordpress-playgro/khfpfafeepbfdhggfoalfmbhkmjkolmo/related\">“Open in WordPress Playground” extension</a> for Chrome can do. It literally adds a button to “Preview” a theme in a fresh WordPress Playground instance that, when clicked, allows you to interact with the theme in a real WordPress environment.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/11-wordpress-playground-extension-button.png\" /></p>\n<p>I tried out the extension, and it worked as described, and not only that, but it works with the WordPress Plugin Directory as well. In other words, it’s now possible to try a new plugin on the spot without having to install, activate, and test it yourself in some sandbox or, worse, your live or staging WordPress environments.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/12-wp-playground-chrome-plugins.png\" /></p>\n<p>This is a potential game-changer as far as lowering the barrier to entry for using WordPress and for theme and plugin developers offering a convenient way to provide users with a demo experience. I can easily imagine a future where paid commercial plugins adopt a similar user experience to help reduce refunds from customers merely wanting to try a plugin before formally committing to it.</p>\n<p>The extension is available free of charge <a href=\"https://chrome.google.com/webstore/detail/open-in-wordpress-playgro/khfpfafeepbfdhggfoalfmbhkmjkolmo/related\">in the Chrome Web Store</a>, but you can check out the source code <a href=\"https://github.com/lubusIN/wp-playground-browser-extension\">in its GitHub repository</a> as well. While we’re on it, it’s worth noting that this is a third-party extension rather than an official WordPress or Automattic release.</p>\nThe Default Playground Site\n<p>No matter which Playground method you use, the instances that spin up are nearly identical. For example, all of the methods we covered have the WordPress Twenty Twenty-Three theme installed and activated by default. That makes a lot of sense: a standard WordPress installation does the same.</p>\n<p>Similarly, all of the instances we covered make use of the <a href=\"https://wordpress.org/plugins/sqlite-database-integration/\">SQLite Database Integration plugin</a> developed by the WordPress Performance Team. This also makes sense: we need the plugin to establish a database. It also sounds like from the plugin description that the intent is to eventually integrate the plugin into WordPress Core, so perhaps we’ll eventually see <em>zero</em> plugins in a default Playground instance at some point.</p>\n<p>There are a few differences between instances. They’re not massive, but worth calling out so you know what you are activating or have available when using a particular method to create a WordPress instance. The following table breaks down the current components included in each method at the time of this writing:</p>\n<table>\n    <thead>\n        <tr>\n            <th>Method</th>\n            <th>WordPress Version</th>\n      <th>PHP Version</th>\n      <th>Themes</th>\n      <th>Plugins</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>WordPress Playground website</td>\n            <td>6.3.2</td>\n      <td>8.0</td>\n      <td><ul><li>Twenty Twenty-Three (active)</li></ul></td>\n      <td><ul><li>SQLite Database Integration (active)</li></ul></td>\n        </tr>\n        <tr>\n            <td>GitHub repo</td>\n            <td>6.3.2</td>\n      <td>8.0</td>\n      <td><ul><li>Twenty Twenty-Three (active)</li></ul></td>\n      <td><ul><li>SQLite Database Integration (active)</li></ul></td>\n        </tr>\n        <tr>\n            <td>wp-now package</td>\n            <td>6.3.2</td>\n      <td>8.0.10-dev</td>\n      <td><ul><li>Twenty Twenty-Three (active)</li><li>Twenty Twenty-Two</li><li>Twenty Twenty-One</li></ul></td>\n      <td><ul><li>Akismet</li><li>Hello Dolly</li><li>SQLite Database Integration (active)</li></ul></td>\n        </tr>\n    <tr>\n            <td>VS Code extension</td>\n            <td>6.3.2</td>\n      <td>7.4</td>\n      <td><ul><li>Twenty Twenty-Three (active)</li><li>Twenty Twenty-Two</li><li>Twenty Twenty-One</li></ul></td>\n      <td><ul><li>Akismet</li><li>Hello Dolly</li><li>SQLite Database Integration (active)</li></ul></td>\n        </tr>\n    <tr>\n            <td>Chrome extension</td>\n            <td>6.3.2</td>\n      <td>8.0</td>\n      <td><ul><li>Twenty Twenty-Three (active)</li></ul></td>\n      <td><ul><li>SQLite Database Integration (active)</li></ul></td>\n        </tr>\n    </tbody>\n</table>\n\n<p>And, of course, any other differences would come from how you configure an instance. For example, if you run the <code>wp-now</code> package on the command line when you’re in a directory with WordPress and several themes and plugins installed, then those themes and plugins will be available to activate and use. Similarly, using the Chrome Extension on any WordPress Theme Directory page or Plugin Directory page will install that particular theme or plugin.</p>\nInstalling Themes, Plugins, and Block Patterns\n<p>In a standard WordPress installation, you might log into the WordPress admin, navigate to <strong>Appearance</strong> → <strong>Themes</strong>, and install a new theme straight from the WordPress <a href=\"https://wordpress.org/themes/\">Theme Directory</a>. That’s because your site has a web connection and is able to pull things in from <a href=\"https://wordpress.org/\">WordPress.org</a>. Since a WordPress Playground instance from the WordPress Playground website (which is essentially the same as the Chrome extension) is not technically connected to the internet, there is no way to install plugins and themes to it.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/13-wp-playground-themes-none.png\" /></p>\n<p>If you want the same sort of point-and-click experience in your Playground site that you would get in a standard WordPress installation, then go with the GitHub repo, the <code>wp-now</code> package, or the VS Code extension. Each of these is indeed connected to the internet and is able to install themes and plugins directly from the WordPress admin.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/14-wp-playground-themes-vscode.png\" /></p>\n<p>You may notice a note about using the Query API to install a theme or plugin to a WordPress Playground instance that is disconnected from the web:</p>\n<blockquote>“Playground <a href=\"https://github.com/WordPress/wordpress-playground/issues/85\">does not yet support</a> connecting to the themes directory yet. You can still upload a theme or install it using the <a href=\"https://wordpress.github.io/wordpress-playground/query-api\">Query API</a> (e.g. <code>?theme=pendant</code>).”</blockquote>\n\n<p>That’s right! We’re still able to load in whatever theme we want by passing the theme’s slug into the Playground URL used to generate the site. For example,</p>\n<pre><code>https://playground.wordpress.net/?theme=ollie\n</code></pre>\n\n<p>The same goes for plugins:</p>\n<pre><code>https://playground.wordpress.net/?plugin=jetpack\n</code></pre>\n\n<p>And if we want to bundle multiple plugins, we can pass in each plugin as a separate parameter chain with an ampersand (<code>&amp;</code>) in the URL:</p>\n<div>\n<pre><code><a href=\"https://playground.wordpress.net/plugin=jetpack&amp;plugin=woocommerce\">https://playground.wordpress.net/plugin=jetpack&amp;plugin=woocommerce</a>\n</code></pre>\n</div>\n\n<p>It does not appear that we can do the same thing with themes. If you’re testing several themes in a single instance, then it’s probably best to use the <code>wp-now</code> package or the VS Code extension when pointing at a directory that already includes those themes.</p>\n<p>What about block patterns, you ask? We only get two pre-defined patterns in a default WordPress Playground instance created on Playground’s site: <strong>Posts</strong> and <strong>Call to Action</strong>.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/15-wordpress-playground-block-patterns.png\" /></p>\n<p>That’s because block patterns, too, are served to the WordPress admin from an internet connection. We get a much wider selection of options when creating an instance using any of the methods that establish a local host connection.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/16-wp-playground-patterns-localhost-connection.png\" /></p>\n<p>There appears to be no way, unfortunately, to import patterns with the Query API like we can for themes and plugins. The best way to bring in a new pattern, it seems, is to either bundle them in the theme you are using (or pointing to) or manually navigate to the <a href=\"https://wordpress.org/patterns/\">Block Pattern Directory</a> and use the “Copy” option to paste a pattern into the page or post you are testing in Playground.</p>\nImporting &amp; Exporting Playgrounds\n<p>The transience of a WordPress Playground instance is its appeal. The site practically evaporates into thin air with the trigger of a page refresh. But what if you actually want to preserve an instance? Perhaps you need to come back to your work later. Or maybe you’re working on a visual tweak and want to demo it for your team. Playground instances can indeed be exported and even imported into other instances.</p>\n<p>Open up a new WordPress site over at the <code>playground.wordpress.net</code> and locate the Upload and Download icons at the top-right corner of the frame.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/17-wordpress-upload-download-icons.png\" /></p>\n<p>No worries, this is not a step-by-step tutorial on how to click buttons. The only thing you really need to know is that these buttons are <em>only</em> available in instances created at the WordPress Playground site or when using the Chrome Extension to preview themes and plugins at <a href=\"https://wordpress.org/\">WordPress.org</a>.</p>\n<p>What’s more interesting is what we get when exporting an instance. We get a ZIP file — <code>wordpress-playground.zip</code> to be exact — as you might expect. Extract that, and what we have is the entire website, including the full WordPress installation. It resembles any other standard WordPress project with a <code>wp-content</code> directory that contains the source files for the installed themes and plugins, as well as media library uploads.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/18-pg-usecase-export.png\" /></p>\n<p>The only difference I could spot between this WordPress Playground package and a standard project is that Playground provides the SQLite database in the export, also conveniently located in the <code>wp-content</code> directory.</p>\n<p>This is a complete WordPress project. Now that we have it and have confirmed it has everything we would expect a WordPress site to have, we can use Playground’s importing feature to replicate the exported site in a brand-new WordPress Playground instance. Click the Upload icon in the frame of the new instance, then follow the prompts to upload the ZIP file we downloaded from the original instance.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/19-import-playground-zip.png\" /></p>\n<p>You can probably guess what comes next. If we can export a complete WordPress site with Playground, we can not only import that site into a new Playground instance but import it to a hosting provider as well.</p>\n<p>In other words, it’s possible to use Playground as a testing ground for development and then ship it to a production or staging environment when ready. Similarly, the exported files can be committed to a GitHub repo where your production files are, and that triggers a fresh build in production. However you choose to roll!</p>\nSharing Playgrounds\n<p>There are clear benefits to being able to import and export Playground sites. WordPress has never been the more portable system. You know that if you’ve migrated WordPress sites and data. But when WordPress is able to move around as freely as it does with Playground, it opens up new possibilities for how we share work.</p>\n<h3>Sharing With The Query API</h3>\n<p>We’ve been using the Query API in many examples. It’s extremely convenient in that you append parameters on the WordPress Playground site, hit the URL, and a site spins up with everything specified.</p>\n<p>The WordPress Playground site is hosted, so sharing a specific configuration of a Playground site only requires you to share a URL with the site’s configurations appended as parameters. For example. this link shares the <a href=\"https://wordpress.org/themes/blue-note/\">Blue Note theme</a> configured with the <a href=\"https://wordpress.org/plugins/gutenberg/\">Gutenberg plugin</a>:</p>\n<div>\n<pre><code><a href=\"https://playground.wordpress.net/?plugin=gutenberg&amp;theme=blue-note\">https://playground.wordpress.net/?plugin=gutenberg&amp;theme=blue-note</a>\n</code></pre>\n</div>\n\n<p>We can do a little more than that, like link directly to the post editor:</p>\n<div>\n<pre><code><a href=\"https://playground.wordpress.net/?plugin=gutenberg&amp;theme=blue-note&amp;url=/wp-admin/post-new.php\">https://playground.wordpress.net/?plugin=gutenberg&amp;theme=blue-note&amp;url=/wp-admin/post-new.php</a>\n</code></pre>\n</div>\n\n<p>Even better, let’s <a href=\"https://github.com/WordPress/wordpress-playground/discussions/606#discussioncomment-6505970\">link someone to the theme’s templates</a> in the Site Editor:</p>\n<div>\n<pre><code><a href=\"https://playground.wordpress.net/?plugin=gutenberg&amp;theme=blue-note&amp;url=/wp-admin/site-editor.php?path=%2Fwp_template\">https://playground.wordpress.net/?plugin=gutenberg&amp;theme=blue-note&amp;url=/wp-admin/site-editor.php?path=%2Fwp_template</a>\n</code></pre>\n</div>\n\n<p>Again, there are plenty more parameters than what we have explored in this article <a href=\"https://wordpress.github.io/wordpress-playground/query-api\">that are worth checking out</a> in the WordPress Playground documentation.</p>\n<h3>Sharing With An Embedded iFrame</h3>\n<p>We already know this is possible because the best example of it is the <a href=\"https://developer.wordpress.org/playground\">WordPress Playground developer page</a>. There’s a Playground instance running and embedded directly on the page. Even when you spin up a new Playground instance, you’re effectively running an <code>iframe</code> within an <code>iframe</code>.</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/20-wp-playground-iframe.png\" /></p>\n<p>Let’s say we want to embed a WordPress site configured with the <a href=\"https://wordpress.org/themes/pendant/\">Pendant theme</a> and the Gutenberg plugin:</p>\n<div>\n<pre><code>&lt;iframe width=\"800\" height=\"650\" src=\"<a href=\"https://playground.wordpress.net/?plugin=gutenberg&amp;theme=pendant&amp;mode=seamless&quot;\">https://playground.wordpress.net/?plugin=gutenberg&amp;theme=pendant&amp;mode=seamless\"</a> allowfullscreen&gt;&lt;/iframe&gt;\n</code></pre>\n</div>\n\n<p>So, really, what we’re doing is using the source URL in a different context. We can share the URL with someone, and they get to access the configured site in a browser. In this case, however, we are dropping the URL into an <code>iframe</code> element in HTML, and the Playground instance renders on the page.</p>\n<p>Not to get too meta, but it’s pretty neat that we can log into a WordPress production site, create a new page, and embed a Playground instance on the page with the <a href=\"https://wordpress.org/documentation/article/custom-html/\">Custom HTML Block</a>:</p>\n<p><img src=\"https://files.smashing.media/articles/wordpress-playground-5-minute-install-instant-spin-up/21-playground-custom-html-block-iframe.png\" /></p>\n<p>What I like about sharing Playground sites this way is that the instance is effectively preserved and always accessible. Sure, the data will not persist on a page refresh, but create the URL once, and you always have a copy of it previewed on another page that you host.</p>\n<p>Speaking of which, <a href=\"https://wordpress.github.io/wordpress-playground/architecture/host-your-own-playground\">WordPress Playground can be self-hosted</a>. You have to imagine that the current Playground API hosted at <code>playground.wordpress.net</code> will get overburdened with time, assuming that Playground catches on with the community. If their server is overworked, I expect that the hosted API will either go away (breaking existing instances) or at least be locked for creating new instances.</p>\n<p>That’s why <strong>self-hosting WordPress Playground might be a good idea in the long run</strong>. I can see WordPress developers and agencies reaching for this to provide customers and clients with demo work. There’s so much potential and nuance to self-hosting Playground that it might even be worth its own article.</p>\n<p>The <a href=\"https://wordpress.github.io/wordpress-playground/query-api\">documentation</a> provides a list of parameters that can used in the Playground URL.</p>\n<h3>Sharing With JSON Blueprints</h3>\n<p>This “modern” era of WordPress is all about block-based layouts that lean more heavily into JaveScript, where PHP has typically been the top boss. And with this transition, we gained the ability to create entire WordPress themes without ever opening a template file, <a href=\"https://css-tricks.com/wordpress-block-theme-guide/\">thanks to the introduction of <code>theme.json</code></a>.</p>\n<p>Playground can also be configured with structured data. In fact, you can <a href=\"https://playground.wordpress.net/blueprint-schema.json\">see the Playground website’s JSON configurations via this link</a>. It’s pretty incredible that we can both configure a Playground site without writing code and share the file with others to sync environments.</p>\n<p>Here is an example pulled directly <a href=\"https://wordpress.github.io/wordpress-playground/blueprints-api/index\">from the Playground docs</a>:</p>\n<div>\n<pre><code>{\n  \"$schema\": \"<a href=\"https://playground.wordpress.net/blueprint-schema.json&quot;\">https://playground.wordpress.net/blueprint-schema.json\"</a>,\n  \"landingPage\": \"/wp-admin/\",\n  \"preferredVersions\": {<br />    \"php\": \"8.0\",<br />    \"wp\": \"latest\"<br />   },<br />  \"steps\": [{<br />    \"step\": \"login\",<br />    \"username\": \"admin\",<br />    \"password\": \"password\"<br />  }]\n}\n</code></pre>\n</div>\n\n<p>We totally can send this file to someone to clone a site we’re working on. Or, we can use the file in a self-hosted context, and others can pull it into their own blueprint.</p>\n<p>Interestingly, we can even ditch the blueprint file altogether and write the structured data as URL fragments instead:</p>\n<div>\n<pre><code><a href=\"https://playground.wordpress.net/#{&quot;preferredVersions&quot;\">https://playground.wordpress.net/#{\"preferredVersions\"</a>: {\"php\":\"7.4\", \"wp\":\"5.9\"}}\n</code></pre>\n</div>\n\n<p>That might get untenable really fast, but it is nice that the WordPress Playground team is thinking about all of the possible ways we might want to port WordPress.</p>\nAdvanced Playground Configurations\n<p>Up to now, we’ve looked at a variety of ways to configure WordPress Playground using APIs that are provided by or based on <code>playground.wordpress.net</code>. It’s fast, convenient, and pretty darn flexible for something so new and experimental.</p>\n<p>But let’s say you need <strong>full control</strong> to configure a Playground instance. I mean everything, from which themes and plugins are preinstalled to prepublished pages and posts, defining <code>php.ini</code> memory limits, you name it. The <a href=\"https://wordpress.github.io/wordpress-playground/javascript-api/index\">JavaScript API</a> is what you’ll need because it is capable of executing PHP code, make requests, manage files and directories, and configuring parts of WordPress that none of the other approaches offer.</p>\n<p>The JavaScript API is integrated into an <code>iframe</code> and uses the <a href=\"https://www.npmjs.com/package/@wp-playground/client\"><code>@wp-playground/client</code> npm package</a>. The Playground docs provide the following example <a href=\"https://wordpress.github.io/wordpress-playground/javascript-api/index\">in its “Quick Start” guide</a>.</p>\n<div>\n<pre><code>&lt;iframe id=\"wp\" style=\"width: 100%; height: 300px; border: 1px solid #000;\"&gt;&lt;/iframe&gt;\n\n&lt;script type=\"module\"&gt;\n  // Use unpkg for convenience\n  import { startPlaygroundWeb } from '<a href=\"https://unpkg.com/@wp-playground/client/index.js'\">https://unpkg.com/@wp-playground/client/index.js'</a>;\n\n  const client = await startPlaygroundWeb({\n    iframe: document.getElementById('wp'),\n    remoteUrl: <code>https://playground.wordpress.net/remote.html</code>,\n  });\n  // Let's wait until Playground is fully loaded\n  await client.isReady();\n&lt;/script&gt;\n</code></pre>\n</div>\n\n<p>This is an overly simplistic example that demonstrates how the JavaScript API is embedded in a page in an <code>iframe</code>. The Playground docs provide a better example of how PHP is used within JavaScript to do things, like execute a file pointed at a specific path:</p>\n<pre><code>php.writeFile(\n  \"/www/index.php\",\n  `&lt;?php echo \"Hello world!\";\"`\n);\nconst result = await php.run({\n  scriptPath: \"/www/index.php\"\n});\n// result.text === \"Hello world!\"\n</code></pre>\n\n<p>Adam Zieliński and Thomas Nattestad <a href=\"https://web.dev/articles/wordpress-playground\">offer a nicely commented example</a> with multiple tasks in the article they published over at web.dev:</p>\n<pre><code>import {\n  connectPlayground,\n  login,\n  connectPlayground,\n} from '@wp-playground/client';\n\nconst client = await connectPlayground(\n  document.getElementById('wp'), // An iframe\n  { loadRemote: 'https://playground.wordpress.net/remote.html' },\n);\nawait client.isReady();\n\n// Login the user as admin and go to the post editor:\nawait login(client, 'admin', 'password');\nawait client.goTo('/wp-admin/post-new.php');\n\n// Run arbitrary PHP code:\nawait client.run({ code: '&lt;?php echo \"Hi!\"; ?&gt;' });\n\n// Install a plugin:\nconst plugin = await fetchZipFile();\nawait installPlugin(client, plugin);\n</code></pre>\n\n<p>Once again, the scope and breadth of using the JavaScript API for advanced configurations is yet another topic that might warrant its own article.</p>\nWrapping Up\n<p>WordPress Playground is an excellent new platform that’s an ideal testing environment for WordPress themes, plugins… or even WordPress itself. Despite the fact that it is still in its early days, Playground is already capable of some pretty incredible stuff that makes WordPress more portable than ever.</p>\n<p>We looked at lots of ways that Playground accomplishes this. Just want to check out a new theme? Use the <code>playground.wordpress.net</code> URL configured with parameters supported by the Query API, or grab the Chrome extension. Need to do a quick test of your theme in a different PHP environment? Use the <code>wp-now</code> package to spin up a test site locally. Want to let others demo a plugin you made? Embed Playground in an <code>iframe</code> on your site.</p>\n<p>WordPress Playground is an evolving space, so keep your eye on it. You can participate in the <a href=\"https://github.com/WordPress/wordpress-playground/discussions\">discussion</a> and request a feature through a <a href=\"https://github.com/WordPress/wordpress-playground/pulls\">pull request</a> or report an <a href=\"https://github.com/WordPress/wordpress-playground/issues\">issue</a> that you encounter in your testing. In the meantime, you may want to be aware of what the WordPress Playground team has identified as known limitations of the service:</p>\n<ul>\n<li><strong>No access to plugins and theme directories in the browser.</strong><br /><a href=\"https://wordpress.github.io/wordpress-playground/limitations/#you-cant-access-the-plugins-or-themes-directory-in-the-browser\">The theme and plugin directories are not accessible</a> due to the fact that Playgrounds are not connected to the internet, but are virtual environments.</li>\n<li><strong>Instances are destroyed on a browser refresh.</strong><br />Because WordPress Playground uses a browser-based temporary database, all changes and uploads are lost after a browser refresh. If you want to preserve your changes, though, use the export feature to download a zipped archive of the instance. Meanwhile, this is something <a href=\"https://github.com/WordPress/wordpress-playground/issues/19\">the team is working on</a>.</li>\n<li><strong>iFrame issues with anchor links.</strong><br />Clicking a link in a Playground instance that is embedded on a page in an <code>iframe</code> <a href=\"https://wordpress.github.io/wordpress-playground/limitations/#iframe-quirks\">may trigger the main page to refresh</a>, causing the instance to reset.</li>\n<li><strong>iFrame</strong> <strong>rendering issues.</strong><br />There are reports where setting the <code>iframe</code>’s <code>src</code> attribute to a blobbed URL instead of an HTTP URL <a href=\"https://github.com/WordPress/wordpress-playground/issues/646\">breaks links to assets, including CSS and images</a>.</li>\n</ul>\n<p>How will you use WordPress Playground? WordPress Playground creator Adam Zieliński recently shipped a <a href=\"https://playground.wordpress.net/wordpress.html\">service that uses Playground to preview pull requests in GitHub</a>. We all know that WordPress has never put a strong emphasis on developer experience (DX) the same way other technical stacks do, like static site generators and headless configurations. But this is exactly the sort of way that I imagine Playground improving DX to make developing for WordPress easier and, yes, fun.</p>\n<h3>References &amp; Resources</h3>\n<ul>\n<li>“<a href=\"https://wpmayor.com/instawp-review/\">InstaWP Review: Create WordPress Sandbox Sites the Easy Way</a>,” Colin Newcomer (WP Mayor)</li>\n<li>“<a href=\"https://blog.webverge.io/tastewp/\">TasteWP Review: Free WordPress Hosting to Test Plugins &amp; Themes</a>,” Xaif (WebVerge)</li>\n<li><a href=\"https://developer.wordpress.org/playground/wordpress-playground-resources/\">WordPress Playground Resources</a> (WordPress Developer Resources)</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=WordPressPlayground.wordpress-playground#:~:text=Using%20the%20WordPress%20Playground%20VS,%22Start%20WordPress%20Server%22%20button.\">WordPress Playground for VS Code</a> (Visual Studio Marketplace)</li>\n<li>“<a href=\"https://developer.wordpress.org/news/2023/08/exploring-the-future-of-web-development-with-webassembly-and-php/\">Exploring the Future of Web Development with WebAssembly and PHP</a>,” Angel M De Miguel (WordPress Developer Blog)</li>\n<li>“<a href=\"https://web.dev/wordpress-playground/\">Build In-browser WordPress Experiences with WordPress Playground and WebAssembly</a>,” Adam Zieliński and Thomas Nattestad (web.dev)</li>\n<li>“<a href=\"https://techcrunch.com/2023/07/18/wordpress-playground-lets-you-run-wordpress-entirely-in-your-browser/\">WordPress Playground Lets You Run WordPress Entirely in Your Browser</a>,” Romain Dillet (TechCrunch)</li>\n<li>“<a href=\"https://wpshout.com/wordpress-playground/#gref\">An Introduction to WordPress Playground</a>,” Tom Rankin (WPShout)</li>\n<li>“<a href=\"https://wptavern.com/preview-wordpress-core-pull-requests-with-playground\">Preview WordPress Core Pull Requests with Playground</a>,” Sarah Gooding (WP Tavern)</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"8c0d1ffeb9c17f146dc679bd51fbf43404b73d31d19bce6c588f89109cf31a12","category":"Tech"}