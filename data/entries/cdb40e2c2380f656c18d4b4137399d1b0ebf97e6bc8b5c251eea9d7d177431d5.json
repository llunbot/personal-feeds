{"title":"Don’t leave cloud security to chance: 7 mistakes and how to avoid them","link":"https://www.hashicorp.com/blog/dont-leave-cloud-security-to-chance-seven-mistakes","date":1728995400000,"content":"<p>According to Evanta, a Gartner company,<a href=\"https://www.evanta.com/resources/cio/infographic/2024-cio-leadership-perspectives#:%7E:text=For%2520the%2520third%2520year%2520in,five%2520CIO%2520priorities%2520for%25202024.\"> cybersecurity is CIOs’ top priority</a>. Yet the cloud resources that enterprise teams are briskly provisioning to deliver on their CIO’s other immediate priorities — data and analytics, AI/machine learning, digital business priorities and applications — could, in fact, be introducing systemic vulnerabilities that increase cybersecurity risk. Every resource provisioned across public, private, and hybrid cloud networks is a roll of the metaphorical dice, and can leave enterprises susceptible to ransomware and malware, data breaches, insider threats, DDoS attacks, API vulnerabilities, and more. </p>\n\n<p>This blog presents 7 common mistakes development teams make when provisioning and managing cloud resources over time, and how to avoid them through effective Infrastructure Lifecycle Management (ILM). By adopting tools and techniques to standardize the approach to infrastructure enterprise-wide, CIOs and IT organizations can do more than ease current cyber risks; they can move on to <a href=\"https://www.hashicorp.com/lp/cloud-maturity\">higher levels of cloud maturity</a> that focus on proactive cloud data security, faster innovation, and finding more efficiencies, and reducing the often-surprising costs of cloud computing.</p>\n<img src=\"https://www.datocms-assets.com/2885/1728657858-gartner_stats.png\" alt=\"Top\" /><h2>1. Manual processes</h2>\n\n<p><em>**Solution:</em>* Use an infrastructure as code (IaC) solution for infrastructure automation*</p>\n\n<p>Organizations relatively new to the cloud, and/or rapidly provisioning resources across the enterprise, typically use an <em>ad hoc</em> approach. Teams will each pick individual solutions and do what works in the moment. Sometimes that results in teams still using legacy methods of infrastructure management, either manually provisioning infrastructure through vendor consoles (often called “ClickOps”) or writing one-off scripts that have limited reusability and visibility, creating a brittle provisioning process.</p>\n\n<p>Successful cloud provisioning starts with a systematic and repeatable approach that can be used by all teams. Many organizations use<a href=\"https://www.hashicorp.com/resources/what-is-infrastructure-as-code\"> infrastructure as code</a> (IaC) to codify cloud infrastructure and the underlying system images. Once codified, infrastructure can be easily versioned, tracked, reused, and automatically provisioned across multiple cloud environments, eliminating the need for unscalable manual approaches. </p>\n\n<h2>2. Siloed teams</h2>\n\n<p><em>**Solution:</em>* Enable and promote cross-functional collaboration with a platform-oriented approach*</p>\n\n<p>Organizations typically start with a fragmented approach to cloud migration, letting teams build their own unique, non-standard solutions. Teams are reinventing the solutions for the same problems while also failing to share best practices. The adequate security management of so many fragmented solutions is also impossible and cost prohibitive. The resulting costs and cyber risks in this ‘wild west’ scenario quickly spiral out of control. </p>\n\n<p>The first step in implementing provisioning best practices is to break down organizational silos with access to a <a href=\"https://developer.hashicorp.com/terraform/registry/private\">central library</a> of shared infrastructure configurations, composed of proven code written by experts. In doing so, teams can avoid reinventing well-established configurations — and avoid the many risks that inconsistency invites.</p>\n\n<p>IT leaders also need to put into place a common platform to access, review, and version infrastructure. IaC workflows<a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs\"> can be integrated</a> with a version control system (VCS) such as GitHub or GitLab, giving teams a common code base. This promotes the reuse of best practices and patterns, boosts productivity, increases visibility, and sets the foundation for infrastructure as a shared service across the entire organization.</p>\n\n<p>Finally, as teams begin collaborating, role-based access control (RBAC) can help effectively manage team <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/users-teams-organizations/permissions\">permissions</a> and facilitate security best practices including <a href=\"https://www.paloaltonetworks.com/cyberpedia/what-is-the-principle-of-least-privilege\">least-privilege access</a>. </p>\n\n<h2>3. Inconsistent deployments</h2>\n\n<p><em>**Solution:</em>* Standardize cloud provisioning with “golden” best practice templates*</p>\n\n<p>Without any sorts of templates or consistent provisioning and CI/CD pipelines, teams are still doing manual operations and creating too many unique infrastructure setups. Inconsistency is at the root of many security vulnerabilities, and it’s common across large enterprises. </p>\n\n<p>The solution to inconsistent cloud infrastructure provisioning is a “golden path”. In platform engineering, platform teams create golden images, modules, pipelines, orchestration jobs, and any other software delivery component templates that serve as “golden” standards that can be reused by development teams to automatically follow best practices with every deployment. </p>\n\n<p>To build this set of golden templates,  platform teams should create, test, and validate reusable infrastructure modules and images, and then make them easily discoverable throughout the organization. With the proper provisioning platform, platforms should have the ability to:</p>\n\n<ul>\n<li><strong>Create infrastructure templates</strong>: Build infrastructure as code modules and images</li>\n<li><strong>Test and validate the code</strong>: Build tests that can<a href=\"https://developer.hashicorp.com/terraform/tutorials/configuration-language/test\"> validate the functionality</a> of IaC configurations in a safe environment by running tests against specific, short-lived resources.</li>\n<li><strong>Make templates discoverable and manageable</strong>: Once modules are ready for use, they can be published in an<a href=\"https://developer.hashicorp.com/terraform/registry/private\"> internal private registry</a>.<a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/explorer\"> From there, the platform team needs visibility tools</a> and full module lifecycle management capabilities so that they can see template usage patterns, get versioning information, organize and tag templates, and revoke or deprecate templates when a new replacement is created.</li>\n</ul>\n\n<h2>4. No embedded guardrails</h2>\n\n<p><em>**Solution:</em>* Use policy as code to meet risk and cost requirements*</p>\n\n<p>Rapid provisioning opens up tremendous possibilities for innovation, but without effective guardrails in place, it’s a nightmare for security and finance teams. Security, compliance, and cost policies have typically required manual validation and enforcement through a ticket-ops system.  This often meant days or weeks-long bottlenecks as developers and IT waited for their infrastructure changes to be approved.</p>\n\n<p>Like infrastructure as code, <a href=\"https://developer.hashicorp.com/sentinel/docs/concepts/policy-as-code\">policy as code</a> can be used to reduce manual errors, enable greater scale through automation, and accelerate productivity. Cloud provisioning solutions that include policy as code can help users define custom policies that are<a href=\"https://www.terraform.io/use-cases/enforce-policy-as-code\"> automatically enforced</a> in the provisioning workflow. </p>\n\n<p>For example, policies can: </p>\n\n<ul>\n<li>Check if end users are consuming approved modules rather than creating custom code</li>\n<li>Ensure the infrastructure is tagged for visibility</li>\n<li>Confirm that storage buckets are encrypted and not publicly accessible</li>\n<li>And much more — the possibilities are numerous</li>\n</ul>\n\n<p>Platform teams can create and organize policy sets in the same way they would manage infrastructure modules, with a<a href=\"https://registry.terraform.io/browse/policies\"> library</a> of trusted pre-written policy sets that can enforce best practices. The best policy engines can even integrate third-party tools from various vendors to enact additional checks.</p>\n\n<h2>5. Insufficient monitoring capabilities</h2>\n\n<p><em>**Solution:</em>* Monitor infrastructure drift and health over time*</p>\n\n<p>Once cloud resources are up and running, teams need to make sure their infrastructure remains performant and healthy. Failure to do so can result in costly outages or security problems due to misconfigurations. Even with a standardized provisioning process and policy guardrails in place, <a href=\"https://www.hashicorp.com/resources/how-can-i-prevent-configuration-drift\">configuration drift</a> can occur, creating vulnerabilities or bugs. </p>\n\n<p>Effective ILM incorporates a<a href=\"https://www.hashicorp.com/solutions/cloud-system-of-record\"> system of record</a> to provide visibility and monitoring capabilities, and remediate issues as they arise. A cloud infrastructure management solution with<a href=\"https://developer.hashicorp.com/terraform/tutorials/state/resource-drift\"> drift detection</a> capabilities surfaces problems to admins as they develop. In addition, continuous monitoring provides<a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/health\"> health checks</a> to verify that cloud workspaces perform as planned, over time.</p>\n\n<h2>6. No lifecycle management</h2>\n\n<p><em>**Solution:</em>* Automate infrastructure deletion*</p>\n\n<p>Organizations scaling their cloud program often accumulate abandoned cloud instances and unnecessary infrastructure that continues to run, wasting money. These forgotten resources can also open security holes if they haven’t received security updates in a while. </p>\n\n<p>Setting end-of-life dates and<a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings/deletion#automatically-destroy\"> automating infrastructure destruction</a> helps to eliminate unnecessary cloud waste and close security gaps. Ideally, resource deletion can be triggered when a predefined date or inactivity period is reached, with<a href=\"https://developer.hashicorp.com/packer/tutorials/hcp/hcp-schedule-image-iterations-revocation\"> artifact revocation</a> scheduled at the image level. Users should be<a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings/notifications\"> automatically notified</a> of impending deprecation actions and receive follow-up actions to confirm deletion.</p>\n\n<h2>7. Lack of self-service</h2>\n\n<p><em>**Solution:</em>* Scale efficiently by giving developers freedom and autonomy within the golden path*</p>\n\n<p>As organizations ramp up their consumption of cloud resources, an automated self-service provisioning workflow empowers developers to quickly deploy the resources they need without slow, demotivating ticket-based workflows that require many manual approvals.</p>\n\n<p><a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/no-code-provisioning\">No-code provisioning</a> can make self-service even faster while preserving all guardrails, especially when it’s integrated with popular self-service platforms such as<a href=\"https://developer.hashicorp.com/terraform/tutorials/it-saas/servicenow-no-code\"> ServiceNow</a> and AWS Service Catalog, or GitHub Actions. Platform teams can also set up an<a href=\"https://developer.hashicorp.com/waypoint\"> internal development platform</a> (IDP) to expand self-service, further abstracting the application deployment workflow to the point where developers don’t need to manually trigger a ton of tools at runtime. </p>\n\n<p>Ultimately, the goal of self-service is to give developers a set of golden workflows so they can focus on the application lifecycle while platform teams own the underlying infrastructure and security teams have ownership over designing the guardrails. In this way, innovation can occur freely while automatically mitigating cybersecurity risk and keeping costs down. </p>\n\n<h2>Achieving ILM maturity</h2>\n\n<p>Avoiding the most common mistakes in cloud infrastructure management can immediately improve an organization’s cybersecurity posture by preventing vulnerabilities from ever being created. It can also speed up innovation by providing developers with the cloud resources they need faster. By following the 7 solution steps described in this blog, organizations can advance their ILM maturity, setting up a virtuous cycle of continuous improvement by consistently upgrading and sharing new golden templates and workflows.</p>\n<img src=\"https://www.datocms-assets.com/2885/1728658203-infrastructure_stages.png\" alt=\"Stages\" /><p>To learn more about how ILM maturity can help CIOs achieve all of their <em>Top 5 priorities for 2024</em> and beyond, get your copy of the HashiCorp white paper, “<a href=\"https://www.hashicorp.com/on-demand/infrastructure-lifecycle-management-with-the-hashicorp-cloud-platform-email\">ILM with the HashiCorp Platform</a>,” and follow HashiCorp on <a href=\"https://www.linkedin.com/company/hashicorp/posts/?feedView=all\">LinkedIn</a>. </p>\n","author":"Mitchell Ross","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"cdb40e2c2380f656c18d4b4137399d1b0ebf97e6bc8b5c251eea9d7d177431d5","category":"Tech"}