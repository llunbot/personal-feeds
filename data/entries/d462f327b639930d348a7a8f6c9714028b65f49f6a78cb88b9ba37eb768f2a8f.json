{"title":"Introducing Amazon MSK Replicator – Fully Managed Replication across MSK Clusters in Same or Different AWS Regions","link":"https://aws.amazon.com/blogs/aws/introducing-amazon-msk-replicator-fully-managed-replication-across-msk-clusters-in-same-or-different-aws-regions/","date":1697649814000,"content":"<p><a href=\"https://aws.amazon.com/msk/\">Amazon Managed Streaming for Apache Kafka (Amazon MSK)</a> provides a fully managed and highly available <a href=\"https://kafka.apache.org/\">Apache Kafka</a> service simplifying the way you process streaming data. When using Apache Kafka, a common architectural pattern is to replicate data from one cluster to another.</p> \n<p>Cross-cluster replication is often used to implement business continuity and disaster recovery plans and increase application resilience across <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\">AWS Regions</a>. Another use case, when building multi-Region applications, is to have copies of streaming data in multiple geographies stored closer to end consumers for lower latency access. You might also need to aggregate data from multiple clusters into one centralized cluster for analytics.</p> \n<p>To address these needs, you would have to write custom code or <a href=\"https://docs.aws.amazon.com/whitepapers/latest/amazon-msk-migration-guide/mirrormaker-2.0-mm2.html\">install and manage open-source tools like MirrorMaker 2.0</a>, available as part of Apache Kafka starting with version 2.4. However, these tools can be complex and time-consuming to set up for reliable replication, and require continuous monitoring and scaling.</p> \n<p>Today, we’re introducing <a href=\"https://aws.amazon.com/msk/features/msk-replicator/\">MSK Replicator</a>, a new capability of Amazon MSK that makes it easier to reliably set up <strong>cross-Region</strong> and <strong>same-Region</strong> replication between MSK clusters, scaling automatically to handle your workload. You can use MSK Replicator with both provisioned and <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/serverless.html\">serverless</a> MSK cluster types, including those using <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/msk-tiered-storage.html\">tiered storage</a>.</p> \n<p>With MSK Replicator, you can setup both active-passive and active-active cluster topologies to increase the resiliency of your Kafka application across Regions:</p> \n<ul> \n <li>In an <strong>active-active</strong> setup, both MSK clusters are actively serving reads and writes.</li> \n <li>In an <strong>active-passive</strong> setup, only one MSK cluster at a time is actively serving streaming data while the other cluster is on standby.</li> \n</ul> \n<p>Let’s see how that works in practice.</p> \n<p><span><strong>Creating an MSK Replicator across AWS Regions<br /> </strong></span>I have two MSK clusters deployed in different Regions. MSK Replicator requires that the clusters have IAM authentication enabled. I can continue to use other authentication methods such as mTLS or SASL for my other clients. The source cluster also needs to enable multi-VPC private connectivity.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/25/msk-replicator-cross-region-architecture-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/25/msk-replicator-cross-region-architecture-1.png\" alt=\"MSK Replicator cross-Region architecture diagram.\" width=\"1495\" height=\"465\" /></a></p> \n<p>From a network perspective, the security groups of the clusters allow traffic between the cluster and the security group used by the Replicator. For example, I can add self-referencing inbound and outbound rules that allow traffic from and to the same security group. For simplicity, I use the <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html\">default VPC</a> and its <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/default-security-group.html\">default security group</a> for both clusters.</p> \n<p>Before creating a replicator, I update the <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/security_iam_service-with-iam.html#security_iam_service-with-iam-resource-based-policies\">cluster policy</a> of the source cluster to allow the MSK service (including replicators) to find and reach the cluster. In the <a href=\"https://console.aws.amazon.com/msk/home\">Amazon MSK console</a>, I select the source Region. I choose <strong>Clusters</strong> from the navigation pane and then the source cluster. First, I copy the source cluster <strong>ARN</strong> at the top. Then, in the <strong>Properties</strong> tab, I choose <strong>Edit cluster policy</strong> in the <strong>Security settings</strong>. There, I use the following JSON policy (replacing the source cluster ARN) and save the changes:</p> \n<pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"kafka.amazonaws.com\"\n            },\n            \"Action\": [\n                \"kafka:CreateVpcConnection\",\n                \"kafka:GetBootstrapBrokers\",\n                \"kafka:DescribeClusterV2\"\n            ],\n            \"Resource\": \"&lt;SOURCE_CLUSTER_ARN&gt;\"\n        }\n    ]\n}</code></pre> \n<p>I select the target Region in the console. I choose <strong>Replicators</strong> from the navigation pane and then <strong>Create replicator</strong>. Here, I enter a name and a description for the replicator.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create.png\" alt=\"Console screenshot.\" width=\"1676\" height=\"854\" /></a></p> \n<p>In the <strong>Source cluster</strong> section, I select the Region of the source MSK cluster. Then, I choose <strong>Browse</strong> to select the source <strong>MSK cluster</strong> from the list. Note that Replicators can be created only for clusters that have a cluster policy set.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/25/msk-replicator-create-source.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/25/msk-replicator-create-source.png\" alt=\"Console screenshot.\" width=\"1668\" height=\"770\" /></a></p> \n<p>I leave <strong>Subnets</strong> and <strong>Security groups</strong> as their default values to use my default VPC and its default security group. This network configuration may be used to place elastic network interfaces (EINs) to facilitate communication with your cluster.</p> \n<p>The <strong>Access control method</strong> for the source cluster is set to <strong>IAM role-based authentication</strong>. Optionally, I can turn on multiple authentication methods at the same time to continue to use clients that need other authentication methods like mTLS or SASL while the Replicator uses IAM. For cross-Region replication, the source cluster cannot have unauthenticated access enabled, because we use multi-VPC to access their source cluster.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create-source-network.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create-source-network.png\" alt=\"Console screenshot.\" width=\"1666\" height=\"1038\" /></a></p> \n<p>In the <strong>Target cluster</strong> section, the <strong>Cluster region</strong> is set to the Region where I’m using the console. I choose <strong>Browse</strong> to select the target <strong>MSK cluster</strong> from the list.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create-target.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create-target.png\" alt=\"Console screenshot.\" width=\"1672\" height=\"752\" /></a></p> \n<p>Similar to what I did for the source cluster, I leave <strong>Subnets</strong> and <strong>Security</strong> groups as their default values. This network configuration is used to place the ENIs required to communicate with the target cluster. The <strong>Access control method</strong> for the target cluster is also set to <strong>IAM role-based authentication</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create-target-network.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create-target-network.png\" alt=\"Console screenshot.\" width=\"1672\" height=\"1040\" /></a></p> \n<p>In the <strong>Replicator settings</strong> section, I use the default <strong>Topic replication</strong> configuration, so that all topics are replicated. Optionally, I can specify a comma-separated list of regular expressions that indicate the names of the topics to replicate or to exclude from replication. In the <strong>Additional settings</strong>, I can choose to copy topics configurations, <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/msk-acls.html\">access control lists (ACLs)</a>, and to detect and copy new topics.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create-topic.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create-topic.png\" alt=\"Console screenshot.\" width=\"1672\" height=\"1044\" /></a></p> \n<p><strong>Consumer group replication</strong> allows me to specify if consumer group offsets should be replicated so that, after a switchover, consuming applications can resume processing near where they left off in the primary cluster. I can specify a comma-separated list of regular expressions that indicate the names of the consumer groups to replicate or to exclude from replication. I can also choose to detect and copy new consumer groups. I use the default settings that replicate all consumer groups.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create-consumer-group.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create-consumer-group.png\" alt=\"Console screenshot.\" width=\"1668\" height=\"856\" /></a></p> \n<p>In <strong>Compression</strong>, I select <strong>None</strong> from the list of available compression types for the data that is being replicated.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/25/msk-replicator-create-compression.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/25/msk-replicator-create-compression.png\" alt=\"Console screenshot.\" width=\"1666\" height=\"472\" /></a></p> \n<p>The Amazon MSK console can automatically create a service execution role with the necessary permissions required for the Replicator to work. The role is used by the MSK service to connect to the source and target clusters, to read from the source cluster, and to write to the target cluster. However, I can choose to create and provide my own role as well. In <strong>Access permissions</strong>, I choose <strong>Create or update IAM role</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/25/msk-replicator-create-permissions.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/25/msk-replicator-create-permissions.png\" alt=\"Console screenshot.\" width=\"1668\" height=\"568\" /></a></p> \n<p>Finally, I add tags to the replicator. I can use tags to search and filter my resources or to track my costs. In the <strong>Replicator tags</strong> section, I enter <code>Environment</code> as the key and <code>AWS News Blog</code> as the value. Then, I choose <strong>Create</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create-tags.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-create-tags.png\" alt=\"Console screenshot.\" width=\"1668\" height=\"700\" /></a></p> \n<p>After a few minutes, the replicator is running. Let’s put it into use!</p> \n<p><span><strong>Testing an MSK Replicator across AWS Regions</strong></span><br /> To connect to the source and target clusters, I already set up two <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instances in the two Regions. I followed the <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/getting-started.html\">instructions in the MSK documentation</a> to install the Apache Kafka client tools. Because I am using IAM authentication, the two instances have an IAM role attached that allows them to connect, send, and receive data from the clusters. To simplify networking, I used the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/default-custom-security-groups.html#default-security-group\">default security group</a> for the EC2 instances and the MSK clusters.</p> \n<p>First, I create a new topic in the source cluster and send a few messages. I use <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Connect-using-EC2-Instance-Connect.html\">Amazon EC2 Instance Connect</a> to log into the EC2 instance in the source Region. I change the directory to the path where the Kafka client executables have been installed (the path depends on the version you use):</p> \n<div> \n <pre><code>cd /home/ec2-user/kafka_2.12-2.8.1/bin</code></pre> \n</div> \n<p>To connect to the source cluster, I need to know its bootstrap servers. Using the MSK console in the source Region, I choose <strong>Clusters</strong> from the navigation page and then the source cluster from the list. In the <strong>Cluster summary</strong> section, I choose <strong>View client information</strong>. There, I copy the list of <strong>Bootstrap servers</strong>. Because the EC2 instance is in the same VPC as the cluster, I copy the list in the <strong>Private endpoint (single-VPC)</strong> column.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-bootstrap-servers.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-bootstrap-servers.png\" alt=\"Console screenshot.\" width=\"2392\" height=\"586\" /></a></p> \n<p>Back to the EC2 instance, I put the list of bootstrap servers in the <code>SOURCE_BOOTSTRAP_SERVERS</code> environment variable.</p> \n<div> \n <pre><code>export SOURCE_BOOTSTRAP_SERVERS=b-2.uscluster.esijym.c9.kafka.us-east-1.amazonaws.com:9098,b-3.uscluster.esijym.c9.kafka.us-east-1.amazonaws.com:9098,b-1.uscluster.esijym.c9.kafka.us-east-1.amazonaws.com:9098</code></pre> \n</div> \n<p>Now, I create a topic on the source cluster.</p> \n<div> \n <pre><code>./kafka-topics.sh --bootstrap-server $SOURCE_BOOTSTRAP_SERVERS --command-config client.properties --create --topic my-topic --partitions 6</code></pre> \n</div> \n<p>Using the new topic, I send a few messages to the source cluster.</p> \n<div> \n <pre><code>./kafka-console-producer.sh --broker-list $SOURCE_BOOTSTRAP_SERVERS --producer.config client.properties --topic my-topic\n&gt;Hello from the US\n&gt;These are my messages</code></pre> \n</div> \n<p>Let’s see what happens in the target cluster. I connect to the EC2 instance in the target Region. Similar to what I did for the other instance, I get the list of bootstrap servers for the target cluster and put it into the <code>TARGET_BOOTSTRAP_SERVERS</code> environment variable.</p> \n<p>On the target cluster, the source cluster alias is added as a prefix to the replicated topic names. To find the source cluster alias, I choose <strong>Replicators</strong> in the MSK console navigation pane. There, I choose the replicator I just created. In the <strong>Properties</strong> tab, I look up the <strong>Cluster alias</strong> in the <strong>Source cluster</strong> section.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-source-cluster-alias.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/08/01/msk-replicator-source-cluster-alias.png\" alt=\"Console screenshot.\" width=\"1904\" height=\"864\" /></a></p> \n<p>I confirm the name of the replicated topic by looking at the list of topics in the target cluster (it’s the last one in the output list):</p> \n<div> \n <pre><code>./kafka-topics.sh --list --bootstrap-server $TARGET_BOOTSTRAP_SERVERS --command-config client.properties\n. . .\nus-cluster-c78ec6d63588.my-topic</code></pre> \n</div> \n<p>Now that I know the name of the replicated topic on the target cluster, I start a consumer to receive the messages originally sent to the source cluster:</p> \n<div> \n <pre><code>./kafka-console-consumer.sh --bootstrap-server $TARGET_BOOTSTRAP_SERVERS --consumer.config client.properties --topic us-cluster-c78ec6d63588.my-topic --from-beginning\nHello from the US\nThese are my messages</code></pre> \n</div> \n<p>Note that I can use a wildcard in the topic subscription (for example, <code>.*my-topic</code>) to automatically handle the prefix and have the same configuration in the source and target clusters.</p> \n<p>As expected, all the messages I sent to the source cluster have been replicated and received by the consumer connected to the target cluster.</p> \n<p>I can monitor the MSK Replicator latency, throughput, errors, and lag metrics using the <strong>Monitoring</strong> tab. Because this works through <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a>, I can easily create my own <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html\">alarms</a> and include these metrics in my <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Dashboards.html\">dashboards</a>.</p> \n<p>To update the configuration to an active-active setup, I follow similar steps to create a replicator in the other Region and replicate streaming data between the clusters in the other direction. For details on how to manage failover and failback, see the <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/msk-replicator-what-is.html\">MSK Replicator documentation</a>.</p> \n<p><span><strong>Availability and Pricing</strong></span><br /> <a href=\"https://aws.amazon.com/msk/features/msk-replicator/\">MSK Replicator</a> is available today in: US East (Ohio), US East (N. Virginia), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Europe (Frankfurt), and Europe (Ireland).</p> \n<p>With MSK Replicator, you pay per GB of data replicated and an hourly rate for each Replicator. You also pay Amazon MSK’s usual charges for your source and target MSK clusters and standard AWS charges for cross-Region data transfer. For more information, see <a href=\"https://aws.amazon.com/msk/pricing/\">MSK pricing</a>.</p> \n<p>Using MSK replicators, you can quickly implement cross-Region and same-Region replication to improve the resiliency of your architecture and store data close to your partners and end users. You can also use this new capability to get better insights by replicating streaming data to a single, centralized cluster where it is easier to run your analytics.</p> \n<p><strong><a href=\"https://aws.amazon.com/msk/features/msk-replicator/\">Simplify your data streaming architectures using Amazon MSK Replicator.</a></strong></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"d462f327b639930d348a7a8f6c9714028b65f49f6a78cb88b9ba37eb768f2a8f","category":"Tech"}