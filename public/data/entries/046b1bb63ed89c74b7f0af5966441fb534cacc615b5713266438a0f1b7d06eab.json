{"title":"Event-Driven Access Controls with HashiCorp Boundary and Vault","link":"https://www.hashicorp.com/blog/event-driven-access-controls-with-hashicorp-boundary-and-vault","date":1674514800000,"content":"<p>When applying security best practices to our applications and infrastructure, the recommended approach for secure remote access is the <a href=\"https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege\">principle of least privilege</a>. This means that users and applications are granted only the minimum permissions required to perform their function. As a developer advocate, I know that generally speaking, engineers do not need access to production environments for our day-to-day roles. But that’s not always the case.</p>\n<p>This post introduces an event-driven workflow that enables dynamic, on-demand access controls using HashiCorp Boundary and Vault. This workflow has been prototyped into a tool we call <a href=\"https://github.com/hashicorp-dev-advocates/Rift\">Rift</a>. Note that Rift is a proof of concept demonstrating event-driven access control. It is not currently intended for production use.</p>\n<h2><a href=\"#the-problems-with-manually-granting-temporary-access\">»</a><a></a>The Problems with Manually Granting Temporary Access</h2>\n<p>There are a few exceptions to the principle of least privilege access where wider temporary access may be required. For example, when engineers are on call and troubleshooting an incident, they may need access to underlying infrastructure to identify and remediate an issue. Traditionally in these scenarios, the software engineer requests access from a security engineer, who grants access to the required environment components and is responsible for revoking access upon resolution of the incident.</p>\n<p>This scenario presents a few challenges:</p>\n<ul>\n<li>A security engineer is required to be on call alongside a software engineer to grant and revoke access, which is an additional human resource overhead.</li>\n<li>A lot of time can be lost as the engineer waits for access to be granted. This could have financial implications, for example if the incident has caused an outage that prevents customers from using the platform.</li>\n<li>There is a risk of access not being completely revoked once the incident is resolved. As with everything incorporating a human element, there are many factors that could prevent the security engineer from revoking the access.</li>\n</ul>\n<p>This is a common problem faced by many organizations, regardless of scale. As a former consultant, I have personally witnessed security incidents caused by not revoking access permissions.</p>\n<h2><a href=\"#a-solution-event-driven-access-controls\">»</a><a></a>A Solution: Event-Driven Access Controls</h2>\n<p>What would a good solution to this problem look like? Typically, these issues are set off by an event that requires engineers to gain access to a system. Is there a way to use this event to trigger a workflow that grants access to the target infrastructure and then automatically revokes access when the event has ended?</p>\n<p>One solution would be to assign a time-to-live (TTL) to group membership. While this approach could be useful, an event-driven approach provides additional advantages. Specifically, a TTL on group membership assumes that access permissions are granted via group principals, but the event-driven approach can be applied to any type of principal.</p>\n<p>Based on this idea, I worked with HashiCorp Group Manager of Developer Relations Erik Veld to develop an application internally called <a href=\"https://github.com/hashicorp-dev-advocates/Rift\">Rift</a>, which facilitates this event-driven workflow, as <a href=\"https://www.hashicorp.com/resources/incident-driven-remote-infrastructure-access-with-boundary-consul-and-vault\">demonstrated by HashiCorp Senior Developer Advocate Kerim Satirli at HashiConf Europe 2022</a>.</p><h2><a href=\"#using-rift-to-automate-access-control\">»</a><a></a>Using Rift to Automate Access Control</h2>\n<p>Rift acts as the glue between three different systems:</p>\n<ol>\n<li>An alerting platform</li>\n<li>A secrets management platform, (<a href=\"https://www.vaultproject.io/\">HashiCorp Vault</a> in this case)</li>\n<li>A secure session management platform, (<a href=\"https://www.boundaryproject.io/\">HashiCorp Boundary</a> in this case)</li>\n</ol>\n<p>The end-to-end workflow relies on the alerting platform sending a webhook notification of the incident to Rift. Once Rift receives this notification, it takes the payload and uses this information to ascertain who is on call. Rift then makes a call to Boundary to grant the on-call engineers access to the underlying infrastructure. Once the incident is resolved, the alerting sends another webhook notification of the incident resolution to Rift. Rift then processes this notification and makes another call to Boundary to revoke access for the on-call engineers.</p><img src=\"https://www.datocms-assets.com/2885/1674499624-rift-diagram.jpeg\" alt=\"Rift\" /><p>This workflow requires a few things to be set up in Boundary:</p>\n<p>The users must already exist in Boundary\nThe host catalogs, hosts, host sets, and targets must already exist\nThe relevant credential libraries must be added to their respective Boundary targets. For more information on how to configure credential libraries, see the <a href=\"https://developer.hashicorp.com/boundary/tutorials/access-management/oss-vault-cred-brokering-quickstart\">Vault Credential Brokering Quickstart guide</a></p>\n<p>The alerting platform needs to be configured to send webhook notifications to Rift. An example of this is the <a href=\"https://support.pagerduty.com/docs/webhooks\">webhooks</a> implementation that PagerDuty has built into its platform, which would need to be configured with Rift’s callback URL.</p>\n<p>Rift also needs to be configured with Boundary credentials to receive enough permissions to perform the following actions:</p>\n<p>Create/update/delete projects\nCreate/update/delete roles and associated configurations (<code>grant_strings</code>, add/remove principals)\nCreate/update/delete groups</p>\n<p>Adding the credential library to the Boundary target enables the on-call engineers to connect and authenticate to that target. This is all facilitated by Vault brokering short-lived credentials.</p>\n<p>Rift must also be accessible to receive the webhook notifications, and it needs to communicate with the Boundary controller. Once all of these building blocks are in place, you should be ready to experiment with Rift.</p>\n<h2><a href=\"#summary-of-rift-event-event-access-controls\">»</a><a></a>Summary of Rift: Event-Event Access Controls</h2>\n<p>This blog post examined the challenges around effective access controls in a zero trust environment and proposed an automated solution to grant temporary access during a production incident. The proof of concept, called Rift, uses HashiCorp Vault and Boundary to broker credentials to engineers who need production access. Upon incident resolution, Rift automatically revokes the credentials and limits access to the production environment.</p>\n<p>We hope you will experiment with Rift and let us know your thoughts, ideas, and how this relates to your operational challenges. Since Rift is a proof of concept, we’d like to learn more from your feedback and suggestions on the best and most useful solutions for your day-to-day operations. Please provide your feedback can be provided on this <a href=\"https://github.com/hashicorp-dev-advocates/rift-poc/issues/new\">github issue</a>.</p>\n<p><em>We recently launched Boundary on the HashiCorp Cloud Platform (HCP), now <a href=\"https://www.hashicorp.com/blog/announcing-launch-and-free-public-beta-of-hcp-boundary\">free in public beta</a>. HCP Boundary provides a single, fully managed workflow to securely connect to hosts and critical systems <a href=\"https://www.hashicorp.com/blog/how-to-connect-to-kubernetes-clusters-using-boundary\">across Kubernetes clusters</a>, cloud service catalogs, and on-premises infrastructure. <a href=\"https://cloud.hashicorp.com/products/boundary\">Try HCP Boundary today</a>!</em></p>","author":"Rob Barnes","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"046b1bb63ed89c74b7f0af5966441fb534cacc615b5713266438a0f1b7d06eab","category":"Tech"}