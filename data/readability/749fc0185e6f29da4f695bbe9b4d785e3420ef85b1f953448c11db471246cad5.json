{"title":"สรุปแนวทางการออกแบบ API ของ Slack","link":"https://www.somkiat.cc/summary-design-api-from-slack/","date":1631602978000,"content":"<div id=\"readability-page-1\" class=\"page\"><div><figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/09/image5-1024x636.png\" alt=\"\" width=\"506\" height=\"314\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/09/image5-1024x636.png 1024w, https://www.somkiat.cc/wp-content/uploads/2021/09/image5-300x186.png 300w, https://www.somkiat.cc/wp-content/uploads/2021/09/image5-768x477.png 768w, https://www.somkiat.cc/wp-content/uploads/2021/09/image5.png 1280w\" sizes=\"(max-width: 506px) 100vw, 506px\"></figure><p>จากบทความของ <strong><a href=\"https://slack.engineering/how-we-design-our-apis-at-slack/\" target=\"_blank\" rel=\"noreferrer noopener\">Slack เรื่อง How we design out APIs at Slack</a></strong><br>ทำการสรุปแนวทางในการออกแบบ API ของระบบออกมาว่าเป็นอย่างไรบ้าง<br>เพื่อช่วยทำให้ผู้ใช้งานหรือ developer ใช้งานง่ายขึ้น<br>อีกทั้งช่วยให้การดูแลรักษา API ง่ายขึ้นด้วย<br>ซึ่งควรต้องคิดตั้งแต่การออกแบบกันเลยทีเดียว<br>มิเช่นนั้นแทนที่จะได้ API ที่ดีมีประโยชน์ กลับได้ของที่แย่ ๆ ออกมา<br>โดยมีแนวทางของการออกแบบดังนี้</p><p><strong>1. So one thing and do it well</strong></p><p>เมื่อเริ่มต้นออกแบบ API นั้น<br>อาจจะมีหลาย ๆ ปัญหาให้แก้ไข<br>ซึ่งอาจจะทำให้เกิดความซับซ้อน และ ยากต่อการทำความเข้าใจ<br>ดังนั้นแนะนำให้เลือกจาก use case หนึ่งมาทำ<br>เพื่อให้ focus มากยิ่งขึ้น</p><p><strong>2. Make it fast and easy to get started</strong></p><div><p>ต้องทำให้เร็วและง่ายต่อการเริ่มต้นใช้งาน<br>เป็นสิ่งที่สำคัญมาก ๆ<br>ถ้าใช้งานยาก เริ่มได้ช้า น่าจะไม่ใช้การสร้างมาเพื่อแก้ไขปัญหา<br>กลับเป็นการสร้างปัญหามากยิ่งกว่า</p><p>โดยจะเริ่มตั้งแต่การใช้งานภายใน<br>เช่นพนักงานใหม่เข้ามา ให้ลองทำการเปิดและลองใช้งาน API ดูว่า<br>ใช้งานเป็นอย่างไร เริ่มง่ายไหม เร็วไหม</p></div><p><strong>3. Strive for intuitive consistency</strong></p><p>API ต้องความสอดคล้องไปในทิศทางเดียวกันและช่วยให้เข้าใจหรือพอเดาได้ว่า API ทำงานอะไร ใช้งานอย่างไรโดยแทบจะไม่ต้องอ่านเอกสารเลยด้วยซ้ำทั้งจากชื่อของ endpointทั้งจากชื่อของ input parameterทั้งจาก output response</p><p><strong>โดยเรื่องของ consistency จะมีอยู่ 3 level คือ</strong></p><p>Level 1 :: Consistency with Industry standard<br>Level 2 :: Consistency with your product<br>Level 3 :: Consistency with your other API methods</p><p><strong>4. Return meaningful errors</strong></p><p>อีกเรื่องที่สำคัญมาก ๆ คือ การ return error ที่ดี<br>มีความหมายชัดเจน ไม่กำกวม<br>เพื่อให้นักพัฒนาที่ใช้งาน เข้าใจได้ชัดเจนว่า<br>ปัญหาเกิดจากอะไร<br>จะได้แก้ไขได้ตรงประเด็นมากยิ่งขึ้น</p><p><strong>5. Design for scale and performance</strong></p><p>เรื่องการ scale และ performance ที่ดี ก็สำคัญไม่น้อยยก<br>ตัวอย่างเช่น</p><ul><li>ของการทำ paging กับข้อมูลจำนวนมาก ๆ</li><li>ข้อมูลที่ return กลับไปต้องไม่ซับซ้อนมากนัก หรือ ขนาดไม่ใหญ่จนเกินไป</li><li>เรื่องการทำ rate limit ที่สมเหตุสมผล เพื่อช่วยป้องกันระบบงานให้ยังคงทำงานได้ดี</li></ul><p><strong>6. Avoid braking changes</strong></p><div><p>ทุกสิ่งอย่าง ล้วนมีการเปลี่ยนแปลง<br>ดังนั้นเรื่องของ breaking change จึงสำคัญมาก ๆ<br>ต้องระวังให้ดี ๆ<br>จะมีนโยบายอย่างไร</p><p>โดยที่ Slack จะมีแนวคิดคือ<br>อะไรที่มัน work ในเมื่อวาน วันพรุ่งนี้ยังต้อง work อยู่เสมอ<br>ไม่ใช่แค่ case ปกติเท่านั้น<br>เรื่องของ case อื่น ๆ หรือพวก exception ต่าง ๆ ก็ต้องระวังไว้ด้วย</p><p>การแจ้งเรื่องของการเปลี่ยนแปลงต่าง ๆ<br>จึงต้องวางแผน และ ประกาศ หรือ ติดต่อสื่อสารให้ชัดเจนเสมอ</p></div><p><strong>อีกทั้งสรุปขั้นตอนการออกแบบ API ไว้ดังนี้</strong></p><p><strong>ขั้นตอนที่ 1 เขียน API spce ก่อน</strong></p><p>เริ่มจากการตั้งปัญหาที่ต้องการแก้ไขและกำหนด use case ของ API ให้ชัดเจน<br>จากนั้นเริ่มเขียน API spec<br>เพื่อทำการอธิบายสิ่งที่จำเป็นสำหรับ API<br>เพื่อทำให้เข้าใจสิ่งที่จะสร้างอย่างชัดเจน<br>ประกอบไปด้วย</p><ul><li>Method name</li><li>เป้าหมายของ API</li><li>ตัวอย่างของ request และ response รวมทั้ง error ต่าง ๆ ที่สามารถเกิดขึ้นได้</li></ul><p>โดยการทำงานจะเป็นทีม ไม่ใช่ทำงานคนเดียว</p><p><strong>ขั้นตอนที่ 2 ทำการ review ภายในกันเอง</strong></p><p>เพื่อช่วยให้เราเห็นปัญหาต่าง ๆ จากการออกแบบได้อย่างรวดเร็ว<br>ทั้งจากภายในทีมและต่างทีม<br>ทำให้เห็นปัญหาจากกลุ่มคนหลายหลุ่ม หลายมุมมอง<br>ทั้งการตั้งชื่อ การใช้งาน ความปลอดภัย และ performance<br>ซึ่งจะช่วยลดปัญหาที่จะไปเกิดหรือเจอเมื่อเราต้องพัฒนา<br></p><p><strong>ขั้นตอนที่ 3 ได้รับ feedback แต่เนิ่น ๆ จาก partner</strong></p><p>จะทำการส่ง API spec ไปให้กับ partner<br>เพื่อให้ review และได้รับ feedback ที่เป็นประโยชน์มาก ๆ<br>ว่าในมุมมองของ partner นั้น API spec เหล่านี้เป็นอย่างไร<br>เข้าใจหรือใช้งานง่ายไหม<br>โดยการทำงานจะเป็นรอบสั้น ๆ ไป<br>เพื่อให้การออกแบบและพัฒนา API ดีขึ้นอย่างต่อเนื่อง<br></p><p><strong>ขั้นตอนที่ 4 มีการทำ Beta testing</strong></p><p>ก่อนที่จะปล่อยให้ใช้งานแบบ public<br>จะต้องทำ beta testing ก่อน<br>นั่นคือจะเลือก partner มาใช้งานก่อน (Early access)<br>เพื่อลองทำการ integrate และใช้งานจริง<br>เพื่อให้ได้ feedback กลับมาเพื่อแก้ไขและปรับปรุงต่อไปอีก</p><p><strong>สุดท้ายแล้ว แนะนำให้ของนำไปใช้และประยุกตืให้เข้ากับ use case และทีม</strong></p><p>สิ่งที่สำคัญคือ <strong>ให้ความสำคัญกับการออกแบบ</strong><br>เพราะว่าการออกแบบมีหลากหลายทางเลือก<br>จากนั้นต้องทำการ review หรือทดลอง<br>เพื่อให้ได้รับ feedback ที่รวดเร็วและต่อเนื่องจากคนหลากหลายมุมมอง<br>เพื่อทำมาปรับปรุง<br>นั่นหมายความว่า เป็นการทำงานที่มีความยืดหยุ่นอย่างมากนั่นเอง</p></div></div>","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"749fc0185e6f29da4f695bbe9b4d785e3420ef85b1f953448c11db471246cad5","category":"Thai"}