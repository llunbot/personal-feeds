{"title":"Announcing Terraform AWS Cloud Control Provider Tech Preview","link":"https://www.hashicorp.com/blog/announcing-terraform-aws-cloud-control-provider-tech-preview","date":1633032000000,"content":"<p>The HashiCorp <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest\">Terraform AWS Cloud Control Provider</a>, currently in tech preview, aims to bring Amazon Web Services (AWS) resources to Terraform users faster. The new provider is automatically generated, which means new features and services on AWS can be supported right away. The AWS Cloud Control provider supports hundreds of AWS resources, with more support being added as AWS service teams adopt the Cloud Control API standard.</p>\n<p>For Terraform users managing infrastructure on AWS, we expect this new provider will be used alongside the existing AWS provider, which will continue to be maintained. Given the ability to automatically support new features and services, this new provider will increase the resource coverage and significantly reduce the time it takes to support new capabilities. We are excited for this to improve the experience and avoid the frustration caused by coverage gaps.</p>\n<h2><a href=\"#aws-cloud-control-api\">»</a><a></a>AWS Cloud Control API</h2>\n<p><a href=\"https://docs.aws.amazon.com/cloudcontrolapi\">AWS Cloud Control API</a> makes it easy for developers to manage their cloud infrastructure in a consistent manner and to leverage the latest AWS capabilities faster by providing a unified set of API actions as well as common input parameters and error types across AWS services. As a result, any resource type published to the <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry.html\">CloudFormation Public Registry</a> exposes a standard JSON schema and can be acted upon by this interface. AWS Cloud Control API is available in all commercial regions, except China.</p>\n<p>For more information about AWS Cloud Control API, visit the <a href=\"https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/what-is-cloudcontrolapi.html\">user guide</a> and <a href=\"https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/Welcome.html\">documentation</a>.</p>\n<h2><a href=\"#how-the-aws-cloud-control-terraform-works\">»</a><a></a>How the AWS Cloud Control Terraform Works</h2>\n<p>Because AWS Cloud Control API provides an abstraction layer for resource providers to proxy through when interacting with AWS service APIs, we are able to automatically generate the codebase for the AWS Cloud Control Terraform provider. Generating the provider allows us to provide new resources faster because we won’t have to write boilerplate and standard resource implementations for each new service. The maintainers of the Terraform AWS Cloud Control provider can instead focus on user experience upgrades and performance improvements.</p>\n<h2><a href=\"#use-cases\">»</a><a></a>Use Cases</h2>\n<p>While the Terraform AWS Cloud Control Provider is still in tech preview, we suggest practitioners use this provider to:</p>\n<ul>\n<li>Experiment with new services before they are added to the Terraform AWS provider</li>\n<li>Test configurations in development or staging environments</li>\n<li>Build out proof-of-concept deployments in conjunction with the Terraform AWS provider, such as using Amazon AppFlow with Amazon S3 as illustrated in the example later in this blog post</li>\n</ul>\n<p>Until the conclusion of the tech preview, we suggest using the Terraform AWS provider for production use across critical services. We will be evaluating the tech preview and will rely on community feedback to inform our decisions regarding general availability.</p>\n<h2><a href=\"#requirements\">»</a><a></a>Requirements</h2>\n<p>In order to use the new Terraform AWS Cloud Control provider, you will need:</p>\n<ul>\n<li>Terraform 1.0. or later</li>\n<li>An active AWS account in any commercial region, excluding China</li>\n</ul>\n<h2><a href=\"#configuring-the-provider\">»</a><a></a>Configuring the Provider</h2>\n<p>In order to configure the provider, you will need to employ the configuration blocks shown here, while specifying your preferred region:</p><pre><code>terraform {\n  required_providers {\n    awscc = {\n      source  = \"hashicorp/awscc\"\n      version = \"~&gt; 0.1\"\n    }\n  }\n}\n\n# Configure the AWS Cloud Control Provider\nprovider \"awscc\" {\n  region = \"us-east-1\"\n}</code></pre><h2><a href=\"#authentication\">»</a><a></a>Authentication</h2>\n<p>To use the AWS Cloud Control provider, you will need to authenticate with your AWS account. You can use any authentication method available in the AWS SDK, including:</p>\n<ul>\n<li>Environment variables</li>\n<li>Shared credentials file</li>\n<li><a href=\"https://aws.amazon.com/codebuild/\">AWS CodeBuild</a>, <a href=\"https://aws.amazon.com/ecs/?whats-new-cards.sort-by=item.additionalFields.postDateTime&amp;whats-new-cards.sort-order=desc&amp;ecs-blogs.sort-by=item.additionalFields.createdDate&amp;ecs-blogs.sort-order=desc\">Amazon ECS</a>, and <a href=\"https://aws.amazon.com/eks/\">Amazon EKS</a> roles</li>\n<li>Custom User-Agents</li>\n<li><a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-metadata.html\">EC2 instance metadata service</a></li>\n<li>The <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs#assume-role\">AssumeRole</a> function in AWS IAM</li>\n</ul>\n<p>For more information and examples, please refer to the <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest/docs\">provider documentation</a> on the Terraform Registry.</p>\n<h2><a href=\"#example-usage\">»</a><a></a>Example Usage</h2>\n<p>To see how it all fits together, check out this example configuration using <a href=\"https://aws.amazon.com/appflow/\">Amazon AppFlow</a>. First, set up an AppFlow <code>flow</code> using the Terraform AWS Cloud Control API provider (<code>awscc</code>). Then set up an <a href=\"https://aws.amazon.com/pm/serv-s3/\">Amazon S3</a> bucket to store the <code>flow</code> data using the Terraform AWS provider (<code>aws</code>).</p>\n<p>This example demonstrates how you can use the core resources in the <code>aws</code> provider to supplement the new services in the <code>awscc</code> provider.</p>\n<h3><a href=\"#using-two-providers\">»</a><a></a>Using Two Providers</h3>\n<p>You’ll need to configure both providers in the same configuration file. Both the <code>awscc</code> and <code>aws</code> providers must be initialized for this example to work.</p><pre><code>terraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 3.0\"\n    }\n    awscc = {\n      source  = \"something/awscc\"\n    }\n  }\n}\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\nprovider \"awscc\" {\n  region = \"us-west-2\"\n}</code></pre><h3><a href=\"#setting-up-s3-buckets\">»</a><a></a>Setting Up S3 Buckets</h3>\n<p>Set up your S3 buckets using the <code>aws</code> provider. Designate a bucket for both your source and destination.</p><pre><code>resource \"aws_s3_bucket\" \"source\" {\n  bucket = \"awscc-appflow-demo-source\"\n  acl    = \"private\"\n}\n\nresource \"aws_s3_bucket\" \"destination\" {\n  bucket = \"awscc-appflow-demo-destination\"\n  acl    = \"private\"\n}</code></pre><h3><a href=\"#creating-an-appflow-flow\">»</a><a></a>Creating an AppFlow Flow</h3>\n<p>When creating a <code>flow</code>, you will need to provide the <code>flow_name</code>, <code>connector_type</code>, <code>tasks</code>, and <code>trigger_config</code>. Other optional attributes, such as <code>tags</code> can also be set on the resource.</p>\n<p>To store flow data in S3, you must provide the <code>bucket_name</code> within the <code>destination_connector_properties</code>. You can also optionally provide the <code>bucket_prefix</code> and the <code>s3_output_config</code>.</p><pre><code>resource \"awscc_appflow_flow\" \"flow\" {\n  flow_name = \"s3-to-s3-flow\"\n  source_flow_config = {\n    connector_type = \"S3\"\n    source_connector_properties = {\n      s3 = {\n        bucket_name = aws_s3_bucket.source.bucket\n        bucket_prefix = \"af\"\n      }\n    }\n  }\n  destination_flow_config_list = [ \n    {\n      connector_type = \"S3\"\n      destination_connector_properties = {\n        s3 = {\n          bucket_name = aws_s3_bucket.destination.bucket\n        }\n      }\n    }\n  ]\n  tasks = [\n    {\n        source_fields = [\n            \"column_one\",\n            \"column_two\"\n        ]\n        connector_operator = {\n            s3 = \"PROJECTION\"\n        }\n        task_type = \"Filter\"\n        task_properties = []\n    },\n    {\n        source_fields = [\n            \"column_one,column_two\"\n        ]\n        connector_operator = {\n            s3 = \"NO_OP\"\n        }\n        destination_field = \"column_cat\"\n        task_type = \"Map\",\n        task_properties = [{\n            key = \"DESTINATION_DATA_TYPE\"\n            value = \"string\"\n        }]\n    },\n    {\n        source_fields = [\n            \"column_one\",\n            \"column_two\"\n        ]\n        connector_operator = {\n            s3 = \"NO_OP\"\n        }\n        destination_field = \"column_one,column_two\"\n        task_type = \"Merge\"\n        task_properties = [{\n            key = \"CONCAT_FORMAT\"\n            value = \"$${column_one} $${column_two}\"\n        }]\n    }\n  ]\n  trigger_config = {\n    trigger_type = \"Scheduled\"\n    trigger_properties = {\n        schedule_expression = \"rate(1minutes)\"\n    }\n  }\n}</code></pre><p><strong>Note:</strong> At this time the AWS Cloud Control API does not offer the ability to schedule or start flows. To schedule your configured flow, you will need to use the AWS AppFlow console. For more information about how to use Amazon AppFlow and the various connection and destination types, visit the <a href=\"https://docs.aws.amazon.com/appflow/index.html\">Amazon AppFlow documentation</a>.</p>\n<p>For additional examples visit the <a href=\"https://learn.hashicorp.com/tutorials/terraform/aws-cloud-control?in=terraform/aws\">HashiCorp Learn Guide</a>.</p>\n<h2><a href=\"#tell-us-what-you-think\">»</a><a></a>Tell Us What You Think</h2>\n<p>We would love to hear your feedback on this project. You can report bugs and request features or enhancements for the AWS Cloud Control provider by opening an issue on our <a href=\"https://github.com/hashicorp/terraform-provider-awscc\">GitHub repository.</a></p>\n<p>For AWS service coverage requests, please create an issue on the <a href=\"https://github.com/aws-cloudformation/cloudformation-coverage-roadmap\">CloudFormation Public Coverage Roadmap</a>.</p>\n<p>For documentation and examples, please visit the learn <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest\">Terraform Registry</a> and <a href=\"https://learn.hashicorp.com/\">HashiCorp Learn</a> platform.</p>","author":"Mary Cutrali","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"3b7bcc92a9d998dfc32b2a7f10f0f8a35504c2e506e340a22146ff32bbc63553","category":"Tech"}