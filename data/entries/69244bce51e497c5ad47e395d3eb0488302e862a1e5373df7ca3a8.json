{"title":"Boundary 0.12 introduces multi-hop sessions and SSH certificate injection","link":"https://www.hashicorp.com/blog/boundary-0-12-introduces-multi-hop-sessions-and-ssh-certificate-injection","date":1676404800000,"content":"<p>We’re excited to announce the release of HashiCorp <a href=\"releases.hashicorp.com/boundary\">Boundary 0.12</a>, now available in <a href=\"https://www.hashicorp.com/blog/announcing-launch-and-free-public-beta-of-hcp-boundary\">HCP Boundary</a> and for open source download. Boundary provides identity-based remote access to infrastructure for individuals and teams operating at any scale.</p>\n<p>The 0.12 release adds major new functionality to Boundary, including:</p>\n<ul>\n<li><strong>Multi-hop sessions (HCP-only):</strong> Boundary can now establish sessions to targets through multiple-hops of workers secured through reverse-proxy. This eliminates the need to expose workers on private networks, enclaves, and disconnected networks directly to clients.</li>\n<li><strong>Credential injection using Vault SSH signed certificates (HCP-only):</strong> Boundary can now inject single-use SSH certificates generated by HashiCorp Vault to increase protection for SSH targets.</li>\n<li><strong>Addresses on targets:</strong> Administrators can now optionally assign a network address directly on a target, eliminating the requirement of attaching a host.</li>\n<li><strong>Credential templating:</strong> Vault credentials can now be mapped directly to a user within a target instead of needing separate targets per user credential.</li>\n<li><strong>Key lifecycle management (OSS-only):</strong> You can now manage the lifecycles of both key encryption keys (KEKs) and data encryption keys (DEKs) using the new key rotation and key version destruction functionality.</li>\n<li><strong>JSON credentials:</strong> Administrators can now create and broker JSON blobs to authorized users connecting to machines. This allows more flexibility in the credentials that can be brokered.</li>\n<li><strong>Authentication UX improvements:</strong> Users no longer need to provide an auth method ID in the command line during authentication. If none is provided, the “primary” auth method ID will be used.</li>\n</ul>\n<h2><a href=\"#multi-hop-worker-sessions-hcp\">»</a><a></a>Multi-hop worker sessions (HCP)</h2>\n<p>Boundary <a href=\"https://developer.hashicorp.com/hcp/docs/boundary/self-managed-workers\">workers</a> can be <a href=\"https://developer.hashicorp.com/boundary/tutorials/hcp-administration/hcp-manage-workers\">deployed</a> in any public or private network to enable secure access to infrastructure resources. Prior to Boundary 0.12, the workers were required to have outbound network access to the HCP Boundary control plane, and they needed to have inbound network access from clients in order to establish sessions. However, many organizations do not allow any inbound access to their private networks, which means remote users would need to be on the same corporate network or use a VPN solution in order to reach the Boundary worker.</p>\n<p>In Boundary version 0.12, we are introducing a new feature called multi-hop sessions, which allow sessions to be proxied over multiple workers chained together through reverse-proxy connections. This means that a worker in a private network would only require outbound network access to reach upstream workers or the control plane. Remote users no longer need to have network access to the private network. Instead, they just need network access to the client-facing (or ingress) worker.</p><img src=\"https://www.datocms-assets.com/2885/1676392502-boundary-multi-hop-example-1.png\" alt=\"Multi-hop\" /><p>As depicted in the diagram above, there are two main options to achieve an outbound-only session with HCP Boundary and multi-hop sessions:</p>\n<ol>\n<li>Use one of HCP Boundary’s publicly available workers as a client-facing worker for users to connect to.</li>\n<li>Set up publicly accessible workers in a corporate network for users to connect to, acting as a public bastion host.</li>\n</ol>\n<p>In addition, multiple workers can connect together to form a chain that can reach inside enclaves. For example, if there is a Kubernetes cluster inside of a datacenter network typically accessed from a bastion host on the corporate network, a chain can be established so that a remote user only needs to authenticate to Boundary once. Boundary can securely connect users to the requested target on the appropriate network.</p><img src=\"https://www.datocms-assets.com/2885/1676392506-boundary-multi-hop-example-2.png\" alt=\"Multi-hop\" /><p>Learn more about multi-hop in our <a href=\"https://developer.hashicorp.com/boundary/tutorials/hcp-administration/hcp-manage-multi-hop\">tutorial</a> and <a href=\"https://developer.hashicorp.com/boundary/docs/configuration/worker/pki-worker#multi-hop-workershcp-only\">documentation</a>.</p>\n<h2><a href=\"#credential-injection-using-vault-ssh-certificates-hcp\">»</a><a></a>Credential injection using Vault SSH certificates (HCP)</h2>\n<p>Starting in Boundary 0.10, users could create sessions with injected SSH private keys, as well as usernames and passwords. Injected credentials are an improvement over traditional brokered credentials because they are never returned to user devices and are instead injected into a session on worker nodes through protocol decoding. However, SSH private key and username/password injection methods still faced operational and security limitations.</p>\n<p>With public key authentication, keys for each user need to be distributed to all of the correct hosts. Additionally, both private key and usernames/password injection rely on the use of static credentials. In contrast, SSH certificates can be used to generate unique credentials for each session and only require administrators to distribute a certificate authority’s (CA) public key to the hosts. Boundary users have asked for <a href=\"https://github.com/hashicorp/boundary/issues/1768\">SSH certificate</a> support, allowing them to provide Boundary with a public key and have a CA that’s connected to Boundary return a unique signed certificate for each session.</p>\n<p>Traditionally, users have worked around Boundary’s lack of SSH signed certificate support by exposing Vault and bastion hosts to end users so that they can retrieve a signed certificate from Vault, which then allows connectivity to the bastion host.</p><img src=\"https://www.datocms-assets.com/2885/1676392494-boundary-injection-vault-3.png\" alt=\"SSH\" /><p>In Boundary 0.12, we’ve added support for credential injection of Vault SSH certificates. By leveraging Boundary’s integration with the Vault SSH secrets engine, you’ll be able to use Vault as your certificate authority for SSH certificates.</p><img src=\"https://www.datocms-assets.com/2885/1676392510-boundary-public-key-flow-kms-4.png\" alt=\"Boundary\" /><p>Boundary administrators can use either the issue or sign endpoints to generate certificates from Vault. This gives users a secure way to connect to SSH endpoints with credentials that are both dynamic _and _injected into a session so that users never see the credentials.</p>\n<p>Learn more about certificate injection in our <a href=\"https://developer.hashicorp.com/boundary/tutorials/access-management/hcp-certificate-injection\">tutorial</a> and <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/domain-model/credential-libraries#vault-ssh-certificate-credential-library-attributes\">documentation</a>.</p>\n<h2><a href=\"#addresses-on-targets\">»</a><a></a>Addresses on targets</h2>\n<p>HashiCorp Boundary offers an extensible domain model that allows administrators to organize target resources in a way that complements how their organization prefers to manage its infrastructure. However that flexibility can become a hindrance when it comes to setting up a quick proof-of-concept and defining a target in order to create a session.</p>\n<p>Boundary 0.12 introduces a quicker way to set up a target. Traditionally, a user would need to define <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/domain-model/hosts\">hosts</a> within a <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/domain-model/host-sets\">host set</a> and then assign that to a <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/domain-model/targets\">target</a>. The hosts contain the hostname or IP address of the computing resources that the user would like to connect to, and the target definition contains various connection parameters to those hosts.</p>\n<p>Starting with 0.12 users can specify the hostname/IP address directly within the target definition, negating the need to create hosts, host sets, or host catalogs. This functionality allows a user to get started with Boundary quickly while maintaining the same level of flexibility for more complex and production-like scenarios.</p>\n<p>For more information, refer to the <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/domain-model#target-and-host-resources\">Target and host resources documentation</a>.</p>\n<h2><a href=\"#credential-templating-for-vault-paths-0-11-1\">»</a><a></a>Credential templating for Vault paths (0.11.1)</h2>\n<p>Before credential templating in Boundary, if an administrator wanted to map credentials associated with specific users, they were forced to create individual targets and credential libraries for each user for the same host. This leads to resource sprawl within Boundary, resulting in hundreds to thousands of individual credential libraries at scale.</p>\n<p>The table below shows an example list of per-user credentials for access to a common host. Before credential templating, administrators had to set up targets for each user.</p>\n<table>\n  <tr>\n   <td><strong>User</strong>\n   </td>\n   <td><strong>Credential Library Path</strong>\n   </td>\n   <td><strong>Target</strong>\n   </td>\n  </tr>\n  <tr>\n   <td>Joe\n   </td>\n   <td>/kv/data/joe\n   </td>\n   <td>target_ssh_joe\n   </td>\n  </tr>\n  <tr>\n   <td>Swati\n   </td>\n   <td>/kv/data/swati\n   </td>\n   <td>target_ssh_swati\n   </td>\n  </tr>\n  <tr>\n   <td>Justin\n   </td>\n   <td>/kv/data/justin\n   </td>\n   <td>target_ssh_justin\n   </td>\n  </tr>\n</table>\n<p>In Boundary 0.12, we’ve added support for credential templating within credential libraries. This allows administrators to configure one target with one credential library that generates per-user credentials.</p>\n<p>The table below shows an example list for setting up a single target with unique credentials for each user through credential templating. Administrators no longer need to maintain targets for each user.</p>\n<table>\n  <tr>\n   <td><strong>User</strong>\n   </td>\n   <td><strong>Credential Library Path</strong>\n   </td>\n   <td><strong>Target</strong>\n   </td>\n  </tr>\n  <tr>\n   <td>Joe\n   </td>\n   <td>/kv/data/{{ .Account.LoginName }}\n   </td>\n   <td>target_ssh\n   </td>\n  </tr>\n  <tr>\n   <td>Swati\n   </td>\n   <td>/kv/data/{{ .Account.LoginName }}\n   </td>\n   <td>target_ssh\n   </td>\n  </tr>\n  <tr>\n   <td>Justin\n   </td>\n   <td>/kv/data/{{ .Account.LoginName }}\n   </td>\n   <td>target_ssh\n   </td>\n  </tr>\n</table>\n<p>Users can perform <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/domain-model/credential-libraries\">credential templating</a> based on:</p>\n<ul>\n<li><strong>{{.User.Id}}</strong> - The user's ID.</li>\n<li><strong>{{.User.Name}}</strong> - The user's name from the user resource.</li>\n<li><strong>{{.User.FullName}}</strong> - The user's name from the account corresponding to the primary auth method in the user's scope. This value may be unpopulated or different from the account name used in the template.</li>\n<li><strong>{{.User.Email}}</strong> - The user's email address from the account corresponding to the primary auth method in the user's scope. This value may be unpopulated, or it may be different from the account name used in the template.</li>\n<li><strong>{{.Account.Id}}</strong> - The account's ID.</li>\n<li><strong>{{.Account.Name}}</strong> - The name of the account from the account resource.</li>\n<li><strong>{{.Account.LoginName}}</strong> - The account's login name, if a login name is used by that type of account.</li>\n<li><strong>{{.Account.Subject}}</strong> - The account's subject, if a subject is used by that type of account.</li>\n<li><strong>{{.Account.Email}}</strong> - The account's email, if email is used by that type of account.</li>\n</ul><img src=\"https://www.datocms-assets.com/2885/1676392489-boundary-credential-lib-5.png\" alt=\"Boundary\" /><p>For more information, refer to the <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/domain-model/credential-libraries#vault-credential-library-parameter-templating\">Vault credential library parameter templating documentation</a>.</p>\n<h2><a href=\"#key-lifecycle-management-boundary-0-11-1\">»</a><a></a>Key lifecycle management (Boundary 0.11.1)</h2>\n<p>You can now manage the lifecycles of both KEKs and DEKs using the new key rotation and key version destruction functionality.</p>\n<p>When rotating the keys, Boundary creates a new key version for the KEK and all DEKs in the specified scope. These new key versions are used for future encryption operations, while the older key versions may still be used for decrypting existing data in the database. It is considered a best practice to regularly rotate encryption keys to lessen the impact of key compromise, among other factors.</p>\n<p>In addition to creating a new key version for all keys in the scope, you can optionally use the rotate key command to re-encrypt existing key versions with the new KEK version so all DEK versions, both old and new, are encrypted using the new KEK version.</p>\n<p>For more information, refer to our <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/security/data-encryption#key-version-lifecycle-management\">Key version lifecycle management documentation</a> and the <a href=\"https://www.hashicorp.com/blog/boundary-kms-key-management-service-root-key-migration\">Boundary KMS root key migration blog post</a>.</p>\n<h2><a href=\"#json-credentials\">»</a><a></a>JSON credentials</h2>\n<p>Up to Boundary 0.11, Boundary’s static credential store supports only two static credential types: username/password and SSH private key types. With Boundary 0.12, we’re introducing a new JSON credential type to the static credential store.</p><img src=\"https://www.datocms-assets.com/2885/1676392498-boundary-json-blob-6.png\" alt=\"Boundary\" /><p>Administrators can now create and broker JSON blobs to authorized users connecting to machines. This allows for more flexibility in the credentials that can be brokered.</p>\n<h2><a href=\"#auth-method-improvements\">»</a><a></a>Auth method improvements</h2>\n<p>Previously, authenticating through the CLI required you to provide an auth method ID. This value is sometimes difficult to find, if you did not previously save the ID. Starting in version 0.12, the Boundary CLI no longer requires you to provide an auth method ID and will use the default auth method ID if none is provided. The built-in password auth method is now marked as “Primary” when an HCP Boundary cluster is deployed.</p>\n<h2><a href=\"#get-started-with-boundary-0-12\">»</a><a></a>Get started with Boundary 0.12</h2>\n<p>For more information about the new features and improvements introduced in Boundary 0.12, please see the <a href=\"https://developer.hashicorp.com/boundary/docs/release-notes/v0_12_0\">release notes</a> and <a href=\"https://discuss.hashicorp.com/t/hcsec-2023-03-boundary-workers-store-rotated-credentials-in-plaintext-even-when-key-management-service-configured/49907\">0.12 CVE</a> fix.</p>\n<p>If you’re new to HashiCorp Boundary, get up and running quickly with our <a href=\"https://learn.hashicorp.com/boundary\">Get started with Boundary tutorial</a>. If you’d like to try the managed version of Boundary on the HashiCorp Cloud Platform, <a href=\"https://cloud.hashicorp.com/products/boundary\">check out HCP Boundary with our free trial</a>.</p>","author":"Anando Chatterjee","siteTitle":"HashiCorp Blog","siteHash":"3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"69244bce51e497c5ad47e395d3eb0488302e862a1e5373df7ca3a8","category":"Tech"}