{"title":"A Complete Guide To Accessibility Tooling","link":"https://smashingmagazine.com/2021/06/complete-guide-accessibility-tooling/","date":1623839400000,"content":"<p>Learning to build accessible websites can be a daunting task for those who are just starting to implement accessible practices. We’ve pulled together a wide range of accessibility tooling, ranging from single-use bookmarklets to full-blown applications, in order to help you get started with building more accessible websites. </p>\n<h4>ARIA</h4>\n<p><a href=\"https://webaim.org/projects/million/\">The WebAIM Million survey</a> found that home pages with ARIA present averaged 41% more detectable errors than those without ARIA. ARIA is an essential tool for creating complex web applications, but the specification is strict and can be tricky to debug by those who do not use assistive technology regularly. Tooling can help us ensure that we are using ARIA correctly and not introducing more errors to our applications.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/148ea5c0-7f70-4873-a647-d061e7d7d2f5/16-complete-guide-accessibility-tooling.png\" /></p>\n<p>TPGi has created a <a href=\"https://thepaciellogroup.github.io/WAI-ARIA-Usage/WAI-ARIA_usage.html\">WAI-ARIA bookmarklet</a> which scans your page to make sure all elements and their given roles and ARIA attributes are valid. Upon activating the bookmarklet, the page is scanned for any errors, and a new tab will be opened with the results. The results include the total number of valid roles, any detected ARIA errors, and code snippets of where any errors were found so that you can easily debug your page.</p>\n<p>One thing not explicitly tested in the above bookmarklet is the presence of duplicate ARIA roles. Certain landmark roles have names that sound like they might apply to several elements, but should only be used once per page, such as <code>banner</code> or <code>contentinfo</code>. Adrian Roselli has come up with <a href=\"https://adrianroselli.com/2015/01/css-bookmarklets-for-testing-and-fixing.html#ARIAdupes\">a simple CSS-based bookmarklet to check if any of these ARIA roles have been duplicated</a>. Activating the bookmarklet will add a red outline to any offending element.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa7b8e2b-4ea1-4c24-aa36-282f1df276fb/12-complete-guide-accessibility-tooling.PNG\" /></p>\n<p><a href=\"https://chrome.google.com/webstore/detail/nerderegion/lkcampbojgmgobcfinlkgkodlnlpjieb/related?hl=en-US\">NerdeRegion</a> is a Chrome extension that logs all the output of any aria-live regions. Can’t figure out why your screen reader is announcing something unexpectedly? NerdeRegion can let you keep track of timestamped announcements and the source element they originate from, all within a panel in DevTools. Since there can be bugs and inconsistencies with how aria-live regions are announced with different screen readers, NerdeRegion can be a great tool to figure out if an issue is potentially caused by your code or by the device combination.</p>\n<h4>Automatic Testing Tools</h4>\n<p>This class of tools can be used by the developer or tester to <strong>run automated tests</strong> on the output of your code, catching errors that may not appear obvious in the source code.  There are many high-quality paid services and other tools beyond what we’ve mentioned here, but we’ve focused on tools with comprehensive free offerings in order to reduce barriers to entry. All of the listed tools can be run on pages that are not on the public internet, allowing them to be more easily incorporated into a development flow. It is important to note that accessibility testing is complicated and always requires manual testing to understand the full context of the site, but these automated testing tools can give you a solid head start.</p>\n<p>A lot of tools use axe-core under the hood, so it may be redundant to use a combination of tools. Ultimately, what kind of tool you choose is more about what kind of UI you prefer, and the level of comprehensiveness in the results. For example, Lighthouse, the tool built into Google Chrome, uses a partial selection of axe-core rules, so if you manage to get a clean scan with axe DevTools, you shouldn’t need to run a Lighthouse scan as well.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35212976-5f4e-4bb2-9c98-d6ce5b43c3ec/complete-guide-accessibility-tooling-4.png\" /></p>\n<p><a href=\"https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd https://addons.mozilla.org/en-US/firefox/addon/axe-devtools/\">Axe DevTools</a> is available as a Chrome or Firefox browser extension and shows up as a panel in the developer tools. You can test a whole page or just part of a page, and all detected issues are sorted by severity and come with code snippets for easier debugging. Axe also lets you catch more errors than other automated tools with its Intelligent Guided Tests feature. Intelligent Guided Tests identify areas to test and do as much heavy lifting as possible, before asking the tester questions in order to generate a result. Axe also allows you to save and export results, which is useful for working through fixing errors as part of a longer and more cooperative development process.</p>\n<p>Accessibility Insights also runs on axe-core, but has several features that differentiate it from axe DevTools. It can be run on various platforms, including <a href=\"https://accessibilityinsights.io/docs/en/android/overview/\">Android</a>, <a href=\"https://accessibilityinsights.io/docs/en/windows/overview/\">Windows</a>, or as a <a href=\"https://accessibilityinsights.io/docs/en/web/overview/\">browser extension</a>. All versions of Accessibility Insights feature an inspector-like tool for looking up individual element information, as well as a way of running automated checks. The web extension also contains an Assessment feature, which has a combination of automated, guided and manual tests in order to allow you to generate a full report. </p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fb53e264-6f0d-4ba7-b4d6-def6c616cfdf/17-complete-guide-accessibility-tooling.PNG\" /></p>\n<p><a href=\"https://wave.webaim.org/extension/\">WAVE by WebAIM</a> has been an integral part of my tool kit. Available in extension form as well as a mass testing service and an API, I find this tool best for checking my work as I develop due to its simplicity and speed. Everything is loaded as a panel on the side of your page, and you can get a <strong>holistic view of errors</strong> by scrolling through the page. If an error is displayed in the side panel but you aren’t sure where in the DOM it is, you can turn off styles to locate it within the markup. WAVE’s heading and landmark feature is one of my favorite things about it as it ensures that my document semantics are correct as I build.</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/siteimprove-accessibility/efcfolpjihicnikpmhnmphjhhpiclljc\">SiteImprove has a free Chrome extension</a> in addition to their paid service offerings. Like WAVE, you run the extension on a page and it lists errors in a panel on the side of the page, including filters for things like conformance level, severity and responsibility. The severity filter is especially useful as automatic testing always tends to produce some false positives.</p>\n<h4>Colors</h4>\n<p>Low contrast text errors were found on a whopping 86.4% of homepages last year. Developers often have limited control over a color palette, so it is important to try to establish an accessible color palette as early on in the process as possible.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13c07c60-0d91-46cf-b043-1320a15d7060/2-complete-guide-accessibility-tooling.PNG\" /></p>\n<p>When you’re starting to design a color palette, an in-browser color picking tool may be helpful. <a href=\"https://www.aremycolorsaccessible.com/?background=%23A92E23&amp;colorCombos=%5Bobject%20Object%5D&amp;colorCombos=%5Bobject%20Object%5D&amp;isLight=false&amp;textColor=%23FFFFFF\">Are My Colors Accessible</a> is a tool that can help you figure out an accessible color palette. The basic mode calculates the contrast ratio between any two colors. The font size and font weight of your text can affect the contrast ratio required based on the level of conformance, and this tool helpfully lays out all the different standards it meets. It also features HSL range sliders so that you can tweak any of the colors, with the results automatically updating as you make adjustments. <a href=\"https://www.aremycolorsaccessible.com/palette?colors=%23fff&amp;colors=%23d33a2c&amp;colors=%23ffe7e7&amp;colors=%23811d15&amp;colors=%23333333&amp;colors=%23666\">Palette mode</a> lets you compare every color in a palette against each other and displays the contrast ratio and standards met, which is helpful for determining how you can <strong>combine different colors</strong> together. Making any color adjustments also updates the permalink, allowing you to easily share color combinations with your team.  If you prefer a different interface for selecting colors, <a href=\"https://toolness.github.io/accessible-color-matrix/?n=white&amp;n=light&amp;n=bright&amp;n=medium&amp;n=gray&amp;n=black&amp;v=FFFFFF&amp;v=FFE7E7&amp;v=D33A2C&amp;v=811D15&amp;v=666666&amp;v=333333\">Atul Varma has built a similar tool</a> that uses a color picker instead of HSL range sliders. </p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d6b2578-422e-4ff0-bedb-5276f667a738/8-complete-guide-accessibility-tooling.PNG\" /></p>\n<p><a href=\"https://geenes.app/editor/user-interface\">Geenes</a> attempts to do it all by building out full tint/shade ranges for each color group you add, allowing you to <strong>design a full-color system</strong> instead of a limited palette. In addition to providing contrast ratios, Geenes also allows you to apply your palette to various mockups, and emulate different forms of color blindness. You can trial most features for free, and unlock multiple palettes with a donation.</p>\n<p>Certain tools can help you solve specific color-related accessibility issues. Buttons in particular can be tricky, as not only do you have to worry about the text color with the background color, you also need to consider the button background with the page background, and the focus outline color with both backgrounds. Stephanie Eckles’s project <a href=\"https://buttonbuddy.dev/\">ButtonBuddy</a> explains these requirements in simple language and helps you pick colors for these individual parts.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9192b432-fd58-44a4-aa5c-da6c96a0c3d7/18-complete-guide-accessibility-tooling.PNG\" /></p>\n<p>Some color combinations may technically meet contrast requirements when viewed by people without color blindness but could pose problems for specific kinds of color blindness and low vision. <a href=\"https://whocanuse.com/?b=040876&amp;c=fd4949&amp;f=20&amp;s=\">Who Can Use</a> applies a visual filter to <strong>emulate different types of color blindness</strong> and then calculates an approximate color contrast ratio. </p>\n<p>If you would like to test your color combinations in the context of an existing site, <a href=\"https://chrome.google.com/webstore/detail/stark/fkfaapnmfippddbeemjjbclenphooipm\">Stark</a> is a color picker extension for Chrome that lets you simulate certain kinds of color blindness. Additionally, <a href=\"https://webdesign.tutsplus.com/articles/designing-for-color-blindness-with-chrome-devtools--cms-35827\">Anna Monus</a> has created a helpful writeup of color blindness tools already built into Chrome. While this kind of emulation can never fully replace testing with real users, it can help us make better initial choices.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8816be8-61a2-4791-bd11-74f163c42f7c/6-complete-guide-accessibility-tooling.png\" /></p>\n<p>Sometimes as developers, we start working on a project where we may need to design as we go and begin writing code without a full, pre-established brand palette. Once development has started, it can be tedious to keep importing color palettes back and forth into external tooling. There are many options for <strong>checking color contrast within a code environment</strong>. <a href=\"https://github.com/Pushedskydiver/Colour-Contrast-CLI\">Alex Clapperton has developed a CLI tool</a> where you pass in two colors and it outputs the contrast ratio and passing standards right in the terminal. The BBC has published a <a href=\"https://github.com/bbc/color-contrast-checker\">JavaScript color contrast checker</a> that takes two colors and determines whether or not it meets your desired standard. A tool like this can live in your codebase with your tests, or be implemented in your design system library like Storybook, PatternLab, and so on.</p>\n<p><a href=\"https://dev.to/5t3ph/generate-accessible-ui-colors-with-a11y-color-tokens-28m1\">A11y Color Tokens</a> takes it a step further and lets you automatically <strong>generate complementary color tokens</strong> in CSS or SASS. You pass in a color and desired ratio to generate a shade or tint of that color that meets requirements. If you need to quickly check the contrast ratio of something, Chrome and Firefox now show the color contrast information within their respective developer tools color selectors as well. If none of these tools suit your fancy, Stephanie Walter has covered many other color-related tool options in <a href=\"https://stephaniewalter.design/blog/color-accessibility-tools-resources-to-design-inclusive-products/\">her blog post on color accessibility</a>.</p>\n<h4>Compatibility</h4>\n<p>Building for assistive technology can often add another level of complexity when it comes to debugging. Because assistive technology is essentially another layer of an interface on top of the browser, we now need to concern ourselves with combinations of browser and assistive technology. A bug may be present in either the browser or the assistive technology, or it may be present only in a particular combination. It’s a good idea to keep <a href=\"http://www.davidmacd.com/blog/bug-tracker-list.html\">this list of bug trackers</a> on hand when trying to fix a specific issue. Some of these are public so that you can see if others experience the bug you are having, but others only offer a means to report bugs in private.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/40771fad-6bce-473c-9201-59b56c701fc5/complete-guide-accessibility-tooling-10.PNG\" /></p>\n<p>Not all browsers and screen reader combinations work well together, and not all accessibility features are equally supported across browsers. These tools can help you check if you are experiencing a bug on a specific combination of devices. <a href=\"http://www.html5accessibility.com/\">HTML5 Accessibility</a> is a list of newer HTML features and whether or not the default browser implementation is <strong>accessibly supported</strong>. In a similar vein, <a href=\"https://a11ysupport.io/\">Accessibility Support</a> provides a list of ARIA roles and their support in the most popular browser and screen reader combinations.</p>\n<h4>Focus Management</h4>\n<p>Managing focus is a necessary but often difficult part of making complex applications accessible. We need to consider that the focus order is logical, that focus is moved around correctly on any custom components, and that each interactable element has a clear focus style.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4bedfd5c-f104-4954-bb46-62b644a93f37/7-complete-guide-accessibility-tooling.png\" /></p>\n<p>This <a href=\"https://labs.levelaccess.com/index.php/Focus_Order_Favlet\">bookmarklet by Level Access</a> <strong>labels every focusable element</strong> on the page, so that you can check that the focus order matches the reading order. For the Firefox users out there, <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector#show_web_page_tabbing_order\">Firefox’s Accessibility Inspector</a> has added this feature since version 84.</p>\n<p>In complex codebases, where different components or third-party code might be moving focus around unexpectedly, <a href=\"https://codepen.io/svinkle/pen/WgYRxq\">this little snippet</a> by Scott Vinkle can help you see what element currently has focus. If I’m struggling with the focus being moved around by other parts of my application, sometimes I also like to replace <code>console.log</code> with <code>console.trace</code> to determine exactly what function is moving the focus around.</p>\n<p>In order to test all focus styles on a web page, we can use <a href=\"https://codepen.io/scottohara/pen/QBwJyw?editors=0010\">Scott O’Hara’s script</a> as a starting point. Tabbing through every element can get cumbersome after a while, so a script to rotate through each element can help us make sure our focus styles look consistent and work within the context of the page.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0348cbf0-fdbb-4623-8ed9-2754cbd724e6/14-complete-guide-accessibility-tooling.PNG\" /></p>\n<p>Setting a positive tabindex to try and fix the focus order is a common accessibility gotcha. Elements that have a positive tabindex will force the browser to tab to them first. While this may not technically be an error, this is often unexpected and can cause more problems than it solves. Paul J. Adam’s <a href=\"https://pauljadam.com/bookmarklets/tabindex.html\">tabindex bookmarklet</a> allows you to highlight all elements that have the tabindex attribute applied.</p>\n<h4>Layout Usability</h4>\n<p>The document reading order can sometimes fall out of sync with what a viewer might expect if a layout relies too heavily on the CSS Grid or Flexbox order property. Adrian Roselli has coded up <a href=\"https://adrianroselli.com/2019/04/reading-order-bookmarklet.html\">a bookmarklet for keeping track of the reading order</a> to help you make sure your site passes the <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence.html\">meaningful sequence</a> guideline.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/91fe2000-e6cb-47ca-9065-eb39bea0ab15/15-complete-guide-accessibility-tooling.PNG\" /></p>\n<p>The WCAG contains a <a href=\"https://www.w3.org/TR/WCAG21/#text-spacing\">text spacing</a> criterion where all content should still work when certain text settings are applied. To test for this, Steve Faulkner has created <a href=\"https://cdpn.io/stevef/debug/YLMqbo\">a bookmarklet that automatically applies the required text spacing settings</a> to all the text on a page. Avoiding things like fixed heights and allowing for overflow not only makes your site more accessible, it ensures that whatever content you put into your site won’t break the layout, something your content editors will thank you for.</p>\n<p>Jared Smith built <a href=\"https://codepen.io/jared_w_smith/pen/vYGXeMy\">a bookmarklet to turn your cursor into a 44×44 pixel box</a> so that you can hover it over your controls to make sure that they meet the <strong>recommended target size criterion</strong>.</p>\n<h4>Linters</h4>\n<p>Linters are a class of tools that catch errors by scanning the source code before the application is run or built. By using linters, we can fix smaller bugs before we even run or build the code, saving valuable QA time later. </p>\n<p>Many developers already know and use ESLint in some capacity. Instead of learning new tooling, it’s possible to get a head start on your accessibility testing by including a new plugin into your existing workflow. <a href=\"https://github.com/jsx-eslint/eslint-plugin-jsx-a11y\">Eslint-plugin-jsx-a11y</a> is an ESLint plugin for your JSX elements, where any errors will be shown as you write your code. <a href=\"https://www.24a11y.com/2017/reacts-accessibility-code-linter/\">Scott Vinkle has written up a helpful guide</a> on setting it up.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7dd50a01-c38b-4b7b-9cbd-664a2b31447d/5-complete-guide-accessibility-tooling.png\" /></p>\n<p>Deque has come out with axe Linter, available as a <a href=\"https://github.com/marketplace/axe-linter\">Github app</a> or <a href=\"https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter\">VS Code Extension</a>. Axe Linter checks React, Vue, HTML and Markdown files against core rules without any configuration so it is easy to get up and running, although you are welcome to pass in your own options. One helpful feature is that it distinguishes between WCAG 2 and WCAG 2.1 which is useful if you are trying to meet a specific standard.</p>\n<h4>Markup</h4>\n<p>The web is built to be resilient. If you have broken markup, the browser will try its best to patch over any mistake. However, this can have unintended side effects, both from a styling perspective and an accessibility standpoint. Running your output through the <a href=\"https://validator.w3.org/\">W3C HTML validator</a> can help catch things like broken tags, attributes being applied to elements that shouldn’t have them, and other HTML errors. Deque has created a <a href=\"https://dequeuniversity.com/validator\">W3C HTML Validator bookmarklet</a> based on the same engine which lets you <strong>check the markup</strong> on localhost or password-protected pages that the regular validator cannot reach.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/14cbefec-c6a6-413b-a879-269cd4726086/complete-guide-accessibility-tooling-1.PNG\" /></p>\n<p>If you’re more of a visual person, Gaël Poupard’s project <a href=\"https://ffoodd.github.io/a11y.css/\">a11y.css</a> is a stylesheet that checks for possible risks within your markup. Available in both extension or bookmarklet format, you can customize the language as well as the level of advice displayed. In a similar vein, <a href=\"https://ryersondmp.github.io/sa11y/#install\">sa11y</a> is a tool that can be installed as a bookmarklet or integrated into your codebase. Sa11y is specifically designed for looking at the <strong>output of CMS content</strong>. It displays any warnings in non-technical language so that content editors can understand and make the necessary corrections.</p>\n<h4>Reading Level</h4>\n<p>An accessible site starts with accessible content. Cognitive accessibility has been a major focus of the ongoing WCAG 3 draft and is currently mentioned in <a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/meaning-supplements.html\">Success Criterion 3.1.5</a>, which suggests that authors aim for content to be understandable by a lower secondary (7-9th grade) reading level. </p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/859092f6-5c5d-43cb-941a-0747fa3eca23/9-complete-guide-accessibility-tooling.png\" /></p>\n<p>The <a href=\"https://hemingwayapp.com/\">Hemingway Editor</a> <strong>calculates the reading level</strong> of your content as you write it, so that you can edit to make sure it is easily understandable. The panel on the side offers suggestions for how you can improve your content to make it more readable. If your site has already been published, <a href=\"https://juicystudio.com/services/readability.php\">Juicy Studio has produced a readability tool</a> where you pass in a URL to the provided form and your site’s content is analyzed and graded using three different reading level algorithms. There is also a helpful explanation as to what each of these scores entails. However, one limitation of this particular tool is that it takes into account all the text rendered on the page, including things like navigation and footer text, which may skew the results.</p>\n<h4>Test Suites And Continuous Integration</h4>\n<p>The downside of most automated testing tools is that they require people to run them in the browser. If you are working on a single large codebase, you can incorporate accessibility testing into your existing testing process or as part of your continuous integration flow. When you write custom tests, you have an awareness of your application that automated testing tools don’t have, allowing you to perform customized, comprehensive testing in a more scalable way. </p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a7cd16e5-7229-4552-869c-2079e3ad84ec/3-complete-guide-accessibility-tooling.png\" /></p>\n<p>Once again, <a href=\"https://github.com/dequelabs/axe-core\">axe-core</a> pops up as an open-source library that frequently underpins most of these tools, so whether or not a tool works for you will likely be based on how well it integrates with your code rather than any differences in testing results. Marcy Sutton has published a <a href=\"https://www.deque.com/blog/writing-automated-tests-accessibility/\">framework-agnostic guide for getting started writing automated tests</a> for accessibility. She covers the difference between unit tests and integration tests and why you might want to choose one over the other in different scenarios. </p>\n<p>If you already have a test framework that you enjoy, there’s a high chance that there is already a <strong>library that incorporates axe-core</strong> into it. For example, <a href=\"https://www.deque.com/blog/how-to-test-for-accessibility-with-cypress/\">Josh McClure</a> has written up a guide that uses <a href=\"https://www.npmjs.com/package/cypress-axe\">cypress-axe</a>, and Nick Colley has produced a Jest flavored version in <a href=\"https://github.com/nickcolley/jest-axe\">jest-axe</a>.</p>\n<p><a href=\"https://github.com/pa11y/pa11y\">Pa11y</a> is a tool that provides a configurable interface around testing that is also available in a <a href=\"https://github.com/pa11y/pa11y-ci\">CI version</a> as well. Its many configuration options can let you solve complex issues that can come up with testing. For example, the actions feature lets you pass an array of actions before running the tests and can be useful for testing screens that require authentication before accessing the page. </p>\n<h4>User Preferences</h4>\n<p>There are many new media queries to help detect the user’s operating system and browser preferences. These days, developers are often detecting these settings in order to set the default for things like motion preferences and dark mode, but this may also lead to bugs that are difficult to reproduce if you do not have the same settings.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/712df638-e254-45ed-abf4-b6fa013e5631/11-complete-guide-accessibility-tooling.PNG\" /></p>\n<p><a href=\"https://magica11y.github.io/\">Magica11y</a> is a set of functions that lets you determine your users’ preferences. Send the documentation page to non-technical testers or incorporate these into your app so that you can reproduce your user’s environments more accurately.</p>\n<h3>Wrapping Up</h3>\n<p>It’s estimated that automated accessibility testing can only catch 30% of all accessibility errors. Even as tooling continues to improve, it will never replace including disabled people in your design and development process. A sustainable and holistic accessibility process might involve having the whole team use tooling to catch as many of these errors as possible early on in the process, instead of leaving it all for testers and disabled users to find and report these issues later.</p>\n<p>Need even more tooling? <a href=\"https://www.a11yproject.com/resources/#tools\">The A11y Project</a> and <a href=\"https://www.getstark.co/library/software-and-tools\">Stark</a> have curated lists of additional accessibility tools for both developers and users! Or feel free to leave any suggestions in the comments below, we’d love to hear what tools you incorporate into your workflow.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"8bdb840bc780a4afda68bad0878c798eb2db10488ab89d059652ae542ab263ac","category":"Tech"}