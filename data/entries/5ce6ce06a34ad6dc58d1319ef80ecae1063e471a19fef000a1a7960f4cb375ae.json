{"title":"Tips :: ทำการ wrap Error ในภาษา Go","link":"https://www.somkiat.cc/tips-wrap-error-in-go/","date":1720423917000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/go-errors-150x150.jpeg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/07/go-errors-150x150.jpeg 150w, https://www.somkiat.cc/wp-content/uploads/2024/07/go-errors-75x75.jpeg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/07/go-errors.jpeg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/go-errors-1024x576.jpeg\" width=\"589\" height=\"331\" /></a></figure>\n\n\n\n<p><strong>คำถามที่น่าสนใจเกี่ยวกับการจัดการ error ในภาษา Go</strong><br />ว่าถ้าต้องการโยน error หลายตัวกลับมาจาก function แบบง่าย ๆ<br />ทำแบบไหนได้บ้าง ?</p>\n\n\n\n<p>ก่อนหน้านี้แนะนำ <a href=\"https://www.somkiat.cc/go-multiple-error/\" target=\"_blank\">Multiple errors</a> ไปแล้ว ด้วย errors.Join()<br />มาดูอีกวิธีกันดู<br />เลือกเอาที่ความชอบไปเลย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>คำตอบ </strong><br />เป็นแนวทางที่ผมใช้บ่อย ๆ คือ<br />การ wrap error กลับมาแบบตัวอย่างใน code</p>\n\n\n\n[gist id=\"31fbcd47baf8f289bdf68728fbd845a6\" file=\"demo-error.go\"]\n\n\n\n<p><strong>คำอธิบาย</strong></p>\n\n\n\n<ul>\n<li>ทำการสร้าง error type ของแต่ละเรื่องขึ้นมาก่อน</li>\n\n\n\n<li>ใน function ทำการ return error กลับมา โดย wrap หรือห่อ error ต่าง ๆ ไว้ ผ่าน fmt.Errorf(\"%w\")</li>\n</ul>\n\n\n\n<p>จากนั้นทำการ run ดูผล</p>\n\n\n\n[gist id=\"31fbcd47baf8f289bdf68728fbd845a6\" file=\"1.txt\"]\n\n\n\n<p>เพียงเท่านี้ก็ส่งกลับมาแบบง่าย ๆ ได้แล้ว<br />ส่วนผู้ใช้งานก็ไปตรวจสอบ type กันเองด้วย errors.As() ต่อไปนั่นเอง</p>\n\n\n\n<p>ปล. errors.As() ใช้สำหรับการตรวจสอบ type ของ error เท่านั้น ไม่สนใจ value ของ error</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"5ce6ce06a34ad6dc58d1319ef80ecae1063e471a19fef000a1a7960f4cb375ae","category":"Thai"}