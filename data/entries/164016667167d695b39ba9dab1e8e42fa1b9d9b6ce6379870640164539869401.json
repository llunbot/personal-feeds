{"title":"ตัวอย่างการใช้งาน Coordinated Restore at Checkpoint (CRaC) ใน Spring Boot","link":"https://www.somkiat.cc/demo-spring-boot-and-crac/","date":1702183385000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/12/crac-150x150.png\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/12/crac-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2023/12/crac-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/12/crac.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/12/crac.png\" width=\"685\" height=\"398\" /></a></figure>\n\n\n\n<p>จาก blog เรื่อง <a href=\"https://www.somkiat.cc/project-crac-with-spring-framework/\" target=\"_blank\">ว่าด้วยเรื่อง Project CRaC กับ Spring framework</a><br />ยังขาดตัวอย่างการใช้งาน<br />จึงทำการสร้าง project ตัวอย่าง สำหรับการใช้งาน Spring Boot 3 กับ CRaC<br />เพื่อทำให้เห็นว่าเวลาในการ start up ดีขึ้นอย่างไรบ้าง<br />มาเริ่มกันเลย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>ขั้นตอนที่ 1 สร้าง Apache Maven project และเพิ่ม library crac ใน pom.xml </strong></p>\n\n\n\n[gist id=\"58c2e3821999a7378aea5e380fa1a1fb\" file=\"pom.xml\"]\n\n\n\n<p><strong>ขั้นตอนที่ 2 ตอนนี้ CRaC นั้นสนับสนุน Linux OS เท่านั้น และ JDK 17, 21 เท่านั้น</strong></p>\n\n\n\n<p>จึงใช้งาน docker มาช่วยจัดการ มีขั้นตอนดังนี้</p>\n\n\n\n<ul>\n<li>ทำการ <a href=\"https://www.azul.com/downloads/?package=jdk-crac#zulu\">Download JDK + CRaC</a> มาใช้งาน</li>\n\n\n\n<li>ทำการ build JAR file ของ Spring Boot project</li>\n\n\n\n<li>ทำการ build docker image และ container</li>\n\n\n\n<li>ในการ run java จะเพิ่ม parameter เพื่อสร้าง checkpoint ของการทำงานไว้คือ <strong>java -XX:CRaCCheckpointTo</strong></li>\n\n\n\n<li>จากนั้นทำการบันทึก checkpoint ไว้โดยทำการ commit container มาเป็น image (demo:checkpoint) เพื่อใช้ในการ start ครั้งต่อไป</li>\n</ul>\n\n\n\n<p><strong>Dockerfile เป็นดังนี้</strong></p>\n\n\n\n[gist id=\"58c2e3821999a7378aea5e380fa1a1fb\" file=\"Dockerfile\"]\n\n\n\n<p><strong>การทำการอยู่ในไฟล์ entrypoint.sh</strong></p>\n\n\n\n[gist id=\"58c2e3821999a7378aea5e380fa1a1fb\" file=\"entrypoint.sh\"]\n\n\n\n<p>จากนั้นทำการ run เพื่อสร้าง image ของการ checkpoint ไว้</p>\n\n\n\n[gist id=\"58c2e3821999a7378aea5e380fa1a1fb\" file=\"run.sh\"]\n\n\n\n<p><strong>ขั้นตอนที่ 3 ทำการ run container เพื่อดูผลจากการบันทึก checkpoint ด้วย CRaC</strong></p>\n\n\n\n[gist id=\"58c2e3821999a7378aea5e380fa1a1fb\" file=\"1.txt\"]\n\n\n\n<p>จะเห็นได้ว่า เวลาในการ start จะเร็วมาก ๆ<br />ปกติที่เครื่องจะใช้เวลา 0.6 วินาที แต่พอใช้ CRac จะเหลือเพียง 0.039</p>\n\n\n\n<p><strong>Reference Websites</strong></p>\n\n\n\n<ul>\n<li><a href=\"https://openjdk.org/projects/crac/\" target=\"_blank\">https://openjdk.org/projects/crac/</a></li>\n\n\n\n<li><a href=\"https://github.com/up1/demo-springboot-crac\" target=\"_blank\">https://github.com/up1/demo-springboot-crac</a></li>\n</ul>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"164016667167d695b39ba9dab1e8e42fa1b9d9b6ce6379870640164539869401","category":"Thai"}