{"title":"How To Use Artificial Intelligence And Machine Learning To Summarize Chat Conversations","link":"https://smashingmagazine.com/2023/07/artificial-intelligence-machine-learning-summarize-chat-conversations/","date":1690470000000,"content":"<p>As developers, we often deal with large volumes of text, and making sense of it can be a challenge. In many cases, we might only be interested in a summary of the text or a quick overview of its main points. This is where text summarization comes in.</p>\n<p>Text summarization is the process of automatically creating a shorter version of a text that preserves its key information. It has many applications in natural language processing (NLP), from summarizing news articles to generating abstracts for scientific papers. Even products, including Notion, are integrating AI features that will summarize a block of text on command.</p>\n<p><img src=\"https://files.smashing.media/articles/artificial-intelligence-machine-learning-summarize-chat-conversations/notion-ai-technology.png\" /></p>\n<p>One interesting use case is summarizing chat conversations, where the goal is to distill the main topics and ideas discussed during the conversation. That’s what we are going to explore in this article. Whether you’re an experienced developer or just getting started with natural language processing, this article will provide a practical guide to building a chat summarizer from scratch. By the end, you’ll have a working chat summarizer that you can use to extract the main ideas from your own chat conversations — or any other text data that you might encounter in your projects.</p>\n<p>The best part about all of this is that accessing and integrating these sorts of AI and NLP capabilities is easier than ever. Where something like this may have required workarounds and lots of dependencies in the not-so-distant past, there are APIs and existing models readily available that we can leverage. I think you may even be surprised by how few steps there are to pull off this demo of a tool that summarizes chat conversations.</p>\nCohere: Chat Summarization Made Easy\n<p><a href=\"https://cohere.com/\">Cohere</a> is a cloud-based natural language processing platform that enables developers to build sophisticated language models without requiring deep expertise in machine learning. It offers a range of powerful tools for text classification, entity extraction, sentiment analysis, and more. One of its most popular features is chat summarization, which can automatically generate a summary of a conversation.</p>\n<p>Using <a href=\"https://docs.cohere.com/reference/about\">Cohere API</a> for chat summarization is a simple and effective way to summarize chat conversations. It requires only a few lines of code to be implemented and can be used to summarize any chat conversation in real-time.</p>\n<p>The chat summarization function of Cohere works by using natural language processing algorithms to analyze the text of the conversation. These algorithms identify important sentences and phrases, along with contextual information like speaker identity, timestamps, and sentiment. The output is a brief summary of the conversation that includes essential information and main points.</p>\nUsing The Cohere API For Chat Summarization\n<p>Now that we have a basic understanding of Cohere API and its capabilities, let’s dive into how we can use it to generate chat summaries. In this section, we will discuss the step-by-step process of generating chat summaries using Cohere API.</p>\n<p>To get started with the Cohere API, first, you’ll need to <a href=\"https://cohere.com\">sign up for an API key on the </a><a href=\"https://cohere.com\">Cohere</a><a href=\"https://cohere.com\"> website</a>. Once you have an API key, you can install the Cohere Python package using <a href=\"https://pypi.org/project/pip/\">pip</a>:</p>\n<pre><code>\npip install cohere\n</code></pre>\n\n<p>Next, you’ll need to initialize the cohere client by providing the API key:</p>\n<pre><code>import cohere\n\n# initialize Cohere client\nco = cohere.Client(\"YOUR_API_KEY\")\n</code></pre>\n\n<p>Once the client is initialized, we can provide input for the summary. In the case of chat summarization, we need to provide the conversation as input. Here’s how you can provide input for the summary:</p>\n<pre><code>conversation = \"\"\"\nSenior Dev: Hey, have you seen the latest pull request for the authentication module?\nJunior Dev: No, not yet. What’s in it?\nSenior Dev: They’ve added support for JWT tokens, so we can use that instead of session cookies for authentication.\nJunior Dev: Oh, that’s great. I’ve been wanting to switch to JWT for a while now.\nSenior Dev: Yeah, it’s definitely more secure and scalable. I’ve reviewed the code and it looks good, so go ahead and merge it if you’re comfortable with it.\nJunior Dev: Will do, thanks for the heads-up!\n\"\"\"\n</code></pre>\n\n<p>Now that we provided the input, we can generate the summary using the co.summarize() method. We can also specify the parameters for the summary, such as the model, length, and extractiveness ( . Here’s how you can generate the summary:</p>\n<pre><code>response = co.summarize(conversation, model = 'summarize-xlarge', length = 'short', extractiveness = 'high', temperature = 0.5,)summary = response.summary\n</code></pre>\n\n<p>Finally, we can output the summary using print() or any other method of our choice. Here’s how you can output the summary</p>\n<pre><code>print(summary)\n</code></pre>\n\n<p>And that’s it! With these simple steps, we can generate chat summaries using Cohere API. In the next section, we will discuss how we can deploy the chat summarizer using Gradio.</p>\nDeploying The Chat Summarizer To Gradio\n<p>Gradio is a user interface library for quickly prototyping machine learning (ML) models. By deploying our chat summarizer model in Gradio, we can create a simple and intuitive interface that anyone can use to summarize conversations.</p>\n<p>To get started, we need to import the necessary libraries:</p>\n<pre><code>import gradio as gr\nimport cohere\n</code></pre>\n\n<p>If you don't have Gradio installed on your machine yet, don't worry! You can easily install it using pip. Open up your terminal or command prompt and enter the following command:</p>\n<pre><code>!pip install gradio\n</code></pre>\n\n<p>This will install the latest version of Gradio and any dependencies that it requires. Once you’ve installed Gradio, you’re ready to start building your own machine learning-powered user interfaces.</p>\n<p>Next, we need to initialize the Cohere client. This is done using the following line of code:</p>\n<pre><code>co = cohere.Client(\"YOUR API KEY\")\n</code></pre>\n\n<p>The Client object allows us to interact with the CoHere API, and the API key is passed as an argument to authenticate the client.Now we can define the chat summarizer function:</p>\n<pre><code>def chat_summarizer(conversation):\n    # generate summary using Cohere API\nresponse = co.summarize(conversation, model = 'summarize-xlarge', length = 'short', extractiveness = 'high', temperature = 0.5)\nsummary = response.summary\n\nreturn summary\n</code></pre>\n\n<p>The chat_summarizer function takes the conversation text as input and generates a summary using the Cohere API. We pass the conversation text to the co.summarize method, along with the parameters that specify the model to use and the length and extractiveness of the summary.</p>\n<p>Finally, we can create the Gradio interface using the following code:</p>\n<pre><code>chat_input = gr.inputs.Textbox(lines = 10, label = \"Conversation\")\nchat_output = gr.outputs.Textbox(label = \"Summary\")\n\nchat_interface = gr.Interface(\n  fn = chat_summarizer,\n  inputs = chat_input,\n  outputs = chat_output,\n  title = \"Chat Summarizer\",\n  description = \"This app generates a summary of a chat conversation using Cohere API.\"\n)\n</code></pre>\n\n<p>The <code>gr.inputs.textbox</code> and <code>gr.outputs.textbox</code> objects define the input and output fields of the interface, respectively. We pass these objects, along with the <code>chat_summarizer</code> function, to the <code>gr.Interface</code> constructor to create the interface. We also provide a title and description for the interface.</p>\n<p>To launch the interface, we call the launch method on the interface object:</p>\n<pre><code>chat_interface.launch()</code></pre>\n\n<p>This will launch a webpage with our interface where users can enter their dialogue and generate a summary with a single click.</p>\n<ul>\n<li><a href=\"https://huggingface.co/spaces/Pontonkid/Chat_summarizer\">Live Demo</a></li>\n</ul>\nConclusion\n<p>In today’s fast-paced digital world, where communication happens mostly through chat, chat summarization plays a vital role in saving time and improving productivity. The ability to quickly and accurately summarize lengthy chat conversations can help individuals and businesses make informed decisions and avoid misunderstandings.</p>\n<p>Imagine using it to summarize a chain of email replies, saving you time from having to untangle the conversation yourself. Or perhaps you’re reviewing a particularly dense webpage of content, and the summarizer can help distill the essential points.</p>\n<p>With the help of advanced AI and NLP techniques, summarization features have become more accurate and efficient than ever before. So, if you haven't tried summarizing yet, I highly encourage you to give it a try and share your feedback. It could be a game-changer in your daily communication routine.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"8a230d33602139414f06e4187addf236d707cbfda3cf4b51b8ad4224297bd7fa","category":"Tech"}