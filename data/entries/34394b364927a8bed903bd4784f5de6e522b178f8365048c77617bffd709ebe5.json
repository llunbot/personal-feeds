{"title":"Announcing CDK for Terraform 0.5","link":"https://www.hashicorp.com/blog/announcing-cdk-for-terraform-0-5","date":1627574400000,"content":"<p>We are excited to announce the release of a cloud development kit (CDK) for Terraform 0.5. <a href=\"https://github.com/hashicorp/terraform-cdk\">CDK for Terraform</a> provides the ability to write HashiCorp Terraform configurations in C#, Python, TypeScript, and Java using all existing Terraform providers and Terraform modules.</p>\n<p>Key improvements in 0.5 include:</p>\n<ul>\n<li><strong>Convert</strong>: The ability to convert existing HCL Terraform configurations to C#, Python, TypeScript, and Java.</li>\n<li><strong>Watch</strong>: A new experimental <code>watch</code> workflow designed for serverless workflows that require rapid iteration in production-like environments.</li>\n</ul>\n<p>We’ll be hosting <a href=\"https://youtu.be/4caW8WJM4h4\">CDK for Terraform Community Office Hours</a> at 1 p.m. PT on Thursday, July 29, where the engineering team will be available to answer questions about CDK for Terraform 0.5.</p>\n<h2><a href=\"#convert-hcl-terraform-configurations\">»</a><a></a>Convert HCL Terraform Configurations</h2>\n<p>The new <code>convert</code> command automatically translates HCL configuration to CDK’s supported languages.</p>\n<p>Since CDK for Terraform internally uses Terraform Core, it’s compatible with all existing Terraform <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/docs/working-with-cdk-for-terraform/using-providers-and-modules.md\">providers and modules</a>, and the Terraform Registry provides a huge library of providers and modules, including copy-pasteable examples of nearly all resources across more than 1,000 providers.</p>\n<p>However, these resource examples are in HCL. For many Terraform users, copying examples is a common starting point. To use those examples in other languages via CDK for Terraform, you would have to mentally translate them to the equivalent TypeScript, Python, and other supported languages, which can be slow. The new <code>cdktf convert</code> command automates this translation to make it easier to apply the existing library of HCL Terraform content to CDK for Terraform.</p><p>Here is a simple macOS workflow that shows how to use example code from the Terraform Registry using the <code>pbcopy</code> and <code>pbpaste</code> commands: Copy the HCL example from the Terraform Registry, then run <code>pbpaste | cdktf convert --language python | pbcopy</code> on a macOS terminal. This will convert the example to Python, then copy it again so you can paste it into an editor.</p>\n<p>CDK for Terraform 0.5 also introduces the ability to convert full projects from HCL to TypeScript; support for full project conversion to other languages will be added in future releases. To create a new CDK for Terraform configuration by converting an existing HCL Terraform codebase, run:</p><pre><code>cdktf init --template=\"typescript\" --from-terraform-project /path/to/terraform/project</code></pre><p>See the <code>cdktf convert</code> <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/docs/cli-commands.md#cdktf-convert\">documentation for more information</a>, and read about our <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/packages/@cdktf/hcl2cdk/README.md#known-limitations\">known limitations</a>. We’re very interested in your practical experiences. Please <a href=\"https://github.com/hashicorp/terraform-cdk/issues\">file GitHub issues</a> and enhancement requests!</p>\n<h2><a href=\"#watch-workflow\">»</a><a></a>Watch Workflow</h2>\n<p><code>cdktf watch</code> is a new, experimental workflow introduced in CDK for Terraform 0.5 that deploys changes and shows diffs as you edit code.</p>\n<p>We added this feature after using CDK for Terraform to build and deploy serverless applications, when we found ourselves wanting to continually redeploy in a production-like environment. This feature is intended to be used in a production-like development environment, and works in all supported languages.</p>\n<p>As you edit code, CDK for Terraform watches for changes, synthesizes and applies changes, and continuously shows either changes or errors. The <code>cdktf watch</code> command is the first step toward a faster iterative development process for CDK for Terraform users.</p><p>See the <code>cdktf watch</code> documentation for more information on how to use this feature.</p>\n<p>CDK for Terraform 0.5 also includes bug fixes. The <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/CHANGELOG.md\">CDK for Terraform changelog</a> contains a comprehensive list of enhancements and bug fixes.</p>\n<h2><a href=\"#try-cdk-for-terraform\">»</a><a></a>Try CDK for Terraform</h2>\n<p>The <a href=\"https://learn.hashicorp.com/tutorials/terraform/cdktf\">CDK for Terraform Learn Guide</a> is the best way to get started. Once you’ve completed that, check out our <a href=\"https://github.com/hashicorp/terraform-cdk/tree/main/docs/working-with-cdk-for-terraform\">documentation</a> and <a href=\"https://github.com/hashicorp/terraform-cdk/tree/main/examples\">language-specific examples</a>.</p>\n<p>Whether you’re experimenting or actively using CDK for Terraform, we’d love to hear from you. Please drop notes in the <a href=\"https://discuss.hashicorp.com/c/terraform-core/cdk-for-terraform/47\">discussion forum</a>, and report any issues you encounter in <a href=\"https://github.com/hashicorp/terraform-cdk/issues/new/choose\">our issue tracker</a>. We’re particularly looking for feedback on the new, <a href=\"https://www.hashicorp.com/blog/announcing-cdk-for-terraform-0-4\">experimental Go support</a>, so please reach out.</p>","author":"Daniel Dreier","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"34394b364927a8bed903bd4784f5de6e522b178f8365048c77617bffd709ebe5","category":"Tech"}