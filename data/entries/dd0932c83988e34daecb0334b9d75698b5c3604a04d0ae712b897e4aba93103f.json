{"title":"How GoDaddy Implemented a Multi-Region Event-Driven Platform at Scale","link":"https://aws.amazon.com/blogs/aws/how-godaddy-implemented-a-multi-region-event-driven-platform-at-scale/","date":1686936137000,"content":"<p><a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a>, a leading global provider of domain registration and web hosting services, has served over 84 million domains and 22 million customers since its establishment in 1997. Among its various internal systems, the Customer Signal Platform provides tooling to capture, analyze, and act on customer and product data to drive better business outcomes. With this platform, GoDaddy can track user visits and interactions on its website and use meaningful event data to improve its customer experience and overall business performance.</p> \n<p>Nowadays, the Customer Signal Platform processes 400 million events every day. As GoDaddy expands its integrations, it aims to increase this number to 2 billion events per day in the near future.</p> \n<p>When building the Customer Signal Platform, GoDaddy had three main requirements for the system architecture:</p> \n<ol> \n <li>Minimize their operational load.</li> \n <li>Scale automatically as traffic changes.</li> \n <li>Provide high availability and ensure that all the customer signals are captured.</li> \n</ol> \n<p><span><strong>Amazon EventBridge Event Bus<br /> </strong></span>After evaluating many options against their requirements, GoDaddy decided to implement the customer signal platform using <a href=\"https://aws.amazon.com/eventbridge/event-bus/\" target=\"_blank\">Amazon EventBridge Event Bus</a>. EventBridge Event Bus is a serverless event bus that helps you receive, filter, transform, route, and deliver events. Because EventBridge is serverless, it requires minimal configuration to get started and scales automatically—GoDaddy’s first two requirements were checked.</p> \n<p>To comply with the third requirement, the solution needed to provide business continuity and ensure that no event is lost from the moment the client produces it until it gets to the platform to be analyzed. EventBridge Event Bus comes with many features that helped GoDaddy build their application with this requirement in mind.</p> \n<p>The main feature that GoDaddy took advantage of was global endpoints. EventBridge global endpoints provide a reliable and simple way to improve the business continuity of event-driven applications. <a href=\"https://aws.amazon.com/blogs/compute/introducing-global-endpoints-for-amazon-eventbridge/\" target=\"_blank\">This new feature, added in 2022</a>, allows customers to build a multi-Region event-driven application.</p> \n<p><span><strong>EventBridge Global Endpoints<br /> </strong></span>Global endpoints allow you to configure a managed DNS endpoint in EventBridge, to which your applications will send events. Then you need to configure two custom event buses in two distinct AWS Regions. One is the primary Region, and the other is the failover, or secondary Region. The failover of events is decided based on the health indicated by an <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/health-checks-types.html\">Amazon Route 53 health check</a>. When the health check is healthy, the events are routed from the global endpoint to the custom event bus in the primary Region. And if the health check is unhealthy, then the global endpoint will send the events to the event bus in the secondary Region.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/30/04-healthcheck.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/30/04-healthcheck-1024x198.png\" alt=\"Healthcheck status\" width=\"1024\" height=\"198\" /></a></p> \n<p>The simplest configuration for global endpoints is the active/archive configuration. This configuration provides business continuity and simplicity at the same time. The active/archive configuration defines two different Regions. The primary Region is where the application is deployed and all the business processes are happening. The archive Region is where only a custom bus is deployed and all the events are archived.</p> \n<p>In addition, there is a bidirectional replication rule between the buses in separate Regions. In the normal case, when there are no errors, whenever an event arrives at the custom bus in the primary Region, the event is automatically replicated to the archive custom bus in the secondary Region.</p> \n<p>In the case of failover, the global endpoint redirects the events to the secondary Region, where they get archived for processing at another time.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/30/02-active-archive.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/30/02-active-archive-1024x498.png\" alt=\"Active/ Archive configuration\" width=\"1024\" height=\"498\" /></a></p> \n<p><span><strong>GoDaddy Implementation of Global Endpoints<br /> </strong></span>GoDaddy was looking for a solution that minimized their operations load while still providing business continuity, and that is why they adopted global endpoints and the active/archive configuration. In this way, they could have the event processing logic in their primary Region and have a secondary Region in case of any issues.</p> \n<p>In their configuration, events are archived in the secondary Region for 30 days, after which the events expire. In the case of a failover, because they don’t need to process the events in real time, they collect them in the archive. If the issue is resolved within 24 hours, the retention period for the replication rule, the events are sent automatically to the primary Region. If the issue is solved in more than 24 hours the events need to be replayed to the primary Region.</p> \n<p>The following image shows what their current solution looks like. They are working with two Regions. US West (Oregon) is their primary Region and is the location of the data lake, which is the primary consumer of the events. US East (N. Virginia) is the secondary Region. Events are being produced in different clients; from the clients, they are sent to <a href=\"https://aws.amazon.com/api-gateway/\">Amazon API Gateway</a>. GoDaddy deployed two API Gateways in their two Regions. The events are sent to the API Gateway with the smallest latency from the client. To do that, they use <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-latency.html\" target=\"_blank\">latency-based routing</a> provided by Amazon Route 53. Then events are sent to an <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> function that validates the events and forwards them to the EventBridge global endpoint at the DNS level.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/30/03-goddady-arch.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/30/03-goddady-arch-1024x576.png\" alt=\"GoDaddy architecture\" width=\"1024\" height=\"576\" /></a></p> \n<p>The global endpoint is configured with the active/archive setup, and the failover is configured to be triggered via a Route 53 health check that monitors an <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> alarm. That alarm observes the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-monitoring.html\" target=\"_blank\">IngestionToInvocationStartLatency</a> metric in the primary Region.</p> \n<p>IngestionToInvocationStartLatency is a service-level metric that exposes the time to process events from the point at which they are ingested by EventBridge to the point the first invocation of a target in the configured rules is made. This metric is measured across all the rules in your bus and provides an indication of the health of the EventBridge service. Any extended periods of high latency over 30 seconds indicate a service disruption.</p> \n<p>When the system is in the normal state, the events are forwarded from the global endpoint to the custom ingress event bus in the primary Region. That custom event bus has replication enabled; this means that all the events that arrive at the bus get replicated automatically in the secondary Region custom ingress event bus.</p> \n<p>All the events received by the ingress event bus are sent to the enrichment function. This function performs basic validation and authentication, and it enriches the event data to make sure that all the events from different clients are standard.</p> \n<p>From there, the events are forwarded to the data platform event bus to be sent to the different consumer targets. The main target is their data lake solution, which analyzes all the events.</p> \n<p><span><strong>What Was the Impact?<br /> </strong></span>For GoDaddy, business continuity is important, and their customer signals are not getting lost due to any issue with their platform. This makes them confident that they can expand their customer signal platforms from 400 million events per day to 2 billion events per day without introducing any additional operations overhead.</p> \n<p>Now, they can confidently process hundreds of millions of events per day to their system, and they can keep on growing. The following image shows the number of events ingested by global endpoints in a normal day.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/30/05-events-ingested.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/30/05-events-ingested.png\" alt=\"Events ingested\" width=\"793\" height=\"293\" /></a></p> \n<p>While GoDaddy’s use of the active/archive pattern enables them to ensure they never lose any events, they’re already starting to see certain use cases where they want to minimize any delays in processing their events, even when service disruptions occur. Because they’re already replicating their events to a secondary Region, they can deploy their most critical consumers to both Regions and enable an <a href=\"https://aws.amazon.com/blogs/compute/introducing-global-endpoints-for-amazon-eventbridge/\" target=\"_blank\">active/active</a> configuration for their mission-critical systems. Active/active configuration allows you to process parallel events in both the primary and secondary Regions, simplifying the processing of events even during disruptions and enabling business continuity.</p> \n<p>The vision when building the Customer Signal Platform was to align with GoDaddy’s high bar for reliability, scalability, and maintainability and, at the same time, keep the platform self-service so that developers can focus on business needs. This led GoDaddy to choose Amazon EventBridge global endpoints and serverless technologies to build this solution.</p> \n<p>GoDaddy Customer Signal Platform is an excellent example of what serverless technologies enable. By leveraging the cloud to handle as much of the undifferentiated heavy lifting as possible, GoDaddy has reduced the operational complexity of setting up an event bus for a multi-Region strategy, implemented failover mechanisms in the case of Regional distruptions, and ensured that events are not lost by enabling replication. Global endpoints active/archive configuration improves the availability of customer applications with the least amount of configuration changes.</p> \n<p>If you want to get started with EventBridge global endpoints, you can check out <a href=\"https://youtu.be/NNTsOKuPlTQ\" target=\"_blank\">this talk on event-driven applications</a>. For a working demo on how to use EventBridge global endpoints for failover events, check out <a href=\"https://serverlessland.com/repos/amazon-eventbridge-global-endpoints-demo\" target=\"_blank\">this Serverless Land repository</a>.</p> \n<p>— <a href=\"https://twitter.com/mavi888uy\" target=\"_blank\">Marcia</a></p>","author":"Marcia Villalba","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"dd0932c83988e34daecb0334b9d75698b5c3604a04d0ae712b897e4aba93103f","category":"Tech"}