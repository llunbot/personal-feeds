{"title":"Switching It Up With HTML’s Latest Control","link":"https://smashingmagazine.com/2024/05/switching-it-up-html-latest-control/","date":1716552000000,"content":"<p>The web is no stranger to taking HTML elements and transforming them to look, act, and feel like something completely different. A common example of this is the switch, or toggle, component. We would hide a checkbox beneath several layers of styles, define the ARIA role as “switch,” and then ship. However, this approach posed certain usability issues around indeterminate states and always felt rather icky. After all, as the saying goes, <em>the best ARIA is no ARIA</em>.</p>\n<p>Well, there is new hope for a native HTML switch to catch on.</p>\n<p>Safari Technology Preview (TP) 185 and Safari 17.4 released with an under-the-radar feature, a <a href=\"https://webkit.org/blog/15054/an-html-switch-control/\">native HTML switch control</a>. It evolves from <a href=\"https://www.wufoo.com/guides/custom-radio-buttons-and-checkboxes/\">the hidden-checkbox approach</a> and aims to make the accessibility and usability of the control more consistent.</p>\n<div>\n<pre><code>&lt;!-- This will render a native checkbox --//&gt;\n&lt;input type=\"checkbox\" /&gt;\n\n&lt;!-- Add the <code>switch</code> attribute to render a switch element --//&gt;\n&lt;input type=\"checkbox\" switch /&gt;\n&lt;input type=\"checkbox\" checked switch /&gt;\n</code></pre>\n</div>\n\n<p><img src=\"https://files.smashing.media/articles/switching-it-up-html-latest-control/1-accessibility-settings-switch-control.png\" /></p>\n<p>Communication is one aspect of the control’s accessibility. Earlier in 2024, there were issues where the <a href=\"https://front-end.social/@alvaromontoro/111763578202895753\">switch would not adjust to page zoom levels properly</a>, leading to poor or broken visibility of the control. However, at the time I am writing this, Safari looks to have resolved these issues. Zooming retains the visual cohesion of the switch.</p>\n<p>The <code>switch</code> attribute seems to take accessibility needs into consideration. However, this doesn’t prevent us from using it in inaccessible and unusable ways. As mentioned, mixing the <code>required</code> and <code>indeterminate</code> properties between switches and checkboxes can cause unexpected behavior for people trying to navigate the controls. Once again, Adrian sums things up nicely:</p>\n<blockquote>“The <code>switch</code> role does not allow mixed states. Ensure your switch never gets set to a mixed state; otherwise, well, problems.”<br /><br />— Adrian Roselli</blockquote>\n\n\n\n<h3>Internationalization (I18N): Which Way Is On?</h3>\n<p>Beyond the accessibility of the switch control, what happens when the switch interacts with different writing modes?</p>\n<p>When creating the switch, we had to ensure the use of logical CSS to support different writing modes and directions. This is because a switch being in its right-most position (or inline ending edge) doesn’t mean “on” in some environments. In some languages — e.g., those that are written right-to-left — the left-most position (or inline starting edge) on the switch would likely imply the “on” state.</p>\n<p>While we should be writing logical CSS by default now, the new switch control removes that need. This is because the control will adapt to its nearest <code>writing-mode</code> and <code>direction</code> properties. This means that in left-to-right environments, the switch’s right-most position will be its “on” state, and in right-to-left environments, its left-most position will be the “on” state.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/YzbWdGv\">Safari Switch Control - Styling [forked]</a> by <a href=\"https://codepen.io/DanielYuschick\">@DanielYuschick</a>.</p>\nFinal Thoughts\n<p>As we continue to push the web forward, it’s natural for our tools to evolve alongside us. The switch control is a welcome addition to HTML for eliminating the checkbox hacks we’ve been resorting to for years.</p>\n<p>That said, combining the checkbox and switch into a single input, while being convenient, does raise some concerns about potential markup combinations. Despite this, I believe this can ultimately be resolved with linters or by the browsers themselves under the hood. </p>\n<p>Ultimately, <strong>having a native approach to switch components can make the accessibility and usability of the control far more consistent</strong> — assuming it’s ever supported and adopted for widespread use.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"72a2da71f13201f1c9dbac9e0561b87b29543c962ecb3bbfc75684fe69fd0ef5","category":"Tech"}