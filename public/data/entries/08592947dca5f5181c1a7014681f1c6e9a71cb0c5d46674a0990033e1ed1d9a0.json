{"title":"Boundary KMS (Key Management Service) Root Key Migration","link":"https://www.hashicorp.com/blog/boundary-kms-key-management-service-root-key-migration","date":1674666000000,"content":"<p>HashiCorp Boundary 0.11.1 includes two important new features: <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/security/data-encryption#key-version-lifecycle-management\">KMS key lifecycle management</a>, which enables rotation of internal keys, and the <code><a href=\"https://developer.hashicorp.com/boundary/docs/concepts/security/data-encryption#the-previous-root-kms-key-oss-only\">previous-root KMS key purpose</a></code>, which allows teams to specify a KMS root key used only for decryption. As we dive deeper into each of these features, you will also learn a bit more about how encryption works in Boundary.</p>\n<h2><a href=\"#kms-providers\">»</a><a></a>KMS Providers</h2>\n<p>When you configure your Boundary controller, you have to pick a KMS provider. Boundary supports <a href=\"https://developer.hashicorp.com/boundary/docs/configuration/kms\">many different</a> KMS providers, including <a href=\"https://aws.amazon.com/kms/\">AWS KMS</a>, <a href=\"https://azure.microsoft.com/en-us/products/key-vault\">Azure Key Vault</a>, <a href=\"https://cloud.google.com/security-key-management\">GCP Cloud KMS</a>, and of course <a href=\"https://www.vaultproject.io/\">HashiCorp Vault</a>. The KMS provider provides the root of trust for the keys used for various encryption operations inside Boundary, like encrypting sensitive/secret data stored in the Boundary database, or encrypting the data used to authenticate a KMS worker to a controller.</p>\n<p>In addition to choosing a provider, the Boundary KMS subsystem requires you to assign a <em>purpose</em> to a KMS stanza. The currently supported purposes for external KMS providers are:</p>\n<ul>\n<li> <code>worker-auth</code></li>\n<li> <code>worker-auth-storage</code></li>\n<li> <code>root</code></li>\n<li> <code>previous-root</code></li>\n<li> <code>recovery</code></li>\n<li> <code>config</code></li>\n</ul>\n<p>This post will explore the <code>root</code> and <code>previous-root</code> purposes. If you want to learn about the other purposes, please consult the full <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/security/data-encryption\">Boundary data security documentation</a>. The <code>root</code> purpose defines the KMS provider that is used for the root key in Boundary.</p>\n<h2><a href=\"#keks-deks-and-key-versions\">»</a><a></a>KEKs, DEKs, and Key Versions</h2>\n<p>The root key provides the root of trust for all <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/domain-model/scopes\">scope</a>-specific encrypted data in the Boundary database. This works by having several layers of encryption that all link back to the root key. Whenever you create a new scope, Boundary immediately creates one key-encryption-key (KEK), several data-encryption-keys (DEKs), and a new key version for each of the keys. The key version holds the <a href=\"https://csrc.nist.gov/glossary/term/keying_material\">keying material</a> for the key. Using key versions allows you to rotate keying material, while retaining the same key resource. More on that later.</p><img src=\"https://www.datocms-assets.com/2885/1674600406-boundary-kms.png\" alt=\"Boundary\" /><p>DEKs are used to encrypt sensitive/secret application data in the database. Boundary encrypts the scope DEKs with the scope KEK, and then encrypts the scope KEK with the root key.This way, only the root of trust (the root key) can be used to decrypt the data in the database, since you need to decrypt the KEK first, which can then be used to decrypt the DEKs, which in turn can be used to decrypt the application data.</p>\n<h2><a href=\"#rotating-keys\">»</a><a></a>Rotating Keys</h2>\n<p>One of the features introduced with the KMS key lifecycle management in version 0.11.1 is the ability to <em>rotate</em> keys in a scope. When rotating the keys, Boundary simply creates a new key version for the KEK and all DEKs in the specified scope. These new key versions will be used for future encryption operations, while the older key versions may still be used for decrypting existing data in the database. It is considered a best practice to regularly rotate encryption keys to lessen the impact of key compromise, among other factors.</p>\n<p>In addition to creating a new key version for all keys in the scope, you can optionally use the rotate key command to <em>rewrap</em> existing key versions with the new KEK version. This means that in addition to encrypting the new DEK versions with the new KEK version, existing DEK versions get re-encrypted with the new KEK version. This leaves all DEK versions, both new and old, encrypted using the new KEK version. This is very useful when you want to stop using an old KEK version.</p>\n<h2><a href=\"#kms-root-key-migration\">»</a><a></a>KMS Root Key Migration</h2>\n<p>There are many reasons to consider migrating from one root key to another. Perhaps the old AWS KMS configuration was set up with an account that you no longer want to use, or you want to migrate to a new KMS provider completely (perhaps selecting a cloud agnostic solution like <a href=\"https://www.vaultproject.io/\">Vault</a>?). Before the 0.11.1 release, it was not possible to migrate KMS providers, but now you have all the puzzle pieces in place to perform a migration.</p>\n<p>The first step is to update the existing <code>root</code> purpose KMS stanza to <code>previous-root</code>. This tells Boundary to use this KMS-provided key for decrypting the existing data in the database. For example, here’s what it could look like if you were using an AEAD KMS provider:</p>\n<pre><code> kms <span>\"aead\"</span> {\n<span>-  purpose   = \"root\"</span>\n<span>+  purpose   = \"previous-root\"</span>\n   aead_type = <span>\"aes-gcm\"</span>\n   key   \t = <span>\"sP1fnF5Xz85RrXyELHFeZg9Ad2qt4Z4bgNHVGtD6ung=\"</span>\n   key_id\t = <span>\"global_root\"</span>\n}\n</code></pre>\n<p>Next, you add a new <code>root</code> purpose KMS stanza with the new KMS provider configuration and restart the controller. Boundary will immediately start using the new KMS provider for any scopes that are created after the controller is restarted, but the old scopes will still contain KEKs that are encrypted with the previous root key.</p>\n<pre><code><span>+kms \"aead\" {</span>\n<span>+  purpose   = \"root\"</span>\n<span>+  aead_type = \"aes-gcm\"</span>\n<span>+  key   \t = \"sF1fnF5Xz85RrXyELHFeZg9Ad2qt4Z4bgNHVGtD6ung=\"</span>\n<span>+  key_id\t = \"new_global_root\"</span>\n<span>+}</span>\n<span>+</span>\n</code></pre>\n<p>To fix this, you simply rotate the keys in all the old scopes, making sure to specify the rewrap option, which will ensure that all the KEKs are encrypted with the new root key.</p>\n<pre><code>$ boundary scopes rotate-keys -scope-id global -rewrap\n$ boundary scopes rotate-keys -scope-id o_B4jfDjZ9jf -rewrap\n$ boundary scopes rotate-keys -scope-id p_A4jfDjZ9jf -rewrap\n</code></pre>\n<p>If you want to, you can now remove the <code>previous-root</code> purpose KMS stanza from the configuration file and restart Boundary again. You will know immediately if the operation was successful, as there will be no decryption errors in the log. You’ve successfully migrated from one KMS provider to another, while learning more about how encryption works in Boundary.</p>\n<h2><a href=\"#next-steps\">»</a><a></a>Next Steps</h2>\n<p>To learn more about how to get started with Boundary please visit our <a href=\"https://developer.hashicorp.com/boundary/tutorials/oss-getting-started\">OSS Quick Start Guide</a> for step-by-step tutorials.</p>","author":"Johan Brandhorst-Satzkorn","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"08592947dca5f5181c1a7014681f1c6e9a71cb0c5d46674a0990033e1ed1d9a0","category":"Tech"}