{"title":"แนวคิดการสร้างระบบ Ranking ของ Reddit","link":"https://www.somkiat.cc/note-ranking-system-from-reddit/","date":1679974976000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/reddit-01-150x150.jpg\" alt srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/03/reddit-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2023/03/reddit-01-75x75.jpg 75w\" /></p>\n<p>จากเหตุการณ์ที่ระบบ Reddit ล่มจากการ upgrade Kubernetes นั้น<br />ก็ไปเจอการอธิบายเรื่อง<strong><a href=\"https://www.reddit.com/r/RedditEng/comments/z137m3/from_service_to_platform_a_ranking_system_in_go/\" target=\"_blank\">การสร้าง platform ของระบบ Ranking</a></strong><br />หรือระบบแนะนำ post ต่าง ๆ ในหน้า feed นั่นเอง<br />ซึ่งพัฒนามาจาก service จนกลายเป็น platform ที่ให้ใช้งาน<br />โดยทำการพัฒนาใหม่ด้วยภาษา Go<br />มีแนวทางที่น่าสนใจดังนี้</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>โดยการทำงานของระบบ Ranking จะมี 3 ขั้นตอนหลัก</strong></p>\n\n\n\n<ul><li>Candidate Generation ทำการดึงข้อมูลที่จะทำการ ranking เช่น post, user เป็นต้น</li><li>Filtering ทำการกรองข้อมูล</li><li>Scoring ทำการให้คะแนนและจัดเรียงข้อมูล ก่อนส่งกลับไปให้ user</li></ul>\n\n\n\n<p>แสดงดังรูป</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/reddit-01.jpg\" alt width=\"573\" height=\"285\" /></figure>\n\n\n\n<p>สิ่งที่น่าสนุกของระบบนี้คือ มันไม่มีมีเสร็จ<br />เพราะว่ามีการเปลี่ยนแปลง และ เพิ่มเติมอยู่ตลอดเวลา<br />เป็นเหมือนการทดสอบว่า ทำงานได้ตามที่ต้องการหรือไม่<br />หรือตรงตามที่ต้องการ แต่ไม่ work ในมุมผู้ใช้งาน ก็ต้องปรับเปลี่ยน<br />รวมทั้งข้อมูลก็มีชนิดที่หลากหลายขึ้น<br />หรือบางทีก็ต้องปรับเปลี่ยน หรือ เพิ่มขั้นตอนการทำงานเข้ามา<br />เพื่อแก้ไขปัญหาต่าง ๆ<br />ยิ่งทำให้ระบบมีความซับซ้อนเพิ่มไปเรื่อย ๆ</p>\n\n\n\n<p>ดังนั้นจึงได้เวลาปรับเปลี่ยนโครงสร้างการทำงาน<br />จากเดิมที่ทุก ๆ ขั้นตอนจะผูกมัดกันไปหมด (Tight coupling)<br />จึงทำการแก้ไขตามหลักของ UNIX ดังนี้</p>\n\n\n\n<p><strong>UNIX Toolbox Philosophy</strong></p>\n\n\n\n<ul><li>Write programs that do one thing and do it well.</li><li>Write programs to work together.</li><li>Write programs to handle text streams, because that is a universal interface.</li></ul>\n\n\n\n<p>ซึ่งทำการแบ่งแต่ละขั้นตอนเป็น stage แยกกันไปเลย (input -&gt; output)<br />เพื่อให้แต่ละ stage มีการทำงานเรื่องใดเรื่องหนึ่งไปเลย<br />โดยตั้งชื่อ project ว่า PipeDreme ขึ้นมา</p>\n\n\n\n<p>พร้อมกับใช้งาน Go concurrency ด้วย<br />ในการทำงานหนึ่งพร้อมกัน<br />แต่การดึงข้อมูลจากที่ต่าง ๆ ไม่ว่าจะเป็น post, image และ vdo เป็นต้น<br />แสดงการทำงานดังรูป</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/reddit-02.jpg\" alt width=\"537\" height=\"440\" /></figure>\n\n\n\n<p>ทีมพัฒนาเรื่องใช้งาน <strong><a href=\"https://pkg.go.dev/golang.org/x/sync/errgroup\" target=\"_blank\">package errgroup</a></strong> ในการจัดการ<br />ซึ่งก็คือ sync.WaitGroup นั่นเอง<br />ทำให้จัดการเรื่อง error propagation และ context cancellation ได้ง่าย<br />ข้อมูลในแต่ละ stage จะทำการ copy มาเลย ไม่แก้ไขที่ original data<br />อีกทั้งจะรอให้แต่ละ stage ทำงานเสร็จก่อน จึงจะทำงานต่อไปได้<br />เพื่อลดปัญหาเรื่องของ data race</p>\n\n\n\n<p>ยกตัวอย่าง เช่น ต้องดึงข้อมูลจากทั้ง 3 ที่มาให้เสร็จก่อน<br />จึงจะทำการ merge เป็นต้น</p>\n\n\n\n<p>เป็นอีกแนวคิดที่น่าสนใจมาก ๆ<br />ลองนำไปใช้งานกันดู</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"6c1fb7e55fa57c4af00c185b43bd624647073c24a044ebf0fccaa3d32ed08039","category":"Thai"}