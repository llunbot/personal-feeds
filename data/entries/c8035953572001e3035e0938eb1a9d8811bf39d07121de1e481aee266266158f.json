{"title":"Prevent factual errors from LLM hallucinations with mathematically sound Automated Reasoning checks (preview)","link":"https://aws.amazon.com/blogs/aws/prevent-factual-errors-from-llm-hallucinations-with-mathematically-sound-automated-reasoning-checks-preview/","date":1733246975000,"content":"<p>Today, we’re adding Automated Reasoning checks (preview) as a new safeguard in <a href=\"https://aws.amazon.com/bedrock/guardrails/\">Amazon Bedrock Guardrails</a> to help you mathematically validate the accuracy of responses generated by <a href=\"https://aws.amazon.com/what-is/large-language-model/\">large language models (LLMs)</a> and prevent factual errors from hallucinations.</p> \n<p>Amazon Bedrock Guardrails lets you implement safeguards for <a href=\"https://aws.amazon.com/ai/generative-ai/\">generative AI</a> applications by filtering undesirable content, redacting personal identifiable information (PII), and enhancing content safety and privacy. You can configure policies for denied topics, content filters, word filters, PII redaction, contextual grounding checks, and now Automated Reasoning checks.</p> \n<p>Automated Reasoning checks help prevent factual errors from hallucinations using sound mathematical, logic-based algorithmic verification and reasoning processes to verify the information generated by a model, so outputs align with known facts and aren’t based on fabricated or inconsistent data.</p> \n<p>Amazon Bedrock Guardrails is the only responsible AI capability offered by a major cloud provider that helps customers to build and customize safety, privacy, and truthfulness for their generative AI applications within a single solution.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2024-BR-guard-AR-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2024-BR-guard-AR-1.png\" alt=\"Automated Reasoning checks in Amazon Bedrock Guardrails\" width=\"1361\" height=\"1003\" /></a></p> \n<p><strong><u>Primer on automated reasoning</u></strong><br /> <a href=\"https://aws.amazon.com/what-is/automated-reasoning/\">Automated reasoning</a> is a field of computer science that uses mathematical proofs and logical deduction to verify the behavior of systems and programs. Automated reasoning differs from <a href=\"https://aws.amazon.com/ai/machine-learning/\">machine learning (ML)</a>, which makes predictions, in that it provides mathematical guarantees about a system’s behavior. <a href=\"https://aws.amazon.com/\">Amazon Web Services (AWS)</a> already uses automated reasoning in key service areas such as storage, networking, virtualization, identity, and cryptography. For example, automated reasoning is used to formally verify the correctness of cryptographic implementations, improving both <a href=\"https://www.amazon.science/blog/better-performing-25519-elliptic-curve-cryptography\">performance</a> and <a href=\"https://www.amazon.science/blog/formal-verification-makes-rsa-faster-and-faster-to-deploy\">development speed</a>. To learn more, check out <a href=\"https://aws.amazon.com/security/provable-security/\">Provable Security</a> and the <a href=\"https://www.amazon.science/research-areas/automated-reasoning\">Automated reasoning</a> research area in the Amazon Science Blog.</p> \n<p>Now AWS is applying a similar approach to generative AI. The new Automated Reasoning checks (preview) in Amazon Bedrock Guardrails is the first and only generative AI safeguard that helps prevent factual errors due to hallucinations using logically accurate and verifiable reasoning that explains why generative AI responses are correct. Automated Reasoning checks are particularly useful for use cases where factual accuracy and explainability are important. For example, you could use Automated Reasoning checks to validate LLM-generated responses about human resources (HR) policies, company product information, or operational workflows.</p> \n<p>Used alongside other techniques such as <a href=\"https://aws.amazon.com/what-is/prompt-engineering/\">prompt engineering</a>, <a href=\"https://aws.amazon.com/what-is/retrieval-augmented-generation/\">Retrieval-Augmented Generation (RAG)</a>, and <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails-contextual-grounding-check.html\">contextual grounding checks</a>, Automated Reasoning checks add a more rigorous and verifiable approach to making sure that LLM-generated output is factually accurate. By encoding your domain knowledge into structured policies, you can have confidence that your conversational AI applications are providing reliable and trustworthy information to your users.</p> \n<p><strong><u>Using Automated Reasoning checks (preview) in Amazon Bedrock Guardrails<br /> </u></strong>With Automated Reasoning checks in Amazon Bedrock Guardrails, you can create Automated Reasoning policies that encode your organization’s rules, procedures, and guidelines into a structured, mathematical format. These policies can then be used to verify that the content generated by your LLM-powered applications is consistent with your guidelines.</p> \n<p>Automated Reasoning policies are composed of a set of variables, defined with a name, type, and description, and the logical rules that operate on the variables. Behind the scenes, rules are expressed in formal logic, but they’re translated to natural language to make it easier for a user without formal logic expertise to refine a model. Automated Reasoning checks uses the variable descriptions to extract their values when validating a Q&amp;A.</p> \n<p>Here’s how it works.</p> \n<p><strong>Create Automated Reasoning policies<br /> </strong>Using the <a href=\"https://console.aws.amazon.com/bedrock/home\">Amazon Bedrock console</a>, you can upload documents that describe your organization’s rules and procedures. Amazon Bedrock will analyze these documents and automatically create an initial Automated Reasoning policy, which represents the key concepts and their relationships in a mathematical format.</p> \n<p>Navigate to the new <strong>Automated Reasoning</strong> menu item in <strong>Safeguards</strong>. Create a new policy and give it a name. Upload an existing document that defines the right solution space, such as an HR guideline or an operational manual. For this demo, I’m using an example airline ticket policy document that includes the airline’s policies for ticket changes.</p> \n<p>Then, define the policy’s intent and any processing parameters. For example, specify if it will validate airport staff inquiries and identify any elements to exclude from processing, such as internal reference numbers. Include one or more sample Q&amp;As to help the system understand typical interactions.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2024-BR-guard-AR-2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2024-BR-guard-AR-2.png\" alt=\"Automated Reasoning checks in Amazon Bedrock Guardrails\" width=\"1180\" height=\"1245\" /></a></p> \n<p>Here’s my intent description:</p> \n<p><code>Ignore the policy ID number, it's irrelevant. Airline employees will ask questions about whether customers are allowed to modify their tickets providing the customer details. Below is an example question:</code></p> \n<p><code>QUESTION: I’m flying to Wonder City with Unicorn Airlines and noticed my last name is misspelled on the ticket, can modify it at the airport?</code><br /> <code>ANSWER: No. Changes to the spelling of the names on the ticket must be submitted via email within 24 hours of ticket purchase.</code></p> \n<p>Then, choose <strong>Create</strong>.</p> \n<p>The system now initiates an automated process to create your Automated Reasoning policy. This process involves analyzing your document, identifying key concepts, breaking down the document into individual units, translating these natural language units into formal logic, validating the translations, and finally combining them into a comprehensive logical model. Once complete, review the generated structure, including the rules and variables. You can edit these for accuracy through the user interface.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2024-BR-guard-AR-3.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2024-BR-guard-AR-3.png\" alt=\"Automated Reasoning checks in Amazon Bedrock Guardrails\" width=\"1171\" height=\"1108\" /></a></p> \n<p>To test the Automated Reasoning policy, you first have to create a guardrail.</p> \n<p><strong>Create a guardrail and configure Automated Reasoning checks<br /> </strong>When building your conversational AI application with Amazon Bedrock Guardrails, you can enable Automated Reasoning checks and specify which Automated Reasoning policies to use for validation.</p> \n<p>Navigate to the <strong>Guardrails</strong> menu item in <strong>Safeguards</strong>. Create a new guardrail and give it a name. Choose <strong>Enable Automated Reasoning policy </strong>and select the policy and policy version you want to use. Then, complete your guardrail configuration.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2024-BR-guard-AR-4.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2024-BR-guard-AR-4.png\" alt=\"Automated Reasoning checks in Amazon Bedrock Guardrails\" width=\"1303\" height=\"1250\" /></a></p> \n<p><strong>Test Automated Reasoning checks<br /> </strong>You can use the <strong>Test playground</strong> in the <strong>Automated Reasoning</strong> console to verify the effectiveness of your Automated Reasoning policy. Enter a test question just like a user of your application would, together with an example answer to validate.</p> \n<p>For this demo, I enter an incorrect answer to see what will happen.</p> \n<p><code>Question: I'm flying to Wonder City with Unicorn Airlines and noticed my last name is misspelled on the ticket, I'm currently in person at the airport, can I submit the change in person?</code></p> \n<p><code>Answer: Yes. You are allowed to change names on tickets at any time, even in person at the airport.</code></p> \n<p>Then, select the guardrail you’ve just created and choose <strong>Submit</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2024-BR-guard-AR-5.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2024-BR-guard-AR-5.png\" alt=\"Automated Reasoning checks in Amazon Bedrock Guardrails\" width=\"1169\" height=\"780\" /></a></p> \n<p>Automated Reasoning checks will analyze the content and validate it against the Automated Reasoning policies you’ve configured. The checks will identify any factual inaccuracies or inconsistencies and provide an explanation for the validation results.</p> \n<p>In my demo, the Automated Reasoning checks correctly identified the response as <strong>Invalid</strong>. It shows which rule led to the finding, along with the extracted variables and suggestions.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2024-BR-guard-AR-8.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2024-BR-guard-AR-8.png\" alt=\"Automated Reasoning checks in Amazon Bedrock Guardrails\" width=\"1302\" height=\"864\" /></a></p> \n<p>When the validation result is invalid, the suggestions show a set of variable assignments that would make the conclusion valid. In my scenario, the suggestions show that the change submission method needs to be email for the validation result to be valid.</p> \n<p>If no factual inaccuracies are detected and the validation result is <strong>Valid</strong>, suggestions show a list of assignments that are necessary for the result to hold; these are unstated assumptions in the answer. In my scenario, this might be assumptions such as that it’s the original ticket on which name corrections must be made or that the type of ticket stock is eligible for changes.</p> \n<p>If factual inconsistencies are detected, the console will display <strong>Mixed results</strong> as the validation result. In the API response, you will see a list of findings, with some marked as valid and others as invalid. If this happens, review the system’s findings and suggestions and edit any unclear policy rules.</p> \n<p>You can also use the validation results to enhance LLM-generated responses based on the feedback. For example, the following code snippet demonstrates how you can ask the model to regenerate its answer based on the received feedback:</p> \n<pre><code>for f in findings:\n    if f.result == \"INVALID\":\n        if f.rules is not None:\n            for r in f.rules:\n                feedback += f\"&lt;feedback&gt;{r.description}&lt;/feedback&gt;\\n\"\n\nnew_prompt = (\n    \"The answer you generated is inaccurate. Consider the feedback below within \"\n    f\"&lt;feedback&gt; tags and rewrite your answer.\\n\\n{feedback}\"\n)</code></pre> \n<p>Achieving high validation accuracy is an iterative process. As a best practice, regularly review policy performance and adjust it as needed. You can edit rules in natural language and the system will automatically update the logical model.</p> \n<p>For example, updating variable descriptions can significantly improve validation accuracy. Consider a scenario where a question states, “I’m a full-time employee…,” and the description of the <code>is_full_time</code> variable only states, “works more than 20 hours per week.” In this case, Automated Reasoning checks might not recognize the phrase “full-time.” To enhance accuracy, you should update the variable description to be more comprehensive, such as: “Works more than 20 hours per week. Users may refer to this as full-time or part-time. The value should be true for full-time and false for part-time.” This detailed description helps the system pick up all relevant factual claims for validation in natural language questions and answers, providing more accurate results.</p> \n<p><strong><u>Available in preview<br /> </u></strong>The new Automated Reasoning checks safeguard is available today in preview in Amazon Bedrock Guardrails in the US West (Oregon) <a href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#region\">AWS Region</a>. To request to be considered for access to the preview today, contact your AWS account team. In the next few weeks, look for a sign-up form in the Amazon Bedrock console. To learn more, visit <a href=\"https://aws.amazon.com/bedrock/guardrails/\">Amazon Bedrock Guardrails</a>.</p> \n<p>— <a href=\"https://www.linkedin.com/in/antje-barth/\" target=\"_blank\">Antje</a></p>","author":"Antje Barth","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"c8035953572001e3035e0938eb1a9d8811bf39d07121de1e481aee266266158f","category":"Tech"}