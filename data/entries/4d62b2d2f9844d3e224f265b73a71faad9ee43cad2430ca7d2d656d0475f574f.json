{"title":"สรุปการอ่านบทความเรื่อง Scaling PayPay with Rust","link":"https://www.somkiat.cc/note-scaling-paypay-with-rust/","date":1740301845000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2025/02/paypay-to-rust-150x150.jpg\" alt=\"\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2025/02/paypay-to-rust-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2025/02/paypay-to-rust-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/02/paypay-to-rust.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/02/paypay-to-rust.jpg\" alt=\"\" width=\"654\" height=\"383\" /></a></figure>\n\n\n\n<p>วันนี้อ่านบทความเรื่อง Scaling PayPay with Rust<br />ซึ่งเป็นการทำ Poc (Proof of concept) ของการเปลี่ยนภาษา program ของระบบงาน<br />จากเดิมที่พัฒนาด้วย Java และ NodeJS ซึ่งทำงานได้ดี<br />แต่เมื่อระบบใหญ่ขึ้น การใช้งานมากขึ้น<br />จำเป็นต้องการ scale ระบบมากขึ้นเช่นกัน<br />แต่ด้วยการ deploy บน Kubernetes cluster นั้น<br />มีการใช้งาน CPU และ memory มากขึ้นด้วยเช่นกัน<br />นั่นคือการมาพร้อมด้วยค่าใช้จ่ายที่สูงขึ้นมาก<br />นี่คือเหตุผลหลัก ๆ  ของการเปลี่ยนแปลงนั่นเอง</p>\n\n\n\n<span></span>\n\n\n\n<p>โดยเริ่มทำการศึกษาและทดลองมาตั้งแต่ปี 2023 แล้ว<br />มีการศึกษาทั้ง GraalVM, Go, Rust และอื่น ๆ<br />ซึ่งจาก use case ของทาง PayPay นั้น ได้ทำการเลือก <strong>Rust</strong><br />ที่ตอบโจทย์ ทั้งเรื่องของ performance, type safety และ resource ที่ใช้ทั้ง CPU และ Memory<br />มาดูแนวทางของทาง PayPay สำหรับนำ Rust มาใช้งาน</p>\n\n\n\n<p><strong>แนวทางในการทำ Poc เป็นดังนี้</strong></p>\n\n\n\n<p>จะไม่ทำการ replace ทั้งหมดแบบทันที หรือ big bang<br />แต่จะเริ่มจากการ poc เป็น project เล็ก ๆ  ก่อน<br />เพื่อดูว่ามันเข้ามาช่วยแก้ไขปัญหาของเราหรือไม่<br />ทั้ง development และ deployment บน production<br />เมื่อได้ผลที่น่าพอใจแล้ว จึงจะนำผลนี้ขยายผลออกไปในส่วนต่าง ๆ</p>\n\n\n\n<p><strong>เป้าหมายของการ Poc มี 3 เรื่อง ประกอบไปด้วย</strong></p>\n\n\n\n<ul>\n<li>ปรับปรุงการใช้งาน resource ได้ดีหรือไม่</li>\n\n\n\n<li>ในการ deploy บนระบบเดิมนั้นทำได้หรือไม่ และทำได้ดีหรือไม่ โดยที่การเปลี่ยนแปลงไม่เยอะ</li>\n\n\n\n<li>ระบบเล็ก ๆ (microservice)  ที่พัฒนาด้วย Rust นั้น สามารถรองรับ traffic บน production ได้หรือไม่</li>\n</ul>\n\n\n\n<p><strong>โดยในการ Poc จะทำการสร้าง API gateway ขึ้นมาด้วย Rust</strong></p>\n\n\n\n<p>ซึ่งจะมี feature ต่าง ๆ  ดังนี้</p>\n\n\n\n<ul>\n<li>rate limit</li>\n\n\n\n<li>authentication</li>\n\n\n\n<li>touting request</li>\n\n\n\n<li>aggregate data</li>\n</ul>\n\n\n\n<p>เป็นส่วนงานที่ต้องรับ request จำนวนมาก จากทางฝั่งของ frontend<br />ไม่ว่าจะเป็น web, mobile และช่องทางอื่น ๆ</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/02/Screenshot-2568-02-23-at-15.48.11.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/02/Screenshot-2568-02-23-at-15.48.11-1024x294.png\" alt=\"\" width=\"538\" height=\"154\" /></a></figure>\n\n\n\n<ul>\n<li>Rate limit layer ใช้งาน nginx</li>\n\n\n\n<li>Business logic layer ใช้ Java/NodeJS</li>\n</ul>\n\n\n\n<p></p>\n\n\n\n<p><strong>ดังนั้นถ้าทำการลดการใช้งาน resource ต่าง ๆ  ลงไปได้</strong><br />รวมทั้งประสิทธิภาพการทำงานยังดี และ มีความน่าเชื่อถือ<br />น่าจะส่งผลดีต่อบริษัทอย่างมาก<br />แสดงโครงสร้างดังรูป</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/02/paypay-02.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/02/paypay-02.jpg\" alt=\"\" width=\"561\" height=\"336\" /></a></figure>\n\n\n\n<p>ในการทำ Poc นั้นจะต้องไม่กระทบต่อการทำงานของระบบเดิม<br />แถวต้องรองรับ traffic บน production ให้ได้ด้วย<br />ด้วยการเขียน plugin ใน nginx ด้วยภาษา Lua เพื่อ route traffic มาให้<br />ดังนั้นทางทีมจึงเลือกแนวคิดของ <strong>Sidecar container</strong> มาใช้งาน</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/02/paypay-rust-03.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/02/paypay-rust-03.jpg\" alt=\"\" width=\"537\" height=\"577\" /></a></figure>\n\n\n\n<p><br />โดยจะสร้าง helper sidecar service ขึ้นมาด้วยภาษา Rust<br />ใช้งาน web framework ชื่อว่า <strong><a href=\"https://actix.rs/\" target=\"_blank\">Actix Web</a></strong><br />อีกทั้งยังใส่ opentelemetry เข้าไปได้ง่าย</p>\n\n\n\n<p>ลองใช้งานง่าย ๆ แถมยิงแล้วแรงใช้ได้เลย</p>\n\n\n\n[gist id=\"112d7edd27846c3024a94f73ab086e15\" file=\"1.txt\"]\n\n\n\n<p><strong>ผลของการ rollout  ป็นดังนี้</strong></p>\n\n\n\n<ul>\n<li>ในครั้งแรกนั้น รองรับ traffic น้อย ๆ  พบว่า ช่วยลด CPU และ memory จาก Java ลงไป 10 และ 80 เท่าตัว</li>\n\n\n\n<li>จากนั้นจึงทำการเพิ่มไปยัง feature อื่น ๆ และใหญ่ขึ้น พบว่า ช่วยลด CPU และ memory จาก NodeJS ลงไป 16 และ 100 เท่าตัว</li>\n</ul>\n\n\n\n<p>ทำให้สามารถ scale down บน Kubernetes cluster ลงไปได้อีก<br />แต่ไม่ใช่แค่ลด cost/resource อย่างเดียว<br />แต่ latency ก็ลดลงไปประมาณ 30%<br /><strong><em>เหตุผลไม่ใช่มาจากการเปลี่ยนภาษาเพียงอย่างเดียว<br />แต่มาจากการลด service ที่ไม่จำเป็นออกไป ทำให้ลด hop ของ network นั่นเอง</em></strong></p>\n\n\n\n<p><strong>ผลของการ rollout จากระบบ monitoring เรื่อง latency</strong></p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/02/paypay-rust-04.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/02/paypay-rust-04.jpg\" alt=\"\" width=\"656\" height=\"434\" /></a></figure>\n\n\n\n<p>นี่เป็นเพียงการเริ่มต้นเท่านั้น<br />ยังไม่ได้ rollout ส่วนการทำงานหลักของระบบที่มีความยากและซับซ้อน<br />แต่มีแนวโน้มในเชิงบวก ซึ่งน่าสนใจมาก ๆ</p>\n\n\n\n<p><strong><em>หัวใจหลัก ๆ ของการเปลี่ยนแปลง คือ ต้องไม่กระทบต่อระบบการทำงานหลัก</em></strong></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"4d62b2d2f9844d3e224f265b73a71faad9ee43cad2430ca7d2d656d0475f574f","category":"Thai"}