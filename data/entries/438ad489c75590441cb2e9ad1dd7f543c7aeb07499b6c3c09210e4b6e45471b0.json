{"title":"New Strategy Recommendations Service Helps Streamline AWS Cloud Migration and Modernization","link":"https://aws.amazon.com/blogs/aws/new-strategy-recommendations-service-helps-streamline-aws-cloud-migration-and-modernization/","date":1635192832000,"content":"<p>Determining viable strategies for successful application migration and modernization to the cloud takes time. It can also require significant effort, depending on the size and complexity of the application portfolio to analyze. To date, the analysis process has been largely manual and nonstandard in nature, making it difficult to apply at scale on large portfolios. Limited time to make decisions, a lack of domain knowledge and cloud expertise, and low awareness of the available modernization tools and services can compound the effort and complexity.</p> \n<p>Today, I’m pleased to announce <a href=\"https://aws.amazon.com/migration-hub/features/\">AWS Migration Hub Strategy Recommendations</a> to help automate the analysis of your application portfolios. Strategy Recommendations analyzes your running applications to determine runtime environments and process dependencies, optionally analyzes source code and databases, and more. The data collected from analysis is assessed against a set of business objectives that you prioritize, such as license cost reduction, speed of migration, reducing operational overhead from using managed services, or modernizing infrastructure using cloud-native technologies. Then, it produces recommendations of viable paths to migrate and modernize your applications.</p> \n<p>Any given application could have multiple paths for migration and modernization, including rehosting, replatforming, or refactoring. You’ll get recommendations on all viable paths, and you can elect to override the recommendations as you see fit. Everyone can use Strategy Recommendations, regardless of experience, to lower the effort and time required and complexity involved in assessing application portfolios, whether they’re on premises awaiting migration or already in the <a href=\"https://aws.amazon.com/\">AWS</a> Cloud pending further modernization.</p> \n<p>Taking as an example a typical N-tier application, an ASP.NET web application with a Microsoft SQL Server database, Strategy Recommendations helps you analyze the various components such as the servers hosting the web front end, the backend servers, and the database itself to determine viable paths and tools you can use to migrate and modernize onto the <a href=\"https://aws.amazon.com/\">AWS Cloud</a>. For instance, if your goal is to reduce licensing costs for the application, Strategy Recommendations may recommend you to refactor your application to .NET on Linux using the <a href=\"https://aws.amazon.com/porting-assistant-dotnet/\">Porting Assistant for .NET</a>.</p> \n<p><span><strong>Registering your Application Servers for Strategy Recommendations<br /> </strong></span>Registration of the servers hosting your application portfolio with <a href=\"https://aws.amazon.com/application-discovery/\">AWS Application Discovery Service</a> is a prerequisite for Strategy Recommendations. The servers to register can be running on-premises as physical servers or virtual machines (VMs), or they can be <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instances for applications you’ve already migrated with a “lift-and-shift” process. You can find details on the different options for registering your application servers in the <a href=\"https://docs.aws.amazon.com/application-discovery/latest/userguide/setting-up.html\" target=\"_blank\">AWS Application Discovery Service User Guide</a>.</p> \n<p><span><strong>Automated Data Collection for Analysis</strong></span><br /> With your servers registered in AWS Application Discovery Service, you can set up automated collection of the process level analysis of your application portfolio using an agentless data collector provided by Strategy Recommendations. The agentless collector can be downloaded as an Open Virtualization Appliance (OVA) for VMWare vCenter environments. If you’ve already migrated some or all of your applications to EC2, there’s also an EC2 Amazon Machine Image (AMI), which includes the collector, to help further analyze these applications for modernization opportunities.</p> \n<p>If you don’t want, or cannot use, automated collection methods, or you’ve already collected this data using another tool or service, then you can instead manually import the data for analysis. However, the recommendations you obtain for manually imported data won’t be as in-depth as those originating from automated data collection. One additional benefit of automated collection is that it’s much easier to refresh the data as you progress, too.</p> \n<p>Application and process discovery on your servers is language-agnostic. For .NET and Java applications in GitHub and GitHub Enterprise repositories and Microsoft SQL Server databases, you can optionally include detection of cloud anti-patterns. It’s important to note that if you elect to have source code or database analysis performed, no actual code or data is uploaded to Strategy Recommendations; only the results of the analysis are sent. By the way, if you elect to manually import your data for analysis, the option to perform deeper source code and database analysis is not supported.</p> \n<p><span><strong>Analyzing your Application Portfolio<br /> </strong></span>Full details on how to set up automated data collection, the analysis options, and other important prerequisites can be found in the Strategy Recommendations <a href=\"https://docs.aws.amazon.com/migrationhub-strategy/latest/userguide/what-is-mhub-strategy.html\" target=\"_blank\">User Guide</a>, so I won’t go into further detail here. Instead, I want to look at how you can start analyzing an application portfolio that’s already been migrated to EC2, with an intent to modernize further, using the agentless collector. As mentioned earlier, Strategy Recommendations supports analysis of application portfolios hosted on physical on-premises servers or virtual machines, or (as shown in this post) on EC2 instances.</p> \n<p>To start collection of data for analysis, I need to follow a small number of steps:</p> \n<ol> \n <li>Start and configure the Strategy Recommendations agentless collector, using either the downloadable OVA or the provided EC2 AMI.</li> \n <li>Configure each of the Windows and Linux instances hosting my applications to allow access from the collector.</li> \n <li>Configure my initial business priorities and other application and database preferences to get my initial recommendations. I can fine-tune these options later.</li> \n</ol> \n<p>My first stop is at the Migration Hub console, where I click <strong>Strategy</strong> in the navigation panel to take me to the <strong>Get started</strong> page. On clicking any of the <strong>Download data collector</strong>, <strong>Download import template</strong>, or <strong>Get recommendations</strong> buttons, I’m first asked to agree to the creation of a service-linked role, granting Strategy Recommendations the necessary permissions to access other services on my behalf. Once I agree, I start at the <strong>Configure data sources</strong> page of a short wizard. Here, I can view a list of any previously registered collectors. I can also download the OVA version of the data collector and an import template for any application data I want to import manually, outside of automated collection.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/18/strategyrecommendations_configuredatasources.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/18/strategyrecommendations_configuredatasources.png\" /></a></p> \n<p>I’m going to use the EC2 AMI-based collector so, before proceeding with this wizard, I open the EC2 console in a new browser tab to launch it. To find the image for the Strategy Recommendations data collector I can either go to the <strong>AMIs</strong> page, select <strong>Public images</strong>, and filter by owner 703163444405, or, from the Launch Instances wizard, enter the name <em>AWSMHubApplicationDataCollector</em> in the Search field. Once I’ve found the image, I proceed through the launch wizard as I would for any other AMI.</p> \n<p>Configuration of the collector is a simple process, and I’m guided using a series of questions. As I mentioned earlier, full information is in the <a href=\"https://docs.aws.amazon.com/migrationhub-strategy/latest/userguide/what-is-mhub-strategy.html\" target=\"_blank\">user guide that I linked to</a>, so I won’t go into every detail here. To start the configuration process, I first use SSH to connect to my collector instance and then run a Docker container, using the command <code>docker exec -it application-data-collector bash</code>. In the running container, I start the configuration Q&amp;A with the command <code>collector setup</code>. During the process, you’re asked to supply data for the following items of information:</p> \n<ol> \n <li>Usage agreement and confirmation that all required roles have been set up, followed by a set of AWS access and secret keys.</li> \n <li>For on-premises Windows application servers that are not managed by vCenter, or EC2 Windows instances, I need to provide a user ID and password that will allow the collector to connect to my servers using WinRM.</li> \n <li>If I have any Linux application servers, I can choose whether the collector connects using SSH or certificate-based authentication.</li> \n <li>Finally, I can configure source code analysis for .NET and Java applications in repositories on GitHub or GitHub Enterprise. These require a Git username and personal access token (PAT). I can also configure additional, deeper, source code analysis for C# applications. This does, however, require a separate server running Windows, on which I’ve installed the <a href=\"https://aws.amazon.com/porting-assistant-dotnet/\">Porting Assistant for .NET</a>.</li> \n</ol> \n<p>Once I have completed these steps, my data collector is registered and ready to start inspecting my servers. Back on the Strategy Recommendations <strong>Configure data sources</strong> page, I refresh the page and can now see my collector listed.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/18/strategyrecommendations_collector.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/18/strategyrecommendations_collector.png\" /></a></p> \n<p>The second step is to enable access from the collector to my application servers, details for which can be found in the <a href=\"https://docs.aws.amazon.com/migrationhub-strategy/latest/userguide/getting-started-collector-setup.html\" target=\"_blank\">Step 4: Set up the Strategy Recommendations collector topic of the user guide</a>. For my Windows Server, I used RDP to connect and then downloaded and ran two PowerShell scripts from links provided in the guide to configure WinRM. For larger server fleets, you might consider using <a href=\"https://aws.amazon.com/systems-manager/\">AWS Systems Manager</a> Automation to perform this task. For my Linux servers, having chosen to use SSH authentication for the collector, I needed to copy public key material generated during collector configuration process to each server.</p> \n<p>At this point, the servers to be analyzed are known to AWS Application Discovery Service, the Strategy Recommendations data collector is configured, and each server is configured to allow access from the collector. It’s now time for my third and final step; namely, to set my business and other priorities for the analysis and let the service get to work to generate my recommendations.</p> \n<p>Back in the <strong>Get started</strong> page in Strategy Recommendations, since my collector is registered and I have no manual application data to import, I just choose <strong>Next</strong>. This takes me to the <strong>Specify Preferences</strong> page, where I set my business priorities and other preferences. I can revise these and reanalyze at any time, but for now, I use drag and drop to set <em>License cost reduction, M</em><em>odernizing infrastructure using cloud-native technologies</em>, and <em>Reduce operational overhead with managed services</em> as my highest priorities. I leave the remaining options, for application and database preferences, unchanged.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/20/strategyrecommendations_priorities.gif\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/20/strategyrecommendations_priorities.gif\" /></a></p> \n<p>Choosing <strong>Next</strong>, I reach the <strong>Review</strong> page, summarizing my choices, then choose <strong>Start data analysis</strong>. One item of note, the analysis runs against all servers that you’ve configured in Application Discovery Service, so you may see more servers being processed than you imported in the earlier step (servers not configured to allow access by the collector show up in results with a collection status of “data collection failed”).</p> \n<p>With analysis complete, my recommendations are summarized (no anti-pattern analysis has been run yet).</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/20/strategyrecommendations_recommendations_summary.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/20/strategyrecommendations_recommendations_summary.png\" /></a></p> \n<p>One of my servers is running Windows and hosts an older version of <a href=\"https://github.com/nopSolutions/nopCommerce\">nopCommerce</a>, originally a .NET Framework-based application, and a related SQL Server database. As my highest business priority was license cost reduction, I start my inspection at that server. The recommendations available so far are based on inspection of just the server itself. Analysis of the source code and components comprising the application may likely influence those recommendations, so I request further analysis of the application source code by drilling down to the server and application of interest.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/20/strategyrecommendations_codeanalysis-1.gif\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/20/strategyrecommendations_codeanalysis-1.gif\" /></a></p> \n<p>Code analysis creates a JSON-format report file in <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>, which when I open it, shows anti-patterns such as accessing log files using Windows file system paths instead of a cloud-based service such as <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a>, fixed IP addresses, a server-specific database connection, and more.</p> \n<p>Following code analysis, the suggested recommendations update slightly from those based on just inspection of the servers. One application component that was originally recommended for a replatforming approach is now a candidate for refactoring.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/20/strategyrecommendations_recommendations_summary2.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/20/strategyrecommendations_recommendations_summary2.png\" /></a></p> \n<p>Returning to my server of interest, clicking the <strong>Strategy options</strong> tab shows me the recommendations. The results of the code analysis have played a part in the weightings, along with my business priorities. The image below shows the initial recommendations, which are based on just analysis of the server itself.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/20/strategyrecommendations_initial_recommendations.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/20/strategyrecommendations_initial_recommendations.png\" /></a></p> \n<p>Below are the revised recommendations for the server, following source code analysis.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/21/strategyrecommendations_adjusted_recommendations.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/21/strategyrecommendations_adjusted_recommendations.png\" /></a></p> \n<p>The recommendations for the server also include replatforming the application’s SQL Server database to MySQL on <a href=\"https://aws.amazon.com/rds/\">Amazon Relational Database Service (RDS)</a>. This is suggested because in my priorities, I requested consideration of managed services. Before following this recommendation I may want to perform an additional anti-pattern analysis of the database, which I can do after creating a secret in <a href=\"https://aws.amazon.com/secrets-manager/\">AWS Secrets Manager</a> to hold the database credentials (<a href=\"https://docs.aws.amazon.com/migrationhub-strategy/latest/userguide/database-analysis.html\" target=\"_blank\">check the user guide topic on database analysis for more details</a>). Analysis of databases, which is currently only available for SQL Server, identifies migration incompatibilities such as unsupported data types.</p> \n<p>In the screenshots, you’ll notice additional viable paths for migration and modernization. This applies to both servers and application components. I can choose a viable path over the recommended strategy if I so want by selecting the viable strategy option and clicking <strong>Set preferred</strong>. In the screenshot below, for the nopCommerce application component, I’ve chosen to prefer the replatform route to containers for the application, using <a href=\"https://aws.amazon.com/app2container/\">AWS App2Container</a>. And of course, I can always rewind to the start and adjust my business priorities and other options and reanalyze my data.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/21/strategyrecommendations_custom_recommendations.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/21/strategyrecommendations_custom_recommendations.png\" /></a></p> \n<p>Taking the initial recommendations, then using code and database analysis, or revising your priorities for analysis and the suggested recommendations, provides scope to experiment with multiple “what if” options to discover the optimal strategy for migrating and modernizing application portfolios to the cloud. Once that optimal strategy is determined, you can communicate it to downstream teams to begin the migration and modernization process for your application portfolio.</p> \n<p><span><strong>Get Recommendations for Migration and Modernization Today<br /> </strong></span>You can get started analyzing your servers and application portfolios today with <a href=\"https://aws.amazon.com/migration-hub/features/\">AWS Migration Hub Strategy Recommendations</a>, at no extra charge, in the US East (N. Virginia), US West (Oregon), Asia Pacific (Sydney), Asia Pacific (Tokyo), Europe (Frankfurt), Europe (Ireland), and Europe (London) Regions. You can, of course, deploy the applications you choose to migrate and modernize based on recommendations from the tool to all Regions. As I noted earlier, you can find more details on prerequisites, getting started with the collector, and working with recommendations in the <a href=\"https://docs.aws.amazon.com/migrationhub-strategy/latest/userguide/what-is-mhub-strategy.html\" target=\"_blank\">user guide</a>.</p> \n<a href=\"https://twitter.com/bellevuesteve\">— Steve</a>","author":"Steve Roberts","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"438ad489c75590441cb2e9ad1dd7f543c7aeb07499b6c3c09210e4b6e45471b0","category":"Tech"}