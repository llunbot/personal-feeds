{"title":"Swift 6 Productivity in the Sudden Age of LLM-Assisted Programming","link":"https://mister.computer/@kyle/114608923901892223","date":1749330630000,"content":"\n<p>Kyle Hughes, in a brief thread on Mastodon last week:</p>\n\n<blockquote>\n  <p>At work I’m developing a new iOS app on a small team alongside a\nsmall Android team doing the same. We are getting lapped to an\nunfathomable degree because of how productive they are with\nKotlin, Compose, and Cursor. They are able to support all the way\nback to Android 10 (2019) with the latest features; we are\ntargeting iOS 16 (2022) and have to make huge sacrifices (e.g\nObservable, parameter packs in generics on types). Swift 6 makes a\nmockery of LLMs. It is almost untenable.</p>\n\n<p>This wasn’t the case in the 2010s. The quality and speed of\nimplementation of every iOS app I have ever worked on, in teams of\nevery size, absolutely cooked Android. [...] There has never been\na worse time in the history of computers to launch, and require,\nfundamental and sweeping changes to languages and frameworks.</p>\n</blockquote>\n\n<p>The problem isn’t necessarily inherent to the design of the Swift language (but, speaking to a few friends who write Swift professionally, I think that might be <em>part</em> of it) but that throughout Swift’s evolution Apple has introduced sweeping changes with each major new version. Swift was introduced at WWDC 2014 (that one <a href=\"https://daringfireball.net/linked/2025/06/07/long-lost-df-post\">again</a>) and last year Apple introduced Swift 6. That’s a lot of major version changes for a programming language in one decade. There were pros and cons to Apple’s approach over the last decade. But now there’s a new, and major con: because Swift 6 only debuted last year, there’s no great corpus of Swift 6 code for LLMs to have trained on, and so they’re just not as good — from what I gather, not <em>nearly</em> as good — at generating Swift 6 code as they are at generating code in other languages, and for other programming frameworks like React.</p>\n\n<p>I’m quite certain everyone at Apple who ought to be concerned about this <em>is</em> concerned about it. The question is, do they have solutions ready to announced next week? This whole area — language, frameworks, and tooling in the LLM era — is top of mind for me heading into WWDC next week.</p>\n\n<div>\n<a href=\"https://daringfireball.net/linked/2025/06/07/swift-6-llms\"> ★ </a>\n</div>\n\n\t","author":"John Gruber","siteTitle":"Daring Fireball","siteHash":"fc569638025dadf22a867470f8215f38855cf50e975782a6c989909474292a36","entryHash":"15860d93da167f830150fdd73713ca4c8b4d1bc20b56da9edb470fcfd50e335c","category":"Tech"}