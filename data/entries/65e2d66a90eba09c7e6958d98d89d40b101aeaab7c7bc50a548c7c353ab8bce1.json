{"title":"★ Nerding Out With Maestral, LaunchControl, and Keyboard Maestro","link":"https://daringfireball.net/2023/07/nerding_out_with_maestral_launchcontrol_and_keyboard_maestro","date":1689794378000,"content":"\n<p><em>Item 1:</em> <a href=\"https://www.dropbox.com/products?source=plans\">Dropbox</a> remains an excellent service, seemingly utterly reliable, with fair pricing.</p>\n\n<p><em>Item 2:</em> Dropbox’s official Mac client has been a confusing, ugly, resource-heavy mess for years, and is only getting worse.</p>\n\n<p><em>Item 3:</em> <a href=\"https://maestral.app/\">Maestral</a> is an open source Dropbox client for MacOS and Linux, developed by Sam Schott. It provides exactly what I want in a Mac Dropbox client, and <a href=\"https://daringfireball.net/linked/2019/06/13/dropbox-sucks\">what the official Dropbox app once was</a>, long ago: a folder that syncs, with a minimal user interface that lives in a menu bar app. It <a href=\"https://maestral.app/about/\">uses far less memory</a> than Dropbox’s official client and offers a much simpler interface.</p>\n\n<p>I switched from Dropbox’s official Mac client to Maestral last August. Overall I’ve been very happy with the move. But Maestral is not for everyone. <a href=\"https://maestral.app/about/\">From Maestral’s website, under “Limitations”</a>:</p>\n\n<blockquote>\n  <p>Currently, Maestral does not support Dropbox Paper, the management\nof Dropbox teams and the management of shared folder settings. If\nyou need any of this functionality, please use the Dropbox website\nor the official client.</p>\n\n<p>Maestral uses the public Dropbox API which, unlike the official\nclient, does not support transferring only those parts of a file\nwhich changed (“binary diff”). Maestral may therefore use more\nbandwidth that the official client. However, it will avoid\nuploading or downloading a file if it already exists with the same\ncontent locally or in the cloud.</p>\n</blockquote>\n\n<p>I don’t use Dropbox Paper, don’t have a Dropbox “team”, and I’m fine going to the Dropbox website to manage shared folder settings. The only thing I miss from the official Dropbox client is the Finder contextual menu item to copy a sharing link to an item — but I need that seldom enough that I don’t much mind doing that on the Dropbox website too.</p>\n\n<p>Another big difference: <a href=\"https://help.dropbox.com/installs/dropbox-for-macos-support\">the official Dropbox client is transitioning</a> to MacOS’s relatively new <a href=\"https://developer.apple.com/documentation/fileprovider\">File Provider APIs</a>. These are the APIs that allow cloud-based storage providers to keep certain files online-only, downloading the file locally only when you need it. I don’t need or want that. I just want my entire Dropbox folder’s contents to sync entirely. (Maestral does support Dropbox’s “selective sync” to omit specified folders and files, but those omitted files don’t show up at all in your local folder.) If you keep your Dropbox folder on an external hard drive, you might <em>need</em> to switch to Maestral, because Apple’s File Provider APIs require folders to be stored in <em>~/Library/CloudStorage/</em>. With Maestral, your local Dropbox folder can be anywhere.</p>\n\n<p>Bottom line: 11 months in, and I’m a very happy Maestral user.</p>\n\n<p>But. For the last month or so, I’ve noticed that whenever I wake my Mac (an M1 MacBook Pro running MacOS Ventura 13.4.1), Maestral (version 1.7.3) is no longer running. It crashes silently in the background while my Mac is sleeping (or when waking up?). <a href=\"https://github.com/samschott/maestral/issues/939\">Here’s an issue filed for the bug on GitHub</a>, dittoed by half a dozen users. The obvious band-aid solution is to manually relaunch Maestral each time I wake my Mac, but that’s annoying and easy to forget. The whole point of Dropbox is that it just works in the background, automatically.</p>\n\n<p>While waiting for a fix in Maestral itself, here are two workarounds. They should be applicable in any situation where you want to automatically relaunch an app that is periodically crashing in the background.</p>\n\n<h2>Workaround 1: LaunchControl and launchd</h2>\n\n<p><a href=\"https://www.launchd.info/\"><code>launchd</code></a> is Apple’s longstanding (dating back to Mac OS X 10.4) system for running background processes, either on a schedule or triggered by events. The built-in way to manage <code>launchd</code> jobs is the <code>launchctl</code> command-line utility.<sup><a href=\"#fn1-2023-07-19\">1</a></sup> <code>launchd</code> is very nerdy and <a href=\"https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html\">has a ton of features</a>.</p>\n\n<p>Enter Robby Pählig’s <a href=\"https://www.soma-zone.com/LaunchControl/\">LaunchControl</a>: “a fully-featured <code>launchd</code> GUI allowing you to create, manage and debug system and user services on your Mac.” It costs $21 for a personal license and is worth every cent. LaunchControl is well-designed, comprehensive, and extensively-documented.</p>\n\n<p>In my case, I wanted to create a new <code>launchd</code> job that will keep Maestral running at all times. When it crashes while my Mac is sleeping, I just want it to silently relaunch. Creating such a job using LaunchControl is trivial.</p>\n\n<p>First, drag and drop the Maestral app onto the LaunchControl app icon. This will show a dialog box like this:</p>\n\n<p><img src=\"https://daringfireball.net/misc/2023/07/launchcontrol-create-agent.png\" alt=\"Screenshot of LaunchControl’s Create Agent alert.\" width=\"50%\" /></p>\n\n<p>Click “For current user”.<sup><a href=\"#fn2-2023-07-19\">2</a></sup></p>\n\n<p>That’s it. This does exactly what we want by default: it creates a new user-only <code>launchd</code> job that keeps Maestral alive no matter what. If it crashes, it’ll be relaunched. If we quit Maestral manually, it’ll be relaunched.</p>\n\n<p>One bit of manual fiddling I suggest is giving the job a descriptive name. By default, LaunchControl just names it “local.job”. I renamed mine “local.Maestral.keepalive”:</p>\n\n<p><a href=\"https://daringfireball.net/misc/2023/07/launchcontrol-renaming-agent.png\">\n  <img src=\"https://daringfireball.net/misc/2023/07/launchcontrol-renaming-agent.png\" alt=\"Screenshot of the “keep alive” launchd job in LaunchControl.\" width=\"500\" /></a></p>\n\n<p>The file for this job (after renaming) lives at <em>~/Library/LaunchAgents/local.Maestral.keepalive.plist</em>. But you never really need to deal with that file if you’re using LaunchControl. If you ever want to trash it (e.g. after a version of Maestral ships with a fix for this bug), you can do so within LaunchControl itself.</p>\n\n<h2>Workaround 2: Keyboard Maestro and AppleScript</h2>\n\n<p>For anyone else out there running into this bug with Maestral 1.7.3, the LaunchControl/<code>launchd</code> solution described above is all you need for a workaround. But the nerd in me wanted to know <em>how often</em> Maestral was crashing in the background. When Maestral crashes while my Mac is sleeping, it doesn’t seem to leave any sort of log describing what happened or when.</p>\n\n<p>So here’s another workaround, this time using <a href=\"https://www.keyboardmaestro.com/\">Keyboard Maestro</a> and a tiny AppleScript. First, create a new global macro in Keyboard Maestro. I named mine “Maestral: Keep Alive”. Set it up like this:</p>\n\n<p><a href=\"https://daringfireball.net/misc/2023/07/keyboard-maestro-maestro-keepalive.png\">\n  <img src=\"https://daringfireball.net/misc/2023/07/keyboard-maestro-maestro-keepalive.png\" alt=\"Screenshot of the macro in Keyboard Maestro.\" width=\"500\" /></a></p>\n\n<p>The trigger is “Periodically while logged in”, running once a minute, all day, every day of the week. The action is this simple AppleScript:</p>\n\n<pre><code>if application \"Maestral\" is not running then\n    display notification (current date) as string ¬\n        with title \"Maestral was not running\"\n    do shell script \"/usr/bin/open /Applications/Maestral.app\"\nend if\n</code></pre>\n\n<p>If Maestral is running when this script runs, nothing happens. If it isn’t, the script <a href=\"https://daringfireball.net/misc/2023/07/keyboard-maestro-maestro-keepalive-notification.png\">displays a notification</a> with the current date and time, and then launches Maestral. Sometimes I notice the notification appear after I wake my Mac, sometimes I don’t. But I can go to Notification Center and see the whole stack of them to see how often it’s occurring. (Turns out it gets triggered a dozen or so times overnight, every day.)</p>\n\n<p>Astute scripters might wonder why I’m using <code>do shell script \"/usr/bin/open /Applications/Maestral.app\"</code> to launch Maestral, instead of the idiomatic <code>tell application \"Maestral\" to launch</code>. Good question. The answer is that each time Keyboard Maestral runs this AppleScript, it needs to be compiled. And whenever an AppleScript is compiled, any applications targeted by <code>tell</code> blocks will be launched if they aren’t already running. That’s just a quirk of how AppleScript works, but in this particular case, it would defeat the entire purpose of the script, because when the script runs, Maestral would always be running, because if it weren’t already running before the macro started executing, it would get launched when Keyboard Maestro compiled the script, which happens right before the script is actually run. So we relaunch Maestral with a one-line shell script instead.</p>\n\n<div>\n<hr />\n<ol>\n\n<li>\n<p>The standard POSIX <code>cron</code> utility is still supported on MacOS, but is deprecated in favor of <code>launchd</code>. <a href=\"#fnr1-2023-07-19\">↩︎</a></p>\n</li>\n\n<li>\n<p>Which, to be a HIG pedant, <a href=\"https://developer.apple.com/design/human-interface-guidelines/buttons\">ought to be title-cased</a>: “For Current User”. <a href=\"#fnr2-2023-07-19\">↩︎︎</a></p>\n</li>\n\n</ol>\n</div>\n\n\n\n    ","author":"John Gruber","siteTitle":"Daring Fireball","siteHash":"fc569638025dadf22a867470f8215f38855cf50e975782a6c989909474292a36","entryHash":"65e2d66a90eba09c7e6958d98d89d40b101aeaab7c7bc50a548c7c353ab8bce1","category":"Tech"}