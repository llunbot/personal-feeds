{"title":"New – Create application-consistent snapshots using Amazon Data Lifecycle Manager and custom scripts","link":"https://aws.amazon.com/blogs/aws/new-create-application-consistent-snapshots-using-amazon-data-lifecycle-manager-and-custom-scripts/","date":1699390297000,"content":"<p><a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\">Amazon Data Lifecycle Manager</a> now supports the use of pre-snapshot and post-snapshot scripts embedded in <a href=\"https://aws.amazon.com/systems-manager/\">AWS Systems Manager</a> documents. You can use these scripts to ensure that <a href=\"https://aws.amazon.com/ebs/\">Amazon Elastic Block Store (Amazon EBS)</a> snapshots created by <span>Data Lifecycle Manager</span> are application-consistent. Scripts can pause and resume I/O operations, flush buffered data to EBS volumes, and so forth. As part of this launch we are also publishing a set of detailed blog posts that show you how to use this feature with self-managed relational databases and Windows Volume Shadow Copy Service (VSS).</p> \n<p><span><strong>Data Lifecycle Manager (DLM) Recap</strong></span><br /> As a quick recap, <span>Data Lifecycle Manager</span> helps you to automate the creation, retention, and deletion of Amazon EBS volume snapshots. Once you have completed the prerequisite steps such as onboarding your EC2 instance to AWS Systems Manager, setting up an IAM role for DLM, and tagging your SSM documents, you simply create a lifecycle policy and indicate (via tags) the applicable <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instances, set a retention model, and let DLM do the rest. The policies specify when they are to be run, what is to be backed up, and how long the snapshots must be retained. For a full walk-through of DLM, read my 2018 blog post, <a href=\"https://aws.amazon.com/blogs/aws/new-lifecycle-management-for-amazon-ebs-snapshots/\">New – Lifecycle Management for Amazon EBS Snapshots</a>.</p> \n<p><span><strong>Application Consistent Snapshots</strong></span><br /> EBS snapshots are <em>crash-consistent</em>, meaning that they represent the state of the associated EBS volume at the time that the snapshot was created. This is sufficient for many types of applications, including those that do not use snapshots to capture the state of an active relational database. To make a snapshot that is <em>application-consistent</em>, it is necessary to take pending transactions into account (either waiting for them to finish or causing them to fail), momentarily pause further write operations, take the snapshot, and then resume normal operations.</p> \n<p>And that’s where today’s launch comes in. DLM now has the ability to tell the instance to prepare for an application-consistent backup. The pre-snapshot script can manage pending transactions, flush in-memory data to persistent storage, <a href=\"https://man7.org/linux/man-pages/man8/fsfreeze.8.html\">freeze</a> the filesystem, or even bring the application or database to a stop. Then the post-snapshot script can bring the application or database back to life, reload in-memory caches from persistent storage, thaw the filesystem, and so forth.</p> \n<p>In addition to the base-level support for custom scripts, you can also use this feature to automate the creation of VSS Backup snapshots:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/04/dlm_butter_2.png\" width=\"474\" height=\"174\" /></p> \n<p><span><strong>Pre and Post Scripts</strong></span><br /> The new scripts apply to DLM policies for instances. Let’s assume that I have created a policy that references SSM documents with pre-snapshot and post-snapshot scripts, and that it applies to a single instance. Here’s what happens when the policy is run per its schedule:</p> \n<ol> \n <li><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/24/dlm_options_1.png\" width=\"499\" height=\"182\" />The pre-snapshot script is started from the SSM document.</li> \n <li>Each command in the script is run and the script-level status (success or failure) is captured. If enabled in the policy, DLM will retry failed scripts.</li> \n <li>Multi-volume EBS snapshots are initiated for EBS volumes attached to the instance, with further control via the policy.</li> \n <li>The post-snapshot script is started from the SSM document,</li> \n <li>Each command in the script is run and and the script-level status (success or failure) is captured.</li> \n</ol> \n<p>The policy contains options that give you control over the actions that are taken (retry, continue, or skip) when either of the scripts times out or fails. The status is logged, <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> metrics are published, <a href=\"https://aws.amazon.com/eventbridge\">Amazon EventBridge</a> events are emitted, and the status is also encoded in tags that are automatically assigned to each snapshot.</p> \n<p>The pre-snapshot and post-snapshot scripts can perform any of the actions that are allowed in a command document: <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/documents-command-ssm-plugin-reference.html#aws-runShellScript\">running shell scripts</a>, <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/documents-command-ssm-plugin-reference.html#aws-runPowerShellScript\">running PowerShell scripts</a>, and so forth. The actions must complete within the timeout specified in the policy, with an allowable range of 10 seconds to 120 seconds.</p> \n<p><span><strong>Getting Started</strong></span><br /> You will need to have a detailed understanding of your application or database in order to build a robust pair of scripts. In addition to handling the “happy path” when all goes well, your scripts need to plan for several failure scenarios. For example, a pre-snapshot script should fork a background task that will serve as a failsafe in case the post-snapshot script does not work as expected. Each script must return a shell-level status code, as detailed <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/automate-app-consistent-backups.html#app-consistent-get-started\">here</a>.</p> \n<p>Once I have written and tested my scripts and packaged them as SSM documents, I open the Data Lifecycle Manager page in the EC2 Console, select <strong>EBS snapshot policy</strong>, and click <strong>Next step</strong>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/25/dlm_console_1.png\" width=\"800\" height=\"350\" /></p> \n<p>I target all of my instances that are tagged with a <strong>Mode</strong> of <strong>Production</strong>, and use the default IAM role (if you use a different role, it must enable access to SSM), leave the rest of the values as-is, and proceed:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/25/dlm_top_spec_2.png\" width=\"800\" height=\"956\" /></p> \n<p>On the next page I scroll down to <strong>Pre and post scripts</strong> and expand the section. I click <strong>Enable pre and post scripts</strong>, choose <strong>Custom SSM document</strong>, and then select my SSM document from the menu. I also set the timeout and retry options, and choose to default to a crash-consistent backup if one of my scripts fails. I click <strong>Review policy</strong>, do one final check, and click <strong>Create policy</strong> on the following page:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/04/dlm_pre_post_2.png\" width=\"631\" height=\"801\" /></p> \n<p>My policy is created, and will take effect right away. After it has run at least once, I can inspect the CloudWatch metrics to check for starts, completions, and failures:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/25/dlm_metrics_1.png\" width=\"799\" height=\"526\" /></p> \n<p><span><strong>Additional Reading</strong></span><br /> Here are the first of the detailed blog posts that I promised you earlier:</p> \n<ul> \n <li><a href=\"https://aws.amazon.com/blogs/storage/automating-application-consistent-amazon-ebs-snapshots-for-mysql-and-postgresql/\">Automating creation of application consistent snapshots for MySQL and PostgreSQL</a></li> \n <li><a href=\"https://aws.amazon.com/blogs/storage/automating-application-consistent-amazon-ebs-snapshots-for-windows-applications/\">Automating creation of VSS Backups</a></li> \n</ul> \n<p>We have more in the works for later this year and I will update the list above when they are published.</p> \n<p>You can also read the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/automate-app-consistent-backups.html\">documentation</a> to learn more.</p> \n<p><span><strong>DLM Videos</strong></span><br /> While I’ve got your attention, I would like to share a couple of helpful videos with you:</p> \n<ul> \n <li><a href=\"https://www.youtube.com/watch?v=njsaPvSAHQU\">Monitor Policy State Changes</a></li> \n <li><a href=\"https://www.youtube.com/watch?v=qsxT7hYF8jQ\">Monitor Policies with CloudWatch Events</a></li> \n <li><a href=\"https://www.youtube.com/watch?v=Dai9cOafLSw\">Monitor Policy Actions with CloudWatch Metrics</a></li> \n <li><a href=\"https://www.youtube.com/watch?v=ZLAVkv_oFcE\">Managing Amazon EBS snapshots &amp; AMIs with Amazon Data Lifecycle Manager </a></li> \n</ul> \n<p>This new feature is available now and you can start using it today!</p> \n<p>— <a href=\"https://twitter.com/jeffbarr\">Jeff</a>;</p>","author":"Jeff Barr","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"2c5f0fbd591a894cf337645e4a892926cfbdbba5d48b0b81bf5cc277ad777641","category":"Tech"}