{"title":"Terraform extension for VS Code adds Terraform Cloud view","link":"https://www.hashicorp.com/blog/terraform-extension-for-vs-code-adds-terraform-cloud-view","date":1701190800000,"content":"<p>HashiCorp maintains a <a href=\"https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform\">Terraform extension</a> for <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> in order to ensure that practitioners have a first-class editor experience. Our extension has the unique opportunity to accompany you on every step of your journey, from learning the syntax and writing your first lines of HashiCorp Configuration Language (HCL), to provisioning infrastructure as part of larger teams at companies serving millions of users. This post covers a recent integration with Terraform cloud as well as other enhancements added to the Terraform extension for VS Code that some users may not be aware of.</p>\n\n<h2>New: Integration with Terraform Cloud</h2>\n\n<p>Earlier this month, we launched a native integration with Terraform Cloud in our VS Code extension to better support professional individuals and teams who rely on Terraform Cloud for standardizing and managing their infrastructure automation and lifecycle.</p>\n\n<p>The core capabilities of the new Terraform Cloud integration focus on providing a read-only view of workspaces and runs in order to reduce the amount of window- and context-switching you need to do. Instead of opening up the Terraform Cloud web interface in your browser to look up why a run failed and then switching back to VS Code to look for the configuration that caused the error, you can now view the apply log side-by-side with your code, allowing you to get back to debugging faster.</p>\n<p>To see the full list of features as we continue to add to them over the coming months, check out the <a href=\"https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform#terraform-cloud-integration\">extension overview on the Visual Studio Marketplace</a>. And read on to learn more about enhancements you may not know about. </p>\n\n<h2>Analyze module and provider usage</h2>\n\n<p>For example, installing HashiCorp's Terraform extension for VS Code also gives you access to our Module and Provider Explorer, which can be used regardless of whether or not you have Terraform Cloud. You can access this functionality by clicking on the HashiCorp Terraform icon in the activity bar:</p>\n<p>The Module Explorer lists Terraform modules used in the current open folder (root module) in the Explorer Pane, or you can drag it to the Secondary Side Bar pane to keep it in view. Each item shows an icon indicating where the module comes from (local filesystem, Git repository, or Terraform Registry). If the module comes from the Terraform Registry, a link to open the documentation in a browser is provided.</p>\n<p>The Provider Explorer lists all Terraform providers used in the current open document in the Explorer pane, or you can drag it to the Secondary Side Bar pane for an expanded view.</p>\n<h2>Improved language server performance</h2>\n\n<p>For some time, we have been tracking reports of poor performance in the <a href=\"https://github.com/hashicorp/terraform-ls\">Terraform language server</a>, which powers the Terraform extension for VS Code and can also be used to provide IDE features in <a href=\"https://microsoft.github.io/language-server-protocol/\">LSP</a>-compatible editors like Sublime Text, Neovim, and others.</p>\n\n<p>When you open up your editor, the Terraform language server does a lot of work in the background to understand the code you're working on. It has an indexing process that finds all the Terraform files and modules in your current working directory, parses them, and builds an understanding of all the interdependencies and references. It holds this information inside an in-memory database, which is updated as you change your files. If you open a directory with many hundreds of folders and files, this may consume more CPU and memory than intended.</p>\n\n<p><a href=\"https://github.com/hashicorp/terraform-ls/blob/main/CHANGELOG.md#0315-4-september-2023\">v0.31.5</a> of the Terraform language server and <a href=\"https://github.com/hashicorp/vscode-terraform/blob/main/CHANGELOG.md#2272-2023-09-06\">v2.27.2</a> of the Terraform VS Code extension (both released in September 2023) include fixes that many users have reported dramatically improve performance. If you've previously tried the extension or the language server and encountered problems with performance but have not yet tried these updates, we encourage you to check them out and <a href=\"https://github.com/hashicorp/vscode-terraform/issues/1557\">let us know</a> if you see a difference.</p>\n\n<p>We know these fixes have not yet addressed all of the performance problems that users encounter, and we continue to investigate and trial possible solutions. If you continue to experience poor performance, please don't hesitate to <a href=\"https://github.com/hashicorp/vscode-terraform/issues/new?labels=performance&amp;template=performance.yml\">file an issue on GitHub</a>. The more log output and reproducible configuration you provide, the better we are able to diagnose and address the root cause.</p>\n\n<h2>What's next for the Terraform extension for VS Code</h2>\n\n<p>In the coming months, we plan to continue to add features to the Terraform Cloud integration, improve the <a href=\"https://www.hashicorp.com/blog/new-terraform-testing-and-ux-features-reduce-toil-errors-and-costs#enhanced-editor-validation-makes-resolving-errors-easier\">enhanced validation</a> feature announced at HashiConf last month, complete the Terraform language server's understanding of all Terraform language features (you can track our progress <a href=\"https://github.com/hashicorp/vscode-terraform/issues/641\">here</a> and <a href=\"https://github.com/hashicorp/terraform-ls/labels/language-parity\">here</a>), and implement additional performance enhancements.</p>\n\n<p>Another goal we hope to achieve next year is to move toward a model of Day 0 support for new language features as they come out: as functionality gets added to Terraform, we want our VS Code extension (and other editors powered by the Terraform language server) to provide a best-in-class experience when using those new features.</p>\n\n<p>Whether you’re new to Terraform or an advanced practitioner, we’d love to hear how we can improve the experience of authoring Terraform configuration inside of our VS Code extension or other editors. Please <a href=\"https://github.com/hashicorp/vscode-terraform/issues/new?labels=bug&amp;template=bug_report.yml\">file any bugs you encounter</a>, let us know about your <a href=\"https://github.com/hashicorp/vscode-terraform/issues/new?labels=enhancement&amp;template=feature_request.yml\">feature requests</a>, and share your questions, thoughts, and experiences in the <a href=\"https://discuss.hashicorp.com/c/terraform-core/terraform-editor-integrations/\">Terraform Editor Integrations discussion forum</a>.</p>\n","author":"Nara Kasbergen Kwon","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"33f70c461d715d5c4cee9a3a095080404b43f9c84f860cd2deb9ab7b41d50dfc","category":"Tech"}