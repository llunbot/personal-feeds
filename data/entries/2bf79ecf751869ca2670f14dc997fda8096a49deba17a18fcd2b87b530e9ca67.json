{"title":"Terraform Cloud Variable Sets Beta Now Available","link":"https://www.hashicorp.com/blog/terraform-cloud-variable-sets-beta-now-available","date":1636650000000,"content":"<p>Reusability is a key theme for <a href=\"https://www.terraform.io/\">HashiCorp Terraform</a>. By making Terraform components reusable, practitioners increase productivity and reduce errors, while organizations benefit from standardization and reduced risk. We see this when organizations standardize around specific modules in their Terraform Cloud <a href=\"https://www.terraform.io/docs/cloud/registry/index.html\">private module registry</a> or leverage policy sets across numerous workspaces using <a href=\"https://www.terraform.io/docs/cloud/sentinel/index.html\">Sentinel</a>.</p>\n<p><a href=\"https://www.terraform.io/cloud\">HashiCorp Terraform Cloud</a> is now introducing a new reusable component in public beta: <em>variable sets</em>. Variable sets allow Terraform Cloud users to reuse both Terraform-defined and environment variables not just from root to child modules, but across certain workspaces or an entire organization. The most obvious use case is <a href=\"https://www.hashicorp.com/blog/managing-credentials-in-terraform-cloud-and-enterprise\">credential management</a>, but variables can also manage anything: the size of an instance, availability zones, tags, the type of plan you're deploying on a hosted service — even the <a href=\"https://learn.hashicorp.com/tutorials/terraform/spotify-playlist\">artists on a Spotify playlist</a>.</p>\n<h2><a href=\"#reuse-variables-across-multiple-workspaces\">»</a><a></a>Reuse Variables Across Multiple Workspaces</h2>\n<p>One of the most common use cases for variable sets is credential and identity management. Regardless of the service being consumed, there is almost always a need to establish how Terraform should authenticate it, and as who. The process of creating and defining credentials and service principles across multiple workspaces can become cumbersome as an organization’s workspaces grow to enterprise scale.</p>\n<p>The public beta of variable sets provides a brand new way for you to manage variables, especially those being reused, within an organization. Organization owners or workspace managers can manage variable sets through the organization’s settings page. There, you can create collections of variables, known as variable sets, which can then be associated with one, several, or all of an organization’s workspaces. Variable sets can then be used, rotated, or even revoked at any time.</p><img src=\"https://www.datocms-assets.com/2885/1636642554-tfcvarsets01.png\" /><h2><a href=\"#variable-sets-use-cases\">»</a><a></a>Variable Sets Use Cases</h2>\n<p>As mentioned, variables extend far beyond credential management. Variables can manage anything from availability zones to more complex things, like populating frequently used module arguments containing Terraform-defined and environmental variables. This is where the magic comes in. Using variable sets, organizations can more easily solve issues such as:</p>\n<ul>\n<li><strong>Disaster recovery</strong>: If an availability zone goes down or otherwise has issues, organizations can move entire fleets of infrastructure by switching the availability zone in a variable set.</li>\n<li><strong>Cost optimization</strong>: Many organizations find they overspend on the infrastructure they use for non-production environments. Using variable sets, administrators can configure specific instance sizes which may be more cost effective to those development and pre-production environments.</li>\n<li><strong>Tagging</strong>: Administrators can provide a new level of consistency to how tags are applied to provisioned infrastructure with variable sets’ broader management scope.</li>\n</ul><img src=\"https://www.datocms-assets.com/2885/1636642569-tfcvarsets02.png\" /><h2><a href=\"#variable-precedence\">»</a><a></a>Variable Precedence</h2>\n<p>As you start to use variable sets, it’s important to understand <em>variable precedence</em> — the order in which variables and variable sets are applied to workspaces. Variable sets have their own level of precedence.</p>\n<p>Variable sets applied across all workspaces have the lowest level of precedence. Then, a variable set assigned to a specific workspace (or specific workspaces) can supersede an organization-wide variable set. Lastly, single variables defined within an individual workspace will override any variables defined through a variable set. A workspace's variables pane (example below) provides additional context regarding whether a variable has been overwritten due to the established precedence.</p><img src=\"https://www.datocms-assets.com/2885/1636642404-tfcvarsets03.png\" /><h2><a href=\"#api-management-of-variable-sets\">»</a><a></a>API Management of Variable Sets</h2>\n<p>There is also a new API service to manage variable sets. You can use this service to manage each aspect of the variable sets feature. Here is a sample payload to create a variable set, containing a single variable, which is applied across all workspaces in the organization:</p><pre><code>{\n  \"data\": {\n    \"type\": \"varsets\",\n    \"attributes\": {\n        \"name\": \"Azure Location - Default\",\n        \"description\": \"Azure location to deploy workloads by default.\",\n        \"is-global\": true\n    },\n    \"relationships\": {\n      \"workspaces\": {\n        \"data\": [\n          {\n            \"id\": \"TPMM-Org\",\n            \"type\": \"organizations\"\n          }\n        ]\n      },\n      \"vars\": {\n        \"data\": [\n          {\n            \"type\": \"vars\",\n            \"attributes\": {\n              \"key\": \"location\",\n              \"value\": \"useast\",\n              \"category\": \"terraform\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}</code></pre><h2><a href=\"#get-started-with-variable-sets\">»</a><a></a>Get Started with Variable Sets</h2>\n<p>Variable sets are available to every tier of Terraform Cloud users. Documentation on variable sets is available here: <a href=\"https://www.terraform.io/docs/cloud/workspaces/managing-variables.html#variable-sets\">Managing Variables in Terraform Cloud</a>. The <a href=\"https://registry.terraform.io/providers/hashicorp/tfe/latest\">TFE provider</a> will be updated in a future release to add support for variable sets. Feedback is greatly appreciated and can be given through the in-product link titled “Give feedback on variable sets” which is located on the variable sets pane or on the following HashiCorp Discuss post: <a href=\"https://discuss.hashicorp.com/t/terraform-cloud-release-variable-sets-public-beta/31800\">Terraform Cloud Release: Variable Sets Public Beta\n</a>.</p>\n<p><a href=\"https://www.terraform.io/cloud\">Terraform Cloud</a> is free to try, and organizations can <a href=\"https://www.hashicorp.com/products/terraform/pricing\">upgrade to the Team &amp; Governance or Business tiers</a> at any time. To get started with Terraform Cloud, <a href=\"https://app.terraform.io/signup/account\">sign up</a> and follow our <a href=\"https://learn.hashicorp.com/collections/terraform/cloud-get-started\">Get Started with Terraform Cloud tutorial</a>. To get started with variable sets, follow our new HashiCorp Learn guide: <a href=\"https://learn.hashicorp.com/tutorials/terraform/cloud-multiple-variable-sets\">Manage Variable Sets in Terraform Cloud</a>.</p>","author":"Kyle Ruddy","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"2bf79ecf751869ca2670f14dc997fda8096a49deba17a18fcd2b87b530e9ca67","category":"Tech"}