{"title":"สรุปการแบ่งปันเรื่อง Microservices ตั้งแต่ design -> develop -> testing -> deploy","link":"https://www.somkiat.cc/note-microservices-sharing-at-skooldio-13/","date":1688794137000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/07/evolution-of-house-architecture-cartoon-concept-free-vector-150x150.jpg\" alt loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/07/evolution-of-house-architecture-cartoon-concept-free-vector-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2023/07/evolution-of-house-architecture-cartoon-concept-free-vector-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/07/evolution-of-house-architecture-cartoon-concept-free-vector.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/07/evolution-of-house-architecture-cartoon-concept-free-vector-1024x617.jpg\" alt width=\"737\" height=\"444\" /></a></figure>\n\n\n\n<p>บันทึกการสอน และ แบ่งปันความรู้เรื่องของ <strong><a href=\"https://skooldio.com/workshops/bundle-microservices\" target=\"_blank\">Microservices ที่ Skooldio</a></strong><br />ตั้งแต่การออกแบบ การพัฒนา การทดสอบ และ การ deploy<br />รวมไปถึงการ operate เรื่องต่าง ๆ เช่น monitoring และ observability<br />จำนวน 4 วัน โดยครั้งนี้เขาบอกว่าเป็นรุ่นที่ 13 แล้ว<br />จึงทำการสรุปการแบ่งปันไว้นิดหน่อย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เริ่มด้วย 2 วันแรก จะลงรายละเอียดของการออกแบบ</strong></p>\n\n\n\n<p>โดยเป้าหมายของ 2 วันนี้ คือ </p>\n\n\n\n<ul>\n<li>เพิ่มความรู้ความเข้าใจของปัญหาต่าง ๆ ที่พบเจอของระบบงาน</li>\n\n\n\n<li>ให้รู้และเข้าใจว่า ทำไม เราจึงมีแนวคิดต่าง ๆ ของการออกแบบระบบ รวมทั้งเรื่องของ software architecture</li>\n\n\n\n<li>แนวคิดต่าง ๆ ล้วนสร้างขึ้นมาเพื่อแก้ไขปัญหา</li>\n\n\n\n<li>แต่เมื่อเรานำมาใช้งาน ทำไมถึงสร้างปัญหา</li>\n\n\n\n<li>เราเข้าใจถึงที่มาที่ไปของแนวคิดนั้น ๆ หรือไม่</li>\n</ul>\n\n\n\n<p><strong>ดังนั้นจึงได้เริ่มสร้างความเข้าใจในแนวคิดต่าง ๆ เข้ามา ยกตัวอย่างเช่น</strong></p>\n\n\n\n<ul>\n<li>DevOps, DevSecOps</li>\n\n\n\n<li>Continuous Integration และ Continuous Deployment/Delivery</li>\n\n\n\n<li>Software architecture เช่น Monolith, Modular, Layer, Tier, SOA, Microservices และ Function-as-aService</li>\n\n\n\n<li>Containerization</li>\n</ul>\n\n\n\n<p>โดยสิ่งที่เน้นย้ำในการแบ่งปันครั้งนี้ คือ <strong>Software architecture</strong><br />ซึ่งล้วนมี trade-off ที่เราต้องพิจารณาเสมอ<br />เนื่องจากไม่ได้มีเพียงข้อดีเท่านั้น<br />มันยังมีข้อเสียที่เราต้องรู้และเข้าใจ รวมทั้งต้องเตรียมวิธีการรับมือเสมอ<br />บ่อยครั้งจะพบว่า เราแก้ไขปัญหา ด้วยการเพิ่มปัญหาใหม่ ๆ  !!</p>\n\n\n\n<p><strong>กลับมาที่ Microservices นั้น จะแนะนำให้มอง 4 มุมเป็นอย่างน้อยเสมอ</strong></p>\n\n\n\n<p>ประกอบไปด้วย</p>\n\n\n\n<ul>\n<li>การสร้าง service จะเพิ่มเข้าไป หรือ แยกออกมา มีเหตุผลอะไร อย่างไร</li>\n\n\n\n<li>การออกแบบ interface หรือ การเข้าถึง service นั้น ๆ เป็นอย่างไร สนใจเรื่อง compatability และ ใช้งานง่ายหรือไม่</li>\n\n\n\n<li>การทดสอบ คิดไหมว่า จะทดสอบอย่างไร</li>\n\n\n\n<li>การ operate คิดหรือไม่ว่าจะดูแล จัดการอย่างไร deploy อย่างไร monitoring/observability เป็นอย่างไร ถ้าเกิดปัญหาต่าง ๆ จะจัดการอย่างไร หรือ ระบบสามารถ react ต่อปัญหาได้หรือไม่ อย่างไร</li>\n</ul>\n\n\n\n<p><strong>ยิ่งทำการแยกกันออกมา มีข้อดีหรือข้อเสียมากกว่ากัน</strong></p>\n\n\n\n<p>มีความเป็นอิสระหรือไม่ ในมุมมองต่าง ๆ ไม่ใช่เพียงแค่แยกกันพัฒนา แยกกันทำงาน<br />แต่ยังต้องมองเรื่องของ </p>\n\n\n\n<ul>\n<li>การติดต่อสื่อสาร เช่น แยกกันแล้ว แต่ต้องติดต่อสื่อสารกันเสมอ คำถามคือ แยกกันทำไม ตรงนี้ตอบได้ไหม</li>\n\n\n\n<li>การ deploy และ scale ต้องรอกันไหม ? ถ้ารอ แล้วไหนบอกว่า service ต้องเป็นอิสระแก่กัน</li>\n\n\n\n<li>การแก้ไข พบว่าเมื่อทำการเปลี่ยนแปลง ต้องไปแก้ไขหลาย ๆ ที่ หรือ หลาย service แบบนี้คือ duplication ไหมนะ น่าคิด</li>\n\n\n\n<li>เมื่อมีบาง service พัง หรือ ช้าไป แล้วก่อให้ service อื่น ๆ ที่เกี่ยวข้องมีปัญหาไปด้วย แบบนี้เป็นอิสระไหมนะ ไม่น่าใช่หรือเปล่านะ ?</li>\n</ul>\n\n\n\n<p><strong>ปิดท้ายด้วยแนวคิดของการออกระบบ ต้องมองให้รอบด้าน</strong></p>\n\n\n\n<p>ซึ่งมีมุมต่าง ๆ ดังนี้ ซึ่วงมีหลายมุม ดังนั้นต้องการคนที่มี skill หลากหลาย<br />หรือเป็นการทำงานเป็นทีมนั้นเอง เช่น</p>\n\n\n\n<ul>\n<li>แนวทางการแยก (decomposition)</li>\n\n\n\n<li>แนวทางในการจัดเก็บข้อมูล จะรวม หรือ แยกกัน รวมกันมากไปก็ไม่ได้ แยกมากก็ไม่ได้</li>\n\n\n\n<li>พอแยกหลาย ๆ  service และ data ต้องทำการนำมารวมกัน จะทำอย่างไร</li>\n\n\n\n<li>พอแยกหลาย ๆ  service และ data จะจัดการเรื่องของ transaction อย่างไร</li>\n\n\n\n<li>แต่ละ service จะติดต่อสื่อสารกันอย่างไร ผูกมัดกันเกินไปไหม ? เป็นอิสระต่อกันไหม ?</li>\n\n\n\n<li>เรื่องของการทดสอบทำอย่างไร</li>\n\n\n\n<li>เรื่องของ observability ของ service และภาพรวมเป็นอย่างไร</li>\n\n\n\n<li>เมื่อเกิดปัญหาแล้ว ค่าของ MTTR (Mean-Time-to-Recovery) เป็นอย่างไร ช้า หรือ เร็ว</li>\n\n\n\n<li>การ deploy ทำอย่างไร คิดก่อนทำหรือไม่ หรือทำไปแล้วค่อยไปคิด ? สนใจ Zero downtime หรือไม่</li>\n\n\n\n<li>ระบบงาน react ต่อปัญหาอย่างไร</li>\n\n\n\n<li>ทำแต่ service ที่เป็น backend เคยสนใจฝั่ง fronend บ้างไหม ว่าเข้ามีปัญหาอะไรไหม ทำงานยากกว่าเดิมไหม</li>\n</ul>\n\n\n\n<p>สิ่งเหล่านี้จำเป็นต้องได้รับคำตอบไหมนะ ?</p>\n\n\n\n<p></p>\n\n\n\n<p><strong>ต่อมาในอีก 2 วัน ว่าด้วยเรื่องของ develop -&gt; testing -&gt; deploy</strong></p>\n\n\n\n<p>เป็นการลงมือทำ ว่าจากแนวคิดต่าง ๆ นั้น<br />เราจะลงมือทำได้อย่างไรบ้าง<br />เพื่อทำให้เรารู้และเข้าใจว่า<br />เพียงคิดอย่างเดียวมันยังไม่พอ<br />คิดได้ ก็ต้องทำให้ดูได้<br />แนะนำแล้ว ก็ต้องแสดงให้เห็นได้<br />โดยเป็นการทำ workshop เป็นเรื่อง ๆ แยกกันไปได้ดังนี้</p>\n\n\n\n<ul>\n<li>การออกแบบ interface ของ service เช่น REST API ทำอย่างไร โดยจะแนะนำเรื่องของ Design-first ด้วยเครื่องมือต่าง ๆ เช่น Postman, Swagger/OpenAPI และ API blueprint</li>\n\n\n\n<li>การจัดการปัญหาเรื่อง service to service communication นั่นคือการใช้งาน Circuit breaker ร่วมกับระบบ alert system เพื่อทำให้เรารู็ปัญหาทันที รวมทั้งการจัดการปัญหาเฉพาะหน้า เพื่อลดปัญหาไม่ให้ขยายวงกว้าง จนไปกระทบต่อส่วนอื่น ๆ</li>\n\n\n\n<li>การใช้งาน API gateway แบบพื้นฐาน โดยครั้งนี้แนะนำ APISIX ดูบ้าง</li>\n\n\n\n<li>การจัดการ Observability ของ service ประกอบไปด้วย Application metric, Distributed tracing และ Log aggregation ด้วยภาษาโปรแกรมต่าง ๆ ที่หลากหลาย</li>\n\n\n\n<li>การติดต่อสื่อสารระหว่าง service แบบ asynchronous ว่าเป็นอย่างไร ลงมือทำ</li>\n\n\n\n<li>การทดสอบ service ทำอย่างไร ซึ่งลงมือทำ workshop 2 รูปแบบคือ component testing และ contract testing</li>\n\n\n\n<li>การออกแบบ pipeline ของการส่งมอบ service รวมไปถึง product ว่าควรมีอะไรบ้าง เพื่อทำให้เรามั่นใจในคุณภาพ พร้อมกับความรวดเร็ว</li>\n</ul>\n\n\n\n<p><strong><em>ปิดด้วย แนวคิดต่าง ๆ เกิดมาเพื่อแก้ไขปัญหา<br />ดังนั้นเราต้องรู้ก่อนว่า ปัญหาของเราตรงกับแนวคิดเหล่านั้นหรือไม่<br />มิเช่นนั้น เราเองที่จะเป็นคนสร้าง หรือ นำ ปัญหาเข้ามาเอง</em></strong><br /><br /></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"4c87cee0416d168fbe692e0067de38f99b05e753904eccf1b0cb89d8c31378ea","category":"Thai"}