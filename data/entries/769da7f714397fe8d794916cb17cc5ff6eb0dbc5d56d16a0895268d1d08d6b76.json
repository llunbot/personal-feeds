{"title":"AWS Lake Formation – General Availability of Cell-Level Security and Governed Tables with Automatic Compaction","link":"https://aws.amazon.com/blogs/aws/aws-lake-formation-general-availability-of-cell-level-security-and-governed-tables-with-automatic-compaction/","date":1638293901000,"content":"<p>A <a href=\"https://aws.amazon.com/big-data/datalakes-and-analytics/what-is-a-data-lake/\">data lake</a> can help you break down data silos and combine different types of analytics into a centralized repository. You can store all of your structured and unstructured data in this repository. However, setting up and managing data lakes involve a lot of manual, complicated, and time-consuming tasks. <a href=\"https://aws.amazon.com/lake-formation/\">AWS Lake Formation</a> makes it easy to set up a secure data lake in days instead of weeks or months.</p> \n<p>Today, I am excited to share the <strong>general availability</strong> of some new features that simplify even further loading data, optimizing storage, and managing access to a data lake:</p> \n<ul> \n <li><strong> Governed Tables –</strong> A new type of <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> tables that makes it simple and reliable to ingest and manage data at any scale. Governed tables support <a href=\"https://en.wikipedia.org/wiki/ACID\">ACID</a> transactions that let multiple users concurrently and reliably insert and delete data across multiple governed tables. ACID transactions also let you run queries that return consistent and up-to-date data. In case of errors in your extract, transform, and load (ETL) processes, or during an update, changes are not committed and will not be visible.</li> \n <li><strong>Storage Optimization with Automatic Compaction</strong> for governed tables – When this option is enabled, Lake Formation automatically compacts small S3 objects in your governed tables into larger objects to optimize access via analytics engines, such as <a href=\"https://aws.amazon.com/athena/\">Amazon Athena</a> and <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/c-getting-started-using-spectrum.html\">Amazon Redshift Spectrum</a>. By using automatic compaction, you don’t have to implement custom ETL jobs that read, merge, and compress data into new files, and then replace the original files.</li> \n <li><strong>Granular Access Control with Row and Cell-Level Security</strong> – You can control access to specific rows and columns in query results and within AWS Glue ETL jobs based on the identity of who is performing the action. In this way, you don’t have to create (and keep updated) subsets of your data for different roles and legislations. This works for both governed and traditional S3 tables.</li> \n</ul> \n<p><span><strong>Using Governed Tables, ACID Transactions, and Automatic Compaction<br /> </strong></span>In the <a href=\"https://console.aws.amazon.com/lakeformation/home\">Lake Formation console</a>, I can enable governed data access and management at table creation. Automatic compaction is enabled by default, and it can be disabled using the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (CLI)</a> or <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/22/lake-formation-governed-tables.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/22/lake-formation-governed-tables-1024x439.png\" /></a></p> \n<p>Governed tables have a manifest that tracks the S3 objects that are part of the table’s data. I can use the <code>UpdateTableObjects</code> API to keep the manifest updated when adding new objects to the table, and I can call it using the AWS CLI and SDKs. This API is implicitly used by the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming.html\">AWS Glue ETL library</a>.</p> \n<p>Moreover, I have access to new <a href=\"https://docs.aws.amazon.com/lake-formation/latest/dg/aws-lake-formation-api.html\">Lake Formation APIs</a> to start, commit, or cancel a transaction. I can use these APIs to wrap data loading, data transformation, and output consistent and up-to-date data.</p> \n<p><span><strong>Using Row and Cell-Level Security<br /> </strong></span>There are many use cases where, for a table, you want to restrict access to specific columns, rows, or a combination that depends on the role of the user accessing the data. For example, a company with offices in the US, Germany, and France can create a filter for analysts based in the European Union (EU) to limit access to EU-based customers.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/22/lake-formation-data-filter-1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/22/lake-formation-data-filter-1-1024x865.png\" /></a></p> \n<p>The filter can enforce that some columns, such as date of birth (<code>dob</code>) and <code>phone</code>, are not accessible to those analysts. Moreover, access to individual rows can be filtered by using filter expressions. You can configure row filter expressions with a SQL-compatible syntax based on the open-source <a href=\"https://partiql.org/\">PartiQL</a> language. In this case, only rows with country equal to Germany or France (<code>country='DE' OR country='FR'</code>) are visible.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/22/lake-formation-data-filter-2.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/22/lake-formation-data-filter-2-1024x931.png\" /></a></p> \n<p><span><strong>Availability and Pricing<br /> </strong></span>These new features are available today in the following <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/#Regions\">AWS Regions</a>: US East (N. Virginia), US West (Oregon), Europe (Ireland), US East (Ohio), and Asia Pacific (Tokyo).</p> \n<p>When querying governed tables, or tables secured with row and cell-level security, you pay by the amount of data scanned (with a 10MB minimum). When using governed tables, transaction metadata is charged by the number of S3 objects tracked, and you pay for the number of transaction requests. Automatic compaction is charged based on the data processed. For more information, see the <a href=\"https://aws.amazon.com/lake-formation/pricing/\">AWS Lake Formation pricing</a> page.</p> \n<p>While implementing these features, we introduced a new <strong>Lake Formation Storage API</strong> that is integrated with tools such as <a href=\"https://aws.amazon.com/glue/\">AWS Glue</a>, <a href=\"https://aws.amazon.com/athena/\">Amazon Athena</a>, <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/c-getting-started-using-spectrum.html\">Amazon Redshift Spectrum</a>, and <a href=\"https://aws.amazon.com/quicksight/\">Amazon QuickSight</a>. You can use this storage API directly in your applications to query tables with a SQL-like syntax (joins are not supported) and get the benefits of governed tables and cell-level security.</p> \n<p>See the detailed blog series published during the preview to learn more:</p> \n<p><strong>Effective data lakes using AWS Lake Formation</strong></p> \n<ul> \n <li><a href=\"https://aws.amazon.com/blogs/big-data/part-1-effective-data-lakes-using-aws-lake-formation-part-1-getting-started-with-governed-tables/\">Part 1: Getting started with governed tables</a></li> \n <li><a href=\"https://aws.amazon.com/blogs/big-data/effective-data-lakes-using-aws-lake-formation-part-2-creating-a-governed-table-for-streaming-data-sources/\">Part 2: Creating a governed table for streaming data sources</a></li> \n <li><a href=\"https://aws.amazon.com/blogs/big-data/part-3-effective-data-lakes-using-aws-lake-formation-part-3-using-acid-transactions-on-governed-tables/\">Part 3: Using ACID transactions on governed tables</a></li> \n <li><a href=\"https://aws.amazon.com/blogs/big-data/part-4-effective-data-lakes-using-aws-lake-formation-part-4-implementing-cell-level-and-row-level-security/\">Part 4: Implementing cell-level and row-level security</a></li> \n <li><a href=\"https://aws.amazon.com/blogs/big-data/effective-data-lakes-using-aws-lake-formation-part-5-secure-data-lakes-with-row-level-access-control/\">Part 5: Securing data lakes with row-level access control</a></li> \n</ul> \n<p><a href=\"https://aws.amazon.com/lake-formation/\"><strong>Take advantage of these new features to simplify the creation and management of your data lake.</strong></a></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"769da7f714397fe8d794916cb17cc5ff6eb0dbc5d56d16a0895268d1d08d6b76","category":"Tech"}