{"title":"ตอบคำถามจาก Microservices design :: เรื่องของ Software Architecture ที่เปลี่ยนไป","link":"https://www.somkiat.cc/evolution-of-architecture-to-microservices/","date":1720931429000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/architecture-01-150x150.png\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/07/architecture-01-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2024/07/architecture-01-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/07/architecture-01.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/architecture-01-1024x576.png\" width=\"675\" height=\"379\" /></a></figure>\n\n\n\n<p>จากการแบ่งปันเรื่องการออกแบบระบบงานด้วยแนวคิด <strong>Microservices</strong> นั้น<br />มีคำถามที่น่าสนใจเกี่ยวกับ software architecture ที่เปลี่ยนไปว่า<br />ทำไมมันถึงมีพวกเครื่องมอื หรือ วิธีการแปลก ๆ เข้ามาเรื่อย ๆ<br />ทั้ง Microservices, Function as a Service<br />ทั้ง Apache Kafka<br />ทั้ง Docker และ Kubernetes<br />ทั้ง Caching ในส่วนต่าง ๆ<br />ซึ่งเยอะไปหมด เราต้องใช้มันด้วยหรือ ?</p>\n\n\n\n<span></span>\n\n\n\n<p><strong><em>คำตอบคือ เราต้องการสิ่งเหล่านี้จากข้างต้นทั้งหมดจริง ๆ หรือไม่ ?</em></strong></p>\n\n\n\n<p>หรือเราใช้เพราะว่า มัน cool<br />หรือเราใช้เพราะว่า เขาบอกว่าต้องใช้ (เขาคือใคร</p>\n\n\n\n<p>กลับมาที่ความต้องการของระบบ มันต้องการใช้จริง ๆ หรือไม่ ?<br />แต่คำตอบที่ได้รับกลับมาคือ ความเงียบ !!</p>\n\n\n\n<p>ดังนั้นต้องตั้งสติก่อน start เพราะว่า ทุกสิ่งทุกอย่าง<br />มันถูกคิด ถูกสร้าง ขึ้นมา เพื่อแก้ไขปัญหาหนึ่ง ๆ <br />ดังนั้น เราต้องทำความเข้าใจมันก่อน (Know problems first, context is the king)<br />จากนั้นมาดูว่า ปัญหาของเรา และ เครื่องมือมันตรงกันไหม<br />ถ้าไม่แล้ว แทนที่จะเข้ามาแก้ไขปัญหา กลับมาสร้างปัญหาใหม่ก็ได้ !!</p>\n\n\n\n<p>เหตุผลอยู่เหนืออารมณ์เสมอ</p>\n\n\n\n<p><strong>ขั้นตอนของการเลือกมีขั้นตอนดังนี้</strong></p>\n\n\n\n<ul>\n<li><strong>Simplicity</strong> เริ่มจากความเรียบง่าย แต่มันก็ไม่ง่าย มีเป้าหมาย เพื่อส่งมอบงานให้เร็วที่สุด แต่ยังคงคุณภาพที่สูงนะ</li>\n\n\n\n<li><strong>Maintainability</strong> ต่อจากนั้นถ้าระบบงานเริ่มใหญ่ขึ้น ความซับซ้อนที่สูงขึ้น ทีมใหญ่ขึ้น การจัดการก็ต่างออกไป แก้ไขที่หนึ่งแล้วไปกระทบอีกหลาย ๆ ที่หรือไม่ ทั้งเรื่องของ feature, code และ ทีม เพื่อเตรียมตัวสำหรับการโตไปอีกขั้นของระบบ เช่น modular monolith เป็นต้น</li>\n\n\n\n<li><strong>Decoupled to small services หรือ Microservices</strong> เมื่อผ่านทั้ง simplicity และ maintainability มาแล้ว ก็เริ่มแบ่งเป็น service ออกมาจากกันทั้งในรูปแบบของ physical server หรือ container ก็ว่าไป รวมทั้งการ deploy และ scale ที่ต้องแยกออกจากกัน ทำให้เกิดความเป็นอิสระต่อกัน ... และแน่นอนว่า ก็มีปัญหาอื่น ๆ ตามมาที่ต้องคิดและวางแผน เพื่อรองรับมัน ทั้งการทำงานร่วมกัน ทั้งการติดต่อสื่อสารระหว่างกัน ทั้งเรื่องของ performance ที่อาจจะ drop ลงไหม !! รวมทั้งเรื่อง error handling ต่าง ๆ (Plan for failure !!)  ที่มีโอกาสเกิดขึ้นเยอะกว่าเดิม เพราะว่ายิ่งแยก ยิ่งเกิดความซับซ้อน</li>\n</ul>\n\n\n\n<p>ดังนั้น context หรือความต้องการของแต่ละระบบจึงสำคัญมาก ๆ<br />จากนั้นเรื่องของ architecture จะค่อย ๆ เปลี่ยนไป ปรับไปตามความเหมาะสม</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"1744ae150c5820e4c1bb642197a5854ef3a632a1115ff40cee3ec21631d41b97","category":"Thai"}