{"title":"Introducing Express brokers for Amazon MSK to deliver high throughput and faster scaling for your Kafka clusters","link":"https://aws.amazon.com/blogs/aws/introducing-express-brokers-for-amazon-msk-to-deliver-high-throughput-and-faster-scaling-for-your-kafka-clusters/","date":1731003879000,"content":"<p>Today, we’re announcing the general availability of Express brokers, a new broker type for <a href=\"https://aws.amazon.com/msk\">Amazon Managed Streaming for Apache Kafka (Amazon MSK)</a>. It’s designed to deliver up to three times more throughput per-broker, scale up to 20 times faster, and reduce recovery time by 90 percent as compared to Standard brokers running Apache Kafka. Express brokers come preconfigured with Kafka best practices by default, support Kafka APIs, and provide the same low latency performance that Amazon MSK customers expect, so they can continue using existing client applications without any changes.</p> \n<p>Express brokers provide improved compute and storage elasticity for Kafka applications when using Amazon MSK provisioned clusters. Amazon MSK is a fully-managed AWS service that makes it easier for you to build and run highly available and scalable applications based on Apache Kafka.</p> \n<p>Let’s dive deeper into some of the key features that Express brokers have and the benefits they provide:</p> \n<ul> \n <li><strong>Easier operations with hands-free storage management</strong> – Express brokers offer unlimited storage without preprovisioning, eliminating disk-related bottlenecks. Cluster sizing is simpler, requiring only ingress and egress throughput divided by recommended per-broker throughput. This removes the need for proactive disk capacity monitoring and scaling, simplifying cluster management and improving resilience by eliminating a potential failure source.</li> \n <li><strong>Fewer brokers with up to three times throughput per broker – </strong>Higher throughput per broker allows for smaller clusters for the same workload. Standard brokers’ throughput must account for client traffic and background operations, with <code>m7g.16xl</code> Standard brokers safely handling 154 MBps ingress. Express brokers use opinionated settings and resource isolation, enabling <code>m7g.16xl</code> size instances to safely manage up to 500 MBps ingress without compromising performance or availability during cluster events.</li> \n <li><strong>Higher utilization with 20 times faster scaling</strong> – Express brokers reduce data movement during scaling, making them up to 20 times faster than Standard brokers. This allows for more quicker and reliable cluster resizing. You can monitor each broker’s ingress throughput capacity and add brokers within minutes, eliminating the need for over-provisioning in anticipation of traffic spikes.</li> \n <li><strong>Higher resilience with 90 percent faster recovery</strong> – Express brokers are designed for mission-critical applications requiring high resilience. They come preconfigured with best-practice defaults, including 3-way replication (RF=3), which reduce failures due to misconfiguration. Express brokers also recover 90 percent faster from transient failures compared to standard Apache Kafka brokers. Express brokers’ rebalancing and recovery use minimal cluster resources, simplifying capacity planning. This eliminates the risk of increased resource utilization and the need for continuous monitoring when right-sizing clusters.</li> \n</ul> \n<p>You have choice options in Amazon MSK depending on your workload and preference:</p> \n<table> \n <tbody> \n  <tr> \n   <td></td> \n   <td><strong>MSK provisioned</strong></td> \n   <td><strong>MSK Serverless</strong></td> \n  </tr> \n  <tr> \n   <td><strong>Standard brokers</strong></td> \n   <td><strong>Express brokers</strong></td> \n  </tr> \n  <tr> \n   <td><strong>Configuration range</strong></td> \n   <td>Most flexible</td> \n   <td>Flexible</td> \n   <td>Least flexible</td> \n  </tr> \n  <tr> \n   <td><strong>Cluster rebalancing</strong></td> \n   <td>Customer managed</td> \n   <td>Customer managed<br /> but up to 20x faster</td> \n   <td>MSK managed</td> \n  </tr> \n  <tr> \n   <td><strong>Capacity management</strong></td> \n   <td>Yes</td> \n   <td>Yes (compute only)</td> \n   <td>No</td> \n  </tr> \n  <tr> \n   <td><strong>Storage management</strong></td> \n   <td>Yes</td> \n   <td>No</td> \n   <td>No</td> \n  </tr> \n </tbody> \n</table> \n<p>Express brokers lower costs, provide higher resiliency, and lower operational overhead, making them the best choice for all Kafka workloads. If you prefer to use Kafka without managing any aspect of its capacity, its configuration, or how it scales, then you can choose <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/serverless.html\">Amazon MSK Serverless</a>. This provides a fully abstracted Apache Kafka experience that eliminates the need for any infrastructure management, scales automatically, and charges you on a pay-per-use consumption model that doesn’t require you to optimize resource utilization.</p> \n<p><strong><u>Getting started with Express brokers in Amazon MSK</u></strong><br /> To get started with Express brokers, you can use the <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/bestpractices.html\">Sizing and Pricing worksheet</a> that Amazon MSK provides. This worksheet helps you estimate the cluster size you’ll need to accommodate your workload and also gives you a rough estimate of the total monthly cost you’ll incur.</p> \n<p>The throughput requirements of your workload are the primary factor in the size of your cluster. You should also consider other factors, such as partition and connection count to arrive at the size and number of brokers you’ll need for your cluster. For example, if your streaming application needs 30 MBps of data ingress (write) and 80 MBps data egress (read) capacity, you can use three <code>express.m7g.large</code> brokers to meet your throughput needs (assuming the partition count for your workload is within the maximum number of partitions that Amazon MSK recommends for an <code>m7g.large</code> instance).</p> \n<p>The following table shows the recommended maximum ingress, egress, and partition counts per instance size for sustainable and safe operations. You can learn more about these recommendations in the <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/bestpractices.html\">Best practices</a> section of Amazon MSK Developer Guide.</p> \n<table> \n <tbody> \n  <tr> \n   <td><strong>Instance size</strong></td> \n   <td><strong>Ingress (MBps)</strong></td> \n   <td><strong>Egress (MBps)</strong></td> \n  </tr> \n  <tr> \n   <td><code>express.m7g.large</code></td> \n   <td>15.6</td> \n   <td>31.2</td> \n  </tr> \n  <tr> \n   <td><code>express.m7g.4xlarge</code></td> \n   <td>124.9</td> \n   <td>249.8</td> \n  </tr> \n  <tr> \n   <td><code>express.m7g.16xlarge</code></td> \n   <td>500.0</td> \n   <td>1000.0</td> \n  </tr> \n </tbody> \n</table> \n<p>Once you have decided the number and size of Express brokers you’ll need for your workload, go to the <a href=\"https://console.aws.amazon.com/msk/\">AWS Management Console</a> or use the <code>CreateCluster</code> API to create an Amazon MSK provisioned cluster.</p> \n<p>When you create a new cluster on the <a href=\"https://console.aws.amazon.com/msk/home?#/clusters\">Amazon MSK console</a>, in the <strong>Broker type</strong> option, choose <strong>Express brokers</strong> and then select the mount of compute capacity that you want to provision for the broker. As you can see in the screen shot, you can use Apache Kafka 3.6.0 version and Graviton-based instances for Express brokers. You don’t need to preprovision storage for Express brokers.</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/29/2024-msk-express-broker-1.jpg\" width=\"1800\" height=\"1804\" /></p> \n<p>You can also customize some of these configurations to further fine-tune the performance of your clusters according to your own preferences. To learn more, visit <a href=\"https://docs.aws.amazon.com/console/msk/broker-types\">Express broker configurations</a> in the Amazon MSK developer guide.</p> \n<p>To create an MSK cluster in the <a href=\"https://aws.amazon.com/cli\">AWS Command Line Interface (AWS CLI)</a>, use the <code>create-cluster</code> command.</p> \n<pre><code>aws kafka create-cluster \\\n    --cluster-name \"channy-express-cluster\" \\\n    --kafka-version \"3.6.0\" \\\n    --number-of-broker-nodes 3 \\\n    --broker-node-group-info file://brokernodegroupinfo.json</code></pre> \n<p>A JSON file named <code>brokernodegroupinfo.json</code> specifies the three subnets over which you want Amazon MSK to distribute the broker nodes.</p> \n<pre><code>{\n    \"InstanceType\": \"express.m7g.large\",\n    \"BrokerAZDistribution\": \"DEFAULT\",\n    \"ClientSubnets\": [\n        \"subnet-0123456789111abcd\",\n        \"subnet-0123456789222abcd\",\n        \"subnet-0123456789333abcd\"\n    ]\n}</code></pre> \n<p>Once the cluster is created, you can use the bootstrap connection string to connect your clients to the cluster endpoints.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/29/2024-msk-express-broker-2.png\" width=\"2266\" height=\"2258\" /></p> \n<p>With Express brokers, you can scale vertically (changing instance size) or horizontally (adding brokers). Vertical scaling doubles throughput without requiring partition reassignment. Horizontal scaling adds brokers in sets of three and and allows you to create more partitions, but it requires partition reassignment for new brokers to serve traffic.</p> \n<p>A major benefit of Express brokers is that you can add brokers and rebalance partitions within minutes. On the other hand, rebalancing partitions after adding Standard brokers can take several hours. The graph below shows the time it took to rebalance partitions after adding 3 Express brokers to a cluster and reassigning 2000 partitions to each of the new brokers.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/05/2024-Scaling-time_Express-brokers.png\" width=\"2841\" height=\"1691\" /></p> \n<p>As you can see, it took approximately 10 minutes to reassign these partitions and utilize the additional capacity of the new brokers. When we ran the same experiment on an equivalent cluster comprising of Standard brokers, partition reassignment took over 24hours.</p> \n<p>To learn more about the partition reassignment, visit <a href=\"https://kafka.apache.org/documentation/#basic_ops_cluster_expansion\">Expanding your cluster</a> in the Apache Kafka documentation.</p> \n<p><strong><u>Things to know</u></strong><br /> Here are some things you should know about Express brokers:</p> \n<ul> \n <li><strong>Data migration</strong> – You can migrate the data in your existing Kafka or MSK cluster to a cluster composed of Express brokers using <a href=\"https://aws.amazon.com/msk/features/msk-replicator/\">Amazon MSK Replicator</a>, which copies both the data and the metadata of your cluster to a new cluster.</li> \n <li><strong>Monitoring </strong>– You can monitor your cluster composed of Express brokers in the cluster and at the broker level with Amazon CloudWatch metrics and enable open monitoring with Prometheus to expose metrics using the JMX Exporter and the Node Exporter.</li> \n <li><strong>Security </strong>– Just like with other broker types, Amazon MSK integrates with <a href=\"https://aws.amazon.com/kms\">AWS Key Management Service (AWS KMS)</a> to offer transparent server-side encryption for the storage in Express brokers. When you create an MSK cluster with Express brokers, you can specify the AWS KMS key that you want Amazon MSK to use to encrypt your data at rest. If you don’t specify a KMS key, Amazon MSK creates an AWS managed key for you and uses it on your behalf.</li> \n</ul> \n<p><strong><u>Now available</u></strong><br /> The Express broker type is available today in the US East (Ohio), US East (N. Virginia), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), Europe (Frankfurt), and Europe (Ireland), and Europe (Stockholm) Regions.</p> \n<p>You pay an hourly rate for Apache Kafka broker instance usage (billed at one-second resolution) for Express brokers, with varying fees depending on the size of the broker instance and active brokers in your MSK clusters. You also pay a per-GB rate for data written to an Express broker (billed at per-byte resolution). To learn more, visit the <a href=\"https://aws.amazon.com/msk/pricing/\">Amazon MSK pricing</a> page.</p> \n<p>Give Express brokers for Amazon MSK a try in the <a href=\"https://console.aws.amazon.com/msk/home?#/clusters\">Amazon MSK console</a>. For more information, visit the <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/what-is-msk.html\">Amazon MSK Developer Guide</a> and send feedback to <a href=\"https://repost.aws/tags/TAhybM_7u2QN2GsWOc4aJVDg/amazon-managed-streaming-for-apache-kafka-amazon-msk\">AWS re:Post for Amazon MSK</a> or through your usual AWS support contacts.</p> \n<p>— <a href=\"https://twitter.com/channyun\">Channy</a></p>","author":"Channy Yun (윤석찬)","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"e4dfac88623a2f5c643c5dd79d31ca31b8a7b696463cf4aa031956250d6f93a2","category":"Tech"}