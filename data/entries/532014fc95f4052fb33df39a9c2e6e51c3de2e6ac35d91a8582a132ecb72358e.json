{"title":"AWS Entity Resolution: Match and Link Related Records from Multiple Applications and Data Stores","link":"https://aws.amazon.com/blogs/aws/aws-entity-resolution-match-and-link-related-records-from-multiple-applications-and-data-stores/","date":1690386242000,"content":"<p>As organizations grow, the records that contain information about customers, businesses, or products tend to be increasingly fragmented and siloed across applications, channels, and data stores. Because information can be gathered in different ways, there is also the issue of different but equivalent data, such as for street addresses (“5th Avenue” and “5th Ave”). As a consequence, it’s not easy to link related records together to create a unified view and gain better insights.</p> \n<p>For example, companies want to run advertising campaigns to reach consumers across multiple applications and channels with personalized messaging. Companies often have to deal with disparate data records that contain incomplete or conflicting information, creating a difficult matching process.</p> \n<p>In the retail industry, companies have to reconcile, across their supply chain and stores, products that use multiple and different product codes, such as stock keeping units (SKUs), universal product codes (UPCs), or proprietary codes. This prevents them from analyzing information quickly and holistically.</p> \n<p>One way to address this problem is to build bespoke data resolution solutions such as complex SQL queries interacting with multiple databases, or train machine learning (ML) models for record matching. But these solutions take months to build, require development resources, and are costly to maintain.</p> \n<p>To help you with that, today we’re introducing <a href=\"https://aws.amazon.com/entity-resolution/?trk=167fbc99-831b-4689-b95a-78b97f568a0d&amp;sc_channel=el\">AWS Entity Resolution</a>, an ML-powered service that helps you match and link related records stored across multiple applications, channels, and data stores. You can get started in minutes configuring entity resolution workflows that are flexible, scalable, and can seamlessly connect to your existing applications.</p> \n<p>AWS Entity Resolution offers advanced matching techniques, such as rule-based matching and machine learning models, to help you accurately link related sets of customer information, product codes, or business data codes. For example, you can use AWS Entity Resolution to create a unified view of your customer interactions by linking recent events (such as ad clicks, cart abandonment, and purchases) into a unique entity ID, or better track products that use different codes (like SKUs or UPCs) across your stores.</p> \n<p>With AWS Entity Resolution, you can improve matching accuracy and protect data security while minimizing data movement because it reads records where they already live. Let’s see how that works in practice.</p> \n<p><span><strong>Using AWS Entity Resolution<br /> </strong></span>As part of my analytics platform, I have a comma-separated values (CSV) file containing one million fictitious customers in an <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> bucket. These customers come from a loyalty program but can have applied through different channels (online, in store, by post), so it’s possible that multiple records relate to the same customer.</p> \n<p>This is the format of the data in the CSV file:</p> \n<div> \n <pre><code>loyalty_id, rewards_id, name_id, first_name, middle_initial, last_name, program_id, emp_property_nbr, reward_parent_id, loyalty_program_id, loyalty_program_desc, enrollment_dt, zip_code,country, country_code, address1, address2, address3, address4, city, state_code, state_name, email_address, phone_nbr, phone_type</code></pre> \n</div> \n<p>I use an <a href=\"https://aws.amazon.com/glue/\">AWS Glue</a> crawler to automatically determine the content of the file and keep the metadata table updated in the data catalog so that it’s available for my analytics jobs. Now, I can use the same setup with AWS Entity Resolution.</p> \n<p>In the <a href=\"https://console.aws.amazon.com/entityresolution/home\">AWS Entity Resolution console</a>, I choose <strong>Get started</strong> to see how to set up a matching workflow.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-workflows.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-workflows-1024x454.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"454\" /></a></p> \n<p>To create a matching workflow, I first need to define my data with a schema mapping.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-schema-mappings.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-schema-mappings-1024x435.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"435\" /></a></p> \n<p>I choose <strong>Create schema mapping</strong>, enter a name and description, and select the option to import the schema from <a href=\"https://aws.amazon.com/glue/\">AWS Glue</a>. I could also define a custom schema using a step-by-step flow or a JSON editor.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-schema-details.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-schema-details.png\" alt=\"Console screenshot.\" width=\"1668\" height=\"1142\" /></a></p> \n<p>I select the AWS Glue database and table from the two dropdowns to import columns and pre-populate the input fields.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-schema-glue.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-schema-glue.png\" alt=\"Console screenshot.\" width=\"1666\" height=\"460\" /></a></p> \n<p>I select the <strong>Unique ID</strong> from the dropdown. The unique ID is the column that can distinctly reference each row of my data. In this case, it’s the <code>loyalty_id</code> in the CSV file.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-schema-unique-id.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-schema-unique-id-1024x258.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"258\" /></a></p> \n<p>I select the input fields that are going to be used for matching. In this case, I choose the columns from the dropdown that can be used to recognize if multiple records are related to the same customer. If some columns aren’t required for matching but are required in the output file, I can optionally add them as pass-through fields. I choose <strong>Next</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-schema-input-fields.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-schema-input-fields-1024x725.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"725\" /></a></p> \n<p>I map the input fields to their input type and match key. In this way, AWS Entity Resolution knows how to use these fields to match similar records. To continue, I choose <strong>Next</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-schema-input-fields-matching.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-schema-input-fields-matching.png\" alt=\"Console screenshot.\" width=\"1670\" height=\"1204\" /></a></p> \n<p>Now, I use grouping to better organize the data I need to compare. For example, the <strong>First name</strong>, <strong>Middle name</strong>, and <strong>Last name</strong> input fields can be grouped together and compared as a <strong>Full name</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-schema-grouping.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-schema-grouping.png\" alt=\"Console screenshot.\" width=\"1592\" height=\"934\" /></a></p> \n<p>I also create a group for the <strong>Address</strong> fields.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-schema-grouping-address.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-schema-grouping-address.png\" alt=\"Console screenshot.\" width=\"1592\" height=\"1014\" /></a></p> \n<p>I choose <strong>Next</strong> and review all configurations. Then, I choose <strong>Create schema mapping</strong>.</p> \n<p>Now that I’ve created the schema mapping, I choose <strong>Matching workflows</strong> from the navigation pane and then <strong>Create matching workflow</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-workflow.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-workflow-1024x549.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"549\" /></a></p> \n<p>I enter a name and a description. Then, to configure the input data, I select the AWS Glue database and table and the schema mapping.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-workflow-input.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-workflow-input-1024x450.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"450\" /></a></p> \n<p>To give the service access to the data, I select a service role that I configured previously. The service role gives access to the input and output S3 buckets and the AWS Glue database and table. If the input or output buckets are encrypted, the service role can also give access to the <a href=\"https://aws.amazon.com/kms/\">AWS Key Management Service (AWS KMS)</a> keys needed to encrypt and decrypt the data. I choose <strong>Next</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-workflow-access.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-workflow-access.png\" alt=\"Console screenshot.\" width=\"1590\" height=\"608\" /></a></p> \n<p>I have the option to use a rule-based or ML-powered matching method. Depending on the method, I can use a manual or automatic processing cadence to run the matching workflow job. For now, I select <strong>Machine learning matching</strong> and <strong>Manual</strong> for the <strong>Processing cadence</strong>, and then choose <strong>Next</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-workflow-matching-method.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-workflow-matching-method.png\" alt=\"Console screenshot.\" width=\"1372\" height=\"892\" /></a></p> \n<p>I configure an S3 bucket as the output destination. Under <strong>Data format</strong>, I select <strong>Normalized data</strong> so that special characters and extra spaces are removed, and data is formatted to lowercase.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-workflow-output.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/24/aws-entity-resolution-workflow-output.png\" alt=\"Console screenshot.\" width=\"1588\" height=\"846\" /></a></p> \n<p>I use the default <strong>Encryption</strong> settings. For <strong>Data output</strong>, I use the default so that all input fields are included. For security, I can hide fields to exclude them from output or hash fields I want to mask. I choose <strong>Next</strong>.</p> \n<p>I review all settings and choose <strong>Create and run</strong> to complete the creation of the matching workflow and run the job for the first time.</p> \n<p>After a few minutes, the job completes. According to this analysis, of the 1 million records, only 835 thousand are unique customers. I choose <strong>View output in Amazon S3</strong> to download the output files.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-workflow-job.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/17/aws-entity-resolution-workflow-job-1024x191.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"191\" /></a></p> \n<p>In the output files, each record has the original unique ID (<code>loyalty_id</code> in this case) and a newly assigned <code>MatchID</code>. Matching records, related to the same customers, have the same <code>MatchID</code>. The <code>ConfidenceLevel</code> field describes the confidence that machine learning matching has that the corresponding records are actually a match.</p> \n<p>I can now use this information to have a better understanding of customers who are subscribed to the loyalty program.</p> \n<p><span><strong>Availability and Pricing</strong></span><br /> <a href=\"https://aws.amazon.com/entity-resolution/?trk=167fbc99-831b-4689-b95a-78b97f568a0d&amp;sc_channel=el\">AWS Entity Resolution</a> is generally available today in the following <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\">AWS Regions</a>: US East (Ohio, N. Virginia), US West (Oregon), Asia Pacific (Seoul, Singapore, Sydney, Tokyo), and Europe (Frankfurt, Ireland, London).</p> \n<p>With AWS Entity Resolution, you pay only for what you use based on the number of source records processed by your workflows. Pricing doesn’t depend on the matching method, whether it’s machine learning or rule-based record matching. For more information, see <a href=\"https://aws.amazon.com/entity-resolution/pricing/?trk=118e4ff8-759c-42ec-8891-04f27eaee1ee&amp;sc_channel=el\">AWS Entity Resolution pricing</a>.</p> \n<p>Using AWS Entity Resolution, you gain a deeper understanding of how data is linked. That helps you deliver new insights, enhance decision making, and improve customer experiences based on a unified view of their records.</p> \n<p><a href=\"https://aws.amazon.com/entity-resolution/?trk=167fbc99-831b-4689-b95a-78b97f568a0d&amp;sc_channel=el\"><strong>Simplify the way you match and link related records across applications, channels, and data stores with AWS Entity Resolution.</strong></a></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p> \n<hr /> \n<p>P.S. We’re focused on improving our content to provide a better customer experience, and we need your feedback to do so. Please take <a href=\"https://amazonmr.au1.qualtrics.com/jfe/form/SV_234fKSz305XaQpE\">this quick survey</a> to share insights on your experience with the AWS Blog. Note that this survey is hosted by an external company, so the link does not lead to our website. AWS handles your information as described in the <a href=\"https://aws.amazon.com/privacy/\">AWS Privacy Notice</a>.</p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"532014fc95f4052fb33df39a9c2e6e51c3de2e6ac35d91a8582a132ecb72358e","category":"Tech"}