{"title":"Modern CSS Tooltips And Speech Bubbles (Part 1)","link":"https://smashingmagazine.com/2024/03/modern-css-tooltips-speech-bubbles-part1/","date":1709294400000,"content":"<p>In <a href=\"https://www.smashingmagazine.com/2023/11/css-responsive-multi-line-ribbon-shapes-part1/\">a previous article</a>, we explored ribbon shapes and different ways to approach them using clever combinations of CSS gradients and <code>clip-path()</code>. This time, I’d like to explore another shape, one that you’ve likely had to tackle at least once in your front-end life: <strong>tooltips</strong>. You know what we’re talking about, those little things that look like speech bubbles from comic books. They’re everywhere in the wild, from a <a href=\"https://css-tricks.com/long-hover/\">hover effect for buttons</a> to <a href=\"https://css-tricks.com/introducing-trashy-css/\">the text messaging app on your phone</a>.</p>\n<p>The shapes may look easy to make in CSS at first glance, but it always ends with a lot of struggles. For example, how do you adjust the position of the tail to indicate whether the tooltip is coming from a left, right, or center position? There are <a href=\"https://www.smashingmagazine.com/2021/02/designing-tooltips-mobile-user-interfaces/\">plenty of considerations to take into account</a> when making tooltips — including <a href=\"https://css-tricks.com/can-css-prevent-tooltips-from-overflowing/\">overflowage</a>, <a href=\"https://css-tricks.com/collision-detection/\">collision detection</a>, and <a href=\"https://css-tricks.com/exploring-what-the-details-and-summary-elements-can-do/\">semantics</a> — but it’s the shape and direction of the tail that I want to focus on because I often see inflexible fixed units used to position them.</p>\n<p>Forget what you already know about tooltips because in this article, we will start from zero, and you will learn how to build a tooltip with minimal markup powered by modern CSS that provides flexibility to configure the component by adjusting CSS variables. We are not going to build one or two shapes, but… <em>100 different shapes!</em></p>\n<p>That may sound like we’re getting into a super-long article, but actually, we can easily get there by adjusting a few values. In the end, you will have a back pocket full of CSS tricks that can be combined to create any shape you want.</p>\n<p>And guess what? I’ve already created <a href=\"https://css-generators.com/tooltip-speech-bubble/\">an online collection of 100 different tooltip shapes</a> where you can easily copy and paste the code for your own use, but stay with me. You’re going to want to know the secret to unlocking hundreds of possibilities with the least possible code.</p>\n<p>We’ll start with the shapes themselves, discussing how we can cut out the bubble and tail by combining CSS gradients and clipping. Then, we’ll pick things back up in a second article dedicated to improving another common approach to tooltips using borders and custom shapes.</p>\nThe HTML\n<p>We’re only working with a single element:</p>\n<pre><code>&lt;div class=\"tooltip\"&gt;Your text content goes here&lt;/div&gt;\n</code></pre>\n\n<p>That’s the challenge: Create hundreds of tooltip variations in CSS with only a single element to hook into in the HTML.</p>\nA Simple Tooltip Tail\n<p>I’m going to skip right over the basic rectangular shape; you know how to set a <code>width</code> and <code>height</code> (or <code>aspect-ratio</code>) on elements. Let’s start with <a href=\"https://css-tip.com/simple-tooltip/\">the simplest shape</a> for the tooltip’s tail, one that can be accomplished with only two CSS properties:</p>\n<pre><code>.tooltip {\n  /* tail dimension */\n  --b: 2em; /* base */\n  --h: 1em; /* height*/\n\n  border-image: fill 0 // var(--h)\n    conic-gradient(#CC333F 0 0); /* the color  */\n  clip-path: \n    polygon(0 100%, 0 0, 100% 0, 100% 100%,\n      calc(50% + var(--b) / 2) 100%,\n      50% calc(100% + var(--h)),\n      calc(50% - var(--b) / 2) 100%);\n}\n</code></pre>\n\n<p>The <code>border-image</code> property creates an “overflowing color” while <code>clip-path</code> defines the shape of the tooltip with <code>polygon()</code> coordinates. (Speaking of <code>border-image</code>, <a href=\"https://www.smashingmagazine.com/2024/01/css-border-image-property/\">I wrote a deep-dive on it</a> and explain how it might be the only CSS property that supports double slashes in the syntax!)</p>\n<p>The tooltip’s tail is placed at the bottom center, and we have two variables to control its dimensions:</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-part1/1-border-image-coloration-clip-path-polygon.png\" /></p>\n<p>We can do the exact same thing in more intuitive ways, like defining a background and then border (or padding) to create space for the tail:</p>\n<pre><code>background: #CC333F;\nborder-bottom: var(--h) solid #0000;\n</code></pre>\n\n<p>…or using <code>box-shadow</code> (or <code>outline</code>) for the outside color:</p>\n<pre><code>background: #CC333F;\nbox-shadow: 0 0 0 var(--h) #CC333F;\n</code></pre>\n\n<p>While these approaches are indeed easier, they require an extra declaration compared to the single <code>border-image</code> declaration we used. Plus, we’ll see later that <code>border-image</code> is really useful for accomplishing more complex shapes.</p>\n<p>Here is a demo with the different directions so you can see how easy it is to adjust the above code to change the tail’s position.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-part1/2-rectangle-tooltip.png\" /></p>\n<p>We can fix this by setting limits to some values so the tail never falls outside the container. Two points of the polygon are concerned with the fix.</p>\n<p>This:</p>\n<pre><code>calc(var(--p) + var(--b) / 2) 100%\n</code></pre>\n\n<p>…and this:</p>\n<pre><code>calc(var(--p) - var(--b) / 2) 100%\n</code></pre>\n\n<p>The first <code>calc()</code> needs to be clamped to <code>100%</code> to avoid the overflow from the right side, and the second one needs to be clamped to <code>0%</code> to avoid the overflow from the left side. We can use the <code>min()</code> and <code>max()</code> functions to establish the range limits:</p>\n<pre><code>clip-path: \n  polygon(0 100%, 0 0, 100% 0, 100% 100%,</code>\n    <code>min(100%, var(--p) + var(--b) / 2) 100%,</code>\n    <code>var(--p) calc(100% + var(--h)),</code>\n    <code>max(0%, var(--p) - var(--b) / 2) 100%);\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-part1/3-tail-left-right-edges-tooltip.png\" /></p>\nAdjusting The Tail Shape\n<p>Let’s integrate another variable, <code>--x</code>, into the <code>clip-path()</code> and use it to adjust the shape of the tail:</p>\n<pre><code>.tooltip {\n  /* tail dimension */\n  --b: 2em; /* base */\n  --h: 1em; /* height*/\n\n  --p: 50%;  /* tail position */</code>\n  <code>--x: -2em; /* tail shape */</code>\n\n  <code>border-image: fill 0 // 9999px\n    conic-gradient(#CC333F 0 0); /* the color  */\n  clip-path: \n    polygon(0 100%, 0 0, 100% 0, 100% 100%,\n      min(100%, var(--p) + var(--b) / 2) 100%,</code>\n      <code>calc(var(--p) + var(--x)) calc(100% + var(--h)),</code>\n      <code>max(0%, var(--p) - var(--b) / 2) 100%);\n}\n</code></pre>\n\n<p>The <code>--x</code> variable can be either positive or negative (using whatever unit you want, including percentages). What we’re doing is adding the variable that establishes the tail’s shape, <code>--x</code>, to the tail’s position, <code>--p</code>. In other words, we’ve updated this:</p>\n<pre><code>var(--p) calc(100% + var(--h))\n</code></pre>\n\n<p>…to this:</p>\n<pre><code>calc(var(--p) + var(--x)) calc(100% + var(--h))\n</code></pre>\n\n<p>And here is the outcome:</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-part1/4-variations-same-red-rectangular-tooltip.png\" /></p>\n<p>The tooltip’s tail points in either the right or left direction, depending on whether <code>--x</code> is a positive or negative value. Go ahead and use the range sliders in the following demo to see how the tooltip’s tail is re-positioned (<code>--p</code>) and re-shaped (<code>--x</code>) when adjusting two variables.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-part1/5-rectangular-tooltip-different-tale-positions.png\" /></p>\n<p>Note that I have updated the <code>border-image</code> outset to an impractically large value (<code>9999px</code>) instead of using the <code>--h</code> variable. The shape of the tail can be any type of triangle and can take a bigger area. Since there’s no way for us to know the exact value of the outset, we use that big value to make sure we have enough room to fill the tail in with color, no matter its shape.</p>\n<p>Does the outset concept look strange to you? I know that working with <code>border-image</code> isn’t something many of us do all that often, so if this approach is tough to wrap your head around, definitely go check out <a href=\"https://www.smashingmagazine.com/2024/01/css-border-image-property/\">my <code>border-image</code> article</a> for a thorough demonstration of how it works.</p>\nWorking With Gradients\n<p>Most of the trouble starts when we want to color the tooltip with a gradient instead of a flat color. Applying one color is simple — even with older techniques — but when it comes to gradients, it’s not easy to make the tail color flow smoothly into the container’s color.</p>\n<p>But guess what? That’s no problem for us because we are already using a gradient in our <code>border-image</code> declaration!</p>\n<pre><code>border-image: fill 0 // var(--h)\n  conic-gradient(#CC333F 0 0);\n</code></pre>\n\n<p><code>border-image</code> only accepts gradients or images, so to produce a solid color, I had to use a gradient consisting of just one color. But if you change it into a “real” gradient that transitions between two or more colors, then you get your tooltip gradient. That’s all!</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-part1/6-steps-create-rounded-tooltip-corners-sequential-order.png\" /></p>\n<p>We start by declaring a <code>background</code> and <code>border-radius</code> on the <code>.tooltip</code>. Nothing fancy. Then, we move to the <code>border-image</code> property so that we can add a bar (highlighted in red in the last figure) that slightly overflows the container from the bottom. This part is a bit tricky, and here I invite you to read <a href=\"https://www.smashingmagazine.com/2024/01/css-border-image-property/\">my previous article about <code>border-image</code></a> to understand this bit of CSS magic. From there, we add the <code>clip-path</code> and get our final shape.</p>\n<div>\n<pre><code>.tooltip {\n  /* triangle dimension */\n  --b: 2em; /* base */\n  --h: 1em; /* height */\n\n--p: 50%; /<em> position  </em>/\n--r: 1.2em; /<em> the radius </em>/\n--c: #4ECDC4;\n\nborder-radius: var(--r);\nclip-path: polygon(0 100%, 0 0, 100% 0, 100% 100%,\nmin(100%, var(--p) + var(--b) / 2) 100%,\nvar(--p) calc(100% + var(--h)),\nmax(0%, var(--p) - var(--b) / 2) 100%);\nbackground: var(--c);\nborder-image: conic-gradient(var(--c) 0 0) fill 0/\nvar(--r) calc(100% - var(--p) - var(--b) / 2) 0 calc(var(--p) - var(--b) / 2)/\n0 0 var(--h) 0;\n} </code></pre>\n\n</div>\n\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-part1/7-jagged-edge-tail-tooltip.png\" /></p>\n<p>This visual glitch happens when the <code>border-image</code> overlaps with the rounded corners. To fix this, we need to adjust the <code>border-radius</code> value based on the tail’s position (<code>--p</code>).</p>\n<p>We are not going to update all the radii, only the bottom ones and, more precisely, the horizontal values. I want to remind you that <code>border-radius</code> accepts up to eight values — each corner takes two values that set the horizontal and vertical directions — and in our case, we will update the horizontal value of the bottom-left and bottom-right corners:</p>\n<div>\n<pre><code>border-radius:\n  /* horizontal values */\n  var(--r) \n  var(--r) \n  min(var(--r),100% - var(--p) - var(--b)/2) /* horizontal bottom-right */\n  min(var(--r),var(--p) - var(--b)/2) /* horizontal bottom-left */\n  /\n  /* vertical values */\n  var(--r)\n  var(--r)\n  var(--r)\n  var(--r)\n</code></pre>\n</div>\n\n<p>All the corner values are equal to <code>--r</code>, except for the bottom-left and bottom-right corners. Notice the forward slash (<code>/</code>), as it is part of the syntax that separates the horizontal and vertical radii values.</p>\n<p>Now, let’s dig in and understand what is happening here. For the bottom-left corner, when the position of the tail is on the right, the position (<code>--p</code>) variable value will be big in order to keep the radius equal to the radius (<code>--r</code>), which serves as the minimum value. But when the position gets closer to the left, the value of <code>--p</code> decreases and, at some point, becomes smaller than the value of <code>--r</code>. The result is the value of the radius slowly decreasing until it reaches <code>0</code>. It adjusts as the position updates!</p>\n<p>I know that’s a lot to process, and a visual aid usually helps. Try slowly updating the tail’s position in the following demo to get a clearer picture of what’s happening.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-part1/8-steps-correcting-tooltip-overflow.png\" /></p>\n<p>This time, the border image creates a horizontal bar along the bottom that is positioned directly under the element and extends outside of its boundary so that we have enough color for the tail when it’s closer to the edge.</p>\n<div>\n<pre><code>.tooltip {\n  /* tail dimension */\n  --b: 2em; /* base */\n  --h: 1.5em; /* height */\n\n--p: 50%; /<em> position </em>/\n--x: 1.8em; /<em> tail position </em>/\n--r: 1.2em; /<em> the radius </em>/\n--c: #4ECDC4;\n\nborder-radius: var(--r) var(--r) min(var(--r), 100% - var(--p) - var(--b) / 2) min(var(--r), var(--p) - var(--b) / 2) / var(--r);\nclip-path: polygon(0 100%, 0 0, 100% 0, 100% 100%,\nmin(100%, var(--p) + var(--b) / 2) 100%,\ncalc(var(--p) + var(--x)) calc(100% + var(--h)),\nmax(0%, var(--p) - var(--b) / 2) 100%);\nbackground: var(--c);\nborder-image: conic-gradient(var(--c) 0 0) 0 0 1 0 / 0 0 var(--h) 0 / 0 999px var(--h) 999px;\n} </code></pre>\n\n</div>\n\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-part1/9-visual-imperfections-tooltip.png\" /></p>\n<p>That’s why I do not use this approach when working with a simple isosceles triangle. This said, the method is perfectly fine, and in most cases, you may not see any visual glitches.</p>\nPutting Everything Together\n<p>We’ve looked at tooltips with tails that have equal sides, ones with tails that change shape, ones where the tail changes position and direction, ones with rounded corners, and ones that are filled in with gradients. What would it look like if we combined all of these examples into one mega-demo?</p>\n<p>We can do it, but not by combining the approaches we’ve covered. We need another method, this time using a pseudo-element. No <code>border-image</code> for this one, I promise!</p>\n<div>\n<pre><code>.tooltip {\n  /* triangle dimension */\n  --b: 2em; /* base */\n  --h: 1em; /* height */\n\n--p: 50%; /<em> position </em>/\n--r: 1.2em; /<em> the radius </em>/\n\nborder-radius: var(--r) var(--r) min(var(--r), 100% - var(--p) - var(--b) / 2) min(var(--r), var(--p) - var(--b) / 2) / var(--r);\nbackground: 0 0 / 100% calc(100% + var(--h))\nlinear-gradient(60deg, #CC333F, #4ECDC4); /<em> the gradient </em>/\nposition: relative;\nz-index: 0;\n}\n.tooltip:before {\ncontent: \"\";\nposition: absolute;\nz-index: -1;\ninset: 0 0 calc(-1*var(--h));\nbackground-image: inherit;\nclip-path:\npolygon(50% 50%,\nmin(100%, var(--p) + var(--b) / 2) calc(100% - var(--h)),\nvar(--p) 100%,\nmax(0%, var(--p) - var(--b) / 2) calc(100% - var(--h)));\n} </code></pre>\n\n</div>\n\n<p>The pseudo-element is used to create the tail at the bottom and notice how it inherits the gradient from the main element to simulate a continuous gradient that covers the entire shape.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-part1/10-continuous-gradient.png\" /></p>\n<p>Another important thing to note is the <code>background-size</code> declared in the <code>.tooltip</code>. The pseudo-element is covering a bigger area due to the negative bottom value, so we have to increase the height of the gradient so it covers the same area.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-css-tooltips-part1/11-different-tooltip-shapes.png\" /></p>\n<p>Can you figure it out? The code for all of them is included in <a href=\"https://css-generators.com/tooltip-speech-bubble/\">my tooltip collection</a> if you need a reference, but do try to make them yourself — it’s good exercise! Maybe you will find a different (or perhaps better) approach than mine.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"01434a25d01f669426e54075695be033ef03b63ad10d264936d14594aaaf1146","category":"Tech"}