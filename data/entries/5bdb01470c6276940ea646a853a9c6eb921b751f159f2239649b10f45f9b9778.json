{"title":"Introducing queryable object metadata for Amazon S3 buckets (preview)","link":"https://aws.amazon.com/blogs/aws/introducing-queryable-object-metadata-for-amazon-s3-buckets-preview/","date":1733244432000,"content":"<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/12/s3_astro_1.png\" width=\"450\" height=\"450\" />AWS customers make use of <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> at an incredible scale, regularly creating individual buckets that contain billions or trillions of objects! At that scale, finding the objects which meet particular criteria — objects with keys that match a pattern, objects of a particular size, or objects with a specific tag — becomes challenging. Our customers have had to build systems that capture, store, and query for this information. These systems can become complex and hard to scale, and can fall out of sync with the actual state of the bucket and the objects within.</p> \n<p><span><strong>Rich Metadata</strong></span><br /> Today we are enabling in preview automatic generation of metadata that is captured when S3 objects are added or modified, and stored in fully managed <a href=\"https://iceberg.apache.org/\">Apache Iceberg</a> tables. This allows you to use Iceberg-compatible tools such as <a href=\"https://aws.amazon.com/athena\">Amazon Athena</a>, <a href=\"https://aws.amazon.com/redshift/\">Amazon Redshift</a>, <a href=\"https://quicksight.aws\">Amazon QuickSight</a>, and <a href=\"https://spark.apache.org/\">Apache Spark</a> to easily and efficiently query the metadata (and find the objects of interest) at any scale. As a result, you can quickly find the data that you need for your analytics, data processing, and AI training workloads.</p> \n<p>For video inference responses stored in S3, <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a> will annotate the content it generates with metadata that will allow you to identify the content as AI-generated, and to know which model was used to generate it.</p> \n<p>The metadata schema contains over 20 elements including the bucket name, object key, creation/modification time, storage class, encryption status, tags, and user metadata. You can also store additional, application-specific descriptive information in a separate table and then join it with the metadata table as part of your query.</p> \n<p><span><strong>How it Works</strong></span><br /> You can enable capture of rich metadata for any of your S3 buckets by specifying the location (an S3 table bucket and a table name) where you want the metadata to be stored. Capture of updates (object creations, object deletions, and changes to object metadata) begins right away and will be stored in the table within minutes. Each update generates a new row in the table, with a record type (<code>CREATE</code>, <code>UPDATE_METADATA</code>, or <code>DELETE</code>) and a sequence number. You can retrieve the historical record for a given object by running a query that orders the results by sequence number.</p> \n<p><span><strong>Enabling and Querying Metadata</strong></span><br /> I start by creating a table bucket for my metadata using the <code>create-table-bucket</code> command (this can also be done from the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a> or with an API call):</p> \n<div> \n <pre><code>$ aws s3tables create-table-bucket --name jbarr-table-bucket-1 --region us-east-2\n--------------------------------------------------------------------------------\n|                               CreateTableBucket                              |\n+-----+------------------------------------------------------------------------+\n|  arn|  arn:aws:s3tables:us-east-2:123456789012:bucket/jbarr-table-bucket-1   |\n+-----+------------------------------------------------------------------------+\n</code></pre> \n</div> \n<p>Then I specify the table bucket (by ARN) and the desired table name by putting this JSON into a file (I’ll call it <code>config.json</code>):</p> \n<div> \n <pre><code>{\n  \"S3TablesDestination\": {\n    \"TableBucketArn\": \"arn:aws:s3tables:us-east-2:123456789012:bucket/jbarr-table-bucket-1\",\n    \"TableName\": \"jbarr_data_bucket_1_table\"\n  }\n}</code></pre> \n</div> \n<p>And then I attach this configuration to my data bucket (the one that I want to capture metadata for):</p> \n<div> \n <pre><code>$ aws s3api create-bucket-metadata-table-configuration \\\n  --bucket jbarr-data-bucket-1 \\\n  --metadata-table-configuration file://./config.json \\\n  --region us-east-2</code></pre> \n</div> \n<p>For testing purposes I installed Apache Spark on an EC2 instance and after a little bit of setup I was able to run queries by referencing the <strong>Amazon S3 Tables Catalog for Apache Iceberg</strong> package and adding the metadata table (as <code>mytablebucket</code>) to the command line:</p> \n<div> \n <pre><code>$ bin/spark-shell \\\n--packages org.apache.iceberg:iceberg-spark-runtime-3.4_2.12:1.6.0 \\\n--jars ~/S3TablesCatalog.jar \\\n--master yarn \\\n--conf \"spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions\" \\\n--conf \"spark.sql.catalog.mytablebucket=org.apache.iceberg.spark.SparkCatalog\" \\\n--conf \"spark.sql.catalog.mytablebucket.catalog-impl=com.amazon.s3tables.iceberg.S3TablesCatalog\" \\\n--conf \"spark.sql.catalog.mytablebucket.warehouse=arn:aws:s3tables:us-east-2:123456789012:bucket/jbarr-table-bucket-1\"</code></pre> \n</div> \n<p>Here is the current schema for the Iceberg table:</p> \n<div> \n <pre><code>scala&gt; spark.sql(\"describe table mytablebucket.aws_s3_metadata.jbarr_data_bucket_1_table\").show(100,35)\n\n+---------------------+------------------+-----------------------------------+\n|             col_name|         data_type|                            comment|\n+---------------------+------------------+-----------------------------------+\n|               bucket|            string|   The general purpose bucket name.|\n|                  key|            string|The object key name (or key) tha...|\n|      sequence_number|            string|The sequence number, which is an...|\n|          record_type|            string|The type of this record, one of ...|\n|     record_timestamp|     timestamp_ntz|The timestamp that's associated ...|\n|           version_id|            string|The object's version ID. When yo...|\n|     is_delete_marker|           boolean|The object's delete marker statu...|\n|                 size|            bigint|The object size in bytes, not in...|\n|   last_modified_date|     timestamp_ntz|The object creation date or the ...|\n|                e_tag|            string|The entity tag (ETag), which is ...|\n|        storage_class|            string|The storage class that's used fo...|\n|         is_multipart|           boolean|The object's upload type. If the...|\n|    encryption_status|            string|The object's server-side encrypt...|\n|is_bucket_key_enabled|           boolean|The object's S3 Bucket Key enabl...|\n|          kms_key_arn|            string|The Amazon Resource Name (ARN) f...|\n|   checksum_algorithm|            string|The algorithm that's used to cre...|\n|          object_tags|map&lt;string,string&gt;|The object tags that are associa...|\n|        user_metadata|map&lt;string,string&gt;|The user metadata that's associa...|\n|            requester|            string|The AWS account ID of the reques...|\n|    source_ip_address|            string|The source IP address of the req...|\n|           request_id|            string|The request ID. For records that...|\n+---------------------+------------------+-----------------------------------+\n</code></pre> \n</div> \n<p>Here’s a simple query that shows some of the metadata for the ten most recent updates:</p> \n<div> \n <pre><code>scala&gt; spark.sql(\"SELECT key,size, storage_class,encryption_status \\\n  FROM mytablebucket.aws_s3_metadata.jbarr_data_bucket_1_table \\\n  order by last_modified_date DESC LIMIT 10\").show(false)\n+--------------------+------+-------------+-----------------+                   \n|key                 |size  |storage_class|encryption_status|\n+--------------------+------+-------------+-----------------+\n|wnt_itco_2.png      |36923 |STANDARD     |SSE-S3           |\n|wnt_itco_1.png      |37274 |STANDARD     |SSE-S3           |\n|wnt_imp_new_1.png   |15361 |STANDARD     |SSE-S3           |\n|wnt_imp_change_3.png|67639 |STANDARD     |SSE-S3           |\n|wnt_imp_change_2.png|67639 |STANDARD     |SSE-S3           |\n|wnt_imp_change_1.png|71182 |STANDARD     |SSE-S3           |\n|wnt_email_top_4.png |135164|STANDARD     |SSE-S3           |\n|wnt_email_top_2.png |117171|STANDARD     |SSE-S3           |\n|wnt_email_top_3.png |55913 |STANDARD     |SSE-S3           |\n|wnt_email_top_1.png |140937|STANDARD     |SSE-S3           |\n+--------------------+------+-------------+-----------------+</code></pre> \n</div> \n<p>In a real-world situation I would query the table using one of the AWS or open source analytics tools that I mentioned earlier.</p> \n<p><span><strong>Console Access</strong></span><br /> I can also set up and manage the metadata configuration for my buckets using the Amazon S3 Console by clicking the <strong>Metadata</strong> tab:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/14/mdt_metadata_2-1.png\" width=\"894\" height=\"759\" /></p> \n<p><span><strong>Available Now</strong></span><br /> <a href=\"https://aws.amazon.com/s3/features/metadata/\">Amazon S3 Metadata</a> is available in preview now and you can start using it today in the US East (Ohio, N. Virginia) and US West (Oregon) AWS Regions.</p> \n<p>Integration with <a href=\"https://docs.aws.amazon.com/glue/latest/dg/catalog-and-crawler.html\">AWS Glue Data Catalog</a> is in preview, allowing you to query and visualize data—including S3 Metadata tables—using AWS Analytics services such as <a href=\"https://aws.amazon.com/athena\">Amazon Athena</a>, <a href=\"https://aws.amazon.com/redshift/\">Amazon Redshift</a>, <a href=\"https://aws.amazon.com/emr\">Amazon EMR</a>, and <a href=\"https://quicksight.aws\">Amazon QuickSight</a>.</p> \n<p>Pricing is based on the number updates (object creations, object deletions, and changes to object metadata) with an additional charge for storage of the metadata table. For more pricing information, visit the <a href=\"https://aws.amazon.com/s3/pricing\">S3 Pricing</a> page.</p> \n<p>I’m confident that you will be able to make use of this metadata in many powerful ways, and am looking forward to hearing about your use cases. Let me know what you think!</p> \n<p></p>\n<p>— <a href=\"https://twitter.com/jeffbarr\">Jeff</a>;</p>\n<p></p>","author":"Jeff Barr","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"5bdb01470c6276940ea646a853a9c6eb921b751f159f2239649b10f45f9b9778","category":"Tech"}