{"title":"Google Workspace users can now log in without a password, thanks to passkeys","link":"https://arstechnica.com/?p=1945740","date":1686081472000,"content":"<div>\n<figure>\n  <img src=\"https://cdn.arstechnica.net/wp-content/uploads/2023/05/passkey-target-illustration-800x450.jpg\" alt=\"Google Workspace users can now log in without a password, thanks to passkeys\" />\n      <p><a href=\"https://cdn.arstechnica.net/wp-content/uploads/2023/05/passkey-target-illustration.jpg\">Enlarge</a> (credit: Aurich Lawson | Getty Images)</p>  </figure>\n\n\n\n\n\n\n<div><a name=\"page-1\"></a></div>\n<p>Following up on <a href=\"https://arstechnica.com/gadgets/2023/05/passwordless-google-accounts-are-here-you-can-now-switch-to-passkey-only/\">Google's rollout</a> of passkey support for consumer Google accounts in May, Google has <a href=\"https://workspace.google.com/blog/product-announcements/major-security-innovation-passkeys\">now extended</a> password-less login to Google Workspace business accounts. Google calls the Workspace rollout an \"Open Beta\" and says \"more than 9 million organizations can allow their users to sign in to Google Workspace and Google Cloud accounts using passkeys instead of passwords.\"</p>\n<p>If you have not heard, passkeys are a new password replacement, with backing from Google, Apple, and Microsoft. Instead of presenting a password text box when logging in, passkey support—which needs to be built into your browser and OS—would have your machine swap public-private keypairs with the website using the \"<a href=\"https://webauthn.guide/\">WebAuthn</a>\" standard, and you're logged in. Most Passkey implementations make a portable device, typically your phone, a requirement for logging in, even if you're using a PC. Usually you'll pull out your phone and unlock it, sort of like app-based 2FA or SMS.</p>\n<p>The core concept is a reasonable evolution of the password. In the early days, passwords were supposed to be human-memorable, and you would manually type it into the text box. Then, password managers came along, and the best practice was generating a random string and pasting it into the website's text box, as a sort of hack for the old \"type it in\" system. Passkeys remove the text box entirely, and the browser sends that \"random string\" without the human intermediary. Passkeys improve password security because you can never write them down, they can't be reused across sites, and they are a lot harder to phish compared to passwords, because the browser decides which passkeys belong to which sites.</p></div><p><a href=\"https://arstechnica.com/?p=1945740#p3\">Read 2 remaining paragraphs</a> | <a href=\"https://arstechnica.com/?p=1945740&amp;comments=1\">Comments</a></p>","author":"Ron Amadeo","siteTitle":"Ars Technica","siteHash":"5b0ddf6e8923e49262a7894cfd77962733e43fbcc565a103b48373820b310636","entryHash":"1b50bcb97ed9b269dd79f0b0cb3550d6c2f8ac8a757ee571383dcd45c1259a1f","category":"Tech"}