{"title":"Solving the data security challenge for AI builders","link":"https://www.hashicorp.com/blog/solving-the-data-security-challenge-for-ai-builders","date":1720724400000,"content":"<p>This post takes a hands-on look at implementing a Microsoft Azure AI text search application that leverages the <a href=\"https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models\">Azure OpenAI</a> GPT3 models and <a href=\"https://www.pinecone.io/\">Pinecone</a> (a vector database) combined with <a href=\"https://www.vaultproject.io/\">HashiCorp Vault</a> to provide encryption and decryption capabilities that help protect the integrity of data in the <a href=\"https://blogs.nvidia.com/blog/what-is-retrieval-augmented-generation/\">RAG</a>-based, large language model (LLM) application. </p>\n\n<p>Generative AI chatbots such as ChatGPT, Google’s Gemini, and Microsoft’s Copilot, are powerful tools that generate human-like text based on user prompts. However, the ability of these generative AI systems to follow instructions also makes them vulnerable to misuse. “Prompt injections” can let attackers bypass safety guardrails and manipulate the model’s responses. For instance, users have coerced ChatGPT into endorsing harmful content or suggesting illegal activities. </p>\n\n<p>Even as companies work to improve LLM security, integrating AI chatbots into products that interact with the internet opens up new risks. Many companies are already using chatbots like ChatGPT for real-world actions such as booking flights or scheduling meetings. However, this could allow malicious actors to <a href=\"https://www.technologyreview.com/2023/04/03/1070893/three-ways-ai-chatbots-are-a-security-disaster/\">exploit these chatbots to create phishing attacks or leak private information</a>. </p>\n\n<h2>RAG makes it even more complicated</h2>\n\n<p>Securing retrieval-augmented generation (RAG) enhanced AI applications is complex. RAG involves fetching information from external sources to provide more accurate and comprehensive responses. For instance, RAG increases the risk of data leakage, because sensitive information from external databases could inadvertently be included in the model's responses. With the integration of diverse data sources, the ability to manipulate these sources becomes easier, as bad actors have more surface area to work with and inject harmful or misleading information that the AI system then disseminates.</p>\n\n<p>In this post’s example AI text search application, we use <a href=\"https://www.terraform.io/\">HashiCorp Terraform</a> to build an Azure OpenAI based application to provide inputs to the LLM prompt. It doesn't train the model, as the LLM is pre-trained using public data, but it does generate responses that are augmented by information from the additional context the user adds. The demo leverages Microsoft's Azure to create an image in the Azure Container Registry (ACR) and uses this image to build a container within Azure Kubernetes Service (AKS). We then use Terraform to create a <a href=\"https://developer.hashicorp.com/terraform/language/functions/templatefile\">template file</a> using the outputs from the Terraform outputs to deploy an application into the container.</p>\n\n<p>As part of this architecture, we also use Pinecone, a vector database, which plays a crucial role in storing and retrieving relevant information based on the AI search's queries. Pinecone enables efficient searching and retrieval of data, enhancing the AI's ability to provide accurate and relevant responses. However, this also introduces new vulnerabilities: Attackers could exploit weaknesses in the vector database, gaining unauthorized access to sensitive information stored within Pinecone. They could manipulate the database to alter the information retrieved by the AI, leading to inaccurate or harmful responses. Ensuring the security of the data in the vector database is essential to protect against such threats and maintain the integrity of the RAG system. <strong>This is where HashiCorp Vault can help</strong>.</p>\n\n<p>Building an encryption engine is challenging due to the complex nature of cryptographic algorithms and the rigorous security requirements needed to protect sensitive data. Cryptography demands a deep understanding to implement algorithms that are both secure and efficient. Additionally, to ensure there are no vulnerabilities or weaknesses that could be exploited by attackers, continued testing is required. Proper key management, access control, and compliance with various regulations further complicate the process. Even small errors in design or implementation can lead to significant security flaws, hence using a dedicated tool such as Vault, which is a robust tool for managing secrets and encrypting sensitive data, is an easy choice. Using Vault, sensitive information can be encrypted before it is stored in Pinecone so that the data remains protected even if the vector database is compromised. Vault also provides fine-grained access control, so only authorized entities can decrypt and access the sensitive information.</p>\n\n<h2><strong>How to secure a Pinecone-based RAG system</strong></h2>\n\n<p>To illustrate how HashiCorp Vault can enhance the security of a RAG system, we have built a demo using Pinecone as the vector database. This demo shows how to integrate Vault into the RAG workflow to encrypt and manage sensitive data.</p>\n\n<h3><strong>Architecture overview</strong></h3>\n\n<p>The architecture for this demo involves several components:</p>\n\n<ol>\n<li><strong>AI language model</strong>: Generates responses and retrieves relevant information based on user prompts.</li>\n<li><strong>Pinecone vector database</strong>: Stores and retrieves vectorized information.</li>\n<li><strong>HashiCorp Vault</strong>: Manages secrets and encrypts sensitive data.</li>\n<li><strong>The RAG workflow</strong>: Manages the interaction between the AI search, Pinecone, and Vault.</li>\n</ol>\n<img src=\"https://www.datocms-assets.com/2885/1720709764-gpt-rag.png\" alt=\"RAG\" /><h3><strong>Building the demo</strong></h3>\n\n<p>Creating this demo involves five steps:</p>\n\n<p>1. <strong>Set up the environment</strong>:\n- Clone this <a href=\"https://github.com/dawright22/azure-pinecone-terraform-deployment.git\">repository</a>.\n- Install Vault and configure it to handle secret management and encryption.</p>\n\n<p>2. <strong>Integrate Vault with Pinecone</strong>:\n- Modify the data flow to include encryption and decryption steps using Vault.\n- When storing data in Pinecone, first encrypt it using Vault's <a href=\"https://developer.hashicorp.com/vault/docs/secrets/transit\">transit secrets engine</a>.\n- When retrieving data from Pinecone, decrypt it using Vault before using it in the AI search.</p>\n\n<p>3. <strong>Implement the encryption and decryption logic</strong>:\n- Use Vault's API to handle encryption and decryption, as shown in this Python example code: </p>\n<pre><code>import hvac\n\n# Initialize the Vault client\nclient = hvac.Client(url='http://127.0.0.1:8200', token='YOUR_VAULT_TOKEN')\n\n# Encrypt data\nresponse = client.secrets.transit.encrypt_data(\n    name='your-transit-key',\n    plaintext='your-plain-text-data'\n)\nciphertext = response['data']['ciphertext']\n\n# Decrypt data\nresponse = client.secrets.transit.decrypt_data(\n    name='your-transit-key',\n    ciphertext=ciphertext\n)\nplaintext = response['data']['plaintext']</code></pre><p>4. <strong>Modify the RAG flow</strong>:\n- Update the RAG flow to include steps for encryption before storing data in Pinecone and decryption after retrieving data.\n- Ensure that the deployed application can handle the encrypted and decrypted data seamlessly.</p>\n\n<p>5. <strong>Test the integration</strong>:\n- Run the demo to ensure the data is correctly encrypted before storage and decrypted after retrieval.\n- Validate that the deployed application can generate accurate responses using the encrypted data workflow.</p>\n\n<p>See the full example in our <a href=\"https://github.com/dawright22/azure-pinecone-terraform-deployment.git\">git repository</a>.</p>\n\n<p>You can significantly enhance data security by integrating HashiCorp Vault into a RAG system using Pinecone and Terraform. This demo showcases how encryption and secrets management can protect sensitive information, mitigate risks, and boost compliance with data protection regulations.</p>\n\n<h2>More on accelerating AI adoption on Azure with HashiCorp</h2>\n\n<p>If you’d like to learn more about using HashiCorp products for AI use cases, check out these blog posts:</p>\n\n<ul>\n<li><a href=\"https://www.hashicorp.com/blog/building-a-secure-azure-reference-architecture-with-terraform\">Building a secure Azure reference architecture with Terraform </a></li>\n<li><a href=\"https://www.hashicorp.com/blog/building-a-secure-azure-reference-architecture-with-terraform\">Deploying securely into Azure architecture with HCP Terraform and HCP Vault</a></li>\n<li><a href=\"https://www.hashicorp.com/blog/accelerating-ai-adoption-on-azure-with-terraform\">Accelerating AI adoption on Azure with Terraform</a></li>\n<li><a href=\"https://registry.terraform.io/providers/pinecone-io/pinecone/latest\">Terraform Pinecone Provider</a></li>\n</ul>\n","author":"David Wright","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"d4a23fc71dd19af5779d494c51b0bc4444d49b219c760b2b4b15d234484aa52b","category":"Tech"}