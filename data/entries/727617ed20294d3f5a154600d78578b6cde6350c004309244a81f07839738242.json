{"title":"Terraform delivers launch-day support for Amazon S3 Tables, EKS Hybrid Nodes, and more at re:Invent","link":"https://www.hashicorp.com/blog/terraform-launch-day-support-amazon-s3-tables-eks-hybrid-nodes-and-more","date":1733331600000,"content":"<p>The Terraform AWS provider is a plugin that enables seamless integration between Terraform and the Amazon Web Services (AWS) cloud platform. It allows users to define, provision, and manage AWS resources using Terraform's declarative configuration language. This year, we reached the 10th anniversary of the Terraform AWS provider, crossed three billion downloads, and launched the AWS Cloud Control API provider. Developers always want to use new AWS services faster with Terraform and in this blog we will cover new launch-day support for AWS services just announced at re:Invent, and how developers can access more services faster with the AWS Cloud Control provider. </p>\n\n<p>In partnership with Amazon Web Services (AWS), we are excited to announce launch-day support for a variety of new features across a number of AWS services in the HashiCorp Terraform AWS provider. These new features span S3, S3 Express, EKS, ECS, etc. These new features include:</p>\n\n<ul>\n<li>S3 Tables: Iceberg on top of S3</li>\n<li>Amazon S3 Express One Zone: S3 Lifecycle expirations</li>\n<li>ECS: VPC Lattice</li>\n<li>ECS: Service AZ rebalancing</li>\n<li>EKS: Hybrid Nodes</li>\n<li>EKS: Auto Mode</li>\n</ul>\n\n<h2>S3 Tables: Iceberg on top of S3</h2>\n\n<p>Amazon S3 Tables deliver S3 storage that's specifically optimized for analytics workloads, improving query performance while also reducing costs. S3 Tables have built-in support for the <a href=\"https://iceberg.apache.org/\">Apache Iceberg</a> standard, which allows you to easily query tabular data in S3 using popular query engines like <a href=\"https://spark.apache.org/\">Apache Spark</a>. Customers can use S3 Tables to store tabular data such as daily purchase transactions, streaming sensor data, or ad impressions as an Iceberg table in Amazon S3, and then interact with that data using analytics capabilities such as row-level transactions, queryable table snapshots, and more, all managed by Amazon S3. Additionally, Table Buckets perform continuous table maintenance to automatically optimize query efficiency over time as your data lake scales and evolves. </p>\n\n<h2>Configuring S3 Tables in the Terraform AWS provider</h2>\n\n<p>To set up S3 Tables in the Terraform AWS provider, use the new <code>aws_s3tables_table_bucket</code> resource. You also need to use the existing resources to manage the new S3 Tables feature:</p>\n<pre><code>resource \"aws_s3tables_table_bucket\" \"example\" {\n  name = \"example-bucket\"\n}\nresource \"aws_s3tables_table_bucket_policy\" \"example\" {\n  resource_policy  = data.aws_iam_policy_document.table_bucket.json\n  table_bucket_arn = aws_s3tables_table_bucket.example.arn\n}\ndata \"aws_iam_policy_document\" \"table_bucket\" {\n  statement {\n    actions = [\"s3tables:*\"]\n    principals {\n      type        = \"AWS\"\n      identifiers = [data.aws_caller_identity.current.account_id]\n    }\n    resources = [\"${aws_s3tables_table_bucket.example.arn}/*\"]\n  }\n}\nresource \"aws_s3tables_namespace\" \"example\" {\n  namespace        = \"example-namespace\"\n  table_bucket_arn = aws_s3tables_table_bucket.example.arn\n}\nresource \"aws_s3tables_table\" \"example\" {\n  name             = \"example-table\"\n  namespace        = aws_s3tables_namespace.example\n  table_bucket_arn = aws_s3tables_namespace.example.table_bucket_arn\n  format           = \"ICEBERG\"\n}\nresource \"aws_s3tables_table_policy\" \"example\" {\n  resource_policy  = data.aws_iam_policy_document.table.json\n  name             = aws_s3tables_table.example.name\n  namespace        = aws_s3tables_table.example.namespace\n  table_bucket_arn = aws_s3tables_table.example.table_bucket_arn\n}\ndata \"aws_iam_policy_document\" \"table\" {\n  statement {\n    actions = [\"s3tables:*\"]\n    principals {\n      type        = \"AWS\"\n      identifiers = [data.aws_caller_identity.current.account_id]\n    }\n    resources = [\"${aws_s3tables_table.example.arn}\"]\n  }\n}\ndata \"aws_caller_identity\" \"current\" {}</code></pre><h2>EKS Hybrid Nodes</h2>\n\n<p>Amazon EKS Hybrid Nodes (EKS-H) brings a fully managed, cloud-consistent Kubernetes experience to customers, simplifying hybrid application delivery and standardizing operational practices across on-premises, edge, and cloud environments. With Amazon EKS, customers can use the same console, APIs, and tools they use when running workloads on AWS infrastructure. The Amazon EKS Hybrid Nodes release builds on the success of EKS by significantly simplifying the on-premises use case.</p>\n\n<h2>Configuring EKS Hybrid Nodes in the Terraform AWS provider</h2>\n\n<p>To set up EKS Hybrid Nodes in the Terraform AWS provider, use the existing <code>aws_eks_cluster</code> resource.</p>\n\n<h2>New AWS ephemeral resources</h2>\n\n<p>Terraform’s management of infrastructure involves handling secrets, such as private keys, certifications, API tokens, etc. As an example, a data source may be used to fetch a secret and write it to a managed resource’s attribute. Or a secret may be generated by a resource type (e.g. a random password) and written to another resource type like a dedicated secrets manager. </p>\n\n<p>Today, these secrets persist in the plan or state file. Since the secrets are stored in plain text within these artifacts, any mismanaged access to the files would compromise the secrets. We’ve been working on a feature to improve the security of this workflow, and it’s now ready for <a href=\"https://www.hashicorp.com/blog/terraform-1-10-improves-handling-secrets-in-state-with-ephemeral-values\">Terraform 1.10</a>.</p>\n\n<p>To enable secure handling of secrets, we’re introducing ephemeral values. These values are not stored in any artifact. Not the plan file, nor the statefile. They are not expected to remain consistent from plan to apply, or from one plan/apply round to the next.</p>\n\n<p>Within the Terraform 1.10 launch, we included three new ephemeral resources in v5.77.0 of the AWS provider:</p>\n\n<ul>\n<li><code>aws_kms_secrets</code></li>\n<li><code>aws_lambda_invocation</code></li>\n<li><code>aws_secretsmanager_secret_version</code></li>\n</ul>\n\n<h2>Configuring ephemeral resources in the Terraform AWS provider</h2>\n\n<p>AWS Secrets Manager can contain sensitive data such as usernames and passwords for critical infrastructure. The <code>aws_secretsmanager_secret_version</code> allows practitioners to retrieve these values while not writing them to state.</p>\n<pre><code>resource \"aws_secretsmanager_secret\" \"example\" {\n  name = “example”\n}\n\nresource \"aws_secretsmanager_secret_version\" \"example\" {\n  secret_id     = aws_secretsmanager_secret.example.id\n  secret_string = “example-secret”\n}\n\nephemeral \"aws_secretsmanager_secret_version\" \"example\" {\n  secret_id  = aws_secretsmanager_secret.example.id\n  version_id = aws_secretsmanager_secret_version.example.version_id\n}\n\noutput “secret_string” {\n  value     = ephemera.aws_secretsmanager_secret_version.example.secret_string\n  ephemeral = true\n}</code></pre><h2>Faster service support with the AWS Cloud Control provider</h2>\n\n<p>The AWS Cloud Control (AWSCC) provider, built around the AWS Cloud Control API and designed to bring new services to HashiCorp Terraform faster, is generally available. The 1.0 release of the AWSCC provider represents another step forward in our effort to offer launch day support of AWS services. This provider is automatically generated based on the Cloud Control API published by AWS, which means the latest features and services on AWS can be supported right away. </p>\n\n<p>Terraform users managing infrastructure on Amazon Web Services can typically use this provider alongside the existing <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest\">AWS provider</a>. Given its ability to automatically support new features and services, this AWSCC provider will increase the resource coverage and significantly reduce the time it takes to support new capabilities. AWS and HashiCorp will continue to deliver high-quality, consistent releases to both the AWS and AWSCC providers.</p>\n\n<h2>Learn more about AWS and HashiCorp</h2>\n\n<p>To learn the basics of Terraform using the AWS provider, follow the hands-on tutorials for <a href=\"https://developer.hashicorp.com/terraform/tutorials/aws-get-started\">getting started with Terraform on AWS</a> on our developer education platform.</p>\n\n<p>If you are completely new to Terraform, <a href=\"http://hashi.co/tf-cloud-bc\">sign up for Terraform Cloud</a> and get started using the Free offering today.</p>\n","author":"Mike Doheny","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"727617ed20294d3f5a154600d78578b6cde6350c004309244a81f07839738242","category":"Tech"}