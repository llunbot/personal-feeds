{"title":"Writing CSS In 2023: Is It Any Different Than A Few Years Ago?","link":"https://smashingmagazine.com/2023/07/writing-css-2023/","date":1689336000000,"content":"<p>Is there anything in the front-end world that’s evolving faster than CSS these days? After what seemed like a long lull following blockbusters Flexbox and Grid, watching CSS release new features over the past few years has been more like watching a wild game of rugby on the telly. <a href=\"https://css-tricks.com/css-is-going-gosh-darned-hog-wild-i-tell-ya-what/\">The pace is exciting</a>, if not <a href=\"https://css-tricks.com/is-there-too-much-css-now/\">overwhelming at the same time</a>.</p>\n<p>But have all these bells and whistles actually changed the way you write CSS? New features have certainly influenced the way I write CSS today, but perhaps not quite as radically as I would have expected.</p>\n<p>And while I’ve seen no shortage of blog posts with high-level examples and creative experiments of all these newfangled things that are available to us, I have yet to see practical applications make their way into production or everyday use. I remember when Sass started finding its way into CSS tutorials, often used as the go-to syntax for code examples and snippets. I’m not exactly seeing that same organic adoption happen with, say, <a href=\"https://www.smashingmagazine.com/2018/03/understanding-logical-properties-values/\">logical properties</a>, and we’ve had <a href=\"https://caniuse.com/css-logical-props\">full browser support for them for about two years now</a>.</p>\n<p>This isn’t to rag on anyone or anything. I, for one, am stoked beyond all heck about how CSS is evolving. Many of the latest features are ones <a href=\"https://css-tricks.com/2019-css-wishlist/\">we have craved for many, many years</a>. And indeed, there are several of them finding their way into my CSS. Again, not drastically, but enough that I’m enjoying writing CSS more now than ever.</p>\n<p>Let me count the ways.</p>\nMore And More Container Queries\n<p>I’ll say it: I’ve never loved writing media queries for responsive layouts. Content responds differently to the width of the viewport depending on the component it’s in. And balancing the content in one component has always been a juggling act with balancing the content in other components, adding up to a mess of media queries at seemingly arbitrary breakpoints. Nesting media queries inside a selector with Sass has made it tolerable, but not to the extent that I “enjoyed” writing new queries and modifying existing ones each time a new design with UI changes is handed to me.</p>\n<p>Container queries are the right answer for me. Now I can scope child elements to a parent container and rely on the container’s size for defining where the layout shifts without paying any mind to other surrounding components.</p>\n<p>The other thing I like about container queries is that they feel very CSS-y. Defining a container directly on a selector matches a natural property-value syntax and helps me avoid having to figure out math upfront to determine breakpoints.</p>\n<pre><code>.parent {\n  container-type: inline-size;\n}\n\n@container (min-width: 600px) {\n  .child {\n    align-self: center;\n  }\n}\n</code></pre>\n\n<p>I still use media queries for responsive layouts but tend to reserve them for “bigger” layouts that are made up of assembled containers. Breakpoints are more predictable (and can actually more explicitly target specific devices) when there’s no need to consider what is happening inside each individual container.</p>\n<h3>Learn About Container Queries</h3>\n<ul>\n<li><a href=\"https://drafts.csswg.org/css-contain-3/\">CSS Containment Module Level 3</a> (W3C)</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/05/complete-guide-css-container-queries/\">A Primer On CSS Container Queries</a>”, Stephanie Eckles</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/05/css-container-queries-use-cases-migration-strategies/\">CSS Container Queries: Use-Cases And Migration Strategies</a>”, Adrian Bece</li>\n<li>“<a href=\"https://css-tricks.com/a-cornucopia-of-container-queries/\">A Cornucopia of Container Queries</a>”, Geoff Graham</li>\n</ul>\nGrouping Styles In Layers\n<p>I love this way of managing the cascade! Now, if I have a reset or some third-party CSS from a framework or whatever, I can wrap those in a cascade layer and chuck them at the bottom of a file so my own styles are front and center.</p>\n<p>I have yet to ship anything using cascade layers, but I now reach for them for nearly every CodePen demo I make. The <a href=\"https://caniuse.com/css-cascade-layers\">browser support is there</a>, so that’s no issue. It’s more that I still rely on Sass on projects for certain affordances, and maintaining styles in partialized files still feels nice to me, at least for that sort of work.</p>\n<p>But in an isolated demo where all my styles are in one place, like CodePen? Yeah, all the cascade layers, please! Well, all I really need is one layer for the base styles since <strong>un-layered styles have higher specificity than layered ones</strong>. That leaves my demo-specific styles clean, uncluttered, and still able to override the base at the top, which makes it way more convenient to access them.</p>\n<pre><code>body {\n  display: grid;\n  gap: 3rem;\n  place-items: center;\n}\n\n@layer base {\n  body {\n    font-size: 1.25rem;\n    line-height: 1.35;\n    padding: 3rem;\n  }\n}\n</code></pre>\n\n<h3>Learn More About Cascade Layers</h3>\n<ul>\n<li>“<a href=\"https://css-tricks.com/css-cascade-layers/\">A Complete Guide to CSS Cascade Layers</a>”, Miriam Suzanne</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/01/introduction-css-cascade-layers/\">Getting Started With CSS Cascade Layers</a>”, Stephanie Eckles</li>\n<li><a href=\"https://www.w3.org/TR/css-cascade-5/#layering\">CSS Cascading and Inheritance Level 5</a> (W3C)</li>\n<li>“<a href=\"https://developer.chrome.com/blog/cascade-layers/\">Cascade Layers Are Coming To Your Browser</a>”, Una Kravets</li>\n</ul>\n<code>:is()</code> And <code>:where()</code>\n<p>I definitely reach for these newer relational pseudo-selectors, but not really for the benefits of selecting elements conditionally based on relationships.</p>\n<p>Instead, I use them most often for managing specificity. But unlike cascade layers, I actually use these in production.</p>\n<p>Why? Because with <code>:is()</code>, specificity is determined not by the main selector but by the <em>most</em> specific selector in its argument list.</p>\n<pre><code>/* Specificity: 0 1 0 */\n:is(ol, .list, ul) li {}\n\n/* Specificity: 0 0 2 */\nol li {}\n</code></pre>\n\n<p>The <code>.list</code> selector gives the first ruleset a higher specificity score meaning it “beats” the second ruleset even though the first ruleset is higher in the cascade.</p>\n<p>On the flip side, the specificity of <code>:where()</code> is a big ol’ score of zero, so it does not add to the overall score of whatever selector it’s on. It simply doesn’t matter at all what’s in its argument list. For the same reason I use <code>:is()</code> to add specificity, I use <code>:where()</code> to strip it out. I love keeping specificity generally low because I still want the cascade to operate with as little friction as possible, and <code>:where()</code> makes that possible, especially for defining global styles.</p>\n<p>A perfect example is wrapping <code>:not()</code> inside <code>:where()</code> to prevent <code>:not()</code> from bumping up specificity:</p>\n<pre><code>/* Specificity: 0 0 0 */\n:where(:not(.some-element)) {}\n</code></pre>\n\n\n<p>Taken together, <code>:is()</code> and <code>:where()</code> not only help manage specificity but also take some cognitive load from “naming” things.</p>\n<p>I’m one of those folks who still love the BEM syntax. But naming is one of the hardest things about it. I often find myself running out of names that help describe the function of an element and its relationship to elements around it. The specificity-wrangling powers of <code>:is()</code> and <code>:where()</code> means I can rely less on elaborate class names and more on element selectors instead.</p>\n<h3>Learn More About <code>:is()</code> And <code>:where()</code></h3>\n<ul>\n<li>“<a href=\"https://css-tricks.com/almanac/selectors/i/is/\">CSS-Tricks Almanac: <code>:is()</code></a>”, Geoff Graham</li>\n<li>“<a href=\"https://css-tricks.com/almanac/selectors/w/where/\">CSS-Tricks Almanac: <code>:where()</code></a>”, Chris Coyier</li>\n<li>“<a href=\"https://css-tricks.com/is-is-useful/\">Is “is” Useful?</a>”, Chris Coyier</li>\n<li>“<a href=\"https://css-tricks.com/using-the-specificity-of-where-as-a-css-reset/\">Using The Specificity Of <code>:where()</code> As A CSS Reset</a>”, Mojtaba Seyedi</li>\n</ul>\nThe New Color Function Syntax\n<p>The updated syntax for color functions like <code>rgb()</code> and <code>hsl()</code> (and the evolving <code>oklch()</code> and <code>oklab()</code>) isn’t the sort of attention-grabbing headline that leads to <em>oo’s</em> and <em>aw’s</em>, but it sure does make it a lot better to define color values.</p>\n<p>For one, I never have to reach for <code>rgba()</code> or <code>hsla()</code> when I need an alpha value. In fact, I always used those whether or not I needed alpha because I didn’t want to bother deciding which version to use.</p>\n<pre><code>color: hsl(50deg, 100%, 50%);\n\n/* Same */\ncolor: hsla(50deg, 100%, 50% / 1)\n</code></pre>\n\n<p>Yes, writing the extra <code>a</code>, <code>/</code>, and <code>1</code> was worth the cost of not having to think about which function to use.</p>\n<p>But the updated color syntax is <a href=\"https://slate.com/technology/2015/06/honey-badger-venom-resistance-biologists-discover-the-secret.html\">like a honey badger</a>: it just doesn’t care. It doesn’t care about the extra <code>a</code> in the function name. It doesn’t even care about commas.</p>\n<pre><code>color: hsl(50deg 100% 50% / .5);\n</code></pre>\n\n<p>So, yeah. That’s definitely changed the way I write colors in CSS.</p>\n<p>What I’m <em>really</em> excited to start using is the newer <code>oklch()</code> and <code>oklab()</code> color spaces <a href=\"https://caniuse.com/mdn-css_types_color_oklch\">now that they have full browser support</a>!</p>\n<h3>Learn More About CSS Color 4 Features</h3>\n<ul>\n<li><a href=\"https://drafts.csswg.org/css-color/\">CSS Color Module Level 4</a> (W3C)</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/11/guide-modern-css-colors/\">A Guide To Modern CSS Colors With RGB, HSL, HWB, LAB And LCH</a>”, Michelle Barker</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/07/hsl-colors-css/\">Using HSL Colors In CSS</a>”, Ahmad Shadeed</li>\n<li>“<a href=\"https://css-tricks.com/new-css-color-features-preview/\">A Whistle-Stop Tour Of 4 New CSS Color Features</a>”, Chris Coyier</li>\n</ul>\nSniffing Out User Preferences\n<p>I think a lot of us were pretty stoked when we got media queries that respect a user’s display preferences, the key one being the user’s preferred color scheme for quickly creating dark and light interfaces.</p>\n<pre><code>:root {\n  --bg-color: hsl(0deg 0% 100%);\n  --text-color: hsl(0deg 0% 0%);\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --bg-color: hsl(0deg 0% 0%);\n    --text-color: hsl(0deg 0% 100%);\n  }\n}\n\nbody {\n  background: var(--bg-color);\n  color: var(--text-color);\n}\n</code></pre>\n\n<p>But it’s the <code>prefers-reduced-motion</code> query that has changed my CSS the most. It’s the first thing I think about any time a project involves CSS animations and transitions. I love the idea that <a href=\"https://www.smashingmagazine.com/2021/10/respecting-users-motion-preferences/#reduced-motion-doesn-t-mean-no-motion\">a reduced motion preference doesn’t mean nuking all animation</a>, so I’ll often use <code>prefers-reduced-motion</code> to slow everything down when that’s the preference. That means I have something like this (usually in a cascade layer for base styles):</p>\n<pre><code>@layer base {\n  :root {\n    --anim-duration: 1s;\n  }\n\n  /* Reduced motion by default */\n  body {\n    animation-duration: --anim-duration;\n    transition: --anim-duration;\n  }\n\n  /* Opt into increased motion */\n  @media screen and (prefers-reduced-motion: no-preference) {\n    body {\n      --anim-duration: .25s;\n    }\n  }\n}\n</code></pre>\n\n<h3>Learn More About User Preference Queries</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/10/respecting-users-motion-preferences/\">Respecting Users’ Motion Preferences</a>”, Michelle Barker</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2020/09/design-reduced-motion-sensitivities/\">Designing With Reduced Motion For Motion Sensitivities</a>”, Val Head</li>\n<li>“<a href=\"https://css-tricks.com/a-dry-approach-to-color-themes-in-css/\">A DRY Approach To Color Themes In CSS</a>”, Christopher Kirk-Nielsen</li>\n<li>“<a href=\"https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/\">A Complete Guide to Dark Mode on the Web</a>”,  Adhuham</li>\n</ul>\nDefining Color Palettes\n<p>I’ve used <a href=\"https://geoffgraham.me/naming-sass-color-variables/\">variables for defining and assigning colors</a> ever since I adopted Sass and was thrilled when CSS custom properties came. I’d give generic names to the colors in a palette before passing them into variables with more functional names.</p>\n<pre><code>/* Color Palette */\n--red: #ff0000;\n/* etc. */\n\n/* Brand Colors */\n--color-primary: var(--red);\n/* etc. */\n</code></pre>\n\n<p>I still do this, but now I will abstract things even further using color functions on projects with big palettes:</p>\n<pre><code>:root {\n  /* Primary Color HSL */\n  --h: 21deg;\n  --s: 100%;\n  --l: 50%;\n\n  --color-primary: hsl(var(--h) var(--s) var(--l) / 1);\n}\n\n.bg-color {\n  background: var(--color-primary);\n}\n\n.bg-color--secondary {\n  --h: 56deg;\n  background: hsl(var(--h) var(--s) var(--l) / 1);\n}\n</code></pre>\n\n<p>A little too abstract? Maybe. But for those projects where you might have ten different varieties of red, orange, yellow, and so on, it’s nice to have this level of fine-grained control to manipulate them. Perhaps there is more control with <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix\"><code>color-mix()</code></a> that I just haven’t explored yet.</p>\n<h3>Learn More About Defining Color Palettes</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/06/simplify-color-palette-css-color-mix/\">Simplify Your Color Palette With CSS Color-Mix()</a>”, Daniel Yuschick</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2020/08/application-color-schemes-css-custom-properties/\">How To Configure Application Color Schemes With CSS Custom Properties</a>”,  Artur Basak</li>\n<li>“<a href=\"https://chriscoyier.net/2023/01/26/relative-color-syntax-plzzzzz/\">CSS Color Manipulation Functions, Please Save Us From The CSS Custom Property Gotcha</a>”, Chris Coyier</li>\n</ul>\nWhat I’m Not Using\n<p>Huh, I guess I am writing CSS a bit differently than I used to! It just doesn’t feel like it, but that probably has to do with the fact that there are so many other new features I am <em>not</em> currently using. The number of new features I am using is much, much lower than the number of features I have yet to pick up, whether it’s because of browser support or because I just haven’t gotten to it yet.</p>\n<h3>CSS Nesting</h3>\n<p>I’m really looking forward to this because it just <em>might</em> be the tipping point where I completely drop Sass for vanilla CSS. <a href=\"https://caniuse.com/css-nesting\">It’s waiting for Firefox to support it</a> at the time of this writing, so it could be right around the corner.</p>\n<h3>Style Queries</h3>\n<p>I’ve made no secret that applying styles to elements based on the styles of other elements is something that <a href=\"https://css-tricks.com/early-days-of-container-style-queries/\">I’m really interested in</a>. That might be more of an academic interest because specific use cases for style queries elude me. Maybe that will change <a href=\"https://caniuse.com/css-container-queries-style\">as they gain browser support</a>, and we see a lot more blog posts where smart folks experiment with them.</p>\n<h3><code>:has()</code></h3>\n<p>I’ll definitely use this when <a href=\"https://caniuse.com/css-has\">Firefox supports it</a>. Until then, I’ve merely tinkered with it and have enjoyed how others have been experimenting with it. Without full support, though, it hasn’t changed the way I write CSS. I expect that it will, though, because how can having the ability to select a parent element based on the child it contains be a bad thing, right?</p>\n<h3>Dynamic Viewport Units</h3>\n<p>I’ve started sprinkling these in my styles since they <a href=\"https://caniuse.com/viewport-unit-variants\">gained wide support at the end of 2022</a>. Like style queries, I only see limited use cases — most notably when setting elements to full height on a mobile device. So, instead of using <code>height: 100vh</code>, I’m starting to write <code>height: 100dvh</code> more and more. I guess that has influenced how I write CSS, even if it’s subtle.</p>\n<h3>Media Query Range Syntax</h3>\n<p>Honestly, I just haven’t thought much about the fact that there’s a <a href=\"https://css-tricks.com/the-new-css-media-query-range-syntax/\">nicer way to write responsive media queries on the viewport</a>. I’m aware of it but haven’t made it a part of my everyday CSS for no other reason than ignorance.</p>\n<h3>OKLCH/OKLAB Color Spaces</h3>\n<p><code>oklch()</code> will most definitely be my go-to color function. <a href=\"https://caniuse.com/mdn-css_types_color_oklch\">It gained wide support in March of this year</a>, so I’ve only had a couple of months and no projects to use it. But given the time, I expect it will be the most widely used way to define colors in my CSS.</p>\n<p>The only issue with it, I see, is that <code>oklch()</code> is incompatible with another color feature I’m excited about...</p>\n<h3><code>color()</code></h3>\n<p>It’s <a href=\"https://caniuse.com/css-color-function\">widely supported</a> now, as of May 2023! That’s just too new to make its way into my everyday CSS, but you can bet that it will. The ability to tap into any color space — be it sRGB, Display P3, or Rec2020 — is just so much nicer than having to reach for a specific color function, at least for colors in a color space with RGB channels (that’s why <code>color()</code> is <a href=\"https://developer.chrome.com/articles/high-definition-css-color-guide/#the-color-function\">incompatible</a> with <code>oklch()</code> and other non-RGB color spaces).</p>\n<pre><code>--primary-color: color(display-p3 1 0.4 0);\n</code></pre>\n\n<p>I’m not in love with RGB values because they’re tough to understand, unlike, say, HSL. I’m sure I’ll still use <code>oklch()</code> or <code>hsl()</code> in most cases for that very reason. It’s a bummer we can’t do something like this:</p>\n<pre><code>/* 👎 */\n--primary-color: color(oklch 70% 0.222 41.29);\n</code></pre>\n\n<p>We have to do this instead:</p>\n<pre><code>/* 👍 */\n--primary-color: oklch(70% 0.222 41.29);\n</code></pre>\n\n<p>The confusing thing about that is it’s not like Display P3 has its own function like OKLCH:</p>\n<pre><code>/* 👎 */\n--primary-color: display-p3(1 0.434 0.088);\n</code></pre>\n\n<p>We’re forced to use <code>color()</code> to tap into Display P3. That’s at odds with OKLCH/OKLAB, where we’re forced to reach for those specific functions.</p>\n<p>Maybe one day we’ll have a global <code>color()</code> function that supports them all! Until then, my CSS will use both <code>color()</code> and specific functions like <code>oklch()</code> and decide which is best for whatever I’m working on.</p>\n<p>I’ll also toss <code>color-mix()</code> in this bucket, as it gained full support at the same time as <code>color()</code>. It’s not something I write regularly yet, but I’ll certainly play with it, likely for creating color palettes.</p>\n<h3>Honorable Mentions</h3>\n<p>It would be quite a feat to comment on every single new CSS feature that has shipped over the past five or so years. The main theme when it comes to which features I am <em>not</em> using in my day-to-day work is that they are simply too new or they lack browser support. That doesn’t mean I <em>won’t</em> use them (I likely will!), but for the time being, I’m merely keeping a side-eye on them or simply having a fun time dabbling in them.</p>\n<p>Those include:</p>\n<ul>\n<li>Trigonometric functions,</li>\n<li>Anchor position,</li>\n<li>Scroll-linked animations,</li>\n<li><code>initial-letter</code>,</li>\n<li><code>&lt;selectmenu&gt;</code> and <code>&lt;popover&gt;</code>,</li>\n<li>View transitions,</li>\n<li>Scoped Styles.</li>\n</ul>\n<p>What about you? You must be writing CSS differently now than you were five years ago, right? Are you handling the cascade differently? Do you write more vanilla CSS than reaching for a preprocessor? How about typography, like managing line heights and scale? Tell me — or better yet, <em>show</em> me — how you’re CSS-ing these days.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"c930a7dbcffdb3fc3e31686274494aa0cdb42cff76af186053f93652dc57be4d","category":"Tech"}