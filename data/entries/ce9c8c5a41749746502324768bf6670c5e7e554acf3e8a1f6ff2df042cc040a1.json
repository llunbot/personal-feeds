{"title":"สรุปจากการอ่านบทความเรื่อง Redesigning Pinterest’s Ad Serving Systems with Zero Downtime","link":"https://www.somkiat.cc/note-redesigning-pinterests/","date":1717996340000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/06/redesigning-pinterests-01-150x150.jpg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/06/redesigning-pinterests-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2024/06/redesigning-pinterests-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/06/redesigning-pinterests-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/06/redesigning-pinterests-01-1024x571.jpg\" width=\"683\" height=\"381\" /></a></figure>\n\n\n\n<p>หลังจากการอ่านบทความเรื่อง <a href=\"https://medium.com/pinterest-engineering/redesigning-pinterests-ad-serving-systems-with-zero-downtime-3253d2432a0c\" target=\"_blank\">Redesigning Pinterest’s Ad Serving Systems with Zero Downtime</a><br />เป็นการ redesign และ rewrite ระบบ Ads-serving platform  ของ Pinterest<br />เป็นระบบที่สร้างรายได้ให้บริษัทอย่างมาก<br />แต่ระบบที่ใช้งานมี technical debt เยอะ และ ซับซ้อนสูงมาก ๆ<br />ทำให้ระบบมีปัญหาต่อการ scale อย่างมาก ล่มบ่อย<br />รวมทั้ง business goal ที่เยอะขึ้น</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>ปัญหาหลัก ๆ ของระบบ ประกอบไปด้วย</strong></p>\n\n\n\n<ul>\n<li>Infrastructure และ business logic ผูกมัดกันอย่างมาก ดังนั้นยากต่อการเปลี่ยนแปลง</li>\n\n\n\n<li>การจัดการโครงสร้างของระบบไม่ดี ไม่มีการจัดการ module ที่ดี ทำให้เกิด conflict ในการแก้ไข รวมทั้งการก่อให้เกิด bug ได้ง่าย ๆ</li>\n\n\n\n<li>ไม่การันตีเรื่องความถูกต้องของข้อมูล</li>\n\n\n\n<li>มีปัญหาในการทำงานแบบ multi-thread เพราะว่าไม่มี framework ที่ชัดเจน ทั้งเรื่อง error handling และ race condition เมื่อเกิดปัญหาทำให้ยากต่อการจัดการ</li>\n</ul>\n\n\n\n<p>ดังนั้นจึงตัดสินใจที่จะทำการเขียนระบบขึ้นมาใหม่ !!<br />โดยมี working group เข้ามาช่วยกันคิด และ ตัดสินใจว่า</p>\n\n\n\n<ul>\n<li>ทำการเขียนใหม่ด้วย Java ดีกว่าการ refactor code เดิม</li>\n\n\n\n<li>ใช้ Java เนื่องจากระบบส่วนใหญ่ก็ใช้</li>\n</ul>\n\n\n\n<p><strong>ในการพัฒนาระบบใหม่นั้นมีสิ่งที่น่าสนใจคือ Engineering Design Principles</strong></p>\n\n\n\n<p>เพื่อสร้างระบบที่ช่วยให้ business โตอย่างรวดเร็ว<br />และลดปัญหาที่เกิดขึ้นบน production<br />ซึ่งมีแนวทางดังนี้</p>\n\n\n\n<ul>\n<li>ง่ายต่อการเพิ่มส่วนขยาย (Extensible) และง่ายต่อการ deprecated หรือเอาส่วนที่ไม่ใช้งานออกไป (Design-for-deprecation)</li>\n\n\n\n<li>Separation of Concern ทำการแยก infrastructure กับ business logic ออกจากกัน ด้วยการกำหนด high level abstraction ขึ้นมา รวมทั้งแยกแต่ละส่วนเป็น module ให้แต่ละทีมดูแล แยกกันอย่างชัดเจน</li>\n\n\n\n<li>Safe-by-design การออกแบบต้องปลอดภัยจากเรื่องของการทำงานแบบ concurrency และ ความถูกต้องของข้อมูลเป็นหลัก ทำให้มั่นใจว่าจะไม่เกิด race condition รวมทั้งการจัดการ log ของการทำงาน</li>\n\n\n\n<li>Development velocity กอบการทำงานใหม่ต้องสนับสนุนการพัฒนา มี environment ที่ดีต่อการพัฒนา รวมทั้งมีเครื่องมือในการ debug และ analyze การทำงานและปัญหาแบบง่ายๆ อีกด้วย (สำคัญมาก ๆ)</li>\n</ul>\n\n\n\n<p><strong>ต่อการเรื่องของ Design Decision มีการวางแนวทางไว้ดังนี้</strong></p>\n\n\n\n<p>เริ่มด้วยการตอบ 2 คำถามนี้ก่อนคือ</p>\n\n\n\n<ul>\n<li>จัดการ code ของแต่ละทีมอย่างไร ไม่ให้กระทบทีมอื่น ๆ</li>\n\n\n\n<li>จัดการข้อมูลอย่างไร ให้ข้อมูลยังคงความถูกต้อง</li>\n</ul>\n\n\n\n<p>ถ้าจะตองคำถามเหล่านี้ได้ จำเป็นต้องรู้และเข้าใจ<br />ในเรื่องของ business logic ของระบบ<br />ในเรื่องการจัดการข้อมูลที่จำเป็นต่อการใช้งาน<br />รวมทั้ง high level ของ abstraction layer เพื่อลดผลกระทบต่าง ๆ ลงไป<br />จึงทำให้เกิด design decision ขึ้นมา 2 ข้อคือ</p>\n\n\n\n<ul>\n<li>Code ของระบบจะมีการสร้าง Directed Acyclic Graph (DAG) จาก graph framework ที่สร้างขึ้นมา เพื่อแสดงความสัมพันธ์ของ code เพื่อแสดงความสัมพันธ์ของ code ซึ่งช่วยในการตัดสินใจอย่างมาก และเห็นผลกระทบที่ชัดเจน</li>\n\n\n\n<li>ทำการสร้าง data model เพื่อส่งเข้าไปยังระบบ graph ที่ทำงานแบบ thread-safe  (อ่านแล้วไม่แน่ใจว่าเป็นแบบไหน)</li>\n</ul>\n\n\n\n<p><strong>ผลจากการ rewrite ระบบใหม่นั้น พบว่า</strong></p>\n\n\n\n<ul>\n<li>สามารถ deliver product ได้รวดเร็วขึ้น และ ปลอดภัยมากยิ่งขึ้น</li>\n\n\n\n<li>ความพึงพอใจของทีมพัฒนาดีขึ้นอย่างมาก</li>\n\n\n\n<li>ระบบงานสามารถ run บน infrastructure ที่ดี ซึ่งช่วยลดค่าใช้จ่ายไปได้เยอะ</li>\n</ul>\n\n\n\n<p>การกำหนดข้อตกลงร่วมกัน และ การมีเป้าหมายที่ชัดเจน<br />จะนำไปสู่การลงมือทำที่ดี เพื่อให้ผลลัพธ์ตรงกับที่ต้องการ</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"ce9c8c5a41749746502324768bf6670c5e7e554acf3e8a1f6ff2df042cc040a1","category":"Thai"}