{"title":"CDK for Terraform 0.18 reduces synthesization time","link":"https://www.hashicorp.com/blog/cdk-for-terraform-0-18-reduces-synthesization-time","date":1692280800000,"content":"<p><a href=\"https://developer.hashicorp.com/terraform/cdktf\">CDK for Terraform</a> (CDKTF) lets you write HashiCorp Terraform configurations in your choice of TypeScript, Python, C#, Java, or Go, and still benefit from the full ecosystem of Terraform <a href=\"https://registry.terraform.io/\">providers and modules</a>. <a href=\"https://www.hashicorp.com/blog/cdk-for-terraform-now-generally-available\">CDKTF reached general availability</a> in August, 2022.</p>\n\n<p>Today, we’re releasing CDKTF 0.18, which:</p>\n\n<ul>\n<li>Improves performance, drastically reducing synthesization time for TypeScript, Python, and Java</li>\n<li>Further improves the <code>cdktf convert</code> command, which translates HCL to TypeScript, Python, C#, Java, or Go</li>\n</ul>\n\n<h2>Performance optimization</h2>\n\n<p>The newest CDKF release includes features and documents best practices for bringing down the synthesization time across all languages. You can see a summary of performance-related best practices in our documentation under <a href=\"https://cdk.tf/performance\">Performance</a>. All numbers shared below reference the synthesization (synth) time for the AWS example (<a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/examples/typescript/aws-cloudfront-proxy/main.ts\">Typescript</a> / <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/examples/python/aws/main.py\">Python</a> / <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/examples/java/aws-gradle/src/main/java/com/mycompany/app/Main.java\">Java</a> / <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/examples/csharp/aws/Main.cs\">C#</a> / <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/examples/go/aws/main.go\">Go</a>).</p>\n<img src=\"https://www.datocms-assets.com/2885/1692280273-perf-per-lang-cdktf-018.png\" alt=\"Performance\" /><h3>Reduced TypeScript synth time</h3>\n\n<p>Since CDKTF natively runs on TypeScript and doesn’t require language translation, it is the most performant language in terms of synth. However, we found that using star imports (e.g. <code>import * from \"@cdktf/cdktf-provider-aws\"</code>) on the root level can slow down synth. This is primarily due to TypeScript importing the entire provider library in order to do type checking on it. For bigger providers like AWS, Google Cloud, or Microsoft Azure, this can result in synth times of around 30 seconds. </p>\n\n<p>Since the release of <a href=\"https://www.hashicorp.com/blog/cdk-for-terraform-0-13-significantly-improves-performance\">CDKTF version 0.13</a>, we support namespaces as a performance enhancement, and by switching to specific imports of the resources and data sources used (e.g. <code>import { Instance } from \"@cdktf/provider-aws/lib/instance\"</code>), users can get this down to around 4 seconds. If users want further improvements, one option is to use TypeScript compilers such as <code>swc</code> or <code>tsx</code> that don’t do type checking, which can cut synthesization time to less than 1 second.</p>\n\n<h3>JSII upgrades</h3>\n\n<p>We also upgraded the underlying <a href=\"https://developer.hashicorp.com/terraform/cdktf/concepts/cdktf-architecture\">JSII compiler</a> and changed the way CDKTF uses JSII under the hood. Now all compiled languages (Python, Java, C#, Go) demonstrate performance improvements, including faster code execution. Behind the scenes, CDKTF uses JSII to translate TypeScript code into different languages. When a CDKTF project is run, <a href=\"https://www.youtube.com/watch?v=nNr8JrN-9HE\">a Node.js server is spun up that the target language talks to</a>. Upon starting, the server needs to unpack, parse, and load all referenced JavaScript files. This process was slower than necessary, taking roughly 2 to 4 seconds and 1 second per provider/module. In CDKTF 0.18, we reduced the time to approximately 500ms and 100ms respectively, making the execution part of the process a lot faster.</p>\n\n<h3>Reduced Python synth time</h3>\n\n<p>In Python, we noticed that the generated directory structure led to all submodules of a provider being imported at once, even if the import specified a specific submodule. This resulted in a lot of unnecessary parsing by the Python interpreter. CDKTF 0.18 fixes this problem, boosting performance from roughly 35 seconds for synthesization down to 2 seconds.</p>\n\n<h3>Reduced Java synth time in Gradle</h3>\n\n<p>For Java, new CDKTF projects will default to using <a href=\"https://gradle.org/\">Gradle</a> instead of <a href=\"https://maven.apache.org/\">Maven</a>. We advise existing users to do the same. For existing projects, the fastest way to migrate is to use <code>cdktf init</code> to create a new project, move existing files from the old project, and use <code>cdktf provider add</code> to add the providers in use to a new project. In Gradle, iteration times for Java recompilation drop down to 30 seconds, compared to 3 minutes 30 seconds in Maven.</p>\n\n<h3>Go performance improvement</h3>\n\n<p>CDKTF 0.18 also improves the time and resources <code>cdktf get</code> takes in Go by removing the <code>go build ./...</code> step that previously consumed a lot of resources and time when invoked on bigger providers.</p>\n\n<h2>Further iteration on <code>cdktf convert</code></h2>\n\n<p>With the release of CDKTF 0.16 in April, we <a href=\"https://www.hashicorp.com/blog/cdk-for-terraform-0-16-improves-automatic-hcl-conversion\">announced</a> a series of improvements to the <code>cdktf convert</code> command, which allows users to translate their existing Terraform HCL code to a CDKTF-compatible language automatically. In July, we <a href=\"https://www.hashicorp.com/blog/new-multi-language-docs-simplify-cdk-for-terraform-adoption\">launched</a> multi-language provider documentation in the Terraform Registry, adding code samples in TypeScript and Python for the <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs?lang=typescript\">AWS provider</a>, the <a href=\"https://registry.terraform.io/providers/hashicorp/tfe/latest/docs?lang=python\">Terraform Cloud/Enterprise provider</a>, and others.</p>\n\n<p>The sequence of these announcements is no coincidence: The multi-language provider documentation is powered by the <code>cdktf convert</code> command. As such, the CDKTF 0.18 release includes several improvements to <code>convert</code> that make the translations into TypeScript and Python robust enough for the multi-language provider docs in the Terraform Registry. Check out the <a href=\"https://github.com/hashicorp/terraform-cdk/releases/tag/v0.18.0\">CDKTF 0.18 release notes</a> for a full list of the improvements and bug fixes.</p>\n\n<p>Our next goal for <code>convert</code> is to make the translations into Java, C#, and Go robust enough to add those languages to the Terraform Registry. In the meantime, we are excited to announce that we have expanded the TypeScript and Python documentation for the AWS provider to include all resources, extending beyond the limited subset that we initially launched with. Check out our <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/account_alternate_contact?lang=typescript\">updated multi-language AWS provider docs</a>.</p>\n\n<h2>What happened to CDKTF 0.17?</h2>\n\n<p>Our <a href=\"https://www.hashicorp.com/blog/cdk-for-terraform-0-16-improves-automatic-hcl-conversion\">last release blog post</a> addressed CDKTF 0.16. On June 15, we released CDKTF 0.17. We did not make an announcement because version 0.17 did not include  any new user-facing features (we were forced to do an emergency release with a breaking change, albeit one that does not affect most users, in order to maintain compatibility with version 4.67+ of the AWS provider). You can read more about the CDKTF 0.17 release and its impact in <a href=\"https://developer.hashicorp.com/terraform/cdktf/release/upgrade-guide-v0-17\">our upgrade guide</a>.</p>\n\n<p>The CDKTF 0.18 release includes the user-facing features that were previously planned for CDKTF 0.17.</p>\n\n<h2>What's next for CDKTF?</h2>\n\n<p>The upcoming CDKTF 0.19 release is scheduled to include basic support for config-driven import, which was <a href=\"https://www.hashicorp.com/blog/terraform-1-5-brings-config-driven-import-and-checks\">added in Terraform 1.5</a>, as well as better support for refactoring, including state moving.</p>\n\n<h2>Try CDK for Terraform</h2>\n\n<p>If you’re new to the project, these <a href=\"https://developer.hashicorp.com/terraform/tutorials/cdktf\">tutorials for CDK for Terraform</a> are the best way to get started. You can dive deeper into our documentation with this <a href=\"https://developer.hashicorp.com/terraform/cdktf\">overview of CDKTF</a>.</p>\n\n<p>Whether you’re still experimenting or actively using CDK for Terraform, we’d love to hear from you. Please <a href=\"https://cdk.tf/bug\">file any bugs you encounter</a>, let us know about your <a href=\"https://cdk.tf/feature\">feature requests</a>, and share your questions, thoughts, and experiences in the <a href=\"https://discuss.hashicorp.com/c/terraform-core/cdk-for-terraform/\">CDK for Terraform discussion forum</a>.</p>\n","author":"Rohan Kumar Tripathy","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"ee5724391c9918868f2183449c88050b5e5385460cdcbbf264d9e90cd56207a8","category":"Tech"}