{"title":"How To Manage Dangerous Actions In User Interfaces","link":"https://smashingmagazine.com/2024/09/how-manage-dangerous-actions-user-interfaces/","date":1727449200000,"content":"<p>By definition, an interface is a layer between the user and a system, serving the purpose of communication between them. Interacting with the interface usually requires users to perform certain actions.</p>\n<p>Different actions can lead to various outcomes, some of which might be critical.</p>\n<p>While we often need to provide additional protection in case users attempt to perform dangerous or irreversible actions, It’s good to remember that one of <a href=\"https://www.nngroup.com/articles/ten-usability-heuristics/\">the ten usability heuristics</a> called “Error Prevention” says:</p>\n<blockquote>“Good error messages are important, but the best designs carefully <strong>prevent problems from occurring in the first place</strong>. Either eliminate error-prone conditions or check for them and present users with a confirmation option before they commit to the action.”</blockquote>\n\nWhat Is A Dangerous Action?\n<p>Surprisingly, when we talk about dangerous actions, it doesn’t necessarily mean that something is being deleted.</p>\n<p>Here’s an example of a dangerous action from the banking application I use:</p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/1-screenshot-bank-application.png\" /></p>\n<p>The bank approved a loan for me, and as soon as I clicked <em>“Get Money,”</em> it meant that I had signed the necessary documents and accepted the loan. All I have to do is tap the yellow button, and I’ll get the money.</p>\n<p>As a result of an accidental tap, you might end up taking a loan when you didn’t intend to, which is why this action can be considered significant and dangerous.</p>\n<p><strong>Therefore, a dangerous action does not necessarily mean deleting something.</strong></p>\n<p>Some examples may include the following:</p>\n<ul>\n<li>Sending an email,</li>\n<li>Placing an order,</li>\n<li>Publishing a post,</li>\n<li>Making a bank transaction,</li>\n<li>Signing a legal document,</li>\n<li>Permanently blocking a user,</li>\n<li>Granting or revoking permissions.</li>\n</ul>\nWays To Confirm Dangerous Actions\n<p>There are many methods to prevent users from losing their data or taking irreversible actions unintentionally. One approach is to ask users to explicitly confirm their actions.</p>\n<p>There are several ways to implement this, each with its own pros and cons.</p>\n<h3>Modal Dialogs</h3>\n<p>First of all, we should understand the difference between modal and non-modal dialogs. It’s better to think about <strong><em>modality state</em></strong> since dialogs, popups, alerts — all of these might be presented either in the modal state or not. I will use the term dialogs as a general reference, but the keyword here is <strong>modality.</strong></p>\n<blockquote>“Modality is a design technique that presents content in a separate, dedicated mode that prevents interaction with the parent view and requires an explicit action to dismiss.”<br /><br />— <a href=\"https://developer.apple.com/design/human-interface-guidelines/modality\">Apple design guides</a></blockquote>\n\n<p><strong>Modal dialogs require immediate user action.</strong> In other words, you cannot continue working with an application until you respond in some way. </p>\n<p><strong>Non-modal dialogs, on the other hand, allow you to keep using the application</strong> without interruption. A common example of a non-modal element is a toast message that appears in the corner of the screen and does not require you to do anything to continue using the app.</p>\n<p>When used properly, modal dialogs are an effective way to prevent accidental clicks on dangerous actions.</p>\n<p>The main problem with them is that if they are used to confirm routine actions (such as marking a task as done), they can cause irritation and create a habit of mindlessly confirming them on autopilot.</p>\n<p>However, this is one of the most popular methods. Besides, it can be combined with other methods, so let’s dive into it deeper.</p>\n<h4>When To Use Them</h4>\n<p>Use modal dialogs when a user action will have serious consequences, especially if the result of the action is irreversible. Typical cases include deleting a post or project, confirming a transaction, and so on.</p>\n<p>It depends on what kind of action users want to take, but the main thing to keep in mind is <strong><em>how serious the consequences are and whether the action is reversible or not.</em></strong></p>\n<h4>Things To Keep In Mind</h4>\n<ol>\n<li><strong>Avoid vague language.</strong><br />If you ask users, <em>“Are you sure?”</em> chances are, they will not have any doubts.</li>\n<li>In the title, specify what exactly will happen or which entity will be affected (e.g., project name, user name, amount of money).</li>\n<li><strong>Provide an icon that indicates that the action is dangerous</strong>.<br />It both increases the chances that users will not automatically confirm it and is <strong>good for accessibility reasons</strong> (people with color blindness will notice the icon even if it appears grey to them, signaling its importance).</li>\n<li>In the description, be specific and highlight the necessary information.</li>\n<li>The CTA button should also contain <strong>a word that reflects the action</strong>.<br />Instead of <em>“Yes”</em> or <em>“Confirm,”</em> use more descriptive options like <em>“Delete,”</em> <em>“Pay $97,”</em> <em>“Make Transaction,”</em> <em>“Send Message,”</em> and so on — including the entity name or amount of money in the button is also helpful. Compare: <em>“Confirm”</em> versus <em>“Pay $97.”</em> The latter is much more specific.</li>\n</ol>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/2-general-language-confirmation-dialogs.png\" /></p>\n<p><strong>However, this might not be enough.</strong></p>\n<p>In some cases, you may require an extra action. A typical solution is to ask users to type something (e.g., a project name) to unblock the CTA button.</p>\n<p>Here are a few examples:</p>\n<p><a href=\"https://convertkit.com/\"><strong>ConvertKit</strong></a> asks users to type <em>“DO IT”</em> when removing subscribers.</p>\n<p><strong>Pro tip</strong>: <em>Note that they placed the buttons on the left side! This is a nice example of applying <a href=\"https://lawsofux.com/law-of-proximity/\">proximity law</a>. It seems reasonable since the submit button is closer to the form (even if it consists of only one input).</em></p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/3-convertkit.png\" /></p>\n<p><a href=\"https://resend.com/\"><strong>Resend</strong></a> asks users to type <em>“DELETE”</em> if they want to delete an API key, which could have very serious consequences. The API key might be used in many of your apps, and you don’t want to break anything.</p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/4-resend-modal-dialog.png\" /></p>\n<p>This modal is one of the best examples of following the best practices:</p>\n<ul>\n<li>The title says what the action is (<em>“Delete API Key”</em>).</li>\n<li>In the text, they mentioned the name of the API Key in bold and in a different color (<em>“Onboarding”</em>).</li>\n<li>The red label that the action can not be undone makes it clearer that this is a serious action.</li>\n<li>Extra action is required (typing <em>“DELETE”</em>).</li>\n<li>The CTA button has both a color indicator (red usually is used for destructive actions) and a proper label — <em>“Delete API Key”</em>. Not a general word, e.g., <em>“Confirm”</em> or <em>“Delete.”</em></li>\n</ul>\n<p>Notice that Resend also places buttons on the left side, just as ConvertKit does.</p>\n<p><strong>Note</strong>: <em>While generally <a href=\"https://adamsilver.io/blog/the-problem-with-disabled-buttons-and-what-to-do-instead/\">disabling submit buttons is considered bad practice</a>, this is one of the cases where it is acceptable. The dialog’s request is clear and straightforward both in ConvertKit and Resend examples.</em></p>\n<p>Moreover, we can even skip the submit button altogether. This applies to cases where users are asked to input an OTP, PIN, or 2FA code. For example, the bank app I use does not even have a log in button.</p>\n<p>On the one hand, we still ask users to perform an extra action (input the code). On the other hand, it eliminates the need for an additional click.</p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/5-bank-application-no-sumbit-button.png\" /></p>\n<h4>Accessibility Concerns</h4>\n<p>There is ongoing debate about whether or not to include a submit button when entering a simple OTP. By “simple,” I mean one that consists of 4-6 digits.</p>\n<p>While I am not an accessibility expert, I don’t see any major downsides to omitting the submit button in straightforward cases like this.</p>\n<p>First, the OTP step is typically an intermediate part of the user flow, meaning a form with four inputs appears during some process. The first input is automatically focused, and users can navigate through them using the Tab key.</p>\n<p>The key point is that, due to the small amount of information required (four digits), it is generally acceptable to auto-submit the form as soon as the digits are entered, even if a mistake is made.</p>\n<p>On the one hand, if we care about accessibility, nothing stops us from providing users control over the inputs. On the other hand, auto-submission streamlines the process in most cases, and in the rare event of an error, the user can easily re-enter the digits.</p>\n<h3>Danger Zones</h3>\n<p>For the most critical actions, you may use the so-called “Danger zone” pattern.</p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/6-github-repository-danger-zone-settings.png\" /></p>\n<p>A common way to implement this is to either have a dedicated page or place the set of actions at the bottom of the settings/account page.  </p>\n<p>It might contain one or more actions and is usually combined with other methods, e.g., a modal dialog. The more actions you have, the more likely you’ll need a dedicated page.</p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/7-plausible-danger-zone.png\" /></p>\n<h4>When To Use Them</h4>\n<p>Use a Danger Zone to group actions that are irreversible or have a high potential for data loss or significant outcomes for users.</p>\n<p>These actions typically include things like account deletion, data wiping, or permission changes that could affect the user’s access or data.</p>\n<h4>Things To Keep In Mind</h4>\n<ol>\n<li>Use colors like red, warning icons, or borders to visually differentiate the Danger Zone from the rest of the page.</li>\n<li>Each action in the Danger Zone should have <strong>a clear description of what will happen if the user proceeds</strong> so that users understand the potential consequences.</li>\n<li><strong>Ask users for extra effort.</strong> Usually, the actions are irreversible and critical. In this case, you may ask users to repeat their password or use 2FA because if someone else gets access to the page, it will not be that easy to do the harmful action.</li>\n<li><strong>Keep only truly critical actions there.</strong> Avoid making a danger zone for the sake of having one. </li>\n</ol>\n<h3>Inline Guards</h3>\n<p>Recently, I discovered that some apps have started using inline confirmation. This means that when you click on a dangerous action, it changes its label and asks you to click again.</p>\n<p>This pattern is used by apps like Zapier and Typefully. While at first it seems convenient, it has sparked a lot of discussion and questions on <a href=\"https://x.com/vponamariov/status/1787832616722338016\">X</a> and <a href=\"https://www.linkedin.com/posts/vitalyfriedman_ux-design-activity-7200522626224582658-AGVB\">Linkedin</a>.</p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/8-zapier-confirmation-deleting.png\" /></p>\n<p>I’ve seen attempts to try to fix accidental double-clicking by changing the position of the inline confirmation label that appears after the first click.</p>\n<p>But this creates layout shifts. When users work with the app daily, it may cause more irritation than help.</p>\n<p>As an option, we can solve this issue by adding a tiny delay, e.g., 100-200ms, to prevent double-clicking.</p>\n<p>It also matters who your users are. Remember the good old days when we used to click a dozen times to launch Internet Explorer and ended up with dozens of open instances?</p>\n<p>If your target audience is likely to do this, apparently, the pattern will not work.</p>\n<p>However, for apps like Zapier or Typefully, <em>my assumption</em> is that the target audience might benefit from the pattern.</p>\n<h3>Two-factor Authorization Confirmation</h3>\n<p>This method involves sending a confirmation request, with or without some kind of verification code, to another place, such as:</p>\n<ul>\n<li>SMS,</li>\n<li>Email,</li>\n<li>Authenticator app on mobile,</li>\n<li>Push notifications (e.g., instead of sending SMS, you may choose to send push notifications),</li>\n<li>Messengers.</li>\n</ul>\n<p><strong>Notice</strong>: <em>I’m not talking about authentication (namely, login process), but rather a confirmation action.</em></p>\n<p>An example that I personally face a lot is an app for sending cryptocurrency. Since this is a sensitive request, apart from submitting the requisition from a website, I should also approve it via email.</p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/9-transaction-email-confirmation.png\" /></p>\n<h4>When To Use It</h4>\n<p>It can be used for such operations as money transfers, ownership transfers, and account deletion (even if you have a danger zone). Most of us use this method quite often when we pay online, and our banks send us OTP (one-time password or one-time code). </p>\n<p>It may go after the first initial protection method, e.g., a confirmation dialog.</p>\n<p>As you can see, the methods are often combined and used together. We should not consider each of them in isolation but rather in the context of the whole business process.</p>\n<h3>Passkeys</h3>\n<p>Passkeys are a modern, password-less authentication method designed to enhance both security and user experience.</p>\n<blockquote>“Passkeys are a replacement for passwords. A password is something that can be remembered and typed, and a passkey is a secret stored on one’s devices, unlocked with biometrics.”<br /><br />— <a href=\"https://passkeys.dev/docs/intro/what-are-passkeys/\">passkeys.dev</a></blockquote>\n\n<p>There are a few pros of using passkeys over 2FA, both in terms of security and UX:</p>\n<ol>\n<li>Unlike 2FA, which typically requires entering a code from another device or app (e.g., SMS or authenticator apps), passkeys streamline the confirmation process. They <strong>don’t require switching between devices or waiting for a code to arrive</strong>, providing immediate authentication.</li>\n<li>While 2FA provides extra protection, it is vulnerable to phishing, SIM-swapping, or interception. Passkeys are much more resistant to such attacks because they use public-private key cryptography. This means <strong>no secret code is ever sent over the network</strong>, making it phishing-resistant and not reliant on SMS or email, which can be compromised.</li>\n<li>Passkeys require less mental effort from users. There’s no need to remember a password or type a code — just authenticate with a fingerprint, facial recognition, or device-specific PIN. This way, we <a href=\"https://en.wikipedia.org/wiki/Cognitive_load\">reduce cognitive load</a>.</li>\n<li>With passkeys, the authentication process is almost <strong>instant</strong>. Unlike 2FA, where users might have to wait for a code or switch to another device, passkeys give us the opportunity to confirm actions without switching context, e.g., opening your email inbox or copying OTP from a mobile device.</li>\n</ol>\n<p>The passkeys are <a href=\"https://passkeys.dev/device-support/\">widely supported</a> and more and more <a href=\"https://www.passkeys.io/who-supports-passkeys\">companies</a> adopt it.</p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/10-passkey-companies.png\" /></p>\n<h3>Second-person Confirmation</h3>\n<p>This is a mechanism when two users are involved in the process. We may call them initiator and approver.</p>\n<p>In this case, the initiator makes a request to take some action while the approver decides whether to confirm it or not. </p>\n<p>In both roles, a confirmation dialog or other UI patterns may be used. However, the main idea is to separate responsibilities and decrease the probability of a bad decision.</p>\n<p>Actually, you have likely encountered this method many times before. For example, a developer submits a pull request, while a code reviewer decides whether to confirm it or decline.</p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/11-github-merge-pull-request.png\" /></p>\n<h4>When To Use It</h4>\n<p>It is best suited for situations when the seriousness of decisions requires few people involved. </p>\n<p>There is a direct analogy from real life. Take a look at the picture below:</p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/12-doctors-discussion.png\" /></p>\n<p>The Council of Physicians reminds us that in medicine, seeking a second opinion is crucial, as collaboration and diverse perspectives often result in more informed decisions and better patient care. This is a perfect example of when a second opinion or an approver is essential.</p>\n<p>Here, you will find some apps that use this method:</p>\n<ul>\n<li><strong>GitHub</strong>, as previously mentioned, for merging pull requests.</li>\n<li><strong>Jira</strong> and other similar apps. For example, when you move issues through a certain workflow stage, it may require manager approval.</li>\n<li><strong>Banking applications.</strong> When you make a high-value transaction, it could be necessary to verify it for legal issues.</li>\n<li><strong>Deel</strong>, which is a global hiring and payroll. One part (e.g., employer) draws up a contract and sends it to another part (e.g., freelancer), and the freelancer accepts it.</li>\n</ul>\n<p>But here is the thing: We can consider it a separate method or rather an approach for implementing business logic because even if another person confirms an action, it is still a dangerous action, with the only difference being that now it’s another person who should approve it. </p>\n<p>So, all of the examples mentioned above are not exactly a standalone specific way to protect users from making wrong decisions from the UI point of view. It’s rather an approach that helps us to reduce the number of critical mistakes.</p>\nDo We Actually Need To Ask Users?\n<p>When you ask users to take action, you should be aware of its original purpose.</p>\n<p>The fact that users make actions does not mean that they make them consciously.</p>\n<p>There are many behavioral phenomena that come from psychology, to name a few:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Cognitive_inertia\"><strong>Cognitive inertia</strong></a>: The tendency of a person to stick to familiar decisions, even if they are not suitable for the current situation. For instance, the vast majority of people don’t read user agreements. They simply agree with the lengthy text because it’s necessary from the legal point of view.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Availability_heuristic\"><strong>Availability Heuristic</strong></a>: People often make decisions based on information that is easily accessible or familiar to them rather than making a mental effort. When users see the same confirmation popups, they might automatically accept them based on their previous successful experience. Of course, sooner or later, it might not work, and the acceptance of required action can lead to bad consequences.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Cognitive_miser\"><strong>Cognitive Miser</strong></a>: The human mind is considered to be a cognitive miser due to the tendency of humans to think and solve problems in simpler and less effortful ways rather than in more sophisticated and effortful ways, regardless of intelligence. This explains why many users just click “yes” or “agree” without carefully reading the text.</li>\n<li>Quite a representative example is <a href=\"https://en.wikipedia.org/wiki/Banner_blindness\"><strong>banner blindness</strong></a>, even though not related to confirmation but, in fact, revolves around the same human behavior idiosyncrasies.</li>\n</ul>\n<p>A reasonable question that may arise: What are the alternatives? </p>\n<p>Even though we cannot entirely affect users’ behavior, there are a few tactics we can use.</p>\n<h3>Delaying</h3>\n<p>In some scenarios, we can artificially delay the task execution in a graceful way.</p>\n<p>One of my favorite examples is an app called Glovo, which is a food delivery app. Let’s have a look at the three screens you will see when you order something.</p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/13-food-delivery-verification-process.png\" /></p>\n<p>The first screen is a cart with items you chose to buy (and an annoying promotion of subscription that takes ⅓ of the screen).</p>\n<p>After you tap the “confirm order” button, you’ll see the second screen, which asks you whether everything is correct. However, the information appears gradually with fade-in animation. Also, you can see there is a progress bar, which is a <strong>fake one</strong>.</p>\n<p>After a few seconds, you’ll see another screen that shows that the app is trying to charge your card; this time, it’s a real process. After the transaction proceeds, you’ll see the status of the order and approximate delivery time.</p>\n<p><strong>Pro tip</strong>: <em>When you show the status of the order and visually highlight or animate the first step, it makes users more confident that the order will be completed. Because of the trick that is called <a href=\"https://lawsofux.com/goal-gradient-effect/\">Goal-Gradient Effect</a>.</em></p>\n<p>You’ve just paid, and “something starts happening” (at least visually), which is a sign that <em>“Oh, they should have already started preparing my order. That’s nice!”</em></p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/14-real-purchase-action.png\" /></p>\n<p>The purpose of the screen with a fake progress bar is to let users verify the order details and confirm them. </p>\n<p>But this is done in a very exquisite way:</p>\n<ol>\n<li>On the first screen, you click <em>“confirm order”</em>. It doesn’t invoke any modals or popups, such as <em>“Are you sure?”</em>.</li>\n<li>On the second screen, users can see how information about their order appears right away, and the scroll bar at the bottom goes further. It seems like that app is doing something, but it’s an illusion. An illusion that makes you take another quick look at what you’ve just ordered.</li>\n</ol>\n<p>In the previous version of the app, you couldn’t even skip the process; you could only cancel it. Now they added the <em>“Continue”</em> button, which is essentially <em>“Yes, I’m sure”</em> confirmation.</p>\n<p>This means that we return back again to the drawbacks of classic confirmation modals since users can skip the process. But the approach is different: it’s a combination of a feedback loop from the app and skipping the process. </p>\n<p>This combination makes users pay attention to the address, order, and price at least sometimes, and it gives them time to cancel the order, while in the classic approach, the confirmation is <em>“yes or no?”</em> which is more likely to be confirmed right away.</p>\n<h3>The Undo Option</h3>\n<p>The undo pattern allows users to reverse an action they have just performed, providing a safety net that reduces anxiety around making mistakes. </p>\n<p>Unlike confirmation modals that interrupt the workflow to ask for user confirmation, the undo pattern provides a smoother experience by allowing actions to be completed with the option to reverse them if needed.</p>\n<h4>When To Use It</h4>\n<p>It works perfectly fine for non-destructive, reversible actions &amp;mdashl actions that don’t have significant and immediate consequences: </p>\n<ul>\n<li>Reversing actions when editing a document (The beloved ctrl + z shortcut);</li>\n<li>Removing a file (if it goes to the trash bin first);</li>\n<li>Changing the status of a task (e.g., if you accidentally marked a task completed);</li>\n<li>Deleting a message in a chat;</li>\n<li>Applying filters to a photo.</li>\n</ul>\n<p>Combined with a timer, you can extend the number of options since such tasks as sending an email or making a money transfer could be undone. </p>\n<p><img src=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/15-undo-with-timer.png\" /></p>\n<h4>When You Cannot Use It</h4>\n<p>It’s not suitable for actions that have serious consequences, such as the following:</p>\n<ul>\n<li>Deleting an account;</li>\n<li>Submitting legal documents;</li>\n<li>Purchasing goods (refund is not the same as the  undo option);</li>\n<li>Making requests for third-party APIs (in most cases).</li>\n</ul>\n<h4>How To Implement Them?</h4>\n<ol>\n<li>The most common way that most people use every day is to provide a shortcut (ctrl + z). However, it’s constrained to some cases, such as text editors, moving files between folders, and so on.</li>\n<li>Toasts are probably the most common way to implement these web and mobile apps. The only thing that you should keep in mind is that it should stand out enough to be noticed. Hiding them in a corner with a tiny message and color that is not noticeable might not work — especially on wide screens.</li>\n<li>A straightforward solution is simply to have a button that does the undo option. Preferably close to the button that evokes the action that you want to undo.</li>\n</ol>\n<p>The undo option is tightly related to the concept called <strong>soft deleting</strong>, which is widely used in backend frameworks such as <a href=\"https://laravel.com/docs/11.x/eloquent#soft-deleting\">Laravel</a>.</p>\n<p>The concept means that when users delete something via the UI, it <em>looks like it has been deleted</em>, but in the database, we keep the data but mark it as deleted. The data is not lost, which is why the undo option is possible since we don’t actually delete anything but rather mark it as deleted.</p>\n<p>This is a good technique to ensure that data is never lost. However, not every table needs this.</p>\n<p>For example, if you delete an account and don't want users to restore it (perhaps due to legal regulations), then you should erase the data completely. But in many cases, it might be a good idea to consider soft deleting. In the worst case, you’ll be able to manually restore user data if it cannot be done via the UI for some reason.</p>\nConclusion\n<p>There’s something I want everyone to keep in mind, regardless of who you are or what you do.</p>\n<p>Every situation is unique. A certain approach might work or fail for a variety of reasons. You might sometimes wonder why a specific decision was made, but you may not realize how many times the interface was revised based on real user feedback.</p>\n<p>User behavior is affected by many factors, including country, age, culture, education, familiarity with certain patterns, disabilities, and more.</p>\n<p>What’s crucial is to <strong>stay in control of your data and users and be prepared to respond when something goes wrong</strong>. Following best practices is important, but you must still verify if they work in your specific case.</p>\n<p>Just like in chess, there are many rules — and even more exceptions.</p>\n<h3>Further Reading</h3>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/modality\">Modality</a>, Apple</li>\n<li>“<a href=\"https://medium.com/@joaopegb/ux-writing-an-effective-cancel-dialog-confirmation-on-web-539b73a39929\">An effective ‘Cancel’ dialog confirmation on Web</a>,” João Bexiga</li>\n<li>“<a href=\"https://joshwayne.com/posts/confirm-or-undo/\">Confirm or undo? Which is the better option?</a>,” Josh Wayne</li>\n<li>“<a href=\"https://surajsinghbisht054.medium.com/understanding-soft-delete-and-hard-delete-in-software-development-best-practices-and-importance-539a935d71b5\">Understanding Soft Delete and Hard Delete</a>,” Suraj Singh Bisht</li>\n<li>“<a href=\"https://www.nngroup.com/articles/confirmation-dialog/\">Confirmation Dialogs Can Prevent User Errors — If Not Overused</a>,” Jakob Nielsen</li>\n<li>“<a href=\"https://uxdesign.cc/are-you-sure-you-want-to-do-this-microcopy-for-confirmation-dialogues-1d94a0f73ac6\">Microcopy for confirmation dialogues</a>,” Kinneret Yifrah</li>\n<li><a href=\"https://www.passkeys.io/\">What is a passkey?</a>, passkeys.io</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"42e3cc06f845c0d8d29a972b1d02a2a04f5fdd3bc98064d3c58b5e0d298d2630","category":"Tech"}