{"title":"Access Azure from HCP Terraform with OIDC federation","link":"https://www.hashicorp.com/blog/access-azure-from-hcp-terraform-with-oidc-federation","date":1737640800000,"content":"<p>Storing long-lived Azure credentials poses a security risk. While HCP Terraform secures sensitive credentials as write-only variables, you must audit the usage of long-lived credentials to detect if they are compromised. Many organizations have a policy to block these types of credentials.</p>\n\n<p>A more secure and better alternative is available for authentication: <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials\">dynamic provider credentials</a> on HCP Terraform. This feature allows Terraform to authenticate to Azure as a service principal through a native OpenID Connect (OIDC) integration. HCP Terraform obtains temporary credentials for each run, and discards the credentials when the run completes. These credentials allow you to call Azure APIs that the service principal has access to at runtime. These credentials are <a href=\"https://learn.microsoft.com/en-us/entra/identity-platform/access-tokens#token-lifetime\">short-lived</a> by design, so their usefulness to an attacker is limited.</p>\n\n<p>In this blog post, we’ll explore dynamic credentials for Azure and walk you through the required steps to set this up for yourself.</p>\n\n<h2>Tutorial: Dynamic credentials for Azure</h2>\n\n<p>For this tutorial, you will use HCP Terraform to configure dynamic credentials for Azure by setting up a trust relationship between HCP Terraform and Azure (Entra ID). This configuration allows HCP Terraform to authenticate with Azure and obtain temporary credentials for provisioning resources.</p>\n\n<p>Configuring dynamic provider credentials consists of three high-level steps:</p>\n\n<ol>\n<li>Set up a trust relationship between HCP Terraform and Azure.</li>\n<li>Configure Azure platform access.</li>\n<li>Configure resources on HCP Terraform to use dynamic credentials.</li>\n</ol>\n\n<p>To follow this tutorial, you should:</p>\n\n<ul>\n<li>Be authenticated to both Azure and HCP Terraform in your local terminal session</li>\n<li>Have permissions to create an app registration and service principal in Entra ID</li>\n<li>Have permissions to assign Azure RBAC roles for the service principal </li>\n</ul>\n\n<h3>Set up a trust relationship between HCP Terraform and Azure</h3>\n\n<p>To interact with Azure, Entra ID, and HCP Terraform you will need to use the <a href=\"https://registry.terraform.io/providers/hashicorp/azurerm/latest\">azurerm</a>, <a href=\"https://registry.terraform.io/providers/hashicorp/azuread/latest\">azuread</a>, and <a href=\"https://registry.terraform.io/providers/hashicorp/tfe/latest\">tfe</a> providers in your Terraform configuration:</p>\n<pre><code>terraform {\n  required_providers {\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"3.0.2\"\n    }\n\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"4.14.0\"\n    }\n\n    tfe = {\n      source  = \"hashicorp/tfe\"\n      version = \"0.62.0\"\n    }\n  }\n}\n\nprovider \"azuread\" {}\n\nprovider \"azurerm\" {\n  features {}\n\n  subscription_id = \"xxxxxxxxxx\"\n}\n\nprovider \"tfe\" {\n  organization = \"xxxxxxxxxx\"\n}</code></pre><p>All three providers perform implicit authentication with the credentials available in the environment at runtime.</p>\n\n<p>You’ll authenticate to Azure and Entra ID using the Azure CLI. For guidance on setting up the Azure CLI, refer to the <a href=\"https://learn.microsoft.com/en-us/cli/azure/get-started-with-azure-cli\">Azure CLI documentation</a>. While there are alternative methods to authenticate to Azure and Entra ID, we prefer using the Azure CLI for its simplicity. For more details, check the documentation for the Azure or Entra ID providers.</p>\n\n<p>Begin by creating an <a href=\"https://registry.terraform.io/providers/hashicorp/azuread/latest/docs/resources/application\">application</a> in Entra ID and a corresponding <a href=\"https://registry.terraform.io/providers/hashicorp/azuread/latest/docs/resources/service_principal\">service principal</a>:</p>\n<pre><code>resource \"azuread_application\" \"hcp_terraform\" {\n  display_name = \"hcp-terraform-azure-oidc\"\n}\n\nresource \"azuread_service_principal\" \"hcp_terraform\" {\n  client_id = azuread_application.hcp_terraform.client_id\n}</code></pre><p>Below, you’ll start by establishing an OIDC trust relationship using a <a href=\"https://registry.terraform.io/providers/hashicorp/azuread/latest/docs/resources/application_federated_identity_credential\">federated identity credentials</a> resource. This resource is configured with an <strong>audience</strong> (<code>api://AzureADTokenExchange</code>), an <strong>issuer</strong> (<code>https://app.terraform.io</code>) and a <strong>subject</strong>.</p>\n\n<p>A subject has the following format that includes details from your HCP Terraform environment:</p>\n\n<pre><code>organization:&lt;name&gt;:project:&lt;name&gt;:workspace:&lt;name&gt;:run_phase:&lt;operation&gt;\n</code></pre>\n\n<p>Below is a specific example of a plan operation in an HCP Terraform organization named “my-organization”. Also included is an example project named \"my-project\" and a workspace named \"my-workspace\":</p>\n\n<pre><code>organization:my-organization:project:my-project:workspace:my-workspace:run_phase:plan\n</code></pre>\n\n<p>It is a good practice to use a federated credential for a single purpose. It's also possible to use different service principals for Terraform plan and apply operations.</p>\n\n<p>In this tutorial we use a single service principal with two different federated credentials, one for plan operations and one for apply operations.</p>\n\n<p>First, you need to create federated credentials for the workspace’s plan operations:</p>\n<pre><code># data source to reference the current hcp terraform organization\ndata \"tfe_organization\" \"current\" {}\n\nresource \"azuread_application_federated_identity_credential\" \"plan\" {\n  application_id = azuread_application.hcp_terraform.id\n  display_name   = \"${azuread_application.hcp_terraform.display_name}-plan\"\n  audiences      = [\"api://AzureADTokenExchange\"]\n  issuer         = \"https://app.terraform.io\"\n  description    = \"For HCP Terraform plan operations\"\n\n  subject = join(\":\", [\n    \"organization\",\n    data.tfe_organization.current.name,\n    \"project\",\n    tfe_project.default.name,\n    \"workspace\",\n    tfe_workspace.default.name,\n    \"run_phase\",\n    \"plan\"\n  ])\n}</code></pre><p>Next, create federated credentials for the workspace’s apply operations:</p>\n<pre><code>resource \"azuread_application_federated_identity_credential\" \"apply\" {\n  application_id = azuread_application.hcp_terraform.id\n  display_name   = \"${azuread_application.hcp_terraform.display_name}-apply\"\n  audiences      = [\"api://AzureADTokenExchange\"]\n  issuer         = \"https://app.terraform.io\"\n  description    = \"For HCP Terraform apply operations\"\n\n  subject = join(\":\", [\n    \"organization\",\n    data.tfe_organization.current.name,\n    \"project\",\n    tfe_project.default.name,\n    \"workspace\",\n    tfe_workspace.default.name,\n    \"run_phase\",\n    \"apply\"\n  ])\n}</code></pre><h3>Configure Azure platform access</h3>\n\n<p>The Azure service principal currently has no permissions to perform any actions on Azure.</p>\n\n<p>You should provide the service principal with one or more Azure RBAC roles. These allow it to perform the actions required by the Terraform configuration where it will be used.</p>\n\n<p>For the purpose of this demo, give the service principal the built-in <a href=\"https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles/storage#storage-account-contributor\">Storage Account Contributor</a> role to allow it to create and manage storage accounts on Azure. You will also set up a custom role to allow it to create resource groups on Azure.</p>\n\n<p>Our custom <code>Resource Group Creator role</code> is defined and assigned to the service principal like this:</p>\n<pre><code># data source for the current azure subscription\ndata \"azurerm_subscription\" \"current\" {}\n\nresource \"azurerm_role_definition\" \"resource_group_creator\" {\n  name  = \"Resource Group Creator\"\n  scope = data.azurerm_subscription.current.id\n\n  permissions {\n    actions = [\n      \"*/read\",\n      \"Microsoft.Resources/subscriptions/resourceGroups/write\",\n    ]\n  }\n\n  assignable_scopes = [\n    data.azurerm_subscription.current.id,\n  ]\n}\n\nresource \"azurerm_role_assignment\" \"resource_group_creator\" {\n  scope              = data.azurerm_subscription.current.id\n  principal_id       = azuread_service_principal.hcp_terraform.object_id\n  role_definition_id = azurerm_role_definition.resource_group_creator.role_definition_resource_id\n}</code></pre><p>Similarly, assigning the <code>Storage Account Contributor</code> role to the service principal on the Azure subscription scope is done like this:</p>\n<pre><code>resource \"azurerm_role_assignment\" \"storage_account_contributor\" {\n  scope                = data.azurerm_subscription.current.id\n  principal_id         = azuread_service_principal.hcp_terraform.object_id\n  role_definition_name = \"Storage Account Contributor\"\n}</code></pre><h3>Configure resources on HCP Terraform to use dynamic credentials</h3>\n\n<p>First, we create the HCP Terraform project and workspace that will use the dynamic credentials. Alternatively, feel free to use an existing project in your organization.</p>\n<pre><code>resource \"tfe_project\" \"default\" {\n  name = \"demo-project\"\n}\n\nresource \"tfe_workspace\" \"default\" {\n  name       = \"demo-workspace\"\n  project_id = tfe_project.default.id\n}</code></pre><p>When using dynamic provider credentials, there’s no need to include authentication configuration in the provider block of your Terraform configuration. However, you must tell the HCP Terraform workspace that dynamic credentials should be generated.</p>\n\n<p>Do this by configuring the appropriate environment variables in the workspace: set <code>TFC_AZURE_PROVIDER_AUTH</code> to <code>true</code> and <code>TFC_AZURE_RUN_CLIENT_ID</code> to the client ID of the service principal that HCP Terraform should use for authentication during runtime.</p>\n<pre><code>resource \"tfe_variable\" \"tfc_azure_provider_auth\" {\n  key             = \"TFC_AZURE_PROVIDER_AUTH\"\n  value           = \"true\"\n  category        = \"env\"\n  workspace_id    = tfe_workspace.default.id\n}\n\nresource \"tfe_variable\" \"tfc_azure_run_client_id\" {\n  sensitive       = true\n  key             = \"TFC_AZURE_RUN_CLIENT_ID\"\n  value           = azuread_service_principal.hcp_terraform.client_id\n  category        = \"env\"\n  workspace_id    = tfe_workspace.default.id\n}</code></pre><p>Once configured, HCP Terraform automatically retrieves temporary credentials for the service principal and injects them via the workspace environment variables, allowing you to focus on building infrastructure without the need to manage authentication.</p>\n\n<h2>Using dynamic provider credentials</h2>\n\n<p>Now you’re ready to use the established trust relationship to provision resources on Azure.</p>\n\n<p>Using dynamic provider credentials, there’s no need to define anything within the provider itself. By sharing the variable set containing the Azure service principal information with an HCP Terraform workspace, you automatically provide that workspace with access to Azure.</p>\n\n<p>HCP Terraform does this by interacting with Azure (Entra ID to be specific) at runtime to obtain temporary credentials using the environment variables from the shared variable set. This allows you to securely scale access management within HCP Terraform by delegating access from one workspace to another while precisely restricting Azure access to only what the service principal needs.</p>\n\n<p>Using the service principal created earlier, which has been assigned the Storage Account Contributor role and a custom Resource Group Creator role, you can begin creating infrastructure on Azure.</p>\n\n<p>A sample Terraform configuration that can be deployed from HCP Terraform using the established trust relationship is shown below. Note that the subject you configured for the federated credentials must match the organization, project, and workspace names where you deploy this configuration from.</p>\n<pre><code>provider \"azurerm\" {\n  features {}\n  use_cli = false\n\n  subscription_id = \"xxxxxxx\"\n  tenant_id       = \"xxxxxxx\"\n}\n\nresource \"random_string\" \"suffix\" {\n  length  = 10\n  upper   = false\n  special = false\n}\n\nresource \"azurerm_resource_group\" \"default\" {\n  name     = \"rg-demo-${random_string.suffix.result}\"\n  location = \"westeurope\"\n}\n\nresource \"azurerm_storage_account\" \"test\" {\n  name                = \"st${random_string.suffix.result}\"\n  resource_group_name = azurerm_resource_group.default.name\n  location            = azurerm_resource_group.default.location\n\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}</code></pre><h2>Dynamic provider credentials at scale</h2>\n\n<p>To scale the solution described above, we recommend a pattern where one or more HCP Terraform workspaces configure dynamic provider credentials for other workspaces. This enables the platform team to create HCP Terraform workspaces with pre-configured Azure authentication, scoped to specific service principals, per team.</p>\n\n<p>Create an <a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/cloud-multiple-variable-sets#create-variable-sets\">HCP Terraform variable set</a> for each workspace, as described in the discussion above. The variable set for each workspace has two environment variables. These are the same two environment variables from the demo above: <code>TFC_AZURE_PROVIDER_AUTH</code> and <code>TFC_AZURE_RUN_CLIENT_ID</code>. These credentials are injected into the provider to grant access to any Azure API permitted by the service principal’s permissions.</p>\n\n<p>Below is an example configuration of a variable set for a team (e.g. “Team A”).</p>\n\n<p>First, create the variable set:</p>\n<pre><code>resource \"tfe_variable_set\" \"oidc_team_a_dev\" {\n  name         = \"oidc-team-a-dev\"\n  description  = \"OIDC federation configuration for team A (dev)\"\n  organization = \"XXXXXXXXXXXXXXX\"\n}\n</code></pre><p>Next, set up the required environment variables and link them to the variable set:</p>\n<pre><code>resource \"tfe_variable\" \"tfc_azure_provider_auth\" {\n  key             = \"TFC_AZURE_PROVIDER_AUTH\"\n  value           = \"true\"\n  category        = \"env\"\n  variable_set_id = tfe_variable_set.oidc_team_a_dev.id\n}\n\nresource \"tfe_variable\" \"tfc_azure_run_client_id\" {\n  sensitive       = true\n  key             = \"TFC_AZURE_RUN_CLIENT_ID\"\n  value           = azuread_service_principal.team_a_dev.client_id\n  category        = \"env\"\n  variable_set_id = tfe_variable_set.oidc_team_a_dev.id\n}</code></pre><p>Finally, share the variable set with Team A by connecting it to their development workspace. This ensures that the targeted workspace receives and uses the environment variables, allowing HCP Terraform to automatically obtain and inject the temporary credentials:</p>\n<pre><code>resource \"tfe_workspace_variable_set\" \"oidc_team_a_dev\" {\n  variable_set_id = tfe_variable_set.oidc_team_a_dev.id\n  workspace_id    = \"ws-XXXXXXXXXXXXXXX\"\n}</code></pre><p>Set up similar resources for each team that should have access to Azure. You will also need to configure Azure <a href=\"https://learn.microsoft.com/en-us/azure/role-based-access-control/role-assignments-steps\">RBAC permissions</a> for each service principal.</p>\n\n<h2>Learn more about OIDC federation using Microsoft Entra ID</h2>\n\n<p>For more on how to securely access Azure from HCP Terraform with OIDC federation, check out <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials/azure-configuration\">Use dynamic credentials with the Azure provider</a> and the <a href=\"https://learn.microsoft.com/en-us/entra/architecture/auth-oidc\">OIDC federation</a> documentation. Find a more complete example of configuring the Azure OIDC identity provider <a href=\"https://github.com/mattias-fjellstrom/hcp-terraform-azure-oidc\">on GitHub</a>.</p>\n","author":"Mattias Fjellstrom","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"f0a98f87bc806982e2bc3407c4efd4e4e7201f56b8b1248f05e0cfe83bc5a68e","category":"Tech"}