{"title":"บันทึกการแบ่งปันเรื่องการจัดการข้อมูลใน PostgreSQL database","link":"https://www.somkiat.cc/sharing-basic-postgresql/","date":1744608229000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2025/04/pg-basic-01-150x150.jpg\" alt=\"\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2025/04/pg-basic-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2025/04/pg-basic-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/04/pg-basic-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/04/pg-basic-01-1024x587.jpg\" alt=\"\" width=\"633\" height=\"362\" /></a></figure>\n\n\n\n<p>ในการแบ่งปันเรื่องการจัดการข้อมูลใน PostgreSQL database<br />มีเรื่องพื้นฐานต่าง ๆ ที่น่าสนใจ<br />เพื่อช่วยให้จัดการข้อมูลดีขึ้นกว่าเดิม ไม่ใช่แค่ทำให้เสร็จ ๆ<br />แล้วรอแก้ไขปัญหา หรือ เราอาจจะกำลังสร้างระเบิดเวลาขึ้นมาก็ได้<br />จึงทำการสรุปสิ่งที่แบ่งปันไว้นิดหน่อย<br />เป็นเรื่องพื้นฐานล้วน ๆ  </p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เรื่องแรกคือ ต้องตรวจสอบสิ่งที่ออกแบบและสร้างขึ้นมา</strong></p>\n\n\n\n<p>ยกตัวอย่างเช่น table ที่คุณออกแบบและสร้างขึ้นมา<br />ทำการเก็บข้อมูลอะไร อย่างไร<br />มีอัตราการเติบโดตของข้อมูลหรือ data growth rate อย่างไร<br />เช่นต่อวัน ต่อเดือน ต่อปี เพื่อให้เข้าใจข้อมูล<br />มีการใช้งานอย่างเช่น เช่น<br />การ read หรือ query เป็นอย่างไร ทำงานได้ตามที่เราควาดหวังไหม ?</p>\n\n\n\n<p>เช่น เมื่อระบบมีข้อมูลมากขึ้น<br />ระบบดันทำงานช้าลงเรื่อย ๆ  โดยไม่ได้ทำอะไร<br />แบบนี้เราจะเรียกว่า ระเบิดเวลา ซึ่งควรต้องรู้ตั้งแต่ออกแบบไหมนะ !!</p>\n\n\n\n<p>ดังนั้นจึงแนะนำว่า ต้องรู้ก่อนเสมอ<br />ยกตัวอย่างเช่น</p>\n\n\n\n<ul>\n<li>สร้าง table</li>\n\n\n\n<li>generate data ไว้เพื่อทดสอบ</li>\n\n\n\n<li>ทำการ explain sql query ที่ใช้งานในระบบ</li>\n\n\n\n<li>ทำการ improve เช่น ใส่ index เป็นต้น</li>\n</ul>\n\n\n\n<p>ตัวอย่างของ script พื้นฐานแบบง่าย ๆ</p>\n\n\n\n[gist id=\"cb83f9b8560a09b48f54256d7433f2fc\" file=\"1.txt\"]\n\n\n\n<p><strong>เรื่องที่สอง คือ data modeling หรือออกแบบโครงสร้างข้อมูลให้เหมาะสมกับงาน</strong></p>\n\n\n\n<p>เราทำงานออกแบบเพื่อให้ง่ายต่อการ read  หรือ write กันแน่<br />ต้องเข้าใจ และ มองการทำงานของระบบ หรือ data flow ให้ออก<br />มิเช่นนั้น เรากำลังระเบิกเวลาขึ้นมาแน่นอน</p>\n\n\n\n<p>เช่นถ้าการดึงข้อมูลต้อง join table เยอะมาก ๆ<br />ผมชอบเรียกว่า <strong>ลูกอิช่าง join</strong><br />แบบนี้ไม่น่าจะออกแบบมาเพื่อการ read แน่นอน !!</p>\n\n\n\n<p>ต้องออกแบบให้เหมาะสมไหม ?<br />ทั้ง denormalization<br />ทั้ง pre-aggregation<br />ทั้ง materialize view<br />ทั้ง partitioning<br />ทั้งการนำ NoSQL  มาใช้งานบ้าง<br />ทั้งการนำ caching มาช่วย</p>\n\n\n\n<p><strong>เรื่องที่สาม ค่อยไปสิ่งที่ advance ขึ้นมา ทั้ง configuration และ scaling</strong></p>\n\n\n\n<p>เช่น</p>\n\n\n\n<ul>\n<li>การจัดการ connection pool เช่น  การใช้งาน proxy หรือ pg  pool เป็นต้น</li>\n\n\n\n<li>Database topology ต่าง ๆ  เช่น master-slaves, replication, multi-master เป็นต้น</li>\n\n\n\n<li>การ config database ต่าง ๆ  เช่น shared_buffers และ การบีบอัดข้อมูล (data compression)</li>\n\n\n\n<li>การทำ sharding data</li>\n\n\n\n<li>การ config พวก OS ต่าง ๆ</li>\n</ul>\n\n\n\n<p>จะเห็นได้ว่า ให้ค่อย ๆ ทำตั้งแต่พื้นฐานขึ้นไป<br />ถ้าต้นเหตุของปัญหา มันไม่ถูกแก้ไขแล้ว<br />จะแก้ไขอย่างไร ปัญหาเดิม ๆ  มันยังคงอยู่<br />เผลอ ๆ  การแก้ไขอาจจะเป็นเพียงแค่ปลายเหตุหรือไม่ ?<br />ดังนั้น พื้นฐาน สำคัญมาก ๆ <br /></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"8dfdeb9df09041f96bcf4336fd7a3c6d51acda90bea9e87c65ad7c325f8b3704","category":"Thai"}