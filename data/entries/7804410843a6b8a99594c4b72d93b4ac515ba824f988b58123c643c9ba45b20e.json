{"title":"CDKTF 0.19 adds support for config-driven import and refactoring","link":"https://www.hashicorp.com/blog/cdktf-0-19-adds-support-for-config-driven-import-and-refactoring","date":1697526540000,"content":"<p>The mission of CDK for Terraform (CDKTF) is to simplify Terraform adoption. We introduced the <a href=\"https://www.hashicorp.com/blog/cdk-for-terraform-now-generally-available\">generally available version of CDKTF</a> in August of 2022,  enabling developers not familiar with HashiCorp Configuration Language (HCL) to write Terraform configurations in their choice of language, including TypeScript, Python, C#, Java, and Go. In July of 2023, <a href=\"https://www.hashicorp.com/blog/new-multi-language-docs-simplify-cdk-for-terraform-adoption\">multi-language provider documentation for CDKTF</a> further simplified infrastructure provisioning by offering provider configuration options and code samples for the programming languages supported by CDKTF, alongside the HCL documentation in the registry.</p>\n\n<p>We are also working to make CDKTF more powerful by supporting new Terraform features to achieve cost savings and improve security. Up until now, CDKTF had limited support for import and moved blocks, resulting in manual, cumbersome resource migration and refactoring within a CDKTF project. </p>\n\n<p>Today, we’re releasing CDKTF version 0.19, which improves support for <a href=\"https://www.hashicorp.com/blog/terraform-1-5-brings-config-driven-import-and-checks\">config-driven import</a> and refactoring. This support allows developers to safely move resources and bring existing infrastructure into CDKTF projects with auto-generated code — without jeopardizing business continuity.</p>\n\n<h2>Config-driven import support</h2>\n\n<p>Importing existing infrastructure into a CDKTF project was a manual process until <a href=\"https://www.hashicorp.com/blog/terraform-1-5-brings-config-driven-import-and-checks\">Terraform 1.5 introduced config-driven import</a> in June. CDKTF v0.19 adds <a href=\"https://developer.hashicorp.com/terraform/cdktf/concepts/resources#importing-resources\">support</a> for config-driven import (which requires Terraform 1.5+) with two workflows, described below:</p>\n\n<h3>1. Specify a CDKTF config for a resource and specify where it is currently living:</h3>\n\n<p>Instantiate an instance of the resource type you want to import, with an empty configuration. Then call the <code>importFrom</code> method on the resource object, providing the <code>id</code> present for the resource in the cloud provider:  </p>\n<pre><code>new S3Bucket(this, \"bucket\", {}).importFrom(\"id-in-cloud-provider\")</code></pre><p>When running a <code>plan</code> or <code>apply</code>, you will get a message saying that your resource is going to be imported. Once you run <code>apply</code>, you can remove the <code>importFrom</code> call and the resource will now be managed by CDKTF.</p>\n\n<h3>2. Generate configuration for an existing resource</h3>\n\n<p>If you want to generate configuration for an imported resource, you can use the static method <code>generateConfigForImport</code> by specifying the type of a resource and its resource ID. When you run a plan, Terraform will generate HCL config for the resource and CDKTF will convert it to your language of choice: </p>\n<pre><code>S3Bucket.generateConfigForImport(this, \"bucket\", \"id-in-cloud-provider\");</code></pre><h2>Resource refactoring with moved block support</h2>\n\n<p>If the ID of a resource is changed — for example, by refactoring it into a nested construct — destroying and recreating the resource is the default behavior of Terraform. </p>\n\n<p>However, the new <code>moveTo</code> method lets you refactor code without losing the state or destroying and recreating the resources being moved. This is especially important when working in a production environment where you might want to restructure your code but can't afford service downtime or data loss.</p>\n\n<p>The <code>moveTo</code> function is available on all resources and is used for relocating a resource to the location specified by the string target. To set the string target for a resource, use the <code>addMoveTarget</code> function present on the resource to move to:</p>\n<pre><code>new S3Bucket(this, \"test-bucket-move-to\", {\n\tbucket: \"move-bucket-name\",\n}).addMoveTarget(\"move-s3\");\n\nnew S3Bucket(this, \"test-bucket-move-from\", {\n\tbucket: \"move-bucket-name\",\n}).moveTo(\"move-s3\");</code></pre><h2>Try CDK for Terraform</h2>\n\n<p>If you’re new to the project, these <a href=\"https://developer.hashicorp.com/terraform/tutorials/cdktf\">tutorials for CDKTF</a> are the best way to get started. You can dive deeper into our documentation with this <a href=\"https://developer.hashicorp.com/terraform/cdktf\">overview of CDKTF</a>.</p>\n\n<p>Whether you’re still experimenting or actively using CDK for Terraform, we’d love to hear from you. Please <a href=\"https://github.com/hashicorp/terraform-cdk/issues/new?assignees=&amp;labels=bug%2C+new&amp;template=bug-report.md&amp;title=\">file any bugs you encounter</a>, let us know about your <a href=\"https://github.com/hashicorp/terraform-cdk/issues/new?assignees=&amp;labels=enhancement%2C+new&amp;template=feature-request.md&amp;title=\">feature requests</a>, and share your questions, thoughts, and experiences in the <a href=\"https://discuss.hashicorp.com/c/terraform-core/cdk-for-terraform/47\">CDK for Terraform discussion forum</a>.</p>\n","author":"Rohan Kumar Tripathy","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"7804410843a6b8a99594c4b72d93b4ac515ba824f988b58123c643c9ba45b20e","category":"Tech"}