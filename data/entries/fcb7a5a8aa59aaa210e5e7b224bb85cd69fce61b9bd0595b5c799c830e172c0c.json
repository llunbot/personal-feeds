{"title":"Creating Custom Emmet Snippets In VS Code","link":"https://smashingmagazine.com/2021/06/custom-emmet-snippets-vscode/","date":1624876200000,"content":"<p>Earlier this year, I shared the <a href=\"https://www.matuzo.at/blog/html-boilerplate/\">HTML boilerplate</a> I like to use when starting new web projects with line-by-line explanations on my blog. It’s a collection of mostly <code>&lt;head&gt;</code> tags and attributes I usually use on every website I build. Until recently, I would just copy and paste the boilerplate whenever I needed it, but I’ve decided to improve my workflow by adding it as a snippet to <a href=\"https://code.visualstudio.com/\">VS Code</a> — the editor of my choice.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2e5ec5b-964e-4e8e-89c9-9603549793db/1-custom-emmet-snippets-vscode.png\" />\n</p>\n<p><li>Click “Add Item”, enter the path to the folder where you’ve saved the <em>snippets.json</em> file you’ve created earlier and press “OK”.<br /></li></p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ffcf7dc-c7b6-485a-9699-c08340ee41b3/2-custom-emmet-snippets-vscode.png\" />\n\n</p>\n<p>That’s it. Now we’re ready to create snippets by adding properties to the <code>html</code> and <code>css</code> objects where the <code>key</code> is the name of the snippet and the <code>value</code> an abbreviation or a string.</p>\nSome Of My Custom HTML Snippets\n<p>Before we dive deep into snippet creation and I show you how I created a snippet for my HTML boilerplate, let’s warm up first with some small, but useful snippets I’ve created, as well.</p>\n<h3>Lazy Loading</h3>\n<p>Out of the box, there’s an <code>img</code> abbreviation, but there’s none for lazily loaded images. We can use the default abbreviation and just add the additional attributes and attribute values we need in square brackets.</p>\n<pre><code>{\n  \"html\": {\n    \"snippets\": {\n      \"img:l\": \"img[width height loading='lazy']\"\n    }\n  }\n}\n</code></pre>\n\n<p><code>img:l</code> + Enter/Tab now creates the following markup:</p>\n<pre><code>&lt;img src=\"\" alt=\"\" width=\"\" height=\"\" loading=\"lazy\"&gt;\n</code></pre>\n\n<h3>Page</h3>\n<p>Most pages I create consist of <code>&lt;header&gt;</code>, <code>&lt;main&gt;</code> and <code>&lt;footer&gt;</code> landmarks and an <code>&lt;h1&gt;</code>. The custom <code>page</code> abbreviation lets me create that structure quickly.</p>\n<pre><code>\"snippets\": {\n  \"page\": \"header&gt;h1^main+footer{${0:©}}\"\n}\n</code></pre>\n\n<p><code>page</code> + Enter/Tab creates the following markup:</p>\n<pre><code>&lt;header&gt;\n  &lt;h1&gt;&lt;/h1&gt;\n&lt;/header&gt;\n&lt;main&gt;&lt;/main&gt;\n&lt;footer&gt;©&lt;/footer&gt;\n</code></pre>\n\n<p>That abbreviation is quite long, so let’s break it down into smaller bits.</p>\n<h4>Breakdown</h4>\n<p>Create an <code>&lt;header&gt;</code> element and a child <code>&lt;h1&gt;</code>.</p>\n<pre><code>header&gt;h1\n</code></pre>\n\n<p>Move up, back to the level of the <code>&lt;header&gt;</code>, and create a <code>&lt;footer&gt;</code> that follows <code>&lt;main&gt;</code>.</p>\n<pre><code>^main+footer\n</code></pre>\n\n<p>Set the final tab stop within the <code>&lt;footer&gt;</code> and set the default text to <code>&amp;copy</code>.</p>\n<pre><code>{${0:©}}\n</code></pre>\n\n<h3>Navigation</h3>\n<p>The abbreviation <code>nav</code> just creates a <code>&lt;nav&gt;</code> start and end tag by default, but what I usually need is a <code>&lt;nav&gt;</code> with a nested <code>&lt;ul&gt;</code>, <code>&lt;li&gt;</code> elements and links ( <code>&lt;a&gt;</code>). If there are multiple <code>&lt;nav&gt;</code> elements on a page, they should also be labeled, for example by using <code>aria-label</code>.</p>\n<pre><code>\"nav\": \"nav[aria-label='${1:Main}']&gt;ul&gt;(li&gt;a[aria-current='page']{${2:Current Page}})+(li*3&gt;a{${0:Another Page}})\"\n</code></pre>\n\n<p>That looks wild, so let’s break it down again.</p>\n<h4>Breakdown</h4>\n<p>We start with a <code>&lt;nav&gt;</code> element with an <code>aria-label</code> attribute and a nested <code>&lt;ul&gt;</code>. <code>${1:Main}</code> populates the attribute with the text “Main” and creates a tab stop at the attribute value by moving the cursor to it and highlighting it upon creation.</p>\n<pre><code>nav[aria-label='${1:Main}']&gt;ul\n</code></pre>\n\n<p>Then we create four list items with nested links. The first item is special because it marks the active page using <code>aria-current=\"page\"</code>. We create another tab stop and populate the link with the text “Current Page”.</p>\n<pre><code>(li&gt;a[aria-current='page']&gt;{${2:Current Page}})\n</code></pre>\n\n<p>Finally, we add three more list items with links and the link text “Another page”.</p>\n<pre><code>(li*3&gt;a&gt;{${0:Another Page}})\n</code></pre>\n\n<p>Before our adaptations, we got this:</p>\n<pre><code></code></pre>\n\n<p>Now we get this:</p>\n<pre><code>&lt;-- After: nav + TAB/Enter --&gt;\n\n&lt;nav aria-label=\"Main\"&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"\" aria-current=\"page\"&gt;Current Page&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"\"&gt;Another Page&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"\"&gt;Another Page&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"\"&gt;Another Page&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre>\n\n\n\n<h3>Style</h3>\n<p>The default <code>style</code> abbreviation only creates the <code>&lt;style&gt;</code> start and end tag, but usually when I use the <code>&lt;style&gt;</code> element I do it because I quickly want to test or debug something.</p>\n<p>Let’s add some default rules to the <code>&lt;style&gt;</code> tag:</p>\n<pre><code>\"style\": \"style&gt;{\\\\* { box-sizing: border-box; \\\\}}+{\\n${1:*}:focus \\\\{${2: outline: 2px solid red; }\\\\} }+{\\n${0}}\"\n</code></pre>\n\n<h4>Breakdown</h4>\n<p>Some characters (e.g. <code>$</code>, <code>*</code>, <code>{</code> or <code>}</code>) have to be escaped using  <code>\\\\</code>.</p>\n<pre><code>style&gt;{\\\\* { box-sizing: border-box; \\\\}}\n</code></pre>\n\n<p><code>\\n</code> creates a linebreak and <code>${1:*}</code> places the first tab stop at the selector <code>*</code>.</p>\n<pre><code>{\\n${1:*}:focus \\\\{${2: outline: 2px solid red; }\\\\}}\n</code></pre>\n\n<ul>\n<li><strong>Before</strong>: <code>&lt;style&gt;&lt;style&gt;</code></li>\n<li><strong>After</strong>:  <pre><code>&lt;style&gt;\n* { box-sizing: border-box; }  \n*:focus { outline: 2px solid red; }\n&lt;/style&gt;\n</code></pre>\n\n</li>\n</ul>\n<p>Alright, enough warming-up. Let’s create complex snippets. At first, I wanted to create a single snippet for my boilerplate, but I created three abbreviations that serve different needs.</p>\n<ol>\n  <li><a href=\"#small\">Small</a></li>\n  <li><a href=\"#medium\">Medium</a></li>\n  <li><a href=\"#full\">Full</a></li>\n</ol>\n\n\n\n<h3>Boilerplate Small</h3>\n<p>This is a boilerplate for quick demos, it creates the following:</p>\n<ul>\n<li>Basic site structure,</li>\n<li><code>viewport</code> meta tag,</li>\n<li>Page title,</li>\n<li><code>&lt;style&gt;</code> element,</li>\n<li>A <code>&lt;h1&gt;</code>.</li>\n</ul>\n<div>\n <pre><code>{\n  \"!\": \"{&lt;!DOCTYPE html&gt;}+html[lang=${1}${lang}]&gt;(head&gt;meta:utf+meta:vp+{}+title{${2:New document}}+{}+style)+body&gt;(h1&gt;{${3: New Document}})+{${0}}\"\n}\n</code></pre>\n</div>\n\n<h4>Breakdown</h4>\n<p>A string with the doctype:</p>\n<pre><code>{&lt;!DOCTYPE html&gt;}\n</code></pre>\n\n<p>The <code>&lt;html&gt;</code> element with a <code>lang</code> attribute. The value of the <code>lang</code> attribute is a variable you can change in the VS code settings (Code → Preferences → Settings).</p>\n<pre><code>html[lang=${1}${lang}]\n</code></pre>\n\n<p>You can change the default natural language of the page by searching for “emmet variables” in VS Code settings and changing the <code>lang</code> variable. You can add your custom variables here, too.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a4c4769-8d37-42c2-81f1-846e150e420f/3-custom-emmet-snippets-vscode.png\" /></p>\n<p>The <code>&lt;head&gt;</code> includes the <code>charset</code> meta tag, <code>viewport</code> meta tag, <code>&lt;title&gt;</code>, and <code>&lt;style&gt;</code> tag. <code>{}</code> creates a new line.</p>\n<pre><code>(head&gt;meta:utf+meta:vp+{}+title{${2:New document}}+{}+style)\n</code></pre>\n\n<p>Let’s have a first quick look at what this gives us.</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n\n  &lt;title&gt;New document&lt;/title&gt;\n&lt;/head&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Looks okay, but the <code>meta:utf</code> abbreviation creates the old way in HTML to define the <code>charset</code> and <code>meta:vp</code> creates two tab stops I don’t need because I never use a different setting for the <code>viewport</code>.</p>\n<p>Let’s overwrite these snippets before we move on.</p>\n<pre><code>{\n  \"meta:vp\": \"meta[name=viewport content='width=device-width, initial-scale=1']\",\n  \"meta:utf\": \"meta[charset=${charset}]\"\n}\n</code></pre>\n\n<p>Last but not least, the <code>&lt;body&gt;</code> element, an <code>&lt;h1&gt;</code> with default text, followed by the final tab stop.</p>\n<pre><code>body&gt;(h1&gt;{${3: New Document}})+{${0}}\n</code></pre>\n\n<p>The final boilerplate:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n\n  &lt;title&gt;New document&lt;/title&gt;\n\n  &lt;style&gt;\n    * { box-sizing: border-box; }\n\n    *:focus { outline: 2px solid red; } \n\n\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt; New Document&lt;/h1&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>For me, that’s the perfect minimal debugging setup.</p>\n<h3>Boilerplate Medium</h3>\n<p>While I use the first boilerplate only for quick demos, the second boilerplate can be used for complex pages. The snippet creates the following:</p>\n<ul>\n<li>Basic site structure,</li>\n<li><code>viewport</code> meta tag,</li>\n<li>Page title,</li>\n<li><code>.no-js</code>/<code>.js</code> classes,</li>\n<li>External screen and print stylesheets,</li>\n<li><code>description</code> and <code>theme-color</code> meta tag,</li>\n<li>Page structure.</li>\n</ul>\n<div>\n <pre><code>{\n  \"!!\": \"{&lt;!DOCTYPE html&gt;}+html[lang=${1}${lang}].no-js&gt;{&lt;!-- TODO: Check lang attribute --&gt; }+(head&gt;meta:utf+meta:vp+{}+title{${1:🛑 Change me}}+{}+(script[type=\\\"module\\\"]&gt;{document.documentElement.classList.replace('no-js', 'js');})+{}+link:css+link:print+{}+meta[name=\\\"description\\\"][content=\\\"${2:🛑 Change me (up to ~155 characters)}\\\"]+{&lt;!-- TODO: Change page description --&gt; }+meta[name=\\\"theme-color\\\"][content=\\\"${2:#FF00FF}\\\"])+body&gt;page\"\n}\n</code></pre>\n</div>\n\n<p>Yeaaah, I know, that looks like gibberish. Let’s dissect it.</p>\n<h4>Breakdown</h4>\n<p>The <code>doctype</code> and the root element are like in the first example, but with an additional <code>no-js</code> class and a comment that reminds me to change the <code>lang</code> attribute, if necessary.</p>\n<pre><code>{&lt;!DOCTYPE html&gt;}+html[lang=${1}${lang}].no-js&gt;{ }\n</code></pre>\n\n<p>The <a href=\"https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight\">TODO Highlight</a> extension makes the comment really pop.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15080c47-7445-4120-adaf-6c261f3f1182/4-custom-emmet-snippets-vscode.png\" /></p>\n<p>The <code>&lt;head&gt;</code> includes the <code>charset</code> meta tag, <code>viewport</code> meta tag, <code>&lt;title&gt;</code>. <code>{}</code> creates a new line.</p>\n<pre><code>(head&gt;meta:utf+meta:vp+{}+title{${1:🛑 Change me}}+{}\n</code></pre>\n\n<p>A script with a line of JavaScript. I’m <a href=\"https://fettblog.eu/cutting-the-mustard-2018/\">cutting the mustard</a> at the JS module support. If a browser supports JavaScript modules, it means that it’s a browser that supports modern JavaScript (e.g. modules, ES 6 syntax, fetch, and so on). I ship most JS only to these browsers, and I use the <code>js</code> class in CSS, if the styling of a component is different, when JavaScript is active.</p>\n<div>\n <pre><code>(script[type=\\\"module\\\"]&gt;{document.documentElement.classList.replace('no-js', 'js');})+{}\n</code></pre>\n</div>\n\n<p>Two <code>&lt;link&gt;</code> elements; the first links to the main stylesheet and the second to a print stylesheet.</p>\n<pre><code>link:css+link:print+{}\n</code></pre>\n\n<p>The page description:</p>\n<pre><code>meta[name=\\\"description\\\"\\][content=\\\"${2:🛑 Change me (up to ~155 characters)}\\\"]+{ }\n</code></pre>\n\n<p>The <code>theme-color</code> meta tag:</p>\n<pre><code>meta[name=\\\"theme-color\\\"\\][content=\\\"${2:#FF00FF}\\\"])\n</code></pre>\n\n<p>The body element and the basic page structure:</p>\n<pre><code>body&gt;page\n</code></pre>\n\n<p>The final boilerplate looks like this:</p>\n<div>\n <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" class=\"no-js\"&gt;\n&lt;!-- TODO: Check lang attribute --&gt; \n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n\n  &lt;title&gt;🛑 Change me&lt;/title&gt;\n\n  &lt;script type=\"module\"&gt;\n    document.documentElement.classList.replace('no-js', 'js');\n  &lt;/script&gt;\n\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n  &lt;link rel=\"stylesheet\" href=\"print.css\" media=\"print\"&gt;\n\n  &lt;meta name=\"description\" content=\"🛑 Change me (up to ~155 characters)\"&gt;\n  &lt;!-- TODO: Change page description --&gt; \n  &lt;meta name=\"theme-color\" content=\"#FF00FF\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;header&gt;\n    &lt;h1&gt;&lt;/h1&gt;\n  &lt;/header&gt;\n  &lt;main&gt;&lt;/main&gt;\n  &lt;footer&gt;©&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</div>\n\n<h3>Full Boilerplate</h3>\n<p>The full boilerplate is similar to the second boilerplate; the differences are additional <code>meta</code> tags and a <code>script</code> tag.</p>\n<p>The snippet creates the following:</p>\n<ul>\n<li>Basic site structure,</li>\n<li><code>viewport</code> meta tag,</li>\n<li>Page title,</li>\n<li><code>js</code>/<code>no-js</code> classes,</li>\n<li>External screen and print stylesheets,</li>\n<li><code>description</code> and open graph meta tags,</li>\n<li><code>theme-color</code> meta tag,</li>\n<li>canonical <code>&lt;link&gt;</code> tag,</li>\n<li>Favicon tags,</li>\n<li>Page structure,</li>\n<li>&lt;<code>script&gt;</code> tag.</li>\n</ul>\n<div>\n <pre><code>{\n  \"!!!\": \"{&lt;!DOCTYPE html&gt;}+html[lang=${1}${lang}].no-js&gt;{&lt;!-- TODO: Check lang attribute --&gt; }+(head&gt;meta:utf+meta:vp+{}+title{${1:🛑 Change me}}+{}+(script[type=\\\"module\\\"]&gt;{document.documentElement.classList.replace('no-js', 'js');})+{}+link:css+link:print+{}+meta[property=\\\"og:title\\\"][content=\\\"${1:🛑 Change me}\\\"]+meta[name=\\\"description\\\"][content=\\\"${2:🛑 Change me (up to ~155 characters)}\\\"]+meta[property=\\\"og:description\\\"][content=\\\"${2:🛑 Change me (up to ~155 characters)}\\\"]+meta[property=\\\"og:image\\\"][content=\\\"${1:https://}\\\"]+meta[property=\\\"og:locale\\\"][content=\\\"${1:en_GB}\\\"]+meta[property=\\\"og:type\\\"][content=\\\"${1:website}\\\"]+meta[name=\\\"twitter:card\\\"][content=\\\"${1:summary_large_image}\\\"]+meta[property=\\\"og:url\\\"][content=\\\"${1:https://}\\\"]+{&lt;!-- TODO: Change social media stuff --&gt; }+{}+link[rel=\\\"canonical\\\"][href=\\\"${1:https://}\\\"]+{&lt;!-- TODO: Change canonical link --&gt; }+{}+link[rel=\\\"icon\\\"][href=\\\"${1:/favicon.ico}\\\"]+link[rel=\\\"icon\\\"][href=\\\"${1:/favicon.svg}\\\"][type=\\\"image/svg+xml\\\"]+link[rel=\\\"apple-touch-icon\\\"][href=\\\"${1:/apple-touch-icon.png}\\\"]+link[rel=\\\"manifest\\\"][href=\\\"${1:/my.webmanifest}\\\"]+{}+meta[name=\\\"theme-color\\\"][content=\\\"${2:#FF00FF}\\\"])+body&gt;page+{}+script:src[type=\\\"module\\\"]\"\n}\n</code></pre>\n</div>\n\n<p>This incredibly long snippet creates this:</p>\n<div>\n <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" class=\"no-js\"&gt;\n&lt;!-- TODO: Check lang attribute --&gt; \n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n\n  &lt;title&gt;🛑 Change me&lt;/title&gt;\n\n  &lt;script type=\"module\"&gt;\n    document.documentElement.classList.replace('no-js', 'js');\n  &lt;/script&gt;\n\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n  &lt;link rel=\"stylesheet\" href=\"print.css\" media=\"print\"&gt;\n\n  &lt;meta property=\"og:title\" content=\"🛑 Change me\"&gt;\n  &lt;meta name=\"description\" content=\"🛑 Change me (up to ~155 characters)\"&gt;\n  &lt;meta property=\"og:description\" content=\"🛑 Change me (up to ~155 characters)\"&gt;\n  &lt;meta property=\"og:image\" content=\"https://\"&gt;\n  &lt;meta property=\"og:locale\" content=\"en_GB\"&gt;\n  &lt;meta property=\"og:type\" content=\"website\"&gt;\n  &lt;meta name=\"twitter:card\" content=\"summary_large_image\"&gt;\n  &lt;meta property=\"og:url\" content=\"https://\"&gt;\n  &lt;!-- TODO: Change social media stuff --&gt; \n\n  &lt;link rel=\"canonical\" href=\"https://\"&gt;\n  &lt;!-- TODO: Change canonical link --&gt; \n\n  &lt;link rel=\"icon\" href=\"/favicon.ico\"&gt;\n  &lt;link rel=\"icon\" href=\"/favicon.svg\" type=\"image/svg+xml\"&gt;\n  &lt;link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\"&gt;\n  &lt;link rel=\"manifest\" href=\"/my.webmanifest\"&gt;\n\n  &lt;meta name=\"theme-color\" content=\"#FF00FF\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;header&gt;\n    &lt;h1&gt;&lt;/h1&gt;\n  &lt;/header&gt;\n  &lt;main&gt;&lt;/main&gt;\n  &lt;footer&gt;©&lt;/footer&gt;\n\n  &lt;script src=\"\" type=\"module\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</div>\n\n\n\nCustom CSS Snippets\n<p>For the sake of completeness, here are some of the CSS snippets I’m using.</p>\n<h3>Debugging</h3>\n<p>This snippet creates a 5px red outline with a custom offset.</p>\n<pre><code>\"debug\": \"outline: 5px solid red;\\noutline-offset: -5px;\"\n</code></pre>\n\n<h3>Centering</h3>\n<p>A snippet that sets <code>display</code> to flex, and centers its child items.</p>\n<pre><code>\"center\": \"display: flex;\\njustify-content: center;\\nalign-items: center;\"\n</code></pre>\n\n<h3>Sticky</h3>\n<p>Sets the <code>position</code> property to <code>sticky</code>, with two tab stops at the <code>top</code> and <code>left</code> property.</p>\n<pre><code>\"sticky\": \"position: sticky;\\ntop: ${1:0};\\nleft: ${2:0};\"\n</code></pre>\n\n\n\nUser Snippets\n<p>At the beginning of this article, I mentioned that VS Code also provides custom snippets. The difference to Emmet snippets is that you can’t use abbreviations, but you can also define tab stops and make use of internal variables.</p>\n<p>How to get the best out of user snippets could be a topic for another article, but here’s an example of a custom CSS snippet I’ve defined:</p>\n<div>\n <pre><code>\"Visually hidden\": {\n\"prefix\": \"vh\",\n\"body\": [\n  \".u-vh {\",\n  \"  position: absolute;\\n  white-space: nowrap;\\n  width: 1px;\\n  height: 1px;\\n  overflow: hidden;\\n  border: 0;\\n  padding: 0;\\n  clip: rect(0 0 0 0);\\n  clip-path: inset(50%);\\n  margin: -1px;\",\n  \"}\"\n],\n\"description\": \"A utility class for screen reader accessible hiding.\"\n}\n</code></pre>\n</div>\n\n<p>This snippet doesn’t just create CSS rules, but a whole declaration block when we type <code>vh</code> and press Enter or Tab.</p>\n<pre><code>.u-vh {\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  border: 0;\n  padding: 0;\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  margin: -1px;\n}\n</code></pre>\n\nFinal Words\n<p>It takes some time to create these snippets, but it’s worth the effort because you can customize Emmet to your personal preferences, automate repetitive tasks and save time in the long run. </p>\n<p>I’d love to see which snippets you use, so please share them with us in the comments. If you want to use my settings, you can find my <a href=\"https://gist.github.com/matuzo/188a81a567dc4780690c699c822ec387\">final snippets.json</a> on GitHub. </p>\n<h3>Resources</h3>\n<ul>\n<li>Default <a href=\"https://github.com/emmetio/snippets/blob/master/css.json\">CSS Emmet snippets</a></li>\n<li>Default <a href=\"https://github.com/emmetio/snippets/blob/master/html.json\">HTML Emmet snippets</a></li>\n<li>Emmet <a href=\"https://docs.emmet.io/cheat-sheet/\">cheat sheet</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/editor/emmet\">Emmet in VS Code docs</a></li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"fcb7a5a8aa59aaa210e5e7b224bb85cd69fce61b9bd0595b5c799c830e172c0c","category":"Tech"}