{"title":"Amazon ElastiCache Serverless for Redis and Memcached is now available","link":"https://aws.amazon.com/blogs/aws/amazon-elasticache-serverless-for-redis-and-memcached-now-generally-available/","date":1701145401000,"content":"<p>Today, we are announcing the availability of <a href=\"https://aws.amazon.com/elasticache/features/#Serverless\"><strong>Amazon ElastiCache Serverless</strong>,</a> a new serverless option that allows customers to create a cache in under a minute and instantly scale capacity based on application traffic patterns. ElastiCache Serverless is compatible with two popular open-source caching solutions, Redis and Memcached.</p> \n<p>You can use ElastiCache Serverless to operate a cache for even the most demanding workloads without spending time in capacity planning or requiring caching expertise. ElastiCache Serverless constantly monitors your application’s memory, CPU, and network resource utilization and scales instantly to accommodate changes to the access patterns of workloads it serves. You can create a highly available cache with data automatically replicated across multiple Availability Zones and up to 99.99 percent availability Service Level Agreement (SLA) for all workloads, which saves you time and money.</p> \n<p>Customers wanted to get radical simplicity to deploy and operate a cache. ElastiCache Serverless offers a simple endpoint experience abstracting the underlying cluster topology and cache infrastructure. You can reduce application complexity and have more operational excellence without handling reconnects and rediscovering nodes.</p> \n<p>With ElastiCache Serverless, there are no upfront costs, and you pay for only the resources you use. You pay for the amount of cache data storage and ElastiCache Processing Units (ECPUs) resources consumed by your applications.</p> \n<p><strong><u>Getting started with Amazon ElastiCache Serverless</u></strong><br /> To get started, go to the <a href=\"https://console.aws.amazon.com/elasticache/\">ElastiCache console</a> and choose <strong>Redis caches</strong> or <strong>Memcached caches</strong> in the left navigation pane. ElastiCache Serverless supports engine versions of Redis 7.1 or higher and Memcached 1.6 or higher.</p> \n<p>For example, in the case of Redis caches, choose <strong>Create Redis cache</strong>.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/25/2023-elasticache-serverless-fig1-home-1-1.png\" width=\"2450\" height=\"904\" /></p> \n<p>You see two deployment options: either <strong>Serverless</strong> or <strong>Design your own cache</strong> to create a node-based cache cluster. Choose the <strong>Serverless</strong> option, the <strong>New cache</strong> method, and provide a name.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/12/2023-elasticache-serverless-fig2-create.png\" width=\"1686\" height=\"1466\" /></p> \n<p>Use the default settings to create a cache in your default VPC, Availability Zones, service-owned encryption key, and security groups. We will automatically set recommended best practices. You don’t have to enter any additional settings.</p> \n<p>If you want to customize default settings, you can set your own security groups, or enable automatic backups. You can also set maximum limits for your compute and memory usage to ensure your cache doesn’t grow beyond a certain size. When your cache reaches the memory limit, keys with a time to live (TTL) are evicted according to the least recently used (LRU) logic. When your compute limit is reached, ElastiCache will throttle requests, which will lead to elevated request latencies.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/12/2023-elasticache-serverless-fig3-default-setting.png\" width=\"1676\" height=\"1416\" /></p> \n<p>When you create a new serverless cache, you can see the details of settings for connectivity and data protection, including an endpoint and network environment.</p> \n<p>Now, you can configure the ElastiCache Serverless endpoint in your application and connect using any Redis client that supports Redis in cluster mode, such as <code>redis-cli</code>.</p> \n<pre><code>$ redis-cli -h channy-redis-serverless.elasticache.amazonaws.com --tls -c -p 6379\nset x Hello\nOK\nget x\n\"Hello\"</code></pre> \n<p>You can manage the cache using <a href=\"https://aws.amazon.com/cli\">AWS Command Line Interface (AWS CLI)</a> or AWS SDKs. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/WhatIs.html\">Getting started with Amazon ElastiCache for Redis</a> in the AWS documentation.</p> \n<p>If you have an existing Redis cluster, you can migrate your data to ElastiCache Serverless by specifying the ElastiCache backups or Amazon S3 location of a backup file in a standard Redis <code>rdb</code> file format when creating your ElastiCache Serverless cache.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/12/2023-elasticache-serverless-fig5-backup.png\" width=\"1622\" height=\"834\" /></p> \n<p>For a Memcached cache, you can create and use a new serverless cache in the same way as Redis.</p> \n<p>If you use ElastiCache Serverless for Memcached, there are significant benefits of high availability and instant scaling because they are not natively available in the Memcached engine. You no longer have to write custom business logic, manage multiple caches, or use a third-party proxy layer to replicate data to get high availability with Memcached. Now you can get up to 99.99 percent availability SLA and data replication across multiple Availability Zones.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/2023-elasticache-serverless-fig6-memcached-1.png\" width=\"1884\" height=\"1322\" /></p> \n<p>To connect to the Memcached endpoint, run the <code>openssl</code> client and Memcached commands as shown in the following example output:</p> \n<pre><code>$ /usr/bin/openssl s_client -connect channy-memcached-serverless.cache.amazonaws.com:11211 -crlf \nset a 0 0 5\nhello\nSTORED\nget a\nVALUE a 0 5\nhello\nEND</code></pre> \n<p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/GettingStarted.html\">Getting started with Amazon ElastiCache Serverless for Memcached</a> in the AWS documentation.</p> \n<p><strong><u>Scaling and performance</u></strong><br /> ElastiCache Serverless scales without downtime or performance degradation to the application by allowing the cache to scale up and initiating a scale-out in parallel to meet capacity needs just in time.</p> \n<p>To show ElastiCache Serverless’ performance we conducted a simple scaling test. We started with a typical Redis workload with an 80/20 ratio between reads and writes with a key size of 512 bytes. Our Redis client was configured to Read From Replica (RFR) using the READONLY Redis command, for optimal read performance. Our goal is to show how fast workloads can scale on ElastiCache Serverless without any impact on latency.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/24/2023-elasticache-serverless-fig7-benchmark.png\" width=\"2489\" height=\"815\" /></p> \n<p>As you can see in the graph above, we were able to double the requests per second (RPS) every 10 minutes up until the test’s target request rate of 1M RPS. During this test, we observed that p50 GET latency remained around 751 microseconds and at all times below 860 microseconds. Similarly, we observed p50 SET latency remained around 1,050 microseconds, not crossing the 1,200 microseconds even during the rapid increase in throughput.</p> \n<p><strong><u>Things to know</u></strong></p> \n<ul> \n <li><strong>Upgrading engine version</strong> – ElastiCache Serverless transparently applies new features, bug fixes, and security updates, including new minor and patch engine versions on your cache. When a new major version is available, ElastiCache Serverless will send you a notification in the console and an event in <a href=\"https://aws.amazon.com/eventbridge\">Amazon EventBridge</a>. ElastiCache Serverless major version upgrades are designed for no disruption to your application.</li> \n <li><strong>Performance and monitoring</strong> – ElastiCache Serverless publishes a suite of metrics to Amazon CloudWatch, including memory usage (<code>BytesUsedForCache</code>), CPU usage (<code>ElastiCacheProcessingUnits</code>), and cache metrics, including <code>CacheMissRate</code>, <code>CacheHitRate</code>, <code>CacheHits</code>, <code>CacheMisses</code>, and <code>ThrottledRequests</code>. ElastiCache Serverless also publishes <a href=\"https://aws.amazon.com/eventbridge/\">Amazon EventBridge</a> events for significant events, including cache creation, deletion, and limit updates. For a full list of available metrics and events, see the documentation.</li> \n <li><strong>Security and compliance</strong> – ElastiCache Serverless caches are accessible from within a VPC. You can access the data plane using <a href=\"https://aws.amazon.com/iam\">AWS Identity and Access Management (IAM)</a>. By default, only the AWS account creating the ElastiCache Serverless cache can access it. ElastiCache Serverless encrypts all data at rest and in-transit by transport layer security (TLS) encrypting each connection to ElastiCache Serverless. You can optionally choose to limit access to the cache within your VPCs, subnets, IAM access, and <a href=\"https://aws.amazon.com/kms\">AWS Key Management Service (AWS KMS)</a> key for encryption. ElastiCache Serverless is compliant with PCI-DSS, SOC, and ISO and is HIPAA eligible.</li> \n</ul> \n<p><strong><u>Now available</u></strong><br /> Amazon ElastiCache Serverless is now available in all commercial AWS Regions, including China. With ElastiCache Serverless, there are no upfront costs, and you pay for only the resources you use. You pay for cached data in GB-hours, ECPUs consumed, and Snapshot storage in GB-months.</p> \n<p>To learn more, see the <a href=\"https://aws.amazon.com/elasticache/features/#Serverless\">ElastiCache Serverless page</a> and the <a href=\"https://aws.amazon.com/elasticache/pricing/#Serverless\">pricing page</a>. Give it a try, and please send feedback to <a href=\"https://repost.aws/tags/questions/TARDe-88acTLSr8i9rSAfn_Q?view=all\">AWS re:Post for Amazon ElastiCache</a> or through your usual AWS support contacts.</p> \n<p>— <a href=\"https://twitter.com/channyun\">Channy</a></p>","author":"Channy Yun","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"a027a0dc691bda6f802be316ed202b34a4adfca37a0df7673a210123c4a99946","category":"Tech"}