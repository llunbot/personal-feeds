{"title":"New – Attribute-Based Instance Type Selection for EC2 Auto Scaling and EC2 Fleet","link":"https://aws.amazon.com/blogs/aws/new-attribute-based-instance-type-selection-for-ec2-auto-scaling-and-ec2-fleet/","date":1635368746000,"content":"<p>The first AWS service I used, more than ten years ago, was <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a>. Over time, EC2 has added a wide selection of instance types optimized to fit different use cases, with a varying combination of CPU/GPU, memory, storage, and networking capacity to give you the flexibility to choose the appropriate mix of resources for your applications.</p> \n<p>One of the key advantages of the cloud is elasticity. With <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html\">EC2 Fleet</a>, you can synchronously request capacity across multiple instance types and purchase options, launching your instances across multiple <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/#Availability_Zones\">Availability Zones</a>, using the On-Demand, Reserved, and <a href=\"https://aws.amazon.com/ec2/spot/\">Spot Instances</a> together. With <a href=\"https://aws.amazon.com/ec2/autoscaling/\">EC2 Auto Scaling</a>, you can automatically add or remove EC2 instances according to conditions you define and add advanced instance management capabilities such as <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\">warm pools</a>, <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\">instance refresh</a>, and <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\">health checks</a>. With these tools, you need to manually update your configurations to benefit from the newest EC2 instances. Also, when you use EC2 Spot Instances to optimize your costs, it is important that you select multiple instance types to access the highest amount of Spot capacity. Until now, there was no easy way to build and maintain instance type configurations in a flexible way.</p> \n<p>Today, I am happy to share that we are introducing <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html\">attribute-based instance type selection (ABS)</a>, a new feature that lets you express your instance requirements as a set of attributes, such as vCPU, memory, and storage. Your requirements are translated by ABS to all matching instance types, simplifying the creation and maintenance of instance type configurations. This also allows you to automatically use newer generation instance types when they are released and access a broader range of capacity via EC2 Spot Instances. EC2 Fleet and EC2 Auto Scaling select and launch instances that fit the specified attributes, removing the need to manually pick instance types.</p> \n<p>ABS is ideal for flexible workloads and frameworks, such as when running containers or web fleets, processing big data, and implementing continuous integration and deployment (CI/CD) tooling. When using Spot Instances, instead of picking and entering tens of instance types and sizes, you can now just use a simple attribute config to cover all of them and include new ones as they come out.</p> \n<p><span><strong>How Attribute-Based Instance Type Selection Works<br /> </strong></span>With ABS, you replace the list of instance types with your instance requirements. You can specify instance requirements inside a <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchTemplates.html\">launch template</a> or in the EC2 Fleet or EC2 Auto Scaling requests as a launch template override.</p> \n<p>ABS works in two steps:</p> \n<ul> \n <li>First, ABS determines a <strong>list of instance types</strong> based on specified attributes, <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/#Regions\">AWS Region</a>, Availability Zone, and price.</li> \n <li>Then, EC2 Auto Scaling or EC2 Fleet applies the selected <strong>allocation strategy</strong> to that list.</li> \n</ul> \n<p>For Spot Instances, ABS supports the <strong>capacity-optimized</strong> and the <strong>lowest-price</strong> allocation strategies.</p> \n<p>For On-Demand Instances, ABS supports the <strong>lowest-price</strong> allocation strategy. EC2 Auto Scaling or EC2 Fleet will resolve ABS attributes to a list of instance types and will launch the lowest priced instance first to fulfill the On-Demand portion of the capacity request, moving to the next lowest priced instance if needed.</p> \n<p>By default ABS enables <strong>price protection</strong> to keep your spending under control. <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html#understand-price-protection\">Price protection</a> makes ABS avoid provisioning overly expensive instance types even if they happen to fit the attributes you selected and keeps the prices of provisioned instances within certain boundaries. With price protection enabled, ABS doesn’t select instance types whose price is above price protection thresholds. There are two separate thresholds for Spot and On-Demand instances that you can optionally customize.</p> \n<p>Let’s see how ABS works in practice with a couple of examples.</p> \n<p><span><strong>Using Attribute-Based Instance Type Selection with EC2 Auto Scaling<br /> </strong></span>I use the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (CLI)</a> with the <code>--generate-cli-skeleton</code> parameter to generate a file in <a href=\"https://en.wikipedia.org/wiki/YAML\">YAML</a> format with all the parameters accepted by the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CreateAutoScalingGroup.html\">CreateAutoScalingGroup</a> API.</p> \n<div> \n <pre><code>aws autoscaling create-auto-scaling-group \\\n    --generate-cli-skeleton yaml-input &gt; create-asg.yaml\n</code></pre> \n</div> \n<p>In the YAML file, there is a new <code>InstanceRequirements</code> section that can be used to override the configuration of the launch template. These are all the attributes I can choose from with some sample values:</p> \n<pre><code>InstanceRequirements:\n  VCpuCount:  # [REQUIRED] \n    Min: 0\n    Max: 0\n  MemoryMiB: # [REQUIRED] \n    Min: 0\n    Max: 0\n  CpuManufacturers:\n  - amd\n  MemoryGiBPerVCpu:\n    Min: 0.0\n    Max: 0.0\n  ExcludedInstanceTypes:\n  - ''\n  InstanceGenerations:\n  - previous\n  SpotMaxPricePercentageOverLowestPrice: 0\n  OnDemandMaxPricePercentageOverLowestPrice: 0\n  BareMetal: required  #  Valid values are: included, excluded, required.\n  BurstablePerformance: excluded #  Valid values are: included, excluded, required.\n  RequireHibernateSupport: true\n  NetworkInterfaceCount:\n    Min: 0\n    Max: 0\n  LocalStorage: required  #  Valid values are: included, excluded, required.\n  LocalStorageTypes:\n  - ssd\n  TotalLocalStorageGB:\n    Min: 0.0\n    Max: 0.0\n  BaselineEbsBandwidthMbps:\n    Min: 0\n    Max: 0\n  AcceleratorTypes:\n  - inference\n  AcceleratorCount:\n    Min: 0\n    Max: 0\n  AcceleratorManufacturers:\n  - amazon-web-services\n  AcceleratorNames:\n  - a100\n  AcceleratorTotalMemoryMiB:\n    Min: 0\n    Max: 0</code></pre> \n<p>Instead of providing a list of overrides, each having an <code>InstanceType</code> attribute with a single instance type selected, I can now select the instance types based on my requirements. I can specify the minimum and maximum amount of vCPUs, and the range of memory. Optionally, I can ask for a minimum amount of memory per vCPUs.</p> \n<p>There are many more attributes that I can select from. For example, I can include, exclude, or require the use of bare metal or burstable instances. I can add networking or storage requirements. If necessary, I can ask for GPU or FPGA accelerators, and so on.</p> \n<p>In my case, I ask for instances with two to four vCPUs and at least 2048 MiB of memory. Previously, it would have taken about 40 overrides, one for each instance type that meets these requirements, but with ABS, I just have to specify three parameters in the <code>InstanceRequirements</code> section. This is the full configuration file I am going to use to create the Auto Scaling group:</p> \n<div> \n <pre><code>AutoScalingGroupName: 'my-asg' # [REQUIRED] \nMixedInstancesPolicy:\n  LaunchTemplate:\n    LaunchTemplateSpecification:\n      LaunchTemplateId: 'lt-0537239d9aef10a77'\n    Overrides:\n    - InstanceRequirements:\n        VCpuCount: # [REQUIRED] \n          Min: 2\n          Max: 4\n        MemoryMiB: # [REQUIRED] \n          Min: 2048\n  InstancesDistribution:\n    OnDemandPercentageAboveBaseCapacity: 50\n    SpotAllocationStrategy: 'capacity-optimized'\nMinSize: 0 # [REQUIRED] \nMaxSize: 100 # [REQUIRED] \nDesiredCapacity: 4\nVPCZoneIdentifier: 'subnet-e76a128a,subnet-e66a128b,subnet-e16a128c'</code></pre> \n</div> \n<p>I create the Auto Scaling group passing the configuration file with the <code>--cli-input-yaml</code> parameter:</p> \n<div> \n <pre><code>aws autoscaling create-auto-scaling-group \\\n    --cli-input-yaml file://my-create-asg.yaml</code></pre> \n</div> \n<p>After a few minutes, four EC2 instances (corresponding to my <code>DesiredCapacity</code>) are running in the <a href=\"https://console.aws.amazon.com/ec2/home\">EC2 console</a>. In the list, I find both C3 and C5a instances, spanning both time and CPU manufacturer.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/12/ec2-abs-create-asg.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/12/ec2-abs-create-asg-1024x219.png\" /></a></p> \n<p>Of those instances, 50 percent is On-Demand (based on the <code>OnDemandPercentageAboveBaseCapacity</code> option in the <code>InstancesDistribution</code> section). In the <strong>Spot Request</strong> tab of the EC2 console, I see the two requests:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/12/ec2-abs-create-asg-spot.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/12/ec2-abs-create-asg-spot-1024x235.png\" /></a></p> \n<p>As expected, all instance types follow my requirements and have size <code>large</code>. However, I quickly realize my application needs more compute capacity in each instance. I update the Auto Scaling group with the new requirements, asking for more vCPUs (between four and six):</p> \n<div> \n <pre><code>aws autoscaling update-auto-scaling-group \\\n    --auto-scaling-group-name my-asg \\\n    --mixed-instances-policy '{\n        \"LaunchTemplate\": {\n            \"Overrides\": [\n                {\n                    \"InstanceRequirements\": {\n                    \"VCpuCount\":{\"Min\": 4, \"Max\": 6},\n                    \"MemoryMiB\":{\"Min\": 2048} }\n                } ]\n        } }' </code></pre> \n</div> \n<p>Then, I start the instance refresh of the Auto Scaling group:</p> \n<div> \n <pre><code>aws autoscaling start-instance-refresh \\\n    --auto-scaling-group-name my-asg</code></pre> \n</div> \n<p>EC2 Auto Scaling performs a rolling replacement of the instances based on the new requirements. After a few minutes, all instances have been replaced by new ones with size <code>xlarge</code>, and I have a mix of C5, C5a, and M3 instances running. All previous instances have been terminated.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/12/ec2-abs-update-asg.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/12/ec2-abs-update-asg-1024x293.png\" /></a></p> \n<p>Similar to before, two of the new instances are launched using Spot requests. The previous Spot requests have been closed.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/12/ec2-abs-update-asg-spot.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/12/ec2-abs-update-asg-spot-1024x308.png\" /></a></p> \n<p><span><strong>How to Preview Matching Instances without Launching Them<br /> </strong></span>To better understand how the new ABS works, I use the new <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html\">EC2 GetInstanceTypesFromInstanceRequirements API</a>. This API returns the list of instance types matching my requirements.</p> \n<p>First, I create the YAML parameter file:</p> \n<div> \n <pre><code>aws ec2 get-instance-types-from-instance-requirements --generate-cli-skeleton yaml-input &gt; requirements.yaml</code></pre> \n</div> \n<p>I edit the file with the same requirements I used to update the Auto Scaling group. This time, I also ask to use <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes\">current generation instances</a>:</p> \n<pre><code>ArchitectureTypes:  # [REQUIRED] \n- x86_64\nVirtualizationTypes: # [REQUIRED] \n- hvm\nInstanceRequirements: # [REQUIRED] \n  VCpuCount:\n    Min: 4\n    Max: 6\n  MemoryMiB:\n    Min: 2048\n  InstanceGenerations:\n    - current</code></pre> \n<p>Note that here I had to specify the type of architecture (<code>x86_64</code>) and virtualization (<code>hvm</code>). When creating the Auto Scaling group, this information was provided by the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html\">Amazon Machine Images (AMI)</a> used by the launch template.</p> \n<p>Now, let’s preview all the instance types selected by these requirements:</p> \n<div> \n <pre><code>aws ec2 get-instance-types-from-instance-requirements \\\n    --cli-input-yaml file://requirements.yaml \\\n    --output table\n\n------------------------------------------\n|GetInstanceTypesFromInstanceRequirements|\n+----------------------------------------+\n||             InstanceTypes            ||\n|+--------------------------------------+|\n||             InstanceType             ||\n|+--------------------------------------+|\n||  c4.xlarge                           ||\n||  c5.xlarge                           ||\n||  c5a.xlarge                          ||\n||  c5ad.xlarge                         ||\n||  c5d.xlarge                          ||\n||  c5n.xlarge                          ||\n||  d2.xlarge                           ||\n||  d3.xlarge                           ||\n||  d3en.xlarge                         ||\n||  g3s.xlarge                          ||\n||  g4ad.xlarge                         ||\n||  g4dn.xlarge                         ||\n||  i3.xlarge                           ||\n||  i3en.xlarge                         ||\n||  inf1.xlarge                         ||\n||  m4.xlarge                           ||\n||  m5.xlarge                           ||\n||  m5a.xlarge                          ||\n||  m5ad.xlarge                         ||\n||  m5d.xlarge                          ||\n||  m5dn.xlarge                         ||\n||  m5n.xlarge                          ||\n||  m5zn.xlarge                         ||\n||  m6i.xlarge                          ||\n||  p2.xlarge                           ||\n||  r4.xlarge                           ||\n||  r5.xlarge                           ||\n||  r5a.xlarge                          ||\n||  r5ad.xlarge                         ||\n||  r5b.xlarge                          ||\n||  r5d.xlarge                          ||\n||  r5dn.xlarge                         ||\n||  r5n.xlarge                          ||\n||  x1e.xlarge                          ||\n||  z1d.xlarge                          ||\n|+--------------------------------------+|</code></pre> \n</div> \n<p>Using this new EC2 API, I can quickly test different requirements and see how they map to instance types. When new instance types are released, they are automatically added to the list if they match my requirements.</p> \n<p><span><strong>Availability and Pricing<br /> </strong></span>You can use attribute-based instance type selection (ABS) with <a href=\"https://aws.amazon.com/ec2/autoscaling/\">EC2 Auto Scaling</a> and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html\">EC2 Fleet</a> today in all public and GovCloud <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/#Regions\">AWS Regions</a>, with the exception of those based in China where we need more time. You can configure ABS using the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (CLI)</a>, <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a>, <a href=\"https://console.aws.amazon.com\">AWS Management Console</a>, and <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a>. There is no additional charge for using ABS; you only pay the standard EC2 pricing for the provisioned instances. For more information on price protection, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html#understand-price-protection\">EC2 Auto Scaling documentation</a>.</p> \n<p>This new feature makes it easy to use flexible instance type configurations instead of long lists of instance types. In this way, you can automatically use newer generation instance types when they are released in the Region. Also, you can easily access more capacity with your Spot requests.</p> \n<p><a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html\"><strong>Simplify your EC2 instance type configurations with attribute-based instance type selection.</strong></a></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"13a927c7d9e0451be7354ba0ddc58a3bb966ec086b31aaf6387de2bf95dadf90","category":"Tech"}