{"title":"บันทึกเรื่อง CDC (Change Data Capture) และ Outbox pattern","link":"https://www.somkiat.cc/change-data-capture-and-outbox-pattern-with-debezium/","date":1689398794000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/07/cdc-01-150x150.png\" alt loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/07/cdc-01-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2023/07/cdc-01-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/07/cdc-01.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/07/cdc-01.png\" alt /></a></figure>\n\n\n\n<p>ใน <strong><a href=\"https://www.skooldio.com/workshops/microservices\" target=\"_blank\">course Microservices ที่ Skooldio</a></strong> นั้น<br />มีคำถามเรื่องเกี่ยวกับรูปแบบของการแลกเปลี่ยนข้อมูลระหว่าง service<br />ว่า CDC (Change Data Capture) และ Outbox pattern มันเป็นอย่างไร<br />จึงทำการอธิบายพร้อมตัวอย่าง code และเครื่องมือ<br />ที่ผมมีโอกาสใช้งานในงานมาบ้าง<br />เลยทำการสรุปและบันทึกแนวทางไว้นิดหน่อย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>ในการแลกเปลี่ยนข้อมูลระหว่าง service นั้นมีหลายรูปแบบ เช่น</strong></p>\n\n\n\n<ul>\n<li>การเรียกหรือส่งข้อมูลแบบตรง ๆ จาก service ไปเลย บ่อยครั้งมีรูปแบบเป็น synchronous ต้องระวังเรื่องของ cascade failure ไว้ด้วย</li>\n\n\n\n<li>เป็น Event-based ในรูปแบบของ one-to-one หรือ one-to-many ก็ว่าไป มีรูปแบบเป็น asynchronous ต้องสร้าง code ทั้งสองฝั่งขึ้นมา เพื่อส่งและรับข้อมูล เช่น producer/consumer หรือ publisher/subscriber เป็นต้น</li>\n\n\n\n<li>Share database กันไปเลย หรือ replicate database ออกมา !! แต่ต้องการข้อมูลทั้งหมดนั้นจริง ๆ ไป</li>\n</ul>\n\n\n\n<p><strong>หรือทำการ replicate data แต่แบบเลือกได้ </strong><br />นั่นคือ เมื่อเกิดการเปลี่ยนแปลงใน data ที่เราสนใจใน database (Event/Change logs)<br />จะทำการจับการเปลี่ยนแปลง ทำการ transform ข้อมูลให้อยู๋ในรูปแบบที่ต้องการ<br />จากนั้นก็ทำการส่ง หรือ บันทึกไว้อีกที่ที่ต้องการใช้งาน<br />โดยไม่ต้องไปทำในฝั่งของ app/service<br />และทำงานร่วมกับ Event-based ก็เป็นอีกทางเลือกหนึ่ง<br />ซึ่งจะเรียกวิธีการนี้ว่า <strong>Change Data Capture (CDC)</strong></p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/07/cdc-02.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/07/cdc-02-1024x560.jpg\" alt width=\"573\" height=\"313\" /></a></figure>\n\n\n\n<p><strong>โดยเครื่องมือที่ใช้งานเช่น <a href=\"https://debezium.io/\" target=\"_blank\">Debezium</a></strong></p>\n\n\n\n<p>มีโครงสร้างการทำงานดังรูป</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/07/debezium-server-architecture.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/07/debezium-server-architecture.jpg\" alt width=\"574\" height=\"273\" /></a></figure>\n\n\n\n<p>การทำงานนั้น Debezium จะทำการอ่าน event หรือการเปลี่ยนแปลงใน database แต่ละชนิด<br />เช่น </p>\n\n\n\n<ul>\n<li>MySQL จะทำการอ่านจาก binlog</li>\n\n\n\n<li>Postgresql จะทำการอ่าจาก logical replication stream</li>\n</ul>\n\n\n\n<p>ซึ่งจะมี <a href=\"https://debezium.io/documentation/reference/stable/connectors/index.html\" target=\"_blank\">connector ไปยัง database</a> อื่น ๆ ให้อีกเพียบ<br />จากนั้นเราสามารถ custom สิ่งที่ต้องการได้อีกด้วย<br />ด้วยการเขียนตัว <a href=\"https://debezium.io/documentation/reference/stable/transformations/index.html\" target=\"_blank\">transformer data</a> ได้อีก หรือดักบาง event หรือบาง table ก็ได้</p>\n\n\n\n<p><strong>ยกตัวอย่างการเขียน transformer เพื่อจัดการกับ event การสร้างเท่านั้น จาก Pogresql database</strong></p>\n\n\n\n[gist id=\"f55057509793ba5edce52868d813858f\" file=\"CustomTransformation.java\"]\n\n\n\n<p>จากนั้นก็อยู่ที่ว่าจะทำการ config เพื่อให้ข้อมูลที่เราดักจับนั้นไปไว้ที่ไหน<br />โดย Debezium นั้นสามารถส่งข้อมูลไปยัง messaging ได้ เช่น Apahe Kafka<br />เพื่อให้ใครก็ได้มา subscribe เพื่อนำข้อมูลต่าง ๆ เหล่านี้ไปใช้งานต่อไป<br />แสดงดังรูป</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/07/debezium-architecture-02.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/07/debezium-architecture-02-1024x233.png\" alt /></a></figure>\n\n\n\n<p>แต่ก็บ่อยครั้งข้อมูลหรือการเปลี่ยนแปลงใน database จะเยอะมาก ๆ<br />รวมทั้งไม่มั่นใจอีกว่าการเปลี่ยนแปลงเหล่านั้น<br />จะถูกดักจับ และ ส่งมายัง messaging ได้ครบหรือไม่<br />ดังนั้นจึงจำเป็นต้องกาวิธีการจัดการ หนึ่งในแนวคิดคือ <strong><a href=\"https://debezium.io/blog/2019/02/19/reliable-microservices-data-exchange-with-the-outbox-pattern/\" target=\"_blank\">Outbox pattern</a></strong></p>\n\n\n\n<p>แนวคิดง่าย ๆ คือ เมื่อมีการเปลี่ยนแปลงของ database เกิดขึ้น<br />ใน app/service จะทำการเขียน code เพื่อบันทึกลง table หนึ่ง ๆ ไว้<br />จากนั้นเมื่อทำการส่งข้อมูลไปยัง messaging เรียบร้อยแล้ว<br />ก็จะทำการ update หรือลบข้อมูลนั้น ๆ ใน table ไป<br />โดย table นี้เราจะเรียกว่า <strong>outbox table</strong></p>\n\n\n\n<p><strong><em>ดังนั้นถ้าเรากำหนดไว้ว่า เมื่อส่งข้อมูลเสร็จแล้ว ข้อมูลต้องโดนลบออกไปเสมอ<br />ถ้าทำงานได้อย่างถูกต้องใน outbox table ต้องไม่มีข้อมูลเหลือ</em></strong></p>\n\n\n\n<p>แสดงการทำงานดังรูป</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/07/outbox_pattern.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/07/outbox_pattern-1024x576.png\" alt width=\"660\" height=\"371\" /></a></figure>\n\n\n\n<p>จากนั้นเราก็ทำการ config ใน Debezium ว่า<br />ให้สนใจเฉพาะการเปลี่ยนแปลงใน outbox table ก็พอ<br />ทำให้ง่าย และ สะดวกต่อการใช้งานอีกด้วย</p>\n\n\n\n<p><strong>ตัวอย่างของการ config แบบง่าย ๆ</strong></p>\n\n\n\n[gist id=\"f55057509793ba5edce52868d813858f\" file=\"config.json\"]\n\n\n\n<p>เพียงเท่านี้ก็สามารถใช้งาน Debezium + Apache Kafka<br />สำหรับการแลกเปลี่ยนข้อมูลระหว่างระบบ หรือ service ได้แล้ว !!</p>\n\n\n\n<p><strong>สุดท้ายแล้ว วิธีการเหล่านี้มีความซับซ้อนสูงมาก ๆ</strong></p>\n\n\n\n<p>แต่ก็มีประโยชน์มากเช่นกัน<br />ดังนั้นก่อนใช้งานควรต้องรู้และเข้าใจ<br />ว่าทำไมเราต้องใช้งาน<br />มีวิธีการอื่น ๆ ไหม<br />ที่เหมาสมต่อปัญหา และ ทีม<br />รวมทั้งเรื่องของการ monitoring และ troubleshooting ต่าง ๆ ด้วย<br />ทุกอย่างล้วนมี tradeoff ทั้งสิ้น<br />ใช้อย่างมีสติ<br /><strong><em>นำมาแก้ไขปัญหา ไม่ใช่นำมาใช้เพื่อสร้างปัญหา</em></strong></p>\n\n\n\n<p></p>\n\n\n\n<p><strong>Reference Websites</strong></p>\n\n\n\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/sql/relational-databases/track-changes/about-change-data-capture-sql-server?view=sql-server-ver16\" target=\"_blank\">What is change data capture (CDC) ?</a></li>\n\n\n\n<li><a href=\"https://www.confluent.io/learn/change-data-capture/\" target=\"_blank\">Kafka :: What is Change Data Capture ?</a></li>\n\n\n\n<li><a href=\"https://medium.com/cloud-native-daily/rethink-the-way-you-share-the-data-between-micro-services-with-change-data-capture-a666a4473388\" target=\"_blank\">Rethink the Way You Share Data Between Microservices with Change-Data-Capture</a></li>\n\n\n\n<li><a href=\"https://debezium.io/blog/2019/02/19/reliable-microservices-data-exchange-with-the-outbox-pattern/\" target=\"_blank\">Reliable Microservices Data Exchange With the Outbox Pattern</a></li>\n\n\n\n<li><a href=\"https://jcompetence.se/2023/01/30/publish-postgresql-data-changes-as-kafka-events-using-debezium-connector/\" target=\"_blank\">Publish PostgreSQL Data Changes as Kafka Events using Debezium Connector</a></li>\n</ul>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"be72d2452cf717d112f14e354b5c31946e3209a0d94955cdcb10cb5afcb2c891","category":"Thai"}