{"title":"News from WWDC23: WebKit Features in Safari 17 beta","link":"https://webkit.org/blog/14205/news-from-wwdc23-webkit-features-in-safari-17-beta/","date":1686052813000,"content":"<p>It’s been a fantastic year for WebKit. We’ve shipped eight Safari releases since WWDC22, with more than 140 new web technologies in the first half of 2023 alone. Now, we are pleased to announce another 88 web features coming this fall in Safari 17.</p>\n<h2><a name=\"web-apps\"></a>Web Apps</h2>\n<p>Web apps are coming to Mac. With macOS Sonoma, you can add a website — any website — to your Dock. Just go to File &gt; Add to Dock, adjust the name and icon if desired, and the web app icon appears in your Dock.</p>\n<p>Web apps on Mac let you focus on the websites you use all the time, separate from the rest of your browsing. Like all Mac apps, web apps work great with Stage Manager, Mission Control, and keyboard shortcuts like Command + Tab. Web apps can be opened from the Dock, Launchpad, and Spotlight Search. Web apps work with AutoFill credentials from iCloud Keychain and from third-party apps that have adopted the Credential Provider Extension API. And users can grant permission to a web app to use their camera, microphone and location in the same way they grant such permissions to other Mac apps through system prompts and the Privacy &amp; Security section of System Settings. Web apps on Mac support <a href=\"https://developer.apple.com/documentation/usernotifications/sending_web_push_notifications_in_web_apps_safari_and_other_browsers?language=objc\">web push</a>, <a href=\"https://webkit.org/blog/14112/badging-for-home-screen-web-apps/\">badging</a>, and all the usual web standards implemented by WebKit, just like web apps <a href=\"https://webkit.org/blog/13878/web-push-for-web-apps-on-ios-and-ipados/\">on iOS and iPadOS</a>.</p>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Whats-new-in-web-apps-1024x663.jpg\" alt=\"A web app for WebKit Blog shown on macOS Sonoma. With three other web apps as Stage Manager windows off to the side. And four web app icons in the doc. Plus a push notification coming in from the WebKit web app.\" width=\"1024\" height=\"663\" srcset=\"https://webkit.org/wp-content/uploads/Whats-new-in-web-apps-1024x663.jpg 1024w, https://webkit.org/wp-content/uploads/Whats-new-in-web-apps-300x194.jpg 300w, https://webkit.org/wp-content/uploads/Whats-new-in-web-apps-768x497.jpg 768w, https://webkit.org/wp-content/uploads/Whats-new-in-web-apps-1536x994.jpg 1536w, https://webkit.org/wp-content/uploads/Whats-new-in-web-apps.jpg 1920w\" />\n\n</figure>\n<p>When a user clicks on a web app icon, the website always opens in its own window as a web app, even if the site does not have a manifest file (or legacy <a href=\"https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html\"><code>meta</code> tags</a>). This expands the usefulness of web apps, putting users in charge of determining what becomes a web app and giving them the confidence it’s always something they can choose.</p>\n<p>While the default web app experience on Mac is great, as a web app developer you can use web technologies like <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\">Service Workers</a> to make it even better. By providing a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Manifest\">web app manifest</a>, you can customize the presentation of your web app, including the display mode, name, theme color, and start URL. Learn about the details by watching <a href=\"https://developer.apple.com/videos/play/wwdc2023/10120/\"><em>What’s new in Web Apps</em></a> at WWDC23.</p>\n<p>When a user adds a website to their Dock, Safari will copy the website’s cookies to the web app. That way, if someone is logged into their account in Safari, they will remain logged in within the web app. This will only work if the authentication state is stored within cookies. Safari does not copy over any other kind of local storage. After a user adds a web app to the Dock, no other website data is shared, which is great for privacy.</p>\n<h3><a name=\"add-to-home-screen-from-safari-view-controller\"></a>Add to Home Screen from Safari View Controller</h3>\n<p>Add to Home Screen is now available from Safari View Controller on iOS and iPadOS. Tapping a link within an app that uses Safari View Controller as the in-app browser allows the user to add the open website to their Home Screen right from there. Just like Add to Home Screen from Safari on iOS and iPadOS (or any other browser that <a href=\"https://webkit.org/blog/13878/web-push-for-web-apps-on-ios-and-ipados/#:~:text=Third-party%20browser%20support%20for%20Add%20to%20Home%20Screen\">implemented support</a>), if the website has a manifest file with a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Manifest/display\"><code>display</code></a> mode of <code>standalone</code> or <code>fullscreen</code>, it will open as a Home Screen web app.</p>\n<h2><a name=\"spatial-web\"></a>Spatial Web</h2>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Meet-Safari-for-spatial-computing-1024x576.jpg\" alt=\"Three Safari windows floating in a room, almost reaching from floor to ceiling.\" width=\"1024\" height=\"576\" srcset=\"https://webkit.org/wp-content/uploads/Meet-Safari-for-spatial-computing-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/Meet-Safari-for-spatial-computing-300x169.jpg 300w, https://webkit.org/wp-content/uploads/Meet-Safari-for-spatial-computing-768x432.jpg 768w, https://webkit.org/wp-content/uploads/Meet-Safari-for-spatial-computing-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/Meet-Safari-for-spatial-computing.jpg 1920w\" /><br />\n</figure>\n<p>We can’t wait for you to try out Safari on Vision Pro. This truly is Safari, with the same WebKit engine — plus a few additions. All of your websites will work beautifully out of the box, thanks to its extensive support for web standards. You can see exactly how Safari on Vision Pro works by watching the <a href=\"https://www.apple.com/apple-events/\"><em>WWDC23 Keynote</em></a> and <a href=\"https://developer.apple.com/videos/play/wwdc2023/10279/\"><em>Meet Safari for spatial computing</em></a>.</p>\n<p>We are collaborating on two technologies to make the web in spatial computing even more powerful — the <code>&lt;model&gt;</code> element and WebXR.</p>\n<h3><a name=\"model\"></a>Model</h3>\n<p>The <a href=\"https://immersive-web.github.io/model-element/\"><code>&lt;model&gt;</code> element</a> will provide a way to easily present 3D content in a web page without any scripting. Just like with <code>&lt;img&gt;</code> and <code>&lt;video&gt;</code>, HTML makes it possible for <code>&lt;model&gt;</code> to work in a robust and simple manner across web browsers on any platform. Model is still undergoing specification and is subject to change, but we expect it will work like this:</p>\n<pre><code><span>&lt;<span>model</span> <span>src</span>=<span>\"asset/example-3d-model\"</span> <span>width</span>=<span>\"400\"</span> <span>height</span>=<span>\"300\"</span>&gt;</span><span>&lt;/<span>model</span>&gt;</span>\n</code></pre>\n<p>By creating a declarative element, we can leverage well-known patterns for supporting multiple file formats, while simultaneously providing fallbacks for browsers without support.</p>\n<pre><code><span>&lt;<span>model</span> <span>width</span>=<span>\"400\"</span> <span>height</span>=<span>\"300\"</span> <span>interactive</span>&gt;</span>\n    <span>&lt;<span>source</span> <span>src</span>=<span>\"assets/example.usdz\"</span> <span>type</span>=<span>\"model/vnd.usdz+zip\"</span>&gt;</span>\n    <span>&lt;<span>source</span> <span>src</span>=<span>\"assets/example.glb\"</span> <span>type</span>=<span>\"model/gltf-binary\"</span>&gt;</span>\n    <span>&lt;<span>picture</span>&gt;</span>\n        <span>&lt;<span>source</span> <span>src</span>=<span>\"fallback-version.mp4\"</span> <span>type</span>=<span>\"video/mp4\"</span>&gt;</span>\n        <span>&lt;<span>source</span> <span>src</span>=<span>\"fallback-version.webp\"</span> <span>type</span>=<span>\"image/webp\"</span>&gt;</span>\n        <span>&lt;<span>img</span> <span>src</span>=<span>\"fallback-version.gif\"</span>/&gt;</span>\n    <span>&lt;/<span>picture</span>&gt;</span>\n<span>&lt;/<span>model</span>&gt;</span>\n</code></pre>\n<p>The <code>interactive</code> attribute will enable user interaction and allow people to rotate the model in place. An accompanying JavaScript API will provide even more capabilities, including access to the camera. The exact details of how <code>&lt;model&gt;</code> will work are currently being debated at the <a href=\"https://www.w3.org/community/immersive-web/\">Immersive Web Community Group</a>.</p>\n<p>The ability to embed rich 3D content into a web page will open up a world of possibilities. For example, an online shoe store might provide models of all their shoes. Or a website for interior design inspiration could provide furniture models for people to “place” virtually in their homes. Safari on Vision Pro will take such experiences to the next level, with a full stereoscopic view and environmental lighting — all in a privacy-preserving way. What or where the user is looking is never exposed to the web page.</p>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/model-in-Safari-on-visionOS-1024x577.jpg\" alt=\"A Safari window floating in space, showing a tea shop website, offering teapots and tea cups for sale. On a table in the room, sits a virtual tea cup and teapot — from the website. \" width=\"1024\" height=\"577\" srcset=\"https://webkit.org/wp-content/uploads/model-in-Safari-on-visionOS-1024x577.jpg 1024w, https://webkit.org/wp-content/uploads/model-in-Safari-on-visionOS-300x169.jpg 300w, https://webkit.org/wp-content/uploads/model-in-Safari-on-visionOS-768x433.jpg 768w, https://webkit.org/wp-content/uploads/model-in-Safari-on-visionOS-1536x865.jpg 1536w, https://webkit.org/wp-content/uploads/model-in-Safari-on-visionOS.jpg 1900w\" /></p>\n<p>You can try out <code>&lt;model&gt;</code> in Safari on iOS, iPadOS, and macOS by turning on its <a href=\"https://webkit.org/blog/14205/news-from-wwdc23-webkit-features-in-safari-17-beta/#rethought-feature-flags\">feature flag</a> and navigating to this <a href=\"https://immersive-web.github.io/model-element/examples/\">demo page</a>.</p>\n<h3><a name=\"webxr\"></a>WebXR</h3>\n<p>When embedding a 3D model into a web page isn’t enough, WebXR provides the technology for creating a fully immersive experience on the web. WebXR is based on WebGL, and many popular WebGL libraries already have built in support.</p>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/WebXR-1024x576.jpg\" alt=\"A cartoon 3D world, mountains in the background. Lakes and swaps in the foreground. \" width=\"1024\" height=\"576\" srcset=\"https://webkit.org/wp-content/uploads/WebXR-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/WebXR-300x169.jpg 300w, https://webkit.org/wp-content/uploads/WebXR-768x432.jpg 768w, https://webkit.org/wp-content/uploads/WebXR-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/WebXR.jpg 1920w\" /><br />\n</figure>\n<p>Safari on Vision Pro currently has <a href=\"https://webkit.org/blog/14205/news-from-wwdc23-webkit-features-in-safari-17-beta/#rethought-feature-flags\">testable</a> support for WebXR, available behind a feature flag while we collaborate with the <a href=\"https://www.w3.org/immersive-web/\">W3C Immersive Web Working Group</a> on updates to the web standard. WebKit supports the <code>immersive-vr</code> session type in WebXR. Vision Pro does not have external controllers. Instead, you can request the “hand-tracking” feature to let users interact with your content.</p>\n<p>Visit the Immersive Web Working Group developer page at <a href=\"https://immersiveweb.dev/\">immersiveweb.dev</a> to learn more about getting started with different frameworks that include WebXR support and to find one that best fits your project.</p>\n<h2><a name=\"images\"></a>Images</h2>\n<h3><a name=\"jpeg-xl\"></a>JPEG XL</h3>\n<p>We are pleased to announce that support for JPEG XL is coming to Safari 17. Similar to JPEG, the new image format provides another modern option for finding the right balance between quality and file size. JPEG XL uses a new compression algorithm called “Modular Entropy Coding” that allows for greater flexibility in adjusting the compression ratio. With support for progressive loading, it’s well suited for images served over slow connections, since users start to see the image before the whole file is downloaded. And you can recompress existing JPEG files into JPEG XL without any loss of data, while reducing their size by an average of 20%. Or compress from the original image file to create a file that’s up to 60% smaller compared to JPEG!</p>\n<p>Use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture\"><code>&lt;picture&gt;</code></a> element to provide JPEG XL files to browsers that <a href=\"https://caniuse.com/jpegxl\">have support</a>, while providing a fallback for browsers that don’t.</p>\n<pre><code><span>&lt;<span>picture</span>&gt;</span>\n  <span>&lt;<span>source</span> <span>srcset</span>=<span>\"images/large/sophie.jxl\"</span> <span>type</span>=<span>\"image/jxl\"</span>&gt;</span>\n  <span>&lt;<span>img</span> <span>src</span>=<span>\"images/large/sophie.jpeg\"</span>&gt;</span>\n<span>&lt;/<span>picture</span>&gt;</span>\n</code></pre>\n<p>JPEG XL will be supported by WebKit for Safari 17, Safari View Controller and WKWebView on macOS Sonoma, macOS Ventura and macOS Monterey, as well as iOS, iPadOS, watchOS, and visionOS.</p>\n<h3><a name=\"heic\"></a>HEIC</h3>\n<p>We are also adding support for HEIC images to Safari 17, which uses the HEVC video codec compression algorithm. HEIC is the file format used on iPhone and iPad to store photos taken with the camera. With support for HEIC in Safari, Safari View Controller, and WKWebView, developers can support importing and editing such photos right in the browser, without needing to convert them into another format. HEIC is also ideal for displaying images when using WKWebView inside an app.</p>\n<h3><a name=\"image-set\"></a>Image set</h3>\n<p>Safari 17 also improves our implementation of <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/image/image-set\"><code>image-set()</code></a>, increasing interoperability with other browsers as part of our commitment to <a href=\"https://wpt.fyi/interop-2023\">Interop 2023</a> , and adding support for the optional <code>resolution</code> and <code>type</code> arguments. The <code>type</code> argument provides you with a means to offer browsers multiple image formats to choose from, including JPEG XL and HEIC.</p>\n<pre><code><span>.component</span> {\n  <span>background-image</span>: <span>image-set</span>(\n    <span>url(\"images/trees.jxl\")</span> <span>type</span>(<span>\"image/jxl\"</span>),\n    <span>url(\"images/trees.avif\")</span> <span>type</span>(<span>\"image/avif\"</span>),\n    <span>url(\"images/trees.jpeg\")</span> <span>type</span>(<span>\"image/jpeg\"</span>)\n  );\n}\n</code></pre>\n<h2><a name=\"video\"></a>Video</h2>\n<h3><a name=\"managed-media-source\"></a>Managed Media Source</h3>\n<p>WebKit for Safari 17 also brings the new Managed Media Source API. It provides a power-efficient solution fulfilling advanced needs as a low-level toolkit for streaming video.</p>\n<p>Adaptive bitrate streaming allows for switching between media data formats — ensuring delivery of the best possible video quality based on the user’s internet connection speed and device capabilities, even as those conditions change. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API\">Media Source Extensions</a> (MSE) is an existing low-level toolkit for adaptive streaming giving the web page more control and responsibilities for managing buffering and resolution. But MSE isn’t particularly good at managing buffer levels, network access, and media variant selection. And it uses a lot of power on mobile devices.</p>\n<p>Managed Media Source adds the capabilities of MSE, without any of the drawbacks. It’s available on iPadOS 17 beta and macOS Sonoma beta, and is in <a href=\"https://webkit.org/blog/14205/news-from-wwdc23-webkit-features-in-safari-17-beta/#rethought-feature-flags\">preview</a> on iOS 17 beta, where it can be tested by turning on its feature flag. Note that Managed Media Source is only made available when an AirPlay source alternative is present.</p>\n<p>Learn more about JPEG XL, HEIC, and Managed Media Source API by watching <em><a href=\"https://developer.apple.com/videos/play/wwdc2023/10122/\">Explore media formats for the web</a></em> at WWDC23.</p>\n<h3><a name=\"media-player-stats-overlay\"></a>Media player stats overlay</h3>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/video-stats-overlay.png\" alt=\"Video in a video player, with an overlay showing the stats for that video.\" width=\"641\" height=\"481\" srcset=\"https://webkit.org/wp-content/uploads/video-stats-overlay.png 641w, https://webkit.org/wp-content/uploads/video-stats-overlay-300x225.png 300w\" /><br />\n</figure>\n<p>If you’ve enabled Developer Features, WebKit now provides a media player stats overlay where you can see technical details about a video — its source type, size, performance metrics, resolution, codec string, and color configuration. To show the overlay, use the context menu on any <code>&lt;video&gt;</code> element and select “Show Media Stats”. Now you can tell at a glance the exact codec and configuration used by media on your page and use that information to craft accurate queries in MediaCapabilities.</p>\n<h3><a name=\"and-more-video\"></a>And more video</h3>\n<p>WebKit now supports USB cameras on iPadOS 17. When a USB camera is attached to an iPad, it’s included in the output of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"><code>enumerateDevices()</code></a> and is selectable with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>getUserMedia()</code></a> along with the built-in cameras.</p>\n<p>Improvements to WebRTC add support for <code>InputDeviceInfo</code>, the inbound rtp <code>trackIdentifier</code> stat field, exposing <code>zoom</code> in MediaTrackCapabilities, and <code>getDisplayMedia</code> video track clone resizing.</p>\n<p>WebKit for Safari 17 adds additional support for low-power mode — optimizing video streaming by tone mapping HDR video to SDR.</p>\n<h2><a name=\"html\"></a>HTML</h2>\n<h3><a name=\"popover\"></a>Popover</h3>\n<p>Safari 17 adds support for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover\">popover</a> attribute. It provides a framework for displaying overlays, popups, popovers, and dialogs. There are two types of popovers, which can be used as values for the <code>popover</code> attribute:</p>\n<ul>\n<li><code>auto</code> popovers, which automatically close when you click outside of the popover; and</li>\n<li><code>manual</code> popovers, which don’t have this automatic closing behavior.</li>\n</ul>\n<p>Use a button (either a <code>&lt;button&gt;</code> element or button input type) to create the UI for opening and closing the popover. And add the appropriate HTML attributes to create the desired result.</p>\n<p>The <code>popovertarget</code> attribute connects the button to the popover content through an ID. The optional  <code>popovertargetaction</code> attribute takes <code>show</code>, <code>hide</code>, or <code>toggle</code> as values. By default, <code>toggle</code> is used.</p>\n<pre><code><span>&lt;<span>button</span> <span>popovertarget</span>=<span>\"info-box\"</span> <span>popovertargetaction</span>=<span>\"show\"</span>&gt;</span>More info<span>&lt;/<span>button</span>&gt;</span>\n\n<span>&lt;<span>article</span> <span>id</span>=<span>\"info-box\"</span> <span>popover</span>=<span>\"auto\"</span>&gt;</span>\n  <span>&lt;<span>h2</span>&gt;</span>Additional Information<span>&lt;/<span>h2</span>&gt;</span>\n  <span>&lt;<span>p</span>&gt;</span>Here’s something I wanted to tell you.<span>&lt;/<span>p</span>&gt;</span>\n  <span>&lt;<span>button</span> <span>popovertarget</span>=<span>\"info-box\"</span> <span>popovertargetaction</span>=<span>\"hide\"</span>&gt;</span>Close<span>&lt;/<span>button</span>&gt;</span>\n<span>&lt;/<span>article</span>&gt;</span>\n</code></pre>\n<p>This is just one UI pattern you might find useful. There are many possible combinations. Having a popover mechanism in HTML makes for quick work, while ensuring great usability and full accessibility.</p>\n<p>To go beyond a simple button trigger, a JavaScript API opens up more powerful possibilities through <code>showPopover()</code>, <code>hidePopover()</code>, and <code>togglePopover()</code>.</p>\n<h3><a name=\"and-more-html\"></a>And more HTML</h3>\n<p>Safari 17 on macOS adds support for <code>&lt;hr&gt;</code> inside of <code>&lt;select&gt;</code>, which is a feature the WebKit team added to the HTML Standard. This makes it easier to create a visual separator between items without requiring the use of JavaScript.</p>\n<pre><code><span>&lt;<span>select</span>&gt;</span>\n  <span>&lt;<span>option</span> <span>value</span>=<span>\"pizza\"</span>&gt;</span>Pizza<span>&lt;/<span>option</span>&gt;</span>\n  <span>&lt;<span>option</span> <span>value</span>=<span>\"hamburger\"</span>&gt;</span>Hamburger<span>&lt;/<span>option</span>&gt;</span>\n  <span>&lt;<span>hr</span>&gt;</span>\n  <span>&lt;<span>option</span> <span>value</span>=<span>\"sushi\"</span>&gt;</span>Ice cream<span>&lt;/<span>option</span>&gt;</span>\n  <span>&lt;<span>option</span> <span>value</span>=<span>\"pasta\"</span>&gt;</span>Cake<span>&lt;/<span>option</span>&gt;</span>\n<span>&lt;/<span>select</span>&gt;</span>\n</code></pre>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu\"><code>&lt;menu&gt;</code></a> element is now mapped to <code>role=list</code>. Slotted elements are now announced when inside <code>&lt;dialog&gt;</code> or <code>aria-modal</code>. And now slot elements referenced with <code>aria-labelledby</code> are properly labeled.</p>\n<h2><a name=\"css\"></a>CSS</h2>\n<h3><a name=\"counter-styles\"></a>Counter styles</h3>\n<p>Safari 17 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style\">CSS Counter Styles</a>, providing a mechanism through <code>@counter-style</code> for changing a counter’s language or character set in CSS — both for ordered/unordered lists with <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type\"><code>list-style-type</code></a>, and for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Counter_Styles/Using_CSS_counters\">CSS Counters</a>.</p>\n<pre><code><span>@counter-style</span> <span>upper-serbian</span> {\n  <span>system</span>: <span>alphabetic</span>;\n  <span>symbols</span>: <span>'А'</span> <span>'Б'</span> <span>'В'</span> <span>'Г'</span> <span>'Д'</span> <span>'Ђ'</span> <span>'Е'</span> <span>'Ж'</span> <span>'З'</span> <span>'И'</span> <span>'Ј'</span> <span>'К'</span> <span>'Л'</span> <span>'Љ'</span> <span>'М'</span> <span>'Н'</span> <span>'Њ'</span> <span>'О'</span> <span>'П'</span> <span>'Р'</span> <span>'С'</span> <span>'Т'</span> <span>'Ћ'</span> <span>'У'</span> <span>'Ф'</span> <span>'Х'</span> <span>'Ц'</span> <span>'Ч'</span> <span>'Џ'</span> <span>'Ш'</span>;\n}\n<span>ol</span> { \n  <span>list-style</span>: <span>upper-serbian</span>; \n}\n</code></pre>\n<h3><a name=\"font-size-adjust\"></a>Font size adjust</h3>\n<p>In <a href=\"https://webkit.org/blog/13966/webkit-features-in-safari-16-4/\">Safari 16.4</a>, we shipped initial support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-size-adjust\"><code>font-size-adjust</code></a>, which allows you to easily make the visual size of different fonts consistent — even across all possible combinations of fallback fonts. The basic version of <code>font-size-adjust</code> lets you tell the browser to resize letters so that their x-height is a specific ratio of the <code>font-size</code>.</p>\n<p>In Safari 17, we’re expanding support to include more advance capabilities of <code>font-size-adjust</code>, including the <code>from-font</code> value and two-value syntax. Instead of declaring a ratio with a number value, the <code>from-font</code> value allows you to ask the browser to pull the sizing metric from the main font being specified, and apply that ratio to all fonts. Two-value syntax lets you switch from adjusting <code>ex-height</code> to adjusting <code>cap-height</code>, <code>ch-width</code>, <code>ic-width</code>, or <code>ic-height</code> — providing support for a broader range of languages and design choices.</p>\n<p>Let’s look at an example. Here, <code>font-size-adjust</code> tells the browser to make all of the fonts inside <code>article</code> match the size of the x-height of the main font being used. This means all of the text in paragraphs and code will visually appear to be the same size, no matter which font is applied from either stack, or how different the paragraph and code fonts appear in actual size.</p>\n<pre><code><span>article</span> { \n  <span>font-family</span>: <span>\"Iowan Old Style\"</span>, <span>\"Palatino Linotype\"</span>, <span>\"URW Palladio L\"</span>, <span>P052</span>, <span>serif</span>;\n  <span>font-size</span>: <span>1.4</span><span>rem</span>;\n  <span>font-size-adjust</span>: <span>from-font</span>;\n}\n<span>article</span> <span>code</span> {\n  <span>font-family</span>: <span>\"Courier New\"</span>, <span>monospace</span>;\n}\n</code></pre>\n<p>To learn much more about how <code>font-size-adjust</code> works, as well as all about Counter Styles, watch <a href=\"https://developer.apple.com/videos/play/wwdc2023/10121/\"><em>What’s new in CSS</em></a> at WWDC23.</p>\n<p>Safari 17 also brings support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/size-adjust\"><code>@font-face size-adjust</code></a>, which provides a way for you to normalize visual size when defining a font’s use.</p>\n<h3><a name=\"text-transform\"></a>Text transform</h3>\n<p>Safari 17 adds support for <code>text-transform: full-width</code> and <code>full-size-kana,</code> and adds support for multiple <code>text-transform</code> values. The <code>full-width</code> value transforms all the characters in a string of text to be “full-width” — to match the size of characters in an East Asian script like those for Chinese, Japanese, or Korean. It’s especially useful when wanting to improve consistency in sizing when typesetting CJK. The <code>full-size-kana</code> value transforms the size of Kana characters in Japanese to be full-size, rather than the typical small size — useful to make <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby\"><code>ruby</code></a> text more legible when needed.</p>\n<h3><a name=\"font-support\"></a>Font support</h3>\n<p>To expand what’s possible with web typography, Safari 17 adds two feature queries for writing CSS depending on the presence or absence of browser support for font tech or format: <code>@supports font-tech()</code> as well as <code>@supports font-format()</code>. <a href=\"https://drafts.csswg.org/css-fonts-4/#font-tech-definitions\">Font tech</a> refers to specific kinds of OpenType technology used in some fonts, like COLRv0. Safari 17 also adds support for  <code>@font-face { src: url() tech() }</code>, making it easy to define the use of a font that depends on newer tech, while providing a fallback for browsers without support.</p>\n<pre><code><span>@font-face</span> {\n    <span>font-family</span>: <span>\"My Cool Font\"</span>;\n    <span>src</span>: <span>url(\"mycoolfont-COLRv0.otf\")</span> <span>format</span>(<span>opentype</span>) <span>tech</span>(<span>color-COLRv0</span>),\n         <span>url(\"mycoolfont-outline.otf\")</span> <span>format</span>(<span>opentype</span>);\n}\n</code></pre>\n<h3><a name=\"media-queries-4\"></a>Media Queries 4</h3>\n<p>Safari 17 rounds out support for <a href=\"https://drafts.csswg.org/mediaqueries-4/\">Media Queries level 4</a>, with support for two new media queries. Like the others, <a href=\"https://www.w3.org/TR/mediaqueries-4/#mf-overflow-block\"><code>overflow-block</code></a> and <a href=\"https://www.w3.org/TR/mediaqueries-4/#mf-overflow-inline\"><code>overflow-inline</code></a> provide a way to conditionally apply CSS depending on the qualities of a user’s device — in this case, how the device handles overflow. For example, can it scroll the page like a typical browser on a computer? Does it page the content, like an e-book reader? Or does it have no mechanism for handling overflow, like a digital billboard?</p>\n<h3><a name=\"and-more-css\"></a>And more CSS</h3>\n<p>WebKit for Safari 17 includes multiple fixes to improve accessibility of <code>display: contents</code>, including making <code>aria-activedescendant</code>, <code>aria-dropeffect</code>, <code>aria-flowto</code>, <code>aria-grabbed</code>, <code>aria-owns</code>, AXAccessKey, CSS <code>speak-as</code>, and URL AX APIs work on elements that have <code>display: contents</code> applied. As well as computing the accessible name for <code>display: contents</code> elements that rely on labels or captions, and making <code>display: contents</code> elements to be able to return selected accessibility children.</p>\n<p>Safari 17 also adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-size\"><code>contain-intrinsic-size</code></a>, providing a way to set the size of an element to use for layout when the element is subject to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment#size_containment\">size containment</a>.</p>\n<p>To increase the usefulness of <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:has\"><code>:has()</code></a>, WebKit now supports <code>:has(:buffering)</code> and <code>:has(:stalled)</code> to expand the ability to apply CSS conditionally based on the state of media playback. And Safari 17 supports <code>:has(:defined)</code> for applying styling based on the presence of a custom element that has been <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:defined\">defined</a>.</p>\n<p>To keep up with the most recent changes to the web standard for Container Queries, Safari 17 adds support for <code>containerName</code> and <code>containerQuery,</code> and updates <code>conditionText</code> to be <code>containerName</code> <code>containerQuery</code> in <code>CSSContainerRule</code>.</p>\n<h2><a name=\"javascript-and-web-api\"></a>JavaScript and Web API</h2>\n<h3><a name=\"offscreen-canvas\"></a>Offscreen Canvas</h3>\n<p>When using Canvas, the rendering, animation, and user interaction usually happens on the main execution thread of a web application. <a href=\"https://developer.mozilla.org/docs/Web/API/OffscreenCanvas\">Offscreen Canvas</a> provides a canvas that can be rendered off-screen, decoupling the DOM and the Canvas API so that the <code>&lt;canvas&gt;</code> element is no longer entirely dependent on the DOM. Rendering can be transferred to a worker context, allowing you to run tasks in a separate thread and avoid heavy work on the main thread that can negatively impact the user experience. The combination of DOM-independent operations and rendering of the main thread can provide a significantly better experience for users, especially on low-power devices. Support for Offscreen Canvas 2D operations shipped <a href=\"https://webkit.org/blog/13966/webkit-features-in-safari-16-4/#web-api\">in Safari 16.4</a>. Now, Safari 17 adds support for 3D contexts in Offscreen Canvas.</p>\n<h3><a name=\"storage\"></a>Storage</h3>\n<p>WebKit has made some big updates to the storage quota policy. Previously, an origin had a starting storage limit of 1 GB. When exceeding the limit, the subsequent storage operation would fail in Home Screen web apps, or the user would see a prompt asking to increase the quota for the origin in Safari. Starting in macOS Sonoma, iOS 17 and iPadOS 17, the quota is calculated based on total disk space without the user’s input. The origin generally gets a much higher limit, and the user isn’t prompted in Safari. To get the estimated value of the current origin quota and usage, you can use the newly supported <code>navigator.storage.estimate()</code> method.</p>\n<p>As each origin gets a higher storage limit by default, WebKit will evict data by origin when the total usage of all origins is bigger than a certain value, the “overall quota”, calculated based on total disk space. An origin is exempt from eviction when its storage mode is persistent. To check the storage mode of your origin, you can use <code>navigator.storage.persisted()</code>; to request the mode be changed to persistent, you can use <code>navigator.storage.persist()</code>. Critical bug fixes have been made to ensure the storage mode value is remembered across sessions, and eviction will count on it. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage_API\">Storage API</a> is now fully supported.</p>\n<h3><a name=\"regex\"></a>RegEx</h3>\n<p>Safari 17 adds JavaScript support for two new Regular Expression features, <a href=\"https://github.com/tc39/proposal-regexp-v-flag\">RegExp v flag with set notation + properties of strings</a> and <a href=\"https://github.com/tc39/proposal-duplicate-named-capturing-groups\">RegExp duplicate named capture groups</a>. The RegExp v flag feature allows for the creation of regular expressions containing Unicode properties, including some multi-character Emoji sequences. It also allows for creating regular expressions with union, intersection, and subtraction set operations on character classes and collections of strings.</p>\n<p>The Duplicate Named Capture Group feature enables the creation of regular expressions with named captures where more than one capture group uses the same name. This allows you to create regular expressions with intuitive group names where there is more than a one-way pattern to search. An example is creating one regular expression that can search data strings written in multiple ways, e.g. M/D/Y versus D-M-Y, while extracting the matched results with captured group names <em>month</em>, <em>day,</em> and <em>year</em> regardless of which string format was matched.</p>\n<h3><a name=\"set-operations\"></a>Set Operations</h3>\n<p>Another new JavaScript feature adds several new <a href=\"https://github.com/tc39/proposal-set-methods\">Set operation methods</a>, including <code>intersection()</code> and <code>union()</code> as well as comparison methods including <code>difference()</code>, <code>isSubsetOf()</code> and <code>isSuperSetOf()</code>. Together these new methods make Sets first class objects.</p>\n<pre><code><span>const</span> <span>setA</span> <span>=</span> <span>new</span> <span>Set</span>([<span>\"apples\"</span>, <span>\"oranges\"</span>, <span>\"grapes\"</span>]);\n<span>const</span> <span>setB</span> <span>=</span> <span>new</span> <span>Set</span>([<span>\"bananas\"</span>, <span>\"grapes\"</span>, <span>\"apples\"</span>]);\n\n<span>// Union into single set!\n</span><span>const</span> <span>union</span> <span>=</span> <span>setA</span>.<span>union</span>(<span>setB</span>);\n\n<span>// Interection \"apples\" and \"grapes\"\n</span><span>const</span> <span>intersect</span> <span>=</span> <span>setA</span>.<span>intersection</span>(<span>setB</span>);\n\n<span>// Difference \"oranges\"\n</span><span>const</span> <span>diff</span> <span>=</span> <span>setA</span>.<span>difference</span>(<span>setB</span>);\n</code></pre>\n<p>And so on. Check out also the new <code>.symmetricDifference()</code> and <code>.isDisjointFrom()</code> methods, which open some interesting comparison possibilities.</p>\n<h3><a name=\"gamepad-api\"></a>Gamepad API</h3>\n<p>WebKit for Safari 17 adds support for <code>Gamepad.prototype.vibrationActuator.</code> It enables “dual-rumble” haptic feedback on gamepads. The API allows you to check if “dual-rumble” is supported by the gamepad, as well as control the duration and magnitude of the haptic effect.</p>\n<pre><code><span>const</span> [<span>gamepad</span>] <span>=</span> <span>navigator</span>.<span>getGamepads</span>();\n<span>if</span> (<span>gamepad</span><span>?</span>.<span>vibrationActuator</span><span>?</span>.<span>canPlayEffectType</span>(<span>\"dual-rumble\"</span>)) {\n  <span>const</span> <span>options</span> <span>=</span> {\n    <span>duration</span><span>:</span> <span>1000</span>, <span>// 1 seconds\n</span>    <span>startDelay</span><span>:</span> <span>0</span>, <span>// play now\n</span>    <span>strongMagnitude</span><span>:</span> <span>0.5</span>, <span>// low-frequency vibration\n</span>    <span>weakMagnitude</span><span>:</span> <span>0.2</span>,  <span>// high-frequency vibration\n</span>  };\n  <span>gamepad</span>.<span>vibrationActuator</span>.<span>playEffect</span>(<span>\"dual-rumble\"</span>, <span>options</span>);\n}\n</code></pre>\n<h3><a name=\"url-api\"></a>URL API</h3>\n<p>Traditionally, to ensure you could parse a URL, you needed to use a <code>try</code> sequence. Now, you can directly detect if an URL input can be parsed with <a href=\"https://url.spec.whatwg.org/#ref-for-dom-url-canparse\"><code>URL.canParse(tentativeURL, optionalBase)</code></a>. The method will return <code>true</code> or <code>false</code>.</p>\n<p>In addition, the <a href=\"https://url.spec.whatwg.org/#dom-urlsearchparams-has\"><code>has()</code></a> and <a href=\"https://url.spec.whatwg.org/#dom-urlsearchparams-delete\"><code>delete()</code></a> methods on <code>URLSearchParams</code> have been extended. The <code>has()</code> method makes it possible to detect if a parameter has been set. And the <code>delete()</code> method can delete a parameter. Until now, you could only check for, and delete, by name alone. Now, the methods have been extended so that you can check for, and delete, specific name-value pairs.</p>\n<p>For example, the following URL has <code>currency</code> as a duplicate key: <code>https://example.com/?currency=USD&amp;currency=JPY</code>, before you could only check <code>params.has('currency').</code> It is now possible to do: <code>params.has('currency', 'JPY')</code>.</p>\n<p>Be mindful that with this update, method signatures are not directly feature detectable, so they can return false positives. Until all browsers support these updates, be sure to run a small test to confirm support. For example:</p>\n<pre><code><span>// These return true only when the updated API is supported!\n</span><span>function</span> <span>supportsUpdatedURLHasMethod</span>() {\n    <span>const</span> <span>param</span> <span>=</span> <span>new</span> <span>URLSearchParams</span>({ <span>key</span><span>:</span> <span>\"value\"</span> });\n    <span>return</span> <span>param</span>.<span>has</span>(<span>\"key\"</span>, <span>\"does not exist\"</span>) <span>=</span><span>=</span><span>=</span> <span>false</span>;\n}\n\n<span>function</span> <span>supportsUpdatedURLDeleteMethod</span>() {\n    <span>const</span> <span>param</span> <span>=</span> <span>new</span> <span>URLSearchParams</span>({ <span>key</span><span>:</span> <span>\"value\"</span> });\n    <span>param</span>.<span>delete</span>(<span>\"key\"</span>, <span>\"does not exist\"</span>);\n    <span>return</span> <span>param</span>.<span>has</span>(<span>\"key\"</span>);\n}\n</code></pre>\n<h3><a name=\"web-sockets\"></a>Web Sockets</h3>\n<p>You can now use relative URLs (as well as HTTP(S) URLs) in the <code>WebSocket</code> constructor — this makes it a lot easier to point to WebSocket endpoints without hard-coding URLs into your web application. For example, <code>new WebSocket('/updates')</code>.</p>\n<h3><a name=\"and-more-javascript-and-web-api\"></a>And more JavaScript and Web API</h3>\n<ul>\n<li>Support for <code>&lt;link rel=\"modulepreload\"&gt;</code>. </li>\n<li>Support for the <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule\">focus fixup rule</a>. </li>\n<li>Support for Ed25519 cryptography. </li>\n<li>Support for pausing and resuming background fetches. </li>\n<li>Support for <code>ReadableStream</code>. </li>\n<li>Support for fetch priority hints. </li>\n<li>Support for <code>customElements.getName</code> method.</li>\n</ul>\n<h2><a name=\"web-developer-tools\"></a>Web Developer Tools</h2>\n<h3><a name=\"redesigned-develop-menu\"></a>Redesigned Develop Menu</h3>\n<p>In Safari 17 on macOS Sonoma, macOS Ventura and macOS Monterey, a completely redesigned <a href=\"https://developer.apple.com/documentation/safari-developer-tools/develop-menu\">Develop menu</a> makes it easier to find the key tools available to help you create websites, web apps, web content inside other apps, web extensions, and more.</p>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Safari17_DevelopMenu@2x.png\" alt=\"the new Safari 17 Develop menu, with far fewer items, showing icons for iPhone and iPad\" width=\"1916\" height=\"1076\" srcset=\"https://webkit.org/wp-content/uploads/Safari17_DevelopMenu@2x.png 1916w, https://webkit.org/wp-content/uploads/Safari17_DevelopMenu@2x-300x168.png 300w, https://webkit.org/wp-content/uploads/Safari17_DevelopMenu@2x-1024x575.png 1024w, https://webkit.org/wp-content/uploads/Safari17_DevelopMenu@2x-768x431.png 768w, https://webkit.org/wp-content/uploads/Safari17_DevelopMenu@2x-1536x863.png 1536w\" /></p>\n<p>Devices and simulators are now more prominent in the Develop menu, making them easier to identify at a glance. Inside the menu for each iOS or iPadOS device, app icons make it easier to find the application or web content you want to inspect. On macOS Sonoma you can pair with Apple TV and Vision Pro directly from Safari to inspect those platforms.</p>\n<h3><a name=\"rethought-feature-flags\"></a>Rethought Feature Flags</h3>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Safari17_Flags@2x.png\" alt=\"the Safari feature flag settings window with a list of technologies, some on, others off.\" width=\"2088\" height=\"1408\" srcset=\"https://webkit.org/wp-content/uploads/Safari17_Flags@2x.png 2088w, https://webkit.org/wp-content/uploads/Safari17_Flags@2x-300x202.png 300w, https://webkit.org/wp-content/uploads/Safari17_Flags@2x-1024x691.png 1024w, https://webkit.org/wp-content/uploads/Safari17_Flags@2x-768x518.png 768w, https://webkit.org/wp-content/uploads/Safari17_Flags@2x-1536x1036.png 1536w, https://webkit.org/wp-content/uploads/Safari17_Flags@2x-2048x1381.png 2048w\" />\n\n</figure>\n<p>The new <a href=\"https://developer.apple.com/documentation/safari-developer-tools/feature-flag-settings\">Feature Flags</a> panel replaces the previous Experimental Features section of the Develop menu, allowing you to search for specific features and to easily see bolded features toggled from their default state. Feature flags are now organized by topic: Animation, CSS, HTML, JavaScript, Media and more. And each feature is clearly categorized into one of four statuses: Stable, Testable, Preview, and Developer.</p>\n<p>Stable represents features that have recently shipped in Safari, on by default. These features can be turned off to help you debug an issue or test progressive enhancements. Stable features will eventually be removed from the list.</p>\n<p>Testable features are disabled by default. These features might be in the process of being implemented, or they might be waiting for changes to the web standards. They have a ways to go, but still could be interesting enough to test out.</p>\n<p>Preview is for features that have not yet shipped in Safari, but are closer to being complete. These features are on by default in <a href=\"https://developer.apple.com/safari/technology-preview/\">Safari Technology Preview</a>, and are ready for developers to try out. They may still have bugs, or may even undergo significant change as web standards evolve. This is a great time to help find and file bugs, and to comment on whether the web standard for a new technologies solves your needs.</p>\n<p>Developer features are not as common. This category is for miscellaneous features added to the list of feature flags so developers can toggle them on and off for testing. Developer tools may appear here, for example.</p>\n<h3><a name=\"new-developer-settings-panel\"></a>New Developer settings panel</h3>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Safari17_DeveloperSettings@2x.png\" alt=\"the new Safari Developer settings window, listing what can be toggled\" width=\"1872\" height=\"976\" srcset=\"https://webkit.org/wp-content/uploads/Safari17_DeveloperSettings@2x.png 1872w, https://webkit.org/wp-content/uploads/Safari17_DeveloperSettings@2x-300x156.png 300w, https://webkit.org/wp-content/uploads/Safari17_DeveloperSettings@2x-1024x534.png 1024w, https://webkit.org/wp-content/uploads/Safari17_DeveloperSettings@2x-768x400.png 768w, https://webkit.org/wp-content/uploads/Safari17_DeveloperSettings@2x-1536x801.png 1536w\" />\n\n</figure>\n<p>The new Developer panel in Safari 17’s Settings let you toggle developer features that apply across all websites open in Safari, like Allow remote automation (which enables automating Safari with <a href=\"https://developer.apple.com/documentation/safari-developer-tools/webdriver\">WebDriver</a>) and other features that were previously in the Develop menu.</p>\n<h3><a name=\"new-tab-specific-setting-overlay\"></a>New tab-specific setting overlay</h3>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/setting-overlay-light.png\" alt=\"Web Inspector tab-specific settings overlay\" width=\"1136\" height=\"754\" srcset=\"https://webkit.org/wp-content/uploads/setting-overlay-light.png 1136w, https://webkit.org/wp-content/uploads/setting-overlay-light-300x199.png 300w, https://webkit.org/wp-content/uploads/setting-overlay-light-1024x680.png 1024w, https://webkit.org/wp-content/uploads/setting-overlay-light-768x510.png 768w\" />\n\n</figure>\n<p>Some previously-global settings from the Develop menu, like disabling CSS or changing WebRTC behavior, have moved to Web Inspector where they are now scoped to the inspected tab, allowing you to use other tabs and windows normally.</p>\n<h3><a name=\"redesigned-responsive-web-design-mode\"></a>Redesigned Responsive Web Design Mode</h3>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Safari17_ResponsiveDesignMode@2x.png\" alt=\"Redesigned Responsive Design Mode in Safari with configurable viewport size, scale, and simulator menu\" width=\"1426\" height=\"971\" srcset=\"https://webkit.org/wp-content/uploads/Safari17_ResponsiveDesignMode@2x.png 1426w, https://webkit.org/wp-content/uploads/Safari17_ResponsiveDesignMode@2x-300x204.png 300w, https://webkit.org/wp-content/uploads/Safari17_ResponsiveDesignMode@2x-1024x697.png 1024w, https://webkit.org/wp-content/uploads/Safari17_ResponsiveDesignMode@2x-768x523.png 768w\" />\n\n</figure>\n<p><a href=\"https://developer.apple.com/documentation/safari-developer-tools/responsive-design-mode\">Responsive Design Mode</a> has also been refreshed to focus on the responsiveness of a page’s design at any width or height on your Mac. You can type in a specific viewport size at the top of Responsive Design Mode in addition to dragging the resize handles around the view.</p>\n<p>Also new is the ability to <a href=\"https://developer.apple.com/documentation/safari-developer-tools/responsive-design-mode#Open-with-Simulator\">open the page in a Simulator</a> right from Responsive Design Mode.</p>\n<h3><a name=\"simulators\"></a>Simulators</h3>\n<p>You can also open any page from Safari in a Simulator directly from the <a href=\"https://developer.apple.com/documentation/safari-developer-tools/develop-menu#Open-Page-With\">Develop &gt; Open Page With</a> menu, even when you are not using Responsive Design Mode.</p>\n<p>Using a Simulator is a great way to test the experiences you’re making on iOS, iPadOS, and coming soon, visionOS — including device-specific behaviors, like the rendered size of type, the effects of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Viewport_meta_tag\"><code>viewport</code> meta tag</a>, double-tap to zoom, and even Home Screen web apps on iOS and iPadOS. Simulators are free, and come included with <a href=\"https://apps.apple.com/us/app/xcode/id497799835\">Xcode from the Mac App Store</a>.</p>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Safari17_Simulators@2x.webp\" alt=\"macOS Sonoma with a simulated iPhone on screen, showing a website. The Develop menu is open, with the user selecting the website in that simulator.\" width=\"2560\" height=\"1600\" srcset=\"https://webkit.org/wp-content/uploads/Safari17_Simulators@2x.webp 2560w, https://webkit.org/wp-content/uploads/Safari17_Simulators@2x-300x188.webp 300w, https://webkit.org/wp-content/uploads/Safari17_Simulators@2x-1024x640.webp 1024w, https://webkit.org/wp-content/uploads/Safari17_Simulators@2x-768x480.webp 768w, https://webkit.org/wp-content/uploads/Safari17_Simulators@2x-1536x960.webp 1536w, https://webkit.org/wp-content/uploads/Safari17_Simulators@2x-2048x1280.webp 2048w\" />\n\n</figure>\n<p>If you don’t have Xcode installed, a link to documentation is conveniently available in the Develop &gt; Open Page With menu, as well as the Open with Simulator menu in Responsive Design Mode, to help you get started, or to add more devices and OS versions.</p>\n<p>Learn all about the new Develop menu, redesigned Responsive Web Design mode, how to easily connect to directly to a real device, how to install and use a Simulator, and much more in <a href=\"https://developer.apple.com/videos/play/wwdc2023/10262/\"><em>Rediscover Safari developer features</em></a> at WWDC23.</p>\n<h3><a name=\"web-inspector\"></a>Web Inspector</h3>\n<p>We’ve also made improvements to <a href=\"https://webkit.org/web-inspector/\">Web Inspector</a>. When working with minified sources, pretty printing in Web Inspector can help make the code easier to read, set breakpoints in, and debug. New in Safari 17, more JavaScript syntax is supported for pretty printing minified scripts, including <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">template strings</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">optional chaining</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">private variables and functions in classes</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\">static variables and functions</a>.</p>\n<p>Changes to Web Inspector in Safari 17 also include:</p>\n<ul>\n<li>Elements tab: Added settings to always show rulers and element overlays for grid and flexbox when highlighting elements in Web Inspector or in Element Selection Mode.</li>\n<li>Elements tab: Added editing controls for variation axes in the Fonts sidebar.</li>\n<li>Console tab: Added setting to show timestamps for console messages.</li>\n<li>Console tab: Added support for viewing the target of a <code>WeakRef</code>.</li>\n<li>Sources tab: Added support for ES2022 Private Fields when inspecting and logging JavaScript objects.</li>\n<li>Graphics tab: Added support for OffscreenCanvas.</li>\n</ul>\n<p>Learn more by watching <a href=\"https://developer.apple.com/videos/play/wwdc2023/10118/\"><em>What’s new in Web Inspector</em></a> at WWDC23.</p>\n<h2><a name=\"security\"></a>Security</h2>\n<h3><a name=\"gpu-process\"></a>GPU Process</h3>\n<p>Last year brought GPU process support to WebKit on iOS, iPadOS and watchOS. This year we’re adding support on macOS Sonoma. The change moves all drawing (including the drawing of page content, 2D Canvas and WebGL rendering) so it occurs in the “GPU Process”. This new architecture allows WebKit to isolate powerful graphics hardware and driver access away from the WebContent process, which is the process that interacts with untrusted content from the Internet. The new design also allows the WebContent process sandbox to completely block IOKit access, resulting in improved security.</p>\n<h2><a name=\"webgl\"></a>WebGL</h2>\n<p>Improvements to WebGL include adding support for <code>WEBGL_clip_cull_distance</code>,  <code>EXT_disjoint_timer_query_webgl2</code>, <code>EXT_polygon_offset_clamp</code> and GPUExternalTexture.</p>\n<h2><a name=\"webkit-api\"></a>WebKit API</h2>\n<p>New interfaces are added to WKWebsiteDataStore and related classes to further unlock the potential of your WebKit apps. The new capabilities include creating persistent website data stores, configuring cookie policy, customizing proxy settings, requesting HTTPS upgrade for all navigations, and controlling state of inline prediction for autocomplete.</p>\n<h2><a name=\"browser-changes\"></a>Browser changes</h2>\n<h3><a name=\"safari-profiles\"></a>Safari Profiles</h3>\n<p><a href=\"https://www.apple.com/safari/\">Safari 17</a> adds support for profiles. History, favorites, Tab Groups and website data such as cookies, caches, service workers, and Web Push subscriptions are scoped per-profile. Users can manage each profile’s data individually.</p>\n<h3><a name=\"safari-private-browsing\"></a>Safari Private Browsing</h3>\n<p>In Safari 17, Private Browsing gets even more private with added protection against some of the most advanced techniques used to track you. Technical changes include:</p>\n<ul>\n<li>Adding blocking for known trackers and fingerprinting. </li>\n<li>Adding support for mitigating trackers that map subdomains to third-party IP addresses. </li>\n<li>Adding blocking for known tracking query parameters in links.</li>\n<li>Adding noise to fingerprintable web APIs.</li>\n<li>Adding console log messages when blocking requests to known trackers. </li>\n<li>Adding support for blocking trackers that use third-party CNAME cloaking.</li>\n<li>Adding support for Private Click Measurement for direct response advertising, similar to how it works for <a href=\"https://webkit.org/blog/12042/pcm-for-in-app-direct-response-advertising/\">in-app direct response advertising</a>.</li>\n</ul>\n<h3><a name=\"text-cursor-color\"></a>Text cursor color</h3>\n<p>On macOS Sonoma, the redesigned text cursor now uses the system accent color and matches iOS behavior. You can still customize the color with the <code>caret-color</code> CSS property.</p>\n<h3><a name=\"live-text\"></a>Live Text</h3>\n<p>Safari 17 adds support for vertical text recognition in images and videos.</p>\n<h3><a name=\"apple-pay-via-payment-request-api\"></a>Apple Pay via Payment Request API</h3>\n<p>You can now enable Apple Pay to be used in third-party iframes by setting the <code>allow=\"payment\"</code> attribute. This “permissions policy” enables the Payment Request API on an iframe, allowing you to embed third-party payment handlers. If using this feature, be sure you also use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\">X-Frames-Options</a> HTTP header to prevent your site from being embedded by malicious websites.</p>\n<h3><a name=\"authentication\"></a>Authentication</h3>\n<p>Safari 17 adds support for <code>largeBlob</code> extension for passkeys. Websites can use the additional storage to save data that can later be retrieved when signing in with a passkey. These saved blobs are synced and shared along with passkeys.</p>\n<p>We also are adding support for <code>enterprise</code> WebAuthn attestation for passkeys in iCloud Keychain. Managed devices can provide an attestation statement when creating passkeys, using a certificate provisioned through MDM.</p>\n<h3><a name=\"networking\"></a>Networking</h3>\n<p>Safari 17 adds support for <code>preconnect</code> via HTTP Early Hints.</p>\n<h3><a name=\"lockdown-mode\"></a>Lockdown mode</h3>\n<p><a href=\"https://support.apple.com/en-us/HT212650\">Lockdown mode</a> now:</p>\n<ul>\n<li>Disables IndexedDB.</li>\n<li>Disables the File API and FileReader API.</li>\n<li>Disables support for the <code>&lt;embed&gt;</code> element. </li>\n<li>Disables the Web Speech (Speech Synthesis) API.</li>\n<li>Disables the WebLocks API.</li>\n<li>Disables support for experimental APIs. </li>\n<li>Supports select web fonts.</li>\n</ul>\n<p>Lockdown Mode is also now supported in WebKit on watchOS.</p>\n<h2><a name=\"safari-extensions\"></a>Safari Extensions</h2>\n<p>Safari 17 now lets you customize where extensions run with even more granularity.</p>\n<p>First, Safari App Extensions now have the same per-site permissions model as Safari Web Extensions. It puts users in control over the browsing data they share with every extension they use in Safari.</p>\n<p>Second, as an additional layer of control, Safari Extensions can be turned off in Private Browsing. Extensions that access browsing data, like browsing history or webpage contents, will be off by default in Private Browsing but can be allowed with a single toggle in Safari Settings.</p>\n<p>Third, all Safari Extensions can be turned on or off per Safari Profile. You can imagine this being useful for turning on an extension used only for school or work in a relevant profile, but keeping it off everywhere else. Each profile runs a separate instance of the extension — meaning there are unique storage areas, background pages, service workers, and more. However, per-site permissions are shared across profiles, so an extension only needs to be granted once. If your extension leverages native messaging capabilities to communicate with a host app, it’s possible to distinguish between profiles to ensure your extension behaves correctly across profiles.</p>\n<p>Learn more by watching <a href=\"https://developer.apple.com/videos/play/wwdc2023/10119/\"><em>What’s new in Safari extensions</em></a> at WWDC23.</p>\n<h2><a name=\"bug-fixes-and-more\"></a>Bug Fixes and more</h2>\n<p>To learn even more about what’s in Safari 17 for web developers, including an extensive list of bug fixes, read the <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-17-release-notes\">Safari 17 beta release notes</a>.</p>\n<h2><a name=\"help-us-beta-test\"></a>Help us Beta Test</h2>\n<p>You can test Safari 17 beta by installing the <a href=\"https://beta.apple.com/sp/betaprogram/\">beta</a> of macOS Sonoma, iOS 17, or iPadOS 17.</p>\n<p>Or, if you’d like, you can try out Safari 17 beta on macOS Ventura or macOS Monterey by <a href=\"https://developer.apple.com/safari/resources/\">downloading the Safari 17.0 public beta</a>, once it’s available later this summer. You will need to sign in using a free <a href=\"https://appleid.apple.com/faq\">Apple ID</a> to download. Note that installing Safari 17 beta will replace your existing Safari install with no way to revert to an earlier version.</p>\n<h2><a name=\"feedback\"></a>Feedback</h2>\n<p>We love hearing from you. Send a tweet to <a href=\"https://twitter.com/webkit\">@webkit</a> to share your thoughts on Safari 17.0 beta. You can find us on Mastodon at <a href=\"https://front-end.social/@jensimmons\">@jensimmons@front-end.social</a> and <a href=\"https://mastodon.social/@jondavis\">@jondavis@mastodon.social</a>. If you run into any issues, we welcome your <a href=\"https://feedbackassistant.apple.com/\">feedback</a> on Safari UI, or your <a href=\"https://bugs.webkit.org/\">WebKit bug report</a> about web technologies or Web Inspector. Filing issues really does make a difference.</p>\n<p>Download the latest <a href=\"https://developer.apple.com/safari/download/\">Safari Technology Preview</a> to stay at the forefront of the web platform and to use the latest Web Inspector features.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"b638517e68c59379a4d2c93172fcc39f099c8f08366e7eb649b5a7eab8566804","category":"Tech"}