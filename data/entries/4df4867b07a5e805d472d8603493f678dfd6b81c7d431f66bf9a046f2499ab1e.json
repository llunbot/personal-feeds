{"title":"Amazon VPC Routing Enhancements Allow You to Inspect Traffic Between Subnets In a VPC","link":"https://aws.amazon.com/blogs/aws/inspect-subnet-to-subnet-traffic-with-amazon-vpc-more-specific-routing/","date":1630366862000,"content":"<p>Since December 2019, <a href=\"https://aws.amazon.com/vpc/\">Amazon Virtual Private Cloud (VPC)</a> has allowed you to route all ingress traffic (also known as <a href=\"https://en.wikipedia.org/wiki/North-south_traffic\">north – south traffic</a>) to a specific network interface. You might use this capability for a number of reasons. For example, to inspect incoming traffic using an intrusion detection system (IDS) appliance or to route ingress traffic to a firewall.</p> \n<p>Since we launched this feature, many of you asked us to provide a similar capability to analyze traffic flowing from one subnet to another inside your VPC, also known as <a href=\"https://en.wikipedia.org/wiki/East-west_traffic\">east – west traffic</a>. Until today, it was not possible because a route in a routing table cannot be more specific than the default local route (check the <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\">VPC documentation</a> for more details). In plain English, it means that no route can have a destination using a smaller <a href=\"https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\">CIDR</a> range than the default local route (which is the CIDR range of the whole VPC). For example, when the VPC range is <code>10.0.0/16</code> and a subnet has <code>10.0.1.0/24</code>, a route to <code>10.0.1.0/24</code> is more specific than a route to <code>10.0.0/16</code>.</p> \n<p>Routing tables no longer have this restriction. Routes in a routing table can have routes more specific than the default local route. You can use such more specific route to send all traffic to a dedicated appliance or service to inspect, analyze, or filter all traffic flowing between two subnets (east-west traffic). The route target can be the network interface (ENI) attached to an appliance you built or you acquired, an <a href=\"https://aws.amazon.com/elasticloadbalancing/gateway-load-balancer/\">AWS Gateway Load Balancer</a> (GWLB) endpoint to distribute traffic to multiple appliances for performance or high availability reasons, an <a href=\"https://aws.amazon.com/network-firewall/\">AWS Network Firewall</a>, or a <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html\">NAT gateway</a>. It also allows to insert an appliance between a subnet and an <a href=\"https://aws.amazon.com/transit-gateway/\">AWS Transit Gateway</a>.</p> \n<p>It is possible to chain appliances to have more than one type of analysis in between source and destination subnets. For examples, you might want first to filter traffic using a firewall (AWS managed or a <a href=\"https://aws.amazon.com/marketplace/solutions/security\">third-party firewall appliance</a>), second send the traffic to an <a href=\"https://aws.amazon.com/marketplace/solutions/infrastructure-software/ids-ips\">intrusion detection and prevention systems</a>, and finally, perform deep packet inspection. You can access virtual appliances from our <a href=\"https://aws.amazon.com/partners/\">AWS Partner Network</a> and <a href=\"https://aws.amazon.com/marketplace\">AWS Marketplace</a>.</p> \n<p>When you chain appliances, each appliance and each endpoint have to be in separate subnets.</p> \n<p>Let’s get our hands dirty and try this new capability.</p> \n<p><span><strong>How It Works</strong></span><br /> For the purpose of this blog post, let’s assume I have a <span>VPC</span> with three subnets. The first subnet is public and has a bastion host. It requires access to resources, such as an API or a database in the second subnet. The second subnet is private. It hosts the resources required by the bastion. I wrote <a href=\"https://github.com/sebsto/cdkv2-vpc-example/blob/main/lib/specific-routing-demo-stack.ts\">a simple CDK script</a> to help you to deploy this setup.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/24/Slide1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/24/Slide1-e1621855971954-1024x584.png\" /></a></p> \n<p>For compliance reasons, my company requires that traffic to this private application flows through an intrusion detection system. The <a href=\"https://github.com/sebsto/cdkv2-vpc-example/blob/main/lib/specific-routing-demo-stack.ts\">CDK script</a> also creates a third subnet, a private one, to host a network appliance. It provides three <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instances : the bastion host, the application instance and the network analysis appliance. The script also creates a NAT gateway allowing to bootstrap the application instance and to connect to the three instances using <a href=\"https://aws.amazon.com/systems-manager/\">AWS Systems Manager</a> Session Manager (SSM).</p> \n<p>Because this is a demo, the network appliance is just a regular Amazon Linux <span>EC2</span> instance configured as an IP router. In real life, you’re most probably going to use either one of the many appliances provided by our partners on the <a href=\"https://aws.amazon.com/marketplace/\">AWS Marketplace</a>, or a <a href=\"https://aws.amazon.com/elasticloadbalancing/gateway-load-balancer/\">Gateway Load Balancer</a> endpoint, or a Network Firewall.</p> \n<p>Let’s modify the routing tables to send the traffic through the appliance.</p> \n<p>Using either the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a>, or the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (CLI)</a>, I add a more specific route to the <code>10.0.0.0/24</code> and <code>10.0.1.0/24</code> subnet routing tables. These routes point to <code>eni0</code>, the network interface of the traffic-inspection appliance.</p> \n<p>Using the CLI, I first collect the VPC ID, Subnet IDs, routing table IDs, and the ENI ID of the appliance.</p> \n<pre><code>VPC_ID=$(aws                                                    \\\n    --region $REGION cloudformation describe-stacks             \\\n    --stack-name SpecificRoutingDemoStack                       \\\n    --query \"Stacks[].Outputs[?OutputKey=='VPCID'].OutputValue\" \\\n    --output text)\necho $VPC_ID\n\nAPPLICATION_SUBNET_ID=$(aws                                                                      \\\n    --region $REGION ec2 describe-instances                                                      \\\n    --query \"Reservations[].Instances[] | [?Tags[?Key=='Name' &amp;&amp; Value=='application']].NetworkInterfaces[].SubnetId\" \\\n    --output text)\necho $APPLICATION_SUBNET_ID\n\nAPPLICATION_SUBNET_ROUTE_TABLE=$(aws                                                             \\\n    --region $REGION  ec2 describe-route-tables                                                  \\\n    --query \"RouteTables[?VpcId=='${VPC_ID}'] | [?Associations[?SubnetId=='${APPLICATION_SUBNET_ID}']].RouteTableId\" \\\n    --output text)\necho $APPLICATION_SUBNET_ROUTE_TABLE\n\nAPPLIANCE_ENI_ID=$(aws                                                                           \\\n    --region $REGION ec2 describe-instances                                                      \\\n    --query \"Reservations[].Instances[] | [?Tags[?Key=='Name' &amp;&amp; Value=='appliance']].NetworkInterfaces[].NetworkInterfaceId\" \\\n    --output text)\necho $APPLIANCE_ENI_ID\n\nBASTION_SUBNET_ID=$(aws                                                                         \\\n    --region $REGION ec2 describe-instances                                                     \\\n    --query \"Reservations[].Instances[] | [?Tags[?Key=='Name' &amp;&amp; Value=='BastionHost']].NetworkInterfaces[].SubnetId\" \\\n    --output text)\necho $BASTION_SUBNET_ID\n\nBASTION_SUBNET_ROUTE_TABLE=$(aws \\\n --region $REGION ec2 describe-route-tables \\\n --query \"RouteTables[?VpcId=='${VPC_ID}'] | [?Associations[?SubnetId=='${BASTION_SUBNET_ID}']].RouteTableId\" \\\n --output text)\necho $BASTION_SUBNET_ROUTE_TABLE</code></pre> \n<p>Next, I add two more specific routes. One route sends traffic from the bastion public subnet to the application private subnet through the appliance network interface.  The second route is in the opposite direction to route replies. It routes more specific traffic from the application private subnet to the bastion public subnet through the appliance network interface.  Confused? Let’s look at the following diagram:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/24/illustration-1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/24/illustration-1-1024x584.png\" /></a></p> \n<p>First, let’s modify the bastion routing table:</p> \n<pre><code>aws ec2 create-route                                  \\\n     --region $REGION                                 \\\n     --route-table-id $BASTION_SUBNET_ROUTE_TABLE     \\\n     --destination-cidr-block 10.0.1.0/24             \\\n     --network-interface-id $APPLIANCE_ENI_ID</code></pre> \n<p>Next, let’s modify the application routing table:</p> \n<pre><code>aws ec2 create-route                                  \\\n    --region $REGION                                  \\\n    --route-table-id $APPLICATION_SUBNET_ROUTE_TABLE  \\\n    --destination-cidr-block 10.0.0.0/24              \\\n    --network-interface-id $APPLIANCE_ENI_ID</code></pre> \n<p>I can also use the Amazon VPC Console to make these modifications. I simply choose the “Bastion” routing tables and from the Routes tab and click Edit routes.<a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/26/2021-05-26_15-33-52.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/26/2021-05-26_15-33-52-1024x584.png\" /></a></p> \n<p>I add a route to send traffic for<code> 10.0.1.0/24</code> (subnet of the application) to the appliance ENI (<code>eni-055...</code>).<a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/26/2021-05-26_15-35-20.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/26/2021-05-26_15-35-20-1024x494.png\" /></a></p> \n<p>The next step is to define the opposite route for replies, from the application subnet send traffic to <code>10.0.0.0/24</code> to the appliance ENI (<code>eni-05...</code>).  Once finished, the application subnet routing table should look like this:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/26/2021-05-26_15-36-34.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/26/2021-05-26_15-36-34-1024x559.png\" /></a></p> \n<p><span><strong>Configure the Appliance Instance</strong></span><br /> Finally, I configure the appliance instance to forward all traffic it receives. Your software appliance usually does that for you. No extra step is required when you use <a href=\"https://aws.amazon.com/marketplace/\">AWS Marketplace</a> appliances or the instance created by the <a href=\"https://github.com/sebsto/cdkv2-vpc-example/blob/main/lib/specific-routing-demo-stack.ts\">CDK script I provided for this demo</a>. If you’re using a plain Linux instance, complete these two extra steps:</p> \n<p>1. Connect to the <span>EC2</span> appliance instance and configure IP traffic forwarding in the kernel:</p> \n<pre><code>sysctl -w net.ipv4.ip_forward=1\nsysctl -w net.ipv6.conf.all.forwarding=1\n</code></pre> \n<p>2. Configure the <span>EC2</span> instance to accept traffic for destinations other than itself (known as <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_NAT_Instance.html#EIP_Disable_SrcDestCheck\">source/destination check</a>) :</p> \n<pre><code>APPLIANCE_ID=$(aws --region $REGION ec2 describe-instances                     \\\n     --filter \"Name=tag:Name,Values=appliance\"                                 \\\n     --query \"Reservations[].Instances[?State.Name == 'running'].InstanceId[]\" \\\n     --output text)\n\naws ec2 modify-instance-attribute --region $REGION     \\\n                         --no-source-dest-check        \\\n                         --instance-id $APPLIANCE_ID</code></pre> \n<p><span><strong>Test the Setup</strong></span><br /> The appliance is now ready to forward traffic to the other <span>EC2</span> instances.</p> \n<p>If you are using <a href=\"https://github.com/sebsto/cdkv2-vpc-example\">the demo setup</a>, there is no SSH key installed on the bastion host. Access is made through <a href=\"https://aws.amazon.com/systems-manager/\">AWS Systems Manager</a> Session Manager.</p> \n<pre><code>BASTION_ID=$(aws --region $REGION ec2 describe-instances                      \\\n    --filter \"Name=tag:Name,Values=BastionHost\"                               \\\n    --query \"Reservations[].Instances[?State.Name == 'running'].InstanceId[]\" \\\n    --output text)\n\naws --region $REGION ssm start-session --target $BASTION_ID</code></pre> \n<p>After you’re connected to the bastion host, issue the following <code>cURL</code> command to connect to the application host:</p> \n<pre><code>sh-4.2$ curl -I 10.0.1.239 # use the private IP address of your application host\nHTTP/1.1 200 OK\nServer: nginx/1.18.0\nDate: Mon, 24 May 2021 10:00:22 GMT\nContent-Type: text/html\nContent-Length: 12338\nLast-Modified: Mon, 24 May 2021 09:36:49 GMT\nConnection: keep-alive\nETag: \"60ab73b1-3032\"\nAccept-Ranges: bytes</code></pre> \n<p>To verify the traffic is really flowing through the appliance, you can enable source/destination check on the instance again. Use the <code>--source-dest-check</code> parameter with the <code>modify-instance-attribute</code> CLI command above. The traffic is blocked when the source/destination check is enabled.</p> \n<p>I can also connect to the appliance host and inspect traffic with the <code>tcpdump</code> command.</p> \n<pre><code>(on your laptop)\nAPPLIANCE_ID=$(aws --region $REGION ec2 describe-instances     \\\n                   --filter \"Name=tag:Name,Values=appliance\" \\\n\t\t   --query \"Reservations[].Instances[?State.Name == 'running'].InstanceId[]\" \\\n  \t\t   --output text)\n\naws --region $REGION ssm start-session --target $APPLIANCE_ID\n\n(on the appliance host)\ntcpdump -i eth0 host 10.0.0.16 # the private IP address of the bastion host\n\n08:53:22.760055 IP ip-10-0-0-16.us-west-2.compute.internal.46934 &gt; ip-10-0-1-104.us-west-2.compute.internal.http: Flags [S], seq 1077227105, win 26883, options [mss 8961,sackOK,TS val 1954932042 ecr 0,nop,wscale 6], length 0\n08:53:22.760073 IP ip-10-0-0-16.us-west-2.compute.internal.46934 &gt; ip-10-0-1-104.us-west-2.compute.internal.http: Flags [S], seq 1077227105, win 26883, options [mss 8961,sackOK,TS val 1954932042 ecr 0,nop,wscale 6], length 0\n08:53:22.760322 IP ip-10-0-1-104.us-west-2.compute.internal.http &gt; ip-10-0-0-16.us-west-2.compute.internal.46934: Flags [S.], seq 4152624111, ack 1077227106, win 26847, options [mss 8961,sackOK,TS val 4094021737 ecr 1954932042,nop,wscale 6], length 0\n08:53:22.760329 IP ip-10-0-1-104.us-west-2.compute.internal.http &gt; ip-10-0-0-16.us-west-2.compute.internal.46934: Flags [S.], seq 4152624111, ack 1077227106, win 26847, options [mss </code></pre> \n<p><span><strong>Cleanup</strong></span><br /> If you used the <a href=\"https://github.com/sebsto/cdkv2-vpc-example/blob/main/lib/specific-routing-demo-stack.ts\">CDK script I provided</a> for this post, be sure to run <code>cdk destroy</code> when you’re finished so that you’re not billed for the three EC2 instances and the NAT gateway I use for this demo. Running the demo script in <code>us-west-2</code> <a href=\"https://calculator.aws/#/estimate?id=a460f21b3c6a0e271aae860ce4482c02389747bd\">costs</a> $0.062 per hour.</p> \n<p><strong><span>Things to Keep in Mind.</span></strong><br /> There are couple of things to keep in mind when using <span>VPC</span> more specific routes :</p> \n<ul> \n <li>The network interface or service endpoint you are sending the traffic to must be in a dedicated subnet. It cannot be in the source or destination subnet of your traffic.</li> \n <li>You can chain appliances. Each appliance must live in its dedicated subnet.</li> \n <li>Each subnet you’re adding consumes a block of IP addresses.  If you’re using IPv4, be conscious of the number of IP addresses consumed (A /24 subnet consumes 256 addresses from your VPC). The smallest CIDR range allowed in a subnet is /28, it just consumes 16 IP addresses.</li> \n <li>The appliance’s security group must have a rule accepting incoming traffic on the desired port. Similarly, the application’s security group must authorize traffic coming from the appliance security group or IP address.</li> \n</ul> \n<p>This new capability is available in all AWS Regions, at no additional cost.</p> \n<p>You can start using it today.</p>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"4df4867b07a5e805d472d8603493f678dfd6b81c7d431f66bf9a046f2499ab1e","category":"Tech"}