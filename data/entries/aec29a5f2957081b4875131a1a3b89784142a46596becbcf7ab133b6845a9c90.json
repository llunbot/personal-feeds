{"title":"Terraform Google provider adds updates to default labels","link":"https://www.hashicorp.com/blog/terraform-google-provider-adds-updates-to-default-labels","date":1696356000000,"content":"<p>We are excited to announce the release of version 5.0 of the Terraform Google provider with highly anticipated updates to <em>labels</em>, designed to increase productivity and reduce risk. Default labels can now be set at the provider level, which applies them across all resources that support them in the configuration. This post reviews the details and benefits of this updated feature, as well as a handful of other new features released this year.</p>\n\n<h2>2023 Terraform Google provider highlights</h2>\n\n<p>As the <a href=\"https://registry.terraform.io/providers/hashicorp/google/latest\">Terraform Google provider’s</a> download count tops 185 million downloads this year, Google and HashiCorp continue to develop new integrations to help customers work faster, get the benefits from more services and features, and find developer-friendly ways to deploy cloud infrastructure. This year, we focused on listening to the community by adding oft-requested new features to the Google provider, including:</p>\n\n<ul>\n<li>Label enhancements </li>\n<li>Allowing Terraform plans to include provider-default values </li>\n<li>Other changes and deprecations</li>\n</ul>\n\n<h2>Default label enhancements</h2>\n\n<p>Default labels in the Google provider allow practitioners to define common metadata labels at the provider level. These labels are then applied to all supported resources in the Terraform configuration. Previously, assumptions and restrictions were made to allow this feature to function across as many resources as possible. However, it could be difficult to retrofit existing code, causing frustrating manual intervention. The community has now expressed a desire for the ability to define a default set of labels on the provider that would be applied to all resources using that provider.  </p>\n\n<p>New features available in the Terraform provider SDK and Plugin framework have removed several limitations that made labels difficult to integrate with existing resources and modules. Now users are able to move default information from apply time, where it’s unknown at plan time, to plan time.  This removes the misleading sticky behavior of the values, and provides users additional information at plan time.  So now, the provider has been updated to include a <code>default_labels</code> field and the labels defined on the provider will now be applied automatically to all resources. </p>\n\n<p>The updates in version 5.0 resources include:</p>\n\n<ul>\n<li><strong>Labels attribute:</strong> Resources will be expected to manage only user-set labels, and are no longer authoritative over <em>all</em> labels in Google Cloud.<br /></li>\n<li><strong>Terraform labels:</strong> A new output-only attribute added to all resources, where the value contains all labels either set directly on the resource (via <code>labels</code>) or added by default (from <code>default_labels</code>)</li>\n<li><strong>Effective labels:</strong> A new output-only attribute added to all resources, where the value contains a combination of all labels set on the resource in the Terraform configuration and any other labels present on the resource in Google Cloud that aren’t managed via Terraform.</li>\n</ul>\n\n<p>This example shows how default labels can be used to apply metadata to a Terraform configuration: </p>\n<pre><code>provider \"google\" {\n  project = \"my-project\"\n  default_labels = {\n    label-A = \"I'm a default label from the provider\"\n  }\n}\n\nresource \"google_pubsub_topic\" \"example\" {\n  name = \"example-topic\"\n\n  labels = {\n    label-B = \"I'm a label set in the resource block\"\n  }\n\n  message_retention_duration = \"86600s\"\n}</code></pre><h2>Improvements that let Terraform plans include provider default values</h2>\n\n<p>Previously, any default values set in the provider configuration were available only at <code>apply</code> time. This meant that Terraform plans could not indicate what values would be used, and instead displayed a placeholder <code>(known after apply)</code> value. However, beginning in version 5.0 of the Google provider, Terraform plans will reliably show any default values that are in use, resulting in more clarity when teams review planned changes to their infrastructure.  </p>\n\n<p>This new feature will also improve handling of default projects by enabling teams to write the default project value into the new state when project information is unset at the resource-level. This will override old values and remove the previous sticky behavior.  </p>\n\n<h2>Removing deprecated attributes and other behavior changes</h2>\n\n<p>This major release will also remove attributes marked as deprecated in previous versions. Typically, these were marked as such due to changes in the upstream API, or in some cases, the use of the attribute causes confusion.We removed attributes and features marked as deprecated in accordance with our <a href=\"https://developer.hashicorp.com/terraform/plugin/sdkv2/best-practices/deprecations\">best practices for provider development</a>.   </p>\n\n<p>In addition, we introduced several behavior changes aimed at improving usability by updating how we handle 404 errors, standardizing location-based logic, and adding multi-file support for Google endpoints service.</p>\n\n<h2>Key benefits of Terraform Google provider version 5.0</h2>\n\n<p>The release of version 5.0 of the Terraform Google provider allows practitioners to more efficiently manage labels for the provider. Here are the two main benefits of this new release:</p>\n\n<ul>\n<li><strong>Increase productivity:</strong> Application developers can now set labels that will automatically be applied to all resources. This  improves the user experience and simplifies practitioner configurations.<br /></li>\n<li><strong>Reduce risk:</strong> With the default enhancements, platform teams now have increased visibility into their infrastructure, significantly reducing the time and customization it takes to support those new capabilities.<br /></li>\n</ul>\n\n<h2>Learn more about Google Cloud and HashiCorp</h2>\n\n<p>To learn the basics of Terraform using the Google provider, check out the <a href=\"https://developer.hashicorp.com/terraform/tutorials/gcp-get-started\">Get Started tutorials for Google Cloud</a>.   </p>\n\n<p>When upgrading to version 5.0 of the Terraform Google provider, please consult the <a href=\"https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/version_5_upgrade\">upgrade guide on the Terraform Registry</a>, which contains a full list of the changes and upgrade considerations. Because this release introduces breaking changes, we recommend <a href=\"https://developer.hashicorp.com/terraform/language/providers/requirements#best-practices-for-provider-versions\">pinning your provider version</a> to protect against unexpected results. For a complete list of the changes in 5.0, please refer to the <a href=\"https://github.com/hashicorp/terraform-provider-google/releases/tag/v5.0.0\">Google provider changelog</a>.</p>\n\n<p>HashiCorp and Google partner on cloud infrastructure to make it easy for users to provision and manage Google Cloud resources. You can find out more about our partnership on the <a href=\"https://www.hashicorp.com/partners/cloud/google-cloud\">Google Cloud partner page</a>.   </p>\n\n<p>If you are currently using <a href=\"https://www.terraform.io/community\">Terraform Community</a> or are completely new to Terraform, <a href=\"http://hashi.co/tf-cloud-bc\">sign up for Terraform Cloud</a> and get started using the Free offering today.</p>\n","author":"Aurora Chun","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"aec29a5f2957081b4875131a1a3b89784142a46596becbcf7ab133b6845a9c90","category":"Tech"}