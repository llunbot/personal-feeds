{"title":"Introducing Amazon Nova: Frontier intelligence and industry leading price performance","link":"https://aws.amazon.com/blogs/aws/introducing-amazon-nova-frontier-intelligence-and-industry-leading-price-performance/","date":1733248607000,"content":"<p>Today, we’re thrilled to announce <a href=\"http://aws.amazon.com/nova\">Amazon Nova</a>, a new generation of state-of-the-art <a href=\"https://aws.amazon.com/what-is/foundation-models/\">foundation models (FMs)</a> that deliver frontier intelligence and industry leading price performance, available exclusively in <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a>.</p> \n<p>You can use Amazon Nova to lower costs and latency for almost any <a href=\"https://aws.amazon.com/ai/generative-ai/\">generative AI</a> task. You can build on Amazon Nova to analyze complex documents and videos, understand charts and diagrams, generate engaging video content, and build sophisticated AI agents, from across a range of intelligence classes optimized for enterprise workloads.</p> \n<p>Whether you’re developing document processing applications that need to process images and text, creating marketing content at scale, or building AI assistants that can understand and act on visual information, Amazon Nova provides the intelligence and flexibility you need with two categories of models: understanding and creative content generation.</p> \n<p>Amazon Nova understanding models accept text, image, or video inputs to generate text output. Amazon creative content generation models accept text and image inputs to generate image or video output.</p> \n<p><span><strong>Understanding models: Text and visual intelligence<br /> </strong></span>The Amazon Nova models include three understanding models (with a fourth one coming soon) designed to meet different needs:</p> \n<p><strong>Amazon Nova Micro</strong> – A text-only model that delivers the lowest latency responses in the Amazon Nova family of models at a very low cost. With a context length of 128K tokens and optimized for speed and cost, Amazon Nova Micro excels at tasks such as text summarization, translation, content classification, interactive chat and brainstorming, and simple mathematical reasoning and coding. Amazon Nova Micro also supports customization on proprietary data using fine-tuning and model distillation to boost accuracy.</p> \n<p><strong>Amazon Nova Lite</strong> – A very low-cost multimodal model that is lightning fast for processing image, video, and text inputs to generate text output. Amazon Nova Lite can handle real-time customer interactions, document analysis, and visual question-answering tasks with high accuracy. The model processes inputs up to 300K tokens in length and can analyze multiple images or up to 30 minutes of video in a single request. Amazon Nova Lite also supports text and multimodal fine-tuning and can be optimized to deliver the best quality and costs for your use case with techniques such as model distillation.</p> \n<p><strong>Amazon Nova Pro</strong> – A highly capable multimodal model with the best combination of accuracy, speed, and cost for a wide range of tasks. Amazon Nova Pro is capable of processing up to 300K input tokens and sets new standards in multimodal intelligence and agentic workflows that require calling APIs and tools to complete complex workflows. It achieves state-of-the-art performance on key benchmarks including visual question answering (<a href=\"https://arxiv.org/abs/1904.08920\">TextVQA</a>) and video understanding (<a href=\"https://arxiv.org/abs/1904.03493\">VATEX</a>). Amazon Nova Pro demonstrates strong capabilities in processing both visual and textual information and excels at analyzing financial documents. With an input context of 300K tokens, it can process code bases with over fifteen thousand lines of code. Amazon Nova Pro also serves as a teacher model to distill custom variants of Amazon Nova Micro and Lite.</p> \n<p><strong>Amazon Nova Premier</strong> – Our most capable multimodal model for complex reasoning tasks and for use as the best teacher for distilling custom models. Amazon Nova Premier is still in training. We’re targeting availability in early 2025.</p> \n<p>Amazon Nova understanding models excel in <a href=\"https://aws.amazon.com/what-is/retrieval-augmented-generation/\">Retrieval-Augmented Generation (RAG)</a>, function calling, and agentic applications. This is reflected in Amazon Nova model scores in the <a href=\"https://arxiv.org/abs/2406.04744\">Comprehensive RAG Benchmark (CRAG)</a> evaluation, <a href=\"https://gorilla.cs.berkeley.edu/blogs/8_berkeley_function_calling_leaderboard.html\">Berkeley Function Calling Leaderboard (BFCL)</a>, <a href=\"https://arxiv.org/abs/2404.05955\">VisualWebBench</a>, and <a href=\"https://arxiv.org/abs/2306.06070\">Mind2Web</a>.</p> \n<p>What makes Amazon Nova particularly powerful for enterprises is its customization capabilities. Think of it as tailoring a suit: you start with a high-quality foundation and adjust it to fit your exact needs. You can fine-tune the models with text, image, and video to understand your industry’s terminology, align with your brand voice, and optimize for your specific use cases. For instance, a legal firm might customize Amazon Nova to better understand legal terminology and document structures.</p> \n<p>You can see the latest benchmark scores for these models on the <a href=\"http://aws.amazon.com/nova\">Amazon Nova product page</a>.</p> \n<p><span><strong>Creative content generation: Bringing concepts to life<br /> </strong></span>The Amazon Nova models also include two creative content generation models:</p> \n<p><strong>Amazon Nova Canvas</strong> – A state-of-the-art image generation model producing studio-quality images with precise control over style and content, including rich editing features such as inpainting, outpainting, and background removal. Amazon Nova Canvas excels on human evaluations and key benchmarks such as <a href=\"https://arxiv.org/abs/2303.11897#:~:text=We%20introduce%20TIFA%20(Text%2Dto,visual%20question%20answering%20(VQA).\">text-to-image faithfulness evaluation with question answering (TIFA)</a> and <a href=\"https://arxiv.org/abs/2304.05977\">ImageReward</a>.</p> \n<p><strong>Amazon Nova Reel</strong> – A state-of-the-art video generation model. Using Amazon Nova Reel, you can produce short videos through text prompts and images, control visual style and pacing, and generate professional-quality video content for marketing, advertising, and entertainment. Amazon Nova Reel outperforms existing models on human evaluations of video quality and video consistency.</p> \n<p>All Amazon Nova models include built-in safety controls and creative content generation models include watermarking capabilities to promote responsible AI use.</p> \n<p>Let’s see how these models work in practice for a few use cases.</p> \n<p><span><strong>Using Amazon Nova Pro for document analysis<br /> </strong></span>To demonstrate the capabilities of document analysis, I downloaded the <a href=\"https://docs.aws.amazon.com/decision-guides/latest/generative-ai-on-aws-how-to-choose/guide.html\">Choosing a generative AI service</a> decision guide in PDF format from the AWS documentation.</p> \n<p>First, I choose <strong>Model access</strong> in the <a href=\"https://console.aws.amazon.com/bedrock\">Amazon Bedrock console</a> navigation pane and request access to the new <strong>Amazon Nova</strong> models. Then, I choose <strong>Chat/text</strong> in the <strong>Playground</strong> section of the navigation pane and select the <strong>Amazon Nova Pro</strong> model. In the chat, I upload the decision guide PDF and ask:</p> \n<p><code>Write a summary of this doc in 100 words. Then, build a decision tree.</code></p> \n<p>The output follows my instructions producing a structured decision tree that gives me a glimpse of the document before reading it.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/13/summary-decision-tree.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/13/summary-decision-tree.png\" alt=\"Console screenshot.\" width=\"1726\" height=\"1250\" /></a></p> \n<p><span><strong>Using Amazon Nova Pro for video analysis<br /> </strong></span>To demonstrate video analysis, I prepared a video by joining two short clips (more on this in the next section):</p> \n<div>\n \n  \n \n</div> \n<p>This time, I use the <a href=\"https://aws.amazon.com/sdk-for-python/\">AWS SDK for Python (Boto3)</a> to invoke the Amazon Nova Pro model using the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference.html\">Amazon Bedrock Converse API</a> and analyze the video:</p> \n<pre><code>import boto3\n\nAWS_REGION = \"us-east-1\"\nMODEL_ID = \"amazon.nova-pro-v1:0\"\nVIDEO_FILE = \"the-sea.mp4\"\n\nbedrock_runtime = boto3.client(\"bedrock-runtime\", region_name=AWS_REGION)\nwith open(VIDEO_FILE, \"rb\") as f:\n    video = f.read()\n\nuser_message = \"Describe this video.\"\n\nmessages = [ { \"role\": \"user\", \"content\": [\n    {\"video\": {\"format\": \"mp4\", \"source\": {\"bytes\": video}}},\n    {\"text\": user_message}\n] } ]\n\nresponse = bedrock_runtime.converse(\n    modelId=MODEL_ID,\n    messages=messages,\n    inferenceConfig={\"temperature\": 0.0}\n )\n\nresponse_text = response[\"output\"][\"message\"][\"content\"][0][\"text\"]\nprint(response_text)</code></pre> \n<p>Amazon Nova Pro can analyze videos that are uploaded with the API (as in the previous code) or that are stored in an <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> bucket.</p> \n<p>In the script, I ask to describe the video. I run the script from the command line. Here’s the result:</p> \n<p><code>The video begins with a view of a rocky shore on the ocean, and then transitions to a close-up of a large seashell resting on a sandy beach.</code></p> \n<p>I can use a more detailed prompt to extract specific information from the video such as objects or text. Note that Amazon Nova currently does not process audio in a video.</p> \n<p><span><strong>Using Amazon Nova for video creation<br /> </strong></span>Now, let’s create a video using Amazon Nova Reel, starting from a text-only prompt and then providing a reference image.</p> \n<p>Because generating a video takes a few minutes, the Amazon Bedrock API introduced three new operations:</p> \n<p><strong>StartAsyncInvoke</strong> – To start an asynchronous invocation</p> \n<p><strong>GetAsyncInvoke</strong> – To get the current status of a specific asynchronous invocation</p> \n<p><strong>ListAsyncInvokes</strong> – To list the status of all asynchronous invocations with optional filters such as status or date</p> \n<p>Amazon Nova Reel supports camera control actions such as zooming or moving the camera. This Python script creates a video from this text prompt:</p> \n<p><code>Closeup of a large seashell in the sand. Gentle waves flow all around the shell. Sunset light. Camera zoom in very close.</code></p> \n<p>After the first invocation, the script periodically checks the status until the creation of the video has been completed. I pass a random seed to get a different result each time the code runs.</p> \n<pre><code>import random\nimport time\n\nimport boto3\n\nAWS_REGION = \"us-east-1\"\nMODEL_ID = \"amazon.nova-reel-v1:0\"\nSLEEP_TIME = 30\nS3_DESTINATION_BUCKET = \"&lt;BUCKET&gt;\"\n\nvideo_prompt = \"Closeup of a large seashell in the sand. Gentle waves flow all around the shell. Sunset light. Camera zoom in very close.\"\n\nbedrock_runtime = boto3.client(\"bedrock-runtime\", region_name=AWS_REGION)\nmodel_input = {\n    \"taskType\": \"TEXT_VIDEO\",\n    \"textToVideoParams\": {\"text\": video_prompt},\n    \"videoGenerationConfig\": {\n        \"durationSeconds\": 6,\n        \"fps\": 24,\n        \"dimension\": \"1280x720\",\n        \"seed\": random.randint(0, 2147483648)\n    }\n}\n\ninvocation = bedrock_runtime.start_async_invoke(\n    modelId=MODEL_ID,\n    modelInput=model_input,\n    outputDataConfig={\"s3OutputDataConfig\": {\"s3Uri\": f\"s3://{S3_DESTINATION_BUCKET}\"}}\n)\n\ninvocation_arn = invocation[\"invocationArn\"]\ns3_prefix = invocation_arn.split('/')[-1]\ns3_location = f\"s3://{S3_DESTINATION_BUCKET}/{s3_prefix}\"\nprint(f\"\\nS3 URI: {s3_location}\")\n\nwhile True:\n    response = bedrock_runtime.get_async_invoke(\n        invocationArn=invocation_arn\n    )\n    status = response[\"status\"]\n    print(f\"Status: {status}\")\n    if status != \"InProgress\":\n        break\n    time.sleep(SLEEP_TIME)\n\nif status == \"Completed\":\n    print(f\"\\nVideo is ready at {s3_location}/output.mp4\")\nelse:\n    print(f\"\\nVideo generation status: {status}\")</code></pre> \n<p>I run the script:</p> \n<pre><code>Status: InProgress\n. . .\nStatus: Completed\n\nVideo is ready at s3://BUCKET/PREFIX/output.mp4</code></pre> \n<p>After a few minutes, the script completes and prints the output <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> location. I download the output video using the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a>:</p> \n<div> \n <pre><code>aws s3 cp s3://BUCKET/PREFIX/output.mp4 ./output-from-text.mp4</code></pre> \n</div> \n<p>This is the resulting video. As requested, the camera zooms in on the subject.</p> \n<div>\n \n  \n \n</div> \n<p><span><strong>Using Amazon Nova Reel with a reference image<br /> </strong></span>To have better control over the creation of the video, I can provide Amazon Nova Reel a reference image such as the following:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/nova-reel-seascape.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/nova-reel-seascape.png\" alt=\"A seascape image.\" width=\"1280\" height=\"720\" /></a></p> \n<p>This script uses the reference image and a text prompt with a camera action (<code>drone view flying over a coastal landscape</code>) to create a video:</p> \n<pre><code>import base64\nimport random\nimport time\n\nimport boto3\n\nS3_DESTINATION_BUCKET = \"&lt;BUCKET&gt;\"\nAWS_REGION = \"us-east-1\"\nMODEL_ID = \"amazon.nova-reel-v1:0\"\nSLEEP_TIME = 30\ninput_image_path = \"seascape.png\"\nvideo_prompt = \"drone view flying over a coastal landscape\"\n\nbedrock_runtime = boto3.client(\"bedrock-runtime\", region_name=AWS_REGION)\n\n# Load the input image as a Base64 string.\nwith open(input_image_path, \"rb\") as f:\n    input_image_bytes = f.read()\n    input_image_base64 = base64.b64encode(input_image_bytes).decode(\"utf-8\")\n\nmodel_input = {\n    \"taskType\": \"TEXT_VIDEO\",\n    \"textToVideoParams\": {\n        \"text\": video_prompt,\n        \"images\": [{ \"format\": \"png\", \"source\": { \"bytes\": input_image_base64 } }]\n        },\n    \"videoGenerationConfig\": {\n        \"durationSeconds\": 6,\n        \"fps\": 24,\n        \"dimension\": \"1280x720\",\n        \"seed\": random.randint(0, 2147483648)\n    }\n}\n\ninvocation = bedrock_runtime.start_async_invoke(\n    modelId=MODEL_ID,\n    modelInput=model_input,\n    outputDataConfig={\"s3OutputDataConfig\": {\"s3Uri\": f\"s3://{S3_DESTINATION_BUCKET}\"}}\n)\n\ninvocation_arn = invocation[\"invocationArn\"]\ns3_prefix = invocation_arn.split('/')[-1]\ns3_location = f\"s3://{S3_DESTINATION_BUCKET}/{s3_prefix}\"\n\nprint(f\"\\nS3 URI: {s3_location}\")\n\nwhile True:\n    response = bedrock_runtime.get_async_invoke(\n        invocationArn=invocation_arn\n    )\n    status = response[\"status\"]\n    print(f\"Status: {status}\")\n    if status != \"InProgress\":\n        break\n    time.sleep(SLEEP_TIME)\nif status == \"Completed\":\n    print(f\"\\nVideo is ready at {s3_location}/output.mp4\")\nelse:\n    print(f\"\\nVideo generation status: {status}\")</code></pre> \n<p>Again, I download the output using the AWS CLI:</p> \n<div> \n <pre><code>aws s3 cp s3://BUCKET/PREFIX/output.mp4 ./output-from-image.mp4</code></pre> \n</div> \n<p>This is the resulting video. The camera starts from the reference image and moves forward.</p> \n<div>\n \n  \n \n</div> \n<p><span><strong>Building AI responsibly<br /> </strong></span>Amazon Nova models are built with a focus on customer safety, security, and trust throughout the model development stages, offering you peace of mind as well as an adequate level of control to enable your unique use cases.</p> \n<p>We’ve built in comprehensive safety features and content moderation capabilities, giving you the controls you need to use AI responsibly. Every generated image and video include digital watermarking.</p> \n<p>The Amazon Nova foundation models are built with protections that match its increased capabilities. Amazon Nova extends our safety measures to combat the spread of misinformation, child sexual abuse material (CSAM), and chemical, biological, radiological, or nuclear (CBRN) risks.</p> \n<p><span><strong>Things to know<br /> </strong></span><a href=\"http://aws.amazon.com/nova\">Amazon Nova</a> models are available in <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a> in the US East (N. Virginia) <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\">AWS region</a>. Amazon Nova Micro, Lite, and Pro are also available in the US West (Oregon), and US East (Ohio) regions via <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html\">cross-Region inference</a>. As usual with <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a>, the pricing follows a pay-as-you-go model. For more information, see <a href=\"https://aws.amazon.com/bedrock/pricing/\">Amazon Bedrock pricing</a>.</p> \n<p>The new generation of Amazon Nova understanding models speaks your language. These models understand and generate content in over 200 languages, with particularly strong capabilities in English, German, Spanish, French, Italian, Japanese, Korean, Arabic, Simplified Chinese, Russian, Hindi, Portuguese, Dutch, Turkish, and Hebrew. This means you can build truly global applications without worrying about language barriers or maintaining separate models for different regions. Amazon Nova models for creative content generation support English prompts.</p> \n<p>As you explore Amazon Nova, you’ll discover its ability to handle increasingly complex tasks. You can use these models to process lengthy documents up to 300K tokens, analyze multiple images in a single request, understand up to 30 minutes of video content, and generate images and videos at scale from natural language. This makes these models suitable for a variety of business use cases, from quick customer service interactions to deep analysis of corporate documentation and asset creation for advertising, ecommerce, and social media applications.</p> \n<p>Integration with Amazon Bedrock makes deployment and scaling straightforward. You can leverage features like <a href=\"https://aws.amazon.com/bedrock/knowledge-bases/\">Amazon Bedrock Knowledge Bases</a> to enhance your model with proprietary information, use <a href=\"https://aws.amazon.com/bedrock/agents/\">Amazon Bedrock Agents</a> to automate complex workflows, and implement <a href=\"https://aws.amazon.com/bedrock/guardrails/\">Amazon Bedrock Guardrails</a> to promote responsible AI use. The platform supports real-time streaming for interactive applications, batch processing for high-volume workloads, and detailed monitoring to help you optimize performance.</p> \n<p>Ready to start building with Amazon Nova? Give the new models a try in the <a href=\"https://console.aws.amazon.com/bedrock\">Amazon Bedrock console</a> today, visit the Amazon Nova models section of the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html\">Amazon Bedrock documentation</a>, and send feedback to <a href=\"https://repost.aws/tags/TAQeKlaPaNRQ2tWB6P7KrMag/amazon-bedrock\">AWS re:Post for Amazon Bedrock</a>. You can find deep-dive technical content and discover how our Builder communities are using Amazon Bedrock at <a href=\"https://community.aws/\">community.aws</a>. Let us know what you build with these new models!</p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"93431753fcbda2281dc8b17b966a1de02b21a8933c1bdfec7cc4354d5e6bfa76","category":"Tech"}