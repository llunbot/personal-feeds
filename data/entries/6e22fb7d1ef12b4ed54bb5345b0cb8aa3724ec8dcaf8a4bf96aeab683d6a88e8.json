{"title":"[AWS-IoT] Device Provisioning สำหรับสเกลอุปกรณ์หลายๆตัว ภาค Hardware บ้าง","link":"https://thanapon.info/aws-iot-device-provisioning-2/?utm_source=rss&utm_medium=rss&utm_campaign=aws-iot-device-provisioning-2","date":1659002195000,"content":"<p>สวัสดีครับ มาต่อจาก Blog ก่อนหน้านี้ที่ปล่อยลอยไว้นานหลายเดือนเลย หากใครจำไม่ได้แล้วว่า เอ๊ะ! ทำอะไรไปบ้างเนี้ยแนะนำให้ย้อนกลับไปดูได้นะครับ</p>\n\n\n\n<blockquote><p><a href=\"https://thanapon.info/aws-iot-device-provisioning-1/\" target=\"_blank\">[AWS-IoT] Device Provisioning สำหรับสเกลอุปกรณ์หลายๆตัว-1</a></p><cite>Device Provision ภาคแรกเป็นการ Config AWS IoT Core ให้พร้อมสำหรับการ Scale อุปกรณ์หลายๆตัว</cite></blockquote>\n\n\n\n<p>ส่วนใครยังไม่เข้าใจ Sequence diagram ของ การ Provisioning ลองกลับไปอ่านดูนะครับใน Blog นี้ ผมจะอธิบายโค๊ดแบบ คร่าวๆให้ฟังนะครับ</p>\n\n\n\n<h4>เริ่มกันเลยดีกว่า</h4>\n\n\n\n<p>ด้านล่างนี้จะเป็นโค๊ดลองไป Clone ลงมาเล่นกันได้นะครับ</p>\n\n\n\n<blockquote><p><a href=\"https://github.com/toygame\">toygame</a>/<strong><a href=\"https://github.com/toygame/aws-iot-device-provisioning-esp32\">aws-iot-device-provisioning-esp32</a></strong></p><cite>AWS IoT device provisioning with Fleet provisioning templates, The hardware is ESP32 that built-in a WiFi and Bluetooth module.</cite></blockquote>\n\n\n\n<p>Clone repo ลงมาในเครื่องแล้วอย่าลืมเปลี่ยนส่วนของ <mark>Configuration นะครับจะมี WiFi SSID/Password กับ AWS IoT Endpoint อีกอย่างที่ขาดไม่ได้คือ Claim Certificate ให้เราไปอัพเดทในโฟลเดอร์ certs ด้วย</mark></p>\n\n\n\n<div><pre><code>#define WIFI_SSID \"xxxxxxx\"\n#define WIFI_PASSWORD \"xxxxxxxx\"\n#define AWS_IOT_ENDPOINT \"xxxxxxx.iot.ap-southeast-1.amazonaws.com\"</code></pre></div>\n\n\n\n<p>ลอง Upload ดูนะครับผมเขียน <mark>Makefile ไว้ให้ แต่ก่อนใช้งานจำเป็นต้องลง PlatformIO CLI ก่อนน้าา เดี๋ยวแตก!!! </mark>วิธีใช้ Makefile ก็</p>\n\n\n\n<div><pre><code>make</code></pre></div>\n\n\n\n<p>หลังจากที่ตัวโค๊ด อัพโหลดเสร็จแล้วเราจะเห็นว่ามันจะพยายามเชื่อมต่อไปที่ WiFi Router ของเราก่อน จากนั้นมันจะเข้าไปทำการ Provisioning ตัวเองต่อเลย จนเสร็จแล้วก็จะได้ข้อความ <mark>“Register things successfully”</mark> ตามภาพปลากรอบ</p>\n\n\n\n<div><figure><img loading=\"lazy\" width=\"1024\" height=\"473\" src=\"https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.03.56-1024x473.png\" alt srcset=\"https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.03.56-1024x473.png 1024w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.03.56-300x139.png 300w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.03.56-768x355.png 768w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.03.56-600x277.png 600w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.03.56.png 1339w\" /></figure></div>\n\n\n\n<p>Restart เสร็จแล้ว สเต็ปต่อไปอุปกรณ์จะเข้าไปอ่าน ไฟล์ <mark>aws.json</mark> ที่เราเก็บไว้ใน FS เพื่อเข้าไปอ่าน Device Certificate กับ Private Key ที่ถูกเก็บไว้ เพื่อเอามาใช้สำหรับเชื่อมต่อไปยัง AWS IoT Core ซึ่งมันใช้การ Authen แบบ X.509 Certificate</p>\n\n\n\n<div><figure><img loading=\"lazy\" width=\"1024\" height=\"186\" src=\"https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.04.11-1-1024x186.png\" alt srcset=\"https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.04.11-1-1024x186.png 1024w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.04.11-1-300x54.png 300w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.04.11-1-768x139.png 768w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.04.11-1-600x109.png 600w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.04.11-1.png 1339w\" /></figure></div>\n\n\n\n<p>ลองเช็คดูว่ามีชื่ออุปกรณ์ของเราใช้ AWS IoT Console ไหม ถ้ามีก็ถือว่าผ่าน คุณได้ไปต่อ!!!!</p>\n\n\n\n<div><figure><img loading=\"lazy\" width=\"1024\" height=\"506\" src=\"https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.04.21-2-1024x506.png\" alt srcset=\"https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.04.21-2-1024x506.png 1024w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.04.21-2-300x148.png 300w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.04.21-2-768x379.png 768w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.04.21-2-1536x759.png 1536w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.04.21-2-2048x1012.png 2048w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.04.21-2-600x296.png 600w\" /></figure></div>\n\n\n\n<p>ทดสอบ Publish MQTT ลงมาที่อุปกรณ์หน่อยสิ</p>\n\n\n\n<div><figure><img loading=\"lazy\" width=\"1024\" height=\"566\" src=\"https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.05.00-1-1024x566.png\" alt srcset=\"https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.05.00-1-1024x566.png 1024w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.05.00-1-300x166.png 300w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.05.00-1-768x424.png 768w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.05.00-1-1536x849.png 1536w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.05.00-1-2048x1132.png 2048w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.05.00-1-600x332.png 600w\" /></figure></div>\n\n\n\n<p>Okay สามารถรับ MQTT Packet จาก AWS IoT Core ได้!!!</p>\n\n\n\n<div><figure><img loading=\"lazy\" width=\"1024\" height=\"129\" src=\"https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.05.10-1024x129.png\" alt srcset=\"https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.05.10-1024x129.png 1024w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.05.10-300x38.png 300w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.05.10-768x97.png 768w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.05.10-600x75.png 600w, https://thanapon.info/wp-content/uploads/2022/07/Screen-Shot-2565-07-28-at-14.05.10.png 1122w\" /></figure></div>\n\n\n\n<h4>อธิบาย Coding สักนิดละกัน</h4>\n\n\n\n<ul><li>หลังจากเสียบสายไฟเข้าอุปกรณ์ปุ๊ป มันก็จะทำพยายามเชื่อมต่อเข้าไป WiFi Router ของเราก่อนอันนี้ก็ไม่มีอะไร basicๆ ครับ</li></ul>\n\n\n\n<div><pre><code>Serial.begin(115200);\nWiFi.mode(WIFI_STA);\nWiFi.begin(WIFI_SSID, WIFI_PASSWORD);\nSerial.print(\"Connecting to WiFi..\");\nwhile (WiFi.status() != WL_CONNECTED)\n{\n  delay(1000);\n  Serial.print(\".\");\n}\nSerial.println(\"Connected.\");</code></pre></div>\n\n\n\n<ul><li>จากนั้นจะเริ่มเปิดไฟล์ aws.json ที่อยู่ใน Filesystem เสร็จแล้วเราก็ได้จะได้ instance ของ File ออกมา</li></ul>\n\n\n\n<div><pre><code>if (!SPIFFS.begin(true))\n{\n  Serial.println(\"An Error has occurred while mounting SPIFFS\");\n  return;\n}\n// Read AWS config file.\nFile file = SPIFFS.open(\"/aws.json\", \"r\");\nif (!file)\n{\n  Serial.println(\"Failed to open file for reading\");\n  return;\n}</code></pre></div>\n\n\n\n<ul><li>เมื่อได้ข้อมูลใน File ออกมาแล้วก็ Parse มันออกมาให้อยู่ในรูป JSON เพื่อให้ง่ายต่อการอ่านกับการใช้งาน</li><li>เสร็จแล้วก็เช็คเงื่อนไข ถ้า JSON มี Key ที่ชื่อ certificatePem ก็ให้มันเชื่อมต่อไปยัง AWS IoT Core ได้เลยส่วนถ้าไม่เจอก็ไล่ให้มันไป Provisioning</li></ul>\n\n\n\n<div><pre><code>DynamicJsonDocument cert(4000);\nauto deserializeError = deserializeJson(cert, file);\nif (!deserializeError)\n{\n  if (cert[\"certificatePem\"])\n  {\n    connectToAWS(cert);\n  }\n}\nelse\n{\n  createCertificate();\n}\nfile.close();</code></pre></div>\n\n\n\n<h4>ขั้นตอนการ Provisioning </h4>\n\n\n\n<ul><li>ใช้ Claim certificate ในการเชื่อมต่อไปที่ AWS IoT Core ก่อน</li></ul>\n\n\n\n<div><pre><code>net.setCACert(AWS_CERT_CA);\nnet.setCertificate(AWS_CERT_CRT);\nnet.setPrivateKey(AWS_CERT_PRIVATE);\nclient.setServer(AWS_IOT_ENDPOINT, 8883);\n// Create a message handler\nclient.setCallback(messageHandler);\n// Set buffer size for receive a certificate.\nclient.setBufferSize(4000);\nSerial.print(\"Connecting to AWS IOT.\");\nclient.connect(THING_GROUP);</code></pre></div>\n\n\n\n<ul><li>Subscription MQTT Topic สำหรับรับ Response พวก certificate กลับมา สุดท้ายก็ทำการ Publish Payload ว่างๆ ไปยัง Topic <mark>“$aws/certificates/create/json”</mark> เพื่อบอกว่าเราจะ Provision อุปกรณ์แล้วนะก็เป็นอันจบ</li></ul>\n\n\n\n<div><pre><code>  client.subscribe(\"$aws/certificates/create/json/accepted\");\n  client.subscribe(\"$aws/certificates/create/json/rejected\");\n  client.subscribe(\"$aws/provisioning-templates/esp32_fleet_prov_template/provision/json/accepted\");\n  client.subscribe(\"$aws/provisioning-templates/esp32_fleet_prov_template/provision/json/rejected\");\n  Serial.println(\"Create certificate..\");\n  client.publish(\"$aws/certificates/create/json\", \"\");</code></pre></div>\n\n\n\n<h4>Handle MQTT Payload กันบ้าง</h4>\n\n\n\n<ul><li>ถ้า Topic <mark>“$aws/certificates/create/json/accepted”</mark> เราก็โยนเข้าไปที่ Function <em><strong>saveCertificateToFS</strong></em> กับ <strong><em>registerThing</em></strong></li></ul>\n\n\n\n<blockquote><p><em><strong>saveCertificateToFS</strong></em>: ตัว Function นี้จะทำการบันทึก certificatePem กับ privateKey ลงใน Filesystem</p><p><strong><em>registerThing</em></strong>: จะ Publish ไปที่ Topic <mark>“$aws/provisioning-templates/esp32_fleet_prov_template/provision/json”</mark> ซึ่ง Payload ที่จะส่งไปจะมี certificateOwnershipToken กับ parameters SerialNumber ไปด้วยเพื่อใช้เป็นชื่อของอุปกรณ์</p></blockquote>\n\n\n\n<ul><li>ส่วนถ้าเป็น Topic <mark>“$aws/provisioning-templates/esp32_fleet_prov_template/provision/json/accepted”</mark> ก็แสดงว่า AWS IoT Core register อุปกรณ์เราเรียบร้อยแล้ว ทีนี่เราก็สามารถใช้ Certificate ตัวใหม่ได้เลย</li></ul>\n\n\n\n<div><pre><code>DynamicJsonDocument doc(length);\ndeserializeJson(doc, payload);\nif (topic == \"$aws/certificates/create/json/accepted\")\n{\n  saveCertificateToFS(doc);\n  registerThing(doc);\n}\nelse if (topic == \"$aws/provisioning-templates/esp32_fleet_prov_template/provision/json/accepted\")\n{\n  Serial.println(\"Register things successfully.\");\n  Serial.println(\"Restart in 5s.\");\n  sleep(5);\n  ESP.restart();\n}</code></pre></div>\n\n\n\n<p>เป็นยังไงกันบ้างครับสำหรับการ Scale อุปกรณ์หลายๆตัว ถ้าให้มานั่ง Generate Certificate ทุกครั้งคงจะเป็นอะไรที่ลำบากมากๆกันเลยทีเดียว ยิ่งถ้าคิดถึงว่าจะ Scale อุปกรณ์สัก 1000 ตัวแล้วน่าจะใช้เวลาพอสมควรกันเลย 5555+ หวังว่าการใช้ Device Provisioning แบบ Claim Certificate จะช่วยท่านได้บ้างนะครับ ตอนหน้าถ้ามีเวลาเดี๋ยวมานั่งเขียนว่าเราจะ Provision ผ่าน Greengrass[Edge] กันยังไงดี ซึ่งผมใช้วิธี <strong><a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#trusted-user\" target=\"_blank\">Provisioning by trusted user</a></strong> แทน สำหรับวันนี้ขอบคุณและสวัสดีครับ</p>\n\n\n\n<div><figure><img src=\"https://i0.wp.com/enterpriseiotinsights.com/wp-content/uploads/2017/06/green-grass-1409668389pfD.jpg?resize=750%2C375&amp;ssl=1\" alt=\"Twelve companies to embed AWS Greengrass - Enterprise IoT Insights\" /></figure></div>\n\n\n\n<p></p><p>The post <a href=\"https://thanapon.info/aws-iot-device-provisioning-2/\">[AWS-IoT] Device Provisioning สำหรับสเกลอุปกรณ์หลายๆตัว ภาค Hardware บ้าง</a> first appeared on <a href=\"https://thanapon.info\">Thanapon</a>.</p>","author":"thanapon.tap","siteTitle":"Thanapon","siteHash":"6a039c2f54d76e4c49227d80968f2a30de5427cc57525c047c383ea3563cde5f","entryHash":"6e22fb7d1ef12b4ed54bb5345b0cb8aa3724ec8dcaf8a4bf96aeab683d6a88e8","category":"Thai"}