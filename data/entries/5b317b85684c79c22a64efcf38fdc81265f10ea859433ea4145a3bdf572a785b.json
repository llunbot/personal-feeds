{"title":"Getting Started With Neon Branching","link":"https://smashingmagazine.com/2023/09/getting-started-with-neon-branching/","date":1695722400000,"content":"<p>This article is a sponsored by <a href=\"https://bit.ly/46cEgX1\">Neon Tech</a></p>\n<p>Branching off to make code changes is a tried and tested approach to software development, but why should database development be any different? Well, <a href=\"https://bit.ly/46cEgX1\">branching with Neon</a> allows you to make changes to your database without affecting the production environment. If you‚Äôre familiar with <a href=\"https://git-scm.com/\">Git</a>, you‚Äôll feel right at home. </p>\n<p>For demonstration purposes, and to explain how branching works, I‚Äôll use a typical ‚Äúcontact us‚Äù form and make a ‚Äúfictional‚Äù change. </p>\n<p><img src=\"https://files.smashing.media/articles/neon-branching/contact-us-form.png\" /></p>\n<p>The form currently submits the following fields.</p>\n<ul>\n<li><code>name</code></li>\n<li><code>email_address</code></li>\n<li><code>company_website</code></li>\n<li><code>company_size</code></li>\n<li><code>message</code></li>\n</ul>\n<p>The form works by sending the form data using a client-side request to a <a href=\"https://vercel.com/features/edge-functions\">Vercel Edge Function</a>, which in turn securely connects to a <a href=\"https://bit.ly/46cEgX1\">Neon Serverless Postgres database</a>. </p>\n<p>Here‚Äôs a snippet of the client-side fetch request.</p>\n<pre><code>const handleSubmit = async (event) =&gt; {\n  event.preventDefault();\n\n  const data = Object.fromEntries(\n    new FormData(event.currentTarget).entries()\n  );\n\n  try {\n    await fetch('/api/submit', {\n      method: 'POST',\n      body: JSON.stringify({ data }),\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n</code></pre>\n\n<p>And here‚Äôs a code snippet of the Edge Function that destructures the form values from the request body and <code>INSERT</code>s them into a table named <code>contact_us</code>.</p>\n<pre><code>import { neon } from '@neondatabase/serverless';\n\nexport default async function handler(req) {\n  const {\n    data: { name, email_address, company_website, company_size, message },\n  } = await new Response(req.body).json();\n\n  const sql = neon(process.env.DATABASE_URL);\n\n  try {\n    await sql`INSERT INTO contact_us \n        (name, email_address, company_website, company_size, message)\n            VALUES(\n      ${name},\n      ${email_address},\n      ${company_website},\n      ${company_size},\n      ${message}\n        );`;\n\n    return Response.json({\n      message: 'A Ok!',\n    });\n  } catch (error) {\n    return Response.json({\n      message: 'Error',\n    });\n  }\n}\n\nexport const config = {\n  runtime: 'edge',\n};\n</code></pre>\n\n<p>The change I‚Äôd like to make will happen ‚Äúbehind the scenes‚Äù, and along with information entered by the user, I also want to capture and store the geographical location of where in the world the form was submitted. </p>\n<p>To do this I‚Äôm going to use Vercel‚Äôs <a href=\"https://vercel.com/docs/functions/edge-functions/vercel-edge-package#geolocation\">geolocation helper function</a> from the <a href=\"https://vercel.com/docs/functions/edge-functions/vercel-edge-package#\">@vercel/edge</a> package. The changes I‚Äôll be making will affect both the Edge Function and the database table schema. </p>\n<p>I don‚Äôt want to change the table schema on the live production database until I‚Äôve tested it all works correctly, and thanks to branching, I don‚Äôt have to. </p>\n<p>Here‚Äôs how I‚Äôd go about making a change of this nature.</p>\nCreating a branch with Neon\n<p>Neon has a super cool browser console (just look at it! üòç), and all database changes can be made, and tested in the browser, no messing around with a dweeby-looking terminal window! </p>\n<p><img src=\"https://files.smashing.media/articles/neon-branching/1-before-the-branch.jpg\" /></p>\n<ol>\n<li>The project is called <code>branching-sample</code>.</li>\n<li>The primary branch name is <code>main</code>.</li>\n<li>To create a branch, click this button.</li>\n</ol>\n<p>Clicking ‚ÄúCreate branch‚Äù will take you to the next screen where I‚Äôll configure the new branch.</p>\n<p><img src=\"https://files.smashing.media/articles/neon-branching/2-create-branch.jpg\" /></p>\n<ol>\n<li>This will be the name of the new branch. Typically I‚Äôll name the branch the same as the Git branch. (I‚Äôll show you that shortly).</li>\n<li>This is the parent branch that I want to ‚Äúbranch off‚Äù from. Normally it‚Äôs always going to be main, but in some cases, I might branch off from another branch. </li>\n<li><p>These are the branch configuration options. For this demonstration, I‚Äôll be branching using the <strong>Head</strong> option. There are a number of reasons why branching from a specific point in <strong>Time</strong>, or <strong>LSN</strong> are more suitable. E.g, In cases where you might be performing a backup, or debugging an issue and want to see ‚Äúwhen things went wrong‚Äù.  </p>\n<ol>\n<li><strong>Head</strong>: Creates a branch with data up to the current point in time.</li>\n<li><strong>Time</strong>: Creates a branch with data up to the specified date and time.</li>\n<li><strong>LSN</strong>:  Creates a branch with data up to the specified Log Sequence Number (LSN)</li>\n</ol>\n</li>\n<li>In order to test the changes I‚Äôll be making in the Edge Function (which I‚Äôll explain in a moment), I‚Äôll want to ensure I‚Äôm inserting data correctly. By creating a compute endpoint with the branch, I can do this without worrying that I‚Äôll be messing up the production database! </li>\n<li>A button that will create the new branch</li>\n</ol>\n<p>Clicking ‚ÄúCreate the branch‚Äù will take you to the next screen.</p>\n<p><img src=\"https://files.smashing.media/articles/neon-branching/3-new-endpoint.jpg\" /></p>\n<p>This is where things get really, really cool! </p>\n<ol>\n<li>This is a new connection string for an entirely new database, and it was set up almost instantly and contains ‚Äúreal‚Äù data! A key point to communicate is that any data pushed to this branch <strong>won‚Äôt</strong> appear in the production environment, but this ‚Äúcopy‚Äù of the database will be identical to the production database, in line with where you branched off from, in my case, Head. </li>\n<li>The copy button allows you to quickly copy the connection string.</li>\n</ol>\nAdd the branch connection string to your local development environment.\n<p>Using the handy little ‚Äúcopy‚Äù button, I can copy the new connection string and add it to my <code>.env</code> file.</p>\n<p><img src=\"https://files.smashing.media/articles/neon-branching/4-env-vars.jpg\" /></p>\n<ol>\n<li>This is just my preferred approach of course but, in my <code>.env</code> file, I comment out the production database connection string, and add a new variable using the same name of <code>DATABASE_URL</code>. I then add a comment above it with the name of the branch I used in the Neon console. And for what it‚Äôs worth, my Git branch is also named the same way.</li>\n</ol>\n<p>I‚Äôve found this to be super helpful when I have multiple branches on the go at the same time. That one little comment above the connection string helps me identify which branch it relates to in the Neon console. </p>\nSwitch branches in the Neon console\n<p>Before going too much further I like to double check I‚Äôm viewing the correct branch in the Neon console. If you‚Äôve followed the steps above you should be able to see your new branch when selecting ‚ÄúBranches‚Äù from the navigation.</p>\n<p><img src=\"https://files.smashing.media/articles/neon-branching/5-branches-overview.jpg\" /></p>\n<ol>\n<li>Yep, this is the new branch I created.</li>\n</ol>\n<p>Clicking the branch name will take you to the next screen.</p>\n<p><img src=\"https://files.smashing.media/articles/neon-branching/6-branch.jpg\" /></p>\n<ol>\n<li>From the SQL Editor, you can also switch between branches which makes it easy to run queries against different branches. </li>\n</ol>\nAlter the database table schema\n<p>Before making any changes to the code I prepare the database and test it all works by running SQL commands directly in Neon‚Äôs SQL Editor.</p>\n<h3>Show the current table schema</h3>\n<p>To work out what the current schema for the <code>contact_us</code> table looks like, I can navigate to ‚ÄúTables‚Äù in the navigation and see the schema for the table.</p>\n<p><img src=\"https://files.smashing.media/articles/neon-branching/7-schema-before.jpg\" /></p>\n<ol>\n<li>Showing the branch you‚Äôre currently on.</li>\n<li>The schema for the <code>contact_us</code> table.</li>\n</ol>\n<p>I know the change I want to make will require that I add two new columns which will store geolocation data. The two new column names will be as follows.</p>\n<ol>\n<li>country_code </li>\n<li>city</li>\n</ol>\n<h3>ALTER the table</h3>\n<p>To add the new columns I use the following SQL command.</p>\n<pre><code>ALTER TABLE contact_us \nADD COLUMN country_code VARCHAR,\nADD COLUMN city VARCHAR;\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/neon-branching/8-alter.jpg\" /></p>\n<ol>\n<li>Using the <code>ALTER</code> <code>TABLE</code> command I‚Äôm adding both the above-named columns and giving them a data type of <code>VARCHAR</code>.</li>\n</ol>\n<p>To double-check check the changes were made correctly I can head back over to ‚ÄúTables‚Äù and take a look at the table schema again.</p>\n<p><img src=\"https://files.smashing.media/articles/neon-branching/9-schema-after.jpg\" /></p>\n<ol>\n<li>Showing the branch you‚Äôre currently on.</li>\n<li>The <code>city</code> and <code>country_code</code> columns have been added to the schema for the <code>contact_us</code> table.</li>\n</ol>\n<p>Now that I know the table is configured correctly, I‚Äôll head back to the ‚ÄúSQL Editor‚Äù and run a quick <code>INSERT</code> to check there are no errors.</p>\n<p><img src=\"https://files.smashing.media/articles/neon-branching/10-test-insert.jpg\" /></p>\n<ol>\n<li><code>INSERT</code> statement to add a row which includes values for the new <code>country_code</code> and <code>city</code> column.</li>\n<li>Confirmation the request was successful.</li>\n</ol>\n<p>If I <code>SELECT * FROM contact_us</code>, I‚Äôll see the row I added will contain the <code>country_code</code> and <code>city</code> columns.</p>\n<p><img src=\"https://files.smashing.media/articles/neon-branching/11-select-all-after.jpg\" /></p>\n<ol>\n<li>A new row has been added with the correct values for <code>country_code</code> and <code>city</code>.</li>\n</ol>\n<p>This test data will only be added to the branch, not the production environment, so you can safely run as many tests as you like without polluting the ‚Äúreal‚Äù data.</p>\n<p>With the change confirmed to be working, I can now switch back to the <code>main</code> branch, and run the <code>ALTER</code> command from earlier. </p>\n<p><strong>This will apply the changes to the production database!</strong></p>\n<pre><code>ALTER TABLE contact_us \nADD COLUMN country_code VARCHAR,\nADD COLUMN city VARCHAR;\n</code></pre>\n\n<p>I can double, double check this worked by going to ‚ÄúTables‚Äù again in the console. If all is ok, I can safely delete the development branch: <code>feat/geolocation-data</code> and move on to making the required changes to my Edge Function üéâ</p>\nInstall @vercel/edge\n<p>The values I‚Äôll be adding to the <code>INSERT</code> statement can be extracted from incoming requests to an Edge Function. To access these values I'll use the <a href=\"https://vercel.com/docs/functions/edge-functions/vercel-edge-package#geolocation\">geolocation</a> helper function from the <code>@vercel/edge package</code>. </p>\n<p>To use this package, I‚Äôll first need to install it. </p>\n<pre><code>npm install @vercel/edge\n</code></pre>\n\n<p>I can then use it in my Edge Function. Here‚Äôs a diff of the change. You can <a href=\"https://github.com/PaulieScanlon/neon-branching-sample/pull/1/files\">see the full diff for the PR on my GitHub here</a>.</p>\n<pre><code>import { neon } from '@neondatabase/serverless';\n+ import { geolocation } from '@vercel/edge';\n\nexport default async function handler(req) {\n  const {\n    data: { name, email_address, company_website, company_size, message },\n  } = await new Response(req.body).json();\n\n+  const { country, city } = geolocation(req);\n\n  const sql = neon(process.env.DATABASE_URL);\n\n  try {\n    await sql`INSERT INTO contact_us (\n        name,\n        email_address,\n        company_website,\n        company_size,\n        message,\n+       country_code,\n+       city\n       )\n     VALUES(\n       ${name},\n       ${email_address},\n       ${company_website},\n       ${company_size},\n       ${message},\n+      ${country},\n+      ${city}\n      );\n     `;\n\n    return Response.json({\n      message: 'A Ok!',\n    });\n  } catch (error) {\n    return Response.json({\n      message: 'Error',\n    });\n  }\n}\n\nexport const config = {\n  runtime: 'edge',\n};\n</code></pre>\n\n<p>One snag with this package when testing locally is, both the <code>country</code> and <code>city</code> will be <code>null</code>. The <code>geolocation</code> function will only return actual values when the Edge Function has been deployed. ‚òùÔ∏è</p>\n<p>And that‚Äôs it, brrrrranches! </p>\n<p>Branches are a really nice (and safe) way to configure or reconfigure your database without fear of screwing up the production database, and in my experience, branches can really help speed up development time, and it doesn‚Äôt matter how many test  <code>INSERT</code>s I run, test data will always remain on the branch and will never affect the production environment.  </p>\n<p>If you‚Äôd like to try Neon today, pop over here and sign up: <a href=\"https://bit.ly/46cEgX1\">neon.tech</a>, you might also want to sneak a peak at our getting started guides: </p>\n<ul>\n<li><a href=\"https://bit.ly/46cEgX1\">Sign up</a></li>\n<li><a href=\"https://bit.ly/3Ry0gaY\">Create your first project</a></li>\n<li><a href=\"https://bit.ly/3LH6KR8\">Query with Neon‚Äôs SQL editor</a></li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine ‚Äî For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"5b317b85684c79c22a64efcf38fdc81265f10ea859433ea4145a3bdf572a785b","category":"Tech"}