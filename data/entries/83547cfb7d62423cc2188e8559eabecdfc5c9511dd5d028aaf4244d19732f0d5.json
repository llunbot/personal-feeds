{"title":"Access Google Cloud from HCP Terraform with workload identity","link":"https://www.hashicorp.com/blog/access-google-cloud-from-hcp-terraform-with-workload-identity","date":1714633200000,"content":"<p>Storing long-lived service account keys in HCP Terraform poses a significant security risk. If compromised, these account keys could give an attacker access to your Google Cloud environment. Not only is leaking the key a risk, but many organizations have a policy to block creation of such keys. Fortunately, in many cases, you can authenticate with more secure alternatives to service account keys. One such alternative is <a href=\"https://cloud.google.com/iam/docs/workload-identity-federation\">workload identity federation</a>, which uses identity and access management (IAM) to grant external identities (such as HCP Terraform) the ability to <a href=\"https://cloud.google.com/docs/authentication/use-service-account-impersonation\">impersonate</a> service accounts.</p>\n\n<p>HCP Terraform’s <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials\">dynamic provider credentials</a> allow Terraform runs to impersonate a service account through native OpenID Connect (OIDC) integration and obtain a short-lived OAuth 2.0 access token for each run. This short-lived access token lets you call any Google Cloud APIs that the service account has access to at runtime, making your HCP Terraform runs much more secure.</p>\n\n<p>Using HashiCorp Terraform, you have the ability to create a Google Cloud workload identity <a href=\"https://cloud.google.com/iam/docs/workload-identity-federation#pools\">pool</a> and <a href=\"https://cloud.google.com/iam/docs/workload-identity-federation#providers\">provider</a>, which HCP Terraform uses to request a federated token. This token is then passed to the Google Terraform provider, which impersonates a service account to obtain temporary credentials to plan or apply Terraform.</p>\n<img src=\"https://www.datocms-assets.com/2885/1714493604-gcp-hcp-tf-access.png\" alt=\"diagram\" /><p>The above diagram illustrates the authentication sequence for accessing Google Cloud using dynamic provider credentials and workload identity federation.</p>\n\n<p>Below is an example to configure workload identity federation in Google Cloud. This approach assumes you have a pre-existing method to authenticate with your Google Cloud project. If you don’t, you can create the temporary service account outlined below. </p>\n\n<h2>Set up the workload identity pool and provider</h2>\n\n<p>To get started, create a temporary service account along with a JSON key. Safely store this key <a href=\"https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#using-terraform-cloud\">within your HCP Terraform workspace variables</a> to grant temporary access to your Google Cloud project. This less-secure access method will only be used for initial setup. Remember to delete the temporary service account key once you’ve transitioned to workload identity federation using the steps below.</p>\n\n<p>To set up the HCP Terraform pool and provider for workload identity federation, update the local <code>google_project_id</code> and <code>organization_name</code> values in the <code>locals{}</code> block:</p>\n<pre><code>locals {\n  google_project_id = \"example-project\"\n  organization_name = \"example-org\"\n}\n\n# create a workload identity pool for HCP Terraform\nresource \"google_iam_workload_identity_pool\" \"hcp_tf\" {\n  project                   = local.google_project_id\n  workload_identity_pool_id = \"hcp-tf-pool\"\n  display_name              = \"HCP Terraform Pool\"\n  description               = \"Used to authenticate to Google Cloud\"\n}\n\n# create a workload identity pool provider for HCP Terraform\nresource \"google_iam_workload_identity_pool_provider\" \"hcp_tf\" {\n  project                            = local.google_project_id\n  workload_identity_pool_id          = google_iam_workload_identity_pool.hcp_tf.workload_identity_pool_id\n  workload_identity_pool_provider_id = \"hcp-tf-provider\"\n  display_name                       = \"HCP Terraform Provider\"\n  description                        = \"Used to authenticate to Google Cloud\"\n  attribute_condition                = \"assertion.terraform_organization_name==\\\"${local.organization_name}\\\"\"\n  attribute_mapping = {\n    \"google.subject\"                     = \"assertion.sub\"\n    \"attribute.terraform_workspace_id\"   = \"assertion.terraform_workspace_id\"\n    \"attribute.terraform_full_workspace\" = \"assertion.terraform_full_workspace\"\n  }\n  oidc {\n    issuer_uri = \"https://app.terraform.io\"\n  }\n}</code></pre><p>Once the HCP Terraform pool and provider are created, create a service account that HCP Terraform will impersonate at runtime:</p>\n<pre><code># example service account that HCP Terraform will impersonate\nresource \"google_service_account\" \"example\" {\n  account_id   = \"example\"\n  display_name = \"Service Account for HCP Terraform\"\n  project      = local.google_project_id\n}\n\n# IAM verifies the HCP Terraform Workspace ID before authorizing access to impersonate the 'example' service account\nresource \"google_service_account_iam_member\" \"example_workload_identity_user\" {\n  service_account_id = google_service_account.example.name\n  role               = \"roles/iam.workloadIdentityUser\"\n  member             = \"principalSet://iam.googleapis.com/${google_iam_workload_identity_pool.hcp_tf.name}/attribute.terraform_workspace_id/ws-ZZZZZZZZZZZZZZZ\"\n}\n\n# grant 'example' service account permissions to create a bucket\nresource \"google_project_iam_member\" \"example_storage_admin\" {\n  member  = \"serviceAccount:${google_service_account.example.email}\"\n  role    = \"roles/storage.admin\"\n  project = local.google_project_id\n}</code></pre><h2>Delegating access  to another workspace</h2>\n\n<p>For improved security and scalability, consider using a separate HCP Terraform workspace to set up and configure your workload identity federation. From this workspace, using <a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/cloud-multiple-variable-sets\">HCP Terraform variable sets</a>, you can share the service account and identity federation configuration, allowing you to securely delegate access to Google Cloud from one workspace to another.</p>\n\n<p>Below is an example configuration that creates a variable set and shares it with another HCP Terraform workspace.</p>\n<pre><code># create a variable set to store the workload identity federation config for the 'example' service account\nresource \"tfe_variable_set\" \"example\" {\n  name         = google_service_account.example.account_id\n  description  = \"Workload identity federation configuration for ${google_service_account.example.name}\"\n  organization = local.organization_name\n}\n\n# share the variable set with another HCP Terraform Workspace\nresource \"tfe_workspace_variable_set\" \"example\" {\n  variable_set_id = tfe_variable_set.example.id\n  workspace_id    = \"ws-XXXXXXXXXXXXXXX\"\n}</code></pre><p>Create the required environment variables below and associate them with the variable set. HCP Terraform uses these to obtain the short-lived OAuth 2.0 access token, which it uses to impersonate a service account at runtime that can call any Google Cloud APIs that the service account has access to:</p>\n<pre><code>resource \"tfe_variable\" \"example_provider_auth\" {\n  key             = \"TFC_GCP_PROVIDER_AUTH\"\n  value           = \"true\"\n  category        = \"env\"\n  variable_set_id = tfe_variable_set.example.id\n}\n\nresource \"tfe_variable\" \"example_service_account_email\" {\n  sensitive       = true\n  key             = \"TFC_GCP_RUN_SERVICE_ACCOUNT_EMAIL\"\n  value           = google_service_account.example.email\n  category        = \"env\"\n  variable_set_id = tfe_variable_set.example.id\n}\n\nresource \"tfe_variable\" \"example_provider_name\" {\n  sensitive       = true\n  key             = \"TFC_GCP_WORKLOAD_PROVIDER_NAME\"\n  value           = google_iam_workload_identity_pool_provider.hcp_tf.name\n  category        = \"env\"\n  variable_set_id = tfe_variable_set.example.id\n}</code></pre><h2>Using workload identity federation</h2>\n\n<p>When using workload identity federation, you don't need to define anything within the provider itself. By sharing the variable set — which includes the service account and identity federation configuration — with another HCP Terraform workspace, you automatically gain access to Google Cloud within the shared workspace. </p>\n\n<p>HCP Terraform does this by impersonating the service account at runtime, using the environment variables from the shared variable set. This approach allows you to securely scale access management within HCP Terraform by delegating access from one workspace to another while precisely restricting Google Cloud access to only what the service account needs. </p>\n\n<p>Using the service account created earlier, which has been assigned only the cloud storage admin role, you can immediately create a bucket within the shared workspace without having to configure anything else:</p>\n<pre><code>resource \"google_storage_bucket\" \"example\" {\n  name     = \"example\"\n  location = \"EU\"\n  project  = “example-project”\n}</code></pre><h2>Learn more about workload identity federation</h2>\n\n<p>If you want to learn more about keyless Google Cloud access from HCP Terraform, check out the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials/gcp-configuration\">dynamic provider credentials</a> and <a href=\"https://cloud.google.com/iam/docs/workload-identity-federation\">workload identity federation</a> documentation. You can find all the code used in this post on <a href=\"https://github.com/bschaatsbergen/keyless-auth-gcp-hcp-terraform\">GitHub in the keyless-auth-gcp-hcp-terraform repository</a>.</p>\n","author":"Bruno Schaatsbergen","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"83547cfb7d62423cc2188e8559eabecdfc5c9511dd5d028aaf4244d19732f0d5","category":"Tech"}