{"title":"New – Move Payment Processing to the Cloud with AWS Payment Cryptography","link":"https://aws.amazon.com/blogs/aws/new-move-payment-processing-to-the-cloud-with-aws-payment-cryptography/","date":1686582857000,"content":"<p>Cryptography is everywhere in our daily lives. If you’re reading this blog, you’re using HTTPS, an extension of HTTP that uses encryption to secure communications. On AWS, multiple services and capabilities help you manage keys and encryption, such as:</p> \n<ul> \n <li><a href=\"https://aws.amazon.com/kms/\">AWS Key Management Service (AWS KMS)</a>, which you can use to create and protect keys to encrypt or digitally sign your data.</li> \n <li><a href=\"https://aws.amazon.com/cloudhsm/\">AWS CloudHSM</a>, which you can use to manage single-tenant hardware security modules (HSMs).</li> \n</ul> \n<p>HSMs are physical devices that securely protect cryptographic operations and the keys used by these operations. HSMs can help you meet your corporate, contractual, and regulatory compliance requirements. With CloudHSM, you have access to general-purpose HSMs. When payments are involved, there are specific payment HSMs that offer capabilities such as generating and validating the personal identification number (PIN) and the security code of a credit or debit card.</p> \n<p>Today, I am happy to share the availability of <a href=\"https://aws.amazon.com/payment-cryptography/?trk=88d2d7f8-37aa-4a86-a33a-ebd62a83437c&amp;sc_channel=el\">AWS Payment Cryptography</a>, an elastic service that manages payment HSMs and keys for payment processing applications in the cloud.</p> \n<p>Applications using payments HSMs have challenging requirements because payment processing is complex, time sensitive, and highly regulated and requires the interaction of multiple financial service providers and payment networks. Every time you make a payment, data is exchanged between two or more financial service providers and must be decrypted, transformed, encrypted, or validated at each step.</p> \n<p>This process requires highly performant cryptography capabilities and key management procedures between each payment service provider. These providers might have thousands of keys to protect, manage, rotate, and audit, making the overall process expensive and difficult to scale. To add to that, payment HSMs historically employ complex and error-prone processes, such as exchanging keys using key components printed on paper, couriered to multiple key custodians separately who eventually combine the components under an elaborate key ceremony in a secure room.</p> \n<p><span><strong>Introducing AWS Payment Cryptography<br /> </strong></span>AWS Payment Cryptography simplifies your implementation of cryptographic functions and key management used to secure data in payment processing in accordance with various payment card industry (PCI) standards.</p> \n<p>With AWS Payment Cryptography, you can eliminate the need to provision and manage on-premises payment HSMs and use the provided tools to avoid error-prone key exchange processes. For example, with AWS Payment Cryptography, payment and financial service providers can begin development within minutes and plan to exchange keys electronically, eliminating manual processes.</p> \n<p>To provide its elastic cryptographic capabilities in a compliant manner, AWS Payment Cryptography uses HSMs with <a href=\"https://www.pcisecuritystandards.org/about_us/press_releases/pci-security-standards-council-updates-hardware-security-module-standard/\">PCI PTS HSM</a> device approval. These capabilities include encryption and decryption of card data, key creation, and pin translation. AWS Payment Cryptography is also designed in accordance with PCI security standards such as PCI DSS, PCI PIN, and PCI P2PE, and it provides evidence and reporting to help meet your compliance needs.</p> \n<p>You can import and export symmetric keys between AWS Payment Cryptography and on-premises HSMs under key encryption key (KEKs) using the <a href=\"https://x9.org/\">ANSI X9 TR-31 protocol</a>. You can also import and export symmetric KEKs with other systems and devices using the <a href=\"https://x9.org/\">ANSI X9 TR-34 protocol</a>, which allows the service to exchange symmetric keys using asymmetric techniques.</p> \n<p>To simplify moving consumer payment processing to the cloud, existing card payment applications can use AWS Payment Cryptography through the <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a>. In this way, you can use your favorite programming language, such as Java or Python, instead of vendor-specific ASCII interfaces over TCP sockets, as is common with payment HSMs.</p> \n<p>Access can be authorized using <a href=\"https://aws.amazon.com/iam/\">AWS Identity and Access Management (IAM)</a> identity-based policies, where you can specify which actions and resources are allowed or denied and under which conditions.</p> \n<p>Monitoring is important to maintain the reliability, availability, and performance needed by payment processing. With AWS Payment Cryptography, you can use <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a>, <a href=\"https://aws.amazon.com/cloudtrail/\">AWS CloudTrail</a>, and <a href=\"https://aws.amazon.com/eventbridge\">Amazon EventBridge</a> to understand what is happening, report when something is wrong, and take automatic actions when appropriate.</p> \n<p>Let’s see how this works in practice.</p> \n<p><span><strong>Using AWS Payment Cryptography<br /> </strong></span>Using the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a>, I create a double-length <a href=\"https://en.wikipedia.org/wiki/Triple_DES\">3DES</a> key to be used as a card verification key (CVK). A CVK is a key used for generating and verifying card security codes such as CVV, CVV2, and similar values.</p> \n<p>Note that there are two commands for the CLI (and similarly two endpoints for API and SDKs):</p> \n<ul> \n <li><code>payment-cryptography</code> for control plane operation such as listing and creating keys and aliases.</li> \n <li><code>payment-cryptography-data</code> for cryptographic operations that use keys, for example, to generate PIN or card validation data.</li> \n</ul> \n<p>Creating a key is a control plane operation:</p> \n<div> \n <pre><code>aws payment-cryptography create-key \\\n    --no-exportable \\\n    --key-attributes KeyAlgorithm=TDES_2KEY,\n                     KeyUsage=TR31_C0_CARD_VERIFICATION_KEY,\n                     KeyClass=SYMMETRIC_KEY,\n                     KeyModesOfUse='{Generate=true,Verify=true}'</code></pre> \n</div> \n<pre><code>{\n    \"Key\": {\n        \"KeyArn\": \"arn:aws:payment-cryptography:us-west-2:123412341234:key/42cdc4ocf45mg54h\",\n        \"KeyAttributes\": {\n            \"KeyUsage\": \"TR31_C0_CARD_VERIFICATION_KEY\",\n            \"KeyClass\": \"SYMMETRIC_KEY\",\n            \"KeyAlgorithm\": \"TDES_2KEY\",\n            \"KeyModesOfUse\": {\n                \"Encrypt\": false,\n                \"Decrypt\": false,\n                \"Wrap\": false,\n                \"Unwrap\": false,\n                \"Generate\": true,\n                \"Sign\": false,\n                \"Verify\": true,\n                \"DeriveKey\": false,\n                \"NoRestrictions\": false\n            }\n        },\n        \"KeyCheckValue\": \"B2DD4E\",\n        \"KeyCheckValueAlgorithm\": \"ANSI_X9_24\",\n        \"Enabled\": true,\n        \"Exportable\": false,\n        \"KeyState\": \"CREATE_COMPLETE\",\n        \"KeyOrigin\": \"AWS_PAYMENT_CRYPTOGRAPHY\",\n        \"CreateTimestamp\": \"2023-05-26T14:25:48.240000+01:00\",\n        \"UsageStartTimestamp\": \"2023-05-26T14:25:48.220000+01:00\"\n    }\n}</code></pre> \n<p>To reference this key in the next steps, I can use the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html\">Amazon Resource Name (ARN)</a> as found in the <code>KeyARN</code> property, or I can create an alias. An alias is a friendly name that lets me refer to a key without having to use the full ARN. I can update an alias to refer to a different key. When I need to replace a key, I can just update the alias without having to change the configuration or the code of your applications. To be recognized easily, alias names start with <code>alias/</code>. For example, the following command creates the alias <code>alias/my-key</code> for the key I just created:</p> \n<div> \n <pre><code>aws payment-cryptography create-alias --alias-name alias/my-key \\\n    --key-arn arn:aws:payment-cryptography:us-west-2:123412341234:key/42cdc4ocf45mg54h</code></pre> \n</div> \n<pre><code>{\n    \"Alias\": {\n        \"AliasName\": \"alias/my-key\",\n        \"KeyArn\": \"arn:aws:payment-cryptography:us-west-2:123412341234:key/42cdc4ocf45mg54h\"\n    }\n}</code></pre> \n<p>Before I start using the new key, I list all my keys to check their status:</p> \n<div> \n <pre><code>aws payment-cryptography list-keys</code></pre> \n</div> \n<pre><code>{\n    \"Keys\": [\n        {\n            \"KeyArn\": \"arn:aws:payment-cryptography:us-west-2:123421341234:key/42cdc4ocf45mg54h\",\n            \"KeyAttributes\": {\n                \"KeyUsage\": \"TR31_C0_CARD_VERIFICATION_KEY\",\n                \"KeyClass\": \"SYMMETRIC_KEY\",\n                \"KeyAlgorithm\": \"TDES_2KEY\",\n                \"KeyModesOfUse\": {\n                    \"Encrypt\": false,\n                    \"Decrypt\": false,\n                    \"Wrap\": false,\n                    \"Unwrap\": false,\n                    \"Generate\": true,\n                    \"Sign\": false,\n                    \"Verify\": true,\n                    \"DeriveKey\": false,\n                    \"NoRestrictions\": false\n                }\n            },\n            \"KeyCheckValue\": \"B2DD4E\",\n            \"Enabled\": true,\n            \"Exportable\": false,\n            \"KeyState\": \"CREATE_COMPLETE\"\n        },\n        {\n            \"KeyArn\": \"arn:aws:payment-cryptography:us-west-2:123412341234:key/ok4oliaxyxbjuibp\",\n            \"KeyAttributes\": {\n                \"KeyUsage\": \"TR31_C0_CARD_VERIFICATION_KEY\",\n                \"KeyClass\": \"SYMMETRIC_KEY\",\n                \"KeyAlgorithm\": \"TDES_2KEY\",\n                \"KeyModesOfUse\": {\n                    \"Encrypt\": false,\n                    \"Decrypt\": false,\n                    \"Wrap\": false,\n                    \"Unwrap\": false,\n                    \"Generate\": true,\n                    \"Sign\": false,\n                    \"Verify\": true,\n                    \"DeriveKey\": false,\n                    \"NoRestrictions\": false\n                }\n            },\n            \"KeyCheckValue\": \"905848\",\n            \"Enabled\": true,\n            \"Exportable\": false,\n            \"KeyState\": \"DELETE_PENDING\"\n        }\n    ]\n}</code></pre> \n<p>As you can see, there is another key I created before, which has since been deleted. When a key is deleted, it is marked for deletion (<code>DELETE_PENDING</code>). The actual deletion happens after a configurable period (by default, 7 days). This is a safety mechanism to prevent the accidental or malicious deletion of a key. Keys marked for deletion are not available for use but can be restored.</p> \n<p>In a similar way, I list all my aliases to see to which keys they are they referring:</p> \n<div> \n <pre><code>aws payment-cryptography list-aliases\n</code></pre> \n</div> \n<pre><code>{\n    \"Aliases\": [\n        {\n            \"AliasName\": \"alias/my-key\",\n            \"KeyArn\": \"arn:aws:payment-cryptography:us-west-2:123412341234:key/42cdc4ocf45mg54h\"\n        }\n    ]\n}</code></pre> \n<p>Now, I use the key to generate a card security code with the CVV2 authentication system. You might be familiar with CVV2 numbers that are usually written on the back of a credit card. This is the way they are computed. I provide as input the primary account number of the credit card, the card expiration date, and the key from the previous step. To specify the key, I use its alias. This is a data plane operation:</p> \n<div> \n <pre><code>aws payment-cryptography-data generate-card-validation-data \\\n    --key-identifier alias/my-key \\\n    --primary-account-number=171234567890123 \\\n    --generation-attributes CardVerificationValue2={CardExpiryDate=0124}</code></pre> \n</div> \n<pre><code>{\n    \"KeyArn\": \"arn:aws:payment-cryptography:us-west-2:123412341234:key/42cdc4ocf45mg54h\",\n    \"KeyCheckValue\": \"B2DD4E\",\n    \"ValidationData\": \"343\"\n}</code></pre> \n<p>I take note of the three digits in the <code>ValidationData</code> property. When processing a payment, I can verify that the card data value is correct:</p> \n<div> \n <pre><code>aws payment-cryptography-data verify-card-validation-data \\\n    --key-identifier alias/my-key \\\n    --primary-account-number=171234567890123 \\\n    --verification-attributes CardVerificationValue2={CardExpiryDate=0124} \\\n    --validation-data 343</code></pre> \n</div> \n<pre><code>{\n    \"KeyArn\": \"arn:aws:payment-cryptography:us-west-2:123412341234:key/42cdc4ocf45mg54h\",\n    \"KeyCheckValue\": \"B2DD4E\"\n}</code></pre> \n<p>The verification is successful, and in return I get back the same <code>KeyCheckValue</code> as when I generated the validation data.</p> \n<p>As you might expect, if I use the wrong validation data, the verification is not successful, and I get back an error:</p> \n<div> \n <pre><code>aws payment-cryptography-data verify-card-validation-data \\\n    --key-identifier alias/my-key \\\n    --primary-account-number=171234567890123 \\\n    --verification-attributes CardVerificationValue2={CardExpiryDate=0124} \\\n    --validation-data 999\n\nAn error occurred (com.amazonaws.paymentcryptography.exception#VerificationFailedException)\nwhen calling the VerifyCardValidationData operation:\nCard validation data verification failed</code></pre> \n</div> \n<p>In the <a href=\"https://console.aws.amazon.com/payment-cryptography\">AWS Payment Cryptography console</a>, I choose <strong>View Keys</strong> to see the list of keys.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/26/aws-payment-cryptography-keys.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/26/aws-payment-cryptography-keys-1024x273.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"273\" /></a></p> \n<p>Optionally, I can enable more columns, for example, to see the key type (symmetric/asymmetric) and the algorithm used.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/26/aws-payment-cryptography-keys-more-columns-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/26/aws-payment-cryptography-keys-more-columns-1-1024x273.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"273\" /></a></p> \n<p>I choose the key I used in the previous example to get more details. Here, I see the cryptographic configuration, the tags assigned to the key, and the aliases that refer to this key.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/26/aws-payment-cryptography-key-details.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/26/aws-payment-cryptography-key-details-1024x678.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"678\" /></a></p> \n<p>AWS Payment Cryptography supports many more operations than the ones I showed here. For this walkthrough, I used the AWS CLI. In your applications, you can use AWS Payment Cryptography through any of the <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a>.</p> \n<p><span><strong>Availability and Pricing<br /> </strong></span><a href=\"https://aws.amazon.com/payment-cryptography/?trk=88d2d7f8-37aa-4a86-a33a-ebd62a83437c&amp;sc_channel=el\">AWS Payment Cryptography</a> is available today in the following <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\">AWS Regions</a>: US East (N. Virginia) and US West (Oregon).</p> \n<p>With AWS Payment Cryptography, you only pay for what you use based on the number of active keys and API calls with no up-front commitment or minimum fee.<span><strong> </strong></span>For more information, see <a href=\"https://aws.amazon.com/payment-cryptography/pricing/?trk=7e60dce8-94c3-43f4-a917-54f58bdd88a7&amp;sc_channel=el\">AWS Payment Cryptography pricing</a>.</p> \n<p>AWS Payment Cryptography removes your dependencies on dedicated payment HSMs and legacy key management systems, simplifying your integration with AWS native APIs. In addition, by operating the entire payment application in the cloud, you can minimize round-trip communications and latency.</p> \n<p><strong><a href=\"https://aws.amazon.com/payment-cryptography/?trk=88d2d7f8-37aa-4a86-a33a-ebd62a83437c&amp;sc_channel=el\">Move your payment processing applications to the cloud with AWS Payment Cryptography.</a></strong></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"f615797ae9a187174939586231570e445d6ec839129caaeebe1825e65f6c2506","category":"Tech"}