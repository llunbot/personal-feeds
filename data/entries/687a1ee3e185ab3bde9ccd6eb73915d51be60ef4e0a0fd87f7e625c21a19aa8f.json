{"title":"AWS Verified Access now supports secure access to resources over non-HTTP(S) protocols (in preview)","link":"https://aws.amazon.com/blogs/aws/aws-verified-access-now-supports-secure-access-to-resources-over-non-https-protocols/","date":1733085648000,"content":"<p><a href=\"https://aws.amazon.com/verified-access/\">AWS Verified Access</a> provides secure access to your corporate applications and resources without a virtual private network (VPN). <a href=\"https://aws.amazon.com/blogs/aws/aws-verified-access-preview-vpn-less-secure-network-access-to-corporate-applications/\">We launched <span>Verified Access</span></a> in preview at re:Invent 2 years ago as a way to provide secure, VPN-less access to corporate applications, enabling organizations to manage network access based on identity and device security instead of IP addresses, which increases control and security over application access.</p> \n<p>Today, <span>Verified Access</span> is launching a preview of its secure, VPN-less access capabilities to non-HTTP(S) applications and resources, enabling <a href=\"https://aws.amazon.com/security/zero-trust/\">zero trust</a> access to corporate resources over protocols such as Secure Shell (SSH) and Remote Desktop Protocol (RDP).</p> \n<p>Organizations increasingly require secure, remote access to internal resources such as databases, remote desktops, and <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instances. Traditional VPN solutions, although effective for network access, often grant broad privileges and don’t support granular access controls, which can expose infrastructure with sensitive data. Although some organizations use bastion hosts to mediate access, this approach can create complexity and policy inconsistencies across HTTP(S) and non-HTTP(S) applications. With the rise of zero trust architectures, these gaps highlight the need for a secure access solution that extends consistent access policies across all applications and resources.</p> \n<p><span>Verified Access</span> addresses these needs by providing zero trust access controls for your corporate applications and resources. By supporting protocols such as SSH, RDP, or Java Database Connectivity (JDBC) or Open Database Connectivity (ODBC), <span>Verified Access</span> simplifies your security operations. Now, you can establish uniform, context-aware access policies across your corporate applications and resources. <span>Verified Access</span> evaluates each access request in real time, making sure access is granted only to users who meet specific identity and device security requirements. Additionally, it eliminates the need for separate VPNs or bastion hosts, streamlining operations and reducing the risk of over-privileged access.</p> \n<p>One of my favorite capabilities is onboarding a group of resources by specifying their IP <a href=\"https://aws.amazon.com/what-is/cidr/?nc1=h_ls\">Classless Inter-Domain Routing (CIDR)</a> and ports, rather than onboarding one resource at a time. <span>Verified Access</span> automatically creates DNS records for each active resource within the specified CIDR range. This eliminates the need for manual DNS configuration and users can therefore connect to new resources instantly.</p> \n<p><span><strong>Using Verified Access for non-HTTPS access<br /> </strong></span>Configuring <span>Verified Access</span> for non-HTTPS access isn’t very different from what exists today. You can read <a href=\"https://aws.amazon.com/blogs/aws/aws-verified-access-preview-vpn-less-secure-network-access-to-corporate-applications/\">the blog post I wrote for the launch of the preview 2 years ago</a> or the <a href=\"https://docs.aws.amazon.com/verified-access/latest/ug/getting-started.html\">Get started with Verified Access</a> tutorial to learn how to get started.</p> \n<p><span>Verified Access</span> proposes two new types of endpoint targets: a target for one single resource and a target for multiple resources.</p> \n<p>With the <strong>network interface, load balancer, or RDS endpoint target</strong> you can provide access to an individual resource such as an <a href=\"https://aws.amazon.com/rds/\">Amazon Relational Database Service (Amazon RDS)</a> instance or an arbitrary TCP application fronted by a <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html\">Network Load Balancer</a> or an <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html\">elastic network interface</a>. This type of target endpoint is defined by a combination of a target type (such as a load balancer or a network interface) and a range of TCP ports. <span>Verified Access</span> will provide a DNS name for each endpoint upon its creation. A <span>Verified Access</span> DNS name is assigned for each target. This is the name end users will use to securely access the resource.</p> \n<p>With <strong>network CIDR endpoint target</strong>, the resources are defined using an IP CIDR and port range. Through this type of endpoint target, you can easily provision secure access to ephemeral resources such as EC2 instances over protocols such as SSH and RDP. This is done without having to perform any actions such as creating or deleting endpoint targets each time a resource is added or removed. As long as these resources are assigned an IP address from the defined CIDR, <span>Verified Access</span> provides a unique public DNS record for each active IP detected in the defined CIDR.</p> \n<p>Here is a diagram of the setup for this demo.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/illustration-ava-20241128-01.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/28/illustration-ava-20241128-01.png\" alt=\"AWS Verified Access Demo Setup\" width=\"800\" height=\"450\" /></a></p> \n<p><strong>Part 1: As a Verified Access administrator</strong></p> \n<p>As a <span>Verified Access</span> administrator, I create the Verified Access <a href=\"https://docs.aws.amazon.com/verified-access/latest/ug/verified-access-instances.html\">instance</a>, <a href=\"https://docs.aws.amazon.com/verified-access/latest/ug/trust-providers.html\">trust provider</a>, <a href=\"https://docs.aws.amazon.com/verified-access/latest/ug/verified-access-groups.html\">access group</a>, <a href=\"https://docs.aws.amazon.com/verified-access/latest/ug/verified-access-endpoints.html\">endpoint</a>, and <a href=\"https://docs.aws.amazon.com/verified-access/latest/ug/auth-policies.html\">access policies</a>, allowing access by the end user to the SSH server.</p> \n<p>For this demo, I configure a <span>Verified Access</span> network CIDR endpoint target. I select <strong>TCP</strong> as <strong>Protocol</strong> and <strong>Network CIDR</strong> as <strong>Endpoint type</strong>. I make sure the <strong>CIDR</strong> range is within the one of the <strong>VPC </strong>where my target resources are. I select the TCP <strong>Port ranges</strong> and the <strong>Subnets </strong>within the VPC.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/19/2024-11-18_14-00-39.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/19/2024-11-18_14-00-39.png\" alt=\"AVA : Create endpoint\" width=\"800\" height=\"717\" /></a></p> \n<p>This is a good moment to stretch your legs and refill your cup of coffee, it takes a few minutes to create the endpoint.</p> \n<p>Once, the status is <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" /> <strong><span>Active</span></strong>, I launch an EC2 instance in a private <a href=\"https://aws.amazon.com/vpc/\">Amazon Virtual Private Cloud (Amazon VPC)</a>. I enable SSH and configure the instance’s security group to only access requests coming from the VPC. A few minutes later, I can see the instance IP has been detected and assigned a DNS name to connect to from the <span>Verified Access</span> client application.</p> \n<p>I also have the option during the configuration to delegate my own DNS subdomain, such as <code>secure.mycompany.com</code>, and <span>Verified Access</span> will assign DNS names for the resources within that subdomain.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/2024-11-20_16-07-09.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/2024-11-20_16-07-09.png\" alt=\"AVA : DNS names\" width=\"800\" height=\"350\" /></a></p> \n<p><strong>Create an access policy</strong></p> \n<p>At this stage, there is no policy defined on the Verified Access endpoint. It will deny every request by default.</p> \n<p>On the <strong>Verified Access groups</strong> page, I select the <strong>Policy</strong> tab. Then I select the <strong>Modify Verified Access endpoint policy</strong> button to create an access policy.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2022/11/24/2022-11-24_18-08-14.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2022/11/24/2022-11-24_18-08-14.png\" alt=\"Verified Access - group policy tab\" width=\"810\" height=\"458\" /></a></p> \n<p>I enter a policy allowing anybody who is authenticated and has an email address ending with <code>@amazon.com</code>. This is the email address I used for the user defined in <a href=\"https://aws.amazon.com/iam/identity-center/\">AWS IAM Identity Center</a>. Note that the name after <code>context</code> is the name I entered as <strong>Policy reference name</strong> when I created the <strong>Verified Access trust provider</strong>. The <a href=\"https://docs.aws.amazon.com/verified-access/latest/ug/what-is-verified-access.html\">documentation page</a> has the details of the policy syntax, the attributes, and the operators I can use.</p> \n<pre><code>permit(principal, action, resource)\nwhen {\n    context.awsnewsblog.user.email.address like \"*@amazon.com\"\n};</code></pre> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2022/11/24/2022-11-24_18-12-59.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2022/11/24/2022-11-24_18-12-59.png\" alt=\"Verified Access - group define policy\" width=\"810\" height=\"538\" /></a></p> \n<p>After a few minutes, Verified Access updates the policy and becomes <strong><span>Active</span></strong> again.</p> \n<p><strong><span><span>Distribute the configuration to clients</span></span></strong></p> \n<p>The last task as a <span>Verified Access</span> administrator is to extract the JSON configuration file of the client applications.</p> \n<p>I retrieve the client application configuration file with the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a>. As a system administrator, I’ll distribute this configuration to each client machine.</p> \n<pre><code>aws ec2 export-verified-access-instance-client-configuration \\\n     --verified-access-instance-id \"vai-0dbf2c4c011083069\"\n\n{\n    \"Version\": \"1.0\",\n    \"VerifiedAccessInstanceId\": \"vai-0dbf2c4c011083069\",\n    \"Region\": \"us-east-1\",\n    \"DeviceTrustProviders\": [],\n    \"UserTrustProvider\": {\n        \"Type\": \"iam-identity-center\",\n        \"Scopes\": \"verified_access:application:connect\",\n        \"Issuer\": \"https://identitycenter.amazonaws.com/ssoins-xxxx\",\n        \"PkceEnabled\": true\n    },\n    \"OpenVpnConfigurations\": [\n        {\n            \"Config\": \"Y2...bWU=\",\n            \"Routes\": [\n                {\n                    \"Cidr\": \"2600:1f10:4a02:8700::/57\"\n                }\n            ]\n        }\n    ]\n}</code></pre> \n<p>Now that I have a resource to connect to and the <span>Verified Access</span> infrastructure in place, let me show you the end user experience to access a network endpoint.</p> \n<p><strong>Part 2: As an end user</strong></p> \n<p>As the end user, I receive a link to <a href=\"https://aws.amazon.com/verified-access/connectivity-client-download/\">download and install the <span>Verified Access</span> Connectivity Client application</a>. We support Windows and macOS clients at the time of this writing.</p> \n<p><span>I install the configuration file I received from my administrator. I use <code>ClientConfig1.json</code> as the file name and I copy the file to <code>C:\\ProgramData\\Connectivity Client</code> on Windows or <code>/Library/Application\\ Support/Connectivity\\ Client</code> on macOS.</span></p> \n<p><span>This is the same configuration file for all users, and the system administrator might push the file to all client machines using an endpoint management tool.</span></p> \n<p>I start the Connectivity Client application. I choose <strong>Sign in</strong> to start the authentication sequence.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/2024-11-20_16-20-33.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/2024-11-20_16-20-33.png\" alt=\"AVA Client : Sign in\" width=\"450\" height=\"275\" /></a>The authentication opens my web browser on the authentication page of my identity provider. The exact screen and login sequence varies from one provider to the other. After I’m authenticated, the Connectivity Client creates the secure tunnel to access my resource, an EC2 instance for this demo.</p> \n<table> \n <tbody> \n  <tr> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/2024-11-19_22-08-40.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/2024-11-19_22-08-40.png\" alt=\"AVA Client : Connecting\" width=\"350\" height=\"214\" /></a></td> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/2024-11-19_22-10-04.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/2024-11-19_22-10-04.png\" alt=\"AVA Client : Connected\" width=\"350\" height=\"214\" /></a></td> \n  </tr> \n </tbody> \n</table> \n<p>Once the status is <strong>Connected,</strong> I can securely connect to the resource, using the DNS name provided by <span>Verified Access</span>. In a terminal application, I type the <code>ssh</code> command to start the connection.</p> \n<p>For this demo, I configured a delegated DNS domain <code>secure.mycompany.com</code> for Verified Access. The DNS address I received for the EC2 instance is <code>10-0-1-199.awsnews.secure.mycompany.com</code>.</p> \n<pre><code>$ ssh -i mykey.pem ec2-user@10-0-1-199.awsnews.secure.mycompany.com\n\n   ,     #_\n   ~\\_  ####_        Amazon Linux 2023\n  ~~  \\_#####\\\n  ~~     \\###|\n  ~~       \\#/ ___   https://aws.amazon.com/linux/amazon-linux-2023\n   ~~       V~' '-&gt;\n    ~~~         /\n      ~~._.   _/\n         _/ _/\n       _/m/'\nLast login: Sat Nov 17 20:17:46 2024 from 1.2.3.4\n\n$</code></pre> \n<p><strong><span>Availability and pricing</span><br /> </strong><span>Verified Access</span> is available as a public preview in 18 <a href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#region\">AWS Regions</a>: US East (Ohio, N. Virginia), US West (N. California, Oregon), Asia Pacific (Jakarta, Mumbai, Seoul, Singapore, Sydney, Tokyo), Canada (Central), Europe (Frankfurt, Ireland, London, Milan, Stockholm), Israel (Tel Aviv), and South America (São Paulo).</p> \n<p><span>You’re charged for each hour</span> that your non-HTTP(S) Verified Access endpoint remains active and per connection. The first 100 connections per month on each Verified Access endpoint are free. For more information, refer to <a href=\"https://aws.amazon.com/verified-access/pricing\" target=\"_blank\">AWS Verified Access Pricing</a>.</p> \n<p>With <span>Verified Access</span> for HTTP(S) and non-HTTP(S) applications you can unify the access controls to your private applications and systems and apply zero trust policies uniformly to all applications, and SSH, RDP, and HTTP(S) resources. It reduces the complexity of your network infrastructure and helps you to implement zero-trust access to your applications and resources. Finally, it adapts to your growing infrastructure, automating DNS setup and supporting large-scale deployments without resource-specific registration.</p> \n<p>Go, try <span>Verified Access</span> today, and share your feedback with the team!</p> \n<a href=\"https://twitter.com/sebsto\">-- seb</a>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"687a1ee3e185ab3bde9ccd6eb73915d51be60ef4e0a0fd87f7e625c21a19aa8f","category":"Tech"}