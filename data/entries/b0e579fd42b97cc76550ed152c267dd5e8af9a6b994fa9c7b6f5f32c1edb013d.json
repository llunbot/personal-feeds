{"title":"Tight Mode: Why Browsers Produce Different Performance Results","link":"https://smashingmagazine.com/2025/01/tight-mode-why-browsers-produce-different-performance-results/","date":1736427600000,"content":"<p>This article is a sponsored by <a href=\"https://www.debugbear.com/?utm_campaign=sm-7\">DebugBear</a></p>\n<p>I was chatting with <a href=\"https://www.debugbear.com?utm_campaign=sm-7\">Debug</a><a href=\"https://www.debugbear.com\">B</a><a href=\"https://www.debugbear.com\">ear</a>’s Matt Zeunert and, in the process, he casually mentioned this thing called <strong>Tight Mode</strong> when describing how browsers fetch and prioritize resources. I wanted to nod along like I knew what he was talking about but ultimately had to ask: <em>What the heck is “Tight” mode?</em></p>\n<p>What I got back were two artifacts, one of them being the following video of Akamai web performance expert Robin Marx speaking at We Love Speed in France a few weeks ago:</p>\n<p><img src=\"https://files.smashing.media/articles/tight-mode-why-browsers-produce-different-performance-results/1-chrome-tight-mode.png\" /></p>\n<p>Tight Mode discriminates resources, taking anything and everything marked as High and Medium priority. Everything else is constrained and left on the outside, looking in until the body is firmly attached to the document, signaling that blocking scripts have been executed. It’s at that point that resources marked with Low priority are allowed in the door during the second phase of loading.</p>\n<p>There’s a big caveat to that, but we’ll get there. The important thing to note is that…</p>\nChrome And Safari Enforce Tight Mode\n<p>Yes, both Chrome and Safari have some working form of Tight Mode running in the background. That last image illustrates Chrome’s Tight Mode. Let’s look at Safari’s next and compare the two.</p>\n<p><img src=\"https://files.smashing.media/articles/tight-mode-why-browsers-produce-different-performance-results/2-tight-mode-chrome-vs-safari.png\" /></p>\n<p>Look at that! Safari discriminates High-priority resources in its initial fetch, just like Chrome, but we get wildly different loading behavior between the two browsers. Notice how Safari appears to exclude the first five PNG images marked with Medium priority where Chrome allows them. In other words, Safari makes all Medium- and Low-priority resources wait in line until all High-priority items are done loading, even though we’re working with the exact same HTML. You might say that Safari’s behavior makes the most sense, as you can see in that last image that Chrome seemingly excludes some High-priority resources out of Tight Mode. There’s clearly some tomfoolery happening there that we’ll get to.</p>\n<p>Where’s Firefox in all this? It doesn’t take any extra tightening measures when evaluating the priority of the resources on a page. We might consider this the “classic” waterfall approach to fetching and loading resources.</p>\n<p><img src=\"https://files.smashing.media/articles/tight-mode-why-browsers-produce-different-performance-results/3-tight-mode-chtome-safari-firefox.png\" /></p>\nChrome And Safari Trigger Tight Mode Differently\n<p>Robin makes this clear as day in his talk. Chrome and Safari are both Tight Mode proponents, yet trigger it under differing circumstances that we can outline like this:</p>\n<table>\n    <thead>\n        <tr>\n      <th></th>\n            <th>Chrome</th>\n            <th>Safari</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Tight Mode triggered</td>\n            <td>While blocking JS in the <code>&lt;head&gt;</code> is busy.</td>\n      <td>While blocking JS or CSS anywhere is busy.</td>\n        </tr>\n    </tbody>\n</table>\n\n<p>Notice that Chrome only looks at the document <code>&lt;head&gt;</code> when prioritizing resources, and <strong>only when it involves JavaScript</strong>. Safari, meanwhile, also looks at JavaScript, but CSS as well, and anywhere those things might be located in the document — regardless of whether it’s in the <code>&lt;head&gt;</code> or <code>&lt;body&gt;</code>. That helps explain why Chrome excludes images marked as High priority in Figure 2 from its Tight Mode implementation — it only cares about JavaScript in this context.</p>\n<p>So, even if Chrome encounters a script file with <code>fetchpriority=\"high\"</code> in the document body, the file is not considered a “High” priority and it will be loaded after the rest of the items. Safari, meanwhile, honors <code>fetchpriority</code> anywhere in the document. This helps explain why Chrome leaves two scripts on the table, so to speak, in Figure 2, while Safari appears to load them during Tight Mode.</p>\n<p>That’s not to say Safari isn’t doing anything weird in its process. Given the following markup:</p>\n<pre><code>&lt;head&gt;\n  &lt;!-- two high-priority scripts --&gt;\n  &lt;script src=\"script-1.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"script-1.js\"&gt;&lt;/script&gt;\n\n  &lt;!-- two low-priority scripts --&gt;\n  &lt;script src=\"script-3.js\" defer&gt;&lt;/script&gt;\n  &lt;script src=\"script-4.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- five low-priority scripts --&gt;\n  &lt;img src=\"image-1.jpg\"&gt;\n  &lt;img src=\"image-2.jpg\"&gt;\n  &lt;img src=\"image-3.jpg\"&gt;\n  &lt;img src=\"image-4.jpg\"&gt;\n  &lt;img src=\"image-5.jpg\"&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>…you might expect that Safari would delay the two Low-priority scripts in the <code>&lt;head&gt;</code> until the five images in the <code>&lt;body&gt;</code> are downloaded. But that’s not the case. Instead, Safari loads those two scripts during its version of Tight Mode.</p>\n<p><img src=\"https://files.smashing.media/articles/tight-mode-why-browsers-produce-different-performance-results/4-safari-deferred-scripts-head.png\" /></p>\nChrome And Safari Exceptions\n<p>I mentioned earlier that Low-priority resources are loaded in during the second phase of loading after Tight Mode has been completed. But I also mentioned that there’s a big caveat to that behavior. Let’s touch on that now.</p>\n<p>According to Patrick’s article, we know that Tight Mode is “the initial phase and constraints loading lower-priority resources until the body is attached to the document (essentially, after all blocking scripts in the head have been executed).” But there’s a second part to that definition that I left out:</p>\n<blockquote>“In tight mode, low-priority resources are only loaded if there are less than two in-flight requests at the time that they are discovered.”</blockquote>\n\n<p>A-ha! So, there <em>is</em> a way for low-priority resources to load in Tight Mode. It’s when there are less than two “in-flight” requests happening when they’re detected.</p>\n<p>Wait, what does “in-flight” even mean?</p>\n<p>That’s what’s meant by less than two High- or Medium-priority items being requested. Robin demonstrates this by comparing Chrome to Safari under the same conditions, where there are only two High-priority scripts and ten regular images in the mix:</p>\n<pre><code>&lt;head&gt;\n  &lt;!-- two high-priority scripts --&gt;\n  &lt;script src=\"script-1.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"script-1.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- ten low-priority images --&gt;\n  &lt;img src=\"image-1.jpg\"&gt;\n  &lt;img src=\"image-2.jpg\"&gt;\n  &lt;img src=\"image-3.jpg\"&gt;\n  &lt;img src=\"image-4.jpg\"&gt;\n  &lt;img src=\"image-5.jpg\"&gt;\n  &lt;!-- rest of images --&gt;\n  &lt;img src=\"image-10.jpg\"&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>Let’s look at what Safari does first because it’s the most straightforward approach:</p>\n<p><img src=\"https://files.smashing.media/articles/tight-mode-why-browsers-produce-different-performance-results/5-safari-tight-mode.jpg\" /></p>\n<p>Nothing tricky about that, right? The two High-priority scripts are downloaded first and the 10 images flow in right after. Now let’s look at Chrome:</p>\n<p><img src=\"https://files.smashing.media/articles/tight-mode-why-browsers-produce-different-performance-results/6-chrome-tight-mode.jpg\" /></p>\n<p>We have the two High-priority scripts loaded first, as expected. But then Chrome decides to let in the first five images with Medium priority, then excludes the last five images with Low priority. What. The. Heck.</p>\n<p>The reason is a noble one: Chrome wants to load the first five images because, presumably, the <a href=\"https://www.debugbear.com/docs/metrics/largest-contentful-paint?utm_campaign=sm-7\">Largest Contentful Paint</a> (LCP) is often going to be one of those images and Chrome is hedging bets that the web will be faster overall if it automatically handles some of that logic. Again, it’s a noble line of reasoning, even if it isn’t going to be 100% accurate. It does muddy the waters, though, and makes understanding Tight Mode a lot harder when we see Medium- and Low-priority items treated as High-priority citizens.</p>\n<p>Even muddier is that Chrome appears to only accept up to two Medium-priority resources in this discriminatory process. The rest are marked with Low priority.</p>\n<p>That’s what we mean by “less than two in-flight requests.” If Chrome sees that only one or two items are entering Tight Mode, then <strong>it automatically prioritizes up to the first five non-critical images</strong> as an LCP optimization effort.</p>\n<p>Truth be told, Safari does something similar, but in a different context. Instead of accepting Low-priority items when there are less than two in-flight requests, Safari accepts both Medium and Low priority in Tight Mode and from anywhere in the document regardless of whether they are located in the <code>&lt;head&gt;</code> or not. The exception is any asynchronous or deferred script because, as we saw earlier, those get loaded right away anyway.</p>\nHow To Manipulate Tight Mode\n<p>This might make for a great follow-up article, but this is where I’ll refer you directly to Robin’s video because his first-person research is worth consuming directly. But here’s the gist:</p>\n<ul>\n<li>We have these high-level features that can help influence priority, including <strong>resource hints</strong> (i.e., <code>preload</code> and <code>preconnect</code>), the <a href=\"https://www.debugbear.com/blog/fetchpriority-attribute?utm_campaign=sm-7\"><strong>Fetch Priority API</strong></a>, and <strong>lazy-loading techniques</strong>.</li>\n<li>We can indicate <code>fetchpriority=\"high\"</code> and <code>fetchpriority=\"low\"</code> on items.</li>\n</ul>\n<div>\n<pre><code>&lt;img src=\"lcp-image.jpg\" fetchpriority=\"high\"&gt;\n&lt;link rel=\"preload\" href=\"defer.js\" as=\"script\" fetchpriority=\"low\"&gt;\n</code></pre>\n</div>\n\n<ul>\n<li>Using <code>fetchpriority=\"high\"</code> is one way we can get items lower in the source included in Tight Mode. Using <code>fetchpriority=\"low</code> is one way we can get items higher in the source excluded from Tight Mode.</li>\n<li>For Chrome, this works on images, asynchronous/deferred scripts, and scripts located at the bottom of the <code>&lt;body&gt;</code>.</li>\n<li>For Safari, this only works on images.</li>\n</ul>\n<p>Again, watch Robin’s talk for the full story <a href=\"https://youtu.be/p0lFyPuH8Zs?feature=shared&amp;t=1712\">starting around the 28:32 marker</a>.</p>\nThat’s Tight… Mode\n<p>It’s bonkers to me that there is so little information about Tight Mode floating around the web. I would expect something like this to be well-documented somewhere, certainly over at Chrome Developers or somewhere similar, but all we have is a lightweight Google Doc and a thorough presentation to paint a picture of how two of the three major browsers fetch and prioritize resources. Let me know if you have additional information that you’ve either published or found — I’d love to include them in the discussion.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"b0e579fd42b97cc76550ed152c267dd5e8af9a6b994fa9c7b6f5f32c1edb013d","category":"Tech"}