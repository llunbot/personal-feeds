{"title":"Upgrade your Java applications with Amazon Q Code Transformation (preview)","link":"https://aws.amazon.com/blogs/aws/upgrade-your-java-applications-with-amazon-q-code-transformation-preview/","date":1701193051000,"content":"<p>As our applications age, it takes more and more effort just to keep them secure and running smoothly. Developers managing the upgrades must spend time relearning the intricacies and nuances of breaking changes and performance optimizations others have already discovered in past upgrades. As a result, it’s difficult to balance the focus between new features and essential maintenance work.</p> \n<p>Today, we are introducing in preview <a href=\"http://aws.amazon.com/q/aws/code-transformation\">Amazon Q Code Transformation</a>. This new capability simplifies upgrading and modernizing existing application code using <a href=\"http://aws.amazon.com/q\">Amazon Q</a>, a new type of assistant powered by generative <a href=\"https://aws.amazon.com/generative-ai/\">artificial intelligence (AI)</a>. Amazon Q is specifically designed for work and can be tailored to your business.</p> \n<p>Amazon Q Code Transformation can perform Java application upgrades now, from version 8 and 11 to version 17, a Java Long-Term Support (LTS) release, and it will soon be able to transform Windows-based .NET Framework applications to cross-platform .NET.</p> \n<p>Previously, developers could spend two to three days upgrading each application. Our internal testing shows that the transformation capability can upgrade an application in minutes compared to the days or weeks typically required for manual upgrades, freeing up time to focus on new business requirements. For example, an internal Amazon team of five people successfully upgraded one thousand production applications from Java 8 to 17 in 2 days. It took, on average, 10 minutes to upgrade applications, and the longest one took less than an hour.</p> \n<p>Amazon Q Code Transformation automatically analyzes the existing code, generates a transformation plan, and completes the transformation tasks suggested by the plan. While doing so, it identifies and updates package dependencies and refactors deprecated and inefficient code components, switching to new language frameworks and incorporating security best practices. Once complete, you can review the transformed code, complete with build and test results, before accepting the changes.</p> \n<p>In this way, you can keep applications updated and supported in just a few steps, gain performance benefits, and remove vulnerabilities from using unsupported versions, freeing up time to focus on new business requirements. Let’s see how this works in practice.</p> \n<p><span><strong>Upgrading a Java application from version 8 to 17<br /> </strong></span>I am using IntelliJ IDEA in this walkthrough (the same is available for Visual Studio Code). To have Amazon Q Code Transformation in my IDE, I install the latest version of the <a href=\"https://aws.amazon.com/intellij/\">AWS Toolkit for IntelliJ IDEA</a> and sign in using the <a href=\"https://aws.amazon.com/iam/identity-center/\">AWS IAM Identity Center</a> credentials provided by my organization. Note that to access Amazon Q Code Transformation, the <a href=\"https://docs.aws.amazon.com/codewhisperer/latest/userguide/q-authentication.html\">CodeWhisperer administrator needs to explicitly give access to Amazon Q features</a> in the profile used by the organization.</p> \n<p>I open an old project that I never had the time to update to a more recent version of Java. The project is using <a href=\"https://maven.apache.org/\">Apache Maven</a> to manage the build. The project object model (POM) file (<code>pom.xml</code>), an XML representation of the project, is in the root directory.</p> \n<p>First, in the project settings, I check that the project is configured to use the correct SDK version (1.8 in this case). I choose <strong>AWS Toolkit</strong> on the left pane and then the <strong>Amazon Q + CodeWhisperer</strong> tab. In the <strong>Amazon Q (Preview)</strong> section, I choose <strong>Transform</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/26/code-transform-button-2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/26/code-transform-button-2.png\" alt=\"IDE screenshot.\" width=\"2020\" height=\"470\" /></a></p> \n<p>This opens a dialog where I check that the correct Maven module is selected for the upgrade before proceeding with the transformation.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/code-transform-dialog-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/code-transform-dialog-1.png\" alt=\"IDE screenshot.\" width=\"1556\" height=\"656\" /></a></p> \n<p>I follow the progress in the <strong>Transformation Hub</strong> window. The upgrade completes in a few minutes for my small application, while larger ones might take more than an hour to complete.</p> \n<p>The end-to-end application upgrade consists of three steps:</p> \n<ol> \n <li><strong>Identifying and analyzing the application</strong> – The code is copied to a managed environment in the cloud where the build process is set up based on the instructions in the repository. At this stage, the components to be upgraded are identified.</li> \n <li><strong>Creating a transformation plan</strong> – The code is analyzed to create a transformation plan that lists the steps that Amazon Q Code Transformation will take to upgrade the code, including updating dependencies, building the upgraded code, and then iteratively fixing any build errors encountered during the upgrade.</li> \n <li><strong>Code generation, build testing, and finalization</strong> – The transformation plan is followed iteratively to update existing code and configuration files, generate new files where needed, perform build validation using the tests provided with the code, and fix issues identified in failed builds.</li> \n</ol> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/code-transform-details-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/code-transform-details-1.png\" alt=\"IDE screenshot.\" width=\"2826\" height=\"744\" /></a></p> \n<p>After a few minutes, the transformation terminates successfully. From here, I can open the plan and a summary of the transformation. I choose <strong>View diff</strong> to see the proposed changes. In the <strong>Apply Patch</strong> dialog, I see a recap of the files that have been added, modified, or deleted.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/code-transform-apply-patch-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/code-transform-apply-patch-1.png\" alt=\"IDE screenshot.\" width=\"1970\" height=\"1368\" /></a></p> \n<p>First, I select the <code>pom.xml</code> file and then choose <strong>Show Difference</strong> (the icon with the left/right arrows) to have a side-by-side view of the current code in the project and the proposed changes. For example, I see that the version of one of the dependencies (<a href=\"https://projectlombok.org/\">Project Lombok</a>) has been increased for compatibility with the target Java version.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/code-transform-show-diff-pom.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/code-transform-show-diff-pom.png\" alt=\"IDE screenshot.\" width=\"2792\" height=\"1396\" /></a></p> \n<p>In the Java file, the annotations used by the upgraded dependency have been updated. With the new version, <code>@With</code> has been promoted, and <code>@Wither</code> (which was experimental) deprecated. These changes are reflected in the <code>import</code> statements.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/code-transform-show-diff-java.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/code-transform-show-diff-java.png\" alt=\"IDE screenshot.\" width=\"2792\" height=\"1256\" /></a></p> \n<p>There is also a summary file that I keep in the code repo to quickly look up the changes made to complete the upgrade.</p> \n<p>I spend some time reviewing the files. Then, I choose <strong>OK</strong> to accept all changes.</p> \n<p>Now the patch has been successfully applied, and the proposed changes merged with the code. I commit changes to my repo and move on to focus on business-critical changes that have been waiting for the migration to be completed.</p> \n<p><span><strong>Things to know<br /> </strong></span>The preview of <a href=\"http://aws.amazon.com/q/aws/code-transformation\">Amazon Q Code Transformation</a> is available today for customers on the <a href=\"https://aws.amazon.com/codewhisperer/pricing/\">Amazon CodeWhisperer Professional Tier</a> in the <a href=\"https://aws.amazon.com/intellij/\">AWS Toolkit for IntelliJ IDEA</a> and the <a href=\"https://aws.amazon.com/visualstudiocode/\">AWS Toolkit for Visual Studio Code</a>. To use Amazon Q Code Transformation, the <a href=\"https://docs.aws.amazon.com/codewhisperer/latest/userguide/q-authentication.html\">CodeWhisperer administrator needs to give access</a> to the profile used by the organization.</p> \n<p>There is no additional cost for using Amazon Q Code Transformation during the preview. You can upgrade Java 8 and 11 applications that are built using <a href=\"https://maven.apache.org/\">Apache Maven</a> to Java version 17. The project must have the POM file (<code>pom.xml</code>) in the root directory. We’ll soon add the option to transform Windows-based .NET Framework applications to cross-platform .NET and help accelerate migrations to Linux.</p> \n<p>Once a transformation job is complete, you can use a diff view to verify and accept the proposed changes. The final transformation summary provides details of the dependencies updated and code files changed by Amazon Q Code Transformation. It also provides details of any build failures encountered in the final build of the upgraded code that you can use to fix the issues and complete the upgrade.</p> \n<p>Combining Amazon’s long-term investments in automated reasoning and static code analysis with the power of <a href=\"https://aws.amazon.com/generative-ai/\">generative AI</a>, Amazon Q Code Transformation incorporates foundation models that we found to be essential for context-specific code transformations that often require updating a long tail of Java libraries with backward-incompatible changes.</p> \n<p>In addition to generative AI-powered code transformations built by AWS, Amazon Q Code Transformation uses parts of <a href=\"https://www.moderne.io/community\">OpenRewrite</a> to further accelerate Java upgrades for customers. At AWS, many of our services are built with open source components and promoting the long-term sustainability of these communities is critical to us and our customers. That is why it’s important for us to contribute back to communities like OpenRewrite, helping ensure the whole industry can continue to benefit from their innovations. AWS plans to contribute to OpenRewrite recipes and improvements developed as part of Amazon Q Code Transformation to open source.</p> \n<p>“The ability for software to adapt at a much faster pace is one of the most fundamental advantages any business can have. That’s why we’re excited to see AWS using OpenRewrite, the open source automated code refactoring technology, as a component of their service,” said <a href=\"https://www.linkedin.com/in/jonkschneider/\">Jonathan Schneider</a>, CEO and Co-founder of <a href=\"https://www.moderne.io/\">Moderne</a> (the sponsor of OpenRewrite). “We’re happy to have AWS join the OpenRewrite community and look forward to their contributions to make it even easier to migrate frameworks, patch vulnerabilities, and update APIs.”</p> \n<p><span><strong>Upgrade your Java applications now<br /> </strong></span><a href=\"http://aws.amazon.com/q/aws/code-transformation\">Amazon Q Code Transformation product page</a></p> \n<p><span><strong>Read more about Amazon Q</strong></span></p> \n<ul> \n <li><a href=\"https://aws.amazon.com/blogs/aws/introducing-amazon-q-a-new-generative-ai-powered-assistant-preview\">Introducing Amazon Q, a new generative AI-powered assistant (preview)</a></li> \n <li><a href=\"https://aws.amazon.com/blogs/aws/amazon-q-brings-generative-ai-powered-assistance-to-it-pros-and-developers-preview\">Amazon Q brings generative AI-powered assistance to IT pros and developers (preview)</a></li> \n <li><a href=\"https://aws.amazon.com/blogs/aws/improve-developer-productivity-with-generative-ai-powered-amazon-q-in-amazon-codecatalyst-preview/\">Improve developer productivity with generative-AI powered Amazon Q in Amazon CodeCatalyst (preview)</a></li> \n <li><a href=\"https://aws.amazon.com/blogs/aws/new-generative-ai-features-in-amazon-connect-including-amazon-q-facilitate-improved-contact-center-service\">New generative AI features in Amazon Connect, including Amazon Q, facilitate improved contact center service</a></li> \n <li><a href=\"https://aws.amazon.com/blogs/aws/new-amazon-q-in-quicksight-uses-generative-ai-assistance-for-quicker-easier-data-insights-preview/\">New Amazon Q in QuickSight uses generative AI assistance for quicker, easier data insights (preview)</a></li> \n</ul> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"88d23cdbbc558128aca6394f56a31d1215966debdcd396d659b934393bf0fa24","category":"Tech"}