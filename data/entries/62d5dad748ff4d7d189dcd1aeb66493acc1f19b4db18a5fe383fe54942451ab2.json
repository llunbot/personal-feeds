{"title":"Updates to Storage Policy","link":"https://webkit.org/blog/14403/updates-to-storage-policy/","date":1691683259000,"content":"<p>A website can store data on a user’s device using various storage APIs: localStorage, IndexedDB, File System, etc. It’s an important capability allowing websites to be functional offline with good performance by serving local resources. However, the storage capacity is not unlimited. In fact, it is usually much smaller than a device’s disk size. Bad things could happen when the capacity is full like failed storage operations or data eviction. As a web developer, understanding storage policy helps to avoid these unexpected results. This post will discuss the latest storage policy in WebKit apps including Safari.</p>\n<h2>Scope</h2>\n<p>There are many types of website data, and the policy discussed in this post is mostly related to the types created by storage APIs: localStorage, Cache API, IndexedDB, Service Worker, and File System. Other types like cookies and HTTP cache are currently not subject to the policy below — for example, they are not bounded by quota.</p>\n<h2>Storage Quota</h2>\n<p>Storage quota defines how much data can be stored. There are two types of quota in WebKit: origin quota and overall quota.</p>\n<h3>Origin quota</h3>\n<p>The origin quota is the storage limit of one origin. If the limit is reached, the storage operation that requires space will fail, and a <a href=\"https://webidl.spec.whatwg.org/#quotaexceedederror\">QuotaExceededError</a> exception will be thrown. Starting in iOS 17 and macOS 14:</p>\n<ul>\n<li>For a browser app or a web app (Home Screen Web App on iOS or Web App added to dock on macOS), the origin quota is up to 60% of the total disk space.</li>\n<li>For other apps, the origin quota is up to 20% of the total disk space</li>\n</ul>\n<p>An app is a browser app if it can be set as default browser (see <a href=\"https://developer.apple.com/documentation/xcode/preparing-your-app-to-be-the-default-browser\">Apple Developer documentation</a>). With this change, Safari no longer prompts users about a website wanting to use more space. To ensure a web app works after being created from a web page loaded in browser, it has the same quota as a browser app.</p>\n<p>A cross-origin frame uses a different storage partition than the frame it is embedded in to prevent tracking, and thus it has a different quota. The quota is currently 1/10th of the main frame’s origin quota.</p>\n<h3>Overall quota</h3>\n<p>The overall quota is the storage limit of all origins. Reaching the limit can lead to data eviction, which releases storage used by the app. Starting in iOS 17 and macOS 14:</p>\n<ul>\n<li>For a browser app or a web app, overall quota is up to 80% of the total disk space.</li>\n<li>For other apps, overall quota is up to 15% of the total disk space.</li>\n</ul>\n<h2>Storage Eviction</h2>\n<p>Eviction means automatic website data deletion that is not initiated by the user or website. It can happen under a few conditions: when exceeding the overall quota, when the system is under storage pressure, or when the site has not been interacted with by the user for some time (see <a href=\"https://webkit.org/tracking-prevention/#intelligent-tracking-prevention-itp\">Intelligent Tracking Prevention</a>).</p>\n<p>WebKit normally evicts data on an origin basis: the data of an origin will be deleted as a whole. The ordering of origins to be deleted is decided using a least-recently-used policy. The last use time is the time of the last user interaction, or the time of the last storage operation.</p>\n<p>Origin might be excluded from eviction if it has active page at the time of eviction, or its storage is in persistent mode. By default, all origins use a best-effort mode, which means their persistence is not guaranteed and their data can be evicted. An origin can request persistent mode using the Storage API introduced below.</p>\n<h2>Storage API</h2>\n<p>Different browsers may have different storage policies, and the <a href=\"https://storage.spec.whatwg.org/\">Storage API</a> provides a standard way for a website to get information about the current storage policy. Starting in iOS 17 and macOS 14, the Storage API is fully supported in WebKit.</p>\n<p>An origin can get estimated usage and quota values with <code>StorageManager.estimate()</code>. Usage indicates how much space is already used, and the quota is the origin quota.</p>\n<pre><code><span>if</span> (<span>navigator</span>.<span>storage</span> <span>&amp;</span><span>&amp;</span> <span>navigator</span>.<span>storage</span>.<span>estimate</span>) {\n    <span>const</span> <span>storageEstimate</span> <span>=</span> <span>await</span> <span>navigator</span>.<span>storage</span>.<span>estimate</span>();\n    <span>const</span> <span>availableSpace</span> <span>=</span> <span>storageEstimate</span>.<span>quota</span> <span>&gt;</span> <span>storageEstimate</span>.<span>usage</span> <span>?</span> <span>storageEstimate</span>.<span>quota</span> <span>-</span> <span>storageEstimate</span>.<span>usage</span> <span>:</span> <span>0</span>;\n}\n</code></pre>\n<p>Note that the quota is an upper limit of how much can be stored — there is no guarantee that a site can store that much, so error handling for <code>QuotaExceededError</code> is necessary. Also, to reduce fingerprinting risk introduced by exposing usage and quota, quota might change based on factors like existing usage and site visit frequency.</p>\n<p>An origin can check whether storage is in persistent mode with <code>StorageManager.persisted()</code> and request to change the mode to be persistent with <code>StorageManager.persist()</code>. WebKit currently grants a request based on heuristics like whether the website is opened as a Home Screen Web App.</p>\n<pre><code><span>if</span> (<span>navgator</span>.<span>storage</span> <span>&amp;</span><span>&amp;</span> <span>navigator</span>.<span>storage</span>.<span>persisted</span>) {\n    <span>const</span> <span>persistent</span> <span>=</span> <span>await</span> <span>navigator</span>.<span>storage</span>.<span>persisted</span>();\n    <span>if</span> (<span>!</span><span>persistent</span> <span>&amp;</span><span>&amp;</span> <span>navigator</span>.<span>storage</span>.<span>persist</span>)\n        <span>const</span> <span>result</span> <span>=</span> <span>await</span> <span>navigator</span>.<span>storage</span>.<span>persist</span>();\n}\n</code></pre>\n<p>If your website or web app uses storage APIs and expects to store a lot, you should adopt the Storage API to make most out of limited space. If you have any feedback or encounter an issue, please file a bug on <a href=\"http://bugs.webkit.org/\">bugs.webkit.org</a> under component “Website Storage”.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"62d5dad748ff4d7d189dcd1aeb66493acc1f19b4db18a5fe383fe54942451ab2","category":"Tech"}