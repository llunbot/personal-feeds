{"title":"Smashing Animations Part 3: SMIL’s Not Dead Baby, SMIL’s Not Dead","link":"https://smashingmagazine.com/2025/05/smashing-animations-part-3-smil-not-dead/","date":1747814400000,"content":"<p>The SMIL specification was introduced by the W3C in 1998 for synchronizing multimedia. This was long before CSS animations or JavaScript-based animation libraries were available. It was built into SVG 1.1, which is why we can still use it there today.</p>\n<p>Now, you might’ve heard that <a href=\"https://css-tricks.com/smil-is-dead-long-live-smil-a-guide-to-alternatives-to-smil-features\">SMIL is dead</a>. However, it’s alive and well since Google reversed a decision to deprecate the technology almost a decade ago. It remains a terrific choice for designers and developers who want simple, semantic ways to add animations to their designs.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/1-yogi-bear-show.png\" /></p>\n<p><strong>Tip</strong>: <em>There’s now a website where you can see all my <a href=\"https://stuffandnonsense.co.uk/toon-titles\">Toon Titles</a>.</em></p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/2-mike-worth-website.png\" /></p>\n<p>Mike loves ’90s animation — especially <a href=\"https://en.wikipedia.org/wiki/DuckTales_(1987_TV_series\">Disney’s</a>) <a href=\"https://en.wikipedia.org/wiki/DuckTales_(1987_TV_series\"><em>Duck Tales</em></a>). Unsurprisingly, my taste in cartoons stretches back a little further to <a href=\"https://en.wikipedia.org/wiki/Hanna-Barbera\">Hanna-Barbera</a> shows like Dastardly and Muttley in <em>Their Flying Machines</em>, <em>Scooby-Doo</em>, <em>The Perils of Penelope Pitstop</em>, <em>Wacky Races</em>, and, of course, <a href=\"https://en.wikipedia.org/wiki/Yogi_Bear\"><em>The Yogi Bear Show</em></a>. So, to explain how this era of animation relates to SVG, I’ll be adding SMIL animations in SVG to title cards from some classic Yogi Bear cartoons.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/3-yogi-bear-show.png\" /></p>\n<p>Fundamentally, animation changes how an element looks and where it appears over time using a few basic techniques. That might be simply shifting an element up or down, left or right, to create the appearance of motion, like Yogi Bear moving across the screen. </p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/4-yogi-bear-title-card.png\" /></p>\n<p>Rotating objects around a fixed point can create everything, from simple spinning effects to natural-looking movements of totally normal things, like a bear under a parachute falling from the sky.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/5-yogi-bear-title-card-design.png\" /></p>\n<p>Scaling makes an element grow, shrink, or stretch, which can add drama, create perspective, or simulate depth.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/6-yogi-bear-title-card.png\" /></p>\n<p>Changing colour and transitioning opacity can add atmosphere, create a mood, and enhance visual storytelling. Just these basic principles can create animations that attract attention and improve someone’s experience using a design.</p>\n<p>These results are all achievable using CSS animations, but some SVG properties can’t be animated using CSS. Luckily, we can do more — and have much more fun — using SMIL animations in SVG. We can combine complex animations, move objects along paths, and control when they start, stop, and everything in between.</p>\n<p>Animations can be embedded within any SVG element, including <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorials/SVG_from_scratch/Basic_shapes\">primitive shapes</a> like circles, ellipses, and rectangles. They can also be encapsulated into groups, paths, and polygons:</p>\n<pre><code>&lt;circle ...&gt;\n  &lt;animate&gt;...&lt;/animate&gt;\n&lt;/circle&gt;\n</code></pre>\n\n<p>Animations can also be defined outside an element, elsewhere in an SVG, and connected to it using an <code>xlink</code> attribute:</p>\n<pre><code>&lt;g id=\"yogi\"&gt;...&lt;/g&gt;\n  ...\n&lt;animate xlink:href=\"#yogi\"&gt;…&lt;/animate&gt;\n</code></pre>\n\nBuilding An Animation\n<p><code>&lt;animate&gt;</code> is just one of several animation elements in SVG. Together with an <code>attributeName</code> value, it enables animations based on one or more of an element’s attributes.</p>\n<p>Most animation explanations start by moving a primitive shape, like this exciting circle:</p>\n<pre><code>&lt;circle\n  r=\"50\"\n  cx=\"50\" \n  cy=\"50\" \n  fill=\"#062326\" \n  opacity=\"1\"\n/&gt;\n</code></pre>\n\n<p>Using this <code>attributeName</code> property, I can define which of this circle’s attributes I want to animate, which, in this example, is its <code>cx</code> (x-axis center point) position:</p>\n<pre><code>&lt;circle ... &gt;\n  &lt;animate attributename=\"cx\"&gt;&lt;/animate&gt;\n&lt;/circle&gt;\n</code></pre>\n\n<p>On its own, this does precisely nothing until I define three more values. The <code>from</code> keyword specifies the circle’s initial position, <code>to</code>, its final position, and the <code>dur</code>-ation between those two positions:</p>\n<pre><code>&lt;circle ... &gt;\n  &lt;animate \n  attributename=\"cx\"\n  from=\"50\" \n  to=\"500\"\n  dur=\"1s\"&gt;\n  &lt;/animate&gt;\n&lt;/circle&gt;\n</code></pre>\n\n<p>If I want more precise control, I can replace <code>from</code> and <code>to</code> with a set of <code>values</code> separated by semicolons:</p>\n<pre><code>&lt;circle ... &gt;\n  &lt;animate \n  attributename=\"cx\"\n  values=\"50; 250; 500; 250;\"\n  dur=\"1s\"&gt;\n  &lt;/animate&gt;\n&lt;/circle&gt;\n</code></pre>\n\n<p>Finally, I can define how many times the animation repeats (<code>repeatcount</code>) and even after what period that repeating should stop (<code>repeatdur</code>):</p>\n<pre><code>&lt;circle ... &gt;\n  &lt;animate \n  attributename=\"cx\"\n  values=\"50; 250; 500; 250;\"\n  dur=\"1s\"\n  repeatcount=\"indefinite\"\n  repeatdur=\"180s\"&gt;\n&lt;/circle&gt;\n</code></pre>\n\n<p>Most SVG elements have attributes that can be animated. This title card from 1959’s <a href=\"https://yogibear.fandom.com/wiki/Brainy_Bear\">“Brainy Bear” episode</a> shows Yogi in a crazy scientist‘s brain experiment. Yogi’s head is under the dome, and energy radiates around him.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/7-yogi-bear-show.png\" /></p>\n<p>To create the buzz around Yogi, my SVG includes three <code>path</code> elements, each with <code>opacity</code>, <code>stroke</code>, and <code>stroke-width</code> attributes, which can all be animated:</p>\n<pre><code>&lt;path opacity=\"1\" stroke=\"#fff\" stroke-width=\"5\" ... /&gt;\n</code></pre>\n\n<p>I animated each path’s <code>opacity</code>, changing its value from <code>1</code> to <code>.5</code> and back again:</p>\n<pre><code>&lt;path opacity=\"1\" ... &gt;\n  &lt;animate \n    attributename=\"opacity\"\n    values=\"1; .25; 1;\"\n    dur=\"1s\"\n    repeatcount=\"indefinite\"&gt;\n  &lt;/animate&gt;\n&lt;/path&gt;\n</code></pre>\n\n<p>Then, to radiate energy from Yogi, I specified when each animation should <code>begin</code>, using a different value for each <code>path</code>:</p>\n<pre><code>&lt;path ... &gt;\n  &lt;animate begin=\"0\" … &gt;\n&lt;/path&gt;\n\n&lt;path ... &gt;\n  &lt;animate begin=\".5s\" … &gt;\n&lt;/path&gt;\n\n&lt;path ... &gt;\n  &lt;animate begin=\"1s\" … &gt;\n&lt;/path&gt;\n</code></pre>\n\n<p>I’ll explain more about the <code>begin</code> property and how to start animations after this short commercial break.</p>\n<p>Try this yourself:</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/8-yogi-bear-show.png\" /></p>\n<p>I needed two types of transform animations to generate the effect of Yogi drifting gently downwards: <code>translate</code>, and <code>rotate</code>. I first added an <code>animatetransform</code> element to the group, which contains Yogi and his chute. I defined his initial vertical position — <code>1200</code> off the top of the <code>viewBox</code> — then translated his descent to <code>1000</code> over a 15-second duration:</p>\n<pre><code>&lt;g transform=\"translate(1200, -1200)\"&gt;\n  ...\n  &lt;animateTransform\n    attributeName=\"transform\"\n    type=\"translate\"\n    values=\"500,-1200; 500,1000\"\n    dur=\"15s\"\n    repeatCount=\"1\" \n  /&gt;\n&lt;/g&gt;\n</code></pre>\n\n<p>Yogi appears to fall from the sky, but the movement looks unrealistic. So, I added a second <code>animatetransform</code> element, this time with an indefinitely repeating +/- 5-degree rotation to swing Yogi from side to side during his descent:</p>\n<pre><code>&lt;animateTransform\n  attributeName=\"transform\"\n  type=\"rotate\"\n  values=\"-5; 5; -5\"\n  dur=\"14s\"\n  repeatCount=\"indefinite\"\n  additive=\"sum\" \n/&gt;\n</code></pre>\n\n<p>Try this yourself:</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/9-yogi-bear-show.png\" /></p>\n<p>By default, the arrow is set loose when the page loads. Blink, and you might miss it. To build some anticipation, I can <code>begin</code> the animation two seconds later:</p>\n<pre><code>&lt;animatetransform\n  attributename=\"transform\"\n  type=\"translate\"\n  from=\"0 0\"\n  to=\"750 0\"\n  dur=\".25s\"\n  begin=\"2s\"\n  fill=\"freeze\"\n/&gt;\n</code></pre>\n\n<p>Or, I can let the viewer take the shot when they click the arrow:</p>\n<pre><code>&lt;animatetransform\n  ...\n  begin=\"click\"\n/&gt;\n</code></pre>\n\n<p>And I can combine the click event and a delay, all with no JavaScript, just a smattering of SMIL:</p>\n<pre><code>&lt;animatetransform\n  ...\n  begin=\"click + .5s\"\n/&gt;\n</code></pre>\n\n<p>Try this yourself by clicking the arrow:</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/10-yogi-bear-show.png\" /></p>\n<p>To bring this title card to life, I needed two groups of paths: one for Yogi and the other for the dog. I translated them both off the left edge of the <code>viewBox</code>:</p>\n<pre><code>&lt;g class=\"dog\" transform=\"translate(-1000, 0)\"&gt;\n  ...\n&lt;/g&gt;\n\n&lt;g class=\"yogi\" transform=\"translate(-1000, 0)\"&gt;\n  ...\n&lt;/g&gt;\n</code></pre>\n\n<p>Then, I applied an <code>animatetransform</code> element to both groups, which moves them back into view:</p>\n<pre><code>&lt;!-- yogi --&gt;\n&lt;animateTransform\n  attributeName=\"transform\"\n  type=\"translate\"\n  from=\"-1000,0\"\n  to=\"0,0\"\n  dur=\"2s\"\n  fill=\"freeze\"\n/&gt;\n\n&lt;!-- dog --&gt;\n&lt;animateTransform\n  attributeName=\"transform\"\n  type=\"translate\"\n  from=\"-1000,0\"\n  to=\"0,0\"\n  dur=\".5s\"\n  fill=\"freeze\"\n/&gt;\n</code></pre>\n\n<p>This sets up the action, but the effect feels flat, so I added another pair of animations that bounce both characters:</p>\n<pre><code>&lt;!-- yogi --&gt;\n&lt;animateTransform\n  attributeName=\"transform\"\n  type=\"rotate\"\n  values=\"-1,0,450; 1,0,450; -1,0,450\"\n  dur=\".25s\"\n  repeatCount=\"indefinite\"\n/&gt;\n\n&lt;!-- dog --&gt;\n&lt;animateTransform\n  attributeName=\"transform\"\n  type=\"rotate\"\n  values=\"-1,0,450; 1,0,450; -1,0,450\"\n  dur=\"0.5s\"\n  repeatCount=\"indefinite\"\n/&gt;\n</code></pre>\n\n<p>Animations can begin when a page loads, after a specified time, or when clicked. And by naming them, they can also synchronise with other animations.</p>\n<p>I wanted Yogi to enter the frame first to build anticipation, with a short pause before other animations begin, synchronising to the moment he’s arrived. First, I added an ID to Yogi’s <code>translate</code> animation:</p>\n<pre><code>&lt;animateTransform\n  id=\"yogi\"\n  type=\"translate\"\n  ...\n/&gt;\n</code></pre>\n\n<blockquote><strong>Watch out</strong>: For a reason, I can’t, for the life of me, explain why Firefox won’t begin animations with an ID when the ID contains a hyphen. This isn’t smarter than the average browser, but replacing hyphens with underscores fixes the problem.</blockquote>\n\n<p>Then, I applied a <code>begin</code> to his <code>rotate</code> animation, which starts playing a half-second after the <code>#yogi</code> animation ends:</p>\n<pre><code>&lt;animateTransform\n  type=\"rotate\"\n  begin=\"yogi.end + .5s\"\n  ...\n/&gt;\n</code></pre>\n\n<p>I can build sophisticated sets of synchronised animations using the <code>begin</code> property and whether a named animation begins or ends. The bulldog chasing Yogi enters the frame two seconds after Yogi begins his entrance:</p>\n<pre><code>&lt;animateTransform\n  id=\"dog\"\n  type=\"translate\"\n  begin=\"yogi.begin + 2s\"\n  fill=\"freeze\"\n  ...\n/&gt;\n</code></pre>\n\n<p>One second after the dog has caught up with Yogi, a <code>rotate</code> transformation makes him bounce, too:</p>\n<pre><code>&lt;animateTransform\n  type=\"rotate\"\n  ...\n  begin=\"dog.begin + 1s\"\n  repeatCount=\"indefinite\" \n/&gt;\n</code></pre>\n\n<p>The background rectangles whizzing past are also synchronised, this time to one second before the bulldog ends his run:</p>\n<pre><code>&lt;rect ...&gt;\n  &lt;animateTransform\n    begin=\"dog.end + -1s\"\n  /&gt;\n&lt;/rect&gt;\n</code></pre>\n\n<p>Try this yourself:</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/11-yogi-bear-show.png\" /></p>\n<p>In <a href=\"https://yogibear.fandom.com/wiki/The_Runaway_Bear\">“The Runaway Bear”</a> from 1959, Yogi must avoid a hunter turning his head into a trophy. I wanted Yogi to leap in and out of the screen by making him follow a path. I also wanted to vary the speed of his dash: speeding up as he enters and exits, and slowing down as he passes the title text.</p>\n<p>I first added a <code>path</code> property, using its coordinate data to give Yogi a route to follow, and specified a two-second duration for my animation:</p>\n<pre><code>&lt;g&gt;\n  &lt;animateMotion\n    dur=\"2s\"\n    path=\"...\"\n  &gt;\n  &lt;/animateMotion&gt;\n&lt;/g&gt;\n</code></pre>\n\n<p>Alternatively, I could add a <code>path</code> element, leave it visible, or prevent it from being rendered by placing it inside a <code>defs</code> element:</p>\n<pre><code>&lt;defs&gt;\n  &lt;path id=\"yogi\" d=\"...\" /&gt;\n&lt;/defs&gt;\n</code></pre>\n\n<p>I can then reference that by using a <code>mpath</code> element inside my <code>animateMotion</code>:</p>\n<pre><code>&lt;animateMotion\n  ...\n  &lt;mpath href=\"#yogi\" /&gt;\n&lt;/animateMotion&gt;\n</code></pre>\n\n<p>I experimented with several paths before settling on the one that delivered the movement shape I was looking for:</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/12-yogi-bear-title-card-recreations.png\" /></p>\n<p>One was too bouncy, one was too flat, but the third motion path was just right. Almost, as I also wanted to vary the speed of Yogi’s dash: speeding him up as he enters and exits and slowing him down as he passes the title text.</p>\n<p>The <code>keyPoints</code> property enabled me to specify points along the motion path and then adjust the duration Yogi spends between them. To keep things simple, I defined five points between <code>0</code> and <code>1</code>:</p>\n<pre><code>&lt;animateMotion\n  ...\n  keyPoints=\"0; .35; .5; .65; 1;\"\n&gt;\n&lt;/animateMotion&gt;\n</code></pre>\n\n<p>Then I added the same number of <code>keyTimes</code> values, separated by semicolons, to control the pacing of this animation:</p>\n<pre><code>&lt;animateMotion\n  ...\n  keyTimes=\"0; .1; .5; .95; 1;\"\n&gt;\n&lt;/animateMotion&gt;\n</code></pre>\n\n<p>Now, Yogi rushes through the first three <code>keyPoints</code>, slows down as he passes the title text, then speeds up again as he exits the <code>viewBox</code>.</p>\n<p>Try this yourself:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/oggryox\">Runaway Bear SVG animation [forked]</a> by <a href=\"https://codepen.io/malarkey\">Andy Clarke</a>.</p>\nSMIL’s Not Dead, Baby. SMIL’s Not Dead\n<p>With their ability to control transformations, animate complex motion paths, and synchronise multiple animations, SMIL animations in SVG are still powerful tools. They can bring design to life without needing a framework or relying on JavaScript. It’s compact, which makes it great for small SVG effects.</p>\n<p>SMIL includes the <code>begin</code> attribute, which makes chaining animations far more intuitive than with CSS. Plus, SMIL lives inside the SVG file, making it perfect for animations that travel with an asset. So, while SMIL is not modern by today’s standards and may be a little bit niche, it can still be magical. </p>\n<p>Don’t let the misconception that SMIL is “dead” stop you from using this fantastic tool.</p>\n<p>Google reversed its decision to deprecate SMIL almost a decade ago, so it remains a terrific choice for designers and developers who want <strong>simple</strong>, <strong>semantic ways</strong> to add animations to their designs.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"2e88fb4da2ba62ff17ee794131c9c10ca73d73be3b58e7c59e62b835940856fa","category":"Tech"}