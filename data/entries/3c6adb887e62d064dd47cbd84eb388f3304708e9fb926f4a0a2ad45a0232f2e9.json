{"title":"[AWS-IoT] Device Provisioning สำหรับสเกลอุปกรณ์หลายๆตัว-1","link":"https://thanapon.info/aws-iot-device-provisioning-1/?utm_source=rss&utm_medium=rss&utm_campaign=aws-iot-device-provisioning-1","date":1647515370000,"content":"<p>สวัสดีครับ เชื่อว่าหลายๆคนต้องมีปัญหาเวลาจะ provision อุปกรณ์หลายร้อยตัวกัน โดยทาง AWS เขาก็ได้แนะนำไว้ 3 วิธีด้วยกันซึ่งก็จะมี</p>\n\n\n\n<ul><li><strong><a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/provision-w-cert.html\" target=\"_blank\">Provisioning devices that have device certificates</a></strong>: เป็นวิธีแรกโดยที่เราจะต้องเพิ่ม certificate เข้าไปกับ firmware เลย</li><li><strong><a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#trusted-user\" target=\"_blank\">Provisioning by trusted user</a></strong>: วิธีนี้เราจะทำการเขียน Application มาตัวหนึ่งแล้วให้ตัว Application ซึ่งอาจจะเป็น Web application/Mobile app มา register อุปกรณ์แทน</li><li><strong><a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#claim-based\" target=\"_blank\">Provisioning by claim</a></strong>: วิธีนี้เราจะต้องสร้าง Claim certificate มา 1 ตัวเพื่อที่จะได้เพิ่มเข้าไปกับ firmware หลังจาก มองง่ายๆเหมือนทำ default certificate ขึ้นมาเพื่อใช้สำหรับลงทะเบียนครั้งแรก</li></ul>\n\n\n\n<p>ซึ่งในบทความนี้เราจะมาลองใช้วิธี <strong><mark>Provisioning by claim</mark></strong> กันนะครับ โดยที่เราจะแยกเป็น 2 ส่วนนะครับ</p>\n\n\n\n<p>ส่วนแรกจะเป็น AWS IoT Core ซึ่งจะเป็นการ config IoT service ให้ provision ผ่าน claim certificate</p>\n\n\n\n<p>อีกส่วนจะเป็นการ Build firmware สำหรับ Provision ใน <mark>ESP32</mark> ซึ่งจะเขียนผ่าน <mark>Visual Studio Code</mark> ที่ลง extension <mark>PlatformIO</mark> ในการพัฒนาครับ</p>\n\n\n\n<h2><strong>มาเริ่มกันเลย</strong>ครับ</h2>\n\n\n\n<h4>สร้าง Claim certificate สำหรับใช้เป็น default certificate ใน Things</h4>\n\n\n\n<ul><li>เข้าไปที่ <strong>AWS IoT</strong> management จากนั้นเลือก <strong>Secure</strong> =&gt; <strong>Policies</strong> =&gt; <strong>Create</strong> <strong>policy</strong> ตรงแท็ปเมนูด้านข้าง</li></ul>\n\n\n\n<blockquote><p>Policy จะเป็นตัวกำหนดสิทธิในการเข้าถึง service ต่างๆ ของ AWS ผ่าน ARN ID</p></blockquote>\n\n\n\n<div><figure><img loading=\"lazy\" src=\"https://thanapon.info/wp-content/uploads/2022/03/image-1-1024x541.png\" alt width=\"768\" height=\"406\" srcset=\"https://thanapon.info/wp-content/uploads/2022/03/image-1-1024x541.png 1024w, https://thanapon.info/wp-content/uploads/2022/03/image-1-300x159.png 300w, https://thanapon.info/wp-content/uploads/2022/03/image-1-768x406.png 768w, https://thanapon.info/wp-content/uploads/2022/03/image-1-1536x812.png 1536w, https://thanapon.info/wp-content/uploads/2022/03/image-1-2048x1082.png 2048w, https://thanapon.info/wp-content/uploads/2022/03/image-1-600x317.png 600w\" /></figure></div>\n\n\n\n<ul><li>ทำการสร้าง Policy โดยที่ผมจะกำหนดเป็น</li></ul>\n\n\n\n<blockquote><p><strong>Policy name</strong>: <mark>esp32_claim_policy</mark></p><p><strong>Policy document</strong>: จะกำหนดตาม Json ด้านล่างนะครับ ซึ่งเราจะต้องเปลี่ยน <strong><mark>&lt;aws-region&gt;</mark></strong>, <mark><strong><strong><mark>&lt;aws-account-id&gt;</mark></strong></strong></mark> และก็ <strong><mark>&lt;templateName&gt;</mark></strong> เองนะครับ <mark>อย่าลืม!!</mark></p><p><strong><mark>templateName</mark></strong> จะขอใช้เป็นชื่อ <mark>esp32_fleet_prov_template</mark></p></blockquote>\n\n\n\n<div><pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iot:Connect\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iot:Publish\",\n                \"iot:Receive\"\n            ],\n            \"Resource\": [\n                \"arn:aws:iot:&lt;aws-region&gt;:&lt;aws-account-id&gt;:topic/$aws/certificates/create/*\",\n                \"arn:aws:iot:&lt;aws-region&gt;:&lt;aws-account-id&gt;:topic/$aws/provisioning-templates/&lt;templateName&gt;/provision/*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"iot:Subscribe\",\n            \"Resource\": [\n                \"arn:aws:iot:&lt;aws-region&gt;:&lt;aws-account-id&gt;:topicfilter/$aws/certificates/create/*\",\n                \"arn:aws:iot:&lt;aws-region&gt;:&lt;aws-account-id&gt;:topicfilter/$aws/provisioning-templates/&lt;templateName&gt;/provision/*\"\n            ]\n        }\n    ]\n}</code></pre></div>\n\n\n\n<ul><li>เมื่อแก้ไขเสร็จแล้ว กด Create ได้เลยครับ</li></ul>\n\n\n\n<div><figure><img loading=\"lazy\" src=\"https://thanapon.info/wp-content/uploads/2022/03/image-2-1024x620.png\" alt width=\"768\" height=\"465\" srcset=\"https://thanapon.info/wp-content/uploads/2022/03/image-2-1024x620.png 1024w, https://thanapon.info/wp-content/uploads/2022/03/image-2-300x182.png 300w, https://thanapon.info/wp-content/uploads/2022/03/image-2-768x465.png 768w, https://thanapon.info/wp-content/uploads/2022/03/image-2-1536x929.png 1536w, https://thanapon.info/wp-content/uploads/2022/03/image-2-2048x1239.png 2048w, https://thanapon.info/wp-content/uploads/2022/03/image-2-600x363.png 600w\" /></figure></div>\n\n\n\n<ul><li>ขั้นต่อไปสร้าง Claim policy สำหรับ embed ลงใน Things ของเรา เลือก <strong>Secure</strong> =&gt; <strong><strong>Certificates</strong></strong> =&gt; <strong>Create</strong> </li></ul>\n\n\n\n<div><figure><img loading=\"lazy\" src=\"https://thanapon.info/wp-content/uploads/2022/03/image-3-1024x513.png\" alt width=\"768\" height=\"385\" srcset=\"https://thanapon.info/wp-content/uploads/2022/03/image-3-1024x513.png 1024w, https://thanapon.info/wp-content/uploads/2022/03/image-3-300x150.png 300w, https://thanapon.info/wp-content/uploads/2022/03/image-3-768x385.png 768w, https://thanapon.info/wp-content/uploads/2022/03/image-3-1536x770.png 1536w, https://thanapon.info/wp-content/uploads/2022/03/image-3-2048x1026.png 2048w, https://thanapon.info/wp-content/uploads/2022/03/image-3-600x301.png 600w\" /></figure></div>\n\n\n\n<ul><li>เมื่อสร้างเสร็จแล้วทำการ Attach policy ที่เราสร้างไปเมื่อกี้เข้าไปได้เลย</li></ul>\n\n\n\n<figure><img loading=\"lazy\" src=\"https://thanapon.info/wp-content/uploads/2022/03/image-4-1024x509.png\" alt width=\"768\" height=\"382\" srcset=\"https://thanapon.info/wp-content/uploads/2022/03/image-4-1024x509.png 1024w, https://thanapon.info/wp-content/uploads/2022/03/image-4-300x149.png 300w, https://thanapon.info/wp-content/uploads/2022/03/image-4-768x382.png 768w, https://thanapon.info/wp-content/uploads/2022/03/image-4-1536x764.png 1536w, https://thanapon.info/wp-content/uploads/2022/03/image-4-2048x1018.png 2048w, https://thanapon.info/wp-content/uploads/2022/03/image-4-600x298.png 600w\" /></figure>\n\n\n\n<p></p>\n\n\n\n<h4>สร้าง Fleet policy สำหรับใช้งานหลังจากที่ Register Things เสร็จแล้ว</h4>\n\n\n\n<ul><li>ยังอยู่ที่ AWS-IoT อยู่นะครับ เลือก <strong>Secure</strong> =&gt; <strong>Policies</strong> =&gt; <strong>Create</strong></li></ul>\n\n\n\n<blockquote><p><strong>Policy name</strong>: <mark>esp32_fleet_policy</mark></p><p><strong>Policy document</strong>: กำหนดค่าตาม JSON ด้านล่างนะครับ อย่าลืมเปลี่ยน <strong><mark>&lt;aws-region&gt;</mark></strong>, <mark><strong><strong><mark>&lt;aws-account-id&gt;</mark></strong></strong></mark> เหมือนเดิม</p><p><strong>ตัวอย่าง</strong>จะเป็นการ Allow MQTT event ทั้งหมดใน AWS IoT นะครับ</p></blockquote>\n\n\n\n<div><pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"iot:Connect\",\n            \"Resource\": \"arn:aws:iot:&lt;aws-region&gt;:&lt;aws-account-id&gt;:*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"iot:Publish\",\n            \"Resource\": \"arn:aws:iot:&lt;aws-region&gt;:&lt;aws-account-id&gt;:*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"iot:Subscribe\",\n            \"Resource\": \"arn:aws:iot:&lt;aws-region&gt;:&lt;aws-account-id&gt;:*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"iot:Receive\",\n            \"Resource\": \"arn:aws:iot:&lt;aws-region&gt;:&lt;aws-account-id&gt;:*\"\n        }\n    ]\n}</code></pre></div>\n\n\n\n<ul><li>เสร็จแล้วเราก็จะได้ Policy ทั้งหมด 2 ตัวด้วยกัน</li></ul>\n\n\n\n<div><figure><img loading=\"lazy\" src=\"https://thanapon.info/wp-content/uploads/2022/03/image-5-1024x622.png\" alt width=\"768\" height=\"467\" srcset=\"https://thanapon.info/wp-content/uploads/2022/03/image-5-1024x622.png 1024w, https://thanapon.info/wp-content/uploads/2022/03/image-5-300x182.png 300w, https://thanapon.info/wp-content/uploads/2022/03/image-5-768x467.png 768w, https://thanapon.info/wp-content/uploads/2022/03/image-5-1536x933.png 1536w, https://thanapon.info/wp-content/uploads/2022/03/image-5-2048x1244.png 2048w, https://thanapon.info/wp-content/uploads/2022/03/image-5-600x365.png 600w\" /></figure></div>\n\n\n\n<p></p>\n\n\n\n<h4>สร้าง Fleet Provisioning Template สำหรับ Register Things</h4>\n\n\n\n<ul><li>เข้าไปที่ <strong>Connect</strong> =&gt; <strong>Fleet provisioning templates</strong> =&gt; <strong>Create</strong></li></ul>\n\n\n\n<figure><img loading=\"lazy\" width=\"1024\" height=\"512\" src=\"https://thanapon.info/wp-content/uploads/2022/03/image-6-1024x512.png\" alt srcset=\"https://thanapon.info/wp-content/uploads/2022/03/image-6-1024x512.png 1024w, https://thanapon.info/wp-content/uploads/2022/03/image-6-300x150.png 300w, https://thanapon.info/wp-content/uploads/2022/03/image-6-768x384.png 768w, https://thanapon.info/wp-content/uploads/2022/03/image-6-1536x769.png 1536w, https://thanapon.info/wp-content/uploads/2022/03/image-6-2048x1025.png 2048w, https://thanapon.info/wp-content/uploads/2022/03/image-6-600x300.png 600w\" /></figure>\n\n\n\n<ul><li>สร้าง Template กันเลยจากนั้นกด Next</li></ul>\n\n\n\n<blockquote><p><strong>Template name</strong>: <mark>esp32_fleet_prov_template</mark></p><p><strong>Provisioning Role</strong>: เลือก Create role ขึ้นมาเลยซึ่งผมจะใช้ชื่อ <mark>esp32_fleet_prov_role</mark></p><p><strong>Pre Provisioning Hook</strong>: ติ้ก “<strong>Don’t use pre-provisioning action</strong>“</p><p><strong>Optional settings</strong>: ในส่วนนี้ ติ้ก “<strong>Use the AWS IoT registry to manage your device fleet option</strong>” ด้วย</p></blockquote>\n\n\n\n<ul><li>จากนั้นจะไปหน้า “<strong>Define AWS IoT policies</strong>” เลือก <strong><mark>Use an existing AWS IoT policy</mark></strong> แล้วเลือก fleet policy name ที่เราสร้างมาก่อนหน้านี้ <mark>esp32_fleet_policy</mark></li></ul>\n\n\n\n<figure><img loading=\"lazy\" width=\"1024\" height=\"750\" src=\"https://thanapon.info/wp-content/uploads/2022/03/image-7-1024x750.png\" alt srcset=\"https://thanapon.info/wp-content/uploads/2022/03/image-7-1024x750.png 1024w, https://thanapon.info/wp-content/uploads/2022/03/image-7-300x220.png 300w, https://thanapon.info/wp-content/uploads/2022/03/image-7-768x563.png 768w, https://thanapon.info/wp-content/uploads/2022/03/image-7-1536x1126.png 1536w, https://thanapon.info/wp-content/uploads/2022/03/image-7-600x440.png 600w, https://thanapon.info/wp-content/uploads/2022/03/image-7.png 1954w\" /></figure>\n\n\n\n<ul><li>ต่อมา Define AWS IoT registry settings ซึ่งจะเป็นส่วนที่กำหนด Things กัน</li></ul>\n\n\n\n<blockquote><p><strong>Thing name prefix</strong>: <mark>esp32dkc_</mark></p><p><strong>Select a group</strong>: สร้าง Group name ขึ้นมาใหม่เลย เช่น <mark>esp32dkc_group</mark></p></blockquote>\n\n\n\n<ul><li>หลังจากกด Create template แล้วเราจะมาที่หน้า <strong>Give certificates or users permission to provision devices</strong></li></ul>\n\n\n\n<blockquote><p>ในส่วนนี้ให้เลือก <mark>Use a certificate previously generated by AWS IoT</mark> ซึ่งในส่วนนี้เราจะเลือก Claim certificate ที่เราสร้างไปก่อนหน้านี้นะครับ [<mark>esp32_claim_policy</mark> ซึ่งมันจะมี <mark>Certificate ID</mark> ด้วยต้องเลือกให้ตรงกันนะครับ] </p><p><mark>ในส่วนนี้ไม่ต้อง Attach Policy เข้าไปนะครับ</mark> จากนั้น Enable Template โลด</p></blockquote>\n\n\n\n<div><figure><img loading=\"lazy\" src=\"https://thanapon.info/wp-content/uploads/2022/03/image-9-1024x655.png\" alt width=\"768\" height=\"491\" srcset=\"https://thanapon.info/wp-content/uploads/2022/03/image-9-1024x655.png 1024w, https://thanapon.info/wp-content/uploads/2022/03/image-9-300x192.png 300w, https://thanapon.info/wp-content/uploads/2022/03/image-9-768x491.png 768w, https://thanapon.info/wp-content/uploads/2022/03/image-9-1536x982.png 1536w, https://thanapon.info/wp-content/uploads/2022/03/image-9-2048x1309.png 2048w, https://thanapon.info/wp-content/uploads/2022/03/image-9-600x384.png 600w\" /></figure></div>\n\n\n\n<div><figure><img loading=\"lazy\" src=\"https://thanapon.info/wp-content/uploads/2022/03/image-8-1024x727.png\" alt width=\"768\" height=\"545\" srcset=\"https://thanapon.info/wp-content/uploads/2022/03/image-8-1024x727.png 1024w, https://thanapon.info/wp-content/uploads/2022/03/image-8-300x213.png 300w, https://thanapon.info/wp-content/uploads/2022/03/image-8-768x545.png 768w, https://thanapon.info/wp-content/uploads/2022/03/image-8-1536x1090.png 1536w, https://thanapon.info/wp-content/uploads/2022/03/image-8-600x426.png 600w, https://thanapon.info/wp-content/uploads/2022/03/image-8.png 1964w\" /></figure></div>\n\n\n\n<p></p>\n\n\n\n<blockquote><p><strong>ในส่วนการ Config AWS IoT Core ก็เรียบร้อยแล้วครับ ส่วนต่อไปจะเป็น Firmware สำหรับ Provisioning ผ่าน MQTT API ที่ทาง AWS เข้า Provide ไว้ให้กัน</strong></p></blockquote>\n\n\n\n<hr />\n\n\n\n<h4>Flow การทำงานคร่าวๆในฝั่ง Firmware จะเหมือนกับ Sequence Diagram ด้านล่างนี้นะครับ</h4>\n\n\n\n<p>ในส่วนของการเชื่อมต่อ MQTT เข้ากับ AWS IoT นั้นเราจะใช้ Claim certificate ที่ generate จาก step ก่อนหน้านี้นะครับซึ่งในที่นี้จะเป็น <mark>certificate ที่เรา attach policy =&gt; esp32_claim_policy ที่ขึ้นต้นด้วย eb8…. [มันจะเป็น เลขหรืออักษรที่ Random มานะครับ จะไม่เหมือนกัน]</mark></p>\n\n\n\n<p>ส่วน MQTT connection จะต้องใช้ X.509 certificate โดยที่เราจะต้องมี Amazon Root CA, Device Certificate และก็ Private key ในการ Authenticate นะครับ ซึ่งเดี๋ยวผมจะมาต่อให้ในอีก 1 Blog สำหรับเรื่อง Firmware เลยละกัน</p>\n\n\n\n<div><figure><img loading=\"lazy\" width=\"777\" height=\"1024\" src=\"https://thanapon.info/wp-content/uploads/2022/03/Device-provisioning-Page-1-777x1024.png\" alt srcset=\"https://thanapon.info/wp-content/uploads/2022/03/Device-provisioning-Page-1-777x1024.png 777w, https://thanapon.info/wp-content/uploads/2022/03/Device-provisioning-Page-1-228x300.png 228w, https://thanapon.info/wp-content/uploads/2022/03/Device-provisioning-Page-1-768x1012.png 768w, https://thanapon.info/wp-content/uploads/2022/03/Device-provisioning-Page-1-1166x1536.png 1166w, https://thanapon.info/wp-content/uploads/2022/03/Device-provisioning-Page-1-1555x2048.png 1555w, https://thanapon.info/wp-content/uploads/2022/03/Device-provisioning-Page-1-600x790.png 600w\" /></figure></div>\n\n\n\n<ol><li>เริ่มต้น Device ทำการ Subscription Topic “<code><mark>$aws/certificates/create/json/accepted</mark></code>” และ “<code><mark>$aws/certificates/create/json/rejected</mark></code>” สำหรับรับ Response body จากการสร้าง Certificate</li><li>Publish MQTT message ไปที่ “<code><mark>$aws/certificates/create/json</mark></code>” ซึ่งภายใน message body เราไม่ต้องกำหนดอะไรไปให้เป็นค่าว่างๆไว้</li><li>เมื่อ Publish สำเร็จ Response body จะวิ่งเข้ามาที่ Topic “<code><mark>$aws/certificates/create/json/accepted</mark></code>” นี้ซึ่งจะมี format ดังนั้น<br /></li></ol>\n\n\n\n<div><pre><code>// Accept response boy\n{\n    \"certificateId\": \"string\",\n    \"certificatePem\": \"string\",\n    \"privateKey\": \"string\",\n    \"certificateOwnershipToken\": \"string\"\n}\n// Reject response boy\n{\n    \"statusCode\": int,\n    \"errorCode\": \"string\",\n    \"errorMessage\": \"string\"\n}</code></pre></div>\n\n\n\n<ol><li>หลังจากที่เราได้รับ Response body มาแล้วจะต้องทำการ handle response body โดยที่เราจะต้องเก็บ <mark>certificatePem</mark> กับ <mark>privateKey</mark> ไว้ภายใน Device เพื่อใช้ในการ Authenticate จริงๆ ส่วน <mark>certificateOwnershipToken</mark> จะใช้ในการ Register Things</li><li>Subscription Topic “<mark><code>$aws/provisioning-templates/&lt;template_name&gt;/provision/json/accepted</code>“</mark> กับ “<mark>$aws/provisioning-templates/&lt;template_name&gt;/provision/json/rejected</mark>”  เพื่อรับ Response body ในกรณีที่ Register สำเร็จหรือเกิด Error ขึ้น ส่วน <mark>&lt;template_name&gt;</mark> จะเป็น ชื่อของ template ที่เราตั้งก่อนหน้านี้ <mark>esp32_fleet_prov_template</mark></li></ol>\n\n\n\n<div><pre><code>// Accept response body\n{\n    \"deviceConfiguration\": {\n        \"string\": \"string\",\n        ...\n    },\n    \"thingName\": \"string\"\n}\n// Reject response body\n{\n    \"statusCode\": int,\n    \"errorCode\": \"string\",\n    \"errorMessage\": \"string\"\n}</code></pre></div>\n\n\n\n<ol><li>Publish MQTT message ไปที่ topic “<code><mark>$aws/provisioning-templates/&lt;template_name&gt;/provision/json</mark></code>” อย่าลืมเปลี่ยน <code><mark>&lt;template_name&gt;</mark></code> เป็น <mark>esp32_fleet_prov_template</mark> โดยที่ message body จะเป็น</li></ol>\n\n\n\n<blockquote><p>ในส่วนนี้จะต้องแนบ <mark>certificateOwnershipToken</mark> พร้อมกับ <code><mark>Parameter</mark></code> ไปด้วยซึ่งจะเป็น <mark>SerialNumber</mark> ของอุปกรณ์</p></blockquote>\n\n\n\n<div><pre><code>{\n    \"certificateOwnershipToken\": \"string\",\n    \"parameters\": {\n        \"SerialNumber\": \"string\"\n    }\n}</code></pre></div>\n\n\n\n<ol><li>เมื่อ Publish message สำเร็จ AWS-IoT จะทำการ Activate Certificate และสร้าง Things ขึ้นมาใหม่ โดยจะใช้ชื่อ <mark>esp32dkc_…….</mark> และ Things group จะอยู่ใน group <mark>esp32dkc_group</mark> นี้</li></ol>\n\n\n\n<figure><img loading=\"lazy\" width=\"1024\" height=\"337\" src=\"https://thanapon.info/wp-content/uploads/2022/03/image-10-1024x337.png\" alt srcset=\"https://thanapon.info/wp-content/uploads/2022/03/image-10-1024x337.png 1024w, https://thanapon.info/wp-content/uploads/2022/03/image-10-300x99.png 300w, https://thanapon.info/wp-content/uploads/2022/03/image-10-768x253.png 768w, https://thanapon.info/wp-content/uploads/2022/03/image-10-1536x505.png 1536w, https://thanapon.info/wp-content/uploads/2022/03/image-10-2048x674.png 2048w, https://thanapon.info/wp-content/uploads/2022/03/image-10-600x197.png 600w\" /></figure>\n\n\n\n<p></p>\n\n\n\n<p>เป็นอันว่าจบการ Provision ผ่าน Claim certificate นะครับ ส่วนเนื้อหาถัดไปจะเป็นการ Build firmware ของ ESP32 นะครับ รอติดตามชมได้เลยครับ สำหรับวันนี้ขอบคุณและสวัสดีครับ</p>\n\n\n\n<h4>อัพเดทภาคต่อครับ <a href=\"https://thanapon.info/aws-iot-device-provisioning-2/\" target=\"_blank\">https://thanapon.info/aws-iot-device-provisioning-2/</a></h4>\n\n\n\n<hr />\n\n\n\n<blockquote><p><a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/iot-provision.html#provisioning-in-iot\" target=\"_blank\">Device provisioning</a></p><cite>AWS provides several different ways to provision a device and install unique client certificates on it. This section describes each way and how to select the best one for your IoT solution. These options are described in detail in the white paper titled, <a href=\"https://d1.awsstatic.com/whitepapers/device-manufacturing-provisioning.pdf\" target=\"_blank\">Device Manufacturing and Provisioning with X.509 Certificates in AWS IoT Core</a></cite></blockquote>\n\n\n\n<blockquote><p><a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/fleet-provision-api.html\">Device provisioning </a><a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/fleet-provision-api.html\" target=\"_blank\">MQTT</a><a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/fleet-provision-api.html\"> API</a></p></blockquote><p>The post <a href=\"https://thanapon.info/aws-iot-device-provisioning-1/\">[AWS-IoT] Device Provisioning สำหรับสเกลอุปกรณ์หลายๆตัว-1</a> first appeared on <a href=\"https://thanapon.info\">Thanapon</a>.</p>","author":"thanapon.tap","siteTitle":"Thanapon","siteHash":"6a039c2f54d76e4c49227d80968f2a30de5427cc57525c047c383ea3563cde5f","entryHash":"3c6adb887e62d064dd47cbd84eb388f3304708e9fb926f4a0a2ad45a0232f2e9","category":"Thai"}