{"title":"ลองใช้งาน Spring Cloud Contract (HTTP) กันหน่อย สำหรับ Contract testing","link":"https://www.somkiat.cc/spring-cloud-contract-with-http/","date":1637211282000,"content":"<div id=\"readability-page-1\" class=\"page\"><div id=\"page\"><article><div id=\"content_box\"><header><div><p><time>November 18, 2021</time> <span><a href=\"https://www.somkiat.cc/category/programming/\" rel=\"category tag\">Programming</a></span></p></div></header><div><figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/11/ContractTestingModel-1024x468.png\" alt=\"\" width=\"552\" height=\"252\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/11/ContractTestingModel-1024x468.png 1024w, https://www.somkiat.cc/wp-content/uploads/2021/11/ContractTestingModel-300x137.png 300w, https://www.somkiat.cc/wp-content/uploads/2021/11/ContractTestingModel-768x351.png 768w, https://www.somkiat.cc/wp-content/uploads/2021/11/ContractTestingModel.png 1200w\" sizes=\"(max-width: 552px) 100vw, 552px\"></figure><p>ในการทดสอบระบบงานพวก RESTful API นั้น ๆ<br>เราสามารถทดสอบได้หลายวิธี ไม่ว่าจะเป็น</p><ul><li>API testing tools เช่น Postman</li><li>Unit, Integration, Component และ End-to-End testing</li></ul><p>แต่อีกตัวที่น่าสนใจคือ <strong><a href=\"https://www.somkiat.cc/tag/contract-testing/\" target=\"_blank\" rel=\"noreferrer noopener\">Contract Testing</a></strong><br>สำหรับการทดสอบการทำงานร่วมกันระหว่าง services ต่าง ๆ</p><p><strong>พอดีมี project ต้องใช้งาน</strong><br>จึงลองสรุป Contract testing ด้วย Spring Cloud Contract ไว้<br>โดยสามารถดูเพิ่มเติมใน <strong><a href=\"https://spring.io/projects/spring-cloud-contract\" target=\"_blank\" rel=\"noreferrer noopener\">Spring Cloud Contract Reference</a></strong><br>จะสนับสนุนทั้ง HTTP และ messaging<br>มาเขียนกันเลย</p><p><strong>ขั้นตอนที่ 1 เริ่มจากการออกแบบการทำงานของผู้ใช้งาน(Consumer)และผู้ให้บริการ (Provider)</strong></p><p>โดยติดต่อกับผ่าน HTTP protocol ปกติด้วย REST + JSON<br>ซึ่งทั้ง consumer และ provider จะต้องมาสรุปรูปแบบของการติดต่อสื่อสาร<br>ว่าจะต้องมีรูปแบบอย่างไร<br>มันคือ API specification นั่นเอง<br>จะเรียกว่า <strong>Contract</strong> หรือสัญญาระหว่างกัน<br>ดังนั้นถ้ามีการเปลี่ยนสัญญาจะรู้ได้ทันที</p><p><strong>ขั้นตอนที่ 2 ทำการสร้าง Contract ขึ้นมา ซึ่งสามารถ execute ได้ ไม่ใช่เป็นเพียงไฟล์เอกสารที่โยนไปมา</strong></p><p>โดยสามารถสร้าง contract ได้หลายรูปแบบ<br>จะเรียกว่า Contract DSL ประกอบไปด้วย</p><ul><li>Java</li><li>Groovy</li><li>Kotlin</li><li>YAML</li></ul><p><strong>ตัวอย่างของ Contract ที่เขียนด้วยภาษา Groovy</strong></p><div itemprop=\"text\" id=\"gist113105158\" translate=\"no\"><template><span aria-label=\"This line has hidden Unicode characters\" data-view-component=\"true\" class=\"bidi-line-alert tooltipped tooltipped-e\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-alert\"><path fill-rule=\"evenodd\" d=\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\"></path></svg></span></template><table data-tab-size=\"8\" data-paste-markdown-skip=\"\" data-tagsearch-lang=\"Groovy\" data-tagsearch-path=\"first-contract.groovy\"><tbody><tr><td id=\"file-first-contract-groovy-L1\" data-line-number=\"1\"></td><td id=\"file-first-contract-groovy-LC1\"><span>import</span> <span>org.springframework.cloud.contract.spec.Contract</span></td></tr><tr><td id=\"file-first-contract-groovy-L2\" data-line-number=\"2\"></td><td id=\"file-first-contract-groovy-LC2\"><span>import</span> <span>org.springframework.http.HttpHeaders</span></td></tr><tr><td id=\"file-first-contract-groovy-L3\" data-line-number=\"3\"></td><td id=\"file-first-contract-groovy-LC3\"><span>import</span> <span>org.springframework.http.MediaType</span></td></tr><tr><td id=\"file-first-contract-groovy-L4\" data-line-number=\"4\"></td><td id=\"file-first-contract-groovy-LC4\"></td></tr><tr><td id=\"file-first-contract-groovy-L5\" data-line-number=\"5\"></td><td id=\"file-first-contract-groovy-LC5\"><span>Contract</span><span>.</span>make {</td></tr><tr><td id=\"file-first-contract-groovy-L6\" data-line-number=\"6\"></td><td id=\"file-first-contract-groovy-LC6\">description <span><span>\"</span>should return all customers<span>\"</span></span></td></tr><tr><td id=\"file-first-contract-groovy-L7\" data-line-number=\"7\"></td><td id=\"file-first-contract-groovy-LC7\">request {</td></tr><tr><td id=\"file-first-contract-groovy-L8\" data-line-number=\"8\"></td><td id=\"file-first-contract-groovy-LC8\">url <span><span>\"</span>/customers<span>\"</span></span></td></tr><tr><td id=\"file-first-contract-groovy-L9\" data-line-number=\"9\"></td><td id=\"file-first-contract-groovy-LC9\">method <span>GET</span>()</td></tr><tr><td id=\"file-first-contract-groovy-L10\" data-line-number=\"10\"></td><td id=\"file-first-contract-groovy-LC10\">}</td></tr><tr><td id=\"file-first-contract-groovy-L11\" data-line-number=\"11\"></td><td id=\"file-first-contract-groovy-LC11\">response {</td></tr><tr><td id=\"file-first-contract-groovy-L12\" data-line-number=\"12\"></td><td id=\"file-first-contract-groovy-LC12\">status <span>200</span></td></tr><tr><td id=\"file-first-contract-groovy-L13\" data-line-number=\"13\"></td><td id=\"file-first-contract-groovy-LC13\">headers {</td></tr><tr><td id=\"file-first-contract-groovy-L14\" data-line-number=\"14\"></td><td id=\"file-first-contract-groovy-LC14\">header(<span>HttpHeaders</span><span>.</span><span>CONTENT_TYPE</span>, <span>MediaType</span><span>.</span><span>APPLICATION_JSON_VALUE</span>)</td></tr><tr><td id=\"file-first-contract-groovy-L15\" data-line-number=\"15\"></td><td id=\"file-first-contract-groovy-LC15\">}</td></tr><tr><td id=\"file-first-contract-groovy-L16\" data-line-number=\"16\"></td><td id=\"file-first-contract-groovy-LC16\">body([[<span>id</span>: <span>1L</span>, <span>name</span>: <span><span>\"</span>Test 01<span>\"</span></span>], [<span>id</span>: <span>2L</span>, <span>name</span>: <span><span>\"</span>Test 02<span>\"</span></span>]])</td></tr><tr><td id=\"file-first-contract-groovy-L17\" data-line-number=\"17\"></td><td id=\"file-first-contract-groovy-LC17\">}</td></tr><tr><td id=\"file-first-contract-groovy-L18\" data-line-number=\"18\"></td><td id=\"file-first-contract-groovy-LC18\">}</td></tr></tbody></table></div><p><strong>ขั้นตอนที่ 3 ในฝั่ง provider ทำการเขียน test โดยนำข้อมูลจาก Contract ที่สร้างไว้มาใช้</strong></p><p>จะเรียกว่าการสร้าง Contract test<br>ในส่วนนี้เราจะเขียนเพียง Based-test class เท่านั้น<br>เพื่อระบุว่าเป็น class หลักของการทดสอบด้วย Contract ดังนี้</p><div itemprop=\"text\" id=\"gist113105158\" translate=\"no\"><template><span aria-label=\"This line has hidden Unicode characters\" data-view-component=\"true\" class=\"bidi-line-alert tooltipped tooltipped-e\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-alert\"><path fill-rule=\"evenodd\" d=\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\"></path></svg></span></template><table data-tab-size=\"8\" data-paste-markdown-skip=\"\" data-tagsearch-lang=\"Java\" data-tagsearch-path=\"BaseTests.java\"><tbody><tr><td id=\"file-basetests-java-L1\" data-line-number=\"1\"></td><td id=\"file-basetests-java-LC1\"><span>@SpringBootTest</span> (classes <span>=</span> <span>ProviderApplication</span><span>.</span>class)</td></tr><tr><td id=\"file-basetests-java-L2\" data-line-number=\"2\"></td><td id=\"file-basetests-java-LC2\"><span>class</span> <span>BaseTests</span> {</td></tr><tr><td id=\"file-basetests-java-L3\" data-line-number=\"3\"></td><td id=\"file-basetests-java-LC3\"></td></tr><tr><td id=\"file-basetests-java-L4\" data-line-number=\"4\"></td><td id=\"file-basetests-java-LC4\"><span>@Autowired</span></td></tr><tr><td id=\"file-basetests-java-L5\" data-line-number=\"5\"></td><td id=\"file-basetests-java-LC5\"><span>private</span> <span>CustomerRestController</span> customerRestController;</td></tr><tr><td id=\"file-basetests-java-L6\" data-line-number=\"6\"></td><td id=\"file-basetests-java-LC6\"></td></tr><tr><td id=\"file-basetests-java-L7\" data-line-number=\"7\"></td><td id=\"file-basetests-java-LC7\"><span>@MockBean</span></td></tr><tr><td id=\"file-basetests-java-L8\" data-line-number=\"8\"></td><td id=\"file-basetests-java-LC8\"><span>private</span> <span>CustomerRepository</span> customerRepository;</td></tr><tr><td id=\"file-basetests-java-L9\" data-line-number=\"9\"></td><td id=\"file-basetests-java-LC9\"></td></tr><tr><td id=\"file-basetests-java-L10\" data-line-number=\"10\"></td><td id=\"file-basetests-java-LC10\"><span>@BeforeEach</span></td></tr><tr><td id=\"file-basetests-java-L11\" data-line-number=\"11\"></td><td id=\"file-basetests-java-LC11\"><span>public</span> <span>void</span> <span>before</span>() {</td></tr><tr><td id=\"file-basetests-java-L12\" data-line-number=\"12\"></td><td id=\"file-basetests-java-LC12\">when(<span>this</span><span>.</span>customerRepository<span>.</span>findAll())</td></tr><tr><td id=\"file-basetests-java-L13\" data-line-number=\"13\"></td><td id=\"file-basetests-java-LC13\">.thenReturn(<span>Arrays</span><span>.</span>asList(<span>new</span> <span>Customer</span>(<span>1L</span>, <span><span>\"</span>Test 01<span>\"</span></span>), <span>new</span> <span>Customer</span>(<span>2L</span>, <span><span>\"</span>Test 02<span>\"</span></span>)));</td></tr><tr><td id=\"file-basetests-java-L14\" data-line-number=\"14\"></td><td id=\"file-basetests-java-LC14\"><span>RestAssuredMockMvc</span><span>.</span>standaloneSetup(<span>this</span><span>.</span>customerRestController);</td></tr><tr><td id=\"file-basetests-java-L15\" data-line-number=\"15\"></td><td id=\"file-basetests-java-LC15\">}</td></tr><tr><td id=\"file-basetests-java-L16\" data-line-number=\"16\"></td><td id=\"file-basetests-java-LC16\"></td></tr><tr><td id=\"file-basetests-java-L17\" data-line-number=\"17\"></td><td id=\"file-basetests-java-LC17\">}</td></tr></tbody></table></div><p><strong>จากนั้นทำการ run test ผ่าน gradle ได้คำสั่ง</strong></p><p>โดยคำสั่งนี้จะทำการ generate test case class จาก contract<br>ที่อยู่ใน folder contract ให้แบบอัตโนมัติ<br>และทำการทดสอบให้อีกด้วย</p><p><strong>ขั้นตอนที่ 4 เมื่อฝั่ง provider ทำการทดสอบผ่านแล้ว ทำการสร้าง stub server และ upload ไปยังตรงกลาง</strong></p><p>การสร้าง stub server จาก Contract นั่นเอง<br>เพื่อให้ทางฝั่ง consumer หรือผู้ใช้งานนำไปใช้<br>เพื่อใช้ในการทดสอบ หรือ มันคือ Mock API server นั่นเอง<br>ถูกสร้างมาให้ทุกครั้งเมื่อมีการเปลี่ยนแปลง</p><p><strong>ขั้นตอนที่ 5 ในฝั่ง consumer ก็ทำการเขียน test case เพื่อใช้งาน Contract test + Stub server</strong></p><p>ทำการใช้งาน stub server ที่สร้างจาก provider<br>และถูกจัดเก็บไว้ใน Apache Maven Repository แบบ local<br>เขียนได้ดังนี้</p><div itemprop=\"text\" id=\"gist113105158\" translate=\"no\"><template><span aria-label=\"This line has hidden Unicode characters\" data-view-component=\"true\" class=\"bidi-line-alert tooltipped tooltipped-e\"><svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-alert\"><path fill-rule=\"evenodd\" d=\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\"></path></svg></span></template><table data-tab-size=\"8\" data-paste-markdown-skip=\"\" data-tagsearch-lang=\"Java\" data-tagsearch-path=\"CustomerGatewayTest.java\"><tbody><tr><td id=\"file-customergatewaytest-java-L1\" data-line-number=\"1\"></td><td id=\"file-customergatewaytest-java-LC1\"><span>@SpringBootTest</span>(<span>webEnvironment</span><span>=</span> <span>WebEnvironment</span><span><span>.</span>NONE</span>)</td></tr><tr><td id=\"file-customergatewaytest-java-L2\" data-line-number=\"2\"></td><td id=\"file-customergatewaytest-java-LC2\"><span>@AutoConfigureStubRunner</span>(<span>ids</span> <span>=</span> <span><span>\"</span>com.example:provider:+:8081<span>\"</span></span>, <span>stubsMode</span> <span>=</span> <span>StubRunnerProperties</span><span>.</span><span>StubsMode</span><span><span>.</span>LOCAL</span>)</td></tr><tr><td id=\"file-customergatewaytest-java-L3\" data-line-number=\"3\"></td><td id=\"file-customergatewaytest-java-LC3\"><span>public</span> <span>class</span> <span>CustomerGatewayTest</span> {</td></tr><tr><td id=\"file-customergatewaytest-java-L4\" data-line-number=\"4\"></td><td id=\"file-customergatewaytest-java-LC4\"></td></tr><tr><td id=\"file-customergatewaytest-java-L5\" data-line-number=\"5\"></td><td id=\"file-customergatewaytest-java-LC5\"><span>@Autowired</span></td></tr><tr><td id=\"file-customergatewaytest-java-L6\" data-line-number=\"6\"></td><td id=\"file-customergatewaytest-java-LC6\"><span>private</span> <span>CustomerGateway</span> gateway;</td></tr><tr><td id=\"file-customergatewaytest-java-L7\" data-line-number=\"7\"></td><td id=\"file-customergatewaytest-java-LC7\"></td></tr><tr><td id=\"file-customergatewaytest-java-L8\" data-line-number=\"8\"></td><td id=\"file-customergatewaytest-java-LC8\"><span>@Test</span></td></tr><tr><td id=\"file-customergatewaytest-java-L9\" data-line-number=\"9\"></td><td id=\"file-customergatewaytest-java-LC9\"><span>void</span> <span>getAllCustomers</span>() {</td></tr><tr><td id=\"file-customergatewaytest-java-L10\" data-line-number=\"10\"></td><td id=\"file-customergatewaytest-java-LC10\"><span>List&lt;<span>Customer</span>&gt;</span> customers <span>=</span> <span>this</span><span>.</span>gateway<span>.</span>getAllCustomers();</td></tr><tr><td id=\"file-customergatewaytest-java-L11\" data-line-number=\"11\"></td><td id=\"file-customergatewaytest-java-LC11\"><span>BDDAssertions</span><span>.</span>then(customers)<span>.</span>size()<span>.</span>isEqualTo(<span>2</span>);</td></tr><tr><td id=\"file-customergatewaytest-java-L12\" data-line-number=\"12\"></td><td id=\"file-customergatewaytest-java-LC12\"><span>BDDAssertions</span><span>.</span>then(customers<span>.</span>iterator()<span>.</span>next()<span>.</span>getId())<span>.</span>isEqualTo(<span>1L</span>);</td></tr><tr><td id=\"file-customergatewaytest-java-L13\" data-line-number=\"13\"></td><td id=\"file-customergatewaytest-java-LC13\"><span>BDDAssertions</span><span>.</span>then(customers<span>.</span>iterator()<span>.</span>next()<span>.</span>getName())<span>.</span>isEqualTo(<span><span>\"</span>Test 01<span>\"</span></span>);</td></tr><tr><td id=\"file-customergatewaytest-java-L14\" data-line-number=\"14\"></td><td id=\"file-customergatewaytest-java-LC14\">}</td></tr><tr><td id=\"file-customergatewaytest-java-L15\" data-line-number=\"15\"></td><td id=\"file-customergatewaytest-java-LC15\">}</td></tr></tbody></table></div><div><p>จากนั้นก็ทดสอบแบบปกติ<br>เพียงเท่านี้เราก็สามารถเริ่มต้นทำ Contract testing<br>ด้วย Spring Cloud Contract ได้แล้ว<br>เป็นอีกแนวทางในการทดสอบและการทำงานร่วมกันที่น่าสนใจ<br>ส่วนเครื่องมืออื่น ๆ ก็เช่น <a href=\"https://docs.pact.io/\" target=\"_blank\" rel=\"noreferrer noopener\">Pact</a> เป็นต้น</p><p>ขอให้สนุกกับการ coding ครับ</p><p>ดูตัวอย่าง code แบบเต็ม ๆ ได้ที่ <strong><a href=\"https://github.com/up1/workshop-spring-contract-testing\" target=\"_blank\" rel=\"noreferrer noopener\">GitHub:Up1</a></strong></p></div></div><div><p><img alt=\"\" src=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=90&amp;d=mm&amp;r=g\" srcset=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=180&amp;d=mm&amp;r=g 2x\" height=\"90\" width=\"90\"></p><h4>Article by <a href=\"https://www.facebook.com/somkiatspns\">Somkiat Puisungnoen</a></h4><p>To be Craftmanship</p></div></div></article></div></div>","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"cf5b1560232a9bc31eaa0be03af68ff23151fb4d3d539e7f5774db2b20af3df8","category":"Thai"}