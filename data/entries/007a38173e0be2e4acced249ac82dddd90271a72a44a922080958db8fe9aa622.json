{"title":"HashiCorp Vault Use Cases and Best Practices on Azure","link":"https://www.hashicorp.com/blog/hashicorp-vault-use-cases-and-best-practices-on-azure","date":1630609200000,"content":"<p>With so many organizations moving to dynamic cloud-based infrastructures, the need for a new paradigm in security and secrets management <a href=\"https://federalnewsnetwork.com/cybersecurity/2021/07/cisa-sees-zero-trust-adoption-coming-into-focus-under-cyber-executive-order/\">has become apparent</a>. Instead of trusting anything or anyone inside a network perimeter, the shift towards zero trust in dynamic environments requires mechanisms for passing credentials between ephemeral, dynamic systems. The new approach is zero trust security: assume that the network perimeter is not secure — trust nothing and authenticate and authorize everything.</p>\n<p>One of the <a href=\"https://www.hashicorp.com/solutions/zero-trust-security\">four key pillars of zero trust</a> is securing machine authentication (authN) and authorization (authZ). Enterprises are now favoring centralized identity brokers and secrets management solutions that can secure machine authentication and authorization throughout their heterogeneous infrastructure assets. For the organizations moving applications to Microsoft Azure, the first solution they might consider is Azure Key Vault. So the first question an Azure user may be asking us is, “Why would I need HashiCorp Vault if I already have Azure Key Vault?”</p>\n<h2><a href=\"#hashicorp-and-microsoft-azure\">»</a><a></a>HashiCorp and Microsoft Azure</h2>\n<p>The first key to answering that question is understanding that HashiCorp and Microsoft have held a partnership for years building integrations that make HashiCorp products work cleanly in tandem with Azure’s native capabilities. Microsoft and HashiCorp both understand that many organizations leverage <a href=\"https://www.vaultproject.io/\">HashiCorp Vault</a> for centralized secrets management not only on Azure, but other environments that span both cloud and on-premises — where Azure’s native features won’t reach.</p>\n<p>How are most of these enterprises with heterogeneous infrastructure using Vault in combination with Azure services? We’ve identified five common use cases.</p>\n<h2><a href=\"#zero-trust-use-cases-for-vault-and-azure-integrations\">»</a><a></a>Zero Trust Use Cases for Vault and Azure Integrations</h2>\n<p>Below we’ve outlined five of the most common use cases of customers using Vault with Azure to support zero trust security initiatives.</p>\n<h3><a href=\"#identity-based-authn-to-vault-using-azure-active-directory\">»</a><a></a>Identity-Based AuthN to Vault Using Azure Active Directory</h3>\n<p>Securing dynamic cloud resources based on identity requires a mechanism for automating secrets management in order to scale effectively and reduce the risk of a breach. Before an application or resource uses Vault to manage or access secrets, it must authenticate to Vault. Vault supports multiple authentication methods (GitHub, LDAP, etc.), including Azure Active Directory (AAD) for system-assigned and user-assigned managed identities. See the <a href=\"https://www.vaultproject.io/docs/concepts/auth\">Vault authentication overview</a> and Vault’s <a href=\"https://www.vaultproject.io/docs/auth/azure\">Azure auth method documentation</a> to get started.</p>\n<h3><a href=\"#dynamic-secrets-generation-for-azure-resources-with-vault\">»</a><a></a>Dynamic Secrets Generation for Azure Resources with Vault</h3>\n<p>A key component for zero trust security is to reduce secrets sprawl for machine-to-machine authorization. Once a system has authenticated to Vault leveraging trusted identities from AAD, Vault can generate secrets on-demand for Azure systems. For example, when an application needs to access Azure Data Lake, it asks Vault for credentials, and Vault will generate a keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up. See the <a href=\"https://learn.hashicorp.com/tutorials/vault/azure-secrets?in=vault/secrets-management\">Azure Secrets Engine hands-on HashiCorp Learn guide</a> for using dynamic credentials in practice.</p>\n<h3><a href=\"#granular-authz-to-azure-resources-with-azure-managed-service-identities\">»</a><a></a>Granular AuthZ to Azure Resources with Azure Managed Service Identities</h3>\n<p>Clients and applications require Azure service principals to authenticate and access Azure services, such as Azure Kubernetes Service (AKS), based on assigned identities that stipulate authorization and access policies. The Azure secrets engine dynamically generates service principals that assign resources an identity and permit access to Azure resources. To lower the overhead of managing service principal credentials, Vault’s Azure secrets engine maps Azure group and role assignments to Vault roles, automating a significant portion of service-principal generation and ensuring that resources authenticating with Azure via Vault have the least privilege based on set policies. See the <a href=\"https://www.vaultproject.io/docs/secrets/azure\">Vault documentation</a> for instructions on how to set up an integration between Azure and Vault’s Azure Secrets Engine.</p>\n<h3><a href=\"#encrypt-everything-vault-kmse-for-root-of-trust-with-azure-key-vault\">»</a><a></a>Encrypt Everything: Vault KMSE for Root of Trust with Azure Key Vault</h3>\n<p>In many highly regulated industries, organizations are looking for highly secure solutions for key management that solidifies the root of trust for their cloud ecosystem to meet strict regulatory requirements for data encryption, such as GDPR and FINMA. For these instances when organizations need to bring their own key to the cloud, the Vault Key Management secrets engine (KMSE) supports lifecycle management of keys in named Azure Key Vault instances. See the <a href=\"https://www.vaultproject.io/docs/secrets/key-management/azurekeyvault\">Vault docs for more information on configuring KMSE</a> to generate keys for Azure Key Vault instances.</p>\n<h3><a href=\"#vault-agent-on-aks-to-automate-secrets-management\">»</a><a></a>Vault Agent on AKS to Automate Secrets Management</h3>\n<p>As organizations look to scale Kubernetes on Azure broadly, securing access to Kubernetes is a top priority. As Kubernetes pods often have short lifespans, giving secrets to applications running on Kubernetes doesn’t scale. HashiCorp Vault can easily deploy centralized secrets management on Azure Kubernetes Services (AKS) via Vault’s Helm chart in just minutes. By leveraging a Vault agent on AKS, users are able to make templates for secrets and automate synchronization with Vault during credential rotation. To learn more about installing Vault as a service on AKS, see the <a href=\"https://learn.hashicorp.com/tutorials/vault/kubernetes-azure-aks?in=vault/kubernetes\">Vault documentation</a>.</p>\n<h2><a href=\"#additional-best-practices-for-running-vault-on-azure\">»</a><a></a>Additional Best Practices for Running Vault on Azure</h2>\n<p>We’ve also outlined five best practices seen by our customers running Vault on Azure infrastructure.</p>\n<h3><a href=\"#auto-unseal-vault-with-azure-key-vault\">»</a><a></a>Auto-Unseal Vault with Azure Key Vault</h3>\n<p>Vault initializes in a sealed state to protect Vault from being accessed by untrusted resources. By default, Vault has five unseal keys, three of which are required to unseal the cluster. While you can distribute one key to a trusted operator to ensure that no one person can unseal Vault alone, this can pose operational challenges and is impractical in some environments. If Vault is running on Azure, you can store a master key in Azure Key Vault and leverage a managed service identity to automatically unseal Vault. See the documentation on <a href=\"https://learn.hashicorp.com/tutorials/vault/autounseal-azure-keyvault?in=vault/auto-unseal\">auto-unseal for Vault on Azure</a> for more information.</p>\n<h3><a href=\"#use-azure-key-vault-to-establish-secure-comms-with-vault-via-tls\">»</a><a></a>Use Azure Key Vault to Establish Secure Comms with Vault via TLS</h3>\n<p>Securing communication from Vault using TLS is a best practice for setup on Azure. However, one challenge in setting up TLS on cloud VMs is the initial secret injection of TLS certificates. Using the Azure Key Vault, you can leverage the Trusted Platform Orchestrator model to securely inject TLS certificates into the VMs, and VMs can be bootstrapped with certificates stored in Azure Key Vault.</p>\n<h3><a href=\"#streamline-vault-image-creation-with-azure-shared-image-gallery\">»</a><a></a>Streamline Vault Image Creation with Azure Shared Image Gallery</h3>\n<p>To enhance an organization’s zero trust posture, it’s important to minimize manual, human controls and automate reliable security processes. Once a VM image for Vault has been created with optimal configurations, you can store the image on Azure Shared Image Gallery to make it available to others within the organization, ensuring that images align with business and security requirements built into role-based access controls (RBACs) of Azure controls, that optimized images can be replicated and deployed easily, and to allow versioning of approved images.</p>\n<h3><a href=\"#encrypt-managed-disks-on-vault-os-and-data-with-azure-kek\">»</a><a></a>Encrypt Managed Disks on Vault (OS and Data) with Azure KEK</h3>\n<p>In the process of creating virtual disks for a VM that will use Vault, the best practice is to add an additional security layer by leveraging Azure Key Vault to generate a Key Encryption Key (KEK) to encrypt the virtual disks. Vault will encrypt data before storing it in Hashicorp Consul or another backend storage system. This additional layer of the KEK provides further mitigation against the risk of a breach.</p>\n<h3><a href=\"#high-availability-for-vault-with-azure-availability-zones\">»</a><a></a>High Availability for Vault with Azure Availability Zones</h3>\n<p>To minimize the impact of an outage, it is a best practice to leverage <a href=\"https://docs.microsoft.com/en-us/azure/availability-zones/az-overview\">Azure Availability Zones</a> to deploy a single Vault cluster across three separate datacenters for high availability. When architecting Vault deployment to meet high-availability standards, consider using HashiCorp Consul as the backend storage for Vault. See the <a href=\"https://learn.hashicorp.com/tutorials/vault/reference-architecture\">Vault documentation</a> on deployment best practices for more information on recommended reference architectures.</p>\n<h2><a href=\"#learn-more\">»</a><a></a>Learn More</h2>\n<p>Implementing a zero trust security model requires a fundamental shift in how you address identity and roles throughout your infrastructure, networking, and application layers. It doesn’t happen overnight, but together, HashiCorp and Microsoft are committed to helping organizations make zero trust security a reality with identity-based security solutions and practical steps for getting started that lower the risk of a breach and accelerate developer productivity.</p>\n<p>Visit <a href=\"https://www.hashicorp.com/solutions/zero-trust-security\">HashiCorp.com</a> to learn more about identity-based zero trust security.</p>","author":"Megan LaFlamme","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"007a38173e0be2e4acced249ac82dddd90271a72a44a922080958db8fe9aa622","category":"Tech"}