{"title":"บันทึกการแบ่งปันเรื่อง Mobile testing ด้วย Appium","link":"https://www.somkiat.cc/sharing-mobile-testing-with-appium/","date":1696078954000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/09/appiumstack-150x150.png\" alt loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/09/appiumstack-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2023/09/appiumstack-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/09/appiumstack.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/09/appiumstack.png\" alt width=\"707\" height=\"381\" /></a></figure>\n\n\n\n<p>มีโอกาสแบ่งปันความรู้เรื่อง Mobile Testing ด้วย Appium และ Robot framework<br />โดยสิ่งที่ทำการแบ่งปันประกอบไปด้วย</p>\n\n\n\n<ul>\n<li>รูปแบบของการทดสอบ</li>\n\n\n\n<li>ขั้นตอนการใช้งาน <strong><a href=\"https://appium.io/\" target=\"_blank\">Appium</a></strong> ในการทดสอบ</li>\n\n\n\n<li>ขั้นตอนในการทดสอบของ app ต่าง ๆ เช่น Native App และ Flutter app</li>\n\n\n\n<li>การเขียน test case ด้วย Robot framework และ library เพิ่มเติม</li>\n\n\n\n<li>การ scale ระบบหรือ platform ของการทดสอบแบบอัตโนมัติของ appium</li>\n</ul>\n\n\n\n<p>มาดูรายละเอียดการแบ่งปันกัน</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>รูปแบบของการทดสอบ Mobile app</strong></p>\n\n\n\n<p>แบ่งออกเป็น 2 ชนิดหลัก ๆ คือ</p>\n\n\n\n<ul>\n<li>External testing หรือ black-box testing</li>\n\n\n\n<li>Internal testing หรือ white-box testing</li>\n</ul>\n\n\n\n<p><strong>โดยที่ External testing เป็นการทดสอบในมุมมองของผู้ใช้งานเป็นหลัก</strong><br />เป็นการทดสอบผ่าน mobile app จริง ๆ <br />ซึ่งมีความน่าเชื่อถือสูง แต่ใช้เวลาในการทดสอบสูง<br />รวมทั้งการ setup ระบบที่เกี่ยวข้อง และ การ initial data ต่าง ๆ เยอะ<br />ผลที่ตามมาคือ การทดสอบไม่ค่อยเสถียร และ ทดสอบซ้ำ ๆ ได้ยากมาก<br />ดังนั้นจึงมักจะต้องทำการ mock  dependency ต่าง ๆ ขึ้นมา<br />รวมทั้งการส่งข้อมูลไปมา จะเข้ารหัส หรือ ไม่เข้ารหัส<br />หรือการทดสอบแบบ flow ต้องกดเยอะ ๆ ไปทุกหน้าเองหรือไม่<br />ยิ่งระบบมี flow ที่ซับซ้อน ยิ่งลำบากไหม<br />ตรงนี้ต้องวางแผนกันก่อนที่จะเริ่มพัฒนานะ</p>\n\n\n\n<p><strong>ส่วน internal testing เป็นการทดสอบในมุมมองของทีมสร้างหรือพัฒนา</strong><br />จะเห็นทุกสิ่งอย่าง ของการพัฒนา mobile app ว่า<br />แต่ละส่วนงานทำงานอย่างไรบ้าง ซึ่งจะมีการทดสอบหลายชนิดเช่น</p>\n\n\n\n<ul>\n<li>Unit testing</li>\n\n\n\n<li>Widget testing (Flutter)</li>\n\n\n\n<li>Integrate testing</li>\n</ul>\n\n\n\n<p>และยังไม่การทดสอบอื่น ๆ อีกเช่น visual testing หรือ พวก snapshot testing<br />เพื่อช่วยเพิ่มความเชื่อมันให้สูงขึ้น<br />แต่ยังต้องเร็ว และ มีคุณภาพที่สูงเสมอ</p>\n\n\n\n<p><strong>การใช้งาน Appium สำหรับทดสอบ Mobile app</strong></p>\n\n\n\n<p>โดยเป็นการทดสอบแบบ External testing นั่นเอง<br />จะต้องมีการติดตั้ง software เยอะใช้ได้ ดังนี้</p>\n\n\n\n<ul>\n<li>Appium server จะติดตั้งผ่าน npm ดังนั้นต้องติดตั้ง NodeJS ก่อน</li>\n\n\n\n<li>ส่วน Appium Server Destop ที่เป็น GUI นั้นเลิกพัฒนาแล้วตั้งแต่ต้นปี 2023 ดังนั้นเลิกใช้ได้แล้ว</li>\n\n\n\n<li>Appium Inspector สำหรับดูว่า element ต่าง ๆ ในหน้าจอของ mobile app เป็นอย่างไร</li>\n\n\n\n<li>โดยที่ Appium Inspector จะรองรับกับ Native app เท่านั้น ส่วน app ที่พัฒนาด้วย Flutter จะไม่สามารถ inspect ได้ ต้องไปใช้งาน Flutter Inspector แทนเอา</li>\n\n\n\n<li>ก่อนที่จะติดตั้ง appium ให้ใช้งาน <a href=\"https://github.com/appium/appium/tree/master/packages/doctor\" target=\"_blank\">appium doctor </a>ในการตรวจสอบ environment ของเครื่องว่ายังขาดอะไรบ้าง ส่วน flutter ก็น flutter doctor ได้เลย</li>\n\n\n\n<li>สำหรับ Flutter app นั้น ทาง appium server จะต้องลง <a href=\"https://github.com/appium/appium-flutter-driver\" target=\"_blank\">flutter driver</a> ด้วย รวมทั้งใน code ก็ต้องเพิ่ม dependency ของ flutter driver อีกด้วย ยังไม่พอใน code ของ widget นั้น ต้องเพิ่ม key เข้าไป เพื่อใช้ในการเข้าถึง widget หรือ element ต่าง ๆ ได้จากชุดการทดสอบ จะเยอะนิดหน่อย !!</li>\n</ul>\n\n\n\n<p><strong>การเขียน test case ด้วย Robot framework</strong></p>\n\n\n\n<ul>\n<li>ถ้าเป็น Native app จะใช้งานผ่าน <a href=\"https://github.com/serhatbolsu/robotframework-appiumlibrary\" target=\"_blank\">AppiumLibrary</a></li>\n\n\n\n<li>ถ้าเป็น Flutter app ที่ใช้งาน appium flutter driver จะใช้งานผ่าย <a href=\"https://github.com/igortavtib/robotframework-appiumflutterlibrary\" target=\"_blank\">AppiumFlutterLibrary</a></li>\n</ul>\n\n\n\n<p>ปล. ระวังเรื่อง selenium library ด้วย !!</p>\n\n\n\n<p><strong>การ Scale appium ด้วย <a href=\"https://appium.io/docs/en/2.1/guides/grid/\" target=\"_blank\">Selenium grid</a></strong></p>\n\n\n\n<p>การทดสอบแบบ EXternal testing นั้น เมื่อจำนวน test case เยอะขึ้น ปัญหาก็ตามมา<br />ยกตัวอย่างเช่น</p>\n\n\n\n<ul>\n<li>เวลาในการทดสอบมากขึ้น</li>\n\n\n\n<li>Regression test ทำได้ไม่บ่อย แปลก ๆ นะ อุตส่าห์ทำ test แล้วนะ</li>\n\n\n\n<li>ทำการติดตั้ง software บนเครื่องของคนทดสอบยาก</li>\n\n\n\n<li>ไม่สามารถทดสอบบน mobile หลาย ๆ ชนิด หรือ ยี่ห้อได้ หรือได้ก็ยากมาก</li>\n</ul>\n\n\n\n<p>ดังนั้นเราสามารถลด หรือ แก้ไขปัญหาเหล่านี้<br />ด้วยการสร้าง Mobile testing platform หรือ Mobile farm ด้วย Selenium grid</p>\n\n\n\n<p>มีโครงสร้างการทำงานดังนี้</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/09/Appium-Grid-Architecture-700x369-1.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/09/Appium-Grid-Architecture-700x369-1.jpg\" alt width=\"566\" height=\"298\" /></a></figure>\n\n\n\n<p>ขอให้สนุกกับการทดสอบ Mobile app ด้วย Appium<br />แต่จะให้ดี แนะนำให้ไปทดสอบแบบ internal testing เยอะ ๆ ครับ</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"b993e87096fc053a7b578cf1941f4ac43e43f8cd7eb6716f1a699ee5ac058189","category":"Thai"}