{"title":"สรุปสิ่งที่น่าสนใจกับ Technology Radar Vol. 28","link":"https://www.somkiat.cc/technology-radar-vol-28/","date":1683965544000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/radar-28-150x150.png\" alt srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/05/radar-28-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2023/05/radar-28-75x75.png 75w\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/radar-28.png\" alt /></figure>\n\n\n\n<p>ข้อมูลจาก <strong><a href=\"https://www.thoughtworks.com/content/dam/thoughtworks/documents/radar/2023/04/tr_technology_radar_vol_28_en.pdf\" target=\"_blank\">Technology Radar 28</a></strong> นั้น มีหลายสิ่งที่น่าสนใจ<br />ทั้งเรื่องลอง AI tool ที่ได้รับความนิมยมสูงมาก ๆ<br />นั่นคือ ChatGPT, GitHub Copilot <br />จึงได้เกิดแนวคิด หรือ แนวปฏิบัติ ที่นำเอาไปประยุกต์ใช้งาน<br />ยิ่งในวงการพัฒนา Software นั้น ยิ่งมีความสำคัญมาก ๆ<br />เพื่อช่วยเพิ่ม productivity ต่าง ๆ ให้สูงขึ้น</p>\n\n\n\n<span></span>\n\n\n\n<p>ในเรื่องของ Quality นั้นไม่ใช้ optional<br />แต่มันคือควร build-in เข้าไปในการทำงานเสมอ<br />ยกตัวอย่างเช่น Applying continuous delivery significantly reduces effort, risk and costs of iterating on our ML solutions</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/blg_fig1_meta_effective_machine_learning_pt2-1024x453.png\" alt /></figure>\n\n\n\n<p>รวมทั้งเรื่องของ CI/CD infrastructure as a service<br />เริ่มเข้ามาเป็นสิ่งที่มีหลักแล้ว<br />เพราะว่า การ setup เองภายในองค์กร อาจจะมีขั้นตอนที่เยอะ หรือ ช้ามาก ๆ<br />ดังนั้นเรื่องการใช้งาน CI/CD บน Cloud หรือ Platform ข้างนอก ก็น่าใช้งาน<br />แต่ต้องระวังเรื่องของ Security ด้วยเช่นกัน (<a href=\"https://www.thoughtworks.com/radar/techniques/zero-trust-security-for-ci-cd\" target=\"_blank\">Zero trust security for CI/CD</a>)</p>\n\n\n\n<p>พอพูดถึงเรื่อง Cloud แล้ว<br />เรื่องที่ตามมาก็คือ การคำนวณค่าใช้จ่าย ที่ต้องชัดเจน<br />เพื่อจะได้ไม่เป็นภาระในอนาคต<br />ยกตัวอย่างเครื่องมือ เช่น <a href=\"https://www.infracost.io/\" target=\"_blank\">InfraCost</a></p>\n\n\n\n<p><strong>ในฝั่งของ Data ก็มีชื่องแปลก ๆ ออกมา คือ <a href=\"https://www.cidrdb.org/cidr2021/papers/cidr2021_paper17.pdf\" target=\"_blank\">Lakehouse Architecture</a></strong> !!</p>\n\n\n\n<p>มันคือการรวมเอาความสามารถที่ดีของ Data Lake และ Data Warehouse เข้าด้วยกัน<br />นั่นคือเรื่องการ ระบบที่ scaleได้ง่าย และ performance ในการใช้งานนั่นเอง<br />ช่วยทำให้องค์กร สามารถจัดเก็บ และ วิเคราะห์ข้อมูลขนาดใหญ่<br />อยู่บน platform เดียวไปเลย</p>\n\n\n\n<p><strong>แต่ก็มีหลาย ๆ อย่างที่ให้หยุด หรือ ใช้อย่างระมัดระวัง</strong></p>\n\n\n\n<p>เช่น เรื่อง <a href=\"https://twitter.com/ctford/status/1128774411832762369\" target=\"_blank\">Lambda pinball</a><br />เป็นหนึ่งใน Serverless architecture ซึ่งเป็นวิธีการหนึ่งในการแก้ไขปัญหา<br />แต่พบว่าเริ่มก่อให้เกิดความซับซ้อนขึ้นมา<br />จากการใช้งานหรือออกแบบที่ผิดเป้าหมายของเครื่องมือ<br />แทนที่จะเป็นอิสระแก่กัน<br />กลับทำให้ผูกมัดกันมากขึ้น กลายเป็น distributed mololish แบบใหม่ขึ้นมา<br />เกิด boundary ของ service/component ที่ไม่ชัดเจน <br />หรือทำงานร่วมกันเยอะจนเกินไป<br />จะทดสอบกันอย่างไร<br />จะทำการ debug และ deploy อย่างไร<br />ดังนั้นควรต้องใช้งานอย่างระมัดระวัง</p>\n\n\n\n<p><strong>หรือในการวางแผนงาน ไม่ควรทำการวางแผนแบบ Full utilization</strong></p>\n\n\n\n<p>นั่นคือ ควรทำการเผื่อเวลาให้ทีมไว้ทำอย่างอื่นบ้าง<br />เพื่อรองรับงานที่เราไม่คาดฝัน เช่น production issue เป็นต้น<br />เพื่อช่วยให้เราเน้นที่คุณภาพมากขึ้น<br />เพื่อช่วยให้มีเวลาไปปรับปรุง หรือ แก้ไขของเดิมให้ดียิ่งขึ้น<br />ไม่ใช่ทำการอัดงานเข้ามามาก ๆ ในทุก ๆ รอบของการทำงาน</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"e957a8d9d6c57c1edd1247f32f5d81e47f2b6993c08940518a49f8e1724163d5","category":"Thai"}