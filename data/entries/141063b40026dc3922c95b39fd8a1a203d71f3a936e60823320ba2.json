{"title":"Language Maturity by Library","link":"https://blog.whs.in.th/node/3595","date":1636561266000,"content":"<p>ช่วงนึงเคยนั่งดูภาษาใหม่ๆ เผื่อจะเลือกมาเขียน</p>\n<p>อย่างนึงที่พบคือภาษาเองไม่ได้สำคัญเท่ากับ library ที่ภาษานั้นมี เช่น คนเขียน Ruby กลุ่มใหญ่ๆ ก็ไปเพราะ Ruby on Rails, ถ้าจะเขียน data science ถ้าไม่ใช้ Python แล้วก็ทำงานลำบากมาก</p>\n<p>ตอนที่หัด Rust แรกๆ นานมาแล้ว ตอนนั้นก็พบว่า library ของภาษาค่อนข้างมี maturity ต่ำมาก คือบางอันก็มีแต่ใช้งานไม่ได้ บางอันก็ไม่มี เลยคิดว่าทำ checklist ขึ้นมาว่าภาษาควรจะมี library อะไรบ้างถึงจะใช้งานทั่วไปได้บ้าง เวลา evaluate ภาษาจะได้ดูได้ง่ายขึ้นว่ามันพร้อมใช้งานแล้วหรือยัง</p>\n<h2>Language fundamentals</h2>\n<p>คิดว่าภาษาสมัยใหม่น่าจะมีพวกนี้อยู่แล้ว อาจจะเป็น first class เลยด้วยซ้ำคือรองรับในภาษาเลย ถ้าเป็นภาษาเก่าแบบ C อาจจะไม่มี</p>\n<ul>\n<li>Unicode string และ function ที่จัดการกับตัวอักษร เช่น to uppercase, lowercase</li>\n<li>Byte array (uint8 array) ในบางภาษามีแต่ string ก็มี ไม่สามารถเก็บ raw bytes ได้</li>\n<li>Data structure ต่างๆ ที่สำคัญคือ ArrayList (Array ที่ไม่ระบุจำนวนสมาชิกล่วงหน้า) และ Map (Key-value store)</li>\n<li>Threading ซึ่งถ้าเป็นภาษาเฉพาะทางหน่อยอาจจะไม่มี เช่น PHP หรือ JavaScript จะไม่อยู่ในแกนของภาษา\n<ul>\n<li>Synchronization primitives เช่น Mutex, RWLock, Barrier, Atomic operations</li>\n</ul>\n</li>\n<li>Timers ต่างๆ เช่น get time, sleep, monotonic clock (นาฬิกาที่เดินไปข้างหน้าอย่างเดียวถึงแม้ user จะปรับเวลาเครื่อง)</li>\n<li>Date/Time calculation (with timezone) ซึ่งความยากคือ timezone เป็นข้อมูลที่ dynamic ประเทศต่างๆ อาจจะปรับเวลา daylight saving เมื่อไรก็ได้ บางภาษาเช่น Java ก็รวมฐานข้อมูลเข้ามาใน runtime บางภาษาเช่น Python ก็มีการเก็บ timezone แต่ไม่มีข้อมูลโลกจริงต้องไปใช้ library ภายนอก (pytz)</li>\n<li>String templating พื้นฐาน ก็คือแบบ sprintf</li>\n<li>Regular Expression</li>\n<li>Pseudorandom และ Secure random</li>\n<li>Path mutation function เช่น basename, dirname, join path</li>\n<li>OS signal handler (ทำอย่างไรเมื่อโดน SIGINT?)</li>\n</ul>\n<p>อีกส่วนที่จะช่วยได้เยอะ คือภาษาสามารถโหลด dynamic library ภาษา C เข้ามาได้และเรียกฟังค์ชั่นจากภาษา C ได้ซึ่งจะทำให้การต่อยอดขั้นถัดไปได้เยอะ</p>\n<h2>Interop</h2>\n<p>โปรแกรมที่ยากกว่า Programming มัธยมมักจะเริ่มต้องเชื่อมต่อกับระบบอื่นๆ บ้าง ซึ่งที่คิดว่าจำเป็นจะต้องมีคือ</p>\n<ul>\n<li>Base64</li>\n<li>JSON serializer/deserializer ซึ่งถ้าให้ดีควรจะใช้งานกับ data structure ใดๆ ของภาษาก็ได้ (POJO)</li>\n<li>TCP/UDP socket</li>\n<li>TLS socket ซึ่งง่ายที่สุดก็คือใช้ C FFI คุยกับ OpenSSL แต่บางภาษาก็อาจจะ implement ใน runtime แล้วไม่มี API ให้</li>\n<li>Data encryption, hashing ซึ่งส่วนมากที่เห็นก็จะใช้ OpenSSL ทำเหมือนกัน</li>\n<li>Byte stream encoder/decoder</li>\n<li>Gzip</li>\n<li>HTTP ซึ่งต้องใช้ฟีเจอร์หลายๆ ข้อด้านบน</li>\n</ul>\n<h2>Advanced language fundamentals</h2>\n<ul>\n<li>Unit testing library\n<ul>\n<li>Report เป็นแบบ Junit XML (ซึ่งก็น่าจะต้องมี XML encoder)</li>\n</ul>\n</li>\n<li>Documentation generator บางภาษาอาจจะไม่มีที่เขียนในภาษาตัวเอง แต่ไปแก้ tool ภาษาอื่นเช่น Sphinx, Doxygen ให้เข้าใจไฟล์ของมันได้แทน</li>\n<li>Command line argument parser ผมค่อนข้าง prefer แบบ UNIX แต่บางภาษา (เช่น Go) ก็ทำแบบของตัวเองก็มี</li>\n<li>Async IO บางภาษาก็ built in ไปเลย เช่น Go หรือหลายๆ ภาษาก็มี await keyword แล้วแต่ยังต้องแยก function ระหว่างประเภทที่เป็น sync กับ async ซึ่งผมคิดว่าไม่ดีเท่าไร (<a href=\"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\">What color is your function?</a>) จุดที่น่าสังเกตในภาษานั้นๆ คือใครจัดการ event loop เช่นใน Go, JavaScript นั้น runtime จัดการให้ ส่วนใน Python ถึงจะมี async แต่เราต้อง start event loop เองทำให้ทำงานลำบาก เรียกว่ามีเป็น library ยังไงก็ไม่ดีเท่า support ภายในภาษาเอง</li>\n<li>Templating ขั้นสูง\n<ul>\n<li>Handlebars คิดว่าเป็นมาตรฐานต่ำสุด คือมี if, loop เท่านั้น</li>\n<li>ขั้นสูงไปกว่านั้นควรจะมี variable filters (หรือ arbitrary function call), auto HTML escape, template inheritance ซึ่งถ้ามีหมดนี่ เท่าที่เห็นมักจะเป็นสไตล์ Django/Jinja (Smarty/Twig, Twigy, Pongo2)</li>\n</ul>\n</li>\n<li>Data validation ซึ่งจริงๆ เขียนเป็น if/else ก็ได้ แต่จะทำให้โค้ดรกและซ้ำซ้อน</li>\n<li>Big number หรือจำนวนที่ใหญ่กว่าขนาด max int ปกติ</li>\n<li>Decimal คือจำนวนทศนิยมที่แม่นยำ มักใช้ในการเงิน</li>\n<li>Logging ซึ่งควรจะมีฟีเจอร์ดังนี้\n<ul>\n<li>Leveled logging คือกำหนดระดับของ log ได้ เช่น trace, debug, info, warning, error, fatal และปิดระดับที่ไม่ต้องการได้</li>\n<li>Logging facility คือ config log level/output แยกตาม module ได้</li>\n<li>JSON format / Human format ท่าที่น่าสนใจคือ library บางตัวเช่น bunyan ออกเป็น JSON เสมอ แล้วค่อย pipe ใส่ tool ให้จัดรูปใหม่บน client side แทน</li>\n<li>Structured logging คือระบุ key-value ประกอบ log ได้โดยไม่ต้องนั่งเขียน message</li>\n</ul>\n</li>\n<li>Curses หรือ terminal GUI</li>\n</ul>\n<h2>Advanced interop</h2>\n<p>Standard ใหม่ๆ ที่ใช้หลายอันเริ่มมีความซับซ้อนสูงจนหลายๆ ภาษาอาจจะมีไม่ครบ ซึ่งที่คิดว่าควรจะมีคือ</p>\n<ul>\n<li>YAML ซึ่งเป็น superset ของ JSON มี edge case มากมาย แต่ก็นิยมใช้เป็น config file จึงควรจะต้องรองรับไว้</li>\n<li>Protobuf 3 ข้อนี้ผมคิดว่าค่อนข้าง opinionated เพราะ Thrift ก็มีคนใช้พอสมควรเหมือนกัน แต่คิดว่าควรจะมี binary encoding สักรูปแบบที่ portable ข้ามภาษาได้</li>\n<li>HTTP/2 ผมยังไม่ค่อยเห็นคน implement API HTTP/2 ออกมาตรงๆ จะเป็นลักษณะว่าทำให้ HTTP client ใช้ HTTP/2 ได้แบบ transparent มากกว่า</li>\n<li>SQL Database Access ซึ่งหลายๆ ภาษามักจะมี API กลาง (PDO, JDBC, database/sql) และ database driver แยกส่วนกันชัดเจน</li>\n</ul>\n<h2>Use case specific</h2>\n<p>ในขั้น use case ที่ใช้งานได้จริง ภาษาควรจะมี library พวกนี้ตามแต่ use case</p>\n<ul>\n<li>gRPC client ถ้ามี 2 ข้อด้านบนแล้วจึงจะสามารถ implement ได้ เช่นเดียวกันผมคิดว่าข้อนี้ค่อนข้าง opinionated มากๆ มันเป็น standard ที่ซับซ้อนมากๆ และยังพอจะ design หลบไปใช้ HTTP ได้อยู่</li>\n<li>gRPC server คิดว่าควรจะแยกข้อกันกับ client ด้วย ผมคิดว่า server สำคัญกว่า client แต่มักจะ implement ยากกว่า ท่าที่ gRPC เคยทำในหลายๆ ภาษา (Python, JavaScript) คือเรียกไปที่ C FFI เลย</li>\n<li>Desktop GUI library ซึ่งแม้แต่ใน Go ผมก็ยังเห็นว่ามันยังไม่ค่อย mature เท่าไร</li>\n<li>Graphics drawing library</li>\n<li>Image processing เช่น เปิดไฟล์ภาพ ย่อขยาย ปรับสี, สว่าง มืด, blur</li>\n<li>Generate QR code อาจจะเป็น terminal หรือ image</li>\n<li>WebSocket client/server</li>\n<li>Monitoring support เช่น Remote exception catcher, tracing, metrics</li>\n<li>Unix function ต่างๆ เช่น syslog, shared memory</li>\n</ul>","author":"whs","siteTitle":"Quietly Verbose","siteHash":"0a917eb1b1aa165b3cb2be8a9465af33ab38bf05f34c55c0e40587","entryHash":"141063b40026dc3922c95b39fd8a1a203d71f3a936e60823320ba2","category":"Thai"}