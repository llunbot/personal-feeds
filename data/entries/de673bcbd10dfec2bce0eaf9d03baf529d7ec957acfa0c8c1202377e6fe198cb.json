{"title":"Sliding 3D Image Frames In CSS","link":"https://smashingmagazine.com/2024/04/sliding-3d-image-frames-css/","date":1712944800000,"content":"<p><a href=\"https://www.smashingmagazine.com/2023/09/revealing-images-css-mask-animations/\">In a previous article</a>, we played with CSS masks to create cool hover effects where the main challenge was to rely only on the <code>&lt;img&gt;</code> tag as our markup. In this article, pick up where we left off by “revealing” the image from behind a sliding door sort of thing — like opening up a box and finding a photograph in it.</p>\n<p><img src=\"https://files.smashing.media/articles/sliding-3d-image-frames-css/1-border-overlay-intersect.png\" /></p>\n<p>This is because the padding has a transition that goes from <code>s - 2*b</code> to <code>0</code>. Meanwhile, the background transitions from <code>100%</code> (equivalent to <code>--s</code>) to <code>0</code>. There’s a difference equal to <code>2*b</code>. The background covers the entire area, while the padding covers less of it. We need to account for this.</p>\n<p>Ideally, the padding transition would take less time to complete and have a small delay at the beginning to sync things up, but finding the correct timing won’t be an easy task. Instead, let’s increase the padding transition’s range to make it equal to the background.</p>\n<pre><code>img {\n  --h: calc(var(--s) - var(--b));\n  padding-top: min(var(--h), var(--s) - 2*var(--b));\n  transition: --h 1s linear;\n}\nimg:hover {\n  --h: calc(-1 * var(--b));\n}\n</code></pre>\n\n<p>The new variable, <code>--h</code>,  transitions from <code>s - b</code> to <code>-b</code> on hover, so we have the needed range since the difference is equal to <code>--s</code>, making it equal to the <code>background</code> and <code>clip-path</code> transitions. </p>\n<p>The trick is the <code>min()</code> function. When <code>--h</code> transitions from <code>s - b</code> to <code>s - 2*b</code>, the padding is equal to <code>s - 2*b</code>. No padding changes during that brief transition. Then, when <code>--h</code> reaches <code>0</code> and transitions from <code>0</code> to <code>-b</code>, the padding remains equal to <code>0</code> since, by default, it cannot be a negative value. </p>\n<p>It would be more intuitive to use <code>clamp()</code> instead:</p>\n<pre><code>padding-top: clamp(0px, var(--h), var(--s) - 2*var(--b));\n</code></pre>\n\n<p>That said, we don’t need to specify the lower parameter since padding cannot be negative and will, by default, be clamped to <code>0</code> if you give it a negative value.</p>\n<p>We are getting much closer to the final result!</p>\n<p><img src=\"https://files.smashing.media/articles/sliding-3d-image-frames-css/2-image-element-four-stages-3d-box.png\" /></p>\n<p>First, we increase the border’s thickness on the left and bottom sides of the image:</p>\n<div>\n<pre><code>img {\n  --b: 10px; /* the image border */\n  --d: 30px; /* the depth */\n\n  border: solid #0000;\n  border-width: var(--b) var(--b) calc(var(--b) + var(--d)) calc(var(--b) + var(--d));\n}\n</code></pre>\n</div>\n\n<p>Second, we add a <code>conic-gradient()</code> on the background to create darker colors around the box:</p>\n<div>\n<pre><code>background: \n  conic-gradient(at left var(--d) bottom var(--d),\n   #0000 25%,#0008 0 62.5%,#0004 0) \n  var(--c);\n</code></pre>\n</div>\n\n<p>Notice the semi-transparent black color values (e.g., <code>#0008</code> and <code>#0004</code>). The slight bit of transparency blends with the colors behind it to create the illusion of a dark variation of the main color since the gradient is placed above the background color.</p>\n<p>And lastly, we apply a <code>clip-path</code> to cut out the corners that establish the 3D box.</p>\n<div>\n<pre><code>clip-path: polygon(var(--d) 0, 100% 0, 100% calc(100% - var(--d)), calc(100% - var(--d)) 100%, 0 100%, 0 var(--d));\n</code></pre>\n</div>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/JjzRWXZ\">The image within a 3D box</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>Now that we see and understand how the 3D effect is built let’s put back the things we removed earlier, starting with the padding:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/ExMgWXR\">Putting back the padding animation</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>It works fine. But note how we’ve introduced the depth (<code>--d</code>) to the formula. That’s because the bottom border is no longer equal to <code>b</code> but <code>b + d</code>.</p>\n<div>\n<pre><code>--h: calc(var(--s) - var(--b) - var(--d));\npadding-top: min(var(--h),var(--s) - 2*var(--b) - var(--d));\n</code></pre>\n</div>\n\n<p>Let’s do the same thing with the linear gradient. We need to decrease its size so it covers the same area as it did before we introduced the depth so that it doesn’t overlap with the conic gradient:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/VwRKpzN\">Putting back the gradient animation</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>We are getting closer! The last piece we need to add back in from earlier is the <code>clip-path</code> transition that is combined with the <code>box-shadow</code>. We cannot reuse the same code we used before since we changed the <code>clip-path</code> value to create the 3D box shape. But we can still transition it to get the sliding result we want.</p>\n<p>The idea is to have two points at the top that move up and down to reveal and hide the <code>box-shadow</code> while the other points remain fixed. Here is a small video to illustrate the movement of the points.</p>\n<p>See that? We have five fixed points. The two at the top move to increase the area of the polygon and reveal the box shadow.</p>\n<div>\n<pre><code>img {\n  clip-path: polygon(\n    var(--d) 0, /* --&gt; var(--d) calc(-1*(var(--s) - var(--d))) */\n    100%     0, /* --&gt; 100%     calc(-1*(var(--s) - var(--d))) */\n\n    /* the fixed points */ \n    100% calc(100% - var(--d)), /* 1 */\n    calc(100% - var(--d)) 100%, /* 2 */\n    0 100%,                     /* 3 */\n    0 var(--d),                 /* 4 */\n    var(--d) 0);                /* 5 */\n}\n</code></pre>\n</div>\n\n<p>And we’re done! We’re left with a nice 3D frame around the image element with a cover that slides up and down on hover. And we did it with zero extra markup or reaching for pseudo-elements!</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/GRejXMK\">3D image with reveal effect</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>And here is the first demo I shared at the start of this article, showing the two sliding variations.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/LYaPPPo\">Image gift box (hover to reveal)</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>This last demo is an optimized version of what we did together. I have written most of the formulas using the variable <code>--h</code> so that I only update one value on hover. It also includes another variation. Can you reverse-engineer it and see how its code differs from the one we did together? </p>\nOne More 3D Example\n<p>Want another fancy effect that uses 3D effects and sliding overlays? Here’s one I put together using a different 3D perspective where the overlay splits open rather than sliding from one side to the other.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/yLwBVGQ\">Image gift box II (hover to reveal)</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>Your homework is to dissect the code. It may look complex, but if you trace the steps we completed for the original demo, I think you’ll find that it’s not a terribly different approach. The sliding effect still combines the <code>padding</code>, the <code>object-*</code> properties, and <code>clip-path</code> but with different values to produce this new effect.</p>\nConclusion\n<p>I hope you enjoyed this little 3D image experiment and the fancy effect we applied to it. I know that adding an extra element (i.e., a parent <code>&lt;div&gt;</code> as a wrapper) to the markup would have made the effect a lot easier to achieve, as would pseudo-elements and translations. But we are here for the challenge and learning opportunity, right?</p>\n<p>Limiting the HTML to only a single element allows us to push the limits of CSS to discover new techniques that can save us time and bytes, especially in those situations where you might not have direct access to modify HTML, like when you’re working in a CMS template. Don’t look at this as an over-complicated exercise. It’s an exercise that challenges us to leverage the power and flexibility of CSS.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"de673bcbd10dfec2bce0eaf9d03baf529d7ec957acfa0c8c1202377e6fe198cb","category":"Tech"}