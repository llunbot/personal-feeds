{"title":"Announcing Amazon Q Developer transformation capabilities for .NET (preview)","link":"https://aws.amazon.com/blogs/aws/announcing-amazon-q-developer-transformation-capabilities-for-net-preview/","date":1733249894000,"content":"<p>.NET Framework, introduced in 2002, runs only on Windows and although it’s still supported, it’s no longer in active development. However, cross-platform .NET, launched in 2016, is open source, runs on Linux, and is lightweight and higher performing. It receives regular updates, with new features and performance improvements every year. By porting your .NET applications from .NET Framework to cross-platform .NET, you can migrate from Windows to Linux. As a result, you can not only take advantage of the latest innovations in the .NET platform, you can also reduce your Microsoft licensing spend.</p> \n<p>At <a href=\"https://aws.amazon.com/\">Amazon Web Services (AWS)</a>, we have been helping you port and modernize your .NET applications from Windows to Linux with tools such as <a href=\"https://aws.amazon.com/porting-assistant-dotnet/\">Porting Assistant for .NET</a>, <a href=\"https://aws.amazon.com/visual-studio-net/\">AWS Toolkit for .NET Refactoring</a>, and <a href=\"https://aws.amazon.com/microservice-extractor/\">AWS Microservice Extractor for .NET</a>.</p> \n<p>Today, we’re announcing the public preview of new <a href=\"https://aws.amazon.com/q/developer/transform\">Amazon Q Developer transformation capabilities for .NET, mainframe, and VMware workloads</a>.</p> \n<p>In this post, I introduce you to <a href=\"https://aws.amazon.com/q/developer/transform#NET\">Amazon Q Developer .NET transformation capabilities</a>, a new <a href=\"https://aws.amazon.com/generative-ai/\">generative AI</a>–powered experience for porting your .NET Framework applications to cross-platform .NET within your integrated development environment (IDE).</p> \n<p>Amazon Q Developer transform for .NET automatically analyzes the codebase, generates a transformation plan, and executes transformation tasks. These tasks include upgrading and replacing NuGet packages and APIs, rewriting deprecated and inefficient code components, and porting to cross-platform .NET.</p> \n<p>Let’s see it in action!</p> \n<p><span><strong>Porting a .NET Framework application to cross-platform .NET</strong></span><br /> I’m using Visual Studio in this walkthrough because Amazon Q Developer transform for .NET is available as a Visual Studio extension. I install the latest version of <a href=\"https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.AWSToolkitforVisualStudio2022\">AWS Toolkit with Amazon Q</a> and sign in using the <a href=\"https://aws.amazon.com/iam/identity-center/\">AWS IAM Identity Center credentials</a> provided by my organization.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/24/1.-GettingStarted.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/24/1.-GettingStarted.png\" alt=\"Getting started with AWS Toolkit with Amazon Q by connecting to IAM Identity Center\" width=\"1862\" height=\"1104\" /></a></p> \n<p>I open a .NET Framework solution that I need to port to the latest long-term support (LTS) version of supported cross-platform .NET, which is currently .NET 8. In the <strong>Solution Explorer</strong>, the option to transform is available as a context menu item for both the entire solution and individual projects. Depending on the size and complexity of the application, I can transform the entire application at once or transform the projects in the application step-by-step. In this walkthrough, I showcase the transformation of one of the projects of the solution.</p> \n<p>I choose the context menu for one of the projects, and then choose <strong>Port Project with Amazon Q Developer</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2.-Context-Menu-2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/2.-Context-Menu-2.png\" alt=\"Context menu of Solution Explorer to choose Port project with Amazon Q Developer\" width=\"558\" height=\"562\" /></a></p> \n<p>This opens a dialog where I choose additional projects to transform and select the target .NET version. I select <strong>.NET 8</strong> and choose <strong>Confirm</strong> to proceed with the transformation.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/24/3-popup.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/24/3-popup.png\" alt=\"Popup of Port project with Q Developer\" width=\"500\" height=\"350\" /></a></p> \n<p>I see the status in the <strong>Code</strong> <strong>Transformation Plan</strong> window and the progress in <strong>Amazon Q Developer Code Transformation Hub</strong> window.</p> \n<p>Though I have selected only one project to transform, all dependent projects will also be transformed by Amazon Q Developer. The selected project and its dependent projects are combined to form a decomposable buildable unit. This is to make sure that the codebase after the transformation is in a successful build state.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/3.-Transformation-Plan-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/3.-Transformation-Plan-1.png\" alt=\"Code Transformation Plan Window and AmazonQ Developer Code Transformation Hub Window\" width=\"1492\" height=\"1166\" /></a></p> \n<p>Amazon Q Developer first builds the project locally and then copies the selected code and dependencies to a secure and ephemeral sandbox environment in AWS for processing. You can use <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk\">customer managed keys</a> for encrypting your code in this environment.</p> \n<p>Amazon Q Developer analyzes the codebase and generates a transformation plan. It then kicks off the transformation workflow and steps through the plan iteratively for each project in the transformation plan. For each project, it upgrades NuGet packages and APIs, updates the startup or runtime configuration, rewrites deprecated code, and debugs errors.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/4.-Transformation-Hub.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/4.-Transformation-Hub.png\" alt=\"Showing transformation progress in Amazon Q Developer Code Transformation Hub\" width=\"2106\" height=\"718\" /></a></p> \n<p>After the transformation is complete, I choose <strong>Transformation Summary by Q Developer</strong> to see the summary. I see the transformation status as succeeded. For each project, it shows <strong>Files changed</strong>, <strong>Packages updated</strong>, <strong>APIs changed</strong>, and <strong>Linux porting status</strong>. In the Linux porting status column, I can see if the project is ported automatically or needs inputs to resolve any pending issues.</p> \n<p><em><strong><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/5.-Transformation-Summary.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/5.-Transformation-Summary.png\" alt=\"Code Transformation Status as Succeeded\" width=\"1694\" height=\"918\" /></a></strong></em></p> \n<p>I can download the Linux readiness report to look into the issues that require manual resolution.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/6.-Download-linux-report-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/6.-Download-linux-report-1.png\" alt=\"Screenshot showing download Linux readiness report\" width=\"1722\" height=\"780\" /></a></p> \n<p>All the code changes are done in the sandbox, and I can review them before applying the updates to my local working repository. To manually review the changes done by Amazon Q Developer, I choose <strong>View Diff</strong> view and then choose <strong>Show changes</strong> for one of the files in the <strong>Amazon Q Developer Transformation Hub</strong> window.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/7-view-diffs.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/7-view-diffs.png\" alt=\"Screnshot showing difference between updated and original code\" width=\"2466\" height=\"1315\" /></a></p> \n<p>After reviewing the changes, I choose <strong>Accept suggested changes</strong> in the <strong>Transformation Summary by Q Developer</strong> window to apply changes to my local working repository.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/8.-Accept-changes-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/8.-Accept-changes-1.png\" alt=\"Screenshot showing Accept suggested changes\" width=\"1696\" height=\"762\" /></a></p> \n<p>I can now continue to work on my local working repository to fix the pending issues in the Linux readiness report and then use the same steps to transform the remaining projects iteratively.</p> \n<p><span><strong>Things to know</strong></span></p> \n<ul> \n <li><strong>Availability – </strong>Amazon Q Developer transformation capabilities for .NET porting are available today in preview with Amazon Q Developer Pro Tier subscription.</li> \n <li><strong>.NET versions supported</strong> – Amazon Q Developer transformation capabilities for .NET supports transforming applications written using .NET Framework versions 3.5+, .NET Core 3.1, and .NET 5+ to the currently supported cross-platform .NET versions such as .NET 8 and .NET 9.</li> \n <li><strong>Application types supported</strong> – Amazon Q Developer transformation capabilities for .NET supports porting C# code projects of the following types: console application, class library, unit tests, web API, Windows Communication Foundation (WCF) service, and business logic layers of Model View Controller (MVC) and Single Page Application (SPA). However, the UI layer such as Razor Views and WebForms are not ported. Also, only the projects with Microsoft authored NuGet package dependencies are supported. For .NET Framework applications dependent on Internet Information Server (IIS), only default IIS configurations are supported for porting to cross-platform .NET.</li> \n</ul> \n<p>To get started, install <a href=\"https://aws.amazon.com/visualstudio/\">AWS Toolkit for Visual Studio</a> and follow instructions in the <a href=\"https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/transform.html\">documentation</a> to port and upgrade your .NET applications.</p> \n<p>– <a href=\"https://www.linkedin.com/in/kprasadrao/\">Prasad</a></p>","author":"Prasad Rao","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"dbb2d18654bb9bca2b4d534a6130b7479dc46a14cfd6d43c13bf5f22ecfca3a6","category":"Tech"}