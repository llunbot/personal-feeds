{"title":"Build Design Systems With Penpot Components","link":"https://smashingmagazine.com/2024/07/build-design-systems-penpot-components/","date":1721296800000,"content":"<p>This article is a sponsored by <a href=\"https://penpot.app/penpot-2.0?utm_source=SmashingMag&amp;utm_medium=Article&amp;utm_id=Components\">Penpot</a></p>\n<p>If you’ve been following along with our Penpot series, you’re already familiar with this exciting open-source design tool and how it is changing the game for designer-developer collaboration. Previously, we’ve explored Penpot’s <a href=\"https://www.smashingmagazine.com/2023/06/penpot-flex-layout-building-css-layouts-design-tool/\">Flex Layout</a> and <a href=\"https://www.smashingmagazine.com/2024/04/penpot-css-grid-layout-designing-superpowers/\">Grid Layout</a> features, which bring the power of CSS directly into the hands of designers.</p>\n<p>Today, we’re diving into another crucial aspect of modern web design and development: <strong>components</strong>. This feature is a part of Penpot’s major 2.0 release, which introduces a host of new capabilities to bridge the gap between design and code further. Let’s explore how Penpot’s implementation of components can supercharge your design workflow and foster even better collaboration across teams.</p>\nAbout Components\n<p>Components are reusable building blocks that form the foundation of modern user interfaces. They encapsulate a piece of UI or functionality that can be reused across your application. This concept of composability — building complex systems from smaller, reusable parts — is a cornerstone of modern web development.</p>\n<p>Why does composability matter? There are several key benefits:</p>\n<ul>\n<li><strong>Single source of truth</strong><br />Changes to a component are reflected everywhere it’s used, ensuring consistency.</li>\n<li><strong>Flexibility with simpler dependencies</strong><br />Components can be easily swapped or updated without affecting the entire system.</li>\n<li><strong>Easier maintenance and scalability</strong><br />As your system grows, components help manage complexity.</li>\n</ul>\n<p>In the realm of design, this philosophy is best expressed in the concept of design systems. When done right, design systems help to bring your design and code together, reducing ambiguity and streamlining the processes.</p>\n<p>However, that’s not so easy to achieve when your designs are built using logic and standards that are much different from the code they’re related to. Penpot works to solve this challenge through its unique approach. Instead of building visual artifacts that only mimic real-world interfaces, UIs in Penpots are built using the same technologies and standards as real working products.</p>\n<p>This gives us much better parity between the media and allows designers to build interfaces that are already expressed as code. It <strong>fosters easier collaboration</strong> as designers and developers can speak the same language when discussing their components. The final result is <strong>more maintainable</strong>, too. Changes created by designers can propagate consistently, making it easier to manage large-scale systems.</p>\n<p>Now, let’s take a look at how components in Penpot work in practice! As an example, I’m going to use the following fictional product page and recreate it in Penpot:</p>\n<p><img src=\"https://files.smashing.media/articles/build-design-systems-penpot-components/1-final-design.png\" /></p>\nComponents In Penpot\n<h3>Creating Components</h3>\n<p>To create a component in Penpot, simply select the objects you want to include and select “Create component” from the context menu. This transforms your selection into a reusable element.</p>\n<h3>Creating Component Variants</h3>\n<p>Penpot allows you to create variants of your components. These are alternative versions that share the same basic structure but differ in specific aspects like color, size, or state.</p>\n<p>You can create variants by using slashes (<code>/</code>) in the components name, for example, by naming your buttons <code>Button/primary</code> and <code>Button/secondary</code>. This will allow you to easily switch between types of a <code>Button</code> component later.</p>\n<h3>Nesting Components And Using External Libraries</h3>\n<p>Components in Penpot can be nested, allowing you to build complex UI elements from simpler parts. This mirrors how developers often structure their code. In other words, you can place components inside one another.</p>\n<p>Moreover, the components you use don’t have to come from the same file or even from the same organization. You can easily share libraries of components across projects just as you would import code from various dependencies into your codebase. You can also import components from external libraries, such as UI kits and icon sets. Penpot maintains <a href=\"https://www.google.com/url?q=https://penpot.app/libraries-templates?utm_source%3DSmashingMag%26utm_medium%3DArticle%26utm_campaign%3DComponents&amp;sa=D&amp;source=docs&amp;ust=1720687336178543&amp;usg=AOvVaw2Esn2Ec0u36wp4ngcc0IPk\">a growing list of such resources</a> for you to choose from, including everything from the large design systems like Material Design to the most popular icon libraries.</p>\n<h3>Organizing Your Design System</h3>\n<p>The new major release of Penpot comes with a redesigned <strong>Assets panel</strong>, which is where your components live. In the Assets panel, you can easily access your components and drag and drop them into designs.</p>\n<p>For the better maintenance of design systems, Penpot allows you to <strong>store your colors and typography as reusable styles</strong>. Same as components, you can name your styles and organize them into hierarchical structures.</p>\n<h3>Configuring Components</h3>\n<p>One of the main benefits of using composable components in front-end libraries such as React is their support of props. Component props (short for properties) allow you a great deal of flexibility in how you configure and customize your components, depending on how, where, and when they are used.</p>\n<p>Penpot offers similar capabilities in a design tool with variants and overrides. You can switch variants, hide elements, change styles, swap nested components within instances, or even change the whole layout of a component, providing flexibility while maintaining the link to the original component.</p>\n<h3>Creating Flexible, Scalable Systems</h3>\n<p>Allowing you to <strong>modify Flex and Grid layouts in component instances</strong> is where Penpot really shines. However, the power of these layout features goes beyond the components themselves.</p>\n<p>With Flex Layout and Grid Layout, you can build components that are much more faithful to their code and easier to modify and maintain. But having those powerful features at your fingertips means that you can also place your components in other Grid and Flex layouts. That’s a big deal as it allows you to test your components in scenarios much closer to their real environment. Directly in a design tool, you can see how your component would behave if you put it in various places on your website or app. This allows you to fine-tune how your components fit into a larger system. It can dramatically reduce friction between design and code and streamline the handoff process.</p>\n<h3>Generating Components Code</h3>\n<p>As Penpot’s components are just web-ready code, one of the greatest benefits of using it is how easily you can export code for your components. This feature, like all of Penpot’s capabilities, is completely free.</p>\n<p>Using Penpot’s Inspect panel, you can quickly grab all the layout properties and styles as well as the full code snippets for all components.</p>\n<h3>Documentation And Annotations</h3>\n<p>To make design systems in Penpot even more maintainable, it includes annotation features to help you document your components. This is crucial for maintaining a <strong>clear design system</strong> and ensuring a <strong>smooth handoff to developers</strong>.</p>\nSummary\n<p>Penpot’s implementation of components and its support for real CSS layouts make it a standout tool for designers who want to work closely with developers. By embracing web standards and providing powerful, flexible components, Penpot enables designers to create <strong>more developer-friendly designs without sacrificing creativity or control</strong>.</p>\n<p>All of Penpot’s features are completely free for both designers and developers. As open-source software, Penpot lets you fully own your design tool experience and makes it accessible for everyone, regardless of team size and budget. </p>\n<p>Ready to dive in? You can explore <a href=\"https://github.com/mikolajdobrucki/penpot-files/raw/89612cbbd00bea5eedcee4bf625ffb07085c8973/Build%20design%20systems%20with%20Penpot%20components.penpot\">the file used in this article</a> by downloading it and importing into your Penpot account.</p>\n<p>As the design tool landscape continues to evolve, Penpot is taking charge of bringing designers and developers closer together. Whether you’re a designer looking to understand the development process or a developer seeking to streamline your workflow with designers, Penpot’s component system is worth exploring.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"0443943a4cc75bd4be1c7023e79ed4723f982fe719d8a290504af1c9f0f0a66e","category":"Tech"}