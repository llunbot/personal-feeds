{"title":"The Potentially Dangerous Non-Accessibility Of Cookie Notices","link":"https://smashingmagazine.com/2023/04/potentially-dangerous-non-accessibility-cookie-notices/","date":1682323200000,"content":"<p>No matter what your stance is on them, no matter what your perspective is on data protection, web advertisement, setting cookies, EU’s General Data Protection Regulation (GDPR), and privacy preferences, cookie consent widgets (or “cookie banners”) are a reality on the web today.</p>\n<p>For this reason, it is worth looking into <em>how</em> accessible and usable these banners are or can be. They have become, for better or worse, a component of the majority of today’s websites. Even more, cookie banners are often the first thing a user encounters. And, of course, they are part of every site of a webpage once they are implemented.</p>\n<p>Sometimes, cookie banners are a technical necessity because of the page’s feature set or because of advertisements on the page. Even more often, cookie banners are not built by the front-end team but are a ready-made solution, like UserCentrics or others.</p>\n<p><img src=\"https://files.smashing.media/articles/potentially-dangerous-accessibility-cookie-notices/1-cookie-consent-widget.png\" /></p>\n<p>Before I explain why the cookie banner deserves special attention regarding its accessibility, let’s quickly explain how the current gold standard of web accessibility, <a href=\"https://www.w3.org/TR/WCAG21/\">Web Content Accessibility Guidelines (WCAG) Version 2.1</a>, works.</p>\n<p>WCAG consists of principles, guidelines, and success criteria. The latter are testable steps to check against a webpage. For example: </p>\n<ul>\n<li>“Is the main language of the document set?”</li>\n<li>“Does this non-text content have a suitable text alternative?”</li>\n<li>“Is it perceivable where my focus is when I’m using the web presence with the keyboard (or another tech that emulates keyboard presses)?”</li>\n</ul>\n<p>You may have noticed that these are “yes or no” questions. Accordingly, this means that the final verdict of any given success criterion is either “pass” or “fail.”</p>\n<p>Additionally, conformance to WCAG, as defined by the W3C (the governing body of the Web), means that none of its success criteria is allowed to “fail” when the whole document needs to be conformant:</p>\n<blockquote>“Conformance to a standard means that you meet or satisfy the ‘requirements’ of the standard. In WCAG 2.0, the ‘requirements’ are the Success Criteria. To conform to WCAG 2.0, you need to satisfy the Success Criteria, that is, there is no content which violates the Success Criteria.”<br /><br />— <a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/conformance.html#uc-conformance-whatis-head\">W3C Working Group Note</a></blockquote>\n\n<p>No nuance here. Going back to our cookie consent interface, this means that the banner (or any other component) alone has the potential to negatively affect the WCAG conformance of an entire web project.</p>\n<p><img src=\"https://files.smashing.media/articles/potentially-dangerous-accessibility-cookie-notices/2-cookie-consent-interface.png\" /></p>\n<p>WCAG conformance could be a big legal deal for many websites, whether part of the public sector in the European Union or the United States, as it is considered to fall under non-discrimination or market access laws or overall human rights to access to information. Webpages frequently must adhere to directives and regulations that directly or indirectly refer to WCAG, often its newest version, and conformance to its level AA standards. Therefore, all the following WCAG criteria are viewed through this lens, being fully aware that they are only a <strong>mere starting point</strong> when it comes to true web accessibility. On top of that, cookie consent interfaces are implemented on every subpage of a website, consequently harming accessibility and conformance throughout an entire website.</p>\n<p>So, in order to not let a faulty cookie banner interface drag down your page’s conformance with accessibility laws and, more importantly, not exclude users from accessing and exercising their rights, let’s list what to look for, what to configure, and what to build properly in the first place.</p>\nContrast Errors\n<p>This is especially relevant when it comes to important controls such as the setting of cookies or the overall acceptance of the recommended cookie set. It is crucial that form controls and text can be sufficiently perceived. Unsurprisingly, a solid contrast is also important for WCAG in general. Namely, in success criteria <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html\">1.4.3</a> and <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html\">1.4.11</a>, both define contrast boundaries.</p>\n<h3>What To Do</h3>\n<p>When you are using a ready-made cookie management solution, try to influence the colors (if possible, potentially in your cookie vendor’s settings) and make sure interactive controls have sufficient color contrast.</p>\n<p>Additionally, if your website relies on a dedicated contrast mode for WCAG conformance, check whether it extends to (or influences) the cookie management interface. I have seen cases in my accessibility auditor practice where this was not considered, and an inaccessible (often branded) color combination was used in the cookie interface, thinking the contrast mode takes care of every color-related violation. But the contrast setting of the website did not affect the third-party cookie banner due to it being, well, third-party and loaded from external sources or after the contrast mode had done its work, resulting in a “Fail” on WCAG’s contrast-related success criteria.</p>\nPseudo Buttons\n<p>Another cookie banner issue can be one thing that is, unfortunately, an error pattern that you can find outside of cookie management: <code>div</code>s or <code>span</code>s with click events posing as links or buttons. These controls may be styled like buttons but lack the semantic information of a button.</p>\n<p>On top of that, these controls usually aren’t <strong>keyboard focusable</strong>. Hence, many serious barriers and WCAG violations are occurring all at once. If we were about to imagine the most “pseudo” button, e.g., a <code>div</code> with a click handler, this would at least violate success criteria <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html\">2.1.1 (Keyboard)</a>, because it is neither reachable nor “activatable,” and <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/name-role-value\">4.1.2 (Name, Role, Value)</a> because it doesn’t “introduce” itself as a button and lacks a programmatic label.</p>\n<h3>What To Do</h3>\n<p>The easiest thing to do, assuming you have built the cookie management interface yourself, is to replace those above-mentioned pseudo buttons with real <code>&lt;button&gt;</code> elements because it provides semantics, focusability, and even keyboard event handlers for free. But even if we don’t talk literally about buttons, the pattern is the same: check your cookie prompt for interactive elements that are built with elements that are only styled to look like “the real thing” but consist of non-semantic <code>div</code>s and <code>span</code>s. This is a red flag for you to implement native interactive elements, like <code>a</code>, <code>button</code>, or <code>input</code> instead.</p>\n<p>The situation gets a lot tougher, of course, when these semantic errors are in a third-party script and are, therefore, beyond your direct influence and control. Understandably, we have to leave the engineering side of things and start to dive into politics of some sort. If you work within an organization where the decision of cookie management infrastructure is outside your control, you have to escalate matters to your supervisors and managers (especially, but not only when your web projects have to adhere to accessibility laws).</p>\n<p>Three abstract steps have to happen:</p>\n<ol>\n<li>Your organization has to become aware of the barrier and potential legal risk — “up” to the powers that have the influence to change technical decisions like these.</li>\n<li>As a consequence, the vendor that provided the faulty cookie banner has to be contacted about the issue.</li>\n<li>A form of pressure should be applied by your organization — not just for your own sake but also regarding all the other web pages where the faulty cookie banner negatively influences accessibility and conformance.</li>\n</ol>\n<p>In a possible fourth step, your company or agency should reflect on its vending process for third-party services and the HTML (and possible barriers) that come with it.</p>\nUnlabeled Form Fields\n<p>When you think about it, the main user control that one could imagine for cookie management widgets is a <strong>form control</strong>: You can select which set of cookies you are willing to accept by interacting with checkboxes in a <code>form</code> element. And, of course, it is important that checkbox inputs are built in the correct way.</p>\n<p>Alas, that is not always the case. While a checkbox and its label may visually appear adjacent, the checkbox can lack a <em>programmatic</em> label. This adds unnecessary confusion and barriers to the interface and also a failure of <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships\">success criterion 1.3.1</a> when you look into the web accessibility standard.</p>\n<h3>What To Do</h3>\n<p>The most solid strategy to connect form inputs with their corresponding labels is to:</p>\n<ol>\n<li>Use a <code>label</code> element for the label (obviously).</li>\n<li>Establish an <code>id</code> on the respective input you want to label.</li>\n<li>Add a <code>for</code> attribute, filling it with the control’s <code>id</code> you created in the last step.</li>\n</ol>\n<p>This also works for <code>inputs</code> of all <code>type</code>s, like <code>textarea</code>s and <code>select</code>s. Here’s an example of how a properly labeled checkbox could look: </p>\n<pre><code>&lt;input type=\"checkbox\" id=\"marketing-cookies\" /&gt;\n&lt;label for=\"marketing-cookies\"&gt;Accept marketing cookies&lt;/label&gt;\n</code></pre>\n\n<p>If you can’t directly influence the HTML of the cookie banner’s code, the situation is comparable to the situation around pseudo buttons. Make sure that necessary pressure is applied to your cookie service provider to fix the problem. All of their customers will thank you for it, and even more so the people who visit their sites.</p>\nBroken Dialog Semantics (Or None At All)\n<p>Quite a few cookie <em>banners</em> are actually cookie <em>dialogs</em>, and of the modal kind. Modal, in the context of a dialog, means that such a window blocks everything but itself, leaving only itself accessible. That is, at least, the theory. But quite some cookie management dialogs do “want to be as aggressive,” presenting as a modal part of the interface but have no according semantics and behavior, which would violate WCAG success criterion 4.1.</p>\n<p><img src=\"https://files.smashing.media/articles/potentially-dangerous-accessibility-cookie-notices/3-cookie-dialog-modal-kind.png\" /></p>\n<h3>What To Do</h3>\n<p>Up until recently, the recommendation was to build a dialog with WAI-ARIA roles and states and implement focus management yourself (or use <a href=\"https://github.com/KittyGiraudel/a11y-dialog\">Kitty Giraudel’s great a11y-dialog</a>) component).</p>\n<p>But the situation has (mostly) changed for the better. Lately, the native <code>&lt;dialog&gt;</code> element has matured to the point where it’s being recommended in most contexts <a href=\"https://www.scottohara.me/blog/2023/01/26/use-the-dialog-element.html#use-it\">as long as it is used reasonably</a>. A great win for accessibility, in my opinion. The past way of building (modal) dialogs had so many moving parts and factors (roles, states, focus behaviors) to think about and implement manually that it was quite difficult to get it right. Now creating a dialog means using an aptly-named HTML element (and initializing it with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal\"><code>.showModal()</code></a> if you think the cookie dialog needs to be interface-blocking).</p>\n<p>What I’ve written so far is, of course, also valid when you cannot influence a third party’s code, and what I wrote earlier about comparable situations and potential cookie consent barriers is valid as well. If you detect errors in the third-party script you are implementing (such as no focus trapping, no <code>dialog</code> role, no <code>aria-modal=\"true\"</code> — and if everything else points towards “modalness”), escalate things internally and educate the decision-making powers about web accessibility consequences. Maybe even educate the third-party developers that things concerning modals have gotten a lot better recently.</p>\nCookie Banners Are Hard To Find In The First Place\n<p>There are three typical places where you can usually find cookie consent interfaces, at least visually:</p>\n<ol>\n<li>As a modal dialog, i.e., in the middle or — more rarely — corners of the viewport;</li>\n<li>On top, sometimes in a fixed manner;</li>\n<li>At the bottom of the viewport, sometimes also somewhat positioned in a fixed way.</li>\n</ol>\n<p>But what matters way more for some people is how easy it is to find, should they go on a hunt for it. A great way of presenting this very problem is a <a href=\"https://www.youtube.com/watch?v=Uaqo4FOI_DY\">presentation that accessibility specialist Léonie Watson gave</a> some time ago. Léonie is a seasoned screen reader user, and her presentation showcases a bunch of webpages and <strong>how the placement and “findability” of cookie banners influence the screen reader experiences</strong>, particularly as it is related to privacy. Hampering the ability to find important content in a document can, for example, negatively affect <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence.html\">WCAG 1.3.2 (Meaningful Sequence)</a>.</p>\n<h3>What To Do</h3>\n<p>In Léonie’s presentation, the best practices for cookie notice findability become very clear, especially in the last example:</p>\n<ul>\n<li>Place the banner preferably at the top of the document.</li>\n<li>Use a headline in the cookie banner and make it either visible or <a href=\"https://www.a11yproject.com/posts/how-to-hide-content/\">visually hidden</a> to help screen reader users <a href=\"https://webaim.org/projects/screenreadersurvey9/#finding\">“get a grasp about the webpage”</a> and allow them to navigate by headings.</li>\n<li>Build a bridge back to proper dialog semantics by making sure that if a dialog is meant to be the “exclusive” part of the interface, it uses appropriate semantic and state descriptions (see above for details).</li>\n</ul>\n<p>When we’re talking about changing third-party code, I reckon you know the drill by now. Try to influence this code indirectly on the “political level” because direct control is not possible.</p>\nConclusion\n<p>Hopefully, two things emerged while reading this article:</p>\n<ol>\n<li><strong>Awareness of the issue</strong>, namely, that an often unloved stepchild interface element has the potential to make it harder for some people to manage their privacy settings and, on top of that, to even pose a legal risk.</li>\n<li><strong>A sense of how you can possibly remediate barriers you encounter when working with a cookie management banner.</strong> The direct way is described in a certain detail in the details I provided earlier and often has to do with code, styling, or overall education on how to prevent this in the future. The indirect way leads to a path of either setting the consent interface up properly or influencing the inner and outer politics of your vendor scripts. And again, there is the aspect of educating everyone involved. This time, structured information may be aimed at the powers that be in your organization, showing them that their choice of service providers may have unintended consequences.</li>\n</ol>\n<p>But regardless of whether you and your team manage to fix accessibility bugs directly or indirectly in your cookie consent interfaces, you can see their ubiquity and component architecture as an advantage. By getting the accessibility right in one place, you influence many other pages (or even foreign websites) for the better.</p>\n<p>If you want to extend your horizon regarding the user experience side of cookie banners and learn about how you can actually turn privacy settings into a pleasant and respectful involvement with at least EU laws, please proceed to Vitaly’s smashing read, “<a href=\"https://www.smashingmagazine.com/2019/04/privacy-ux-better-cookie-consent-experiences/\">Privacy UX: Better Cookie Consent Experiences</a>”.</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/03/state-gdpr-2021-cookie-consent-designers-developers/\">State Of GDPR In 2021: Cookie Consent For Designers And Developers</a>”, Danny Bluestone</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/11/guide-keyboard-accessibility-html-css-part1/\">A Guide To Keyboard Accessibility: HTML And CSS (Part 1)</a>”, Cristian Díaz</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/02/keys-accessibility-mindset/\">Keys To An Accessibility Mindset</a>”, Daniel Yuschick</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/11/automated-test-results-improve-accessibility/\">Using Automated Test Results To Improve Accessibility</a>”, Noah Mashni and Mark Steadman</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"f78a6245ca1b5f7c86d4aa6f6abcc8e1bfd76a21052bdde97317ccacfdff6803","category":"Tech"}