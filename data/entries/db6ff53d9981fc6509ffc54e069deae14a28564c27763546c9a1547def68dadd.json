{"title":"Navigating The Challenges Of Modern Open-Source Authoring: Lessons Learned","link":"https://smashingmagazine.com/2025/01/navigating-challenges-modern-open-source-authoring/","date":1737446400000,"content":"<p>This article is a sponsored by <a href=\"https://www.storyblok.com/?utm_source=smashing&amp;utm_medium=sponsor&amp;utm_campaign=DGM_DEV_SMA_TRA&amp;utm_content=smashing-OSS\">Storyblok</a></p>\n<p>Open source is the backbone of modern software development. As someone deeply involved in both community-driven and company-driven open source, I’ve had the privilege of experiencing its diverse approaches firsthand. This article dives into what modern OSS (Open Source) authoring looks like, focusing on front-end JavaScript libraries such as <a href=\"https://tresjs.org/\">TresJS</a> and tools I’ve contributed to at <a href=\"https://github.com/storyblok\">Storyblok</a>.</p>\n<p>But let me be clear:</p>\n<blockquote>There’s no universal playbook for OSS. Every language, framework, and project has its own workflows, rules, and culture — and that’s okay. These variations are what make open source so adaptable and diverse.</blockquote>\n\n<h3>The Art Of OSS Authoring</h3>\n<p>Authoring an open-source project often begins with scratching your own itch — solving a problem you face as a developer. But as your “experiment” gains traction, the challenge shifts to addressing diverse use cases while maintaining the simplicity and focus of the original idea.</p>\n<p>Take TresJS as an example. All I wanted was to add 3D to my personal Nuxt portfolio, but at that time, there wasn’t a maintained, feature-rich alternative to React Three Fiber in VueJS. So, I decided to create one. Funny enough, after two years after the library’s launch, my portfolio remains unfinished.</p>\n<h3>Community-driven OSS Authoring: Lessons From TresJS</h3>\n<p>Continuing with TresJS as an example of a community-driven OSS project, the community has been an integral part of its growth, offering ideas, filing issues (around 531 in total), and submitting pull requests (around 936 PRs) of which 90% eventually made it to production. As an author, this is the best thing that can happen — it’s probably one of the biggest reasons I fell in love with open source. The continuous collaboration creates an environment where new ideas can evolve into meaningful contributions.</p>\n<p>However, it also comes with its own challenges. The more ideas come in, the harder it becomes to maintain the project’s focus on its original purpose.</p>\n<blockquote>As authors, it’s our responsibility to keep the vision of the library clear — even if that means saying no to great ideas from the community.</blockquote>\n\n<p>Over time, some of the most consistent collaborators became part of a core team, helping to share the responsibility of maintaining the library and ensuring it stays aligned with its original goals.</p>\n<p>Another crucial aspect of scaling a project, especially one like TresJS, which has grown into an ecosystem of packages, is the <strong>ability to delegate</strong>. The more the project expands, the more essential it becomes to distribute responsibilities among contributors. Delegation helps in reducing the burden of the massive workload and empowers contributors to <strong>take ownership</strong> of specific areas. As a core author, it’s equally important to provide the necessary tools, CI workflows, and clear conventions to make the process of contributing as simple and efficient as possible. A well-prepared foundation ensures that new and existing collaborators can focus on what truly matters — pushing the project forward.</p>\n<h3>Company-driven OSS Authoring: The Storyblok Perspective</h3>\n<p>Now that we’ve explored the bright spots and challenges of community-driven OSS let’s jump into a different realm: company-driven OSS.</p>\n<p>I had experience with inner-source and open-source in previous companies, so I already had a grasp of how OSS works in the context of a company environment. However, my most meaningful experience would come later, specifically earlier this year, when I switched my role from DevRel to a full-time Developer Experience Engineer, and I say “full-time” because before taking the role, I was already contributing to Storyblok’s SDK ecosystem.</p>\n<p><img src=\"https://files.smashing.media/articles/navigating-challenges-modern-open-source-authoring/storyblok-to-smashing-magazine-surviving-modern-open-source-authoring-inline-image.png\" /></p>\n<p>At <a href=\"https://www.storyblok.com/lp/developers?utm_source=smashing&amp;utm_medium=sponsor&amp;utm_campaign=DGM_DEV_SMA_TRA&amp;utm_content=smashing-OSS\">Storyblok</a>, open source plays a crucial role in how we engage with developers and how they seamlessly use our product with their favorite framework. Our goal is to provide the same developer experience regardless of the flavor, making the experience of using Storyblok as simple, effective, and enjoyable as possible.</p>\n<p>To achieve this, it’s crucial to <strong>balance the needs</strong> of the developer community — which often reflect the needs of the clients they work for — with the company’s broader goals. One of the things I find more challenging is <strong>managing expectations</strong>. For instance, while the community may want feature requests and bug fixes to be implemented quickly, the company’s priorities might dictate focusing on stability, scalability, and often strategic integrations. <strong>Clear communication</strong> and <strong>prioritization</strong> are key to maintaining healthy alignment and trust between both sides.</p>\n<p>One of the unique advantages of company-driven open source is the <strong>availability of resources</strong>:</p>\n<ul>\n<li>Dedicated engineering time,</li>\n<li>Infrastructure (which many OSS authors often cannot afford),</li>\n<li>Access to knowledge from internal teams like design, QA, and product management.</li>\n</ul>\n<p>However, this setup often comes with the challenge of dealing with legacy codebases — typically written by developers who may not be familiar with OSS principles. This can lead to inconsistencies in structure, testing, and documentation that require significant refactoring before the project can align with open-source best practices.</p>\n<h3>Navigating The Spectrum: Community vs. Company</h3>\n<p>I like to think of community-driven OSS as being like jazz music—freeform, improvised, and deeply collaborative. In contrast, company-driven OSS resembles an orchestra, with a conductor guiding the performance and ensuring all the pieces fit together seamlessly.</p>\n<p>The truth is that most OSS projects — if not the vast majority — exist somewhere along this spectrum. For example, TresJS began as a purely community-driven project, but as it matured and gained traction, elements of structured decision-making — more typical of company-driven projects — became necessary to maintain focus and scalability. Together with the core team, we defined a vision and goals for the project to ensure it continued to grow without losing sight of its original purpose.</p>\n<p>Interestingly, the reverse is also true: Company-driven OSS can benefit significantly from the fast-paced innovation seen in community-driven projects.</p>\n<p>Many of the improvements I’ve introduced to the <a href=\"https://www.storyblok.com/lp/developers?utm_source=smashing&amp;utm_medium=sponsor&amp;utm_campaign=DGM_DEV_SMA_TRA&amp;utm_content=smashing-OSS\">Storyblok ecosystem</a> since joining were inspired by ideas first explored in TresJS. For instance, migrating the TresJS ecosystem to <strong><code>pnpm workspaces</code></strong> demonstrated how streamlined dependency management could improve development workflows like playgrounds and e2e — an approach we gradually adapted later for Storyblok’s ecosystem.</p>\n<p>Similarly, transitioning Storyblok testing from Jest to Vitest, with its improved performance and developer experience, was influenced by how testing is approached in community-driven projects. Likewise, our switch from Prettier to ESLint’s v9 flat configuration with auto-fix helped consolidate linting and formatting into a single workflow, streamlining developer productivity.</p>\n<p>Even more granular processes, such as modernizing CI workflows, found their way into Storyblok. TresJS’s evolution from a single monolithic release action to granular steps for linting, testing, and building provided a blueprint for enhancing our pipelines at Storyblok. We also adopted continuous release practices inspired by <strong><code>pkg.pr.new</code></strong>, enabling faster delivery of incremental changes and testing package releases in real client projects to gather immediate feedback before merging the PRs.</p>\n<p>That said, TresJS also benefited from my experiences at Storyblok, which had a more mature and battle-tested ecosystem, particularly in adopting automated processes. For example, we integrated Dependabot to keep dependencies up to date and used auto-merge to reduce manual intervention for minor updates, freeing up contributors’ time for more meaningful work. We also implemented an automatic release pipeline using GitHub Actions, inspired by Storyblok’s workflows, ensuring smoother and more reliable releases for the TresJS ecosystem.</p>\n<h3>The Challenges of Modern OSS Authoring</h3>\n<p>Throughout this article, we’ve touched on several modern OSS challenges, but if one deserves the crown, it’s <strong>managing breaking changes and maintaining compatibility</strong>. We know how fast the pace of technology is, especially on the web, and users expect libraries and tools to keep up with the latest trends. I’m not the first person to say that hype-driven development can be fun, but it is inherently risky and not your best ally when building reliable, high-performance software — especially in enterprise contexts.</p>\n<p>Breaking changes exist. That’s why semantic versioning comes into play to make our lives easier. However, it is equally important to <strong>balance innovation with stability</strong>. This becomes more crucial when introducing new features or refactoring for better performance, breaking existing APIs. One key lesson I’ve learned — particularly during my time at Storyblok — is the importance of <strong>clear communication</strong>. Changelogs, migration guides, and deprecation warnings are invaluable tools to smoothen the transition for users.</p>\n<blockquote><strong>A practical example:</strong><br /><br />My first project as a Developer Experience Engineer was introducing <code>@storyblok/richtext</code>, a library for rich-text processing that (at the time of writing) sees around 172k downloads per month. The library was crafted during my time as a DevRel, but transitioning users to it from the previous rich-text implementation across the ecosystem required careful planning. Since the library would become a dependency of the fundamental JS SDK — and from there propagate to all the framework SDKs — together with my manager, we planned a multi-month transition with a retro-compatible period before the major release. This included communication campaigns, thorough documentation, and gradual adoption to minimize disruption.<br /><br />Despite these efforts, mistakes happened — and that’s okay. During the rich-text transition, there were instances where updates didn’t arrive on time or where communication and documentation were temporarily out of sync. This led to confusion within the community, which we addressed by providing timely support on GitHub issues and Discord. These moments served as reminders that <strong>even with semantic versioning, modular architectures, and meticulous planning, OSS authoring is never perfect</strong>. Mistakes are part of the process.</blockquote>\n\n<p>And that takes us to the following point.</p>\n<h3>Conclusion</h3>\n<p>Open-source authoring is a journey of continuous learning. Each misstep offers a chance to improve, and each success reinforces the value of collaboration and experimentation.</p>\n<p>There’s no “perfect” way to do OSS, and that’s the beauty of it. Every project has its own set of workflows, challenges, and quirks shaped by the community and its contributors. These differences make open source adaptable, dynamic, fun, and, above all, impactful. No matter if you’re building something entirely new or contributing to an existing project, remember that progress, not perfection, is the goal.</p>\n<p>So, keep contributing, experimenting, and sharing your work. Every pull request, issue, and idea you put forward brings value &amp;mdashp not just to your project but to the broader ecosystem.</p>\n<p>Happy coding!</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"db6ff53d9981fc6509ffc54e069deae14a28564c27763546c9a1547def68dadd","category":"Tech"}