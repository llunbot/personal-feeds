{"title":"Open Source PC Emulator UTM Blocked by Apple for Notarization, Including Through EU Marketplaces","link":"https://mjtsai.com/blog/2024/06/14/utm-blocked-outside-app-store-via-notarization/","date":1718740132000,"content":"\n<p>Michael Tsai:</p>\n\n<blockquote>\n  <p>This is confusing, but I think what Apple is saying is that, even\nwith notarization, apps are <a href=\"https://developer.apple.com/support/dma-and-apps-in-the-eu/\">not allowed</a> to “download\nexecutable code.” <a href=\"https://social.treehouse.systems/@curioustommy/112584688843571641\">Rule 2.5.2</a> says apps may not “download,\ninstall, or execute code” except for limited educational purposes.\n<a href=\"https://developer.apple.com/app-store/review/guidelines/\">Rule 4.7</a> makes an exception to this so that retro game\nemulators and some other app types <em>can</em> run code “that is not\nembedded in the binary.” This is grayed out when you select “Show\nNotarization Review Guidelines Only”, meaning that the exception\nonly applies <em>within</em> the App Store. Thus, the general prohibition\nremains in effect for App Marketplaces and Web Distribution. But\nit seems like this wasn’t initially clear to Apple, either,\nbecause the review process <a href=\"https://appleinsider.com/articles/24/06/09/apple-appears-to-have-drawn-a-fuzzy-line-for-iphone-about-what-counts-as-console-emulation\">took two months</a>.</p>\n\n<p>This also seems inconsistent with the fact that the Delta emulator\n<em>is</em> allowed to be notarized outside the App Store. It doesn’t\nmake much sense for the rules to be <em>more</em> lax <em>within</em> the App\nStore. I first thought the mistake was that Apple didn’t mean to\ngray out 4.7 for notarization. Then everything would make sense.\nBut the clarification states that 4.7 is <em>not</em> intended to apply\nto notarization.</p>\n\n<p>The bottom line for me is that Apple doesn’t want general-purpose\nemulators, it’s questionable whether the DMA lets it block them,\nand even siding with Apple on this it isn’t consistently applying\nits own rules.</p>\n</blockquote>\n\n<p>Apple’s stance on this seems inscrutable. If emulators that use <a href=\"https://en.wikipedia.org/wiki/Just-in-time_compilation\">JIT compilation</a> are a security threat, they should all be forbidden, whether they’re emulating retro game consoles or general purpose PCs. But <a href=\"https://github.com/rileytestut/DSDeltaCore/tree/6c84366b3a76045782905293c9616e33f5da1a35\">Delta uses a JIT</a> and it’s not just notarized for distribution through Alt Store’s EU marketplace, it’s in the App Store itself. Announcing the standoff with Apple’s notarization review, <a href=\"https://en.wikipedia.org/wiki/Just-in-time_compilation\">the UTM developers say</a> they have a version without JIT, but it performs so poorly it isn’t worth pursuing.</p>\n\n<p>So it seems like an arbitrary policy decision on Apple’s part: retro game emulators are, at long last, acceptable, but general PC emulators are not. Such arbitrary policy decisions related to the purpose of the app are fine for the App Store (legally speaking), but clearly not compliant with the DMA. That’s one of the few areas where the DMA is clear. Apple can, of course, ban (say) porno apps from the App Store, but can’t refuse to notarize them for distribution outside the App Store in the EU.</p>\n\n<p>And if Apple had a security leg to stand on — which is <a href=\"http://wingolog.org/archives/2011/06/21/security-implications-of-jit-compilation\">a legitimate question when it comes to JIT compilation</a> — they shouldn’t notarize retro game emulators either.</p>\n\n<p>Apple goes into depth on the security challenges pertaining to JIT compilation <a href=\"https://developer.apple.com/documentation/browserenginekit/protecting-code-compiled-just-in-time\">in its documentation for BrowserEngineKit</a>, the framework for developing non-WebKit browser engines for distribution in the EU. That’s ostensibly the reason why developers need a special entitlement to use a custom browser engine. </p>\n\n<p>(Which in turn makes me wonder: Now that over four months have passed since Apple announced its initial DMA compliance plans, have any browser developer announced plans to bring their own rendering engines to iOS in the EU? As far as I know the answer is no. It’s entirely possible Apple went to all the trouble of creating BrowserEngineKit for compliance with the DMA, but no one is actually going to use it because no browser developer deems the EU market worth forking their browser for, solely for distribution outside the App Store.)</p>\n\n<div>\n<a href=\"https://daringfireball.net/linked/2024/06/18/utm-notarization\"> ★ </a>\n</div>\n\n\t","author":"John Gruber","siteTitle":"Daring Fireball","siteHash":"fc569638025dadf22a867470f8215f38855cf50e975782a6c989909474292a36","entryHash":"a02c22fbc62df4469d20c922325926796a7a42a74d442bfdc5d6c6a7e00d5166","category":"Tech"}