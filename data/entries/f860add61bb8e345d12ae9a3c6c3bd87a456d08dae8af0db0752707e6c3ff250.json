{"title":"สรุป VDO เรื่อง Observability Is About Confidence","link":"https://www.somkiat.cc/observability-is-about-confidence/","date":1704079456000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/01/observability-01-150x150.jpg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/01/observability-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2024/01/observability-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/01/observability-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/01/observability-01.jpg\" width=\"695\" height=\"371\" /></a></figure>\n\n\n\n<p>ทำการสรุป <strong><a href=\"https://www.youtube.com/watch?v=TXO_d594Ri8\" target=\"_blank\">VDO เรื่อง Build in Observability While Developing</a></strong> จากงาน KubeCon<br />ทำการอธิบายถึง observability ของระบบว่า<br />ช่วยให้เราเข้าใจสิ่งที่กำลังเกิดขึ้นในระบบงาน หรือบน production<br />แต่มักจะพบว่า ในการพัฒนาและส่งมอบ feature นั้น<br />มักจะแยกระหว่าง code กับพวก observability (log, trace, metric) ออกจากกัน</p>\n\n\n\n<span></span>\n\n\n\n<p>หรือมาทำในภายหลังก่อนขึ้น production<br />ทำให้สิ่งที่ทำเพิ่มเข้ามานั้น ไม่ตรงกับสิ่งที่ต้องการ !!<br />ส่งผลต่อความเชื่อมันที่มีต่อระบบ และ พวก observability หรือไม่นะ ?</p>\n\n\n\n<p><em>ดังนั้นใน VDO นี้จึงได้พยายามอธิบายว่า<br />observability นั้น ก็เหมือนการทดสอบ<br />ที่แต่ละ feature ก่อนจะส่งมอบต้องทดสอบเสมอ<br />ดังนั้น observability ก็เช่นกัน ต้องมาพร้อมกับ feature นั่นเอง<br />นั่นคือ มันอยู่ใน development process/workflow ไปเลย</em></p>\n\n\n\n<p>โดยเรื่องของ observability นั้น แนะนำให้ไปใช้งาน <a href=\"https://opentelemetry.io/\" target=\"_blank\">OpenTelemetry</a> กัน</p>\n\n\n\n<p><strong>คำแนะนำให้ VDO บอกว่า ถ้าคุณ log ได้ ก็ trace ได้</strong></p>\n\n\n\n<p>เริ่มจาก log การทำงานเป็น plain text ปกติ<br />จากนั้นเริ่มเรียงด้วยเวลาของการทำงาน<br />จากนั้นเริ่มสร้าง log ที่มีโครงสร้างชัดเจน ง่ายต่อการ process<br />เช่น JSON format เป็นต้น<br />ซึ่งจะเรียกว่า <strong>Structured log </strong>นั่นเอง</p>\n\n\n\n<p>จากนั้นก็เริ่มใส่ trace id และ span id<br />เพื่อให้เห้นความพันธ์ของ log และละตัวนั่นเอง<br />ยกตัวอย่างเช่น</p>\n\n\n\n[gist id=\"71c45731dbcfc4d69b7437f2b2d876c6\" file=\"1.txt\"]\n\n\n\n<p><strong>คำแนะนำในการเริ่มต้น</strong></p>\n\n\n\n<ul>\n<li>ค่อย ๆ เพิ่ม ไม่ใช่ทำทีเดียวทั้งระบบ (start small)</li>\n\n\n\n<li>โดยเริ่มจาก automatic instrumentation ก่อน ซึ่งยังไม่ต้องเขียน code</li>\n\n\n\n<li>แต่ถ้าต้องการ insight ของการทำงานใน code จำเป็นต้องเขียน code เพิ่มเติม</li>\n\n\n\n<li>ทำการเรียนรู้จากการใช้งานในระบบ เพื่อดูว่าอะไรควรเก็บหรือไม่ควรเก็บ </li>\n\n\n\n<li>สิ่งที่ควรเก็บคือ ได้ใช้งานเมื่อมีปัญหานั่นเอง มิใช่เก็บทั้งหมด มันเปลือง</li>\n\n\n\n<li>ทำการปรับปรุงอย่างต่อเนื่อง ไม่ใช่เก็บแล้วจบนะ</li>\n</ul>\n\n\n\n<p>การทำตามขั้นตอนนี้ จะช่วยให้มีความมั่นใจต่อ code และระบบมากยิ่งขึ้น<br />ช่วยให้เห็นถึงปัญหาได้รวดเร็ว ทันเวลา<br />เพื่อให้เราเข้าไปถึงจุดเกิดเหตุ หรือ ช่วยวิเคราะห์ปัญหาได้ง่ายขึ้น<br /><strong><em>สิ่งเหล่านี้ไม่ใช้ nice-to-have แต่มันคือสิ่งที่ต้องมีเสมอนะ</em></strong></p>\n\n\n\n<p><strong>Reference Websites</strong></p>\n\n\n\n<ul>\n<li><a href=\"https://www.honeycomb.io/blog/observability-is-about-confidence\" target=\"_blank\">Observability Is About Confidence</a></li>\n\n\n\n<li><a href=\"https://www.honeycomb.io/blog/ask-miss-o11y-metric-or-trace\" target=\"_blank\">Ask Miss O11y: To Metric or to Trace ?</a></li>\n</ul>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"f860add61bb8e345d12ae9a3c6c3bd87a456d08dae8af0db0752707e6c3ff250","category":"Thai"}