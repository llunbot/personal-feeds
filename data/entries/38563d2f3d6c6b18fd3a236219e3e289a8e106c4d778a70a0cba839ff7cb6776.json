{"title":"WebKit Features in Safari 17.4","link":"https://webkit.org/blog/15063/webkit-features-in-safari-17-4/","date":1709663426000,"content":"<p>Just like Safari 15.4 and Safari 16.4, this March’s release of Safari 17.4 is a significant one for web developers. We’re proud to announce another 46 features and 146 bug fixes.</p>\n<p>You can experience Safari 17.4 on iOS 17.4, iPadOS 17.4, macOS Sonoma 14.4 beta, macOS Ventura, macOS Monterey, and in visionOS 1.1 beta.</p>\n<h2><a name=\"architectural-improvements\"></a>Architectural improvements</h2>\n<p>It’s always exciting to ship new features that you can use while building websites and web apps for your users. WebKit engineers also work on many important projects beyond implementing new web platform features. Recently, much effort has gone into multiple infrastructure projects that strengthen WebKit for the long-term.</p>\n<p>We completed the final installment of our multi-year long rewrite of our inline layout engine (more on that later). We built two new iOS frameworks with hundreds of new APIs to support functionality used by web browsers, including multiprocess, JIT, and advanced keyboard &amp; touch event access — and we are pivoting WebKit to use these new frameworks. We’re working on several other large projects that deepen security and privacy. And we’ve been hard at work to make Safari even faster. For many years, Safari has held the crown of the world’s fastest browser. It’s important to us to keep pushing the boundaries of speed, as the websites you build continue to get more complex. Hundreds of recent changes result in Safari 17.4 showing a significant performance bump.</p>\n<h2><a name=\"web-apps\"></a>Web Apps</h2>\n<p>Safari 17.4 brings two improvements to web apps on Mac.</p>\n<p>First, Safari adds support for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Manifest/shortcuts\"><code>shortcuts</code></a> manifest member on macOS Sonoma. This gives you a mechanism in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Manifest\">manifest file</a> for defining custom menu commands that will appear in the File menu and the Dock context menu.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/Web_Apps_Shortcuts_Light.jpg\" alt=\"Web Kittens web app open on macOS, with the File menu showing and four custom shortcuts listed\" width=\"1920\" height=\"1080\" srcset=\"https://webkit.org/wp-content/uploads/Web_Apps_Shortcuts_Light.jpg 1920w, https://webkit.org/wp-content/uploads/Web_Apps_Shortcuts_Light-300x169.jpg 300w, https://webkit.org/wp-content/uploads/Web_Apps_Shortcuts_Light-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/Web_Apps_Shortcuts_Light-768x432.jpg 768w, https://webkit.org/wp-content/uploads/Web_Apps_Shortcuts_Light-1536x864.jpg 1536w\" /><figcaption>On Mac, our Web Kittens web app includes four shortcuts. You can see them listed in the File menu: New Kitten, Discover, Messages, and Notifications. They each open a menu item by going to the appropriate URL.</figcaption></figure>\n<p>A web app shortcut consists of a <code>name</code>, (the words you’d like to appear in the menu), and a <code>url</code>. When a user activates the command, it opens the specified URL inside the web app.</p>\n<pre><code><span>\"shortcuts\"</span><span>:</span> [\n  {\n    <span>\"name\"</span><span>:</span> <span>\"New Kitten\"</span>,\n    <span>\"url\"</span><span>:</span> <span>\"/new-kitten\"</span>\n  },\n  {\n    <span>\"name\"</span><span>:</span> <span>\"Discover\"</span>,\n    <span>\"url\"</span><span>:</span> <span>\"/discover\"</span>\n  }\n]\n</code></pre>\n<p>Users can set up custom keyboard shortcuts for app menu commands in System Settings &gt; Keyboard &gt; Keyboard Shortcuts &gt; App Shortcuts. By default, macOS does not assign web app shortcuts any keyboard commands.</p>\n<p>Second, Safari 17.4 now supports the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Manifest/categories\"><code>categories</code></a> manifest member on macOS Sonoma. This <a href=\"https://developer.mozilla.org/en-US/docs/Web/Manifest\">member</a> provides you with a mechanism for telling the browser which <a href=\"https://github.com/w3c/manifest/wiki/Categories\">categories</a> your web app belongs in. On Mac, when a user creates a Launchpad folder that contains web apps, the folder is automatically named accordingly.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/Web_Apps_Categories_Launchpad.jpg\" alt=\"Launchpad on macOS showing two app icons in a group titled Social Networking\" width=\"1920\" height=\"1080\" srcset=\"https://webkit.org/wp-content/uploads/Web_Apps_Categories_Launchpad.jpg 1920w, https://webkit.org/wp-content/uploads/Web_Apps_Categories_Launchpad-300x169.jpg 300w, https://webkit.org/wp-content/uploads/Web_Apps_Categories_Launchpad-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/Web_Apps_Categories_Launchpad-768x432.jpg 768w, https://webkit.org/wp-content/uploads/Web_Apps_Categories_Launchpad-1536x864.jpg 1536w\" /></figure>\n<h2><a name=\"form-elements\"></a>Form elements</h2>\n<h3><a name=\"switch-control\"></a>Switch control</h3>\n<p>The switch is a popular interface for many use cases, but until now, there was no easy way to put a switch on the web. Instead developers might use a checkbox input field, remove the visual look of the checkbox with <code>appearance: none</code>, and write custom styles to create something that looks like a switch.</p>\n<p>Now, with WebKit for Safari 17.4, HTML supports a native switch. If you code <code>&lt;input type=\"checkbox\" switch&gt;</code>, the browser will simply create a switch for you, and map it to <code>role=switch</code> and related ARIA features.</p>\n<figure>\n<div></div>\n<p></p><figcaption>Try this demo in Safari 17.4. Currently, in other browsers you will see three checkboxes.</figcaption></figure>\n<p>Extending the current HTML checkbox provides several benefits and honors the W3C’s <a href=\"https://www.w3.org/TR/html-design-principles/\">HTML Design Principles</a>. First, this design <a href=\"https://www.w3.org/TR/html-design-principles/#degrade-gracefully\">degrades gracefully</a> — which means you can use <code>&lt;input type=\"checkbox\" switch&gt;</code> today. Browser that have support will show a switch, while browsers that do not have support will show a checkbox. No user will get a broken experience, and you don’t have to wait until all of your users have a browser with support in order to utilize this on your website or web app. This design also <a href=\"https://www.w3.org/TR/html-design-principles/#do-not-reinvent-the-wheel\">does not reinvent the wheel</a>. It matches the way form controls have always worked on the web, and feels just like the code you’re used to. It’s an incremental <a href=\"https://www.w3.org/TR/html-design-principles/#evolution-not-revolution\">evolution</a> of the web. And as a simple solution, it <a href=\"https://www.w3.org/TR/html-design-principles/#avoid-needless-complexity\">avoids needless complexity</a>.</p>\n<p>The <code>accent-color</code> property can be used to change the background color of the switch in the “on” state. And, exactly like other form controls, you can use <code>appearance: none</code> to remove the system default styling and apply your own, perhaps while leveraging <code>:before</code> and <code>:after</code>.</p>\n<p>In the future, there will likely be multiple pseudo-elements to make it even easier to style the switch with your custom styles. You can try out <code>::track</code> and <code>::thumb</code> in Safari Technology Preview today and let us know what you think of this approach. See how they work in <a href=\"https://nt1m.github.io/html-switch-demos/\">this demo</a>, after enabling the “::thumb and ::track pseudo-elements” <a href=\"https://developer.apple.com/documentation/safari-developer-tools/feature-flag-settings\">feature flag</a>. (These pseudos are waiting to ship until there is a more comprehensive plan for styling form controls proposed, discussed and resolved on at the CSS Working Group.)</p>\n<h3><a name=\"vertical-writing-modes\"></a>Vertical writing modes</h3>\n<p>From <a href=\"https://www.w3.org/MarkUp/HTMLPlus/htmlplus_1.html\">the beginning</a>, the web has always been interactive. Even before any method of custom styling was available, form controls and input fields provided the means for users to communicate back to the website and to each other. The web was also originally designed in an era when the Latin alphabet (used by many languages, including English) was the presumed default, with its horizontal top-to-bottom writing mode.</p>\n<p>For thirty years, form controls have presumed a horizontal <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode\">writing mode</a>. Typesetting in a <a href=\"https://www.w3.org/International/articles/vertical-text/index\">vertical writing mode</a> for languages like Chinese, Japanese, Korean, and Mongolian did not include vertical form controls. Now that’s changed. Starting in Safari 17.4, vertical form controls are supported. This includes meter, range, progress and other form controls that could make for great UI in any language when laid out in a vertical format.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/vertical-form-controls-light.png\" width=\"1925\" height=\"1344\" srcset=\"https://webkit.org/wp-content/uploads/vertical-form-controls-light.png 1925w, https://webkit.org/wp-content/uploads/vertical-form-controls-light-300x209.png 300w, https://webkit.org/wp-content/uploads/vertical-form-controls-light-1024x715.png 1024w, https://webkit.org/wp-content/uploads/vertical-form-controls-light-768x536.png 768w, https://webkit.org/wp-content/uploads/vertical-form-controls-light-1536x1072.png 1536w\" /><figcaption>Try <a href=\"https://codepen.io/jensimmons/pen/gOEVZbw?editors=1100\">this demo</a> of vertical form controls in a browser that <a href=\"https://caniuse.com/mdn-css_properties_writing-mode_vertical_oriented_form_controls\">has support</a>.</figcaption></figure>\n<h3><a name=\"horizontal-rules-inside-select\"></a>Horizontal Rules inside Select</h3>\n<p>You can use an <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr\"><code>&lt;hr&gt;</code></a> element (a horizontal rule) inside a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> element to draw a separator line. WebKit shipped support in <a href=\"https://webkit.org/blog/14445/webkit-features-in-safari-17-0/\">Safari 17.0</a> on macOS. Now, Safari 17.4 on iOS 17.4, iPadOS 17.4, and in visionOS 1.1 also has support.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/hr-in-select-visionOS.png\" alt=\"Safari window floating in front of mountains in Vision Pro, with a a select menu open on a web page, showing lines between list items\" width=\"1404\" height=\"837\" srcset=\"https://webkit.org/wp-content/uploads/hr-in-select-visionOS.png 1404w, https://webkit.org/wp-content/uploads/hr-in-select-visionOS-300x179.png 300w, https://webkit.org/wp-content/uploads/hr-in-select-visionOS-1024x610.png 1024w, https://webkit.org/wp-content/uploads/hr-in-select-visionOS-768x458.png 768w\" /></figure>\n<p><a href=\"https://webkit.org/blog/14933/bringing-back-horizontal-rules-in-select-elements/\">Try a demo and read the story</a> of how <code>hr</code> in <code>select</code> was supported years ago, went away, and is now restored.</p>\n<h3><a name=\"and-more\"></a>And more</h3>\n<p>WebKit for Safari 17.4 also adds support for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/showPicker\"><code>showPicker()</code> method</a> for <code>&lt;input type=\"date\"&gt;</code> on macOS.</p>\n<h2><a name=\"css\"></a>CSS</h2>\n<h3><a name=\"inline-layout\"></a>Inline Layout</h3>\n<p>One of the infrastructure projects that’s been underway in WebKit during the last several years is the complete rewrite of our inline layout engine. Safari 17.4 marks the completion of this project and the retirement of the <a href=\"https://trac.webkit.org/changeset/3648/webkit\">twenty-one year-old</a>  legacy line layout engine.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Inline_formatting_context\">Inline layout</a> is integral to displaying content on the web. It determines the size and layout — wrapping, justification, spacing, and baseline alignment — of all text and other inline-level content. As developers, we often focus on the invisible block boxes on a web page and write CSS to layout those boxes using Flow, Tables, Flexbox or Grid. The content inside those boxes is placed using complex inline layout algorithms that developers often don’t need to think much about.</p>\n<p>We’ve been shipping our new inline layout engine incrementally for many years. As more and more of the new engine was complete, more and more of the content on web pages was positioned by the new engine. This means users have been benefiting from WebKit’s new inline layout engine for a while. The legacy system was only triggered if there were something that hadn’t been yet implemented in the new engine. The last major step needed was the reimplementation of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby\">Ruby</a> — and now it’s also a proper inline layout feature, fixing past inconsistencies.</p>\n<p>Projects like these can be disruptive. Often browser teams will choose to not ship any new features while a multi-year rewrite project is in progress. WebKit instead chose to keep shipping new features, often implementing them twice — once in the legacy line layout engine, and again in the new inline layout engine. Now that this work is done, we no longer have to implement anything twice. This work also let us go through a large number of bugs reported on <a href=\"http://bugs.webkit.org/\">bugs.webkit.org</a>, confirm they are no longer a problem, and close them as fixed.</p>\n<p>We’re excited for WebKit’s future with this new engine. This investment results in increased interoperability by aligning to the latest web standards, fewer inline layout bugs, better performance, improvements to stability, and the ability to implement new features far more easily. The completion of inline layout also marks the beginning of rewriting the layout engine for other <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flow_layout/Introduction_to_formatting_contexts\">formatting contexts</a>, starting with Flexbox.</p>\n<h3><a name=\"align-content-everywhere\"></a>Align content everywhere</h3>\n<p>When Flexbox shipped, it brought a powerful new tool to the web — <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Alignment\">box alignment</a>. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-content\"><code>align-content</code></a> property made it possible to easily vertically center content inside a box! Or you could use it to align content to the bottom to the box, to align baselines of text, and more. When CSS Grid shipped, box alignment became possible in a second layout mode. Since 2017, you’ve been able to align the direct children of both Flexbox and Grid containers.</p>\n<p>Now, we are proud to be the first browser shipping support for <code>align-content</code> inside two more formatting contexts — block layout and table layout. This means if all you want to do is align a box’s content in the block direction, you don’t need to involve Flexbox or Grid. Plus, you can now mix alignment with floats, and you can use it inside table cells.</p>\n<pre><code><span>div</span> { <span>align-content</span>: <span>center</span>; } <span>/* one-line vertical centering */</span>\n</code></pre>\n<p>In addition, we updated the handling of <code>align-content</code>  and <code>justify-content</code> on scroll containers in WebKit for Safari 17.4. Now, for example, you can use CSS to set the initial scroll position to the end rather than the start of the content.</p>\n<pre><code><span>div</span> { <span>overflow</span>: <span>auto</span>; <span>align-content</span>: <span>unsafe</span> <span>end</span>; } <span>/* end-aligned scroller */</span>\n</code></pre>\n<p>Be sure to test alignment on scroll containers across browsers, as many are still in the process of updating to the specified behavior. Those that have not yet updated may clip content.</p>\n<h3><a name=\"css-scoping\"></a>CSS Scoping</h3>\n<p>Websites today can be complex, with large teams working across multiple projects, relying on pattern libraries or frameworks to keep everything organized and consistent. It can become tough for large teams to handle how their CSS cascades. Tools like Cascade Layers and <code>:has()</code> have changed the game, allowing developers to apply styles more masterfully. Yet, developers often want a way to scope styles to the individual component they’re working on, without worrying about the big picture or preventing unintended consequences.</p>\n<p><a href=\"https://www.w3.org/TR/css-cascade-6/#scoped-styles\">CSS Scoping</a> was created to provide several more powerful options for organizing and structuring CSS. (Note, there have been many debates over many years on how style scoping might work. Search results for “CSS scoping” often yield <a href=\"https://css-tricks.com/saving-the-day-with-scoped-css/\">old,</a> <a href=\"https://caniuse.com/style-scoped\">unimplemented</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scoping\">completely</a> <a href=\"https://drafts.csswg.org/css-scoping/\">different</a> ideas.)</p>\n<p>WebKit for Safari 17.4 adds supports the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@scope\"><code>@scope</code></a> rule and expands the capabilities of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:scope\"><code>:scope</code></a> pseudo-class. Scoping changes how the cascade works in some surprising ways, so do be sure to read about its impact before deploying widely.</p>\n<p>If your project is making heavy use of components, constructed independently and loaded in random order, scoping can help you by ensuring certain styles only apply to the contents of a specific element, and never to anything else on the page.</p>\n<p>By default, all CSS on a project applies universally. It has a “scoping root” of <code>&lt;html&gt;</code>. And the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:root\"><code>:root</code></a> pseudo-element refers to the root element in the DOM — the <code>html</code> element. CSS Scoping lets you use <code>&lt;style&gt; @scope</code> to reset the scoping root to a certain element, to the parent of the <code>&lt;style&gt;</code> element.</p>\n<pre><code><span>&lt;<span>article</span> <span>id</span>=<span>\"my-component\"</span>&gt;</span>\n  <span>&lt;<span>style</span>&gt;</span>\n    @scope {\n      h1 { font-size: 4rem; }\n    }\n  <span>&lt;/<span>style</span>&gt;</span>\n  <span>&lt;<span>h1</span>&gt;</span>This is 4rem text.<span>&lt;/<span>h1</span>&gt;</span>\n<span>&lt;/<span>article</span>&gt;</span>\n\n<span>&lt;<span>h1</span>&gt;</span>This will not be styled by the CSS above.<span>&lt;/<span>h1</span>&gt;</span>\n</code></pre>\n<p>In this case, because <code>&lt;article&gt;</code> is the direct parent of <code>&lt;style&gt; @scope</code>, all of the styles defined inside <code>@scope</code> will only impact <code>article</code> and the content inside <code>article</code>. Nothing outside <code>article</code> is affected.</p>\n<p>But that’s not all CSS Scoping can do. Let’s imagine we want to apply styles to a sidebar, but we don’t want those styles to apply to everything in the sidebar. We can use <code>@scope</code> to create a donut of sorts — with a hole in the middle where the styles don’t apply.</p>\n<figure>\n<pre><code><span>@scope</span> (<span>aside</span>) <span>to</span> (<span>section</span>) {\n  <span>h2</span> {\n    <span>font-size</span>: <span>3</span><span>rem</span>;\n  }\n}\n</code></pre>\n<pre><code><span>&lt;<span>aside</span> <span>id</span>=<span>\"my-sidebar\"</span>&gt;</span>\n  <span>&lt;<span>h2</span>&gt;</span>This is 3rem text.<span>&lt;/<span>h2</span>&gt;</span>\n  <span>&lt;<span>section</span>&gt;</span>\n    <span>&lt;<span>h2</span>&gt;</span>This is not styled by the CSS above.<span>&lt;/<span>h2</span>&gt;</span>\n  <span>&lt;/<span>section</span>&gt;</span>\n<span>&lt;/<span>aside</span>&gt;</span>\n</code></pre><figcaption>You can try <a href=\"https://codepen.io/jensimmons/pen/jORNYxx?editors=1100\">this demo</a> in a <a href=\"https://caniuse.com/css-cascade-scope\">browser with support</a>.</figcaption></figure>\n<p>By defining a scoping root with a scope-start selector (<code>aside</code>) and a scoping limit with a scope-end selector (<code>section</code>), we can effectively stop the cascading of the styles.</p>\n<p>Also, anytime you use CSS Scoping, it radically changes what happens when there’s a tie in specificity.</p>\n<p>Since the creation of CSS, when multiple selectors have equal specificity, the one that appears last in the CSS cascade is the one that gets applied. For example, if this is your CSS:</p>\n<pre><code><span>.blue</span> <span>h1</span> { <span>color</span>: <span>blue</span>; }\n<span>.yellow</span> <span>h1</span> { <span>color</span>: <span>yellow</span>; }\n</code></pre>\n<p>Then this is your result.</p>\n<pre><code><span>&lt;<span>section</span> <span>class</span>=<span>\"blue\"</span>&gt;</span>\n  <span>&lt;<span>section</span> <span>class</span>=<span>\"yellow\"</span>&gt;</span>\n    <span>&lt;<span>h1</span>&gt;</span>This headline is yellow.<span>&lt;/<span>h1</span>&gt;</span>\n  <span>&lt;/<span>section</span>&gt;</span>\n<span>&lt;/<span>section</span>&gt;</span>\n\n<span>&lt;<span>section</span> <span>class</span>=<span>\"yellow\"</span>&gt;</span>\n  <span>&lt;<span>section</span> <span>class</span>=<span>\"blue\"</span>&gt;</span>\n    <span>&lt;<span>h1</span>&gt;</span>This headline is yellow.<span>&lt;/<span>h1</span>&gt;</span>\n  <span>&lt;/<span>section</span>&gt;</span>\n<span>&lt;/<span>section</span>&gt;</span>\n</code></pre>\n<p>The headline is always yellow, because <code>.yellow</code> comes later in the CSS file. The order in the HTML does not matter.</p>\n<p>But with scoping, the selector that applies to an element that’s closer in the DOM to the scoping root is the one that will apply <em>when their specificities are tied</em>.</p>\n<p>Let’s use <code>@scope</code> instead of descendant selectors:</p>\n<pre><code><span>@scope</span> (<span>.blue</span>) { \n  <span>h1</span> { <span>color</span>: <span>blue</span>; }\n}\n<span>@scope</span> (<span>.yellow</span>) {\n  <span>h1</span> { <span>color</span>: <span>yellow</span>; }\n}\n</code></pre>\n<p>Now, the headline color is determined by the DOM order in HTML, not the cascade order in CSS:</p>\n<pre><code><span>&lt;<span>section</span> <span>class</span>=<span>\"blue\"</span>&gt;</span>\n  <span>&lt;<span>section</span> <span>class</span>=<span>\"yellow\"</span>&gt;</span>\n    <span>&lt;<span>h1</span>&gt;</span>This headline is yellow.<span>&lt;/<span>h1</span>&gt;</span>\n  <span>&lt;/<span>section</span>&gt;</span>\n<span>&lt;/<span>section</span>&gt;</span>\n\n<span>&lt;<span>section</span> <span>class</span>=<span>\"yellow\"</span>&gt;</span>\n  <span>&lt;<span>section</span> <span>class</span>=<span>\"blue\"</span>&gt;</span>\n    <span>&lt;<span>h1</span>&gt;</span>This headline is blue!<span>&lt;/<span>h1</span>&gt;</span>\n  <span>&lt;/<span>section</span>&gt;</span>\n<span>&lt;/<span>section</span>&gt;</span>\n</code></pre>\n<p>The headline is yellow when <code>.yellow</code> is the closer ancestor, and it’s blue when <code>.blue</code> is the closer ancestor.</p>\n<p>This is a fundamental change to how CSS works, so don’t get caught off guard. Use CSS Scoping with a lot of thought and care.</p>\n<p>Note that a selector like <code>.blue h1 { }</code> has higher specificity than a selector like <code>@scope (.yellow){ h1 { }}</code>. The specificity of the scoping root’s selector is not added to the specificity of the selectors inside the <code>@scope</code> rule, unlike Nesting. And <code>.blue h1</code> is higher specificity than <code>h1</code>.</p>\n<p>WebKit for Safari 17.4 also expands the purpose of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:scope\"><code>:scope</code></a> pseudo-class. When used inside a <code>@scope</code> block, <code>:scope</code> matches the block’s defined scope root. This provides a way to apply styles to the root of the scope from inside the <code>@scope</code> block itself. In the following example, <code>:scope</code> applies a border to the <code>article</code> element.</p>\n<figure>\n<pre><code><span>&lt;<span>article</span> <span>id</span>=<span>\"my-component\"</span>&gt;</span>\n  <span>&lt;<span>style</span>&gt;</span>\n    @scope {\n      :scope { border: 1px solid black; }    \n      h1 { font-size: 4rem; }\n    }\n  <span>&lt;/<span>style</span>&gt;</span>\n  <span>&lt;<span>h1</span>&gt;</span>This is 4rem text.<span>&lt;/<span>h1</span>&gt;</span>\n<span>&lt;/<span>article</span>&gt;</span>\n</code></pre><figcaption>You can try <a href=\"https://codepen.io/jensimmons/pen/mdoQmQx??editors=1100\">this demo</a> in a <a href=\"https://caniuse.com/css-cascade-scope\">browser with support</a>.</figcaption></figure>\n<h3><a name=\"white-space-and-text-wrap\"></a>White space and text wrap</h3>\n<p>For years, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/white-space\"><code>white-space</code></a> property in CSS has provided a mechanism for doing two things at once: 1) defining whether and how white space is collapsed, and 2) defining whether and how lines wrap. The CSS Working Group has since noted that this was likely <a href=\"https://wiki.csswg.org/ideas/mistakes\">a mistake</a>, to handle two different qualities in one property. With the introduction of <code>text-wrap</code>, the CSSWG has rethought how the long and shorthand versions of these properties combine into an architecture that makes more sense and gives us needed flexibility.</p>\n<p>Now the <code>white-space</code> property is a shorthand for <a href=\"https://caniuse.com/?search=white-space-collapse\">two</a> <a href=\"https://caniuse.com/?search=text-wrap-mode\">new</a> longhand properties: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/white-space-collapse\"><code>white-space-collapse</code></a> and <a href=\"https://drafts.csswg.org/css-text-4/#text-wrap-mode\"><code>text-wrap-mode</code></a>, both added in WebKit for Safari 17.4. These longhands let you change the collapsing and wrapping modes independently, each without affecting the other.</p>\n<p>The <code>white-space-collapse</code> property controls how white space is collapsed. By default, it’s set to <code>collapse</code>, causing strings of multiple spaces to become a single space. You can change the value instead to <code>preserve</code> in order to keep all the spaces, or use other the values: <code>preserve-breaks</code>, <code>preserve-spaces</code>, or <code>break-spaces</code>. These values all behave as they have for years with the <code>white-space</code> property.</p>\n<p>The new <code>text-wrap-mode</code> property provides a mechanism for setting whether or not text should wrap. The  <code>wrap</code> value turns it on, and the <code>nowrap</code> value turns it off.</p>\n<p>This work sets the stage for the <code>text-wrap</code> shorthand and it’s longhands <code>text-wrap-style</code> and <code>text-wrap-mode</code>, some of which you can currently test in <a href=\"https://developer.apple.com/safari/technology-preview/\">Safari Technology Preview</a>.</p>\n<h3><a name=\"percentages-in-spacing\"></a>Percentages in spacing</h3>\n<p>WebKit for Safari 17.4 adds support for percentages in <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing\"><code>letter-spacing</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/word-spacing\"><code>word-spacing</code></a>. This lets you define spacing as a percentage of the element’s <code>font-size</code>  — and keeps tracking the <code>font-size</code> even when it grows or shrinks on descendant elements.</p>\n<h3><a name=\"styling-grammar-and-spelling-errors\"></a>Styling grammar and spelling errors</h3>\n<p>WebKit for Safari 17.4 adds support for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::spelling-error\"><code>::spelling-error</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::grammar-error\"><code>::grammar-error</code></a> pseudo-elements. These make it possible to create your own custom styling for text that is marked by the browser as misspelled or grammatically incorrect.</p>\n<h3><a name=\"alt-text-for-generated-content\"></a>Alt text for generated content</h3>\n<p>The vast majority of content on the web is communicated through HTML, but CSS does have the ability to insert content into the page. Until now, sometimes this kind of content could not be made accessible. Now in WebKit for Safari 17.4, you can provide alternative text with accessible <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/content\"><code>content</code></a> fallback — <code>content: \"foo\" / \"alt-text\";</code></p>\n<p>For example, perhaps we want to prefix certain links with the little ⓘ icon to let users know this item leads to more detailed information. That symbol might be read by screenreader as “Circled Latin Small Letter I” or “Information source combining enclosing circle”, neither of which do a good job communicating the intended purpose. Perhaps a better experience would be to simply hear “Info:”.</p>\n<pre><code><span>.info</span>::<span>before</span> {\n  <span>content</span>: <span>\"ⓘ\"</span> / <span>\"Info:\"</span>;\n}\n</code></pre>\n<p>Previously, the <code>-webkit-alt</code> property served this function. It has been deprecated in favor of the new content alt text syntax. The new syntax is also more expressive as it allows for cascading, and allows you to chain multiple strings and <code>attr()</code> as alternative text.</p>\n<h3><a name=\"transitions\"></a>Transitions</h3>\n<p>When CSS Transitions were created, they allowed authors to create a gradual timed transition between old and new values by interpolation. Sometimes, however, interpolation is not possible. For example, there’s no meaningful intermediary value between <code>float: left</code> and <code>float: right</code>, so, transitions ignored these properties. They simply jumped from the first state to the second immediately, without any ability to define when the jump should happen.</p>\n<p>Yet, web developers have wanted a way to at least be able to define when the transition should happen for discrete properties. So the CSS Working Group figured out a way to make that possible. Now, you can tell the browser that you want an element to be capable of transitioning discrete property values, which lets you control their transition timing using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function\">easing functions</a>.</p>\n<p>WebKit for Safari 17.4 adds support for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transition-behavior\"><code>transition-behavior</code></a> property. The <code>transition-behavior: allow-discrete</code> rule lets you enable transitions between discrete property values, so that you can control their timing via  <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transition\"><code>transition</code></a>.</p>\n<figure>\n<pre><code><span>li</span> {\n  <span>list-style</span>: <span>disc</span>;\n  <span>color</span>: <span>blue</span>;\n  <span>transition</span>: <span>all</span> <span>2s</span>, <span>list-style</span> <span>0.5s</span> <span>step-end</span>;\n  <span>transition-behavior</span>: <span>allow-discrete</span>;\n}\n<span>li</span><span>:hover</span> {\n  <span>list-style</span>: <span>square</span>;\n  <span>color</span>: <span>red</span>;\n}\n</code></pre><figcaption>Try <a href=\"https://codepen.io/jensimmons/pen/oNONvMw??editors=1100\">this demo code</a> in a browser with <a href=\"https://caniuse.com/mdn-css_properties_transition-behavior\">support</a>. Toggle <code>transition-behavior</code> off to see the difference.</figcaption></figure>\n<h3><a name=\"has\"></a>:has()</h3>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:has\"><code>:has()</code></a> pseudo-class provides tremendous value. We keep making it more and more powerful by adding support for additional pseudo-classes within <code>:has()</code>. WebKit for Safari 17.4 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:any-link\"><code>:has(:any-link)</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:link\"><code>:has(:link)</code></a>, and <code>:has(:-webkit-any-link)</code>, making it possible to select an element depending on whether or not it contains a link.</p>\n<h3><a name=\"and-more\"></a>And more</h3>\n<p>WebKit for Safari 17.4 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/--*\">CSS custom properties</a> to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::backdrop\"><code>::backdrop</code></a> pseudo-element, allowing variables to be applied to the backdrop behind <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog\"><code>dialog</code></a> elements and other top layer items.</p>\n<p>WebKit for Safari 17.4 also adds <code>offset-position</code> support for <code>circle()</code> and <code>ellipse()</code>.</p>\n<p>And WebKit for Safari 17.4 makes <code>-apple-</code> prefixed pseudo-elements no longer valid.</p>\n<h2><a name=\"web-api\"></a>Web API</h2>\n<p>This release of Safari adds support for an assortment of small Web API additions that give you extra tools in your developer toolkit.</p>\n<p>With support for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/checkVisibility\"><code>element.checkVisibility()</code></a> method, you can determine the visibility of an element across a variety of conditions including how CSS properties such as <code>display</code>, <code>visibility</code>, and <code>opacity</code> are applied.</p>\n<p>WebKit for Safari 17.4 also extends its <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot\">Declarative Shadow Root</a> support. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/setHTML\"><code>Element.prototype.setHTMLUnsafe()</code></a>, <code>ShadowRoot.prototype.setHTMLUnsafe()</code>, and <code>Document.parseHTMLUnsafe()</code> methods, as well as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/clonable\">ShadowRoot <code>clonable</code></a> property are now available. The <code>setHTMLUnsafe()</code> methods work similar to setting an element’s <code>innerHTML</code> property, enabling unsanitized DOM tree mutation but with additional support for declarative shadow roots. The <code>parseHTMLUnsafe()</code> method similarly parses unsanitized HTML with declarative shadow root support and returns a document. And the <code>clonable</code> read-only boolean property allows you to detect if a ShadowRoot is clonable.</p>\n<p>WebKit for Safari 17.4 adds support for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CustomStateSet\">CustomStateSet interface</a> for custom element state management. This interface includes methods to <code>add()</code>, <code>delete()</code>, or detect if the element <code>has()</code> a given state, and more. Importantly, these states added to a custom element can be styled using the <code>:state()</code> pseudo-class by users of the custom element.</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly\">DOMMatrixReadOnly</a> interface now supports the <code>scaleNonUniform()</code> method that  creates a new DOMMatrix scaling on X, Y, and Z axes. The X axis scaling factor must be specified, but the Y and Z axes default to <code>1</code>. The scaling is centered at the given origin that defaults to <code>(0, 0, 0)</code>.</p>\n<p>Lastly, WebKit for Safari 17.4 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static\"><code>AbortSignal.any()</code></a> giving you a convenient way to combine abort signals such as user input (e.g. a user clicks a cancel button) and a timeout to send an abort signal to an async operation.</p>\n<h2><a name=\"javascript\"></a>JavaScript</h2>\n<p>New JavaScript features in Safari 17.4 add new expressiveness and convenience with promise resolvers, improved internationalization formatting, <code>ArrayBuffer</code> ownership management, and Array grouping features.</p>\n<p>WebKit for Safari 17.4 adds support for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers\"><code>Promise.withResolvers</code></a> static method. It allows developers the convenience of creating a promise and configure the resolution and rejection handlers after it has been created. The method returns the promise along with the resolution and rejection functions.</p>\n<pre><code><span>const</span> { <span>promise</span>, <span>resolve</span>, <span>reject</span> } <span>=</span> <span>Promise</span>.<span>withResolvers</span>();\n</code></pre>\n<p>The <code>TimeZoneOffset</code> format is now available for <code>Intl.DateTimeFormat</code>. It allows you to specify the difference of the local time to UTC time in positive or negative hours and minutes depending on whether the local time is ahead or behind.</p>\n<pre><code><span>new</span> <span>Intl</span>.<span>DateTimeFormat</span>(<span>\"en-US\"</span>, {\n    <span>dateStyle</span><span>:</span> <span>'long'</span>,\n    <span>timeStyle</span><span>:</span> <span>'long'</span>,\n    <span>timeZone</span><span>:</span> <span>'-0800'</span>\n}).<span>format</span>(<span>new</span> <span>Date</span>())\n</code></pre>\n<p>Additionally, <code>Number.prototype.toLocaleString</code> and <code>Intl.NumberFormat</code> have been updated so the string representation correctly aligns with recent specification changes.</p>\n<p>There’s also new expressive API for managing the concept of ownership for ArrayBuffers. <code>ArrayBuffer.prototype.transfer</code> creates a new ArrayBuffer with the same contents and properties as the target ArrayBuffer (such as being resizable) and detaches it from the original ArrayBuffer. You can use <code>ArrayBuffer.prototype.transferToFixedLength()</code> to guarantee a non-resizable ArrayBuffer with the same content as the buffer. <code>ArrayBuffer.prototype.detached</code> will tell you if the buffer has been transferred and is detached.</p>\n<p>WebKit for Safari 17.4 adds also adds the Array grouping feature that includes <code>Object.groupBy</code> and <code>Map.groupBy</code> methods. These methods give you powerfully simple tools for grouping datasets.</p>\n<pre><code><span>const</span> <span>todos</span> <span>=</span> [\n    { <span>task</span><span>:</span> <span>\"Water the flowers\"</span>, <span>context</span><span>:</span> <span>\"home\"</span>, <span>estimate</span><span>:</span> <span>\"5 minutes\"</span> },\n    { <span>task</span><span>:</span> <span>\"Get the TPS report done\"</span>, <span>context</span><span>:</span> <span>\"work\"</span>, <span>estimate</span><span>:</span> <span>\"45 minutes\"</span> },\n    { <span>task</span><span>:</span> <span>\"Find new insurance\"</span>, <span>context</span><span>:</span> <span>\"home\"</span>, <span>estimate</span><span>:</span> <span>\"180 minutes\"</span> },\n    { <span>task</span><span>:</span> <span>\"Fix a website bug\"</span>, <span>context</span><span>:</span> <span>\"work\"</span>, <span>estimate</span><span>:</span> <span>\"25 minutes\"</span> },\n    { <span>task</span><span>:</span> <span>\"Answer emails\"</span>, <span>context</span><span>:</span> <span>\"anywhere\"</span>, <span>estimate</span><span>:</span> <span>\"10 minutes\"</span> }\n];\n\n<span>let</span> <span>contextual_tasks</span> <span>=</span> <span>Object</span>.<span>groupBy</span>(<span>todos</span>, ({ <span>context</span> }) <span>=</span><span>&gt;</span> <span>context</span>);\n<span>console</span>.<span>log</span>(<span>contextual_tasks</span>);\n\n<span>let</span> <span>tasks_by_time</span> <span>=</span> <span>Map</span>.<span>groupBy</span>(<span>todos</span>, ({ <span>estimate</span> }) <span>=</span><span>&gt;</span> {\n    <span>return</span> <span>parseInt</span>(<span>estimate</span>.<span>split</span>(<span>' '</span>)[<span>0</span>]) <span>&lt;</span> <span>15</span> <span>?</span> <span>\"short\"</span> <span>:</span> <span>\"long\"</span>;\n});\n<span>console</span>.<span>log</span>(<span>tasks_by_time</span>);\n</code></pre>\n<h2><a name=\"media\"></a>Media</h2>\n<h3><a name=\"additional-codecs\"></a>Additional codecs</h3>\n<p>WebKit for Safari 17.4 adds support for several audio and video codecs.</p>\n<p>First, WebKit for Safari 17.4 on iOS, iPadOS and in visionOS adds support for <a href=\"https://en.wikipedia.org/wiki/WebM\">WebM</a>. While the WebM <a href=\"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Containers\">container</a> (with both the VP8 and VP9 video codecs) has been fully supported on macOS since Safari 14.1, support on iOS and iPadOS was limited to VP8 in WebRTC. Now, WebM is fully supported everywhere.</p>\n<p>The Vorbis audio codec is also now supported in WebKit on iOS 17.4, iPadOS 17.4 and in visionOS 1.1.</p>\n<p>And WebKit for Safari 17.4 expands what WebCodecs can do with the addition of support for the HEVC codec.</p>\n<h3><a name=\"source-prioritization\"></a>Source prioritization</h3>\n<p>When support for video embedding arrived in HTML5 with the <code>&lt;video&gt;</code> and <code>&lt;source&gt;</code> elements, the web standard specified that the first file that’s recognized by the browser should be chosen and played. This put the burden on the developer to make sure the best files were listed before lesser-quality files.</p>\n<figure>\n<pre><code><span>&lt;<span>video</span>&gt;</span>\n   <span>&lt;<span>source</span> <span>src</span>=<span>\"movie.webm\"</span>&gt;</span>\n   <span>&lt;<span>source</span> <span>src</span>=<span>\"movie.av1\"</span>&gt;</span>\n   <span>&lt;<span>source</span> <span>src</span>=<span>\"movie.mov\"</span>&gt;</span>\n<span>&lt;/<span>video</span>&gt;</span>\n</code></pre><figcaption>Are you sure the first format listed is always a better choice than the rest?</figcaption></figure>\n<p>This made sense in a simpler time, when there were just a few codecs available. Now, there are many codecs with different qualities. It’s not always possible for developers to know which file is the best one for a user to stream. And it can be impossible to put them in one specific order that’s best for all users.</p>\n<p>A browser might easily be capable of playing several of the files offered, but one of those files could be compressed with a codec that the user’s device can decode using hardware, while the rest might only be decoded by software alone.</p>\n<p>It’s definitely a better user experience to use hardware decoding. Doing so significantly impacts power usage and makes a battery last longer. So now, in WebKit for Safari 17.4, the best file for the user is chosen, instead of defaulting to the first file that has support. Video codecs with hardware decoding support on various Apple devices include VP9, h.264, HEVC and AV1.</p>\n<h3><a name=\"webvtt\"></a>WebVTT</h3>\n<p>WebKit for Safari 17.4 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Entity\">HTML character entities</a> to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API\">WebVTT</a> (Web Video Text Tracks Format), the technology used to add subtitles and captions to video files on the web. HTML entities are a way to write special characters without having the browser mistakenly think they are part of the HTML code. For example, <code>&amp;middot;</code>  represents the “·” character.</p>\n<h3><a name=\"mediastream\"></a>MediaStream</h3>\n<p>WebKit for Safari 17.4 adds support <a href=\"https://www.w3.org/TR/image-capture/#white-balance-mode\"><code>whiteBalanceMode</code></a> to MediaStream. In photography, adjusting white balance is a technique for compensating for the fact that “white” is a different color under different lighting conditions. Sunlight is very blue, while indoor lights tend to be quite orange. Our brains automatically adjust, so as humans, we rarely notice. But cameras need technology to help them adjust color temperature so that the resulting photo or video has the kind of coloring people expect. Now modes for white balance are available for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Image_Capture_API\">MediaStream Image Capture API</a> on the web.</p>\n<h2><a name=\"svg\"></a>SVG</h2>\n<p>WebKit for Safari 17.4 adds support for <code>kernelUnitLengthX</code> and <code>kernelUnitLengthY</code> to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpecularLightingElement\"><code>SVGFESpecularLightingElement</code></a>.</p>\n<h2><a name=\"webgl\"></a>WebGL</h2>\n<p>WebKit for Safari 17.4 adds support for four new WebGL extensions: <code>EXT_clip_control</code>, <code>EXT_depth_clamp</code>, <code>EXT_polygon_offset_clamp</code>, and <code>WEBGL_polygon_mode</code>.</p>\n<h2><a name=\"web-assembly\"></a>Web Assembly</h2>\n<p>WebKit for Safari 17.4 enables extended constant expressions to support more advanced WebAssembly linking.</p>\n<h2><a name=\"web-inspector\"></a>Web Inspector</h2>\n<p>Web Inspector for Safari 17.4 has two new features. First, when a page attempts to load a font URL blocked by Lockdown Mode, a message is logged to the Console.</p>\n<p>Second, Web Inspector now groups load errors for source maps. Source map files are used for converting a combined or minified file back into its original state. Grouping load errors helps reduce noise while debugging. You can disable this behavior in Web Inspector Settings under Experimental settings.</p>\n<h2><a name=\"changes-to-safari\"></a>Changes  to Safari</h2>\n<p>Safari 17.4 itself includes three changes to the UI and user experience. First, you can now configure the Favorites Bar to show your bookmarks with only their icons. Edit the name of the bookmark in the favorites bar, and remove the name. The icon will remain.</p>\n<p>Second, Safari 17.4 now supports webpage translation inside <code>&lt;iframe&gt;</code> elements.</p>\n<p>And third, Safari 17.4 adds support for Apple Cash virtual card numbers and showing the user their Apple Cash balance when using AutoFill.</p>\n<h2><a name=\"safari-extensions\"></a>Safari Extensions</h2>\n<p>Safari 17.4 includes a change to web extensions that allows extensions to open Private Browsing windows even when they don’t have access to Private Browsing.</p>\n<h2><a name=\"web-authentication\"></a>Web Authentication</h2>\n<p>WebKit for Safari 17.4 adds support for WebAuthn’s <code>PublicKeyCredentials.getClientCapabilities()</code> function. Use it to find out which WebAuthn features are supported. It returns a Promise of a <code>record&lt;DOMString, boolean&gt;</code> containing capabilities and their values.</p>\n<h2><a name=\"bug-fixes-and-more\"></a>Bug Fixes and more</h2>\n<p>In addition to all the new features, WebKit for Safari 17.4 includes work polishing existing features.</p>\n<h3><a name=\"accessibility\"></a>Accessibility</h3>\n<ul>\n<li>Fixed exposing the correct <code>&lt;summary&gt;</code> element role. (13661104)  </li>\n<li>Fixed non-accessible content within iframes with ARIA roles.  (104611075)  </li>\n<li>Fixed VoiceOver word echo on text inputs with a <code>combobox</code> role.  (112488137)  </li>\n<li>Fixed an issue where <code>innerHTML</code> and <code>innerText</code> changes to labels did not update their corresponding input element’s accessibility title.  (113872525)  </li>\n<li>Fixed <code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code> elements not included in VoiceOver form controls menu or list. (117308226)  </li>\n<li>Fixed comboboxes not notifying assistive technologies when <code>aria-activedescendant</code> changes.  (117747058)  </li>\n<li>Fixed toggling accessibility preferences to correctly update form control appearance. (117914468)  </li>\n<li>Fixed: Removed the default ARIA-level heading for a heading role, matching removal from ARIA specifications. (119059172)  </li>\n<li>Fixed text missing from accessibility labels for many common shadow DOM scenarios. (120223342)  </li>\n</ul>\n<h3><a name=\"browser-changes\"></a>Browser Changes</h3>\n<ul>\n<li>Fixed loading a ⌘Click fragment link in a background tab. (119079650)  </li>\n</ul>\n<h3><a name=\"css\"></a>CSS</h3>\n<ul>\n<li>Fixed the default link color contrast for the dark color scheme.  (61149466)  </li>\n<li>Fixed <code>getComputedStyle()</code> for invalid pseudo-elements. (98504661)  </li>\n<li>Fixed <code>querySelector()</code> to not throw an exception for <code>-webkit-</code> prefixed pseudo-elements. (99299129)  </li>\n<li>Fixed <code>:user-invalid</code> triggering while typing a date. (110687369)  </li>\n<li>Fixed: Updated <code>text-transform: full-size-kana</code> to align with Unicode 15.  (111508663)  </li>\n<li>Fixed <code>contain: inline-size</code> breaking <code>grid-template-rows: auto</code>. (113915953)  </li>\n<li>Fixed <code>svh</code> and <code>dvh</code> units being unexpectedly equal when the Safari tab bar is not visible.  (115085360)  </li>\n<li>Fixed <code>mixed-blend-mode</code> to blend correctly against the root background. (115688282)  </li>\n<li>Fixed <code>backdrop-filter</code> with many interoperability improvements. (115703346)  </li>\n<li>Fixed <code>oklab</code> and <code>oklch</code> lightness value clamping. (116195533)  </li>\n<li>Fixed flex layout invalidation in cases where the content of a flex item changes or style changes impact the preferred widths computation of its items.  (117181858)  </li>\n<li>Fixed selection gaps to get painted with the expected <code>::selection</code> pseudo-element color. (117796745)  </li>\n<li>Fixed parsing and serialization of <code>-webkit-</code> prefixed pseudo-elements. (118081134)  </li>\n<li>Fixed <code>::backdrop</code> to be allowed after <code>::slotted()</code>. (119015204)  </li>\n<li>Fixed to allow <code>:checked</code> and <code>:indeterminate</code> to match at the same time. (119075969)  </li>\n<li>Fixed grid with size containment and <code>min-height</code> not sizing row correctly. (119736473)  </li>\n<li>Fixed computing values of basic shape <code>rect()</code> and <code>xywh()</code> as the equivalent <code>inset()</code>.  (119739406)  </li>\n<li>Fixed poor performance with <code>:has(+ :not(.class))</code> pseudo-class selector. (119819247)  </li>\n<li>Fixed CSS <code>content</code> computed value serialization. (120061551)  </li>\n<li>Fixed pseudo-element parsing in <code>getComputedStyle()</code> and <code>KeyframeEffect.prototype.pseudoElement</code> so they require them starting with <code>::</code> (or <code>:</code> for 4 legacy pseudo-elements). (120170550)  </li>\n<li>Fixed CSS <code>linear()</code> easing. (120290721)  </li>\n<li>Fixed named at-rule container getting skipped when  the container is named in a <code>:host</code> selector.  (120428386)  </li>\n<li>Fixed <code>:not(:has(:not(foo)))</code> getting misclassified as scope breaking.  (120492012)  </li>\n<li>Fixed the name for a <code>::slotted</code> pseudo-element in a container query getting resolved against the wrong scope. (122224135)  </li>\n<li>Made <code>-apple-</code> prefixed pseudo-elements no longer valid. (120268884)  </li>\n</ul>\n<h3><a name=\"forms\"></a>Forms</h3>\n<ul>\n<li>Fixed <code>&lt;select&gt;</code> not refreshing the dropdown after an <code>&lt;option&gt;</code> is removed on iPad.  (88292987)  </li>\n<li>Fixed <code>text-indent</code> to affect the selected file(s) label for file inputs. (105223868)  </li>\n<li>Fixed <code>dir=auto</code> to work for <code>hidden</code>, <code>password</code>, <code>submit</code>, <code>reset</code>, and <code>button</code> input types, made <code>dirname</code> work for <code>password</code> and <code>submit</code> input types, and removed <code>dirname</code> support from <code>number</code> input types.  (113127508)  </li>\n<li>Fixed serialization of <code>autocomplete</code> with a <code>webauthn</code> token. (116107937)  </li>\n<li>Fixed <code>&lt;option&gt;</code> elements outside of an <code>&lt;optgroup&gt;</code> getting added to the preceding group.  (117930480)  </li>\n</ul>\n<h3><a name=\"fullscreen\"></a>Fullscreen</h3>\n<ul>\n<li>Fixed viewport units to be correct after entering and exiting fullscreen mode on iOS, iPadOS, and in visionOS.  (120496571)  </li>\n</ul>\n<h3><a name=\"html\"></a>HTML</h3>\n<ul>\n<li>Fixed the <code>system-ui</code> font family within <code>&lt;canvas&gt;</code>.  (117231545)  </li>\n<li>Fixed <code>&lt;progress&gt;</code> to use the page’s preferred rendering update interval. (118976548)  </li>\n<li>Fixed missing support for the <code>direction</code> attribute in the list of attributes whose values are matched case-insensitively with attribute selectors. (<a href=\"https://commits.webkit.org/272219@main\"></a> (119432066)  </li>\n</ul>\n<h3><a name=\"javascript\"></a>JavaScript</h3>\n<ul>\n<li>Fixed stringification algorithm of the Function constructor to match specifications. (102065151)  </li>\n<li>Fixed block-level function declarations to have correct scope in global code and aligned the detection of hoistable block-level legacy function declarations with the spec.  (113880075)  </li>\n<li>Fixed an edge case with detecting a semantic error in generators. (117497786)  </li>\n<li>Fixed Temporal API to throw TypeErrors for unexpected primitives. (117992134)  </li>\n<li>Fixed Temporal options handling to align with the specification. (118088676)  </li>\n<li>Fixed <code>Temporal.Now.timeZone()</code> to be updated to <code>timeZoneId()</code>.  (118674314)  </li>\n</ul>\n<h3><a name=\"loading\"></a>Loading</h3>\n<ul>\n<li>Fixed Link-stylesheet elements to not fire load events for non-text/css and non-2XX responses. (116112223)  </li>\n<li>Fixed link-stylesheet elements to not fire load events for non-2XX responses such as 3XX responses that do not redirect. (116331826)  </li>\n</ul>\n<h3><a name=\"lockdown-mode\"></a>Lockdown Mode</h3>\n<ul>\n<li>Fixed Lockdown Mode disabling on sites with COOP and COEP HTTP headers.  (119503109)  </li>\n</ul>\n<h3><a name=\"media\"></a>Media</h3>\n<ul>\n<li>Fixed WebVTT regions to position according to specifications. (23091897)  </li>\n<li>Fixed pausing MediaRecorder continuing to call <code>ondataavailable</code> at every timeslice event.  (115979604)  </li>\n<li>Fixed an HEVC decoder issue when translating annexb data. (116768196)  </li>\n<li>Fixed WebVTT to treat negative percentages as invalid values. (117615681)  </li>\n<li>Fixed <code>object-fit: fill</code> on <code>&lt;video&gt;</code> elements.  (118020922)  </li>\n<li>Fixed WebRTC calls not unmuting automatically after using Siri sometimes losing incoming audio.  (118461093)  </li>\n<li>Fixed white bars across the top and bottom of fullscreen video playback while using Light Mode.  (118530255)  </li>\n<li>Fixed the always empty <code>video.buffered</code> attribute. (118550061)  </li>\n<li>Fixed WebVTT to correctly parse region <code>id</code> settings. (118551267)  </li>\n<li>Fixed VideoEncoder produces no frames with latencyMode “realtime” when framerate/bitrate are not given. (118725549)  </li>\n<li>Fixed AV1-in-MP4 codec string not shown in Show Media Stats.  (118850797)  </li>\n<li>Fixed <code>getDisplayMedia</code> <code>frameRate</code> always at 30 regardless of constraints.  (118874132)  </li>\n<li>Fixed returning to fullscreen from picture-in-picture breaking subsequent touch input.  (119832557)  </li>\n<li>Fixed HLS video captions where there are multiple text tracks available. ( (119839950)  </li>\n<li>Fixed fullscreen video not scaling to display size when the Safari window is in Full Screen App Mode. (119893556)  </li>\n<li>Fixed handling key renewal requests that cause playback errors for some DRM content. (120230860)  </li>\n<li>Fixed camera and mic activation failure due to media capability granting and activation order.  (120510826)  </li>\n<li>Fixed paint-on captions shifting during playback. (120847946)  </li>\n<li>Fixed videos shifting up and down when fullscreen overlay controls appear or disappear.  (120848395)  </li>\n<li>Fixed volume slider flickering when adjusting volume in Safari in visionOS. (120855936)  </li>\n<li>Fixed blocked encrypted sampled not getting enqueued after a CDM is attached to a SourceBuffer. (120879185)  </li>\n<li>Fixed video playback on Twitter.com in Safari in visionOS.  (121391975)  </li>\n<li>Fixed[Netflix.com content that can become zoomed-in and cropped when in fullscreen mode.  (121822831)  </li>\n<li>Fixed pseudo-element font size calculation to fix subtitle size in fullscreen mode. (122584350)  </li>\n</ul>\n<h3><a name=\"rendering\"></a>Rendering</h3>\n<ul>\n<li>Fixed incorrectly oriented Traditional Mongolian script characters.(93426525)  </li>\n<li>Fixed resizing behavior with <code>writing-mode: vertical-rl</code> or <code>direction: rtl</code>. (102620110)  </li>\n<li>Fixed opacity and rendering the root element background image. (115396444)  </li>\n<li>Fixed the color of the drop shadow to preserve its alpha channel. (115812347)  </li>\n<li>Fixed filters with outsets to repaint the entire filterRegion if GraphicsStyles are used. (115817290)  </li>\n<li>Fixed compositing the filter style transparency layers to not clip the destination context.  (115901634)  </li>\n<li>Fixed a bug where the returned transform from <code>getComputedStyle</code> was incorrect. (117523629)  </li>\n<li>Fixed handling images with color spaces not supported by the backend to fallback to render in sRGB. (118238178)  </li>\n<li>Fixed check boxes and radio buttons to avoid floats. (118660695)  </li>\n<li>Fixed rendering for a <code>&lt;div&gt;</code> within a transformed parent <code>&lt;div&gt;</code> with  <code>overflow: hidden</code>.  (118901069)  </li>\n<li>Fixed rendering issues when editing text.  (119833765)  </li>\n<li>Fixed <code>offsetHeight</code> and <code>offsetWidth</code> are 0 for an inline box wrapping a block. (119955792)  </li>\n<li>Fixed a floating element causing a list item bullet to be orphaned on constrained lines. (120022893)  </li>\n<li>Fixed incorrect inline box (hugging) outline painting in vertical writing modes. (120217559)  </li>\n<li>Fixed incorrect <code>ch</code> unit value in <code>vertical-rl</code> and <code>vertical-lr</code> when <code>text-orientation</code> is not upright. (120293590)  </li>\n<li>Fixed graphics artifacts when scrolling a Heroku app. (120373474)  </li>\n<li>Fixed <code>overflow: hidden</code> to not prevent CSS Subgrid from applying. (120848131)  </li>\n<li>Fixed the repaint area for underline text decorations. (121082290)  </li>\n<li>Fixed <code>align-content</code> and <code>justify-content</code> on scroll containers causing overflowing content to become inaccessible. (121366949)  </li>\n<li>Fixed rendering floats and an out-of-flow <code>&lt;br&gt;</code> element with <code>clear</code>. (121444267)  </li>\n<li>Fixed a line break at gaps between two inline elements in a container with <code>white-space: nowrap</code>.  (121859917)  </li>\n<li>Fixed cropped first letter for custom fonts that report negative advance width.  (121891210)  </li>\n<li>Removed <code>margin-trim</code> behavior for floats to match specification changes. (115794102)  </li>\n</ul>\n<h3><a name=\"safari-extensions\"></a>Safari Extensions</h3>\n<ul>\n<li>Fixed sending an error back to the caller if an error occurs for <code>scripting.executeScript()</code>.  (107996753)  </li>\n<li>Fixed an issue where scripts may not be removed after calling <code>scripting.unregisterContentScripts()</code>.  (113171510)  </li>\n</ul>\n<h3><a name=\"scrolling\"></a>Scrolling</h3>\n<ul>\n<li>Fixed unusable horizontal scrollbars for right-to-left, <code>vertical-rl</code>, or flexbox reverse mode elements.  (104944522)  </li>\n<li>Fixed a <code>scrollTo()</code> followed by an animated scroll ending at the wrong scroll position.  (117608836)  </li>\n<li>Fixed wheel overflow behavior with Shadow DOM elements. (118496293)  </li>\n<li>Fixed keyboard scrolling beyond the page getting stuck at a bad scroll offset. (120053910)  </li>\n</ul>\n<h3><a name=\"storage\"></a>Storage</h3>\n<ul>\n<li>Fixed cases where website data is unexpectedly evicted. <a href=\"https://commits.webkit.org/272951@main\"></a>(119818267)  </li>\n</ul>\n<h3><a name=\"svg\"></a>SVG</h3>\n<ul>\n<li>Fixed applying <code>rx</code> or <code>ry</code> exclusively via CSS having no effect.  (113500023)  </li>\n<li>Fixed negative SVGTransform scale values to be correctly stringified. (118656892)  </li>\n<li>Fixed the layout of an SVG when it is inside an <code>&lt;iframe&gt;</code> without affecting the size of the <code>&lt;iframe&gt;</code>.  (120178866)  </li>\n<li>Removed support for SVGRenderingIntent.  (102516681)  </li>\n</ul>\n<h3><a name=\"urls\"></a>URLs</h3>\n<ul>\n<li>Fixed CSS invoked URL parsing to always use UTF-8 as agreed by the W3C CSS WG. (114889625)  </li>\n</ul>\n<h3><a name=\"web-animations\"></a>Web Animations</h3>\n<ul>\n<li>Fixed style invalidation for animations. (118500247)  </li>\n<li>Fixed a paused animation where <code>currentTime</code> is changed to 0 not restarting when unpaused. (118826588)  </li>\n</ul>\n<h3><a name=\"web-api\"></a>Web API</h3>\n<ul>\n<li>Fixed invalid coordinates on <code>wheel</code> and <code>gesturechange</code> events inside an iframe. (105243167)  </li>\n<li>Fixed HTMLAreaElement to align with the HTML Standard. (110028213)  </li>\n<li>Fixed the result of <code>Range.getClientRects()</code> and <code>Range.getBoundingRect()</code> for certain ranges. (112543805)  </li>\n<li>Fixed Scroll To Text Fragment to not scroll after dynamic stylesheet loads and the user has scrolled. (112608578)  </li>\n<li>Fixed SharedWorker referrer policy to default to its context referrer policy if none is provided in its script http response.  (114625126)  </li>\n<li>Fixed URL encoding for <code>Request</code>‘s <code>referrer</code> feature and <code>Response.redirect()</code>. They now always use UTF-8. (115219660)  </li>\n<li>Fixed reprocessing <code>&lt;meta name=\"color-scheme\"&gt;</code> when their <code>name</code> or <code>content</code> attribute changes.  (115958450)  </li>\n<li>Fixed <code>FetchResponse.formData()</code> to parse headers names as case insensitive. (116742000)  </li>\n<li>Fixed declarative shadow trees to match the latest specifications. (117655691)  </li>\n<li>Fixed jiggling caused by repeated calls to <code>scrollIntoView({ block: 'center' })</code>.  (117755250)  </li>\n<li>Fixed fullscreen warning banner to prevent cutting off long domain names.  (118078137)  </li>\n<li>Fixed updating <code>resizeBy</code> and <code>resizeTo</code> to use <code>int</code> rather than <code>float</code> to align with specifications.  (118872048)  </li>\n<li>Fixed the CookieChangeEvent to not be exposed when the Cookie Store API is disabled. (118902989)  </li>\n<li>Fixed <code>Element.prototype.setAttributeNode()</code> to not treat attribute names case insensitively. (119013600)  </li>\n<li>Fixed toggling the <code>spellcheck</code> attribute not toggling spelling markers on input elements. (119269616)  </li>\n<li>Fixed removing highlights in the Custom Highlights API. (119531671)  </li>\n<li>Fixed <code>getElementsByName()</code> to only return HTML elements, not SVG, MathML, or other types of elements. (120275680)  </li>\n<li>Fixed the <code>button</code> value for a <code>pointerup</code> event not matching the <code>pointerdown</code> event. (120429508)  </li>\n<li>Fixed a wheel event to fire on an element that has been re-inserted after <code>document.open</code>. (120893136)  </li>\n<li>Fixed Scroll To Text Fragment Text Directives to find text with additional unrendered white space in their node data. (120913588)  </li>\n<li>Fixed changing HTMLCanvasElement width or height causing intermediate buffer allocations. (122309325)  </li>\n<li>Fixed canvas <code>captureStream</code> stuttering with WebGL. ((122471664)  </li>\n</ul>\n<h3><a name=\"web-inspector\"></a>Web Inspector</h3>\n<ul>\n<li>Fixed Home Screen Web Apps in Simulator to be listed under a “Home Screen Web Apps” section in the device submenu of the Develop menu.  (117742935)  </li>\n<li>Fixed the <code>tan()</code> function to not trigger the color picker.  (118724061)  </li>\n</ul>\n<h3><a name=\"webgl\"></a>WebGL</h3>\n<ul>\n<li>Fixed Canvas WebGL context capture to WebCodecsVideoFrame not capturing all frames. (108459224)  </li>\n<li>Fixed: Improved performance of MSAA rendering, including antialiased default framebuffer and fixed PBO uploads of PVRTC1 textures. (117461678)  </li>\n<li>Fixed WebGL OffscreenCanvas returning the previously created WebGL1 context when asking for WebGL2. (119028794)  </li>\n<li>Fixed WebGL to be available in nested workers.  (120279728)  </li>\n</ul>\n<h3><a name=\"webkit\"></a>WebKit</h3>\n<ul>\n<li>Fixed HTML content not displaying in a Simulator, affecting projects using the web extension project template.  (121338366)  </li>\n</ul>\n<h3><a name=\"webrtc\"></a>WebRTC</h3>\n<ul>\n<li>Fixed media tracks obtained with <code>{\"width\":1920,\"height\":1080,\"frameRate\":24}</code>. (61747755)  </li>\n<li>Fixed triggering resolution scaling in the case of WebRTC maintain-framerate <code>degradationPreference</code>. (121041723)  </li>\n<li>Fixed a bug that prevented HTML canvas elements from always being marked dirty on initialization. This could cause some video effects to have choppy animations.  (121257960)  </li>\n</ul>\n<h2><a name=\"updating-to-safari-17-4\"></a>Updating to Safari 17.4</h2>\n<p>Safari 17.4 is available on <a href=\"https://www.apple.com/ios/ios-17/\">iOS 17.4</a>, <a href=\"https://www.apple.com/ipados/ipados-17/\">iPadOS 17.4</a>, <a href=\"https://www.apple.com/macos/sonoma/\">macOS Sonoma 14.4</a>, macOS Ventura, macOS Monterey and in visionOS 1.1.</p>\n<p>If you are running macOS Ventura or macOS Monterey, you can update Safari by itself, without updating macOS. On macOS Ventura, go to  &gt; System Settings &gt; General &gt; Software Update and click “More info…” under Updates Available.</p>\n<p>To get the latest version of Safari on iPhone, iPad, or Apple Vision Pro, go to Settings &gt; General &gt; Software Update, and tap to update.</p>\n<h2><a name=\"feedback\"></a>Feedback</h2>\n<p>We love hearing from you. To share your thoughts on Safari 17.4, find us on Mastodon at <a href=\"https://front-end.social/@jensimmons\">@jensimmons@front-end.social</a> and <a href=\"https://mastodon.social/@jondavis\">@jondavis@mastodon.social</a>. Or send a reply on X to <a href=\"https://twitter.com/webkit\">@webkit</a>. You can also <a href=\"https://www.linkedin.com/in/apple-webkit/\">follow WebKit on LinkedIn</a>. If you run into any issues, we welcome your <a href=\"https://feedbackassistant.apple.com/\">feedback</a> on Safari UI, or your <a href=\"https://bugs.webkit.org/\">WebKit bug report</a> about web technologies or Web Inspector. Filing issues really does make a difference.</p>\n<p>Download the latest <a href=\"https://developer.apple.com/safari/technology-preview/\">Safari Technology Preview</a> on macOS to stay at the forefront of the web platform and to use the latest Web Inspector features.</p>\n<p>You can also find this information in the <a href=\"https://developer.apple.com/documentation/safari-release-notes/\">Safari 17.4 release notes</a>.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"38563d2f3d6c6b18fd3a236219e3e289a8e106c4d778a70a0cba839ff7cb6776","category":"Tech"}