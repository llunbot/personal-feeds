{"title":"From zero to hero with HashiCorp Boundary","link":"https://www.hashicorp.com/blog/from-zero-to-hero-hashicorp-boundary","date":1720634400000,"content":"<p><em>Chris van Meer is a <a href=\"https://www.hashicorp.com/ambassador\">HashiCorp Ambassador</a>.</em></p>\n\n<p><a href=\"https://developer.hashicorp.com/boundary/docs/overview/what-is-boundary\">HashiCorp Boundary</a> is a tool that simplifies and secures remote access to systems and applications. It gives administrators fine-grained access control without the need to manage complex network configurations or expose sensitive credentials. It also streamlines the process of granting and revoking access, making it easier for organizations to protect their critical infrastructure. </p>\n\n<p>Boundary differs from traditional solutions in this space, such as jump-boxes, bastion hosts, or VPNs, because it does not need any ingress firewall (NAT) rules or a bastion host (which also exposes the destination host). Instead, it needs only egress access to an upstream worker.</p>\n\n<p>This post shows how to set up Boundary from scratch and configure a complete remote access workflow that even someone with no Boundary knowledge whatsoever can use.</p>\n\n<p>Boundary is available in three editions: </p>\n\n<ul>\n<li><strong>Community edition:</strong> Free and source-available</li>\n<li><strong>Boundary Enterprise:</strong> The self-managed, on-premises commercial version with enterprise features</li>\n<li><strong>HCP Boundary:</strong> A SaaS version of Boundary available on the <a href=\"https://www.hashicorp.com/cloud\">HashiCorp Cloud Platform (HCP)</a> </li>\n</ul>\n\n<p>This post uses HCP Boundary in order  to get up and running faster than the on-premises versions. The tutorial uses code from the <a href=\"https://github.com/chrisvanmeer/hcp-boundary-demo-azure\">hcp-boundary-demo</a> GitHub repository to provision Boundary and some Microsoft Azure infrastructure for the demo using HashiCorp Terraform. </p>\n\n<h2>How Boundary works</h2>\n\n<p>Boundary allows traffic to flow to private subnets without actually having to open up ingress traffic on the private subnet. Boundary’s traffic flows are even more flexible in Boundary Enterprise and HCP Boundary, where you can use a process called <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/connection-workflows/multi-hop\">multi-hop sessions</a> with <a href=\"https://developer.hashicorp.com/boundary/tutorials/hcp-administration/hcp-manage-workers\">self-managed workers</a>. Put simply, after setting up these features, HCP Boundary will redirect your connection to a public ingress worker while the egress worker connects back to that ingress worker with only outbound traffic needed.</p>\n\n<p>In a sense, this follows the security principles of smart-home devices. For instance, you wouldn’t need to set up a personal firewall to access Philips Hue smart lights from outside of your home or to access your P1 smart energy meter from across the country.</p>\n\n<h2>Setting the stage</h2>\n\n<p>This  diagram of the final system’s architecture shows how it works:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720541323-schematic-overview.png\" alt=\"Boundary\" /><p>The system includes:</p>\n\n<ul>\n<li>HCP Boundary</li>\n<li>Two worker VMs, one dealing with ingress traffic, the other egress only (labeled “ingress worker” and “egress worker”)</li>\n<li>Four server VMs, three of them Linux (a different Linux distribution for each one denoted by the corner logos) and one of them Windows</li>\n</ul>\n\n<p>Note that both the egress worker and the server VMs are not publicly accessible (that means no ingress traffic is possible). They are allowed to receive traffic only within the same private subnet and to emit egress traffic to the internet. This is a key security layer of Boundary that traditional access methods (VPNs, jump-boxes, and bastion hosts) don’t support.</p>\n\n<p>Also note that this tutorial uses only <code>server1</code> as an SSH target, but feel free to experiment with HTTP (<code>server3</code> has a web server installed) and RDP on <code>server4</code> as well as <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/domain-model/host-sets\">host sets</a>.</p>\n\n<p>This tutorial uses the HCP Boundary UI for most tasks. This makes it easier to understand the steps, since a CLI tutorial would require memorizing a lot of IDs along the way. </p>\n\n<h2>Create an HCP Boundary cluster</h2>\n\n<p>To create an HCP Boundary cluster, navigate to the <a href=\"https://portal.cloud.hashicorp.com/\">HCP Portal</a> and log in.</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466141-image_29.png\" alt=\"HCP\" /><p>If you have not yet created an account, do so now. During this process you will be asked to create an organization. Within that organization you can create multiple projects. In the example screenshot below, the project is called MediumRare. Whatever you name your project, select that project from the dropdown menu, then click on the “Get started with Boundary” link shown in the image:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466136-image_28.png\" alt=\"Project\" /><p>From there, click on “Deploy Boundary”.</p>\n<img src=\"https://www.datocms-assets.com/2885/1720630063-2024-07-09_06-35-17.png\" alt=\"secure\" /><p>Then select the standard tier and supply a username and password for the main administrator account. After that, click “Deploy” and you will have a Boundary cluster within minutes.</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466131-image_27.png\" alt=\"Deploy-boundary\" /><p>After a short wait, you should see a green checkmark next to the status. From there you can continue and click on “Open Admin UI”. Fill in the administrator credentials and proceed to “Sign In”. On the screen that asks if you have a target to test, click “Do this later”.</p>\n\n<p>That’s it for now. You will return to Boundary through the HCP Boundary control plane (also called the Boundary UI) when you need to set up workers and your environment.</p>\n\n<h2>Deploy the infrastructure with Terraform</h2>\n\n<p>After the Boundary cluster is created, you can deploy the demo infrastructure from the GitHub repository <a href=\"https://github.com/chrisvanmeer/hcp-boundary-demo-azure\">hcp-boundary-demo</a>. Run these commands:</p>\n<pre><code>terraform init\nterraform plan\nterraform apply</code></pre><p>After a few minutes, Terraform will deploy your infrastructure within Microsoft Azure. When the run is completed successfully, the system will return information to will help you set up your environment for Boundary:</p>\n<pre><code>(..)\nApply complete! Resources: 28 added, 0 changed, 0 destroyed.\n\nOutputs:\n\nvm-server01 = \"serveradmin@100.0.1.6\"\nvm-server02 = \"serveradmin@100.0.1.4\"\nvm-server03 = \"serveradmin@100.0.1.8\"\nvm-server04 = \"serveradmin@100.0.1.5\"\nvm-server04-password = \nvm-worker-egress = \"boundary@100.0.1.7\"\nvm-worker-ingress = \"boundary@20.8.112.156\"</code></pre><p>Remember that from these deployed VMs, only the ingress worker will be accessible through a public IP address shown in the Terraform output.</p>\n\n<p><strong>Note:</strong> All of the IP addresses, tokens, and URLs in this demo have been destroyed before publishing this post</p>\n\n<h2>Install the self-managed workers</h2>\n\n<p>Connections within Boundary are processed by workers. By default, you get two HCP managed workers deployed with your Boundary cluster. But for this exercise, you’ll use your own installed workers to set up the connections to your private subnet.</p>\n\n<h2>Configure the ingress worker</h2>\n\n<p>Log into the newly installed ingress worker via SSH:</p>\n<pre><code>❯ ssh boundary@20.8.112.156\nThe authenticity of host '20.8.112.156 (20.8.112.156)' can't be established.\nED25519 key fingerprint is SHA256:73T5ofwyLDEzyQB0jvsSOsXz6sd4jwG8dACO8nUo6hQ.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '20.8.112.156' (ED25519) to the list of known hosts.\nWelcome to Ubuntu 22.04.4 LTS (GNU/Linux 6.5.0-1021-azure x86_64)\n\n* Documentation:  https://help.ubuntu.com\n* Management:     https://landscape.canonical.com\n* Support:        https://ubuntu.com/pro\n\nSystem information as of Tue Jun 11 09:28:09 UTC 2024\n\n System load:  0.12              Processes:             103\n Usage of /:   5.1% of 28.89GB   Users logged in:       0\n Memory usage: 30%               IPv4 address for eth0: 10.0.1.4\n Swap usage:   0%\n\n\nExpanded Security Maintenance for Applications is not enabled.\n\n0 updates can be applied immediately.\n\nEnable ESM Apps to receive additional future security updates.\nSee https://ubuntu.com/esm or run: sudo pro status\n\n\nThe list of available updates is more than a week old.\nTo check for new updates run: sudo apt update\n\nLast login: Tue Jun 11 09:28:11 2024 from 84.26.105.192\nTo run a command as administrator (user \"root\"), use \"sudo \".\nSee \"man sudo_root\" for details.\n\nboundary@vm-worker-ingress:~$</code></pre><p>Next, install the <code>boundary-enterprise</code> package. This installs the Boundary binary capable of connecting to HCP Boundary and Boundary Enterprise.</p>\n<pre><code>❯ wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg &gt;/dev/null\n❯ echo \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n❯ sudo apt update &amp;&amp; sudo apt install -y boundary-enterprise</code></pre><p>The next step involves creating a configuration file for the ingress worker. For this, you need two pieces of information:</p>\n\n<ol>\n<li>Your HCP Boundary cluster ID</li>\n<li>The public IP address of your ingress worker</li>\n</ol>\n\n<p>For the HCP Boundary cluster ID, navigate to the HCP Boundary control plane. In the left pane, choose “Workers” and then in the right pane click on “New”.</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466118-image_24.png\" alt=\"Workers\" /><p>In the form, you will be greeted with your Boundary cluster ID. Copy this into a text editor and leave the “New PKI Worker” in the background.</p>\n\n<p>The ingress worker has a public IP address and is available from the HCP Boundary control plane. For the public IP address of your ingress worker, you can either exit out of your SSH connection and repeat your last command and copy the IP address from that, or go back to the Terraform directory and issue a <code>terraform output</code> and copy the public IP address from there.</p>\n\n<p>Now, with the cluster ID and IP address, you can create an ingress worker configuration. Use the command below to load the configuration from the demo repository:</p>\n<pre><code>❯ sudo tee /etc/boundary.d/ingress-worker.hcl &gt; /dev/null &lt;&lt; EOF\ndisable_mlock           = true\nhcp_boundary_cluster_id = \"6a0ca1ac-8c75-47eb-8819-cc180d949f7e\"\n\nlistener \"tcp\" {\n address = \"0.0.0.0:9202\"\n purpose = \"proxy\"\n}\n\nworker {\n public_addr        = \"20.8.112.156\"\n auth_storage_path = \"/opt/boundary/ingress-worker\"\n tags {\n   type = [\"ingress\"]\n }\n}\nEOF</code></pre><p>Next, create a <a href=\"https://systemd.io/\">systemd</a> unit file to make sure that the worker is started automatically in the background:</p>\n<pre><code>❯ sudo tee /usr/lib/systemd/system/boundary-worker.service &gt; /dev/null &lt;&lt; EOF\n[Unit]\nDescription=Boundary Worker Service\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=boundary\nGroup=boundary\nType=simple\nExecStart=/usr/bin/boundary server -config=\"/etc/boundary.d/ingress-worker.hcl\"\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n❯ sudo systemctl daemon-reload\n❯ sudo systemctl enable --now boundary-worker\nCreated symlink /etc/systemd/system/multi-user.target.wants/boundary-worker.service → /lib/systemd/system/boundary-worker.service.\n</code></pre><p>Check the output of the service to get another critical piece of information, the “Worker Auth Registration Request”.</p>\n<pre><code>❯ journalctl -u boundary-worker | head -n 10\nvm-worker-ingress systemd[1]: Started Boundary Worker Service.\nvm-worker-ingress boundary[3201]: ==&gt; Boundary server configuration:\nvm-worker-ingress boundary[3201]:                                Cgo: disabled\nvm-worker-ingress boundary[3201]:                         Listener 1: tcp (addr: \"0.0.0.0:9202\", max_request_duration: \"1m30s\", purpose: \"proxy\")\nvm-worker-ingress boundary[3201]:                          Log Level: info\nvm-worker-ingress boundary[3201]:                              Mlock: supported: true, enabled: false\nvm-worker-ingress boundary[3201]:                            Version: Boundary v0.16.1+ent\nvm-worker-ingress boundary[3201]:                        Version Sha: bcf9720aabbe27a5bced2fff22c1469fd156e433\nvm-worker-ingress boundary[3201]:         Worker Auth Current Key Id: justness-rule-snuggle-monthly-swipe-mooned-vanity-calzone\nvm-worker-ingress boundary[3201]:   Worker Auth Registration Request: GzusqckarbczHoLGQ4UA25uSQrUxChDeeEbizy5XUx8g1gskPaTrsFUCKwT1nWYoEygfqyWwmHeKhPLDdoFRvmxYuFRFPtKWP6MbCoJdnB2FCFCwQ7EPeC5wN4zKGwZ1yeqbj3Y5i2zQ2onBdrhexPmiK5Ws7zBB76gCwKTxXZrCfCBHU4KinsmzvAZyTQJjWyAncC8T75uSLPB2HvQbg6Lx5SCYzoFsKipJQfso2ZczGzgz91jsMhdqxJQ6HztweszJHyJhMdi9LcKBacQqnN6VwHX4waSKW5Jqk7ETGo</code></pre><p>Copy the <code>Worker Auth Current Key Id:</code> token, head back to the Boundary UI, and in the “New PKI Worker” screen, scroll all the way down and paste that token into the field called “Worker Auth Registration Request” and then click “Register Worker”.</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466113-image_23.png\" alt=\"Register\" /><p>You should receive a “Registered successfully” message. After that, click on “Done”. Navigate back to the Workers overview page where you can see the new worker. Click on the blue underlined link to go to the new worker.</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466105-image_21.png\" alt=\"Edit\" /><p>It’s easier to remember what each worker is used for if you give them informative names. So on that page for the new worker, click on the button called “Edit Form” at the bottom  and give this worker the name “worker-ingress” and then click “Save”.</p>\n\n<p>And with that, you’ve configured the ingress worker. You can safely log out of the SSH session connected to the ingress worker, since you won’t need that anymore.</p>\n\n<h2>Configuring the egress worker</h2>\n\n<p>The process for the egress worker is similar: Install the package, create a configuration, create a systemd unit file, and then enable and start the service. However, since this egress worker is accessible only within the private subnet, you have to configure it through the Azure serial console.</p>\n\n<p>Log into your Azure portal, navigate to your resource group (by default it’s called <code>rg-boundary</code>), and you will get an overview of the created resources:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466092-image_19.png\" alt=\"Created\" /><p>Navigate to the “vm-worker-egress” resource and, in the left pane, scroll all the way down to “Reset password”. For ease of use, choose the “Reset password” mode. Keep the username <code>boundary</code> and choose a new password for this user. Then hit the “Update” button:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466100-image_20.png\" alt=\"vm-worker-egress\" /><p>It will take a couple of seconds for Azure to reset the password for the user. Once that is done, in the left pane scroll down until you see “Serial console”. Click on that and you will be greeted with a terminal.\nYou will see a lot of information about started services and some SSH keys. Hit Enter a few times to get a clear prompt and then log in with the username <code>boundary</code> and the password you just created in the previous step:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466088-image_18.png\" alt=\"serial\" /><p>In that terminal, first type in <code>sudo -i</code>. Then type in the password you created. Your prompt will now say <code>root@vm-worker-egress</code>. Type <code>exit</code> and hit Enter. The reason for this is because the commands that you will be applying to this console will use privileged access through <code>sudo</code>, but in the Azure serial console you will not see a password prompt during the installation tasks. Those steps will get ahead of this potential issue.</p>\n\n<p>After that, follow the same process as setting up the ingress worker, though the configuration is slightly different and you need only one piece of information: the public IP address of the ingress worker.</p>\n\n<p>First, install the package by pasting this code into the Azure serial console:</p>\n<pre><code>❯ wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg &gt;/dev/null\n❯ echo \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n❯ sudo apt update &amp;&amp; sudo apt install -y boundary-enterprise</code></pre><p>Your console will probably overlap after this — hit Ctrl+L to clear the console screen.</p>\n\n<p>After that, create the egress worker configuration:</p>\n<pre><code>❯ sudo tee /etc/boundary.d/egress-worker.hcl &gt; /dev/null &lt;&lt; EOF\ndisable_mlock = true\n\nlistener \"tcp\" {\n address = \"0.0.0.0:9203\"\n purpose = \"proxy\"\n}\n\nworker {\n initial_upstreams = [\"20.8.112.156:9202\"]\n auth_storage_path = \"/opt/boundary/egress-worker\"\n tags {\n   type = [\"egress\"]\n }\n}\nEOF</code></pre><p>Then create the service and start it. If you copied the command from the ingress worker, be sure to change the config file reference.</p>\n<pre><code>❯ sudo tee /usr/lib/systemd/system/boundary-worker.service &gt; /dev/null &lt;&lt; EOF\n[Unit]\nDescription=Boundary Worker Service\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=boundary\nGroup=boundary\nType=simple\nExecStart=/usr/bin/boundary server -config=\"/etc/boundary.d/egress-worker.hcl\"\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n❯ sudo systemctl daemon-reload\n❯ sudo systemctl enable --now boundary-worker</code></pre><p>Just like with the ingress controller, grab the worker auth registration request token and copy that onto your clipboard:</p>\n<pre><code>❯ journalctl -u boundary-worker | head -n 10\nvm-worker-egress systemd[1]: Started Boundary Worker Service.\nvm-worker-egress boundary[2437]: ==&gt; Boundary server configuration:\nvm-worker-egress boundary[2437]:                                Cgo: disabled\nvm-worker-egress boundary[2437]:                         Listener 1: tcp (addr: \"0.0.0.0:9203\", max_request_duration: \"1m30s\", purpose: \"proxy\")\nvm-worker-egress boundary[2437]:                          Log Level: info\nvm-worker-egress boundary[2437]:                              Mlock: supported: true, enabled: false\nvm-worker-egress boundary[2437]:                            Version: Boundary v0.16.1+ent\nvm-worker-egress boundary[2437]:                        Version Sha: bcf9720aabbe27a5bced2fff22c1469fd156e433\nvm-worker-egress boundary[2437]:         Worker Auth Current Key Id: diabetic-concise-turbine-daylight-colossal-cornball-petal-wanting\nvm-worker-egress boundary[2437]:   Worker Auth Registration Request: GzusqckarbczHoLGQ4UA25uSRQ9rDpjzx6UT4UunSzcmbeqmsKgNTtMsNA2HNZ35fiZr2UPq9SVzeLdNRaepuCDR6KsAuA6UmGpu2ot1GNizeHarSDcb959kna9kWBgHsgcBigiTAY454194n3JJkzZpwHdAJHdK7XBAi3FfuaYRCxtBACEhb6u9r4EZrN5cwBQojDptpNoKK1DmavYXrG5PMemmdS83EA5tV4uD1gN6omdqNF7ZkZVdp49WmmToUYVtz9GhhS6kZtspV5zTQzb9K3KDLSTf8ztZ3HwMgk</code></pre><p>With this copied, go back to the Boundary UI again to register the egress worker. Just like the last time, click on “Workers”, then “New”, scroll all the way down, and paste this registration request into the input field and click on “Register Worker”. Once this is done and you get a successfully added message, click on “Done” and exit out of the Azure serial console (make a habit of logging out of the console first).\nRename the egress worker like you did with the ingress worker.</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466082-image_17.png\" alt=\"worker\" /><p>You see that even though the egress worker is not publicly accessible, HCP Boundary can still communicate with the worker.\nBoth workers are now set up:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466078-image_16.png\" alt=\"workers\" /><h2>Create a target configuration</h2>\n\n<p>The next step is to configure HCP Boundary with your desired target configuration. But first, you have to create an Org and a Project.</p>\n\n<p>On the left pane, click on “Orgs” and then click on “New”. Fill in a name and click on “Save”. After that, you will see a button appear on the left pane called “Projects”. Click on this and from there click on “New”, fill out a name and “Save”. In this demo, the Org is named “MediumRare” and the project is named “Demo”. You will end up with something like this.</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466074-image_15.png\" alt=\"Project-name\" /><p>Your targets will be the server VMs in the private subnet. The first task for setting up these targets is to generate credentials. The whole idea of HCP Boundary is separating the users from the backend credentials. Users should be able to authenticate to Boundary, and then Boundary can take care of the backend connection.</p>\n\n<p>Ideally, your production Boundary setup will use <a href=\"https://www.vaultproject.io/\">HashiCorp Vault</a> with <a href=\"https://developer.hashicorp.com/boundary/tutorials/hcp-administration/hcp-ssh-cred-injection\">credential injection from a KV store</a>, or use Vault’s <a href=\"https://developer.hashicorp.com/boundary/tutorials/credential-management/hcp-certificate-injection\">SSH secrets engine</a>.  Vault offers many different secrets engines that  provide <a href=\"https://www.hashicorp.com/blog/why-we-need-dynamic-secrets\">dynamic credentials</a> , which is significantly more secure and scalable, but to keep this demo simple the next section uses static credentials generated by Terraform during the deployment.</p>\n\n<p>On the left pane, click on “Credential Stores”. From there, click on “New”, name it “Static credential store” with the type of “Static” and click “Save”. In the next screen, click on the “Credentials” tab and click “New”:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466069-image_14.png\" alt=\"credential\" /><p>Name this credential “Serveradmin” and choose “Username &amp; Key Pair” as its type. As soon as you click on that, you then can enter the relevant credentials.</p>\n\n<p>In the Terraform directory you used to deploy the infrastructure, there resides a <code>servers.pem</code> file. Copy the contents of that file into the “SSH Private Key” field and make sure that the “Username” field says <code>serveradmin</code>. Leave the passphrase empty and click on “Save”:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466065-image_13.png\" alt=\"New\" /><p>Now you can create your target configuration. Click on “Targets” in the left pane and then click “New”. Name it <code>server1</code>, select “SSH” as type, and for the “Target Address” go to the Terraform directory and issue a <code>terraform output</code> once more for the private IP address of <code>server1</code>. In this case, it should be <code>100.0.1.6</code>.</p>\n\n<p>That is the basic idea. Now comes the intricate bit. If you scroll down to the “Workers” section, you will see the ability to toggle an ingress worker filter and/or an egress worker filter.</p>\n\n<p>Above those toggle switches you will see a representation of the connection flow. If neither of the worker filters are toggled, it would use an “HCP worker” to connect to your “Host” (target).</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466061-image_12.png\" alt=\"HCP\" /><p>That is not what you want here, because this tutorial uses self-managed workers. So start by toggling the “Ingress worker filter”. \nYou will see the image change to use an “Ingress worker” to connect to the “Host”:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466057-image_11.png\" alt=\"ingress\" /><p>Your ingress worker cannot access the host because it is not publicly accessible, but an egress worker is. So toggle the “Egress worker filter” and see how the image has changed:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466053-image_10.png\" alt=\"egress\" /><p>The last step is to tell Boundary to use the specific workers you installed. Look back at the worker configuration files in <code>/etc/boundary.d</code>. There you’ll see a certain tag specified in the demo code that can be used in your filters:</p>\n\n<ul>\n<li>The ingress worker filter is: <code>\"ingress\" in \"/tags/type\"</code></li>\n<li>The egress worker filter is:  <code>\"egress\" in \"/tags/type\"</code></li>\n</ul>\n\n<p>You can see these in the Workers section:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466049-image_9.png\" alt=\"Worker\" /><p>Click on “Save”. The target has now been successfully created.\nNext, inject the credentials created earlier in this session. Click on the “Injected Application Credentials” tab in the Target section:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466045-image_8.png\" alt=\"server1\" /><p>From there, click “Add Injected Application Credentials” and check the box of the credential with the name “Serveradmin”. Then click on “Add Injected Application Credentials”.</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466040-image_7.png\" alt=\"add\" /><h2>Use transparent sessions (private beta)</h2>\n\n<p>The original way to connect to targets in Boundary is by typing <code>boundary connect ssh -target-id &lt;target_id&gt;</code> into the CLI or manually connecting through <a href=\"https://developer.hashicorp.com/boundary/docs/api-clients/desktop\">Boundary Desktop</a>. Soon, there will be a new, even more convenient way to connect targets in Boundary: Transparent sessions.</p>\n\n<p>This new abstraction removes the need for any user to have knowledge on how to use Boundary and lets users employ their own tools, such as a terminal with SSH, a browser with HTTP, or an RDP client to connect to a Windows host. It makes Boundary <em>transparent</em> to the user.</p>\n\n<p>This feature, <a href=\"https://www.youtube.com/watch?v=m4M54iNjcY0&amp;t=1027s\">announced at HashiDays 2024</a>, is a game changer for the user experience of Boundary.</p>\n\n<p>As of July 2024 , this feature is  still in private beta. As a HashiCorp Ambassador ,  I was lucky enough to be invited to try out this new feature and I will share my findings thus far.</p>\n\n<p>To use transparent sessions, you start by configuring an alias for your target. Go back to the Boundary UI, click on “Targets”, and then click on “server1”. On the right hand side (if your HCP Boundary cluster is version 0.16.0) you will see a section “Aliases” where you can click on “Add an alias”:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466030-image_5.png\" alt=\"Aliases\" /><h2>Connect to Boundary from an end-user’s perspective</h2>\n\n<p>For the private beta I was supplied with a pre-release installer that installs the necessary Boundary components on my workstation:</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466024-image_4.png\" alt=\"boundary\" /><img src=\"https://www.datocms-assets.com/2885/1720466020-image_3.png\" alt=\"install\" /><p>Make sure you select at least “Boundary Client Agent” to enable transparent sessions. Boundary client agent listens to requests and matches that against Boundary, and if there is a match, it routes the traffic through Boundary towards the target.</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466015-image_2.png\" alt=\"install\" /><p>Now you need the fully qualified domain name (FQDN) of the Boundary Cluster. Go back to the Boundary UI and copy the URL in your browser up until the first <code>/</code>. In the demo, it is <code>https://6a0ca1ac-8c75-47eb-8819-cc180d949f7e.boundary.hashicorp.cloud</code>. You want to preserve this, so add this to your environment variables.</p>\n<pre><code>export \nBOUNDARY_ADDR=\"https://6a0ca1ac-8c75-47eb-8819-cc180d949f7e.boundary.hashicorp.cloud\"</code></pre><p>Next, issue a <code>boundary authenticate</code> or log into the Boundary Desktop app and enter your admin credentials (after getting set up, this could be a regular user account on Boundary). Then SSH into your alias, enter <code>ssh server1</code> in your favorite terminal, and you’re in.</p>\n<img src=\"https://www.datocms-assets.com/2885/1720466009-image_1.png\" alt=\"Boundary\" /><p>As you can see, the user needs only to authenticate to Boundary, and if authorized, the user can access the target through Boundary. As part of the session connection, Boundary will inject the credentials without requiring users to handle or see credentials, reducing the chances of an exposure or leak.</p>\n\n<h2>Learn more about Boundary</h2>\n\n<p>In summary, this demo showed you how to: </p>\n\n<ul>\n<li>Set up HCP Boundary</li>\n<li>Create a testing environment</li>\n<li>Configure Boundary</li>\n<li>Use transparent sessions (private beta)</li>\n</ul>\n\n<p>Together, that lets you configure a complete remote access workflow that people who don’t know anything about Boundary can use.</p>\n\n<p>If you want to learn more about Boundary, have a look at the <a href=\"https://developer.hashicorp.com/boundary\">HashiCorp Developer website on Boundary</a>, which houses a ton of documentation and s <a href=\"https://developer.hashicorp.com/boundary/tutorials\">more tutorials</a>.</p>\n\n<p>You can also see Boundary in action on the HashiCorp YouTube channel:</p>\n<p><em>Feel free to chat with me about this post or any other HashiCorp product on <a href=\"https://www.linkedin.com/in/chrisvanmeer/\">LinkedIn</a> or over <a href=\"mailto:chris@atcomputing.nl\">email</a>.</em></p>\n","author":"Chris van Meer","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"6501d24482bd13cbdc8ceef16dfb3d1d8b45a6b28068f97d3c5161c337085f60","category":"Tech"}