{"title":"Hidden vs. Disabled In UX","link":"https://smashingmagazine.com/2024/05/hidden-vs-disabled-ux/","date":1716279600000,"content":"<p>Both <strong>hiding and disabling features can be utterly confusing</strong> to users. And for both, we need very, very good reasons. Let’s take a closer look at what we need to consider when it comes to hiding and disabling — and possible alternatives that help enhance the UX.</p>\n\n\n<p>This article is <strong>part of our ongoing series</strong> on <a href=\"/category/design-patterns\">design patterns</a>. It’s also an upcoming part of the 10h-video library on <a href=\"https://smart-interface-design-patterns.com/\">Smart Interface Design Patterns</a> 🍣 and the <a href=\"https://smashingconf.com/online-workshops/workshops/interface-design-course-vitaly-friedman/\">upcoming live UX training</a> as well. Use code <a href=\"https://smart-interface-design-patterns.com/\">BIRDIE</a> to save 15% off.</p>\n\nShow What’s Needed, Declutter The Rest\n<p>You’ve probably been there before: Should you hide or disable a feature? When we hide a feature, we risk <strong>hurting discoverability</strong>. When we disable it without any explanation, we risk that users get frustrated. So, what’s the best way to design for those instances when some options might be irrelevant or unavailable to users?</p>\n<p><img src=\"https://files.smashing.media/articles/hidden-vs-disabled-ux/1-hidden-vs-disabled.jpeg\" /></p>\n<p>As a rule of thumb, disable if you want the user to know a feature exists but is unavailable. Hide if the value shown is currently irrelevant and can’t be used. But <strong>never hide buttons or key filters by default</strong> as users expect them to persist.</p>\n<p>Unlike hidden features, disabled features can help users learn the UI, e.g., to <strong>understand the benefits of an upgrade</strong>. So, instead of removing unavailable options or buttons, consider disabling them and allowing the user to “Hide all unavailable options.” Be sure to explain why a feature is disabled and also how to re-enable it.</p>\n<p>Another thing to watch out for: When we allow users to switch between showing and hiding a feature, we also need to ensure the switch doesn’t cause any <strong>layout shifts</strong>.</p>\n<p><img src=\"https://files.smashing.media/articles/hidden-vs-disabled-ux/2-hidden-vs-disabled.png\" /></p>\n<p>For both hiding and disabling, we need very thorough considerations of available alternatives, e.g., enabled buttons, read-only state, better empty states, hide/reveal accordions, error messages, and customization. We need to <strong>show what’s needed and de-clutter the rest</strong>.</p>\n<p>Whenever possible, I try to keep buttons and features in their default state — <strong>enabled</strong>, accessible, and legible. When a user interacts with that feature, we can explain why they can’t use it, how to enable it, and how to keep it enabled. Possible exceptions are confirmation codes and loading/processing states.</p>\nHiding vs. Disabling Roadmap\n<p>As Sam Salomon <a href=\"https://solomon.io/hide-or-disable/\">suggests</a>, if you’re unsure whether hiding or disabling is the best option for your use case, ask yourself the following question: “<strong>Will a given user ever be able to interact with this element?</strong>” Depending on your answer, follow the steps below.</p>\n<p><strong>✅ Yes</strong></p>\n<p>→ <strong>Disable it</strong> (as disabled buttons or read-only state).<br />\n↳ For temporary restrictions or filter incompatibility.<br />\n↳ When a value or status is relevant but not editable.<br />\n↳ When an action isn’t available yet (e.g., “Export in progress...”).</p>\n<p><strong>🚫 No</strong></p>\n<p>→ <strong>Hide it</strong> (remove from a toolbar, collapse in accordion).<br />\n↳ E.g., due to permissions, access controls, safety, and security.<br />\n↳ For inaccessible features: e.g., admin buttons, overrides.<br />\n↳ Hide such controls by default and reveal them once a condition is met.</p>\nKey Takeaways\n<ul>\n<li><strong>Hiding important features</strong> hurts their discoverability.</li>\n<li><strong>Disabling features</strong> is frustrating without an explanation.</li>\n<li>But some options might be <strong>irrelevant/unavailable to users</strong>.</li>\n<li>Users might expect a feature to exist but won’t find it.</li>\n<li>We need to show what’s needed and de-clutter the rest.</li>\n<li>Avoid <strong>disruptive layout shifts</strong> as you show and hide features.</li>\n<li><strong>Don’t remove unavailable options</strong> or buttons automatically.</li>\n<li>Instead, disable them and allow it to “Hide all unavailable options.”</li>\n<li>Allow users to hide sections with a lot of disabled functionality.</li>\n<li><strong>Explain why a feature is disabled</strong> and how to re-enable it.</li>\n</ul>\nHidden vs. Disabled In Design Systems\n<p>The design systems below provide useful <strong>real-world examples</strong> of how products design their hidden and disabled states.</p>\n<ul>\n<li><a href=\"https://carbondesignsystem.com/patterns/disabled-states/\">Carbon</a> (disabled state)</li>\n<li><a href=\"https://carbondesignsystem.com/patterns/read-only-states-pattern/\">Carbon</a> (read-only state)</li>\n<li><a href=\"https://www.foundations.unity.com/fundamentals/ux-essentials\">Unity</a></li>\n<li><a href=\"https://vaadin.com/docs/latest/components/button\">Vaadin</a></li>\n<li><a href=\"https://experience.sap.com/fiori-design-web/ui-element-states/#hidden\">SAP</a></li>\n<li><a href=\"https://ux.folio.org/docs/guidelines/ux-patterns/hiding-vs-disabling-elements-ux-pattern/\">Motif</a></li>\n<li><a href=\"https://soul.emplifi.io/latest/patterns/patterns/disabled-states-NpPW6TcE\">Emplifi</a></li>\n</ul>\nUseful Resources\n<ul>\n<li><a href=\"https://adamsilver.io/blog/the-problem-with-disabled-buttons-and-what-to-do-instead/\">Disabled Buttons And What To Do Instead</a>, by Adam Silver</li>\n<li><a href=\"https://uxpsychology.substack.com/p/hidden-vs-disabled-states\">Hidden vs. Disabled States</a>, by Maria Panagiotidi</li>\n<li><a href=\"https://css-tricks.com/making-disabled-buttons-more-inclusive/\">Making Disabled Buttons Inclusive</a>, by Sandrina Pereira</li>\n<li><a href=\"https://solomon.io/hide-or-disable/\">Hide or Disable</a>, by Sam Solomon</li>\n<li><a href=\"https://uxknowledgebase.com/the-disabled-state-in-ui-design-8c091d72868\">The Disabled State In UI Design (Sketchnotes)</a>, by Krisztina Szerovay</li>\n<li><a href=\"https://www.smashingmagazine.com/2021/08/frustrating-design-patterns-disabled-buttons/\">Usability Pitfalls of Disabled Buttons</a>, by yours truly Vitaly Friedman</li>\n<li><a href=\"https://uxdesign.cc/why-your-design-team-hates-disabled-features-1c7ef6bfdc03\">Alternative Design Patterns For Disabled Features</a>, by Katie Jacquez</li>\n<li><a href=\"https://www.smashingmagazine.com/2021/07/frustrating-design-patterns-broken-frozen-filters/\">Designing Filters UX That Works</a>, by yours truly Vitaly Friedman</li>\n<li><a href=\"https://www.carletondesign.com/2023/06/15/disabled-buttons/\">UI Traps: Disabled Buttons and Inputs</a>, by James Carleton</li>\n</ul>\nMeet Smart Interface Design Patterns\n<p>If you are interested in similar insights around UX, take a look at <strong><a href=\"https://smart-interface-design-patterns.com/\">Smart Interface Design Patterns</a></strong>, our <strong>10h-video course</strong> with 100s of practical examples from real-life projects — with a live UX training later this year. Everything from mega-dropdowns to complex enterprise tables — with 5 new segments added every year. <a href=\"https://www.youtube.com/watch?v=aSP5oR9g-ss\">Jump to a free preview</a>.</p>\n<a href=\"https://smart-interface-design-patterns.com/\"><img src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7cc4e1de-6921-474e-a3fb-db4789fc13dd/b4024b60-e627-177d-8bff-28441f810462.jpeg\" /></a>Meet <a href=\"https://smart-interface-design-patterns.com/\">Smart Interface Design Patterns</a>, our video course on interface design &amp; UX.\n\n<div><a href=\"https://smart-interface-design-patterns.com/\">Jump to the video course →</a></div>\n\n<p></p><p>100 design patterns &amp; real-life \nexamples.<br />10h-video course + live UX training. <a href=\"https://www.youtube.com/watch?v=aSP5oR9g-ss\">Free preview</a>.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"951ba226111818db4e862c24d553cf014fd1cacb99ef7e80914666ffd0e31cd6","category":"Tech"}