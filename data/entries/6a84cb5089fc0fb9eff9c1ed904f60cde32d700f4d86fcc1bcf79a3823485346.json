{"title":"Combining CSS :has() And HTML &lt;select&gt; For Greater Conditional Styling","link":"https://smashingmagazine.com/2024/05/combining-css-has-html-select-conditional-styling/","date":1714644000000,"content":"<p>Even though the CSS <code>:has()</code> pseudo-class is relatively new, we already know a lot about it, thanks to many, many articles and tutorials demonstrating its powerful ability to conditionally select elements based on their contents. We’ve all seen the card component and header examples, but the conditional nature of <code>:has()</code> actually makes it adept at working with form controls, which are pretty conditional in nature as well.</p>\n<p>Let’s look specifically at the <code>&lt;select&gt;</code> element. With it, we can make a choice from a series of <code>&lt;option&gt;</code>s. Combined with <code>:has()</code>, we are capable of manipulating styles based on the selected <code>&lt;option&gt;</code>.</p>\n<pre><code>&lt;select&gt;\n  &lt;option value=\"1\" selected&gt;Option 1&lt;/option&gt;\n  &lt;option value=\"2\"&gt;Option 2&lt;/option&gt;\n  &lt;option value=\"3\"&gt;Option 3&lt;/option&gt;\n  &lt;option value=\"4\"&gt;Option 4&lt;/option&gt;\n  &lt;option value=\"5\"&gt;Option 5&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>This is your standard <code>&lt;select&gt;</code> usage, producing a dropdown menu that contains options for user selection. And while it’s not mandatory, I’ve added the <code>selected</code> attribute to the first <code>&lt;option&gt;</code> to set it as the initial selected option.</p>\n<p>Applying styles based on a user’s selection is not a new thing. We’ve had the <a href=\"https://css-tricks.com/the-checkbox-hack/\">Checkbox Hack</a> in our pockets for years, using the <code>:checked</code> CSS pseudo-class to style the element based on the selected option. In this next example, I’m changing the element’s <code>color</code> and the <code>background-color</code> properties based on the selected <code>&lt;option&gt;</code>.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/oNOwded\">demo 01 - Using the :has selector on a dropdown menu</a> by <a href=\"https://codepen.io/amit_sheen\">Amit Sheen</a>.  </p>\n<p>But that’s limited to styling the current element, right? If a particular <code>&lt;option&gt;</code> is <code>:checked</code>, then we style its style. We can write a more complex selector and style child elements based on whether an <code>&lt;option&gt;</code> is selected up the chain, but that’s a one-way road in that we are unable to style up parent elements even further up the chain.</p>\n<p>That’s where <code>:has()</code> comes in because styling up the chain is exactly what it is designed to do; in fact, it’s often called <a href=\"https://www.smashingmagazine.com/2021/06/has-native-css-parent-selector/\">the “parent selector”</a> for this reason (although <a href=\"https://developer.chrome.com/blog/has-m105/\">“family selector”</a> may be a better descriptor).</p>\n<p>For example, if we want to change the <code>background-color</code> of the <code>&lt;select&gt;</code> element according to the value of the selected <code>&lt;option&gt;</code>, <strong>we select the element if it has a specific <code>[value]</code> that is <code>:checked</code>.</strong></p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/eYoRopZ\">demo 02 - Using the :has selector on a dropdown menu</a> by <a href=\"https://codepen.io/amit_sheen\">Amit Sheen</a>.</p>\n<p>Just how practical is this? One way I’m using it is to style mandatory <code>&lt;select&gt;</code> elements without a valid selected <code>&lt;option&gt;</code>. So, instead of applying styles if the element <code>:has()</code> a <code>:checked</code> state, I am applying styles if the <code>required</code> element does <code>:not(:has(:checked))</code>.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/jORLoVM\">demo 02.1 - Using the :has selector on a dropdown menu</a> by <a href=\"https://codepen.io/amit_sheen\">Amit Sheen</a>.</p>\n<p>But why stop there? If we can use <code>:has()</code> to style the <code>&lt;select&gt;</code> element as the parent of an <code>&lt;option&gt;</code>, then we can also use it to style the parent of the <code>&lt;select&gt;</code>, as well as its parent, in addition to its parent, and even its parent... all the way up the chain to the <code>:root</code> element. We could even bring <code>:has()</code> all the way up the chain and sniff out whether any <code>&lt;select&gt;</code> child of the document <code>:root</code> <code>:has()</code> a particular <code>&lt;option&gt;</code> that is <code>:checked</code>:</p>\n<pre><code>:root:has(select [value=\"foo\"]:checked) {\n  // Styles applied if &lt;option value=\"foo\"&gt; is &lt;select&gt;-ed\n}\n</code></pre>\n\n<p>This is useful for <strong>setting a custom property value dynamically</strong> or <strong>applying a set of styles for the whole page</strong>. Let’s make a little style picker that illustrates the idea of setting styles on an entire page.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/yLrXroO\">demo 03 - Using the :has selector on a dropdown menu</a> by <a href=\"https://codepen.io/amit_sheen\">Amit Sheen</a>.</p>\n<p>Or perhaps a theme picker:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/OJGgjaJ\">demo 04 - Using the :has selector on a dropdown menu</a> by <a href=\"https://codepen.io/amit_sheen\">Amit Sheen</a>.</p>\n<p>How that last example works is that I added a class to each <code>&lt;select&gt;</code> element and referenced that class inside the <code>:has()</code> selector in order to prevent unwanted selections in the event that there are multiple <code>&lt;select&gt;</code> elements on the page.</p>\n<p>And, of course, we don’t have to go all the way up to the <code>:root</code> element. If we’re working with a specific component, we can scope <code>:has()</code> to that component like in the following demo of a star rating component.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/rNbwvqz\">demo 05 - Using the :has selector on a dropdown menu</a> by <a href=\"https://codepen.io/amit_sheen\">Amit Sheen</a>.</p>\n<blockquote>Watch a short video tutorial I made on using <a href=\"https://youtu.be/33Q3CnBm0UU\">CSS to create 3D animated stars</a>.</blockquote>\n\n\n\nConclusion\n<p>We’d be doing <code>:has()</code> a great disservice if we only saw it as a “parent selector” rather than <strong>the great conditional operator</strong> it is for applying styles all the way up the chain. Seen this way, it’s more of a modern upgrade to the Checkbox Hack in that it sends styles up like we were never able to do before.</p>\n<p>There are endless examples of using <code>:has()</code> to create style variations of a component according to its contents. We’ve even seen it used to accomplish the once-complicated <a href=\"https://css-tricks.com/creating-animated-clickable-cards-with-the-has-relational-pseudo-class/\">linked card pattern</a>. But now you have an example for using it to create dropdown menus that conditionally apply styles (or don’t) to a page or component based the currently selected option — depending on how far up the chain we scope it.</p>\n<p>I’ve used this technique a few different ways — e.g., as form validation, a style picker, and star ratings — but I’m sure there are plenty of other ways you can imagine how to use it in your own work. And if you are using <code>:has()</code> on a <code>&lt;select&gt;</code> element for something different or interesting, let me know because I’d love to see it!</p>\n<h4>Further Reading On SmashingMag</h4>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/01/level-up-css-skills-has-selector/\">Level Up Your CSS Skills With The :has() Selector</a>,” Stephanie Eckles</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/06/has-native-css-parent-selector/\">Meet :has, A Native CSS Parent Selector (And More)</a>,” Adrian Bece</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2024/03/setting-persisting-color-scheme-preferences-css-javascript/\">Setting And Persisting Color Scheme Preferences With CSS And A “Touch” Of JavaScript</a>,” Henry Bley-Vroman</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2024/01/css-border-image-property/\">The Complex But Awesome CSS border-image Property</a>,” Temani Afif</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"6a84cb5089fc0fb9eff9c1ed904f60cde32d700f4d86fcc1bcf79a3823485346","category":"Tech"}