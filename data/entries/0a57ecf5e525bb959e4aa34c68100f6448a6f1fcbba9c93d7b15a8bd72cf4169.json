{"title":"The Times You Need A Custom @property Instead Of A CSS Variable","link":"https://smashingmagazine.com/2024/05/times-need-custom-property-instead-css-variable/","date":1715587200000,"content":"<p>We generally use a CSS variable as a placeholder for some value we plan to reuse — to avoid repeating the same value and to easily update that value across the board if it needs to be updated.</p>\n<pre><code>:root { \n  --mix: color-mix(in srgb, #8A9B0F, #fff 25%);\n}\n\ndiv {\n  box-shadow: 0 0 15px 25px var(--mix);\n}\n</code></pre>\n\n<p>We can register <em>custom</em> properties in CSS using <code>@property</code>. The most common example you’ll likely find demonstrates how <code>@property</code> can <a href=\"https://css-tricks.com/interpolating-numeric-css-variables/\">animate the colors of a gradient</a>, something we’re unable to do otherwise since a CSS variable is recognized as a string and what we need is a number format that can interpolate between two numeric values. That’s where <code>@property</code> allows us to define not only the variable’s <em>value</em> but its <em>syntax,</em> <em>initial value</em>, and <em>inheritance</em>, just like you’ll find documented in CSS specifications.</p>\n<p>For example, here’s how we register a custom property called <code>--circleSize</code>, which is formatted as a percentage value that is set to <code>10%</code> by default and is not inherited by child elements.</p>\n<pre><code>@property --circleSize {\n  syntax: \"&lt;percentage&gt;\";\n  inherits: false;\n  initial-value: 10%;\n}\n\ndiv { /* red div */\n  clip-path: circle(var(--circleSize) at center bottom);\n  transition: --circleSize 300ms linear;\n}\n\nsection:hover div { \n  --circleSize: 125%; \n}\n</code></pre>\n\n<p>In this example, a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/circle\"><code>circle()</code></a> function is used to clip the <code>&lt;div&gt;</code> element into — you guessed it — a circle. The size value of the <code>circle()</code>’s radius is set to the registered custom property, <code>--circleSize</code>, which is then independently changed on hover using a <code>transition</code>. The result is something close to <a href=\"https://m3.material.io/foundations/interaction/states/applying-states#d8d475ac-672e-4692-ae60-eb557c4990bc\">Material Design’s ripple effect</a>, and we can do it because we’ve told CSS to treat the custom property as a percentage value rather than a string:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/PovwepK\">CSS @property [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>.  </p>\n<p>The freedom to define and spec our own CSS properties gives us new animating superpowers that were once only possible with JavaScript, like transitioning the colors of a gradient.</p>\n<p>Here’s an idea I have that uses the same basic idea as the ripple, only it chains multiple custom properties together that are formatted as colors, lengths, and angle degrees for a more complex animation where text slides up the container as the text changes colors.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/rNgavyb\">Text animation with @property [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>.</p>\n<p>Let’s use this demo as an exercise to learn more about defining custom properties with the <code>@property</code> at-rule, combining what we just saw in the ripple with the concept of interpolating gradient values.</p>\nThe HTML\n<pre><code>&lt;div class=\"scrolling-text\"&gt;\n  &lt;div class=\"text-container\"&gt;\n    &lt;div class=\"text\"&gt;\n      &lt;ruby&gt;壹&lt;rt&gt;one&lt;/rt&gt;&lt;/ruby&gt;\n      &lt;ruby&gt;蜀&lt;rt&gt;two&lt;/rt&gt;&lt;/ruby&gt;\n      &lt;ruby&gt;兩&lt;rt&gt;three&lt;/rt&gt;&lt;/ruby&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The HTML contains Chinese characters we’re going to animate. These Chinese characters are marked up with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby\"><code>&lt;ruby&gt;</code></a> tags so that their English translations can be supplied in <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt\"><code>&lt;rt&gt;</code></a> tags. The idea is that <code>.scrolling-text</code> is the component’s parent container and, in it, is a child element holding the sliding text characters that allow the characters to slide in and out of view.</p>\nVertical Sliding\n<p>In CSS, let’s make the characters slide vertically on hover. What we’re making is a container with a fixed height we can use to clip the characters out of view when they overflow the available space.</p>\n<pre><code>.scrolling-text {\n  height: 1lh;\n  overflow: hidden;\n  width: min-content;\n}\n.text-container:has(:hover, :focus) .text {\n  transform: translateY(-2lh) ;\n}\n.text {\n  transition: transform 2.4s ease-in-out;\n}\n</code></pre>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/pomvVPx\">Vertical text transition [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>.</p>\n<p>Setting the <code>.scrolling-text</code> container’s width to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/min-content\"><code>min-content</code></a> gives the characters a tight fit, stacking them vertically in a single column. The container’s height is set <code>1lh</code>. And since we’ve set <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/overflow\"><code>overflow: hidden</code></a> on the container, only one character is shown in the container at any given point in time.</p>\n<blockquote><strong>Tip</strong>: You can also use the HTML <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre\"><code>&lt;pre&gt;</code></a> element or either the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/white-space\"><code>white-space</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap\"><code>text-wrap</code></a> properties to control how text wraps.</blockquote>\n\n<p>On hover, the text moves <code>-2lh</code>, or double the height of a single text character in the opposite, or up, direction. So, basically, we’re sliding things up by two characters in order to animate from the first character to the third character when the container holding the text is in a hovered state.</p>\nApplying Gradients To Text\n<p>Here’s a fun bit of styling:</p>\n<div>\n<pre><code>.text {\n  background: repeating-linear-gradient(\n    180deg, \n    rgb(224, 236, 236), \n    rgb(224, 236, 236) 5px, \n    rgb(92, 198, 162) 5px, \n    rgb(92, 198, 162) 6px);\n  background-clip: text;\n  color: transparent; /* to show the background underneath */\n  background-size: 20% 20%;\n}\n</code></pre>\n</div>\n\n<p>How often do you find yourself using repeating gradients in your work? The fun part, though, is what comes after it. See, we’re setting a <code>transparent</code> color on the text and that allows the <code>repeating-linear-gradient()</code> to show through it. <a href=\"https://css-tricks.com/the-css-box-model/\">But since text is a box like everything else in CSS</a>, we clip the background at the text itself to make it look like the text is cut out of the gradient.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/BaeyxZJ\">A gradient text (Note: View in Safari or Chrome) [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>.</p>\n<p>Pretty neat, right? Now, it looks like our text characters have a striped pattern painted on them.</p>\nAnimating The Gradient\n<p>This is where we take the same animated gradient concept covered in other tutorials and work it into what we’re doing here. For that, we’ll first register some of the <code>repeating-linear-gradient()</code> values as custom properties. But unlike the other implementations, ours is a bit more complex because we will animate several values rather than, say, updating the hue.</p>\n<p>Instead, we’re animating two colors, a length, and an angle.</p>\n<pre><code>@property --c1 {\n  syntax: \"&lt;color&gt;\";\n  inherits: false;\n  initial-value: rgb(224, 236, 236);\n}\n@property --c2 {\n  syntax: \"&lt;color&gt;\";\n  inherits: false;\n  initial-value: rgb(92, 198, 162);\n}\n@property --l {\n  syntax: \"&lt;length&gt; | &lt;percentage&gt;\";\n  inherits: false;\n  initial-value: 5px;\n}\n@property --angle {\n  syntax: \"&lt;angle&gt;\";\n  inherits: false;\n  initial-value: 180deg;\n}\n\n.text {\n  background: repeating-linear-gradient(\n    var(--angle), \n    var(--c1), \n    var(--c1) 5px, \n    var(--c2) var(--l), \n    var(--c2) 6px);\n}\n</code></pre>\n\n<p>We want to update the values of our registered custom properties when the container that holds the text is hovered or in focus. All that takes is re-declaring the properties with the updated values.</p>\n<pre><code>.text-container:has(:hover, :focus) .text {\n  --c1: pink;\n  --c2: transparent;  \n  --l: 100%;\n  --angle: 90deg;\n\n  background-size: 50% 100%;\n  transform:  translateY(-2lh);\n}\n</code></pre>\n\n<p>To be super clear about what’s happening, these are the custom properties and values that update on hover:</p>\n<ul>\n<li><code>--c1</code>: Starts with a color value of <code>rgb(224, 236, 236)</code> and updates to <code>pink</code>.</li>\n<li><code>--c2</code>: Starts with a color value of <code>rgb(92, 198, 162)</code> and updates to <code>transparent</code>.</li>\n<li><code>--l</code>: Starts with length value <code>5px</code> and updates to <code>100%</code>.</li>\n<li><code>--a</code>: Starts with an angle value of <code>180deg</code> and updates to <code>90deg</code>.</li>\n</ul>\n<p>So, the two colors used in the gradient transition into other colors while the overall size of the gradient increases and rotates. It’s as though we’re choreographing a short dance routine for the gradient.</p>\nRefining The Transition\n<p>All the while, the <code>.text</code> element containing the characters slides up to reveal one character at a time. The only thing is that we have to tell CSS what will <code>transition</code> on hover, which we do directly on the <code>.text</code> element:</p>\n<div>\n<pre><code>.text {\n  transition: --l, --angle, --c1, --c2, background-size, transform 2.4s ease-in-out;\n  transition-duration: 2s; \n}\n</code></pre>\n</div>\n\n<p>Yes, I could just as easily have used the <code>all</code> keyword to select all of the transitioning properties. But I prefer taking the extra step of declaring each one individually. It’s a little habit to keep the browser from having to watch for too many things, which could slow things down even a smidge.</p>\nFinal Demo\n<p>Here’s the final outcome once again:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/qBGEYXO\">Text animation with @property [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>.</p>\n<p>I hope this little exercise not only demonstrates the sorts of fancy things we can make with CSS custom properties but also helps clarify the differences between custom properties and standard variables. Standard variables are excellent placeholders for more maintainable code (and a few <a href=\"https://css-tricks.com/the-css-custom-property-toggle-trick/\">fancy tricks of their own</a>) but when you find yourself needing to update one value in a property that supports multiple values — such as colors in a gradient — the <code>@property</code> at-rule is where it’s at because it lets us define variables with a custom specification that sets the variable’s syntax, initial value, and inheritance behavior.</p>\n<p>When we get to amend values individually and independently with a promise of animation, it both helps streamline the code and opens up new possibilities for designing elaborate animations with relatively nimble code.</p>\n<p>That’s why <code>@property</code> is a useful CSS standard to keep in mind and keep ready to use when you are thinking about animations that involve isolated value changes.</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/10/advanced-animations-css/\">How To Create Advanced Animations With CSS</a>,” Yosra Emad</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/04/easing-functions-css-animations-transitions/\">Understanding Easing Functions For CSS Animations And Transitions</a>,” Adrian Bece</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/09/path-css-easing-linear-function/\">The Path To Awesome CSS Easing With The linear() Function</a>,” Jhey Tompkins</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/01/css-radial-conic-gradient/\">A Deep CSS Dive Into Radial And Conic Gradients</a>,” Ahmad Shadeed</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"0a57ecf5e525bb959e4aa34c68100f6448a6f1fcbba9c93d7b15a8bd72cf4169","category":"Tech"}