{"title":"Amazon Redshift adds new AI capabilities, including Amazon Q, to boost efficiency and productivity","link":"https://aws.amazon.com/blogs/aws/amazon-redshift-adds-new-ai-capabilities-to-boost-efficiency-and-productivity/","date":1701280631000,"content":"<p><a href=\"https://aws.amazon.com/redshift/\">Amazon Redshift</a> puts artificial intelligence (AI) at your service to optimize efficiencies and make you more productive with two new capabilities that we are launching in preview today.</p> \n<p>First, <a href=\"https://aws.amazon.com/redshift/redshift-serverless/\">Amazon Redshift Serverless</a> becomes smarter. It scales capacity proactively and automatically along dimensions such as the complexity of your queries, their frequency, the size of the dataset, and so on to deliver tailored performance optimizations. This allows you to spend less time tuning your data warehouse instances and more time getting value from your data.</p> \n<p>Second, <a href=\"https://aws.amazon.com/redshift/query-editor-v2/\">Amazon Q generative SQL in Amazon Redshift Query Editor</a> generates SQL recommendations from natural language prompts. This helps you to be more productive in extracting insights from your data.</p> \n<p><span><strong>Let’s start with Amazon Redshift Serverless<br /> </strong></span>When you use Amazon Redshift Serverless, you can now opt in for a preview of AI-driven scaling and optimizations. When enabled, the system observes and learns from your usage patterns, such as the concurrent number of queries, their complexity, and the time it takes to run them. Then, it automatically optimizes your serverless endpoint to meet your price performance target. Based on AWS internal testing, this new capability may give you up to ten times better price performance for variable workloads without any manual intervention.</p> \n<p>AI-driven scaling and optimizations eliminate the time and effort to manually resize your workgroup and plan background optimizations based on workload needs. It continually runs automatic optimizations when they are most valuable for better performance, avoiding performance cliffs and time-outs.</p> \n<p>This new capability goes beyond the existing <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/t_Creating_tables.html\">self-tuning capabilities of Amazon Redshift Serverless</a>, such as machine learning (ML)-enhanced techniques to adjust your compute, modify the physical schema of the database, create or drop materialized views as needed (the one <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/materialized-view-auto-mv.html\">we manage automatically</a>, not yours), and vacuum tables. This new capability brings more intelligence to decide how to adjust the compute, what background optimizations are required, and when to apply them, and it makes its decisions based on more dimensions. We also orchestrate ML-based optimizations for <a href=\"https://aws.amazon.com/about-aws/whats-new/2022/07/automated-materialized-view-amazon-redshift/\">materialized views</a>, <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/t_Creating_tables.html\">table optimizations</a>, and <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/automatic-wlm.html\">workload management</a> when your queries need it.</p> \n<p>During the preview, you must opt in to enable these AI-driven scaling and optimizations on your <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-workgroup-namespace.html\">workgroups</a>. You configure the system to balance the optimization for price or performance. There is only one slider to adjust in the console.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/14/Sage-mode-1.png\" alt=\"Redshift serverless - AI driven workgoups\" width=\"800\" height=\"791\" /></p> \n<p>As usual, you can track resource usage and associated changes through the console, Amazon CloudWatch metrics, and the system table <code>SYS_SERVERLESS_USAGE</code>.</p> \n<p><span><strong>Now, let’s look at Amazon Q generative SQL in Amazon Redshift Query Editor<br /> </strong></span>What if you could use generative AI to help analysts write effective SQL queries more rapidly? This is the new experience we introduce today in <a href=\"https://aws.amazon.com/redshift/query-editor-v2/\">Amazon Redshift Query Editor</a>, our web-based SQL editor.</p> \n<p>You can now describe the information you want to extract from your data in natural language, and we generate the SQL query recommendations for you. Behind the scenes, Amazon Q generative SQL uses a large language model (LLM) and <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a> to generate the SQL query. We use different techniques, such as <a href=\"https://aws.amazon.com/what-is/prompt-engineering/\">prompt engineering</a> and <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/jumpstart-foundation-models-customize-rag.html\">Retrieval Augmented Generation (RAG)</a>, to query the model based on your context: the database you’re connected to, the schema you’re working on, your query history, and optionally the query history of other users connected to the same endpoint. The system also remembers previous questions. You can ask it to refine a previously generated query.</p> \n<p>The SQL generation model uses metadata specific to your data schema to generate relevant queries. For example, it uses the table and column names and the relationship between the tables in your database. In addition, your database administrator can authorize the model to use the query history of all users in your AWS account to generate even more relevant SQL statements. We don’t share your query history with other AWS accounts and we don’t train our generation models with any data coming from your AWS account. We maintain the high level of privacy and security that you expect from us.</p> \n<p>Using generated SQL queries helps you to get started when discovering new schemas. It does the heavy lifting of discovering the column names and relationships between tables for you. Senior analysts also benefit from asking what they want in natural language and having the SQL statement automatically generated. They can review the queries and run them directly from their notebook.</p> \n<p><span><strong>Let’s explore a schema and extract information<br /> </strong></span>For this demo, let’s pretend I am a data analyst at a company that sells concert tickets. The database <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/c_sampledb.html\">schema and data</a> are available for you to download. My manager asks me to analyze the ticket sales data to send a thank you note with discount coupons to the highest-spending customers in Seattle.</p> \n<p>I connect to Amazon Redshift Query Editor and connect the analytic endpoint. I <strong>create a new tab for a Notebook </strong>(SQL generation is available from notebooks only).</p> \n<p>Instead of writing a SQL statement, I open the chat panel and type, “<b>Find the top five users from Seattle who bought the most number of tickets in 2022.</b>” I take the time to verify the generated SQL statement. It seems correct, so I decide to run it. I select <strong>Add to notebook</strong> and then <strong>Run</strong>. The query returns the list of the top five buyers in Seattle.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/14/2023-11-14_11-04-06.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/14/2023-11-14_11-04-06.png\" alt=\"sql generation - top 5 users\" width=\"800\" height=\"538\" /></a></p> \n<p>I had no previous knowledge of the data schema, and I did not type a single line of SQL to find the information I needed.</p> \n<p>But generative SQL is not limited to a single interaction. I can chat with it to dynamically refine the queries. Here is another example.</p> \n<p>I ask “<strong>Which state has the most venues?</strong>” Generative SQL proposes the following query. The answer is New York, with 49 venues, if you’re curious.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/17/2023-11-17_17-19-03.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/17/2023-11-17_17-19-03.png\" alt=\"generative sql chat 01\" width=\"300\" height=\"416\" /></a></p> \n<p>I changed my mind, and I want to know the top three cities with the most venues. I simply rephrase my question: “<strong>What about the top three venues?</strong>”</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/17/2023-11-17_17-24-25.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/17/2023-11-17_17-24-25.png\" alt=\"generative sql chat 02\" width=\"300\" height=\"419\" /></a></p> \n<p>I add the query to the notebook and run it. It returns the expected result.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/17/2023-11-17_17-24-30.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/17/2023-11-17_17-24-30.png\" alt=\"generative sql chat 03\" width=\"800\" height=\"634\" /></a><mark></mark></p> \n<p><span><strong>Best practices for prompting<br /> </strong></span>Here are a couple of tips and tricks to get the best results out of your prompts.</p> \n<p><strong>Be specific</strong> – When asking questions in natural language, be as specific as possible to help the system understand exactly what you need. For example, instead of writing “find the top venues that sold the most tickets,” provide more details like “find the names of the top three venues that sold the most tickets in 2022.” Use consistent entity names like venue, ticket, and location instead of referring to the same entity in different ways, which can confuse the system.</p> \n<p><strong>Iterate</strong> – Break your complex requests into multiple simple statements that are easier for the system to interpret. Iteratively ask follow-up questions to get more detailed analysis from the system. For example, start by asking, “Which state has the most venues?” Then, based on the response, ask a follow-up question like “Which is the most popular venue from this state?”</p> \n<p><strong>Verify</strong> – Review the generated SQL before running it to ensure accuracy. If the generated SQL query has errors or does not match your intent, provide instructions to the system on how to correct it instead of rephrasing the entire request. For example, if the query is missing a filter clause on year, write “provide venues from year 2022.”</p> \n<p><span><strong>Availability and pricing<br /> </strong></span>AI-driven scaling and optimizations are in preview in six AWS Regions: US East (Ohio, N. Virginia), US West (Oregon), Asia Pacific (Tokyo), and Europe (Ireland, Stockholm). They come at no additional cost. You pay only for the compute capacity your data warehouse consumes when it is active. Pricing is per <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-capacity.html\">Redshift Processing Unit</a> (RPU) per hour. The billing is per second of used capacity. The <a href=\"https://aws.amazon.com/redshift/pricing/#Amazon_Redshift_Serverless\">pricing page for Amazon Redshift</a> has the details.</p> \n<p>Amazon Q generative SQL for Amazon Redshift Query Editor is in preview in two AWS Regions today: US East (N. Virginia) and US West (Oregon). There is no charge during the preview period.</p> \n<p>These are two examples of how AI helps to optimize performance and increase your productivity, either by automatically adjusting the price-performance ratio of your Amazon Redshift Serverless endpoints or by generating correct SQL statements from natural language prompts.</p> \n<p>Previews are essential for us to capture your feedback before we make these capabilities available for all. Experiment with these today and <a href=\"https://repost.aws/tags/TAByF7MpfSQUCX_lAeDTvODw/amazon-redshift\">let us know what you think on the re:Post forums</a> or using the feedback button on the bottom left side of the console.</p> \n<a href=\"https://twitter.com/sebsto\">-- seb</a>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"2fb1a9b12152cf459d870aaf8171572d1c20a807b749132354dd9bbdec8eb365","category":"Tech"}