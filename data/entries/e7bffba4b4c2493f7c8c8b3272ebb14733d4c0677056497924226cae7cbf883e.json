{"title":"สรุปการใช้งาน Structured Log ของ Go กัน","link":"https://www.somkiat.cc/go-with-slog/","date":1692616704000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/08/go-slog-150x150.jpg\" alt loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/08/go-slog-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2023/08/go-slog-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/08/go-slog.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/08/go-slog.jpg\" alt width=\"600\" height=\"417\" /></a></figure>\n\n\n\n<p>ก่อนหน้านี้ Go 1.21 ออกมานั้น มี Structured log package (log/slog) ออกมาให้ใช้งาน<br />ซึ่งเคยอธิบายการใช้งานเบื้องต้นไว้<a href=\"https://www.somkiat.cc/structured-logging-in-go-1-21-rc1/\" target=\"_blank\">ที่นี่</a><br />แต่ว่าต้องไปแบ่งปันเรื่อง logging สำหรับระบบที่พัฒนาด้วย Go<br />จึงทำการอธิบายแบบละเอียดขึ้นไว้หน่อย<br />มาเริ่มกันเลย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เริ่มจากปัญหาและข้อจำกัดของ log package กันก่อน</strong></p>\n\n\n\n<ul>\n<li>ปัญหาของ log level ใน go นั้นทำการจัดการเหมือนกันเลย ทำให้ยากต่อการแบ่ง หรือ กรองเอาบาง level</li>\n\n\n\n<li>ไม่สนับสนุน context ทำให้ยากต่อการเพิ่มข้อมูลต่าง ๆ ลงไปใน log</li>\n\n\n\n<li>ไม่สามารถจัดการเรื่อง log sampling ได้ นั่นคือจะเก็บ log ทุกอย่าง</li>\n\n\n\n<li> สามารถ configuration ได้น้อย ทำให้ใช้งานจริง ๆ ไม่ได้</li>\n\n\n\n<li>ไม่สนับสนุน structured log message ใช้ได้แค่ plain text เท่านั้น ต้องไปใช้ 3-party package นั่นเอง</li>\n</ul>\n\n\n\n<p>ปัญหาต่าง ๆ ทำให้ log package ที่เป็น 3-party package ออกมามากมาย เช่น</p>\n\n\n\n<ul>\n<li>logrus</li>\n\n\n\n<li>zap</li>\n</ul>\n\n\n\n<p><strong>ดังนั้นใน Go 1.21 ได้เพิ่ม <a href=\"https://pkg.go.dev/log/slog\" target=\"_blank\">log/slog package</a> เข้ามา</strong></p>\n\n\n\n<p>ซึ่งเขียนโครงสร้างของ package ออกมาคร่าว ๆ ได้ประมาณนี้</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/08/image.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/08/image-1024x653.png\" alt width=\"800\" height=\"509\" /></a></figure>\n\n\n\n<p>สิ่งที่จะเห็นได้ชัดคือ ใน Logger นั้นจะมี function ต่าง ๆ ให้ใช้งานตาม log level<br />รวมทั้งการส่งค่าต่าง ๆ เข้าไปได้ เช่น handler เป็นต้น<br />อีกอย่าง แต่ละ log level จะไม่มีการเรียกใช้งาน panic() หรือ exit() เหมือนกับ log package</p>\n\n\n\n<p><strong>การใช้งานแบบง่าย ๆ </strong></p>\n\n\n\n[gist id=\"a9822fb8da96d927354a1532230ff1ca\" file=\"1.go\"]\n\n\n\n<p><strong>ทำการเพิ่ม JSONHandler เข้ามาใน Logger</strong></p>\n\n\n\n[gist id=\"a9822fb8da96d927354a1532230ff1ca\" file=\"2.go\"]\n\n\n\n<p>เราสามารถทำการ custom handler ผ่าน <a href=\"https://pkg.go.dev/log/slog#HandlerOptions\" target=\"_blank\">HandlerOptions</a> ได้<br />สามารถกำหนดค่าต่าง ๆ ได้ เช่น log level และ attribute replace เป็นต้น</p>\n\n\n\n<p><strong>ใน log  message นั้น สามารถเพิ่ม <a href=\"https://pkg.go.dev/log/slog#Attr\" target=\"_blank\">attribute</a> และ nested key เข้าไปได้</strong></p>\n\n\n\n<p>ใช้งานผ่าน struct Attr ซึ่งมี type ต่าง ๆ ให้เลือกใช้งานมากมาย<br />หรือทำเป็น group ก็ได้</p>\n\n\n\n[gist id=\"a9822fb8da96d927354a1532230ff1ca\" file=\"3.go\"]\n\n\n\n<p><strong>ทำการ custom log level ผ่าน <a href=\"https://pkg.go.dev/log/slog#Leveler\" target=\"_blank\">interface Leveler</a></strong></p>\n\n\n\n[gist id=\"a9822fb8da96d927354a1532230ff1ca\" file=\"4.go\"]\n\n\n\n<p><strong>แน่นอนในส่วนของ Handler ก็ custom ได้ ผ่าน <a href=\"https://pkg.go.dev/log/slog#Handler\" target=\"_blank\">interface Handler</a></strong></p>\n\n\n\n<p>โดย default จะมีเพียง 2 handler คือ Text และ JSON เท่านั้น<br />ดังนั้นในการใช้งานอาจจะต้อง custom อีกแน่นอน</p>\n\n\n\n[gist id=\"a9822fb8da96d927354a1532230ff1ca\" file=\"5.go\"]\n\n\n\n<p><strong>ใน log message อาจจะมี sensitive data ดังนั้นใน slog ก็สามารถซ่อนได้</strong></p>\n\n\n\n<p>จะทำการซ่อนไม่ให้แสดงใน log ผ่าน <a href=\"https://pkg.go.dev/log/slog#LogValuer\" target=\"_blank\">interface LogValuer</a><br />ยกตัวอย่าง จะแสดงเพียง id ของ User เท่านั้น</p>\n\n\n\n[gist id=\"a9822fb8da96d927354a1532230ff1ca\" file=\"6.go\"]\n\n\n\n<p><strong>ใช้งาน slog ร่วมกับ web framework ต่าง ๆ ได้</strong></p>\n\n\n\n<p>มีคนทำ middleware ให้ลองนำไปใช้งานกันด้วย<br />เช่น <a href=\"https://github.com/samber/slog-echo\" target=\"_blank\">slog: Echo middleware</a><br /></p>\n\n\n\n<p><strong>หรือจะเป็น 3-party log package ต่าง ๆ ก็ใช้งาน slog เป็น backend ของตนเอง</strong><br />ทำให้สามารถทำงานได้เป็นปกติ เช่น</p>\n\n\n\n<ul>\n<li><a href=\"https://github.com/uber-go/zap/tree/master/exp/zapslog\" target=\"_blank\">zapslog</a></li>\n</ul>\n\n\n\n<p>ดูรายละเอียดเพิ่มเติมได้ที <a href=\"https://pkg.go.dev/log/slog\">slog package</a></p>\n\n\n\n<p>ขอให้สนุกกับการ coding ครับ</p>\n\n\n\n<p></p>\n\n\n\n<p><strong>Reference Websites</strong></p>\n\n\n\n<ul>\n<li><a href=\"https://betterstack.com/community/guides/logging/logging-in-go/\" target=\"_blank\">Tutorial of slog</a></li>\n\n\n\n<li><a href=\"https://go.googlesource.com/proposal/+/master/design/56345-structured-logging.md\" target=\"_blank\">Proposal: Structured Logging</a></li>\n</ul>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"e7bffba4b4c2493f7c8c8b3272ebb14733d4c0677056497924226cae7cbf883e","category":"Thai"}