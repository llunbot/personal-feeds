{"title":"Build Your Summer Spotify Playlist with Terraform","link":"https://www.hashicorp.com/blog/build-your-summer-spotify-playlist-with-terraform","date":1626368400000,"content":"<p>Terraform manages infrastructure by making calls to the APIs of cloud providers like Amazon Web Services, Microsoft Azure, and Google Cloud. It translates your Terraform configuration files into the correct API calls using plugins called providers. HashiCorp and our partners officially maintain some providers, but you can write and publish a provider against any API.</p>\n<p>This means Terraform can manage almost any service, not just cloud infrastructure. There are providers that <a href=\"https://github.com/ndmckinley/terraform-provider-dominos\">order Dominos pizza</a> and build a fictional coffee shop for learning <a href=\"https://github.com/hashicorp/terraform-provider-hashicups\">called HashiCups</a>. Last year, community member Conrad Ludgate wrote a <a href=\"https://registry.terraform.io/providers/conradludgate/spotify/latest\">Spotify provider</a> that uses a Terraform data source to search Spotify for an artist, album, or song, and use that data to build a playlist.</p>\n<p>See how to use Terraform to build your own Spotify playlist in a new HashCorp Learn tutorial, and read on to hear from Conrad about how he created the provider. Click the link below to read the tutorial and also learn about how you can win a free HashiCorp T-shirt by sharing your own playlist.</p><img src=\"https://www.datocms-assets.com/2885/1626312619-spotify-playlist.png\" /><h2><a href=\"#spotify-provider-creator-conrad-ludgate\">»</a><a></a>Spotify Provider Creator Conrad Ludgate</h2>\n<p>We asked Conrad about his experience writing the Spotify provider, and he shared some great advice for anyone who wants to learn more about provider development or contribution.</p>\n<p><strong>Q: Why did you write the Spotify provider?</strong></p>\n<p><strong>Conrad Ludgate:</strong> I love Terraform. I used to write shell scripts using the AWS CLI to set up cloud infrastructure automatically in my CI. It never worked well and would always eventually break. When I started my current job, I learned about Terraform, and instantly knew it was something great.</p>\n<p>Eventually, I found myself looking through the <code>terraform-provider-aws</code> repository to find out which APIs the provider used to create resources. At that point, I realized how simple Terraform providers are to create, and just had to build something of my own. This Spotify provider was a good introduction for me, since I've played around with the API in the past.</p>\n<p><strong>Q: That fits with our advice to start learning Terraform by looking at a provider for an API that you already know. What documentation did you rely on when writing the provider?</strong></p>\n<p><strong>Conrad:</strong> I mostly used the <a href=\"https://learn.hashicorp.com/collections/terraform/providers\">Custom Provider tutorial series</a> on HashiCorp Learn, which introduced me to how providers are set up. I also explored the code of existing providers I already used. That showed me how to structure a big project with many resources.</p>\n<p><strong>Q: How was your experience writing and testing the provider?</strong></p>\n<p><strong>Conrad:</strong> I'm already familiar with Go, so writing the provider was easy for me. Testing was a bit more complicated, and it took me a while to figure out how the testing utilities worked. For the Spotify provider, I did all my testing manually. This was fine, but it eventually got tedious having to build the provider, install it, then run <code>terraform init</code> and <code>terraform plan</code>.</p>\n<p>More recently, I built <a href=\"https://github.com/conradludgate/terraform-provider-caddy\">another provider</a> that's a little bit more serious and figured out how to use the <code>terraform-sdk</code> test functions combined with an API mock to properly unit test the provider.</p>\n<p><strong>Q: How was the process of moving the provider to the registry?</strong></p>\n<p><strong>Conrad:</strong> Terraform’s <a href=\"https://www.terraform.io/docs/registry/providers/publishing.html\">documentation</a> for this is superb. Using <a href=\"https://goreleaser.com/\">GoReleaser</a> made the whole thing simple. All I needed was a GPG key and an account on the registry. Then I used that key to sign the release binaries from the provider, and the Terraform register picked them up in minutes.</p>\n<p><strong>Q: How has the provider changed since you wrote it?</strong></p>\n<p><strong>Conrad:</strong> Before v1.0, Terraform went through a lot of changes with each new version. I originally started with v0.11 which was quite a bit different from current versions. Ultimately, the Terraform SDK API didn't change too much, so it didn’t need huge amounts of effort to keep the provider working. Since updating it to work with v0.14, it's still working now on the stable v1.0.</p>\n<p>Besides general upkeep, I've gained more experience with creating Terraform providers. I've refactored the code a few times to clean up the general structure and made it much nicer to read through.</p>\n<p><strong>Q: That’s great to hear! Are you open to community contributions to the provider?</strong></p>\n<p><strong>Conrad:</strong> Absolutely! I'm a big fan of open source. I also have some new Terraform provider fun planned for the future once I can find some spare time again (hint, it features Rust). Contribute to the Spotify provider <a href=\"https://github.com/conradludgate/terraform-provider-spotify\">here</a>.</p>\n<h2><a href=\"#keep-learning\">»</a><a></a>Keep Learning</h2>\n<p><a href=\"https://learn.hashicorp.com/tutorials/terraform/spotify-playlist\">Follow our new HashiCorp Learn tutorial</a> to build and share your Spotify playlist for a chance to win a HashiCorp T-shirt. If Conrad’s story inspired you to write your own provider, follow our <a href=\"https://learn.hashicorp.com/collections/terraform/providers\">custom providers tutorials</a> to get started.</p>\n<p>Discover other interesting providers by browsing the <a href=\"https://registry.terraform.io/\">Terraform registry</a>.</p>","author":"Judith Malnick","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"46ffbdbadf0012410d866deb3ddf3fea2516e69486796002182358672e91075f","category":"Tech"}