{"title":"Announcing HashiCorp Nomad 1.2 Beta","link":"https://www.hashicorp.com/blog/announcing-hashicorp-nomad-1-2","date":1634234400000,"content":"<p>We are excited to announce that the beta release of HashiCorp Nomad 1.2 is now available. <a href=\"https://www.nomadproject.io/\">Nomad</a> is a simple and flexible orchestrator used to deploy and manage containers and non-containerized applications. Nomad works across on-premises and cloud environments. It is widely adopted and used in production by organizations such as <a href=\"https://blog.cloudflare.com/how-we-use-hashicorp-nomad/\">Cloudflare</a>, <a href=\"https://www.hashicorp.com/case-studies/roblox\">Roblox</a>, <a href=\"https://www.hashicorp.com/case-studies/q2-software\">Q2</a>, <a href=\"https://www.hashicorp.com/case-studies/pandora\">Pandora</a>, and GitHub.</p>\n<p>Let’s take a look at what’s new in Nomad and in the Nomad ecosystem, including:</p>\n<ul>\n<li>System Batch jobs</li>\n<li>User interface upgrades</li>\n<li>Nomad Pack</li>\n</ul><h2><a href=\"#system-batch-jobs\">»</a><a></a>System Batch Jobs</h2>\n<p>Nomad 1.2 introduces a new type of job to Nomad called <code>sysbatch</code>. This is short for “System Batch”. These jobs are meant for cluster-wide, short-lived, tasks. System Batch jobs are an excellent option for regularly upgrading software that runs on your client nodes, triggering garbage collection or backups on a schedule, collecting client metadata, or doing one-off client maintenance tasks.</p>\n<p>Like <a href=\"https://www.nomadproject.io/docs/schedulers#system\">System jobs</a>, System Batch jobs work without an <a href=\"https://www.nomadproject.io/docs/job-specification/update\">update stanza</a> and will run on any node in the cluster that is not excluded via constraints. Unlike System jobs, System Batch jobs will run only on clients that are ready at the time the job was submitted to Nomad.</p>\n<p>Like <a href=\"https://www.nomadproject.io/docs/schedulers#batch\">Batch jobs</a>, System Batch jobs are meant to run to completion, can be run on a scheduled basis, and support <code>dispatch</code> execution with per-run parameters.</p>\n<p>If you want to run a simple <code>sysbatch</code> job, the job specification might look something like this:</p><pre><code>job \"sysbatchjob\" {\n  datacenters = [\"dc1\"]\n\n  type = \"sysbatch\"\n\n  constraint {\n    attribute = \"${attr.kernel.name}\"\n    value     = \"linux\"\n  }\n\n  group \"sysbatch_job_group\" {\n    count = 1\n\n    task \"sysbatch_task\" {\n      driver = \"docker\"\n\n      config {\n        image = \"busybox:1\"\n\n        command = \"/bin/sh\"\n        args    = [\"-c\", \"echo hi; sleep 1\"]\n      }\n    }\n  }\n}</code></pre><p>This will run a short-lived Docker task on every client node in the cluster that is running Linux.</p>\n<p>To run this job at regular intervals, you would add a <a href=\"https://www.nomadproject.io/docs/job-specification/periodic\">periodic stanza</a>:</p><pre><code>periodic {\n  cron             = \"0 0 */2 ? * *\"\n  prohibit_overlap = true\n}</code></pre><p>For instance, the stanza above instructs Nomad to re-run the <code>sysbatch</code> job every hour.</p>\n<p>Additionally, <code>sysbatch</code> jobs can be parameterized and then invoked later using the <a href=\"https://www.nomadproject.io/docs/commands/job/dispatch\">dispatch command</a>. These specialized jobs act less like regular Nomad jobs and more like cluster-wide functions.</p>\n<p>Adding a <a href=\"https://www.nomadproject.io/docs/job-specification/parameterized\">parameterized stanza</a> defines the arguments that can be passed into the job. For example, a <code>sysbatch</code> job that upgrades Consul to a different version might have a parameterized stanza that looks like this:</p><pre><code>parameterized {\n  payload   \t= \"forbidden\"\n  meta_required = [\"consul_version\"]\n  meta_optional = [\"retry_count\"]\n}</code></pre><p>This <code>sysbatch</code> job could then be registered using the <code>run</code> command, and executed using the <code>dispatch</code> command:</p><pre><code>$ nomad job run upgrade_consul\n$ nomad job dispatch upgrade_consul -meta consul_version=1.11.0</code></pre><h2><a href=\"#user-interface-upgrades\">»</a><a></a>User Interface Upgrades</h2>\n<p>Traditional Batch jobs and System Batch jobs now include an upgraded Job Status section, which includes two new statuses: <code>Not Scheduled</code> and <code>Degraded</code>.</p>\n<p><code>Not Scheduled</code> shows the client nodes that did not run a job. This could be due to a constraint that excluded the node based on its attributes, or because the node was added to the cluster after the job was run.</p>\n<p>The <code>Degraded</code> state shows jobs in which any allocations did not complete successfully.</p><img src=\"https://www.datocms-assets.com/2885/1634158185-nomad-1-2-job-status.png\" /><p>Additionally, you can now view all the client nodes that <code>batch</code> and <code>sysbatch</code> jobs run on with the new Clients tab. This allows you to quickly assess the state of each job across the cluster.</p><img src=\"https://www.datocms-assets.com/2885/1634158179-nomad-1-2-clients.png\" /><h2><a href=\"#nomad-pack-tech-preview\">»</a><a></a>Nomad Pack (Tech Preview)</h2>\n<p>We are excited to announce the tech preview of <a href=\"https://github.com/hashicorp/nomad-pack\">Nomad Pack</a>, a package manager for Nomad. Nomad Pack makes it easy to define reusable application deployments. This lets you quickly spin up popular open source applications, define deployment patterns that can be reused across teams within your organization, and discover job specifications from the Nomad community. Need a quick Traefik load balancer? There’s a Pack for that.</p>\n<p>Each Pack is a group of resources that are meant to be deployed to Nomad together. In the Tech Preview, these resources must be Nomad jobs, but we expect to add volumes and ACL policies in a future release.</p>\n<p>Let’s take a look at Nomad Pack, using the <a href=\"https://github.com/hashicorp/nomad-autoscaler\">Nomad Autoscaler</a> as an example.</p>\n<p>Traditionally, users deploying the Nomad Autoscaler often need to deploy or configure multiple jobs within Nomad, usually Grafana, Loki, the autoscaler itself, an APM, and a load balancer.</p>\n<p>With Nomad Pack you can run a single command to deploy all the necessary autoscaler resources to Nomad. Optionally, the deployment can be customized by passing in a variable value:</p><img src=\"https://www.datocms-assets.com/2885/1634158194-nomad-1-2-run.png\" /><p>This allows you to spend less time learning and writing Nomad job specs for each app you deploy. See the <a href=\"https://github.com/hashicorp/nomad-pack#readme\">Nomad Pack repository</a> for more details on basic usage.</p>\n<p>By default, Nomad Pack uses the <a href=\"https://github.com/hashicorp/nomad-pack-community-registry\">Nomad Pack Community Registry</a> as its source for Packs. This registry provides a location for the Nomad community to share their Nomad configuration files, learn app-specific best practices, and get feedback and contributions from the broader community. Alternative registries and internal repositories can also be used with Nomad Pack. To view available packs, run the <code>registry list</code> command:</p><img src=\"https://www.datocms-assets.com/2885/1634158190-nomad-1-2-list.png\" /><p>You can easily write and customize Packs for your specific organization’s needs using Go Template, a common templating language that is simple to write but can also contain complex logic. Templates can be composed and re-used across multiple packs, which allows organizations to more easily standardize Nomad configurations, codify best practices, and make changes across multiple jobs at once.</p>\n<p>To learn more about writing your own packs and registries, see the <a href=\"https://github.com/hashicorp/nomad-pack/blob/main/docs/writing-packs.md\">Writing Custom Packs guide</a> in the repository.</p>\n<p>A Tech Preview release of Nomad Pack will be available in the coming weeks. The Nomad team is still validating the design and specifications around the tool and packs. While we don’t expect changes to the user flows that Nomad Pack enables, some details may change based on user feedback. Until the release, to use Nomad Pack you can build from the source code. Details can be found in the repository’s <a href=\"https://github.com/hashicorp/nomad-pack/blob/main/docs/contributing.md\">contributing guide</a>.</p>\n<p>As you use Nomad Pack and write your own packs, please don’t hesitate to provide feedback. Issues and pull requests are welcome on the <a href=\"https://github.com/hashicorp/nomad-pack\">GitHub repository</a> and Pack suggestions and votes are encouraged via <a href=\"https://github.com/hashicorp/nomad-pack-community-registry/issues?q=is%3Aopen+is%3Aissue+label%3Apack\">Community Pack Registry issues</a>.</p>\n<h2><a href=\"#what-s-next\">»</a><a></a>What’s Next?</h2>\n<p>We encourage you to experiment with the new features in Nomad 1.2 and Nomad Pack, but we recommend against using Nomad 1.2 in a production environment until the official GA release. We are eager to see how the new features and projects enhance your Nomad experience. If you encounter an issue, please file a <a href=\"https://github.com/hashicorp/nomad/issues/new?assignees=&amp;labels=type%2Fbug&amp;template=bug_report.md\">new bug report</a> in GitHub and we'll take a look.</p>\n<p>Finally, on behalf of the Nomad team, I’d like to thank our amazing community. Your dedication, feature requests, pull requests, and bug reports help us make Nomad better. We are deeply grateful for your time, passion, and support.</p>","author":"Mike Nomitch","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"e909466da5e521a041552d558189999c4985f7c1ea7df3c2b792b10f8575db6d","category":"Tech"}