{"title":"ลองใช้งาน Grafana Beyla กันหน่อย","link":"https://www.somkiat.cc/hello-grafana-beyla/","date":1723618841000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/08/grafana-beyla-01-150x150.png\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/08/grafana-beyla-01-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2024/08/grafana-beyla-01-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/08/grafana-beyla-01.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/08/grafana-beyla-01-1024x538.png\" width=\"693\" height=\"364\" /></a></figure>\n\n\n\n<p></p>\n\n\n\n<p><strong><a href=\"https://grafana.com/oss/beyla-ebpf/\" target=\"_blank\">Grafana Beyla</a></strong> เป็นเครื่องมือสำหรับจัดการข้อมูล observability ของ application แบบง่าย ๆ<br />เช่น application metric และ distributed tracing<br />ด้วยการสร้าง auto-instrumentation เพื่อดึงข้อมูลจาก eBPF (Extended Berkeley Packet Filter) ได้เลย<br />ทำให้ในฝั่ง application ไม่ต้องเพิ่ม code ใด ๆ เข้าไป<br />โดยใน Grafana Beyla นั้นสนับสนุน multi-process<br />จึงส่งผลให้ดึงข้อมูลของแต่ละ process ที่อยู่บนเครื่องเดียวกันได้</p>\n\n\n\n<span></span>\n\n\n\n<p>แสดงดังรูป</p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/08/grafana-beyla-multi-process-support.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/08/grafana-beyla-multi-process-support.png\" width=\"513\" height=\"355\" /></a></figure>\n\n\n\n<p><strong>ดังนั้นเพิ่มความเข้าใจ จึงลองเขียน code และใช้งานกันหน่อย</strong></p>\n\n\n\n<p>โดยตัวอย่างของ application ที่สร้างมานั้น ประกอบไปด้วย</p>\n\n\n\n<ul>\n<li>พัฒนา web application ด้วยภาษา go</li>\n\n\n\n<li>ทำการ build และ run ตัวอย่างด้วย Docker compose</li>\n</ul>\n\n\n\n<p>มาเริ่มกันเลย</p>\n\n\n\n<p><strong>ขั้นตอนที่ 1 สร้าง web application ด้วยภาษา go แบบปกติ</strong></p>\n\n\n\n[gist id=\"e03aa89268366320f6295a2d2a443cab\" file=\"main.go\"]\n\n\n\n<p><strong>ขั้นตอนที่ 2 ทำการ build และ run ด้วย Docker compose</strong></p>\n\n\n\n<p>โดยทำการ config เพื่อใช้งาน Grafana Beyla <br />เพื่อดึงข้อมูล metric และ trace ของระบบงาน<br />ผ่านด้วยการระบุชื่อ container ไปได้เลยแบบง่าย ๆ ดังนี้</p>\n\n\n\n[gist id=\"e03aa89268366320f6295a2d2a443cab\" file=\"docker-compose.yml\"]\n\n\n\n<p><strong>ขั้นตอนที่ 3 ทำการ run และดูผล</strong></p>\n\n\n\n[gist id=\"e03aa89268366320f6295a2d2a443cab\" file=\"1.txt\"]\n\n\n\n<p>รวมทั้งข้อมูลของ trace ที่พ่นออกมาเป็น text ใน log อีกด้วย<br />เป็นไปตามมาตฐานของ <a href=\"https://www.w3.org/TR/trace-context/\" target=\"_blank\">W3C Trace Context</a><br />ถ้า request ที่เรียกไม่มีข้อมูลการ trace ก็จะสร้างให้ใหม่นั่นเอง</p>\n\n\n\n[gist id=\"e03aa89268366320f6295a2d2a443cab\" file=\"2.txt\"]\n\n\n\n<p>เพียงเท่านี้ก็ได้ข้อมูล metric และ trace ของ web application มาแบบง่าย ๆ แล้ว<br />ไม่ต้องมาเขียน code เพิ่มแต่อย่างใด<br />ลองใช้งานกันดูครับ น่าสนใจดี</p>\n\n\n\n<p><strong>เพิ่มเติมรูปการทำงานนิดหน่อย</strong></p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/08/grafana-beyla-diagram.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/08/grafana-beyla-diagram-1024x804.png\" width=\"609\" height=\"478\" /></a></figure>\n\n\n\n<p><strong>Reference Websites</strong></p>\n\n\n\n<ul>\n<li><a href=\"https://github.com/up1/demo-beyla-go\" target=\"_blank\">Demo code :: GitHub:Up1</a></li>\n\n\n\n<li><a href=\"https://grafana.com/blog/2023/11/14/grafana-beyla-1.0-release-zero-code-instrumentation-for-application-telemetry-using-ebpf\" target=\"_blank\">Grafana Beyla 1.0 release: zero-code instrumentation for application telemetry using eBPF</a></li>\n</ul>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"5c937fa56a5664dc931f9b11bedb12e721d7e2a722fa83901014f6ecc35a7d95","category":"Thai"}