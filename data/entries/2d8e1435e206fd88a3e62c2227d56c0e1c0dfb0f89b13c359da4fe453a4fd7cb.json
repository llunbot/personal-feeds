{"title":"WebKit Features in Safari 18.4","link":"https://webkit.org/blog/16574/webkit-features-in-safari-18-4/","date":1743447651000,"content":"<p>Safari 18.4 is here! It includes 84 new features, including a completely new declarative mechanism for sending Web Push notifications, lots of CSS including a brand-new <code>shape()</code> function, P3 &amp; translucency for the HTML color picker, media formats with more robust support for recording, new Web APIs including modern popover manipulation, new JavaScript features like Iterators, a faster way to jump to device viewport presets in Responsive Design Mode, new Web Extension API, improvements to <code>WKWebView</code>, and enhancements across Networking, Storage, and Connection Security—plus much more.</p>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/rwm.png\" alt=\"\" width=\"2588\" height=\"1566\" srcset=\"https://webkit.org/wp-content/uploads/rwm.png 2588w, https://webkit.org/wp-content/uploads/rwm-300x182.png 300w, https://webkit.org/wp-content/uploads/rwm-1024x620.png 1024w, https://webkit.org/wp-content/uploads/rwm-768x465.png 768w, https://webkit.org/wp-content/uploads/rwm-1536x929.png 1536w, https://webkit.org/wp-content/uploads/rwm-2048x1239.png 2048w\" /></p>\n<p>A lot of our focus this winter has been on improving the quality and polish of existing web platform features, with a goal of greatly improving compatibility. WebKit for Safari 18.4 includes 184 resolved issues and 13 deprecations of older technology.</p>\n<p>If you’ve struggled with support for something in WebKit or Safari in the past, please test again with WebKit for Safari 18.4. You can always file an issue about WebKit at <a href=\"https://bugs.webkit.org/\">bugs.webkit.org</a>. Or, if the issue involves technology deeper in the stack, file <a href=\"https://feedbackassistant.apple.com/\">feedback</a> with a <a href=\"https://support.apple.com/guide/activity-monitor/run-system-diagnostics-actmntr2225/mac\">sysdiagnose</a> to provide information on how the operating system itself is being impacted. If you run into a website that isn’t working as expected, please file a report at <a href=\"https://webcompat.com/\">webcompat.com</a> and our team will take a look. Filing issues really does make a difference. You can always ping our web evangelists: Jen Simmons on <a href=\"https://bsky.app/profile/jensimmons.bsky.social\">Bluesky</a> / <a href=\"https://front-end.social/@jensimmons\">Mastodon</a>, Saron Yitbarek on <a href=\"https://bsky.app/profile/saron.bsky.social\">BlueSky</a>, or Jon Davis on <a href=\"https://bsky.app/profile/jondavis.bsky.social\">Bluesky</a> / <a href=\"https://mastodon.social/@jondavis\">Mastodon</a>.</p>\n<p>Here’s a tour of what’s new with WebKit in Safari 18.4.</p>\n<h2><a name=\"declarative-web-push\"></a>Declarative Web Push</h2>\n<p>Reaching users through push notifications is a powerful and important part of any modern computing platform. In 2013, Safari 7 on OS X 10.9 Mavericks added Safari Push, giving sites the ability to send push notifications across the web for the very first time. We learned a lot about how websites used this capability, and how users responded to it.</p>\n<p>Other browsers were also eager to add push notifications to the web. The development of the Service Worker API coincided with the development of Push API, Notifications API, and RFC 8030. All four were combined into what we now call Web Push. Chrome first supported these standards in 2015 and Firefox in 2016.</p>\n<p>The Safari team at Apple continued to refine Safari Push over the years, learning more about power usage, privacy, and its potential for abuse. The WebKit team at Apple watched the deployment of Web Push standards closely, then made deliberate decisions in implementing those standards in a privacy and power preserving way. That implementation shipped Web Push for <a href=\"https://webkit.org/blog/13399/webkit-features-in-safari-16-1/#web-push-for-macos-ventura\">Safari 16.1 on macOS</a> followed by support for <a href=\"https://webkit.org/blog/13878/web-push-for-web-apps-on-ios-and-ipados/\">web apps on iOS and iPadOS 16.4</a>.</p>\n<p>The Web Push standards have required a Service Worker since the beginning, much like how web apps require Service Workers in Chromium browsers. Compared to the original Safari Push, which used a declarative model, requiring a Service Worker introduces added complexity for web developers. It also demands more from the system — consuming additional battery and CPU resources — and opens the door to potential misuse. Much like how web apps created from within Safari have never required a Service Worker on iOS, iPadOS, or macOS, we wanted the web platform to have push notifications that can also be declarative, displaying instantly without requiring a Service Worker.</p>\n<p>Over the last several years we’ve been working on a new technology for push notifications on the web — Declarative Web Push. Learn all about how we designed and implemented it in <a href=\"https://webkit.org/blog/16535/meet-declarative-web-push/\">Meet Declarative Web Push</a>.</p>\n<p>Declarative Web Push is now available on iOS and iPadOS 18.4 for web apps added to the Home Screen.</p>\n<h2><a name=\"css\"></a>CSS</h2>\n<h3><a name=\"shape-function\"></a>Shape function</h3>\n<p>For complex graphical effects like clipping an image or video to a shape, authors often fall back on CSS masking so that they can ensure that the mask adapts to the size and aspect ratio of the content being masked. Using the <code>clip-path</code> property was problematic, because the only way to specify a complex shape was with the <code>path()</code> function, which takes an SVG-style path, and the values in these paths don’t have units; they are just treated as CSS pixels. It was impossible to specify a path that was responsive to the element being clipped.</p>\n<p>The CSS <code>shape()</code> function, new in WebKit for Safari 18.4, addresses these shortcomings. The <code>shape()</code> function is a <a href=\"https://drafts.csswg.org/css-shapes-2/#shape-function\">new member</a> in the family of <a href=\"https://drafts.csswg.org/css-shapes/#basic-shape-functions\">CSS basic shapes</a>, and provides a way to describe an SVG-style path as a list of path commands which use CSS units. For example, to create this simple shape:</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/simple-shape-300x294.png\" alt=\"Solid blue baseball diamond shape\" width=\"auto\" height=\"auto\" /></figure>\n<p>We can use this style:</p>\n<pre><code><span>clip-path</span>: <span>shape</span>(<span>from</span> <span>right</span> <span>center</span>,\n<span>line</span> <span>to</span> <span>bottom</span> <span>center</span>,\n<span>arc</span> <span>to</span> <span>top</span> <span>center</span> <span>of</span> 50% 50% <span>cw</span>,\n<span>line</span> <span>to</span> <span>right</span> <span>center</span>);\n</code></pre>\n<h3><a name=\"details-styling\"></a>Details styling</h3>\n<p>WebKit for Safari 18.4 adds several improvements to the experience of using <code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code> elements, continuing a slow march to significantly improve this feature. If you steered away from it in the past because of limitations, you should try it again. Web standards have evolved in recent years, and all browsers have been improving support as part of <a href=\"https://wpt.fyi/interop-2025\">Interop 2025</a>.\n</p><p>First, there is new support for the<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::details-content\"><code>::details-content</code></a> pseudo-element. You can use this pseudo-element to select just the content that appears when the details element is open, so you can style it independently.</p>\n<figure>\n<p></p><figcaption>Try <a href=\"https://codepen.io/jensimmons/pen/yyLzEMY\">this demo</a> out in a browser with support.</figcaption></figure>\n<p></p>\n<p>This also means you can animate the height of this container for the first time, solving a long-standing problem that previously required JavaScript or an extra container around the content.</p>\n<p>And WebKit for Safari 18.4 reimplements the <code>&lt;details&gt;</code> and <code>&lt;/details&gt;&lt;summary&gt;</code> disclosure triangle as a list item. This means you can now easily change the character used like this: <code>summary { list-style: \"+ \"; }</code> and further customize its styling using the<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::marker\"><code>::marker</code></a> pseudo-element.\n</p><p>These changes modernize <code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code>, making it possible to use this HTML instead of building custom controls from scratch using JavaScript. It’s faster and easier for you, and ensures your results have the proper semantics and full support for users of assistive technologies.\n</p><h3><a name=\"sideways-writing-modes\"></a>Sideways writing modes</h3>\n<p>Writing modes in CSS provide support for a wide variety of layout directions for written languages. At its core, the <a href=\"https://developer.mozilla.org/docs/Web/CSS/writing-mode\"><code>writing-mode</code></a> property switches the text flow in the inline direction between a horizontal or vertical layout, as well as determining in which the direction in blocks stack. Safari has had support for <code>writing-mode: horizontal-tb</code>, <code>vertical-rl</code>, and <code>vertical-lr</code> since 2011 (prefixed until March 2017). Now, WebKit for Safari 18.4 adds support for <code>writing-mode: sideways-rl</code> and <code>writing-mode: sideways-lr</code>.</p>\n<p>The sideways writing modes are very similar to vertical writing modes, but not the same. They were intended to be used for text that’s normally laid out horizontally to be instead displayed vertically as a graphic design effect. Note in the demo below the difference between how CJK characters are rendered in <code>sideways-*</code> vs <code>vertical-*</code>. When the intention is to layout out typical horizontal text sideways, using <code>sideways-rl</code> instead of <code>vertical-rl</code> ensures punctuation and other direction-neutral characters are typeset correctly for the purpose at hand. It also handles the baseline of the text differently. Using <code>sideways-lr</code> instead of <code>vertical-lr</code> creates an entirely different result. Dig into this example to see more, including toggling to see the differences in text wrapping.</p>\n<figure>\n<p></p><figcaption>Try <a href=\"https://codepen.io/jensimmons/pen/wBvrqYY?editors=1100\">this demo</a> in a <a href=\"https://caniuse.com/?search=text-autospace\">browser with support</a>.</figcaption></figure>\n<h3><a name=\"text-auto-space\"></a>Text auto space</h3>\n<p>WebKit for Safari 18.4 adds support for the brand new <a href=\"https://www.w3.org/TR/css-text-4/#text-autospace-property\"><code>text-autospace</code></a> property, which automatically introduces extra space to provide visual breathing room when transitioning between scripts. In the distant past, Chinese and Japanese were written in a purely native writing system derived from ancient Chinese Han characters. But in modern typesetting, they liberally mix in Western numbers and letters. When set solid, the boundary between the traditional characters and the new foreign characters feels cramped, and so modern typesetting convention has adopted a practice of inserting a little bit of extra space at these boundaries. With the <code>text-autospace</code> property, the browser automatically inserts this extra space whenever it detects a script transition.</p>\n<p>The options for values include:</p>\n<ul>\n<li><code>ideograph-alpha</code> creates extra spacing between runs of CJK and non-CJK letters.</li>\n<li><code>ideograph-numeric</code> creates extra spacing between runs of CJK and non-CJK numerals.</li>\n<li><code>normal</code> does both <code>ideograph-alpha</code> and <code>ideograph-numeric</code> at the same time.</li>\n<li><code>no-autospace</code> inserts no space at all.</li>\n</ul>\n<figure>\n<p></p><figcaption>Try <a href=\"https://codepen.io/jensimmons/pen/NPWaXxY/5b72f8e244fa706eaefbfb6a9ee19546?editors=1100\">this demo</a> in a <a href=\"https://caniuse.com/?search=text-autospace\">browser with support</a>.</figcaption></figure>\n<p>WebKit defaults to <code>text-autospace: no-autospace</code> to match the current default behavior of older (currently all) browsers. The CSS specification calls for browsers to switch the default to <code>text-autospace: normal</code> — automatically applying better spacing to all CJK content on the web, no matter when the website was created.</p>\n<p>We have not yet switched to the new default behavior. Use <code>text-autospace</code> In Safari 18.4 to opt your content into the new spacing, and test it out. If you have thoughts about the implementation, file an issue at <a href=\"http://bugs.webkit.org/\">bugs.webkit.org</a>. We want to ensure our implementation is well tested before changing the default.</p>\n<h3><a name=\"view-transitions\"></a>View Transitions</h3>\n<p>Last December, <a href=\"https://webkit.org/blog/16301/webkit-features-in-safari-18-2/#:~:text=view%2Dtransition%2Dname:%20auto\">Safari 18.2</a> added support for <code>view-transition-name: auto</code>, allowing you to avoid individually naming potentially hundreds of different content items if you are applying transitions to the content on a single page. With <code>auto</code> , the <code>id</code> is first checked to be identical across the transition, then if the <code>id</code> isn’t present, the elements are checked directly to be identical across the transition.</p>\n<p>In WebKit for Safari 18.4, we’re adding support for <code>view-transition-name: match-element</code>, which only checks the elements to be identical across the transition. This can only be used for single-page view transitions, whereas <code>auto</code> can be used for multi-page view transitions through matching the <code>id</code> attribute.</p>\n<h3><a name=\"and-more-css-updates\"></a>And more CSS updates</h3>\n<p>There’s also added support for several more CSS features in WebKit for Safari 18.4:</p>\n<ul>\n<li>gradients with only one stop</li>\n<li>fallbacks inside <code>attr()</code>, for example — <code>attr(data-count, \"0\")</code></li>\n<li><code>unicode-bidi</code> text rendering UA rules (except for <code>ruby</code> elements)</li>\n</ul>\n<p>And the non-standard <code>CSSUnknownRule</code> interface has been removed.</p>\n<h2><a name=\"html\"></a>HTML</h2>\n<p>Now, WebKit for Safari 18.4 enhances <code>&lt;input type=\"color\" /&gt;</code> to support <code>alpha</code> and <code>colorspace</code> attributes. This means you can offer users the chance to choose a color from the Display P3 colorspace, and/or to adjust the opacity of their choice. You can also use any supported CSS color syntax inside the <code>value</code> attribute of the <code>&lt;input type=\"color\" /&gt;</code> control and it will be properly converted as per the <code>colorspace</code> attribute.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/image-3.png\" alt=\"The color picker showcasing the opacity and color wheel\" width=\"300\" height=\"auto\" /></figure>\n<p>And the WebKit team worked with the WHATWG community to standardize these color picker enhancements in the HTML standard.</p>\n<p>WebKit for Safari 18.4 adds iOS support for the<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory\"><code>webkitdirectory</code></a> attribute on <code>&lt;input type=\"file\" /&gt;</code> elements. When a file input with the attribute is invoked, the document picker is immediately displayed with non-directory items grayed out. From this document picker, a directory can be uploaded by navigating into the target directory and pressing “Open”.</p>\n<p>Support for the <code>composite</code> attribute on an <code>&lt;img&gt;</code> element has been removed in WebKit for Safari 18.4. It was originally added in April 2004 to support composite operations on images (combining two images for creating an effect) in the context of the now discontinued <a href=\"https://en.wikipedia.org/wiki/Dashboard_(macOS)\">Dashboard</a> macOS feature. This attribute is not necessary anymore and can be safely removed.</p>\n<h2><a name=\"web-inspector\"></a>Web Inspector</h2>\n<p>Responsive Design Mode in Safari 18.4 allows you to select from a list of device viewport size presets to quickly test the layout of your web page. Presets can be rotated for portrait and landscape orientations. Viewport size presets offer a good approximation of how your web page will be affected by viewport sizes, but they don’t represent exact layout, rendering, and behavior as experienced on an actual device. For example, the page layout on a device might be influenced by the browser address bar or the on-screen keyboard. To get high fidelity previews, use the Open with Simulator menu to check the webpage on a device simulator.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/RWD-Presets-Masked-light-scaled.jpg\" alt=\"Screenshot of the top section of webkit.org viewed in Responsive Design Mode\" width=\"auto\" height=\"auto\" /></figure>\n<p>If you use <a href=\"https://developer.apple.com/documentation/javascriptcore/jscontext\"><code>JSContext</code>s</a> in your macOS, iOS, iPadOS, visionOS, watchOS or tvOS app, you can use <a href=\"https://developer.apple.com/documentation/safari-developer-tools/web-inspector\">Safari Web Inspector</a> to debug them. Sometimes, you need to automatically inspect and pause script execution in a <code>JSContext</code> before it has a chance to run so you can set breakpoints and manually step through the code. Prior to Safari 18.4, you could only configure these options for the entire device which could lead to interruptions as <code>JSContext</code>s from other apps would also be automatically inspected. Starting in Safari 18.4, you can configure automatic inspection and pausing of <code>JSContext</code>s just for your app.</p>\n<p>The new Inspect Apps and Devices menu item in the Develop menu opens a window with a list of all connected devices and currently running apps that have inspectable content, such as webpages, service workers, <code>JSContext</code>s, <code>WKWebView</code>s, and web extension background pages. Next to each app in the list, there is a triple-dot menu which reveals options to configure automatic inspection and pausing of <code>JSContext</code>s just for that app. The settings apply to any new <code>JSContext</code> created by that app. If the <code>JSContext</code> you want to automatically inspect is created at app launch, you’ll need to restart the app to see the effect.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/JSContext-Automatic-Inspection-iPhone-light-scaled.jpg\" alt=\"Screenshot of the Apps and Devices Inspection menu showing devices on the left panel and apps in the primary panel\" width=\"auto\" height=\"auto\" /></figure>\n<p>You can use a <a href=\"https://webkit.org/web-inspector/local-overrides/\">Request Local Override</a> to add or change headers for requests matching a URL without modifying any of the other data by ticking the checkbox for “Include original request data” in the Local Override configuration popover. Any new or changed headers will augment the request headers. Starting in Safari 18.4, you can select the “passthrough” option for the Method selector to apply the override for any HTTP method.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/Local-Overrides-Masked-light-scaled.jpg\" alt=\"Screenshot of thethe Sources panel in Web Inspector open to the Local Overrides section and towing the Request Override form for webkit.org\" width=\"auto\" height=\"auto\" /></figure>\n<p>The User Agent string overrides list now includes Android options. You can apply an override for the currently open page using the User Agent submenu from the Safari Develop menu. When remotely-inspecting a web page on a connected device or simulator, you can find User Agent string overrides in the <a href=\"https://webkit.org/web-inspector/device-settings/\">Device Settings popover</a>.</p>\n<p>The <code>console.screenshot</code> method from the Web Inspector Console API now supports providing a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMRect\">DOMRect</a> as an argument to capture a screenshot of a precise area of the web page.</p>\n<p>You can grab a DOMRect from an existing DOM node:</p>\n<pre><code><span>console</span>.<span>screenshot</span>(<span>document</span>.<span>querySelector</span>(<span>\"#testNode\"</span>).<span>getBoundingClientRect</span>())\n</code></pre>\n<p>Or you can define a DOMRect with custom values:</p>\n<pre><code><span>console</span>.<span>screenshot</span>(<span>new</span> <span>DOMRect</span>(<span>0</span>, <span>0</span>, <span>800</span>, <span>600</span>))\n</code></pre>\n<p>Web Inspector now supports the <code>ignoreList</code> field from the <a href=\"https://tc39.es/ecma426/#sec-source-map-format\">official source map specification</a>. Tools that generate source maps can use this field to identify sources that can be ignored, for example framework code or bundler-generated code, to ease the cognitive burden for developers when debugging their own code.</p>\n<p>The Cookie table view in the Storage tab can now be configured to show a column with the cookie partition key for partitioned cookies.</p>\n<h2><a name=\"media\"></a>Media</h2>\n<p>WebKit for Safari 18.4 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture\">Image Capture API</a>. It provides a way to enable the capture of images or photos from a camera or other photographic device through <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Image_Capture_API\">MediaStream Image Capture API</a>.</p>\n<p>As part of our efforts to improve web compatibility, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder\">MediaRecorder</a> in WebKit for Safari 18.4 now supports creating WebM files using the Opus audio codec and either VP8 or VP9 for video. Additionally, it can now create ISOBMFF (fragmented MP4) files, which can be easily used with Media Source Extensions’ SourceBuffer. MediaRecorder can also generate high-quality, lossless audio tracks in ALAC or PCM formats. And we’ve added support for video tracks in H264, HEVC, and AV1 (for devices with AV1 hardware support).</p>\n<p>WebKit for Safari 18.4 rounds out our support for media formats by adding Ogg container support for both <a href=\"https://en.wikipedia.org/wiki/Opus_(audio_format)\">Opus</a> and <a href=\"https://en.wikipedia.org/wiki/Vorbis\">Vorbis</a> audio on macOS Sequoia 15.4, iOS 15.4, iPadOS 15.4, and visionOS 2.4.</p>\n<h2><a name=\"webrtc\"></a>WebRTC</h2>\n<p>WebKit for Safari 18.4 adds WebRTC support for the <a href=\"https://w3c.github.io/mediasession/#the-mediasession-interface\">MediaSession</a> capture mute API:</p>\n<ul>\n<li>Web pages can detect in a central place whether user muted/unmuted camera/microphone/screenshare capture via specific <a href=\"https://w3c.github.io/mediasession/#dom-mediasessionaction-togglemicrophone\">actions</a></li>\n<li>Web pages can ask capture to be muted/unmuted via dedicated <a href=\"https://w3c.github.io/mediasession/#dom-mediasession-setmicrophoneactive\">methods</a>. Unmuting requires user activation and will not trigger a user prompt if muting was done by the web page.</li>\n</ul>\n<p>WebKit for Safari 18.4 adds <a href=\"https://w3c.github.io/mediacapture-output/\">speaker selection API</a> on macOS:</p>\n<ul>\n<li>Speakers can be <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\">enumerated</a> once microphone access is granted</li>\n<li>Audio rendered with HTMLMediaElement can be routed to specific speakers via <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId\">setSinkId</a>.</li>\n</ul>\n<h2><a name=\"svg\"></a>SVG</h2>\n<p>There are a few updates to SVG in WebKit for Safari 18.4.</p>\n<p>There’s new support for the <code>lh</code> and <code>ch</code> units inside of SVG. Note that support for the <code>ch</code> does not include support for upright vertical character width.</p>\n<p><code>SVGImageElement.prototype.decode()</code> is now supported to help you avoid an empty image while waiting to download and decoding an SVG image.</p>\n<p>And WebKit for Safari 18.4 removes support for the SVG 1.1 <code>kerning</code> property, and the SVGDocument alias to XMLDocument.</p>\n<h2><a name=\"web-api\"></a>Web API</h2>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Screen_Wake_Lock_API\">Screen Wake Lock API</a> now also works in Home Screen Web Apps on iOS and iPadOS 18.4. This allows you to prevent a device from dimming and locking the screen. It’s especially great for use cases like recipe apps, when the user is still reading but not touching the screen.</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/requestClose\"><code>dialog.requestClose()</code></a> method is new with WebKit for Safari 18.4. Use it to request to close a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog\"><code>&lt;dialog&gt;</code></a>. It differs from the other methods by firing a <code>cancel</code> event before firing the <code>close</code> event and closing the dialog.\n</p><p>WebKit for Safari 18.4 adds an option to set an invoker for <code>popover</code> from an imperative API with the <code>showPopover()</code> and <code>togglePopover()</code> methods. For example:</p>\n<pre><code><span>element</span>.<span>showPopover</span>({ <span>source</span><span>:</span> <span>document</span>.<span>querySelector</span>(<span>\"#menu-button\"</span>) })\n</code></pre>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Cookie_Store_API\">Cookie Store API</a> is a new asynchronous API in WebKit for Safari 18.4 for managing cookies and getting notifications about changes. Due to privacy concerns, this new API exposes only the “name” and “value” properties of cookies—just like <code>document.cookie</code>. The change event is implemented for windows, but not yet for service workers due to ambiguities in the specification.</p>\n<p>Compression Streams now supports compressing and decompressing data using the <a href=\"https://brotli.org/\">Brotli format</a>. This may offer significant improvements in both performance and compression size based on the specific data compared to <a href=\"https://en.wikipedia.org/wiki/Deflate\">Deflate</a>. Authors only need to update the <code>CompressionStreams</code> constructor to <code>brotli</code> to take advantage of the new feature.</p>\n<p>WebKit for Safari 18.4 adds support for X25519 for Web Cryptography which allows access to deriveBits, deriveKey, exportKey, generateKey, and importKey in the SubtleCrypto interface. This offers better security and less reliance on external libraries to get the benefits of secure curves.</p>\n<p>Key generation, import and export support for CryptoKeyOKP(x25519/ed25519) is now supported with a CryptoKit implementation, allowing use of Curve25519 in cryptography.</p>\n<p>New control of the focusing process is available in WebKit for Safari 18.4 with support for <code>element.focus({ focusVisible: true })</code>. This allows developers to programmatically control the visible focus indicator of an element, to force it to be visible or prevent it from being visible instead of relying exclusively on the User Agent.</p>\n<p>WebKit for Safari 18.4 adds support for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/parseCreationOptionsFromJSON_static\"><code>PublicKeyCredential.parseCreationOptionsFromJSON()</code></a> , <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/parseRequestOptionsFromJSON_static\"><code>PublicKeyCredential.parseRequestOptionsFromJSON()</code></a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/toJSON\"><code>PublicKeyCredential.toJSON()</code></a> methods. This provides web developers an easy way to serialize Web Authentication requests and responses objects between client and server.</p>\n<p>WebKit for Safari 18.4 adds support for Scroll To Text Fragment feature detection with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/fragmentDirective\"><code>document.fragmentDirective</code></a>. This lets you test whether or not text fragments are supported in your browser by checking for existence of the object.</p>\n<p>WebKit for Safari 18.4 removes support for built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event\"><code>wheel</code> event</a> handling for <code>&lt;input type=\"number\" /&gt;</code>. Its behavior did not match the equivalent control on Apple platform’s and was confusing to end users. Web developers frequently sought to disable it, or would enable it inadvertently.</p>\n<h2><a name=\"javascript\"></a>JavaScript</h2>\n<h3><a name=\"iterators\"></a>Iterators</h3>\n<p>WebKit for Safari 18.4 adds support for several new features from the <a href=\"https://github.com/tc39/proposal-iterator-helpers\">Iterator Helpers proposal</a>. When interacting with large sets of data it might not be possible to fit all your data in memory at once, such as in an Array. With iterator helpers, data is handled lazily so it doesn’t all have to be in memory at the same time.</p>\n<p>As an example, <em>Around the World in Eighty Days</em> is a French novel by Jules Verne. The hero, Phileas Fogg, makes a bet that he can navigate around the world in no more than 80 days. These are the cities Phileas Fogg will go through:</p>\n<pre><code><span>function</span><span>*</span> <span>cities</span>() {\n<span>yield</span> <span>\"London (UK)\"</span>;\n<span>yield</span> <span>\"Suez (Egypt)\"</span>;\n<span>yield</span> <span>\"Bombay (India)\"</span>;\n<span>yield</span> <span>\"Calcutta (India)\"</span>;\n<span>yield</span> <span>\"Victoria (Hong-Kong)\"</span>;\n<span>yield</span> <span>\"Singapore (Singapore)\"</span>;\n<span>yield</span> <span>\"Yokohama (Japan)\"</span>;\n<span>yield</span> <span>\"San Francisco (USA)\"</span>;\n<span>yield</span> <span>\"New-York (USA)\"</span>;\n<span>yield</span> <span>\"London (UK)\"</span>;\n<span>// If Phileas went to every city in the world this list would be very long.\n</span>}\n</code></pre>\n<p>We can make an iterator out of the <code>cities</code> generator function by calling it. For other iterable data structures such as <code>Map</code>, <code>Set</code>, and <code>Array</code> we can use <code>Iterator.from</code>.</p>\n<pre><code><span>let</span> <span>citiesIter</span> <span>=</span> <span>cities</span>();\n\n<span>let</span> <span>otherCitiesIter</span> <span>=</span> <span>Iterator</span>.<span>from</span>([<span>\"London (UK)\"</span>, <span>\"Suez (Egypt)\"</span>, <span>\"Bombay (India)\"</span>]);\n</code></pre>\n<p>To iterate through an iterator, we can call <code>next()</code>:</p>\n<pre><code><span>citiesIter</span>.<span>next</span>(); <span>// &lt; {value: \"London (UK)\", done: false}\n</span><span>citiesIter</span>.<span>next</span>(); <span>// &lt; {value: \"Suez (Egypt)\", done: false}\n</span><span>citiesIter</span>.<span>next</span>(); <span>// &lt; {value: \"Bombay (India)\", done: false} // etc. \n</span></code></pre>\n<p>As we can see we can iterate through the cities, one by one. If we want to restart the iterator from the beginning, we just need to create a new one:</p>\n<pre><code><span>citiesIter</span> <span>=</span> <span>cities</span>(); \n</code></pre>\n<p>Let’s create functions that will check if a city is in India or France:</p>\n<pre><code><span>isCityInIndia</span> <span>=</span> (<span>x</span>) <span>=</span><span>&gt;</span> <span>x</span>.<span>includes</span>(<span>\"India\"</span>);\n<span>isCityInFrance</span> <span>=</span> (<span>x</span>) <span>=</span><span>&gt;</span> <span>x</span>.<span>includes</span>(<span>\"France\"</span>);\n</code></pre>\n<p>The method <code>iterator.some()</code> will check if some elements in the iterator meet a certain criteria:</p>\n<pre><code><span>citiesIter</span>.<span>some</span>(<span>isCityInIndia</span>);\n</code></pre>\n<p>It will return <code>true</code> as <em>some</em> of the cities are in India.</p>\n<p>Let’s make a new iterator again and check for cities in France:</p>\n<pre><code><span>citiesIter</span>.<span>some</span>(<span>isCityInFrance</span>);\n</code></pre>\n<p>As expected, it returns <code>false</code> as none of the cities are in France.</p>\n<p>The method <code>Iterator.every()</code> checks if all elements in the iterator meet the specified criteria.</p>\n<pre><code><span>citiesIter</span>.<span>every</span>(<span>isCityInIndia</span>);\n</code></pre>\n<p>It will return <em>false</em>. Indeed. Not all cities from the iterator are in India.</p>\n<p>The method <code>Iterator.filter()</code> returns a new iterator whose elements match our criteria.</p>\n<pre><code><span>citiesIter</span>.<span>filter</span>(<span>isCityInIndia</span>);\n<span>// Iterator.from([\"Bombay (India)\", \"Calcutta (India)\"]);\n</span></code></pre>\n<p>One of the nicest parts of iterator helpers is that you can compose them. Let’s say we want to know how many places Phileas visited in India on his journey. We can use the <code>reduce</code> function on our <code>filter</code>ed iterator to get our answer.</p>\n<pre><code><span>cities</span>().<span>filter</span>(<span>isCityInIndia</span>).<span>reduce</span>((<span>count</span>, <span>city</span>) <span>=</span><span>&gt;</span> <span>count</span> <span>+</span> <span>1</span>, <span>0</span>);\n<span>// 2\n</span></code></pre>\n<p>The method <code>Iterator.map()</code> applies the function for each elements returned by the iterator when <code>.next()</code> is called.</p>\n<pre><code><span>citiesIter</span> <span>=</span> <span>cities</span>();\n<span>// here we create a function modifying the element returned by `next()`.\n</span><span>travelDone</span> <span>=</span> (<span>x</span>); <span>\"Travel to \"</span> <span>+</span> <span>x</span> <span>+</span> <span>\": done!\"</span>;\n<span>let</span> <span>citiesDone</span> <span>=</span> <span>citiesIter</span>.<span>map</span>(<span>travelDone</span>);\n<span>citiesDone</span>.<span>next</span>();\n<span>// {value: \"Travel to London (UK): done!\", done: false}\n</span><span>citiesDone</span>.<span>next</span>();\n<span>// {value: \"Travel to Suez (Egypt): done!\", done: false}\n</span><span>// etc.\n</span></code></pre>\n<p>These are a couple of examples of the new methods which have been added to Safari. Take your time to discover others: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/some\"><code>some()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/every\"><code>every()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/find\"><code>find()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/map\"><code>map()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/filter\"><code>filter()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/take\"><code>take()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/drop\"><code>drop()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/flatMap\"><code>flatMap()</code></a> , <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/toArray\"><code>toArray()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/forEach\"><code>forEach()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/reduce\"><code>reduce()</code></a>.</p>\n<h3><a name=\"json-parsing\"></a>JSON Parsing</h3>\n<p>WebKit improves parsing performance using <a href=\"https://github.com/simd-everywhere/simde\">SIMDe</a> in JSON for fast scanning of strings in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse</code></a>, plus fast scanning and copying of strings in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify</code></a>. <a href=\"https://en.wikipedia.org/wiki/Single_instruction,_multiple_data\">SIMD</a> (Single Instruction, Multiple Data) is practical when handling computations on a large set of data, where each data element receives the same instruction.</p>\n<h3><a name=\"improved-error-detection\"></a>Improved Error detection</h3>\n<p>WebKit for Safari 18.4 supports <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/isError\"><code>Error.isError</code></a> to identify a “real” native error in a world where <code>Symbol.toStringTag</code> means there isn’t a reliable way to test the internal slot for <code>Error</code> instances. It makes it possible to normalize error objects instead of relying on only strings.</p>\n<pre><code><span>try</span> {\n  <span>throw</span> <span>\"Oops; this is not an Error object. Just a string.\"</span>;\n} <span>catch</span> (<span>e</span>) {\n  <span>// test if it's not an error\n</span>  <span>if</span> (<span>!</span><span>Error</span>.<span>isError</span>(<span>e</span>)) {\n    <span>// make it a real error\n</span>    <span>e</span> <span>=</span> <span>new</span> <span>Error</span>(<span>e</span>);\n  }\n  <span>console</span>.<span>error</span>(<span>e</span>.<span>message</span>);\n}\n</code></pre>\n<h3><a name=\"and-more\"></a>And more</h3>\n<p>WebKit also allows for programs using spin-wait loops to give the CPU a hint that it’s waiting on a value and still spinning by implementing <code>Atomics.pause</code>.</p>\n<h2><a name=\"canvas\"></a>Canvas</h2>\n<p>WebKit adds un-prefixed <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/letterSpacing\"><code>letterSpacing</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/wordSpacing\"><code>wordSpacing</code></a> for <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">CanvasRenderingContext2D</a> in Safari 18.4. This enables you to specify the spacing between words and letters when drawing text in a 2D canvas, without a <code>-webkit</code> prefix.</p>\n<p>And support has been removed for three antiquated technologies to improve interoperability and compatibility:</p>\n<ul>\n<li><code>webKitBackingStorePixelRatio</code></li>\n<li>the prefixed <code>webkitImageSmoothingEnabled</code> — use the standard <code>imageSmoothingEnabled</code> property instead</li>\n<li>the non-standard legacy alias of Canvas Compositing including <code>setAlpha</code> and <code>setCompositeOperation</code></li>\n</ul>\n<h2><a name=\"editing\"></a>Editing</h2>\n<p>WebKit for Safari 18.4 adds support for <code>ClipboardItem.supports()</code>. When a web application needs to place content in the clipboard of the operating system, it is useful to know in advance if the format is supported by the clipboard. By default, browsers support <code>text/plain</code>, <code>text/html</code> and <code>image/png</code> .</p>\n<ul>\n<li>This gives the ability to check if other formats are supported. It will send back <code>false</code> when the format is not supported and avoid an error message.</li>\n<li>It also adds <a href=\"https://www.rfc-editor.org/rfc/rfc2483#section-5\"><code>text/uri-list</code></a> which is a supported format by Safari, useful when sharing list of URLs.</li>\n</ul>\n<p>It also improves interoperability by sending TypeError for a new <code>ClipboardItem()</code> with an empty Array.</p>\n<p>Also, WebKit for Safari 18.4 fixes <code>document.execCommand(\"copy\")</code> so that it can be triggered even if there is not any text selected.</p>\n<h2><a name=\"loading\"></a>Loading</h2>\n<p>With Safari 18.4, WebKit now supports <code>noopener-allow-popups</code> in <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\">Cross-Origin-Opener-Policy</a> (COOP). This disconnects the relationship between the opener and the document loaded with its policy, but still allows the document to open other documents if their COOP policy allows it.</p>\n<h2><a name=\"webassembly\"></a>WebAssembly</h2>\n<p>WebKit for Safari 18.4 supports running Wasm when Just-In-Time compilation (JIT) is disabled. That means Safari can still run Wasm in environments where JIT compilation has been turned off to boost system security.</p>\n<p>There’s also support for the <a href=\"https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md\">new Wasm Exception specification</a>. Exception handling allows code to break control flow when an exception is thrown. The new specification provides both a mechanism for Wasm code to handle JavaScript exceptions, and to throw its own exceptions. This new specification supersedes the legacy proposal, which WebKit supported since Safari 15.2 and will continue to support for compatibility.</p>\n<p>WebKit for Safari 18.4 adds support for <code>relaxed_laneselect</code> SIMD instructions which means that when the mask is <em>all</em> its bits set or unset, it will behave like a bitwise select SIMD instruction. Otherwise, if the mask has a different value, the implementation can then use the backing architecture to pick the relaxed instruction’s behavior.</p>\n<h2><a name=\"web-extensions\"></a>Web Extensions</h2>\n<h3><a name=\"browser-web-extension-apis\"></a>Browser Web Extension APIs</h3>\n<p>WebKit on iOS 18.4, iPadOS 18.4, visionOS 2.4, and macOS Sequoia 15.4 adds support for integrating web extensions into WebKit-based browsers with a set of straightforward Swift and Objective-C APIs. With the new <a href=\"https://developer.apple.com/documentation/webkit/wkwebextension/\"><code>WKWebExtension</code></a>, <a href=\"https://developer.apple.com/documentation/webkit/wkwebextensioncontext/\"><code>WKWebExtensionContext</code></a>, and <a href=\"https://developer.apple.com/documentation/webkit/wkwebextensioncontroller/\"><code>WKWebExtensionController</code></a> classes, browsers can incorporate web extensions that empower users to customize their browsing experience. Integrating web extensions into WebKit enables all WebKit-based browsers to align on a unified implementation, ensuring they all benefit from continuous improvements and fixes in support of the <a href=\"https://github.com/w3c/webextensions\">evolving web extensions standard</a>.</p>\n<h3><a name=\"temporary-extension-installation\"></a>Temporary Extension Installation</h3>\n<p>New in Safari 18.4 on macOS, you can <a href=\"https://developer.apple.com/documentation/safariservices/running-your-safari-web-extension#Temporarily-install-a-web-extension-folder-in-macOS-Safari\">temporarily install a web extension from disk</a>. This provides a convenient way to develop your extension and test compatibility without building an Xcode project. When loading a temporary extension, you’ll have access to most Safari Web Extension functionality. When you’re ready to test out <code>nativeMessaging</code>, or prepare your extension for distribution, you can create a new Xcode project using the <a href=\"https://developer.apple.com/documentation/safariservices/converting-a-web-extension-for-safari\">Safari Web Extension Converter</a>.</p>\n<h3><a name=\"developer-id-signed-and-notarized-safari-web-extensions\"></a>Developer ID-Signed and Notarized Safari Web Extensions</h3>\n<p>Safari 18.4 on macOS now supports Safari Web Extensions that have been <a href=\"https://developer.apple.com/documentation/safariservices/distributing-your-safari-web-extension#Distribute-your-Developer-ID-signed-and-notarized-extension-outside-the-Mac-App-Store\">Developer ID-signed and notarized</a>. Notarization is an additional step after signing your app and extension with your Developer ID. Apple’s notarization service automatically checks for malicious content and code-signing issues. Once notarized, your app and extension is ready for distribution and use in Safari.</p>\n<h3><a name=\"reliable-document-identification\"></a>Reliable Document Identification</h3>\n<p>Safari 18.4 adds support for <a href=\"https://developer.chrome.com/blog/extension-instantnav#how_do_i_solve_time_of_use_problems_with_frames\"><code>documentId</code></a> in <code>webRequest</code>, <code>webNavigation</code>, <code>tabs</code>, and <code>scripting</code> APIs, ensuring extensions can reliably track documents when sending messages, injecting scripts, or processing requests. Unlike <code>frameId</code>, which stays the same when a new document loads in the same frame, <code>documentId</code> updates with each navigation, helping extensions avoid interacting with the wrong content.</p>\n<h3><a name=\"efficient-storage-key-retrieval\"></a>Efficient Storage Key Retrieval</h3>\n<p>Safari 18.4 introduces <a href=\"https://github.com/w3c/webextensions/blob/main/proposals/storage-get-keys.md\"><code>getKeys()</code></a> in extension storage, allowing developers to retrieve stored keys without fetching their associated values. This improves performance for extensions that manage large sets of structured data, such as those that store user preferences, session data, or categorized content. By retrieving only the keys, extensions can efficiently determine what data is available before deciding which values to load, reducing unnecessary data transfers.</p>\n<h3><a name=\"improved-localization-support\"></a>Improved Localization Support</h3>\n<p>Support for <a href=\"https://github.com/w3c/webextensions/pull/569/files?short_path=19f5ebf#diff-19f5ebf2a865a2ffc23a38ff56ad7d0d824755a68fe79d7e1810270ff5d87980\"><code>i18n.getSystemUILanguage()</code> and <code>i18n.getPreferredSystemLanguages()</code></a> in Safari 18.4 provides extensions with access to the user’s system language settings. Unlike <code>i18n.getUILanguage()</code>, which returns the browser’s interface language, these APIs allow extensions to align with system-wide language preferences. This is particularly useful for extensions that format dates, numbers, and other locale-specific content according to the user’s preferred regional settings, even when the browser’s locale differs.</p>\n<h3><a name=\"expanded-subframe-injection\"></a>Expanded Subframe Injection</h3>\n<p>Safari 18.4 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/content_scripts#match_about_blank\"><code>match_about_blank</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/content_scripts#match_origin_as_fallback\"><code>match_origin_as_fallback</code></a> in extension manifests, as well as <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/scripting/RegisteredContentScript#matchoriginasfallback\"><code>matchOriginAsFallback</code></a> in <code>scripting</code> for dynamically registered content scripts. These properties allow scripts and styles to run in additional frames such as <code>about:blank</code>, <code>data:</code>, and <code>blob:</code> URLs by matching based on the origin of the parent frame rather than the frame’s own URL, making it possible to target frames with opaque origins. Host permissions for the parent frame’s origin are still required.</p>\n<h2><a name=\"wkwebview\"></a>WKWebView</h2>\n<p>In this release, we brought more platform parity across our APIs. On iOS, it’s now possible for API clients to customize the upload flow for file inputs using the <code>WKUIDelegate/webView(_:runOpenPanelWith:initiatedByFrame:)</code> delegate method.</p>\n<p>We also now expose the <code>buttonNumber</code> and <code>modifierFlags</code> properties of <code>WKNavigationAction</code> on iOS and visionOS.</p>\n<p>Lastly, visionOS 2.4 brings Apple Intelligence features like summarization, text compose, rewriting, and proofreading into WebKit client experiences on visionOS with support for Writing Tools. This includes their respective APIs, <a href=\"https://developer.apple.com/documentation/webkit/wkwebview/iswritingtoolsactive\"><code>WKWebView.isWritingToolsActive</code></a> and <a href=\"https://developer.apple.com/documentation/uikit/uitextinputtraits/writingtoolsbehavior\"><code>WKWebViewConfiguration.writingToolsBehavior</code></a>.</p>\n<h2><a name=\"networking\"></a>Networking</h2>\n<p>WebKit for Safari 18.4 on macOS Sequoia 15.4, iOS 18.4, and visionOS 2.4 introduce support for opt-in partitioned cookies, known as <a href=\"https://developer.mozilla.org/en-US/docs/Web/Privacy/Guides/Privacy_sandbox/Partitioned_cookies\">CHIPS</a>. Partitioned cookies allow third-party content on a web page to create and access cookies on that specific site without allowing cross-site tracking. CHIPS is an important technology for web sites that still require access to cookies in a third-party context (e.g., an iframe), and it is an important step toward helping sites finish their migration away from relying on unpartitioned, cross-site cookies.</p>\n<p>For example, if https://siteA.example creates an iframe and loads https://siteB.example in it, and the webpage from https://siteB.example creates a partitioned cookie, then that cookie is only accessible to siteB.example on a webpage from siteA.example. Note that WebKit is using a different partitioning boundary for CHIPS compared with its other storage areas (e.g., localstorage). WebKit is aligning with the other browser engines by partitioning cookies by <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Site\">site</a>, as compared to by <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Origin\">origin</a>. This means that if both https://news.siteA.example and https://mail.siteA.example embed an iframe from https://chat.siteB.example, then https://chat.siteB.example will have access to the same cookie on both web pages because https://news.siteA.example and https://mail.siteA.example are subdomains of the same <code>site</code>: https://siteA.example.</p>\n<p>Partitioned cookies with CHIPS require that the website explicitly sets a new attribute on the cookie. This explicit attribute ensures that WebKit and the website have a shared understanding that the cookie will be only accessible on a particular site. The new attribute is named <code>Partitioned</code>, and it is used in a similar manner to the <code>Secure</code> or <code>HTTPOnly</code> attributes. As with other cookie attributes, the Partitioned attribute is only used when the cookie is set, and it is not accessible afterward.</p>\n<p>As an example, if you want to set a partitioned cookie using the HTTP <code>Set-Cookie</code> header, that could look like:</p>\n<p><code>Set-Cookie: TestCookie=12345; SameSite=None; Secure; Partitioned</code></p>\n<p>Note, this cookie includes the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Cookies#controlling_third-party_cookies_with_samesite\">SameSite=None</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Cookies#block_access_to_your_cookies\">Secure</a> attributes. These attributes are required for a <code>Partitioned</code> cookie, and the cookie will be blocked if those attributes are not set. This means that the cookie much be created and accessed from a secure webpage (e.g., https) and the cookie will be sent in all go your cross-site requests to your server. You can read more about these attributes on the linked pages.</p>\n<p>Similar to setting a partitioned cookie with the HTTP header, you can set it using JavaScript, as well. For example, JavaScript could create the same cookie as above:</p>\n<p><code>document.cookie = \"TestCookie=12345; SameSite=None; Secure; Partitioned\";</code></p>\n<p>And <code>document.cookie</code> will return <code>\"TestCookie=12345\"</code>.</p>\n<p>Note, cross-site tracking domains may not be allowed to use partitioned cookies.</p>\n<p>If you require access to both partitioned third-party cookies and unpartitioned third-party cookies, then you can continue using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API\">Storage Access API</a> with <code>document.requestStorageAccess()</code> to request access to the unpartitioned cookies.</p>\n<h2><a name=\"storage\"></a>Storage</h2>\n<p>WebKit for Safari 18.4 adds support for clearing partitioned cookies using the <code>Clear-Site-Data</code> HTTP header. Support for clearing first party cookies using the <code>Clear-Site-Data</code> was introduced in Safari 17.0. Now, with the introduction of CHIPS, described above, this HTTP header has different behavior depending on which server sends it. If the header is received in the response that was sent by the first party site (e.g., the main web page), then WebKit will clear only unpartitioned cookies for that domain. If the HTTP header is received in a response that was sent by a cross-site iframe, then WebKit will clear only partitioned cookies for the particular site on which the iframe is loaded.</p>\n<h2><a name=\"connection-security\"></a>Connection Security</h2>\n<p>For years, the lock icon in Safari indicated that the connection is secure — that the site is using HTTPS. With more than <a href=\"https://w3techs.com/technologies/details/ce-httpsdefault\">87% of all connections</a> made over HTTPS now, secure connections are ubiquitous. The new norm. Meanwhile, the presence of the lock could be creating a false sense of trustworthiness, if users instead believe it’s there to signal the website is trustworthy. With this in mind, we removed the lock icon from the Smart Search field for HTTPS connection in Safari 18.4.</p>\n<p>For users who would like the ability to learn more about connection security, we’re introducing a new option. On macOS, go to Safari menu; Connection Security Details. And on iOS, iPadOS, and visionOS, you’ll find the information in Page menu; more; Connection Security Details.</p>\n<p>This view lets users confirm the connection is secure, and for the first time on iOS, iPadOS, and visionOS, view certificate information such as CA issuer and expiration date.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/Screenshot-2025-03-26-at-4.30.27 PM-scaled.jpg\" alt=\"Three devices showing three different screens. The first shows the Page Menu and shows options for Page Actions, Tab Actions, and Website Settings for Apple.com. The second screen shows the Connection Security Details options and displays that your connection with apple.com is secure and shows the certificate. The third screen show the three certificates for apple.com.\" width=\"auto\" height=\"auto\" /></figure>\n<p>In the EU, Connection Security Details indicate connections made using an EU Qualified Web Authentication (QWAC) certificate providing an indicator for enhanced trust and security for online interactions on iOS 18.4, iPadOS 18.4, macOS Sequoia 15.4, and in visionOS 2.4.</p>\n<p>Additionally, WebKit for Safari 18.4 changes 3DES <a href=\"https://en.wikipedia.org/wiki/Triple_DES\">cipher</a> to show a warning to users that it’s a legacy <a href=\"https://en.wikipedia.org/wiki/Transport_Layer_Security\">TLS</a> (Transport Layer Security). <a href=\"https://3des.badssl.com/\">Tap here</a> to see such a warning.</p>\n<h2><a name=\"security\"></a>Security</h2>\n<p>WebKit for Safari 18.4 adds support for CSP Hash Reporting keywords: <code>report-sha256</code>, <code>report-sha384</code> and <code>report-sha512</code>. And it removes support for Clear-Site-Data: for <code>executionContexts</code> since Safari was the most only browser with support.</p>\n<p>WebKit for Safari 18.4 now enables a user to set a PIN for a security key when it’s required during registration.</p>\n<h2><a name=\"resolved-issues\"></a>Resolved Issues</h2>\n<p>In addition to new features, WebKit for Safari 18.4 includes work to polish existing features.</p>\n<h3><a name=\"browser\"></a>Browser</h3>\n<ul>\n<li>Fixed an issue where sites would log out automatically after a brief time.  (99829958)  </li>\n</ul>\n<h3><a name=\"css\"></a>CSS</h3>\n<ul>\n<li>Fixed table <code>border-color</code> to be <code>currentColor</code> by default.  (48382483)  </li>\n<li>Fixed combining CSS <code>clip-path</code> with any property that creates a new stacking context makes <code>&lt;img&gt;</code> element disappear.  (86091397)  </li>\n<li>Fixed resize to not be applied to generated content.  (121348638)  </li>\n<li>Fixed <code>contain: size</code> breaking <code>object-fit</code>.  (131866042)  </li>\n<li>Fixed: Dropped layout containment from <code>container-type</code>.  (132549134)  </li>\n<li>Fixed handling all of the CSS properties in specifications that should cause a UI widget to devolve to a primitive appearance.  (134273374)  </li>\n<li>Fixed <code>scrollIntoView</code> alignment to always be honored.  (135484284)  </li>\n<li>Fixed:<code>background-clip: border-area</code> to do nothing on the root.  (135972986)  </li>\n<li>Fixed <code>vertical-rl</code> writing mode inter-character ruby text being significantly smaller than over ruby text.  (135973587)  </li>\n<li>Fixed CSS cursor to not eagerly evaluate <code>calc()</code> values.  (136103471)  </li>\n<li>Fixed flex shorthand to not eagerly evaluate <code>calc()</code>.  (136103475)  </li>\n<li>Fixed <code>-webkit-perspective</code> to not eagerly evaluate <code>calc()</code>.  (136103493)  </li>\n<li>Fixed <code>@property</code> <code>initial-value</code> descriptor to prevent containing <code>var(--foo)</code>.  (136103499)  </li>\n<li>Fixed delaying the evaluation of <code>calc()</code> for raw font consumers so that each caller can choose the correct behavior.  (136103500)  </li>\n<li>Fixed grid to not eagerly evaluate <code>calc()</code> for repetitions value.  (136103503)  </li>\n<li>Fixed <code>counter-increment</code>, <code>counter-set</code>, and <code>counter-reset</code> to not eagerly evaluate <code>calc()</code>.  (136103519)  </li>\n<li>Fixed CSS nested declarations inside a <code>@scope</code> to behave like <code>:where(:scope)</code>.  (136856371)  </li>\n<li>Fixed: Updated the <code>shape()</code> function to match the proposed syntax.  (138126105)  </li>\n<li>Fixed same-document view transitions performance on pages with many elements.  (138966650)  </li>\n<li>Fixed an issue where radial gradients with two color stops at 100% failed to extend the last color.  (139369366)  </li>\n<li>Fixed <code>@scope</code> <code>start</code> and <code>end</code> to be a classic (non-forgiving) selector list.  (139471866)  </li>\n<li>Fixed updating the base background color where the root has <code>color</code> set explicitly when switching to light or dark modes.  (139917332)  </li>\n<li>Fixed performance of <code>querySelectorAll()</code> with <code>:has()</code> descendant selectors.  (140093151)  </li>\n<li>Fixed the <code>unicode-bidi</code> default for the <code>&lt;bdo&gt;</code> element.  (140662417)  </li>\n<li>Fixed broken <code>revert-layer</code> when logical group CSS properties are explicitly inherited.  (140819138)  </li>\n<li>Fixed border-spacing to use the shortest possible serialization (“0px” vs “0px 0px”).  (141920587)  </li>\n<li>Fixed subsequent nested styles getting ignored after an incorrect nested selector.  (142187930)  </li>\n<li>Fixed <code>font-variant-caps: all-small-caps</code> causing incorrect <code>box-sizing</code> in <code>flex</code> inline context.  (142212550)  </li>\n<li>Fixed ensuring  the correct logic is run for over-constrained cases when the absolute positioned box is a <code>writing-mode</code> root.  (142214631)  </li>\n<li>Fixed <code>animation-name</code> set from the view transitions dynamic UA stylesheet having extra quotes.  (142298840)  </li>\n<li>Fixed the serialization and parsing of <code>animation-name</code> strings.  (142318879)  </li>\n<li>Fixed <code>text-box-trim</code> accumulation failing when updating the CSS dynamically.  (142386761)  </li>\n<li>Fixed <code>text-emphasis</code> to not paint emphasis marks on punctuations.  (142387538)  </li>\n<li>Fixed sizing and positioning issues when a popover changes CSS position upon opening.  (142491219)  </li>\n<li>Fixed Page Zoom (⌘+ and ⌘-) to work with <code>calc()</code> used with <code>font-size</code> on macOS.  (142736427) (FB16287129)  </li>\n<li>Fixed <code>scroll-padding</code> and <code>scroll-margin</code> to be strongly typed CSS/Style values.  (142830546)  </li>\n<li>Fixed View Transitions to stop running when the user navigates with a swipe.  (142844150)  </li>\n<li>Fixed top-level and nesting selector to have zero specificity matching a recent specification update.  (143765827)  </li>\n</ul>\n<h3><a name=\"editing\"></a>Editing</h3>\n<ul>\n<li>Fixed <code>document.execCommand(\"copy\")</code> only triggering if there is a selection.  (27792460)  </li>\n<li>Fixed an issue where iCloud Notes pasted text copied from a plain text document in Safari as raw markup.  (124788252)  </li>\n<li>Fixed highlighting correctly a large text selection that ends with a common phrase.  (135973065)  </li>\n<li>Fixed copying a link to a common term in an article to highlight the correct part of the page.  (135973186)  </li>\n<li>Fixed missing <code>SecureContext</code> in the <code>ClipboardItem</code> interface.  (137197266)  </li>\n<li>Fixed Hebrew text pasted from Safari getting aligned left.  (139029945)  </li>\n<li>Fixed setting selection to not set focus unless there is an existing selection.  (139075809)  </li>\n<li>Fixed sometimes being unable to select text for non-editable content.  (143296175)  </li>\n<li>Fixed missing selection handles after selecting text across multiple lines.  (143720155)  </li>\n</ul>\n<h3><a name=\"forms\"></a>Forms</h3>\n<ul>\n<li>Fixed <code>&lt;textarea&gt;</code> to handle switching direction.  (73475239)  </li>\n<li>Fixed setting a <code>datetime-local</code> input to a large value cause a crash.  (135733092)  </li>\n<li>Fixed <code>&lt;datalist&gt;</code> dropdown keyboard interactions to align with platform conventions.  (143012287)  </li>\n<li>Fixed: Disabled all Writing Tools app menu items, except “Compose”, for empty editable content.  (143332082)  </li>\n</ul>\n<h3><a name=\"home-screen-web-apps\"></a>Home Screen Web Apps</h3>\n<ul>\n<li>Fixed Screen Wake Lock API for Home Screen Web Apps.  (108573133)  </li>\n</ul>\n<h3><a name=\"html\"></a>HTML</h3>\n<ul>\n<li>Implemented <code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code> disclosure triangle as a list item.  (95148788)   </li>\n</ul>\n<h3><a name=\"images\"></a>Images</h3>\n<ul>\n<li>Fixed broken WebP images in lockdown mode.  (144224372)  </li>\n</ul>\n<h3><a name=\"javascript\"></a>JavaScript</h3>\n<ul>\n<li>Fixed Array destructuring assignment to close the iterator if an evaluation throws an exception.  (121960887)  </li>\n<li>Fixed: Updated <code>Intl.DurationFormat#resolvedOptions</code> to the latest specification.  (136276429)  </li>\n<li>Fixed Iterator Helpers methods to not iterate an array.  (136303997)  </li>\n<li>Fixed <code>Iterator.prototype.reduce()</code> not properly forwarding the <code>return()</code> call to the underlying iterator.  (137181340)  </li>\n<li>Fixed <code>Set.prototype</code> methods to invoke <code>keys()</code> without arguments.  (137395979)  </li>\n<li>Fixed <code>Array.from()</code>, <code>Array.fromAsync()</code>, and <code>TypedArray.from()</code> to invoke <code>document.all</code> passed as a mapper.  (137490201)  </li>\n<li>Fixed <code>Intl.DurationFormat</code> to have a value limit to match the specification.  (137885273)  </li>\n<li>Fixed a rounding error for <code>Intl.DurationFormat</code>.  (138261569)  </li>\n<li>Fixed calendar canonicalization logic in <code>DateTimeFormat</code>.  (141792829)  </li>\n<li>Fixed broken output for <code>Intl.DurationFormat</code> digital style when <code>hoursDisplay</code> is <code>\"auto\"</code>.  (141969050)  </li>\n<li>Fixed <code>Intl.DurationFormat</code> to print a negative sign for minutes after hidden hours.  (142119353)  </li>\n<li>Fixed <code>Array.prototype.toReversed</code> to fill holes with <code>undefined</code>.  (142197604)  </li>\n<li>Fixed: Increased the <code>matchLimit</code> for regular expressions, allowing complex matches on longer strings.  (143202375)  </li>\n</ul>\n<h3><a name=\"media\"></a>Media</h3>\n<ul>\n<li>Fixed handling an empty <code>srcAttr</code> in Media Element.  (132042925)  </li>\n<li>Fixed getUserMedia video track <code>getSettings()</code> returning a stale value for <code>torch</code> and <code>whiteBalanceMode</code> constraints.  (137870391)  </li>\n<li>Fixed the <code>space</code> key not pausing a video in fullscreen by making the video mouse focusable.  (138037616)  </li>\n<li>Fixed an issue where playback doesn’t always resume after a seek.  (140097993)  </li>\n<li>Fixed playing video generating non-monotonic ‘timeupdate’ events.  (142275184) (FB16222910)  </li>\n<li>Fixed websites calling <code>play()</code> during a <code>seek()</code> is allowed by the specification so that the play event is fired even if the seek hasn’t completed.  (142517488)  </li>\n<li>Fixed seek not completing for WebM under some circumstances.  (143372794)  </li>\n<li>Fixed MediaRecorderPrivateEncoder writing frames out of order.  (143956063)  </li>\n</ul>\n<h3><a name=\"networking\"></a>Networking</h3>\n<ul>\n<li>Fixed optimistically upgraded navigations to set a timeout based on current network conditions.  (135972599)  </li>\n</ul>\n<h3><a name=\"pdf\"></a>PDF</h3>\n<ul>\n<li>Fixed switching a PDF from continuous to discrete mode displaying the page(s) that are at the top of the window, even when barely visible.  (137608841)  </li>\n<li>Fixed the “Previous Page” context menu option not navigating to previous page in 2-up continuous mode.  (139817364)  </li>\n<li>Fixed main frame PDFs served with a CSP sandbox header not loading.  (141166987)  </li>\n</ul>\n<h3><a name=\"rendering\"></a>Rendering</h3>\n<ul>\n<li>Fixed computing the baseline for replaced elements with an intrinsic ratio but no intrinsic size as flex items.  (74279029)  </li>\n<li>Fixed flickering caused by extra resize events dispatched when rotating from landscape to portrait on iOS.  (93767145)  </li>\n<li>Fixed adding out-of-flow objects under the inline in a continuation chain, when possible.  (102421379)  </li>\n<li>Fixed <code>mix-blend-mode</code> to work for large resolution fixed or stick elements.  (104686540)  </li>\n<li>Fixed the missing table collapsed border for <code>&lt;thead&gt;</code>, <code>&lt;tbody&gt;</code>, and <code>&lt;tfoot&gt;</code> elements in the wrong order.  (110430887)  </li>\n<li>Fixed handling inline-box trailing content.  (112409103)  </li>\n<li>Fixed <code>&lt;input type=\"range\"&gt;</code> taking up space even with <code>width: 0</code> applied.  (113402515)  </li>\n<li>Fixed the Spotify media player disappearing when rotating to landscape mode on iOS.  (123870311)  </li>\n<li>Fixed textarea elements to reserve space for overlay scrollbars.  (129597865)  </li>\n<li>Fixed grid layout animation performance by caching intrinsic logical heights during the first row sizing pass, improving efficiency and preventing invalidation issues with complex grid configurations.  (135791322)  </li>\n<li>Fixed Grid item which is an image with specified sizes failing to update when the <code>src</code> changes.  (135972911)  </li>\n<li>Fixed nested inlines’ vertical alignment when <code>line-fit-edge</code> is set.  (136036997)  </li>\n<li>Fixed the consistency of table layout with <code>&lt;td width=\"100%\"&gt;</code>.  (136090741)  </li>\n<li>Fixed repainting to be more consistent for <code>text-underline-position</code>.  (136095297)  </li>\n<li>Fixed floats not clearing in the WordPress Classic Editor sidebar layout.  (136362683)  </li>\n<li>Fixed handling of out-of-flow children in MathML layout functions to be consistent.  (136683070)  </li>\n<li>Fixed a repeating <code>background-image</code> sized to the <code>content-box</code> failing to fill the viewport in an iframe.  (136725820)  </li>\n<li>Fixed consistently triggering a reflow when needed for table DOM manipulations.  (137300794)  </li>\n<li>Fixed <code>scriptlevel</code> multipler for font-size in MathML.  (137671252)  </li>\n<li>Fixed inline marquees to allow them to shrink when adjacent to float(s).  (137766071)  </li>\n<li>Fixed a flex container with no flex item to not run flex layout.  (137884128)  </li>\n<li>Fixed support for CSS width and height properties on MathML elements.  (138174295)  </li>\n<li>Fixed Inline content incorrectly positioning around right-to-left and/or vertical <code>shape-outside</code> floats.  (139076129)  </li>\n<li>Fixed incorrectly overlapping when a float has <code>shape-outside: inset</code>.  (139133291)  </li>\n<li>Fixed right-to-left content failing with a <code>shape-outside</code> float.  (139198865)  </li>\n<li>Fixed incorrectly overlapping a float that has <code>shape-outside: ellipse</code> in vertical mode.  (139208636)  </li>\n<li>Fixed incorrectly overlapping a float that has <code>shape-outside: polygon</code> in right-to-left.  (139215719)  </li>\n<li>Fixed outside <code>list-style-position</code> quirk to only be applicable in quirks mode.  (140602985)  </li>\n<li>Fixed: Updated line box dimensions.  (141167251)  </li>\n<li>Fixed incorrect horizontal writing mode state when nested in a vertical block container.  (141543326)  </li>\n<li>Fixed baseline calculation few cases for tables with empty rows.  (142046863)  </li>\n<li>Fixed to refuse to break inside replaced content.  (142224455)  </li>\n<li>Fixed absolute positioned child with percent to include containing block padding.  (142321535)  </li>\n<li>Fixed computing an out-of-flow box width correctly when it is inside an inline continuation.  (142417374)  </li>\n<li>Fixed a border not showing when a linear gradient and a border radius are set.  (142617573)  </li>\n<li>Fixed relative-positioned input elements in scroll areas not rendering outlines.  (142995142)  </li>\n<li>Fixed tabbing out of a popover causing a hang in certain cases.  (143145544)  </li>\n<li>Fixed setting up inline continuations correctly when not inserting a new child.  (143388080)  </li>\n<li>Fixed adding a <code>margin-top</code> to a <code>&lt;rt&gt;</code> also adds a bottom margin.  (143720832)  </li>\n</ul>\n<h3><a name=\"scrolling\"></a>Scrolling</h3>\n<ul>\n<li>Fixed changes to the “scrolling” attribute on an iframe element already in the DOM to take effect.  (98911472)  </li>\n</ul>\n<h3><a name=\"service-workers\"></a>Service Workers</h3>\n<ul>\n<li>Fixed handling the case of busy looping service workers in a process containing web pages.  (138626537)  </li>\n<li>Fixed an unexpected failure when serving a redirected response from cache for a navigation loaded via service worker navigation preload.  (146113615)  </li>\n</ul>\n<h3><a name=\"storage\"></a>Storage</h3>\n<ul>\n<li>Fixed the Storage Access API to consider <code>AllExceptPartitioned</code> as not currently having cookie access, ensuring sites can request access to first-party cookie.  (143508260)  </li>\n</ul>\n<h3><a name=\"svg\"></a>SVG</h3>\n<ul>\n<li>Fixed not propagating the bounding box for empty <code>text</code> to ancestors.  (115217040)  </li>\n<li>Fixed SVG masks not working as a <code>mask-image</code>.  (127327715)  </li>\n<li>Fixed a bug in case of reference elements (e.g., textPath) unable to notify the referring element (e.g, text) about their availability.  (135509733)  </li>\n<li>Fixed SVGUseElement to prevent sniffing the content type when loading an external document.  (135972621)  </li>\n<li>Fixed vertical writing modes to se the correct bounding rect.  (135973175)  </li>\n<li>Fixed: Updated <code>getTotalLength()</code> with the web specification to throw an exception when non-renderable and the path is empty.  (136719548)  </li>\n<li>Fixed SVG quadratic curve getting incorrectly clipped at tile boundaries.  (139904014)  </li>\n<li>Fixed dynamically updating the <code>transform</code> attribute.  (140761655)  </li>\n<li>Fixed synthesizing a <code>viewBox</code> in <code>&lt;img&gt;</code> only for the document element <code>&lt;svg&gt;</code>.  (141733733)  </li>\n<li>Fixed <code>SVGElement.prototype.ownerSVGElement</code> on the outermost <code>&lt;svg&gt;</code> in <code>foreignObject</code>.  (143625675)  </li>\n</ul>\n<h3><a name=\"tables\"></a>Tables</h3>\n<ul>\n<li>Fixed table row direction to be determined by the table’s direction, not the section.  (99343532)  </li>\n<li>Fixed missing behavior for <code>rowspan=\"0\"</code> on HTML tables where 0 means span over all the remaining rows.  (133910430)  </li>\n<li>Fixed Table Root to also account for <code>fill-available</code> in a fixed table layout.  (137297914)  </li>\n<li>Fixed table section and row background to not be treated as opaque.  (142588505)  </li>\n</ul>\n<h3><a name=\"text\"></a>Text</h3>\n<ul>\n<li>Fixed an issue where a thick underline would not show on short content.  (64705955)  </li>\n<li>Fixed: The changes for GB18030-2022 now properly impact GBK as well, as required by the Encoding Standard.  (136368583)  </li>\n<li>Fixed automatically hyphenating text only when a language specified.  (136826305)  </li>\n<li>Fixed the boundary style calculation when <code>text-spacing: text-autospace</code> is applied.  (137153961)  </li>\n<li>Fixed displaying OpenType-SVG color fonts.  (137496217) (FB15426148)  </li>\n</ul>\n<h3><a name=\"web-api\"></a>Web API</h3>\n<ul>\n<li>Fixed: Aligned some MIME type handling in EME with the MIME Sniffing standard.  (114311586)  </li>\n<li>Fixed <code>window.history.replaceState('', '', '')</code> having no effect on macOS.  (117782346)  </li>\n<li>Fixed MutationObserver to observe style attribute changes when resizing the element.  (120109181)  </li>\n<li>Fixed: Updated <code>selectorText</code> handling to align with the specification for CSSPageRule.  (125588212)  </li>\n<li>Fixed Gamepad rumble issue where sending two sequential <code>playEffect()</code> requests prevents <code>reset()</code> from working as expected.  (126589062) (FB13733668)  </li>\n<li>Fixed matching emoji in an element’s <code>id</code> attribute from a <code>&lt;link rel=expect&gt;</code> with an <code>href</code> that uses percent-encoded syntax.  (134531921)  </li>\n<li>Fixed the <code>onrejectionhandled</code> and <code>onunhandledrejection</code> event handler attributes to work correctly on body and frameset elements.  (135401362)  </li>\n<li>Fixed render blocking for <code>&lt;link&gt;</code> to not match elements that are on a ‘stack of open elements’ for the parser.  (135846827)  </li>\n<li>Fixed Distraction Control unexpectedly hiding out-of-flow elements that overlap with a hidden element.  (136358918)  </li>\n<li>Fixed CSSOM <code>setSelectorText(string)</code> to prepend the implicit selector.  (136791222)  </li>\n<li>Fixed <code>HTMLElement.prototype.requestPointerLock</code> to return a Promise.  (139854530)  </li>\n<li>Fixed <code>innerText</code> behavior for <code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code>.  (140172890)  </li>\n<li>Fixed the HTML parser phone number handling to better account for MathML.  (141632782)  </li>\n<li>Fixed <code>Range.getClientRects</code> to take surrogate pairs into account.  (142098484)  </li>\n<li>Fixed tokenization of the rel attribute of the link element and Link header.  (142600096)  </li>\n</ul>\n<h3><a name=\"web-authentication\"></a>Web Authentication</h3>\n<ul>\n<li>Fixed <code>.catch()</code> for conditional mediation  not getting passed the abort reason that was thrown.  (112178073)  </li>\n</ul>\n<h3><a name=\"web-extensions\"></a>Web Extensions</h3>\n<ul>\n<li>Fixed CORS for Web Extension pages to respect granted per-site permissions.\n<p>Developers will need to add a <code>browser.permissions.request({origins: []})</code> call before doing any <code>fetch()</code> that is blocked by CORS.  (102912898)</p>\n</li>\n<li>Fixed an issue causing content blockers to not hide content in <code>about:blank</code> frames.  (134273470)  </li>\n<li>Fixed a slowdown in applying rulesets and dynamic rules in declarativeNetRequest.  (136394861) (FB15196130)  </li>\n<li>Fixed clicking the “Clear Storage…” button in Safari Extensions Settings.  (137533628)  </li>\n<li>Fixed <code>storage.onChanged</code> returning undefined as the <code>areaName</code>.  (138086765)  </li>\n<li>Fixed the <code>tabs</code> field missing from the result returned by <code>windows.create</code>.  (138529797)  </li>\n<li>Fixed es-419 support in Web Extensions.  (138857112)  </li>\n<li>Fixed the <code>webRequest.onBeforeRequest</code> event missing the <code>requestBody</code>.  (140338580) (FB15911234)  </li>\n<li>Fixed blurry extension icons.  (142070967) (FB16171862)  </li>\n<li>Fixed not picking the “zh” locale when “zh-Hant” is preferred.  (142602243) (FB16271745)  </li>\n<li>Fixed <code>webRequest</code> event listeners to honor <code>extraInfoSpec</code> for better performace.  (142907168)  </li>\n<li>Fixed web extension resources to be treated as UTF-8 by default.  (143079179)  </li>\n</ul>\n<h3><a name=\"web-inspector\"></a>Web Inspector</h3>\n<ul>\n<li>Fixed ensuring that all of the Desktop Sites on iPad site-specific hacks are disabled when the site-specific hacks setting is turned off in Web Inspector.  (50035167)  </li>\n<li>Fixed style rules to stay editable after being modified by CSSOM in JavaScript.  (124650808)  </li>\n<li>Fixed glitches when trying to edit a style from a stylesheet that has an <code>@import</code> statement.  (131756178)  </li>\n<li>Fixed error cases to match new source map specification.  (137934436)  </li>\n<li>Fixed the overview icon to be inverted dark mode in the Graphics tab.  (140602803)  </li>\n<li>Fixed recorded WebGL objects not getting highlighted correctly in the Graphics tab.  (140625113)  </li>\n</ul>\n<h3><a name=\"webassembly\"></a>WebAssembly</h3>\n<ul>\n<li>Fixed Wasm legacy <code>catch_all</code> instruction to correctly catch thrown JS primitives.  (135972897)  </li>\n</ul>\n<h3><a name=\"webdriver\"></a>WebDriver</h3>\n<ul>\n<li>Fixed a crash that could occur when simulating drag events with the right mouse button.  (137068514)  </li>\n</ul>\n<h3><a name=\"webrtc\"></a>WebRTC</h3>\n<ul>\n<li>Fixed <code>MediaSession.setMicrophoneActive(true)</code> prompting repeatedly if the microphone was muted by the user-agent once.  (135941062)  </li>\n<li>Fixed <code>setCameraActive</code> to not unmute microphone if the user-agent previously muted both camera and microphone.  (136221456)  </li>\n<li>Fixed AirPods unmuting to not unmute the camera if website muted the camera.  (137065964)  </li>\n<li>Fixed voice search to not re-prompt for camera or microphone permission after a page-initiated same origin navigation.  (138122655)  </li>\n</ul>\n<h3><a name=\"wkwebview\"></a>WKWebView</h3>\n<ul>\n<li>Fixed calling <code>WKWebView.evaluateJavaScript</code> in an async context when nothing is returned by JS.  (139618495) (FB15755273)  </li>\n</ul>\n<h2><a name=\"updating-to-safari-18-4\"></a>Updating to Safari 18.4</h2>\n<p>Safari 18.4 is available on <a href=\"https://www.apple.com/ios/ios-18/\">iOS 18.4</a>, <a href=\"https://www.apple.com/ipados/ipados-18/\">iPadOS 18.4</a>, <a href=\"https://www.apple.com/macos/\">macOS Sequoia 15.4</a>, macOS Sonoma, macOS Ventura, and in <a href=\"https://www.apple.com/visionos/\">visionOS 2.4</a>. To get the latest version of Safari on iPhone, iPad or Apple Vision Pro, go to Settings; General; Software Update, and tap to update.</p>\n<p>If you are running macOS Sonoma or macOS Ventura, you can update Safari by itself, without updating macOS. Go to ; System Settings; General; Software Update and click “More info…” under Updates Available.</p>\n<h2><a name=\"feedback\"></a>Feedback</h2>\n<p>We love hearing from you. To share your thoughts, find our web evangelist online: Jen Simmons on <a href=\"https://bsky.app/profile/jensimmons.bsky.social\">Bluesky</a> / <a href=\"https://front-end.social/@jensimmons\">Mastodon</a>, Saron Yitbarek on <a href=\"https://bsky.app/profile/saron.bsky.social\">BlueSky</a>, and Jon Davis on <a href=\"https://bsky.app/profile/jondavis.bsky.social\">Bluesky</a> / <a href=\"https://mastodon.social/@jondavis\">Mastodon</a>. You can follow WebKit <a href=\"https://www.linkedin.com/in/apple-webkit/\">on LinkedIn</a>. If you run into any issues, we welcome your <a href=\"https://feedbackassistant.apple.com/\">feedback</a> on Safari UI (learn more about <a href=\"https://developer.apple.com/bug-reporting/\">filing Feedback</a>), or your <a href=\"https://bugs.webkit.org/\">WebKit bug report</a> about web technologies or Web Inspector. If you run into a website that isn’t working as expected, please file a report at <a href=\"https://webcompat.com/\">webcompat.com</a>. Filing issues really does make a difference.</p>\n<p>Download the latest <a href=\"https://developer.apple.com/safari/technology-preview/\">Safari Technology Preview</a> on macOS to stay at the forefront of the web platform and to use the latest Web Inspector features.</p>\n<p>You can also find this information in the <a href=\"https://developer.apple.com/documentation/safari-release-notes/\">Safari 18.4 release notes</a>.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"2d8e1435e206fd88a3e62c2227d56c0e1c0dfb0f89b13c359da4fe453a4fd7cb","category":"Tech"}