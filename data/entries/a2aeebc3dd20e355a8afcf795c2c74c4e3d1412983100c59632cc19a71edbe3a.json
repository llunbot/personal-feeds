{"title":"Re-Creating The Pop-Out Hover Effect With Modern CSS (Part 2)","link":"https://smashingmagazine.com/2023/10/re-creating-pop-out-hover-effect-modern-css-part2/","date":1696507200000,"content":"<p><a href=\"https://www.smashingmagazine.com/2023/09/re-creating-pop-out-hover-effect-css-part1/\">The last time we met</a>, I demonstrated how newer CSS features — particularly trigonometric functions — can be leveraged to accomplish a “pop-out” hover effect. This is what we made together:</p>\n<p><img src=\"https://files.smashing.media/articles/re-creating-pop-out-hover-effect-modern-css-part2/1-starburst-shape-online-generator.png\" /></p>\n<p>Even the rotation is possible with <code>clip-path polygon()</code>:</p>\n<p><img src=\"https://files.smashing.media/articles/re-creating-pop-out-hover-effect-modern-css-part2/2-starburst-shape-radius.png\" /></p>\n<p>We can define the shape with three parameters:</p>\n<ul>\n<li>The number of spikes (we’ll call this <code>N</code>);</li>\n<li>The radius of the big circle, illustrated in green (we’ll call this <code>R</code>);</li>\n<li>The radius of the small circle illustrated in blue (this will be <code>R - d</code>).</li>\n</ul>\n<p>For the sake of simplicity, I will define <code>d</code> as a percentage of <code>R</code> — <code>R - (R * p)</code> — where <code>p</code> is a number in the range <code>[0 1]</code>. So, in the end, we are left with three variables, <code>N</code>, <code>R</code>, and <code>p</code>. </p>\n<p>If you look closely at the shape, you can see it is a series of triangular shapes that are cut out of a large circular shape. That is exactly how we are going to tackle this challenge. We can create triangles with <code>conic-gradient</code> and then cut them out of the circle with the <code>mask-composite</code> property. Getting a circle is pretty easy using <code>border-radius: 50%</code>.</p>\n<p><img src=\"https://files.smashing.media/articles/re-creating-pop-out-hover-effect-modern-css-part2/3-starburst-shape-series-triangular-shapes.png\" /></p>\n<p>The number of conic gradients is equal to the number of triangles in the pattern. Each gradient can use nearly the same configuration, where the difference between them is how they are rotated. That means the gradient’s code will look something like this:</p>\n<pre><code>conic-gradient(from -1*angle at {position}, #000 2*angle, #0000 0);</code></pre>\n\n<p>Thankfully, the position we calculated in the last article is similar enough to the point that we can rely on it here as well:</p>\n<pre><code>50% + (50% * (1 - p)) * cos(360deg * i/N)\n50% + (50% * (1 - p)) * sin(360deg * i/N)\n</code></pre>\n\n<p>Again, <code>N</code> is the number of triangles, and <code>p</code> controls the radius of the small circle. <code>R</code> is equal to <code>50%</code>, so the position can also be expressed like this:</p>\n<pre><code>R + (R * (1 - p)) * cos(360deg * i/N)\nR + (R * (1 - p)) * sin(360deg * i/N)\n</code></pre>\n\n<p>We need to resort to some geometry to determine the value of <code>angle</code>. I will skip the boring math for the sake of brevity, but please feel free to leave a comment if you’re interested in the formula, and I will be glad to give you more details.</p>\n<pre><code>angle = atan(sin(180deg/N)/(p - 1 + cos(180deg/N)))\n</code></pre>\n\n<p>Now, we need to loop through all of that as many times as there are triangles in the pattern. So, we will do what we did in the last article and <strong>switch from vanilla CSS to Sass so we can take advantage of Sass loops</strong>.</p>\n<p>The following snippet selects the one element in the HTML, <code>&lt;img&gt;</code>, and loops through the conic gradients for as many triangles we set (<code>$n: 9</code>). The output of that loop is saved as another variable, <code>$m</code>, that is applied to the CSS <code>mask</code>.</p>\n<div>\n<pre><code>$n: 9;  /* number of spikes */\n\nimg {<br />  --r: 160px; /* radius */\n  --p: 0.25;  /* percent */ \n  --angle: atan(sin(180deg/#{$n}) / (var(--p) - 1 + cos(180deg/#{$n})));\n\n  width: calc(2 * var(--r));\n  aspect-ratio: 1;\n  border-radius: 50%;\n  $m: ();\n  @for $i from 0 through ($n - 1) {\n    $m: append($m, \n    conic-gradient(\n     from calc(90deg + 360deg * #{$i/$n} - var(--angle)) at<br />       calc(50% + (50% * (1 - var(--p))) v cos(360deg * #{$i/$n}))\n       calc(50% + (50% * (1 - var(--p))) * sin(360deg * #{$i/$n})),\n      #000 calc(2*var(--angle)), #0000 0),\n      comma\n    );\n   }\n  mask: $m;\n}\n</code></pre>\n</div>\n\n<p>Here’s the result of all that work:</p>\n<p><img src=\"https://files.smashing.media/articles/re-creating-pop-out-hover-effect-modern-css-part2/4-decrease-ssize-starburst-shape-hover.png\" /></p>\n<p>Next, we add the scale effect to the image’s <code>:hover</code> state:</p>\n<pre><code>img {\n  --f: 1.2; /* the scale factor */\n  /* etc */\n}\nimg:hover {\n  scale: var(--f);\n}\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/re-creating-pop-out-hover-effect-modern-css-part2/5-scale-effect-image-hover-state.png\" /></p>\n<p>To make sure both starburst shapes have identical sizes (in the non-hover and hover states), <code>--i</code> needs a formula based on the scale factor:</p>\n<div>\n<pre><code>img {\n  --f: 1.2; /* the scale factor */\n  /* etc */\n}\nimg:hover {\n  --i: calc(var(--r) * (1 - var(--p)) * (var(--f) - 1) / var(--f));\n  scale: var(--f);\n}\n</code></pre>\n</div>\n\n<p>And, now, we are <em>finally</em> finished.</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/mdawrLa\">Fancy Pop Out hover effect!</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\nAnother Example\n<p>Let’s try another fancy effect where the avatar is hidden, and on hover, it slides from the bottom to “pop out” while, at the same time, we update the starburst shape.</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/VwqWRyj\">Fancy Pop Out Reveal hover effect!</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>Cool, right? We are still using only one <code>&lt;img&gt;</code> element in the markup, but this time, I introduced the <strong>sliding effect</strong>. This will be your homework! I will let you dissect the code to understand what I have changed. </p>\n<p><strong>Hint</strong>: <em>A <a href=\"https://css-tip.com/sliding-reveal-image/\">CSS Tip</a> where I am using the sliding effect.</em></p>\nWrapping Up\n<p>I hope you enjoy having a little extra practice on the techniques we used in <a href=\"https://www.smashingmagazine.com/2023/09/re-creating-pop-out-hover-effect-css-part1/\">the previous article</a> to create this “pop-out” hover effect. If it feels like I went a little faster this time around, it’s because I did. Rather than spending time explaining the same concepts and techniques, I was more concerned with demonstrating them in a slightly different context. So, we learned a few new ideas for working with gradients in CSS masks and background images!</p>\n<p>In spite of the complexity of everything we covered, there is nothing that requires you to understand everything at once or even right away. Take the time to go through this and the previous article step-by-step until you grasp the parts that are toughest for you to grok. In all honesty, you will probably never find yourself in a situation where you need to use all these tricks together. This was a pretty niche exercise. But it provides us with an excuse to individually inspect the techniques that can help you solve some complex problems in CSS without resorting to scripting or extra HTML.</p>\n<p>As for the math and the formulas, you don’t need to accurately understand them. The goal is to demonstrate that <strong>we can be as accurate as we want when it comes to calculating values and still develop something that is incredibly maintainable with only a few variables</strong>. Without trigonometric functions and <code>calc()</code> in CSS, we would be obliged to manually set all of the values once we need to update something, which would be incredibly tedious.</p>\n<p>I’ll close this little series with a last demo. Enjoy!</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/zYyWGPY\">Pop out hover effect featuring Kevin and Alvaro</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"a2aeebc3dd20e355a8afcf795c2c74c4e3d1412983100c59632cc19a71edbe3a","category":"Tech"}