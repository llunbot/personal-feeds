{"title":"Amazon CloudWatch Application Signals for automatic instrumentation of your applications (preview)","link":"https://aws.amazon.com/blogs/aws/amazon-cloudwatch-application-signals-for-automatic-instrumentation-of-your-applications-preview/","date":1701364881000,"content":"<p>One of the challenges with distributed systems is that they are made up of many interdependent services, which add a degree of complexity when you are trying to monitor their performance. Determining which services and APIs are experiencing high latencies or degraded availability requires manually putting together telemetry signals. This can result in time and effort establishing the root cause of any issues with the system due to the inconsistent experiences across metrics, traces, logs, real user monitoring, and synthetic monitoring.</p> \n<p>You want to provide your customers with continuously available and high-performing applications. At the same time, the monitoring that assures this must be efficient, cost-effective, and without undiﬀerentiated heavy lifting.</p> \n<p>Amazon CloudWatch Application Signals helps you automatically instrument applications based on best practices for application performance. There is no manual effort, no custom code, and no custom dashboards. You get a pre-built, standardized dashboard showing the most important metrics, such as volume of requests, availability, latency, and more, for the performance of your applications. In addition, you can define Service Level Objectives (SLOs) on your applications to monitor specific operations that matter most to your business. An example of an SLO could be to set a goal that a webpage should render within 2000 ms 99.9 percent of the time in a rolling 28-day interval.</p> \n<p>Application Signals automatically correlates telemetry across metrics, traces, logs, real user monitoring, and synthetic monitoring to speed up troubleshooting and reduce application disruption. By providing an integrated experience for analyzing performance in the context of your applications, Application Signals gives you improved productivity with a focus on the applications that support your most critical business functions.</p> \n<p>My personal favorite is the collaboration between teams that’s made possible by Application Signals. I started this post by mentioning that distributed systems are made up of many interdependent services. On the Service Map, which we will look at later in this post, if you, as a service owner, identify an issue that’s caused by another service, you can send a link to the owner of the other service to efficiently collaborate on the triage tasks.</p> \n<p><span><strong>Getting started with Application Signals<br /> </strong></span>You can easily collect application and container telemetry when creating new Amazon EKS clusters in the Amazon EKS console by enabling the new Amazon CloudWatch Observability EKS add-on. Another option is to enable for existing Amazon EKS Clusters or other compute types directly in the Amazon CloudWatch console.<span><strong><br /> </strong></span></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/17/servicemap1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/17/servicemap1-1024x385.png\" alt=\"Create service map\" width=\"1024\" height=\"385\" /></a></p> \n<p>After enabling <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Application-Monitoring-Sections.html\">Application Signals via the Amazon EKS add-on or Custom option for other compute types</a>, Application Signals automatically discovers services and generates a standard set of application metrics such as volume of requests and latency spikes or availability drops for APIs and dependencies, to name a few.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/17/Specifyplatform.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/17/Specifyplatform-1024x328.png\" alt=\"Specify platform\" width=\"1024\" height=\"328\" /></a></p> \n<p>All of the services discovered and their golden metrics (volume of requests, latency, faults and errors) are then automatically displayed on the <strong>Services</strong> page and the <strong>Service Map</strong>. The <strong>Service Map</strong> gives you a visual deep dive to evaluate the health of a service, its operations, dependencies, and all the call paths between an operation and a dependency.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/topology-map-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/topology-map-1-1024x505.png\" alt=\"Auto-generated map\" width=\"1024\" height=\"505\" /></a></p> \n<p>The list of services that are enabled in Application Signals will also show in the services dashboard, along with operational metrics across all of your services and dependencies to easily spot anomalies. The <strong>Application</strong> column is auto-populated if the EKS cluster belongs to an application that’s tagged in <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/arguide/intro-app-registry.html\">AppRegistry</a>. The <strong>Hosted In</strong> column automatically detects which EKS pod, cluster, or namespace combination the service requests are running in, and you can select one to go directly to Container Insights for detailed container metrics such as CPU or memory utilization, to name a few.</p> \n<p><span><strong><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/updated.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/updated-1024x507.png\" width=\"1024\" height=\"507\" /></a></strong></span></p> \n<p><span><strong>Team collaboration with Application Signals</strong></span><br /> Now, to expand on the team collaboration that I mentioned at the beginning of this post. Let’s say you consult the services dashboard to do sanity checks and you notice two SLO issues for one of your services named <code><span>pet-clinic-frontend</span></code>. Your company maintains a set of SLOs, and this is the view that you use to understand how the applications are performing against the objectives. For the services that are tagged in AppRegistry all teams have a central view of the definition and ownership of the application. Further navigation to the service map gives you even more details on the health of this service.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/29/Screenshot-2023-11-28-at-2.58.26-PM.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/29/Screenshot-2023-11-28-at-2.58.26-PM-1024x594.png\" width=\"1024\" height=\"594\" /></a></p> \n<p>At this point you make the decision to send the link to the<code><span>pet-clinic-frontend</span></code>service to Sarah whose details you found in the AppRegistry. Sarah is the person on-call for this service. The link allows you to efficiently collaborate with Sarah because it’s been curated to land directly on the triage view that is contextualized based on your discovery of the issue. Sarah notices that the <code><span>POST /api/customer/owners</span></code> latency has increased to 2k ms for a number of requests and as the service owner, dives deep to arrive at the root cause.</p> \n<p>Clicking into the latency graph returns a correlated list of traces that correspond directly to the operation, metric, and moment in time, which helps Sarah to find the exact traces that may have led to the increase in latency.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/29/Screenshot-2023-11-28-at-3.02.25-PM.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/29/Screenshot-2023-11-28-at-3.02.25-PM-1024x516.png\" width=\"1024\" height=\"516\" /></a></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/29/Screenshot-2023-11-28-at-12.49.09-PM.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/29/Screenshot-2023-11-28-at-12.49.09-PM-1024x506.png\" width=\"1024\" height=\"506\" /></a></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/29/Screenshot-2023-11-28-at-12.49.24-PM.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/29/Screenshot-2023-11-28-at-12.49.24-PM-1024x490.png\" width=\"1024\" height=\"490\" /></a>Sarah uses <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries.html\">Amazon CloudWatch Synthetics</a> and <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM.html\">Amazon CloudWatch RUM</a> and has enabled the X-Ray active tracing integration to automatically see the list of relevant canaries and pages correlated to the service. This integrated view now helps Sarah gain multiple perspectives in the performance of the application and quickly troubleshoot anomalies in a single view.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/29/Screenshot-2023-11-28-at-12.53.55-PM.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/29/Screenshot-2023-11-28-at-12.53.55-PM-1024x512.png\" width=\"1024\" height=\"512\" /></a></p> \n<p><span><strong>Available now</strong></span><br /> Amazon CloudWatch Application Signals is available in preview and you can start using it today in the following <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\">AWS Regions</a>: US East (N. Virginia), US East (Ohio), US West (Oregon), Europe (Ireland), Asia Pacific (Sydney), and Asia Pacific (Tokyo).</p> \n<p>To learn more, visit the <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Application-Monitoring-Sections.html\">Amazon CloudWatch user guide</a>. You can submit your questions to <a href=\"https://repost.aws/tags/articles/TArz36ydKETWeIc1aO7QuRFw\">AWS re:Post for Amazon CloudWatch</a>, or through your usual AWS Support contacts.</p> \n<p>– <a href=\"https://www.linkedin.com/in/veliswa-boya/\">Veliswa</a></p>","author":"Veliswa Boya","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"b5a59a55c3a6cd5f0c98030686deedfa59a8a1e9827f4820630e3b605ce2633c","category":"Tech"}