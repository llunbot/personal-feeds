{"title":"Using Terraform dynamic provider credentials in your AWS landing zones","link":"https://www.hashicorp.com/blog/using-terraform-dynamic-provider-credentials-in-your-aws-landing-zones","date":1690560000000,"content":"<p>We often hear from customers about the steps they took to start a new project or migration in Amazon Web Services (AWS). <a href=\"https://www.hashicorp.com/partners/terraform-landing-zones\">Landing zones</a> are a popular pattern that many customers use. For AWS environments, that often means using <a href=\"https://docs.aws.amazon.com/controltower/latest/userguide/aft-overview.html\">AWS Control Tower Account Factory for Terraform (AFT)</a>, which sets up a Terraform Cloud workspace and configures the AWS credentials.</p>\n\n<p><a href=\"https://aws.amazon.com/controltower\">AWS Control Tower</a> provides an easy way to set up and govern secure, multi-account AWS environments. Using AWS Control Tower, you can set up a new AWS account with a baseline security features such as audit logging and controls/guardrails. AFT extends AWS Control Tower functionality using a Terraform pipeline to provision and customize AWS Control Tower managed accounts. Using AFT, you can apply account-specific customizations or global customizations to all accounts.</p>\n\n<p>Terraform Cloud <a href=\"https://www.hashicorp.com/blog/dynamic-provider-credentials-now-ga-for-terraform-cloud\">dynamic provider credentials</a> are temporary credentials that are automatically generated for each run by <a href=\"https://www.vaultproject.io/\">HashiCorp Vault</a> or the cloud vendor you’re using. Terraform Cloud kicks off that process by using an<a href=\"https://openid.net/connect/\"> OpenID Connect protocol</a> (OIDC) token. This process allows Terraform Cloud to use more secure, short-lived credentials to authenticate with AWS, and assign granular roles for each <em>plan</em> and <em>apply</em>. </p>\n\n<p>Using customizations via AFT, this post demonstrates how to set up a new Terraform Cloud workspace with dynamic provider credentials pre-configured. This new workspace will then accompany every new AWS account provisioned via AFT. </p>\n\n<h2>Architecture overview</h2>\n\n<p>It’s best to use AFT customization only for guardrails and account governance tools, such as shared VPCs, identity and access management (IAM) roles for break-glass, and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html\">Amazon S3 Block Public Access</a>. You should also provide application-level configuration in a separate Terraform Cloud organization. Application-level configuration can be the infrastructure that runs the application (Amazon EC2, ECS, or EKS) or the data store (Amazon S3 bucket, RDS database, etc.). To satisfy both of these recommendations, this tutorial uses two separate Terraform Cloud organizations: </p>\n\n<p><strong>The Infrastructure organization:</strong> Used exclusively by the infrastructure team to deploy guardrails that enforce security, compliance, governance, and best practices, such as service control policies (SCPs), IAM policies, approved Amazon machine images (AMIs), encryption, logging, and tagging standards.</p>\n\n<p><strong>The Application organization:</strong> Used by application teams to deploy application resources, such as EC2 instances, RDS databases, Amazon Load Balancers (ALBs), and other application-specific resources.</p>\n<img src=\"https://www.datocms-assets.com/2885/1690573071-account_factory-1.png\" alt=\"Infrastructure\" /><p>The diagram below illustrates how to use AFT to build and configure both Terraform Cloud organizations:</p>\n<img src=\"https://www.datocms-assets.com/2885/1690573094-account_factory_steps-1.png\" alt=\"How\" /><ol>\n<li>In the Infrastructure organization, AFT creates Terraform workspaces for account and global customizations. The account customization workspace is meant for account-specific guardrails and other account-level governance. The global customization workspace is meant for generic customizations that apply to all accounts.</li>\n<li>Using AFT’s account customization, create an IAM role, IAM permissions, and a Terraform Cloud OIDC identity provider in the target AWS account.</li>\n<li>Use the same AFT account customization to authenticate to the Application organization and create an Application workspace. </li>\n<li>AFT account customization also configures the Application workspace with the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials/aws-configuration#required-environment-variables\">required environment variables</a> to enable dynamic provider credentials.</li>\n<li>With dynamic provider credentials configured on the Application workspace, the workspace users can run the Terraform workflow (plan/apply) without having to set up the AWS credentials. Terraform Cloud will automatically assume a role that uses temporary credentials to access the target AWS account.</li>\n<li>The Application workspace user can connect the Application workspace with their VCS of choice (GitHub, GitLab, BitBucket, etc.) to enable a GitOps workflow.</li>\n</ol>\n\n<p>Using this architecture, every new AWS account provisioned will include the guardrails and governance you configure in AFT and a dedicated Terraform Cloud Application workspace that automatically generates dynamic provider credentials for each piece of AWS infrastructure that you provision.</p>\n\n<h2>Prerequisites</h2>\n\n<p>Before you can adopt this architecture, there are several prerequisites that you must complete: </p>\n\n<ul>\n<li>AWS Control Tower enabled and AFT deployed with Terraform Cloud backend. For more information, refer to the <a href=\"https://github.com/aws-ia/terraform-aws-control_tower_account_factory/blob/main/examples/githubenterprise%2Btf_cloud/main.tf\">module example</a> and the <a href=\"https://developer.hashicorp.com/terraform/tutorials/aws/aws-control-tower-aft\">tutorial</a>.</li>\n<li>Two Terraform cloud organizations, labeled “Infrastructure” and “Application”. You can use different organization names, but they must be separate.</li>\n<li>A Terraform Cloud user token with permissions to create workspaces in the Application organization. </li>\n</ul>\n\n<h2>Using the Terraform Cloud/Enterprise provider in AFT</h2>\n\n<p>To create a new Application workspace in the Application organization, AFT account customization uses the <a href=\"https://registry.terraform.io/providers/hashicorp/tfe/latest/docs\">Terraform Cloud/Enterprise (TFE) provider</a>. This provider accepts a <code>token</code> argument in the provider configuration as shown below:</p>\n\n<pre><code>provider \"tfe\" {\n hostname = \"app.terraform.io\"\n token    = var.token\n}\n</code></pre>\n\n<p>To securely retrieve this token during the <em>plan</em> and <em>apply</em> stages, we use the data source <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/secretsmanager_secret_version\"><code>aws_secretsmanager_secret_version</code></a> from the AWS provider and store the Terraform Cloud token in an <a href=\"https://aws.amazon.com/secrets-manager/\">AWS Secrets Manager</a> secret. (Note: The secret must be stored with the name “/tfc/token”.) Optionally, you can also use Vault. Here is an example of the provider configuration with a token stored in AWS Secrets Manager: </p>\n<pre><code>provider \"tfe\" {\n hostname = \"app.terraform.io\"\n token    = data.aws_secretsmanager_secret_version.tfe_token_secret.secret_string\n}\n\n\ndata \"aws_secretsmanager_secret_version\" \"tfe_token_secret\" {\n secret_id = \"/tfc/token\"\n}</code></pre><p>To implement this in AFT account customization, we create a new customization name called SANDBOX with the following folder structure:</p>\n\n<pre><code>├── aft-account-customizations\n│   └── SANDBOX\n│     ├── api_helpers\n│     │   ├── post-api-helpers.sh\n│     │   ├── pre-api-helpers.sh\n│     │   └── python\n│     │     └── requirements.txt\n│     └── terraform\n│         ├── aft-providers.jinja\n│         ├── backend.jinja\n│         └── tfe.tf\n</code></pre>\n\n<p>We use the <code>tfe_workspace</code> resource to set up the Application workspace. A snippet of the <code>tfe.tf</code> file is shown below. Each application workspace is configured with a unique name using the format: <code>{aws_account_id}-app-workspace</code>. </p>\n\n<p>To avoid hardcoding the Application workspace organization name, we use the data source <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ssm_parameter\"><code>aws_ssm_parameter</code></a>. The value for this SSM parameter is populated during account requests using custom fields. <a href=\"https://docs.aws.amazon.com/controltower/latest/userguide/aft-provision-account.html#w32aac32c31c11b5\">AFT custom fields</a> are used to capture key-value metadata that deploy as SSM parameters in the vended account under the path “/aft/account-request/custom-fields/”:</p>\n<pre><code># Configure the Terraform Cloud / Enterprise provider\nprovider \"tfe\" {\n hostname = \"app.terraform.io\"\n token    = data.aws_secretsmanager_secret_version.tfe_token_secret.secret_string\n}\n\n# Retrieve the Terraform Cloud token from AWS Secrets Manager secret\ndata \"aws_secretsmanager_secret_version\" \"tfe_token_secret\" {\n secret_id = \"/tfc/token\"\n provider  = aws.aft-mgt\n}\n\n# Retrieve the application organization name from AWS Parameter Store\ndata \"aws_ssm_parameter\" \"app_org\" {\n name = \"/aft/account-request/custom-fields/app_org\"\n}\n\n# Verify the application organization data source\ndata \"tfe_organization\" \"app_org\" {\n name = data.aws_ssm_parameter.app_org.value\n}\n\n# Set the application workspace name\ndata \"aws_caller_identity\" \"target_account_id\" {}\n\nlocals {\n app_workspace_name = \"${data.aws_caller_identity.target_account_id.account_id}-app-workspace\"\n}\n\n# Create Application workspace in the Application org\nresource \"tfe_workspace\" \"app_workspace\" {\n name         = local.app_workspace_name\n organization = data.tfe_organization.app_org.name\n tag_names    = [\"app\", \"${data.aws_caller_identity.target_account_id.account_id}\"]\n}</code></pre><p><strong>Note</strong> from the example above: The data source <code>aws_secretsmanager_secret_version</code> uses provider alias <code>aws.aft-mgt</code>. This is intentional, because the Terraform Cloud token is stored as an AWS Secrets Manager secret in the AFT management account. This means you need to modify the AFT account customization’s  <a href=\"https://github.com/aws-ia/terraform-aws-control_tower_account_factory/blob/main/sources/aft-customizations-repos/aft-account-customizations/ACCOUNT_TEMPLATE/terraform/aft-providers.jinja\"><code>aft-providers.jinja</code></a> to include the new alias as shown here:</p>\n<pre><code>provider \"aws\" {\n region = \"{{ provider_region }}\"\n assume_role {\n   role_arn = \"{{ target_admin_role_arn }}\"\n }\n default_tags {\n   tags = {\n     managed_by = \"AFT\"\n   }\n }\n}\n\n\nprovider \"aws\" {\n region = \"{{ provider_region }}\"\n alias  = \"aft-mgt\"\n assume_role {\n   role_arn = \"{{ aft_admin_role_arn }}\"\n }\n default_tags {\n   tags = {\n     managed_by = \"AFT\"\n   }\n }\n}</code></pre><p>So far, you have configured the AFT account customizations to automatically configure the Application workspace. Next, set up the dynamic provider credentials for this workspace.</p>\n\n<h2>Configure dynamic provider credentials</h2>\n\n<p>We briefly touched on dynamic provider credentials earlier, and if you need to learn more, check out this tutorial: <a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/dynamic-credentials\">Authenticate Providers with Dynamic Credentials</a>. </p>\n\n<p>To enable dynamic provider credentials in AWS, configure Terraform Cloud as an <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.html\">IAM OIDC identity provider (IdP)</a> and add an <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_oidc.html\">IAM role with a trust policy to the Terraform Cloud as an IdP</a>. To implement this in AFT account customizations, add a new <code>iam.tf</code> file to the SANDBOX customization:</p>\n\n<pre><code>├── aft-account-customizations\n│   └── SANDBOX\n│     ├── api_helpers\n│     │   ├── post-api-helpers.sh\n│     │   ├── pre-api-helpers.sh\n│     │   └── python\n│     │     └── requirements.txt\n│     └── terraform\n│         ├── aft-providers.jinja\n│         ├── backend.jinja\n│         ├── iam.tf &lt;- configure OIDC and IAM role\n│         └── tfe.tf\n</code></pre>\n\n<p>Read our <a href=\"https://github.com/hashicorp/terraform-dynamic-credentials-setup-examples/tree/main/aws\">terraform-dynamic-credentials-setup-examples</a> repository as an example. Here is the snippet for OIDC IdP setup: </p>\n<pre><code># Data source used to grab the TLS certificate for Terraform Cloud.\ndata \"tls_certificate\" \"tfc_certificate\" {\n url = \"https://app.terraform.io\"\n}\n\n# Creates an OIDC provider which is restricted to\nresource \"aws_iam_openid_connect_provider\" \"tfc_provider\" {\n url             = data.tls_certificate.tfc_certificate.url\n client_id_list  = [\"aws.workload.identity\"]\n thumbprint_list = [data.tls_certificate.tfc_certificate.certificates[0].sha1_fingerprint]\n}\n\n# Creates a role which can only be used by the specified Terraform cloud workspace.\nresource \"aws_iam_role\" \"tfc_role\" {\n name = \"tfc-role\"\n assume_role_policy = &lt;</code></pre><p>Optionally, you can harden this setup by <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials/aws-configuration#configure-a-role-and-trust-policy\">modifying the subject claim condition</a> in the <code>assume_role_policy</code>. There are a number of other ways you can fine-tune your guardrails for this setup, such as limiting permissions to particular projects or just <code>terraform plan</code> or <code>terraform apply</code>. But note that the IAM role should also have enough privileges to be able to deploy the infrastructure in AWS, otherwise the <em>plan</em> or <em>apply</em> will fail.</p>\n\n<p>One benefit of this setup is that you don't need static secret keys. All you need is the IAM role. You can also configure the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials/aws-configuration#optional-environment-variables\">optional environment variable</a> to use different IAM roles for <em>plan</em> and <em>apply</em>.</p>\n<img src=\"https://www.datocms-assets.com/2885/1690556968-screenshot-2023-07-28-at-11-08-36-am.png\" alt=\"Workspace\" /><p>Next, you’re going to automate this as part of AFT account customization. Use the <code>tfe_variable</code> to inject the environment variables into the Application workspace as shown here:</p>\n<pre><code># The following variables must be set to allow runs to authenticate to AWS.\nresource \"tfe_variable\" \"enable_aws_provider_auth\" {\n workspace_id = tfe_workspace.app_workspace.id\n\n key      = \"TFC_AWS_PROVIDER_AUTH\"\n value    = \"true\"\n category = \"env\"\n\n description = \"Enable the Workload Identity integration for AWS.\"\n}\n\nresource \"tfe_variable\" \"tfc_aws_role_arn\" {\n workspace_id = tfe_workspace.app_workspace.id\n\n key      = \"TFC_AWS_RUN_ROLE_ARN\"\n value    = aws_iam_role.tfc_role.arn\n category = \"env\"\n\n description = \"The AWS role arn runs will use to authenticate.\"\n}</code></pre><h2>Using the customization</h2>\n\n<p>To use the AFT account customizations, specify the customization name SANDBOX when calling the <code>aft-account-request</code> module. Specify the target Application organization in a custom field with the attribute <code>app_org</code>. AFT applies the Account customization on new account requests and subsequent runs of the <a href=\"https://aws.amazon.com/codepipeline/\">AWS CodePipeline</a>. </p>\n\n<p>To run this on an existing account, update the relevant <code>aft-account-request</code> module with the new customization name to re-trigger the CodePipeline. When finished, AFT creates a new Application workspace with the format <code>{aws_account_id}-app-workspace</code> in the Application organization. As mentioned earlier, the lifecycle of this Application workspace should be managed outside of AFT, for example, by connecting the Application workspace with a Git repository to enable a <a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud-get-started/cloud-vcs-change\">VCS-driven workflow</a>: </p>\n<pre><code>module \"sandbox\" {\n source = \"./modules/aft-account-request\"\n\n control_tower_parameters = {\n   AccountEmail              = \"\"\n   AccountName               = \"sandbox-aft\"\n   ManagedOrganizationalUnit = \"Learn AFT\"\n   SSOUserEmail              = \"\"\n   SSOUserFirstName          = \"Sandbox\"\n   SSOUserLastName           = \"AFT\"\n }\n\n account_tags = {\n   \"Learn Tutorial\" = \"AFT\"\n }\n\n change_management_parameters = {\n   change_requested_by = \"HashiCorp Learn\"\n   change_reason       = \"Learn AWS Control Tower Account Factory for Terraform\"\n }\n\n custom_fields = {\n   app_org = \"application\"\n }\n\n account_customizations_name = \"SANDBOX\"\n}</code></pre><h2>An important consideration</h2>\n\n<p>When using AFT account customizations to create a new workspace, the lifecycle of the workspace follows the lifecycle of the account customizations name. For example, when switching from SANDBOX to another customization name, AFT may delete the workspace because it was not declared as a resource in the other customizations. Consider using the <a href=\"https://developer.hashicorp.com/terraform/language/meta-arguments/lifecycle\">lifecycle meta argument</a> <code>prevent_destroy</code> as a safety mechanism.</p>\n\n<h2>Next steps</h2>\n\n<p>By leveraging AWS Control Tower Account Factory for Terraform (AFT) and Terraform Cloud dynamic credentials using the solution described in this blog post, organizations can automate the process of setting up new AWS environments at scale. Automating this process makes it easier to securely deploy AWS application resources using dynamic, short-lived credentials.  </p>\n\n<p>You can find the configuration from the example earlier in this <a href=\"https://github.com/aws-samples/aft-workshop-sample/tree/aft-tfc\">GitHub repository</a>. There are many other opportunities to leverage AFT to customize the Application workspace. For example, you can group the workspace to a Terraform Cloud project, configure team access, connect the Application workspace to a VCS, apply variable sets, use aSentinel policy set, configure run tasks, and much more. We have provided additional samples in the repository and we encourage you to test and come up with new ideas.</p>\n","author":"Gautam Baghel","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"57349da7f52460bc13cada58b825ab269cf396eb29f4d5742bb7befdc2230484","category":"Tech"}