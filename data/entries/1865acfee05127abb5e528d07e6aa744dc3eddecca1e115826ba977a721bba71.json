{"title":"Building An API With Gatsby Functions","link":"https://smashingmagazine.com/2021/10/building-api-gatsby-functions/","date":1634652000000,"content":"<p>You‚Äôve probably heard about Serverless Functions, but if you haven‚Äôt, Serverless Functions provide functionality typically associated with server-side technologies that can be implemented alongside front-end code without getting caught up in server-side infrastructures.</p>\n<p>With server-side and client-side code coexisting in the same code base, front-end developers like myself can extend the reach of what‚Äôs possible using the tools they already know and love. </p>\nLimitations\n<p>Coexistence is great but there are at least two scenarios I‚Äôve encountered where using Serverless Functions in this way weren‚Äôt quite the right fit for the task at hand. They are as follows:</p>\n<ol>\n<li>The front end couldn‚Äôt support Serverless Functions.</li>\n<li>The same functionality was required by more than one front end.</li>\n</ol>\n<p>To help provide some context here‚Äôs one example of both points 1 and 2 named above. I maintain an Open-source project called <a href=\"https://www.mdx-embed.com/\">MDX Embed</a>, you‚Äôll see from the docs site that it‚Äôs not a Gatsby website. It‚Äôs been built using <a href=\"https://storybook.js.org/\">Storybook</a> and Storybook on its own provides no Serverless Function capabilities. I wanted to implement ‚ÄúPay what you want‚Äù contributions to help fund this project and I wanted to use Stripe to enable secure payments but without a secure ‚Äúbackend‚Äù This would not have been possible. </p>\n<p>By abstracting this functionality away into an API built with Gatsby Functions I was able to achieve what I wanted with MDX Embed and also re-use the same functionality and enable ‚ÄúPay what you want‚Äù functionality for <a href=\"https://paulie.dev/\">my blog</a>.</p>\n<p>You can read more about how I did that here: <a href=\"https://www.smashingmagazine.com/2021/09/monetize-open-source-software-gatsby-functions-stripe/\">Monetize Open-Source Software With Gatsby Functions And Stripe</a>.</p>\n<p>It‚Äôs at this point that using Gatsby Functions can act as a kind of <strong>Back end for front end</strong> or BFF üòä and developing in this way is more akin to developing an API (<em>Application Programming Interface</em>).</p>\n<p>APIs are used by front-end code to handle things like, logins, real-time data fetching, or secure tasks that aren‚Äôt suitably handled by the browser alone. In this tutorial, I‚Äôll explain how to build an API using Gatsby Functions and deploy it to Gatsby Cloud.</p>\nPreflight Checks\n<p>Gatsby Functions work when deployed to Gatsby Cloud or Netlify, and in this tutorial, I‚Äôll be explaining how to deploy to Gatsby Cloud so you‚Äôll need to <a href=\"https://www.gatsbyjs.com/dashboard/signup\">sign up</a> and create a free account first.</p>\n<p>You‚Äôre also going to need either a GitHub, GitLab or BitBucket account, this is how Gatsby Cloud reads your code and then builds your ‚Äúsite‚Äù, or in this case, API. </p>\n<p>For the purposes of this tutorial, I‚Äôll be using GitHub. If you‚Äôd prefer to jump ahead, the <a href=\"https://github.com/PaulieScanlon/smashing-magazine-gatsby-functions-api\">finished demo API code can be found on my GitHub</a>.</p>\nGetting Started\n<p>Create a new dir somewhere on your local drive and run the following in your terminal. This will set up a default <code>package.json</code>.</p>\n<pre><code>npm init -y</code></pre>\n\nDependencies\n<p>Type the following into your terminal to install the required dependencies.</p>\n<pre><code>npm install gatsby react react-dom</code></pre>\n\nPages\n<p>It‚Äôs likely your API won‚Äôt have any ‚Äúpages‚Äù but to avoid seeing Gatsby‚Äôs default <em>missing page warning</em> when you visit the root URL in the browser, add the following to both <code>src/pages/index.js</code> and <code>src/pages/404.js</code>.</p>\n<pre><code>//src/pages/index.js &amp; src/pages/404.js\n\nexport default () =&gt; null;</code></pre>\n\nAPI\n<p>Add the following to <code>src/api/my-first-function.js</code>.</p>\n<p>I‚Äôll explain a little later what <code>'Access-Control-Allow-Origin', '*'</code> means, but in short, it makes sure that your APIs from other origins aren‚Äôt blocked by <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>.</p>\n<pre><code>//src/api/my-first-function.js\n\nexport default function handler(req, res) {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n\n  res.status(200).json({ message: 'A ok!' });\n}</code></pre>\n\nScripts\n<p>Add the following to <code>package.json</code>.</p>\n<pre><code>//package.json\n\n...\n  \"scripts\": {\n    \"develop\": \"gatsby develop\",\n    \"build\": \"gatsby build\"\n  },\n...</code></pre>\n\nStart The Gatsby Development Server\n<p>To spin up the Gatsby development server run the following in your terminal.</p>\n<pre><code>npm run develop</code></pre>\n\n\n\nMake A Request From The Browser\n<p>With the Gatsby‚Äôs development server running you can visit <a href=\"http://localhost:8000/api/my-first-function\">http://localhost:8000/api/my-first-function</a>, and since this is a simple <code>GET</code> request you should see the following in your browser.</p>\n<pre><code>{\n  \"message\": \"A ok!\"\n}</code></pre>\n\nCongratulations üéâ\n<p>You‚Äôve just developed an API using Gatsby Functions.</p>\nDeploy\n<p>If you are seeing the above response in your browser it‚Äôs safe to assume your function is working correctly locally, in the following steps I‚Äôll explain how to deploy your API to Gatsby Cloud and access it using an <code>HTTP</code> request from CodeSandbox.</p>\nPush Code To Git\n<p>Before attempting to deploy to Gatsby Cloud you‚Äôll need to have pushed your code to your Git provider of choice. </p>\nGatsby Cloud\n<p>Log into your Gatsby Cloud account and look for the big purple button that says ‚ÄúAdd site +‚Äù.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2e18d48c-1680-459e-bb3f-b13867984872/10-building-api-gatsby-functions.jpg\" /></p>\n<p>In the next step, you‚Äôll be asked to either Import from a Git repository or Start from a Template, select <code>Import from Git Repository</code> and hit <code>next</code>.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3c6aebdc-0d32-46c9-84e4-28ce2f7b7b96/8-building-api-gatsby-functions.jpg\" /></p>\n<p>As mentioned above Gatsby Cloud can connect to either GitHub, GitLab or Bitbucket. Select your preferred Git provider and hit <code>next</code>.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/08fb0157-0b66-4b49-9de6-caf286b726e1/4-building-api-gatsby-functions.jpg\" /></p>\n<p>With your Git provider connected, you can search for your repository, and give your site a name.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7deadfe6-20a6-4b13-9575-6b63c1abf42b/6-building-api-gatsby-functions.jpg\" /></p>\n<p>Once you‚Äôve selected your repository and named your site hit <code>next</code>.</p>\n<p>You can skip the ‚ÄúIntegrations‚Äù and ‚ÄúSetup‚Äù as we won‚Äôt be needing these.</p>\n<p>If all has gone to plan your should be seeing something similar to the below screenshot.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa8b45d-9ca5-43d2-8cb5-a76795d57f64/11-building-api-gatsby-functions.jpg\" /></p>\n<p>You‚Äôll see near the top on the left-hand side of the screen a URL that ends with <code>gatsbyjs.io</code>, this will be the URL for your API and any functions you create can be accessed by adding <code>/api/name-of-function</code> to the end of this URL. </p>\n<p>E.g, the complete deployed version of <code>my-first-function.js</code> for my demo API is as follows:</p>\n<p><a href=\"https://smashingapi.gatsbyjs.io/api/my-first-function\"><strong>Demo API: My First Function</strong></a>.</p>\nTesting Your API\n<p>Visiting the URL of your API is one thing but it‚Äôs not really how APIs are typically used. Ideally to test your API you need to make a request to the function from a completely unrelated origin. </p>\n<p>It‚Äôs here where <code>res.setHeader('Access-Control-Allow-Origin', '*');</code> comes to the rescue. Whilst it‚Äôs not always desirable to allow any domain (website) to access your functions, for the most part, public functions are just that, public. Setting the Access Control header to a value of <code>*</code> means any domain can access your function, without this, any domain other than the domain the API is hosted on will be blocked by CORS.  </p>\n<p>Here‚Äôs a CodeSandbox that uses <code>my-first-function</code> from my demo API. You can fork this and change the Axios request URL to test your function.</p>\n<p><strong>CodeSandbox: My First Function</strong></p>\n\n\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d96a7007-22e4-4291-9130-78985fad0a65/7-building-api-gatsby-functions.png\" /></p>\nGetting Fancier\n<p>Sending a response from your API that says <code>message: \"A ok!\"</code> isn‚Äôt exactly exciting so in the next bit I‚Äôll show you how to query the <a href=\"https://docs.github.com/en/rest\">GitHub REST API</a> and make a personal profile card to display on your own site using the API you just created, and it‚Äôll look a little like this.</p>\n<p><strong>CodeSandbox: Demo profile card</strong></p>\n\n\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9a70a193-0875-4a12-b2a7-699078f2a73f/5-building-api-gatsby-functions.png\" /></p>\nDependencies\n<p>To use the GitHub REST API you‚Äôll need to install <a href=\"https://www.npmjs.com/package/@octokit/rest\">@octokit/rest</a> package.</p>\n<pre><code>npm install @octokit/rest</code></pre>\n\n\n\nGet GitHub User Raw\n<p>Add the following to <code>src/api/get-github-user-raw.js</code>.</p>\n<pre><code>// src/api/get-github-user-raw.js\n\nimport { Octokit } from '@octokit/rest';\n\nconst octokit = new Octokit({\n  auth: process.env.OCTOKIT_PERSONAL_ACCESS_TOKEN\n});\n\nexport default async function handler(req, res) {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n\n  try {\n    const { data } = await octokit.request(`GET /users/{username}`, {\n      username: 'PaulieScanlon'\n    });\n\n    res.status(200).json({ message: 'A ok!', user: data });\n  } catch (error) {\n    res.status(500).json({ message: 'Error!' });\n  }\n}</code></pre>\n\nAccess Token\n<p>To communicate with the GitHub REST API you‚Äôll need an access token. You can get this by following the steps in this guide from GitHub: <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">Creating A Personal Access Token</a>.</p>\n<code>.env</code> Variables\n<p>To keep your access token secure add the following to <code>.env.development</code> and <code>.env.production</code>.</p>\n<pre><code>OCTOKIT_PERSONAL_ACCESS_TOKEN=123YourAccessTokenABC</code></pre>\n\n<p>You can read more about Gatsby environment variables in this guide from Gatsby: <a href=\"https://www.gatsbyjs.com/docs/how-to/local-development/environment-variables/\">Environment Variables</a>.</p>\nStart Development Server\n<p>As you did before start the Gatsby development server by typing the following in your terminal.</p>\n<pre><code>npm run develop</code></pre>\n\nMake A Request From The Browser\n<p>With the Gatsby development server running you can visit <a href=\"http://localhost:8000/api/get-github-user-raw\">http://localhost:8000/api/get-github-user-raw</a>, and since this too is a simple <code>GET</code> request you should see the following in your browser. (<em>I‚Äôve removed part of the response for brevity.</em>)</p>\n<pre><code>{\n  \"message\": \"A ok!\",\n  \"user\": {\n    \"login\": \"PaulieScanlon\",\n    \"id\": 1465706,\n    \"node_id\": \"MDQ6VXNlcjE0NjU3MDY=\",\n    \"avatar_url\": \"https://avatars.githubusercontent.com/u/1465706?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/PaulieScanlon\",\n    \"type\": \"User\",\n    \"site_admin\": false,\n    \"name\": \"Paul Scanlon\",\n    \"company\": \"Paulie Scanlon Ltd.\",\n    \"blog\": \"https://www.paulie.dev\",\n    \"location\": \"Worthing\",\n    \"email\": \"pauliescanlon@gmail.com\",\n    \"hireable\": true,\n    \"bio\": \"Jamstack Developer / Technical Content Writer (freelance)\",\n    \"twitter_username\": \"pauliescanlon\",\n    \"created_at\": \"2012-02-23T13:43:26Z\",\n    \"two_factor_authentication\": true,\n    ...\n  }\n}</code></pre>\n\n<p>Here‚Äôs a CodeSandbox example of the full raw response.</p>\n<p><strong>CodeSandbox: Raw Response</strong></p>\n\n\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8b518e4-b184-4dc5-90e5-8d3c40dc369e/12-building-api-gatsby-functions.png\" /></p>\n<p>You‚Äôll see from the above that there‚Äôs quite a lot of data returned that I don‚Äôt really need, this next bit is completely up to you as it‚Äôs your API but I have found it helpful to manipulate the GitHub API response a little bit before sending it back to my frontend code. </p>\n<p>If you‚Äôd like to do the same you could create a new function and add the following to <code>src/api/get-github-user.js</code>.</p>\n<pre><code>// src/api/get-github-user.js\n\nimport { Octokit } from '@octokit/rest';\n\nconst octokit = new Octokit({\n  auth: process.env.OCTOKIT_PERSONAL_ACCESS_TOKEN\n});\n\nexport default async function handler(req, res) {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n\n  try {\n    const { data } = await octokit.request(`GET /users/{username}`, {\n      username: 'PaulieScanlon'\n    });\n\n    res.status(200).json({\n      message: 'A ok!',\n      user: {\n        name: data.name,\n        blog_url: data.blog,\n        bio: data.bio,\n        photo: data.avatar_url,\n        githubUsername: `@${data.login}`,\n        githubUrl: data.html_url,\n        twitterUsername: `@${data.twitter_username}`,\n        twitterUrl: `https://twitter.com/${data.twitter_username}`\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Error!' });\n  }\n}</code></pre>\n\n<p>You‚Äôll see from the above that rather than returning the complete data object returned by the GitHub REST API I pick out just the bits I need, rename them and add a few bits before the username and URL values. This makes life a bit easier when you come to render the data in the frontend code.</p>\n<p>Here‚Äôs a CodeSandbox example of the formatted response.</p>\n<p><strong>CodeSandbox: Formatted Response</strong></p>\n\n\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a77f9b2c-398b-41c3-9fe9-322b48f7054f/2-building-api-gatsby-functions.png\" /></p>\n<p>This is very similar to the Profile Card CodeSandbox from earlier, but I‚Äôve also printed the data out so you can see how each manipulated data item is used.</p>\n<p>It‚Äôs worth noting at this point that all four of the CodeSandbox demos in this tutorial are using the demo API, and none of them are built using Gatsby or hosted on Gatsby Cloud ‚Äî cool ay! </p>\n<code>.env</code> Variables In Gatsby Cloud\n<p>Before you deploy your two new functions you‚Äôll need to add the GitHub Access token to the environment variables section in Gatsby Cloud.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b71c8550-b8e4-4d5a-a0f7-33991e61708e/9-building-api-gatsby-functions.jpg\" /></p>\nWhere To Go From Here?\n<p>I asked myself this very question. Typically speaking serverless functions are used in client-side requests and whilst that‚Äôs fine I wondered if they could also be used at build time to statically ‚Äúbake‚Äù data into a page rather than relying on JavaScript which may or may not be disabled in the user's browser.</p>\n<p>...so that‚Äôs exactly what I did. </p>\n<p>Here‚Äôs a kind of data dashboard that uses data returned by Gatsby Functions at both run and build time. I built this site using <a href=\"https://astro.build/\">Astro</a> and deployed it <a href=\"https://pages.github.com/\">GitHub Pages</a>.</p>\n<p>The reason I think this is a great approach is because I‚Äôm able to re-use the same functionality on both the server and in the browser without duplicating anything. </p>\n<p>In this Astro build I hit the same endpoint exposed by my API to return data that is then either baked into the page (great for SEO) or fetched at run time by the browser (great for showing fresh or up to the minute live data).</p>\n<h3>Data Dashboard</h3>\n<p>The data displayed on the left of the site is requested at build time and baked into the page with Astro. The data on the right of the page is requested at runtime using a client-side request. I‚Äôve used slightly different endpoints exposed by the GitHub REST API to query different GitHub user accounts which create the different lists. </p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a7b2d8d-85fd-4940-ae16-883b5409b958/3-building-api-gatsby-functions.png\" /></p>\n<p>Everything you see on this site is provided by my more complete API. I‚Äôve called it: <a href=\"https://paulieapi.gatsbyjs.io/\">Paulie API</a> and I use it for a number of my websites. </p>\n<h3>Paulie API</h3>\n<p>Paulie API like the API from this tutorial is built with Gatsby but because Gatsby can act as both a site and an API I‚Äôve used it to document how all my functions work and each endpoint has its own page that can be used as an interactive playground‚Ä¶ feel free to have a look around. </p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62c7c3ab-d342-48e3-bcfa-8afb7144161c/1-building-api-gatsby-functions.png\" /></p>\n<p>So, there you have it, A Gatsby Functions API that can be used by any client-side or server-side code, from any website built with any tech stack. ü§Ø</p>\n<p>Give it a go and I‚Äôd be very interested to see what you build. Feel free to share in the comments below or come find me on Twitter: <a href=\"https://twitter.com/PaulieScanlon\">@PaulieScanlon</a>.</p>","author":"","siteTitle":"Articles on Smashing Magazine ‚Äî For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"1865acfee05127abb5e528d07e6aa744dc3eddecca1e115826ba977a721bba71","category":"Tech"}