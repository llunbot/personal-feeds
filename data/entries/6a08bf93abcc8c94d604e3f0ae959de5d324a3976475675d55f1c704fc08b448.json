{"title":"Monitoring the Vault Secrets Operator with Prometheus and Grafana","link":"https://www.hashicorp.com/blog/monitoring-the-vault-secrets-operator-with-prometheus-and-grafana","date":1686067200000,"content":"<p>HashiCorp recently proposed a new method to consume Vault secrets — the <a href=\"https://www.hashicorp.com/blog/vault-secrets-operator-a-new-method-for-kubernetes-integration\">Vault Secrets Operator</a>. By implementing a Kubernetes Operator, you can now synchronize your secrets from different Vault secrets engines like <a href=\"https://developer.hashicorp.com/vault/docs/secrets/kv/kv-v2\">Key/Value</a>, <a href=\"https://developer.hashicorp.com/vault/docs/secrets/databases\">Database</a>, or <a href=\"https://developer.hashicorp.com/vault/docs/secrets/pki\">PKI</a> to a Kubernetes secrets store. As a result, without any code application changes, you can now sync Vault secrets to Kubernetes Secrets.</p>\n\n<p>As teams adopt the Vault Secrets Operator for Kubernetes, it becomes a critical component of their platforms and must be monitored closely. This post will walk you through how to use the <a href=\"https://github.com/prometheus-operator/prometheus-operator\">Prometheus Operator</a> and the <a href=\"https://prometheus.io/\">Prometheus</a> metrics endpoint provided in the Vault Secrets Operator. This allows users to be alerted to any potential issues with the system. You’ll also see how to <a href=\"https://grafana.com/docs/grafana-cloud/kubernetes-monitoring/other-methods/prometheus/prometheus_operator/\">integrate Prometheus output into a Grafana dashboard</a>.</p>\n\n<h2>Demo project architecture</h2>\n\n<p>In this walkthrough, the Vault Secrets Operator starts out deployed in a dedicated namespace called <em>vault-secrets-operator</em> with Helm. This is in line with our <a href=\"https://developer.hashicorp.com/vault/docs/platform/k8s/vso/installation\">Installing the Vault Secrets Operator documentation</a>. The Prometheus Operator will be used with <a href=\"https://github.com/prometheus-operator/kube-prometheus\">kube-prometheus</a> to simplify integration. At the end of installation, your setup should look like this:</p>\n<img src=\"https://www.datocms-assets.com/2885/1686074737-vault-vso-prometheus-diagram-2.png\" alt=\"Data\" /><p>The Vault Secrets Operator is in charge of syncing secrets from HashiCorp Vault to Kubernetes Secrets and exposes metrics through the Prometheus endpoint. Those metrics are then scraped by the Prometheus Operator, which provides alerts and is used as a datasource for the Grafana dashboard.</p>\n\n<h2>Deploy Prometheus Operator</h2>\n\n<p>The Vault Secrets Operator was built using <a href=\"https://github.com/kubernetes-sigs/kubebuilder\">Kubebuilder</a> (an SDK to build Kubernetes APIs), which exposes <a href=\"https://book.kubebuilder.io/reference/metrics.html\">a set of protected metrics</a> by default. As mentioned in <a href=\"https://www.hashicorp.com/blog/vault-secrets-operator-a-new-method-for-kubernetes-integration\">the Vault Secrets Operator announcement</a>, there are a number of metrics available through an endpoint supported by <a href=\"https://github.com/prometheus-operator/prometheus-operator\">Prometheus Operator</a>. </p>\n\n<p>The first step in the deployment process is to deploy <a href=\"https://github.com/prometheus-operator/kube-prometheus\">kube-prometheus</a>: a packaged method for deploying Prometheus and monitoring-related solutions like <em>alertmanager</em> for alerting and Grafana for dashboards.</p>\n\n<p>Install kube-prometheus using Helm:</p>\n<pre><code># Add helm repository\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\n\n# deploy from helm repository\nhelm install kube-prometheus prometheus-community/kube-prometheus-stack -n observability --create-namespace</code></pre><p>The code above deploys your Prometheus server with alertmanager and Grafana. </p>\n\n<p>Next, forward port 9090 for a Prometheus service:</p>\n<pre><code>kubectl port-forward svc/kube-prometheus-kube-prome-prometheus 9090:9090 -n observability &amp;</code></pre><p>You should get access to the Prometheus UI, but note that the Vault Secrets Operator does not yet appear as a target for Prometheus scraping.</p>\n\n<h2>Create the ServiceMonitor</h2>\n\n<p>Without kube-prometheus, you would need to grant permissions to your Prometheus server so it can scrape the protected metrics. That process would involve creating a <em>ClusterRoleBinding</em> to bind the <em>ClusterRole</em> to the service account that your Prometheus server uses. But because we’re using kube-prometheus, this binding is already deployed.</p>\n\n<p>When deploying the kube-prometheus from the Helm chart, several custom objects are already created in the Kubernetes cluster. One of them is the <code>prometheus</code> object, which defines all configurations used by Prometheus (such as scraping endpoints, scraping interval, etc.). Here is the default config that gets deployed:</p>\n<pre><code>kubectl get prometheus -n observability\n\nNAME           VERSION   DESIRED   READY   RECONCILED   AVAILABLE    AGE\nkube-prome...  v2.42.0   1     \t   1   \t   True         True         18m</code></pre><p>You can see that an object called <code>kube-prometheus-kube-prome-prometheus</code> was created, and it contains all the configurations.</p>\n\n<p>The Prometheus Operator offers multiple ways to define resources to be monitored. For the purposes of this blog post, we will use the <em><a href=\"https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#prometheus\">serviceMonitorSelector</a>:</em></p>\n<pre><code>kubectl get prometheus -n observability kube-prometheus-kube-prome-prometheus  -o=jsonpath='{.spec.serviceMonitorSelector}'\n\n{\"matchLabels\":{\"release\":\"kube-prometheus\"}}</code></pre><p>Looking deeper, you can see that Prometheus is considering all <code>ServiceMonitor</code> instances with the label: <code>release:kube-prometheus</code> (by using the serviceMonitorSelector).</p>\n\n<p>So, you will next create a <code>ServiceMonitor</code> object for the Vault Secrets Operator. HashiCorp has a sample <a href=\"https://github.com/hashicorp/vault-secrets-operator/blob/main/config/prometheus/monitor.yaml\">ServiceMonitor</a> that you can use to start building your configuration, adding the label name: <code>controller-manager-metrics-monitor</code>:</p>\n<pre><code>cat &lt;&gt; servicemonitor.yaml\n# Prometheus Monitor Service (Metrics)\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    release: kube-prometheus\n  name: controller-manager-metrics-monitor\nspec:\n  endpoints:\n    - path: /metrics\n      port: https\n      scheme: https\n      bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token\n      tlsConfig:\n        insecureSkipVerify: true\n  selector:\n    matchLabels:\n      control-plane: controller-manager\n  namespaceSelector:\n    matchNames:\n      - vault-secrets-operator\nEOF</code></pre><p>In the configuration file, you will also see that the metric endpoint is protected by a token (<em>bearerTokenFile</em>). This is because Kubebuilder embeds configurations that enforce authentication and authorization as a default value through an<a href=\"https://github.com/brancz/kube-rbac-proxy\"> auth proxy</a> deployed as a sidecar container in the manager pod.</p>\n\n<p>Apply the following configuration:</p>\n<pre><code>kubectl apply -f servicemonitor.yaml -n observability</code></pre><p>The chart below summarizes the interaction between the Prometheus Operator and the Vault Secrets Operator:</p>\n<img src=\"https://www.datocms-assets.com/2885/1686004273-vso-vault-namespace-prometheus-code-diagram.png\" alt=\"The\" /><p>You’re now finished with the Prometheus Operator configuration. Go back to the Prometheus UI, where “controller-manager” should be coming up as a target in the Targets section:</p>\n<img src=\"https://www.datocms-assets.com/2885/1686062030-prometheus-targets-sc.png\" alt=\"Prometheus\" /><h2>Grafana dashboard sample</h2>\n\n<p>Next, create a Grafana dashboard to visualize the data coming out of the Vault Secrets Operator. To integrate it into your stack, you may want to expose the Grafana port using an ingress controller in production, but for the purposes of this blog post, you can forward the port using this command:</p>\n<pre><code>kubectl port-forward svc/kube-prometheus-grafana -n observability 8091:80</code></pre><p>You should now have access to the Grafana interface by typing <em><a href=\"http://localhost:9091\">http://localhost:9091</a></em> into your browser. Log in with <code>admin</code> as username and get the password from the Kubernetes secret store:</p>\n<pre><code>Username: admin\nPassword: kubectl get secret --namespace observability kube-prometheus-grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo</code></pre><p>Once you’re logged in, you can import the dashboard by going into <em>Dashboards / import</em> section and using dashboard ID <code>18656.</code></p>\n\n<p>The dashboard should look like this:</p>\n<img src=\"https://www.datocms-assets.com/2885/1686062052-dashboard.png\" alt=\"Grafana\" /><p>It’s important to know that the Vault Secrets Operator is exposing all the reference metrics from Kubebuilder SDK, and the documentation needed to get a better understanding of those metrics can be found in this list of <a href=\"https://book.kubebuilder.io/reference/metrics-reference.html\">Default Exported Metrics References</a>.</p>\n\n<p>This dashboard is split into three parts:</p>\n\n<ol>\n<li>Controllers Status provides a quick view of the controllers’ states. </li>\n<li>Overview shows all controller activities </li>\n<li>The other sections show more detailed information for each controller selected in the Grafana variables, such as the total number of reconciliations per controller and the length of time per reconciliation per controller.</li>\n</ol>\n\n<p>This dashboard is a sample. We encourage you to customize it with critical data more closely related to your business.</p>\n\n<h2>Important metrics to monitor</h2>\n\n<p>Kube-prometheus contains several examples of cluster alerting rules. You can find those rules in the UI using the <em>/rules</em> endpoint or through the command line with this command:</p>\n<pre><code>kubectl get PrometheusRule -n observability</code></pre><p>No rules are created initially to monitor your Vault secrets system.</p>\n\n<p>For this demo, create this set of rules:</p>\n<pre><code>cat &lt;&gt; vso-alerts.yaml\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n labels:\n   release: kube-prometheus\n name: kube-prometheus-kube-prome-vso-prometheus.rules\n namespace: observability\nspec:\n groups:\n - name: vso.rules\n   rules:\n   - alert: VSO-vault-auth\n     annotations:\n       description: Authentication to Vault has failed\n     expr: |-\n       controller_resource_status{controller=\"vaultauth\"} == 0\n     for: 10m\n     labels:\n       severity: critical\n   - alert: VSO-vault-connection\n     annotations:\n       description: Connection to Vault has failed\n     expr: |-\n       controller_resource_status{controller=\"vaultconnection\"} == 0\n     for: 10m\n     labels:\n       severity: critical\nEOF</code></pre><pre><code>kubectl apply -f vso-alerts.yaml</code></pre><p>These rules add alerting on <em>vaultconnection/vaultauthentication</em> controller issues. If you are using the <em>vaultpkisecret or vaultdynamicsecret</em> controllers on different namespaces, you may want to make similar alerts for those as well.</p>\n<img src=\"https://www.datocms-assets.com/2885/1686062072-prometheus-sc.png\" alt=\"Prometheus\" /><h2>What’s next for the Vault Secrets Operator</h2>\n\n<p>As more users begin to adopt the Vault Secrets Operator, it will become a critical part of the production stack in charge of syncing secrets between a centralized HashiCorp Vault and Kubernetes secret store. This means that teams will need to closely monitor this operator. </p>\n\n<p>The example workflow in this blog post is intended to help you get started building an observability solution for the Vault Secrets Operator based on the Prometheus Operator with Grafana for dashboarding and Alertmanager for alerting.</p>\n","author":"Guillaume Fediere","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"6a08bf93abcc8c94d604e3f0ae959de5d324a3976475675d55f1c704fc08b448","category":"Tech"}