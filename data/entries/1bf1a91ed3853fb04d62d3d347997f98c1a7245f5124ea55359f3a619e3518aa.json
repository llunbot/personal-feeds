{"title":"Creating An Effective Multistep Form For Better User Experience","link":"https://smashingmagazine.com/2024/12/creating-effective-multistep-form-better-user-experience/","date":1733220000000,"content":"<p>For a multistep form, planning involves structuring questions logically across steps, grouping similar questions, and minimizing the number of steps and the amount of required information for each step. Whatever makes each step focused and manageable is what should be aimed for.</p>\n<p>In this tutorial, we will create a multistep form for a job application. Here are the details we are going to be requesting from the applicant at each step:</p>\n<ul>\n<li><strong>Personal Information</strong><br />Collects applicant’s name, email, and phone number.</li>\n<li><strong>Work Experience</strong><br />Collects the applicant’s most recent company, job title, and years of experience.</li>\n<li><strong>Skills &amp; Qualifications</strong><br />The applicant lists their skills and selects their highest degree.</li>\n<li><strong>Review &amp; Submit</strong><br />This step is not going to collect any information. Instead, it provides an opportunity for the applicant to go back and review the information entered in the previous steps of the form before submitting it.</li>\n</ul>\n<p>You can think of structuring these questions as a digital way of getting to know somebody. You can’t meet someone for the first time and ask them about their work experience without first asking for their name.</p>\n<p>Based on the steps we have above, this is what the body of our HTML with our form should look like. First, the main <code>&lt;form&gt;</code> element:</p>\n<pre><code>&lt;form id=\"jobApplicationForm\"&gt;\n  &lt;!-- Step 1: Personal Information --&gt;\n  &lt;!-- Step 2: Work Experience --&gt;\n  &lt;!-- Step 3: Skills &amp; Qualifications --&gt;\n  &lt;!-- Step 4: Review &amp; Submit --&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><strong>Step 1</strong> is for filling in personal information, like the applicant’s name, email address, and phone number:</p>\n<div>\n<pre><code>&lt;form id=\"jobApplicationForm\"&gt;\n  &lt;!-- Step 1: Personal Information --&gt;\n  &lt;fieldset class=\"step\" id=\"step-1\"&gt;\n    &lt;legend id=\"step1Label\"&gt;Step 1: Personal Information&lt;/legend&gt;\n    &lt;label for=\"name\"&gt;Full Name&lt;/label&gt;\n    &lt;input type=\"text\" id=\"name\" name=\"name\" required /&gt;\n    &lt;label for=\"email\"&gt;Email Address&lt;/label&gt;\n    &lt;input type=\"email\" id=\"email\" name=\"email\" required /&gt;\n    &lt;label for=\"phone\"&gt;Phone Number&lt;/label&gt;\n    &lt;input type=\"tel\" id=\"phone\" name=\"phone\" required /&gt;\n  &lt;/fieldset&gt;\n\n  &lt;!-- Step 2: Work Experience --&gt;\n  &lt;!-- Step 3: Skills &amp; Qualifications --&gt;\n  &lt;!-- Step 4: Review &amp; Submit --&gt;\n&lt;/form&gt;\n</code></pre>\n</div>\n\n<p>Once the applicant completes the first step, we’ll navigate them to <strong>Step 2</strong>, focusing on their work experience so that we can collect information like their most recent company, job title, and years of experience. We’ll tack on a new <code>&lt;fieldset&gt;</code> with those inputs:</p>\n<div>\n<pre><code>&lt;form id=\"jobApplicationForm\"&gt;\n  &lt;!-- Step 1: Personal Information --&gt;\n\n  &lt;!-- Step 2: Work Experience --&gt;\n  &lt;fieldset class=\"step\" id=\"step-2\" hidden&gt;\n    &lt;legend id=\"step2Label\"&gt;Step 2: Work Experience&lt;/legend&gt;\n    &lt;label for=\"company\"&gt;Most Recent Company&lt;/label&gt;\n    &lt;input type=\"text\" id=\"company\" name=\"company\" required /&gt;\n    &lt;label for=\"jobTitle\"&gt;Job Title&lt;/label&gt;\n    &lt;input type=\"text\" id=\"jobTitle\" name=\"jobTitle\" required /&gt;\n    &lt;label for=\"yearsExperience\"&gt;Years of Experience&lt;/label&gt;\n    &lt;input\n      type=\"number\"\n      id=\"yearsExperience\"\n      name=\"yearsExperience\"\n      min=\"0\"\n      required\n    /&gt;\n  &lt;/fieldset&gt;\n\n  &lt;!-- Step 3: Skills &amp; Qualifications --&gt;\n  &lt;!-- Step 4: Review &amp; Submit --&gt;\n&lt;/form&gt;\n</code></pre>\n</div>\n\n<p><strong>Step 3</strong> is all about the applicant listing their skills and qualifications for the job they’re applying for:</p>\n<div>\n<pre><code>&lt;form id=\"jobApplicationForm\"&gt;\n  &lt;!-- Step 1: Personal Information --&gt;\n  &lt;!-- Step 2: Work Experience --&gt;\n\n  &lt;!-- Step 3: Skills &amp; Qualifications --&gt;\n  &lt;fieldset class=\"step\" id=\"step-3\" hidden&gt;\n    &lt;legend id=\"step3Label\"&gt;Step 3: Skills &amp; Qualifications&lt;/legend&gt;\n    &lt;label for=\"skills\"&gt;Skill(s)&lt;/label&gt;\n    &lt;textarea id=\"skills\" name=\"skills\" rows=\"4\" required&gt;&lt;/textarea&gt;\n    &lt;label for=\"highestDegree\"&gt;Degree Obtained (Highest)&lt;/label&gt;\n    &lt;select id=\"highestDegree\" name=\"highestDegree\" required&gt;\n      &lt;option value=\"\"&gt;Select Degree&lt;/option&gt;\n      &lt;option value=\"highschool\"&gt;High School Diploma&lt;/option&gt;\n      &lt;option value=\"bachelor\"&gt;Bachelor's Degree&lt;/option&gt;\n      &lt;option value=\"master\"&gt;Master's Degree&lt;/option&gt;\n      &lt;option value=\"phd\"&gt;Ph.D.&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/fieldset&gt;\n  &lt;!-- Step 4: Review &amp; Submit --&gt;\n  &lt;fieldset class=\"step\" id=\"step-4\" hidden&gt;\n    &lt;legend id=\"step4Label\"&gt;Step 4: Review &amp; Submit&lt;/legend&gt;\n    &lt;p&gt;Review your information before submitting the application.&lt;/p&gt;\n    &lt;button type=\"submit\"&gt;Submit Application&lt;/button&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n</code></pre>\n</div>\n\n<p>And, finally, we’ll allow the applicant to review their information before submitting it:</p>\n<div>\n<pre><code>&lt;form id=\"jobApplicationForm\"&gt;\n  &lt;!-- Step 1: Personal Information --&gt;\n  &lt;!-- Step 2: Work Experience --&gt;\n  &lt;!-- Step 3: Skills &amp; Qualifications --&gt;\n\n  &lt;!-- Step 4: Review &amp; Submit --&gt;\n  &lt;fieldset class=\"step\" id=\"step-4\" hidden&gt;\n    &lt;legend id=\"step4Label\"&gt;Step 4: Review &amp; Submit&lt;/legend&gt;\n    &lt;p&gt;Review your information before submitting the application.&lt;/p&gt;\n    &lt;button type=\"submit\"&gt;Submit Application&lt;/button&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n</code></pre>\n</div>\n\n<p><strong>Notice</strong>: We’ve added a <code>hidden</code> attribute to every <code>fieldset</code> element but the first one. This ensures that the user sees only the first step. Once they are done with the first step, they can proceed to fill out their work experience on the second step by clicking a navigational button. We’ll add this button later on.</p>\nAdding Styles\n<p>To keep things focused, we’re not going to be emphasizing the styles in this tutorial. What we’ll do to keep things simple is leverage the <a href=\"https://simplecss.org\">Simple.css style framework</a> to get the form in good shape for the rest of the tutorial.</p>\n<p>If you’re following along, we can include Simple’s styles in the document <code>&lt;head&gt;</code>:</p>\n<div>\n<pre><code>&lt;link rel=\"stylesheet\" href=\"<a href=\"https://cdn.simplecss.org/simple.min.css&quot;\">https://cdn.simplecss.org/simple.min.css\"</a> /&gt;\n</code></pre>\n</div>\n\n<p>And from there, go ahead and create a <code>style.css</code> file with the following styles that I’ve folded up.</p>\n<pre><code>&lt;details&gt;\n  &lt;summary&gt;View CSS&lt;/summary&gt;\n  body {\n    min-height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  main {\n    padding: 0 30px;\n  }\n  h1 {\n    font-size: 1.8rem;\n    text-align: center;\n  }\n  .stepper {\n    display: flex;\n    justify-content: flex-end;\n    padding-right: 10px;\n  }\n  form {\n    box-shadow: 0px 0px 6px 2px rgba(0, 0, 0, 0.2);\n    padding: 12px;\n  }\n  input,\n  textarea,\n  select {\n    outline: none;\n  }\n  input:valid,\n  textarea:valid,\n  select:valid,\n  input:focus:valid,\n  textarea:focus:valid,\n  select:focus:valid {\n    border-color: green;\n  }\n  input:focus:invalid,\n  textarea:focus:invalid,\n  select:focus:invalid {\n    border: 1px solid red;\n  }\n&lt;/details&gt;\n</code></pre>\n\nForm Navigation And Validation\n<p>An easy way to ruin the user experience for a multi-step form is to wait until the user gets to the last step in the form before letting them know of any error they made along the way. Each step of the form should be validated for errors before moving on to the next step, and descriptive error messages should be displayed to enable users to understand what is wrong and how to fix it.</p>\n<p>Now, the only part of our form that is visible is the first step. To complete the form, users need to be able to navigate to the other steps. We are going to use several buttons to pull this off. The first step is going to have a Next button. The second and third steps are going to have both a Previous and a Next button, and the fourth step is going to have a Previous and a Submit button.</p>\n<div>\n<pre><code>&lt;form id=\"jobApplicationForm\"&gt;\n  &lt;!-- Step 1: Personal Information --&gt;\n  &lt;fieldset&gt;\n    &lt;!-- ... --&gt;\n    &lt;button type=\"button\" class=\"next\" onclick=\"nextStep()\"&gt;Next&lt;/button&gt;\n  &lt;/fieldset&gt;\n\n  &lt;!-- Step 2: Work Experience --&gt;\n  &lt;fieldset&gt;\n    &lt;!-- ... --&gt;\n    &lt;button type=\"button\" class=\"previous\" onclick=\"previousStep()\"&gt;Previous&lt;/button&gt;\n    &lt;button type=\"button\" class=\"next\" onclick=\"nextStep()\"&gt;Next&lt;/button&gt;\n  &lt;/fieldset&gt;\n\n  &lt;!-- Step 3: Skills &amp; Qualifications --&gt;\n  &lt;fieldset&gt;\n    &lt;!-- ... --&gt;\n    &lt;button type=\"button\" class=\"previous\" onclick=\"previousStep()\"&gt;Previous&lt;/button&gt;\n    &lt;button type=\"button\" class=\"next\" onclick=\"nextStep()\"&gt;Next&lt;/button&gt;\n  &lt;/fieldset&gt;\n\n  &lt;!-- Step 4: Review &amp; Submit --&gt;\n  &lt;fieldset&gt;\n    &lt;!-- ... --&gt;\n    &lt;button type=\"button\" class=\"previous\" onclick=\"previousStep()\"&gt;Previous&lt;/button&gt;\n    &lt;button type=\"submit\"&gt;Submit Application&lt;/button&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n</code></pre>\n</div>\n\n<p><strong>Notice</strong>: We’ve added <code>onclick</code> attributes to the Previous and Next buttons to link them to their respective JavaScript functions: <code>previousStep()</code> and <code>nextStep()</code>.</p>\n<h3>The “Next” Button</h3>\n<p>The <code>nextStep()</code> function is linked to the Next button. Whenever the user clicks the Next button, the <code>nextStep()</code> function will first check to ensure that all the fields for whatever step the user is on have been filled out correctly before moving on to the next step. If the fields haven’t been filled correctly, it displays some error messages, letting the user know that they’ve done something wrong and informing them what to do to make the errors go away. </p>\n<p>Before we go into the implementation of the <code>nextStep</code> function, there are certain variables we need to define because they will be needed in the function. First, we need the input fields from the DOM so we can run checks on them to make sure they are valid.</p>\n<div>\n<pre><code>// Step 1 fields\nconst name = document.getElementById(\"name\");\nconst email = document.getElementById(\"email\");\nconst phone = document.getElementById(\"phone\");\n\n// Step 2 fields\nconst company = document.getElementById(\"company\");\nconst jobTitle = document.getElementById(\"jobTitle\");\nconst yearsExperience = document.getElementById(\"yearsExperience\");\n\n// Step 3 fields\nconst skills = document.getElementById(\"skills\");\nconst highestDegree = document.getElementById(\"highestDegree\");\n</code></pre>\n</div>\n\n<p>Then, we’re going to need an array to store our error messages.</p>\n<pre><code>let errorMsgs = [];\n</code></pre>\n\n<p>Also, we would need an element in the DOM where we can insert those error messages after they’ve been generated. This element should be placed in the HTML just below the last <code>fieldset</code> closing tag:</p>\n<pre><code>&lt;div id=\"errorMessages\" style=\"color: rgb(253, 67, 67)\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Add the above <code>div</code> to the JavaScript code using the following line:</p>\n<pre><code>const errorMessagesDiv = document.getElementById(\"errorMessages\");\n</code></pre>\n\n<p>And finally, we need a variable to keep track of the current step.</p>\n<p><code>let currentStep = 1;\n</code></p>\n<p>Now that we have all our variables in place, here’s the implementation of the <code>nextstep()</code> function:</p>\n<div>\n<pre><code>function nextStep() {\n  errorMsgs = [];\n  errorMessagesDiv.innerText = \"\";\n\n  switch (currentStep) {\n    case 1:\n      addValidationErrors(name, email, phone);\n      validateStep(errorMsgs);\n      break;\n\n    case 2:\n      addValidationErrors(company, jobTitle, yearsExperience);\n      validateStep(errorMsgs);\n      break;\n\n    case 3:\n      addValidationErrors(skills, highestDegree);\n      validateStep(errorMsgs);\n      break;\n  }\n}\n</code></pre>\n</div>\n\n<p>The moment the Next button is pressed, our code first checks which step the user is currently on, and based on this information, it validates the data for that specific step by calling the <code>addValidationErrors()</code> function. If there are errors, we display them. Then, the form calls the <code>validateStep()</code> function to verify that there are no errors before moving on to the next step. If there are errors, it prevents the user from going on to the next step.</p>\n<p>Whenever the <code>nextStep()</code> function runs, the error messages are cleared first to avoid appending errors from a different step to existing errors or re-adding existing error messages when the <code>addValidationErrors</code> function runs. The <code>addValidationErrors</code> function is called for each step using the fields for that step as arguments.</p>\n<p>Here’s how the <code>addValidationErrors</code> function is implemented:</p>\n<div>\n<pre><code>function addValidationErrors(fieldOne, fieldTwo, fieldThree = undefined) {\n  if (!fieldOne.checkValidity()) {\n    const label = document.querySelector(<code>label[for=\"${fieldOne.id}\"]</code>);\n    errorMsgs.push(<code>Please Enter A Valid ${label.textContent}</code>);\n  }\n\n  if (!fieldTwo.checkValidity()) {\n    const label = document.querySelector(<code>label[for=\"${fieldTwo.id}\"]</code>);\n    errorMsgs.push(<code>Please Enter A Valid ${label.textContent}</code>);\n  }\n\n  if (fieldThree &amp;&amp; !fieldThree.checkValidity()) {\n    const label = document.querySelector(<code>label[for=\"${fieldThree.id}\"]</code>);\n    errorMsgs.push(<code>Please Enter A Valid ${label.textContent}</code>);\n  }\n\n  if (errorMsgs.length &gt; 0) {\n    errorMessagesDiv.innerText = errorMsgs.join(\"\\n\");\n  }\n}\n</code></pre>\n</div>\n\n<p>This is how the <code>validateStep()</code> function is defined:</p>\n<pre><code>function validateStep(errorMsgs) {\n  if (errorMsgs.length === 0) {\n    showStep(currentStep + 1);\n  }\n}\n</code></pre>\n\n<p>The <code>validateStep()</code> function checks for errors. If there are none, it proceeds to the next step with the help of the <code>showStep()</code> function.</p>\n<pre><code>function showStep(step) {\n  steps.forEach((el, index) =&gt; {\n    el.hidden = index + 1 !== step;\n  });\n  currentStep = step;\n}\n</code></pre>\n\n<p>The <code>showStep()</code> function requires the four fieldsets in the DOM. Add the following line to the top of the JavaScript code to make the fieldsets available:</p>\n<pre><code>const steps = document.querySelectorAll(\".step\");\n</code></pre>\n\n<p>What the <code>showStep()</code> function does is to go through all the <code>fieldsets</code> in our form and hide whatever <code>fieldset</code> is not equal to the one we’re navigating to. Then, it updates the <code>currentStep</code> variable to be equal to the step we’re navigating to.</p>\n<h3>The “Previous” Button</h3>\n<p>The <code>previousStep()</code> function is linked to the Previous button. Whenever the previous button is clicked, similarly to the <code>nextStep</code> function, the error messages are also cleared from the page, and navigation is also handled by the <code>showStep</code> function. </p>\n<pre><code>function previousStep() {\n  errorMessagesDiv.innerText = \"\";\n  showStep(currentStep - 1);\n}\n</code></pre>\n\n<p>Whenever the <code>showStep()</code> function is called with “<code>currentStep - 1</code>” as an argument (as in this case), we go back to the previous step, while moving to the next step happens by calling the <code>showStep()</code> function with “<code>currentStep + 1</code>\" as an argument (as in the case of the <code>validateStep()</code> function).</p>\nImproving User Experience With Visual Cues\n<p>One other way of improving the user experience for a multi-step form, is by integrating visual cues, things that will give users feedback on the process they are on. These things can include a progress indicator or a stepper to help the user know the exact step they are on.</p>\n<h3>Integrating A Stepper</h3>\n<p>To integrate a stepper into our form (sort of like <a href=\"https://m1.material.io/components/steppers.html#\">this one</a> from Material Design), the first thing we need to do is add it to the HTML just below the opening <code>&lt;form&gt;</code> tag.</p>\n<pre><code>&lt;form id=\"jobApplicationForm\"&gt;\n  &lt;div class=\"stepper\"&gt;\n    &lt;span&gt;&lt;span class=\"currentStep\"&gt;1&lt;/span&gt;/4&lt;/span&gt;\n  &lt;/div&gt;\n  &lt;!-- ... --&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Next, we need to query the part of the stepper that will represent the current step. This is the span tag with the class name of <code>currentStep</code>.</p>\n<pre><code>const currentStepDiv = document.querySelector(\".currentStep\");\n</code></pre>\n\n<p>Now, we need to update the stepper value whenever the previous or next buttons are clicked. To do this, we need to update the <code>showStep()</code> function by appending the following line to it:</p>\n<pre><code>currentStepDiv.innerText = currentStep;\n</code></pre>\n\n<p>This line is added to the <code>showStep()</code> function because the <code>showStep()</code> function is responsible for navigating between steps and updating the <code>currentStep</code> variable. So, whenever the <code>currentStep</code> variable is updated, the currentStepDiv should also be updated to reflect that change.</p>\n<h3>Storing And Retrieving User Data</h3>\n<p>One major way we can improve the form’s user experience is by storing user data in the browser. Multistep forms are usually long and require users to enter a lot of information about themselves. Imagine a user filling out 95% of a form, then accidentally hitting the F5 button on their keyboard and losing all their progress. That would be a really bad experience for the user.</p>\n<p>Using <code>localStorage</code>, we can store user information as soon as it is entered and retrieve it as soon as the DOM content is loaded, so users can always continue filling out their forms from wherever they left off. To add this feature to our forms, we can begin by saving the user’s information as soon as it is typed. This can be achieved using the <code>input</code> event.</p>\n<p>Before adding the <code>input</code> event listener, get the form element from the DOM:</p>\n<pre><code>const form = document.getElementById(\"jobApplicationForm\");\n</code></pre>\n\n<p>Now we can add the <code>input</code> event listener:</p>\n<div>\n<pre><code>// Save data on each input event\nform.addEventListener(\"input\", () =&gt; {\n  const formData = {\n    name: document.getElementById(\"name\").value,\n    email: document.getElementById(\"email\").value,\n    phone: document.getElementById(\"phone\").value,\n    company: document.getElementById(\"company\").value,\n    jobTitle: document.getElementById(\"jobTitle\").value,\n    yearsExperience: document.getElementById(\"yearsExperience\").value,\n    skills: document.getElementById(\"skills\").value,\n    highestDegree: document.getElementById(\"highestDegree\").value,\n  };\n  localStorage.setItem(\"formData\", JSON.stringify(formData));\n});\n</code></pre>\n</div>\n\n<p>Next, we need to add some code to help us retrieve the user data once the DOM content is loaded.</p>\n<div>\n<pre><code>window.addEventListener(\"DOMContentLoaded\", () =&gt; {\n  const savedData = JSON.parse(localStorage.getItem(\"formData\"));\n  if (savedData) {\n    document.getElementById(\"name\").value = savedData.name || \"\";\n    document.getElementById(\"email\").value = savedData.email || \"\";\n    document.getElementById(\"phone\").value = savedData.phone || \"\";\n    document.getElementById(\"company\").value = savedData.company || \"\";\n    document.getElementById(\"jobTitle\").value = savedData.jobTitle || \"\";\n    document.getElementById(\"yearsExperience\").value = savedData.yearsExperience || \"\";\n    document.getElementById(\"skills\").value = savedData.skills || \"\";\n    document.getElementById(\"highestDegree\").value = savedData.highestDegree || \"\";\n  }\n});\n</code></pre>\n</div>\n\n<p>Lastly, it is good practice to remove data from <code>localStorage</code> as soon as it is no longer needed:</p>\n<pre><code>// Clear data on form submit\nform.addEventListener('submit', () =&gt; {\n  // Clear localStorage once the form is submitted\n  localStorage.removeItem('formData');\n}); \n</code></pre>\n\n<h3>Adding The Current Step Value To <code>localStorage</code></h3>\n<p>If the user accidentally closes their browser, they should be able to return to wherever they left off. This means that the current step value also has to be saved in <code>localStorage</code>.</p>\n<p>To save this value, append the following line to the <code>showStep()</code> function:</p>\n<pre><code>localStorage.setItem(\"storedStep\", currentStep);\n</code></pre>\n\n<p>Now we can retrieve the current step value and return users to wherever they left off whenever the DOM content loads. Add the following code to the <code>DOMContentLoaded</code> handler to do so:</p>\n<pre><code>const storedStep = localStorage.getItem(\"storedStep\");\n\nif (storedStep) {\n    const storedStepInt = parseInt(storedStep);\n    steps.forEach((el, index) =&gt; {\n      el.hidden = index + 1 !== storedStepInt;\n    });\n    currentStep = storedStepInt;\n    currentStepDiv.innerText = currentStep;\n  }\n</code></pre>\n\n<p>Also, do not forget to clear the current step value from <code>localStorage</code> when the form is submitted.</p>\n<pre><code>localStorage.removeItem(\"storedStep\");\n</code></pre>\n\n<p>The above line should be added to the submit handler.</p>\nWrapping Up\n<p>Creating multi-step forms can help improve user experience for complex data entry. By carefully planning out steps, implementing form validation at each step, and temporarily storing user data in the browser, you make it easier for users to complete long forms.</p>\n<p>For the full implementation of this multi-step form, you can access the complete code on <a href=\"https://github.com/jimavictor/multistep-form\">GitHub</a>.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"1bf1a91ed3853fb04d62d3d347997f98c1a7245f5124ea55359f3a619e3518aa","category":"Tech"}