{"title":"Introducing Bob’s Used Books—a New, Real-World, .NET Sample Application","link":"https://aws.amazon.com/blogs/aws/introducing-bobs-used-books-a-new-real-world-net-sample-application/","date":1683147376000,"content":"<p>Today, I’m happy to announce that a new <a href=\"https://github.com/aws-samples/bobs-used-bookstore-sample\" target=\"_blank\">open-source sample application</a>, a fictitious used books eCommerce store we call Bob’s Used Books, is available for .NET developers working with AWS. The .NET advocacy and development teams at AWS talk to customers regularly and, during those conversations, often receive requests for more in-depth samples. Customers tell us that, while small code snippets serve well to illustrate the mechanics of an API, their development teams also need and want to make use of fuller, more real-world samples to understand better how to construct modern applications for the cloud. Today’s sample application release is in response to those requests.</p> \n<p>Bob’s Used Books is a sample eCommerce application built using <a href=\"https://learn.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core\" target=\"_blank\">ASP.NET Core</a> version 6 and represents an initial modernization of a typical on-premises custom application. Representing a first stage of modernization, the application uses modern cross-platform .NET, enabling it to run on both Windows and Linux systems in the cloud. It’s typical of what many .NET developers are just now going through, porting their own applications from .NET Framework to .NET using freely available tools from AWS such as the <a href=\"https://aws.amazon.com/visual-studio-net/\">Toolkit for .NET Refactoring</a> and the <a href=\"https://aws.amazon.com/porting-assistant-dotnet/\">Porting Assistant for .NET</a>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/25/bobsbookstoresample_homepage.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/25/bobsbookstoresample_homepage.png\" alt=\"Bob's Used Books sample application homepage\" width=\"914\" height=\"684\" /></a></p> \n<p><span><strong>Sample application features</strong></span><br />Customers of our fictional bookstore can browse and search on the store for used books and view details on selected books such as price, condition, genre, and more:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/03/image-7-2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/05/03/image-7-2-1024x728.png\" alt=\"Bob's Used Books sample application search results page, which shows 8 books and their prices.\" width=\"876\" height=\"622\" /></a></p> \n<p> </p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/25/bobsbookstoresample_book_detail.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/25/bobsbookstoresample_book_detail.png\" alt=\"Bob's Used Books sample application book details page\" width=\"814\" height=\"714\" /></a></p> \n<p>Just like a real e-commerce store, customers can add books to a shopping cart, pending subsequent checkout, or to a personal wish list. When the time comes to purchase, the customer can start the checkout process, which will encourage them to sign in if they are an existing customer or sign up during the process.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/25/bobsbookstoresample_checkout.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/25/bobsbookstoresample_checkout.png\" alt=\"Bob's Used Books sample application checkout page\" width=\"914\" height=\"525\" /></a></p> \n<p>In this sample application, the bookstore’s staff uses the same web application to manage inventory and customer orders. Role-based authentication is used to determine whether it’s a staff member signing in, in which case they can view an administrative portal, or a regular store customer. For staff, having accessed the admin portal, they start with a dashboard view that summarizes pending, in-process, or completed orders and the state of the store’s inventory:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/25/bobsbookstoresample_staff_dashboard.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/25/bobsbookstoresample_staff_dashboard.png\" alt=\"Bob's Used Books sample application staff dashboard page\" width=\"914\" height=\"256\" /></a></p> \n<p>Staff can edit inventory to add new books, complete with cover images, or adjust stock levels. From the same dashboard, staff can also view and process pending orders.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/25/bobsbookstoresample_staff_process_order.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/25/bobsbookstoresample_staff_process_order.png\" alt=\"Bob's Used Books sample application staff order processing page\" width=\"914\" height=\"455\" /></a></p> \n<p>Not shown here, but something I think is pretty cool, is a simulated workflow where customers can re-sell their books through the store. This involves the customer submitting an application, the store admin evaluating and deciding whether to purchase from the customer, the customer “posting” the book to the store if accepted, and finally the admin adding the book into inventory and reimbursing the customer. Remember, this is all fictional, however—no actual financial transactions take place!</p> \n<p><span><strong>Application architecture</strong></span><br />The bookstore sample didn’t start as a .NET Framework-based application that needed porting to .NET, but it does use a monolithic MVC (model-view-controller) application design, typical of the .NET Framework development era (and still in use today). It also uses a single Microsoft SQL Server database to contain inventory, shopping cart, user data, and more.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/25/bobsbookstoresample_outline_architecture.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/04/25/bobsbookstoresample_outline_architecture.png\" alt=\"Bob's Used Books sample application outline architecture\" width=\"513\" height=\"278\" /></a></p> \n<p>When fully deployed to AWS, the application makes use of several services. These provide resources to host the application, provide configuration to the running application, and also provide useful functionality to the running code, such as image verification:</p> \n<ul> \n <li><a href=\"https://aws.amazon.com/cognito/\">Amazon Cognito</a> – used for customer and bookstore staff authentication. The application uses <span>Cognito</span>‘s <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-app-integration.html\" target=\"_blank\">Hosted UI</a> to provide sign-in and sign-up functionality.</li> \n <li><a href=\"https://aws.amazon.com/rds/\">Amazon Relational Database Service (RDS)</a> – manages a single Microsoft SQL Server Express instance containing inventory, customer, and other typical data for an e-commerce application.</li> \n <li><a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> – an S3 bucket is used to store cover images for books.</li> \n <li><a href=\"https://aws.amazon.com/systems-manager/\">AWS Systems Manager</a> Parameter Store – contains runtime configuration data, including the name of the S3 bucket for cover images, and <span>Cognito</span> user pool details.</li> \n <li><a href=\"https://aws.amazon.com/secrets-manager/\">AWS Secrets Manager</a> – holds the user and password details for the underlying SQL Server database in <span>RDS</span>.</li> \n <li><a href=\"https://aws.amazon.com/cloudfront/\">Amazon CloudFront</a> – provides a domain for accessing the cover images in the S3 bucket, which means the bucket does not need to be publicly available.</li> \n <li><a href=\"https://aws.amazon.com/rekognition/\">Amazon Rekognition</a> – used to verify that cover images uploaded for a book do not contain objectionable content.</li> \n</ul> \n<p>The application is a starting point to showcase further modernization opportunities in the future, such as adopting purpose-built databases instead of using a single relational database, decomposing the monolith to use microservices (for the latter, AWS provides the <a href=\"https://aws.amazon.com/microservice-extractor/\">Microservice Extractor for .NET</a>), and more. The .NET development, advocacy, and solution architect teams here at AWS are quite excited at the opportunities for new content, using this sample, to illustrate those modernization opportunities in the upcoming months. And, as the sample is open-source, we’re also interested to see where the .NET development community takes it regarding modernization.</p> \n<p><span><strong>Running the application</strong></span><br />My colleague Brad Webber, a Solutions Architect at AWS, has written <a href=\"https://aws.amazon.com/blogs/dotnet/introducing-bobs-used-books-a-net-sample-application-part-1/\" target=\"_blank\">the first in a series of technical blog posts</a> we’ll be publishing about the sample. You’ll find these on the <a href=\"https://aws.amazon.com/blogs/dotnet/\" target=\"_blank\">new .NET on AWS blog channel</a>. In his first post, you’ll learn more about how to run or debug the application on your own machine as well as deploy it completely to the AWS cloud.</p> \n<p>The application uses <a href=\"https://learn.microsoft.com/en-us/sql/database-engine/configure-windows/sql-server-express-localdb\" target=\"_blank\">SQL Server Express <strong>localdb</strong> instance</a> for its database needs when running outside the cloud, which means you do currently need to be using a Windows machine to run or debug. Launch profiles, accessible from Visual Studio, Visual Studio Code, or JetBrains Rider (all on Windows), are used to select how the application runs (for example, with no or some cloud resources):</p> \n<ul> \n <li><strong>Local</strong> – When you select this launch profile, the application runs completely on your machine, using no cloud resources, and doesn’t need an AWS account. This enables you to investigate and experiment with the code incurring no charges for cloud resources.</li> \n <li><strong>Integrated</strong> – When you use this profile, the application still runs locally on your Windows machine and continues to use the localdb database instance, but now also uses some AWS resources, such as an S3 bucket, Rekognition, <span>Cognito</span>, and others. This profile enables you to learn how you can use AWS services within your application code, using the <a href=\"https://aws.amazon.com/sdk-for-net/\" target=\"_blank\">AWS SDK for .NET</a> and various extension libraries that we distribute on NuGet (for a full list of all available libraries you can use when developing your applications, see the <a href=\"https://github.com/aws/dotnet\" target=\"_blank\">.NET on AWS repository on GitHub</a>). To enable you to set up the cloud resources needed by the application when using this profile, an <a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit (AWS CDK)</a> project is provided in the sample repository, making it easy to set up and tear down those resources on demand.</li> \n</ul> \n<p><span><strong>Deploying the Sample to AWS</strong></span><br />You can also deploy the entire application to the AWS Cloud, in this case, to virtual machines in <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> with a SQL Server Express database instance in <a href=\"https://aws.amazon.com/rds/\">Amazon Relational Database Service (RDS)</a>. The deployment uses resources compatible with the AWS <a href=\"https://aws.amazon.com/free/\" target=\"_blank\">Free Tier</a> but do note, however, that you may still incur charges if you exceed the Free Tier limits. Unlike running the application on your own machine, which requires Windows because of the localdb dependency, you can deploy the application to AWS from any machine, including those running macOS and Linux. Once again, a CDK project is included in the repository to get you started, and Brad’s blog post goes into more detail on these steps so I won’t repeat them here.</p> \n<p>Using virtual machines in the cloud is often a first step in modernizing on-premises applications because of similarity with an on-premises server setup, hence the reason for supporting Amazon EC2 deployments out-of-the-box. In the future, we’ll be adding content showing how to deploy the application to container services on AWS, such as <a href=\"https://aws.amazon.com/apprunner\">AWS App Runner</a>, <a href=\"https://aws.amazon.com/ecs/\">Amazon Elastic Container Service (Amazon ECS)</a>, and <a href=\"https://aws.amazon.com/eks/\">Amazon Elastic Kubernetes Service (EKS)</a>.</p> \n<p><span><strong>Next steps</strong></span><br />The <a href=\"https://github.com/aws-samples/bobs-used-bookstore-sample\" target=\"_blank\">Bob’s Used Books sample application is available now on GitHub</a>. We encourage you, if you’re a .NET developer working on AWS and looking for a deeper, more real-world sample, to clone the repository and take the application for a spin. We’re also curious about what modernization journeys you would decide to take with the application, which will help us create future content for the sample. Let us know in the <a href=\"https://github.com/aws-samples/bobs-used-bookstore-sample/issues\" target=\"_blank\">issues section of the repository</a>. And if you want to contribute to the sample, we welcome contributions!</p>","author":"Steve Roberts","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"8a42f174db7adaceae6731589c41e8a99b60e1c36582d48570ddf03805888a63","category":"Tech"}