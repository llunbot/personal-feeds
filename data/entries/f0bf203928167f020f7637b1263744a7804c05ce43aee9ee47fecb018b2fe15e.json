{"title":"Build RAG applications with MongoDB Atlas, now available in Knowledge Bases for Amazon Bedrock","link":"https://aws.amazon.com/blogs/aws/build-rag-applications-with-mongodb-atlas-now-available-in-knowledge-bases-for-amazon-bedrock/","date":1714658237000,"content":"<p>Foundational models (FMs) are trained on large volumes of data and use billions of parameters. However, in order to answer customers’ questions related to domain-specific private data, they need to reference an authoritative knowledge base outside of the model’s training data sources. This is commonly achieved using a technique known as <a href=\"https://aws.amazon.com/what-is/retrieval-augmented-generation/\">Retrieval Augmented Generation (RAG)</a>. By fetching data from the organization’s internal or proprietary sources, RAG extends the capabilities of FMs to specific domains, without needing to retrain the model. It is a cost-effective approach to improving model output so it remains relevant, accurate, and useful in various contexts.</p> \n<p><a href=\"https://aws.amazon.com/bedrock/knowledge-bases/\">Knowledge Bases for Amazon Bedrock</a> is a fully managed capability that helps you implement the entire RAG workflow from ingestion to retrieval and prompt augmentation without having to build custom integrations to data sources and manage data flows.</p> \n<p>Today, we are announcing the availability of <a href=\"https://www.mongodb.com/atlas/database\">MongoDB Atlas</a> as a vector store in Knowledge Bases for Amazon Bedrock. With MongoDB Atlas vector store integration, you can build RAG solutions to securely connect your organization’s private data sources to FMs in <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a>. This integration adds to the list of vector stores supported by Knowledge Bases for Amazon Bedrock, including <a href=\"https://aws.amazon.com/rds/aurora/\">Amazon Aurora PostgreSQL-Compatible Edition</a>, <a href=\"https://aws.amazon.com/opensearch-service/serverless-vector-engine/\">vector engine for Amazon OpenSearch Serverless</a>, <a href=\"https://www.pinecone.io/\">Pinecone</a>, and <a href=\"https://redis.com/\">Redis Enterprise Cloud</a>.</p> \n<p><span><strong>Build RAG applications with MongoDB Atlas and Knowledge Bases for Amazon Bedrock</strong></span><br /> Vector Search in MongoDB Atlas is powered by the <code>vectorSearch</code> index type. In the index definition, you must specify the field that contains the vector data as the <a href=\"https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-type/#about-the-vector-type\">vector type</a>. Before using MongoDB Atlas vector search in your application, you will need to create an index, ingest source data, create vector embeddings and store them in a MongoDB Atlas collection. To perform queries, you will need to convert the input text into a vector embedding, and then use an aggregation pipeline stage to perform vector search queries against fields indexed as the <code>vector</code> type in a <code>vectorSearch</code> type index.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/27/rag.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/27/rag.png\" width=\"2092\" height=\"1196\" /></a></p> \n<p>Thanks to the MongoDB Atlas integration with Knowledge Bases for Amazon Bedrock, most of the heavy lifting is taken care of. Once the vector search index and knowledge base are configured, you can incorporate RAG into your applications. Behind the scenes, Amazon Bedrock will convert your input (prompt) into embeddings, query the knowledge base, augment the FM prompt with the search results as contextual information and return the generated response.</p> \n<p>Let me walk you through the process of setting up MongoDB Atlas as a vector store in Knowledge Bases for Amazon Bedrock.</p> \n<p><span><strong>Configure MongoDB Atlas<br /> </strong></span>Start by <a href=\"https://www.mongodb.com/docs/atlas/tutorial/create-new-cluster/\">creating a MongoDB Atlas cluster</a> on <a href=\"https://www.mongodb.com/docs/atlas/reference/amazon-aws/\">AWS</a>. Choose an <strong>M10 dedicated</strong> cluster tier. Once the cluster is provisioned, create a <a href=\"https://www.mongodb.com/docs/atlas/atlas-ui/databases/#create-a-database\">database</a> and <a href=\"https://www.mongodb.com/docs/atlas/atlas-ui/collections/#create-a-collection\">collection</a>. Next, <a href=\"https://www.mongodb.com/docs/atlas/security-add-mongodb-users/#add-database-users\">create a database user</a> and grant it the <a href=\"https://www.mongodb.com/docs/atlas/mongodb-users-roles-and-privileges/#mongodb-atlasrole-Read-and-write-to-any-database\">Read and write to any database</a> role. Select <strong>Password</strong> as the <strong>Authentication Method</strong>. Finally, <a href=\"https://www.mongodb.com/docs/atlas/security/ip-access-list/#add-ip-access-list-entries\">configure network access</a> to modify the <strong>IP Access List</strong> – add IP address <code>0.0.0.0/0</code> to allow access from <strong>anywhere</strong>.</p> \n<p>Use the following index definition to <a href=\"https://www.mongodb.com/docs/atlas/atlas-vector-search/create-index/#std-label-avs-create-index\">create the Vector Search index</a>:</p> \n<pre><code>{\n  \"fields\": [\n    {\n      \"numDimensions\": 1536,\n      \"path\": \"AMAZON_BEDROCK_CHUNK_VECTOR\",\n      \"similarity\": \"cosine\",\n      \"type\": \"vector\"\n    },\n    {\n      \"path\": \"AMAZON_BEDROCK_METADATA\",\n      \"type\": \"filter\"\n    },\n    {\n      \"path\": \"AMAZON_BEDROCK_TEXT_CHUNK\",\n      \"type\": \"filter\"\n    }\n  ]\n}</code></pre> \n<p><strong><span>Configure the knowledge base<br /> </span></strong>Create an <a href=\"https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_secret.html\">AWS Secrets Manager secret</a> to securely store the MongoDB Atlas database user credentials. Choose <strong>Other</strong> as the <strong>Secret type</strong>. <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-bucket.html\">Create an Amazon Simple Storage Service (Amazon S3) storage bucket</a> and upload the <a href=\"https://docs.aws.amazon.com/pdfs/bedrock/latest/userguide/bedrock-ug.pdf\">Amazon Bedrock documentation user guide PDF</a>. Later, you will use the knowledge base to ask questions about Amazon Bedrock.</p> \n<p><em>You can also use another document of your choice because Knowledge Base <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-ds.html\">supports multiple file formats</a> (including text, HTML, and CSV).</em></p> \n<p>Navigate to the <a href=\"https://console.aws.amazon.com/bedrock?trk=24163938-a3b4-48b3-b5c2-be66044dcad6&amp;sc_channel=el\">Amazon Bedrock console</a> and refer to the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-create.html\">Amzaon Bedrock User Guide</a> to configure the knowledge base. In the <strong>Select embeddings model and configure vector store</strong>, choose <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/titan-embedding-models.html\">Titan Embeddings G1 – Text</a> as the embedding model. From the list of databases, choose <strong>MongoDB Atlas</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/26/kb-create_1.jpg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/26/kb-create_1.jpg\" width=\"2560\" height=\"1644\" /></a></p> \n<p>Enter the basic information for the MongoDB Atlas cluster (<strong>Hostname</strong>, <strong>Database name</strong>, etc.) as well as the <code>ARN</code> of the AWS Secrets Manager secret you had created earlier. In the <strong>Metadata field mapping</strong> attributes, enter the vector store specific details. They should match the vector search index definition you used earlier.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/26/kb-create-2.jpg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/26/kb-create-2.jpg\" width=\"2560\" height=\"2074\" /></a></p> \n<p>Initiate the knowledge base creation. Once complete, <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-ingest.html\">synchronise the data source</a> (S3 bucket data) with the MongoDB Atlas vector search index.</p> \n<p>Once the synchronization is complete, navigate to MongoDB Atlas to confirm that the data has been ingested into the collection you created.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/26/mdb_vector_data.jpg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/26/mdb_vector_data.jpg\" width=\"2278\" height=\"1386\" /></a></p> \n<p>Notice the following attributes in each of the MongoDB Atlas documents:</p> \n<ul> \n <li><code>AMAZON_BEDROCK_TEXT_CHUNK</code> – Contains the raw text for each data chunk.</li> \n <li><code>AMAZON_BEDROCK_CHUNK_VECTOR</code> – Contains the vector embedding for the data chunk.</li> \n <li><code>AMAZON_BEDROCK_METADATA</code> – Contains additional data for source attribution and rich query capabilities.</li> \n</ul> \n<p><span><strong>Test the knowledge base<br /> </strong></span>It’s time to ask questions about Amazon Bedrock by <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-how.html\">querying the knowledge base</a>. You will need to choose a foundation model. I picked <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-claude.html\">Claude v2</a> in this case and used “What is Amazon Bedrock” as my input (query).</p> \n<p><em>If you are using a different source document, adjust the questions accordingly.</em></p> \n<p>You can also change the foundation model. For example, I switched to <a href=\"https://aws.amazon.com/blogs/aws/anthropics-claude-3-sonnet-foundation-model-is-now-available-in-amazon-bedrock/\">Claude 3 Sonnet</a>. Notice the difference in the output and select <strong>Show source details</strong> to see the chunks cited for each footnote.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/26/test_kb_2-1.jpg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/26/test_kb_2-1.jpg\" width=\"2560\" height=\"1320\" /></a></p> \n<p><span><strong>Integrate knowledge base with applications<br /> </strong></span>To build RAG applications on top of Knowledge Bases for Amazon Bedrock, you can use the <a href=\"https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html\">RetrieveAndGenerate</a> API which allows you to query the knowledge base and get a response.</p> \n<p>Here is an example using the <a href=\"https://aws.amazon.com/sdk-for-python/\">AWS SDK for Python (Boto3)</a>:</p> \n<pre><code>import boto3\n\nbedrock_agent_runtime = boto3.client(\n    service_name = \"bedrock-agent-runtime\"\n)\n\ndef retrieveAndGenerate(input, kbId):\n    return bedrock_agent_runtime.retrieve_and_generate(\n        input={\n            'text': input\n        },\n        retrieveAndGenerateConfiguration={\n            'type': 'KNOWLEDGE_BASE',\n            'knowledgeBaseConfiguration': {\n                'knowledgeBaseId': kbId,\n                'modelArn': 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'\n                }\n            }\n        )\n\nresponse = retrieveAndGenerate(\"What is Amazon Bedrock?\", \"BFT0P4NR1U\")[\"output\"][\"text\"]</code></pre> \n<p>If you want to further customize your RAG solutions, consider using the <a href=\"https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Retrieve.html\">Retrieve</a> API, which returns the semantic search responses that you can use for the remaining part of the RAG workflow.</p> \n<pre><code>import boto3\n\nbedrock_agent_runtime = boto3.client(\n    service_name = \"bedrock-agent-runtime\"\n)\n\ndef retrieve(query, kbId, numberOfResults=5):\n    return bedrock_agent_runtime.retrieve(\n        retrievalQuery= {\n            'text': query\n        },\n        knowledgeBaseId=kbId,\n        retrievalConfiguration= {\n            'vectorSearchConfiguration': {\n                'numberOfResults': numberOfResults\n            }\n        }\n    )\n\nresponse = retrieve(\"What is Amazon Bedrock?\", \"BGU0Q4NU0U\")[\"retrievalResults\"]</code></pre> \n<p><span><strong>Things to know<br /> </strong></span></p> \n<ul> \n <li><strong>MongoDB Atlas cluster tier </strong>– This integration requires requires an <a href=\"https://www.mongodb.com/docs/manual/reference/operator/aggregation/listSearchIndexes/\">Atlas cluster tier of at least M10</a>.</li> \n <li><strong>AWS PrivateLink </strong>– For the purposes of this demo, MongoDB Atlas database <strong>IP Access List</strong> was configured to allow access from <strong>anywhere</strong>. For production deployments, <a href=\"https://docs.aws.amazon.com/vpc/latest/privatelink/what-is-privatelink.html\">AWS PrivateLink</a> is the recommended way to have Amazon Bedrock establish a secure connection to your MongoDB Atlas cluster. Refer to the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup.html\">Amazon Bedrock User guide</a> (under <strong>MongoDB Atlas</strong>) for details.</li> \n <li><strong>Vector embedding size </strong>– The dimension size of the vector index and the embedding model should be the same. For example, if you plan to use <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-embed.html\">Cohere Embed</a> (which has a dimension size of <code>1024</code>) as the embedding model for the knowledge base, make sure to configure the vector search index accordingly.</li> \n <li><strong>Metadata filters</strong> – You can <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-ds.html#kb-ds-metadata\">add metadata for your source files</a> to retrieve a well-defined subset of the semantically relevant chunks based on applied metadata filters. Refer to the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html\">documentation</a> to learn more about how to use metadata filters.</li> \n</ul> \n<p><span><strong>Now available<br /> </strong></span>MongoDB Atlas vector store in Knowledge Bases for Amazon Bedrock is available in the US East (N. Virginia) and US West (Oregon) Regions. Be sure to check the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/models-regions.html\">full Region list</a> for future updates.</p> \n<p><span><strong>Learn more</strong></span></p> \n<ul> \n <li><a href=\"https://aws.amazon.com/marketplace/pp/prodview-pp445qepfdy34?trk=d1e124e0-d0fe-4f88-8f09-47d75dee0a58&amp;sc_channel=el\">MongoDB Atlas on AWS Marketplace</a></li> \n <li><a href=\"https://aws.amazon.com/bedrock/knowledge-bases/\">Knowledge Bases for Amazon Bedrock product page</a></li> \n <li><a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base.html\">Knowledge Bases for Amazon Bedrock documentation</a></li> \n</ul> \n<p>Try out the MongoDB Atlas integration with Knowledge Bases for Amazon Bedrock! Send feedback to <a href=\"https://repost.aws/tags/TAQeKlaPaNRQ2tWB6P7KrMag/amazon-bedrock\">AWS re:Post for Amazon Bedrock</a> or through your usual AWS contacts and engage with the generative AI builder community at <a href=\"https://community.aws/generative-ai?trk=e8665609-785f-4bbe-86e8-750a3d3e9e61&amp;sc_channel=el\">community.aws</a>.</p> \n<p>— <a href=\"https://linkedin.com/in/abhirockzz\">Abhishek</a></p>","author":"Abhishek Gupta","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"f0bf203928167f020f7637b1263744a7804c05ce43aee9ee47fecb018b2fe15e","category":"Tech"}