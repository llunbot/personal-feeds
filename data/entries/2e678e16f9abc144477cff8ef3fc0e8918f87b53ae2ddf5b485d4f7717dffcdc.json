{"title":"Amazon Titan Image Generator and watermark detection API are now available in Amazon Bedrock","link":"https://aws.amazon.com/blogs/aws/amazon-titan-image-generator-and-watermark-detection-api-are-now-available-in-amazon-bedrock/","date":1713871537000,"content":"<p>During <a href=\"https://reinvent.awsevents.com/\">AWS re:Invent</a> 2023, we announced the preview of <a href=\"https://aws.amazon.com/bedrock/titan/\">Amazon Titan Image Generator</a>, a <a href=\"https://aws.amazon.com/generative-ai/\">generative artificial intelligence (generative AI)</a> foundation model (FM) that you can use to quickly create and refine realistic, studio-quality images using English natural language prompts.</p> \n<p>I’m happy to share that Amazon Titan Image Generator is now generally available in <a href=\"https://aws.amazon.com/bedrock\">Amazon Bedrock</a>, giving you an easy way to build and scale generative AI applications with new image generation and image editing capabilities, including instant customization of images.</p> \n<p>In <a href=\"https://aws.amazon.com/blogs/aws/amazon-titan-image-generator-multimodal-embeddings-and-text-models-are-now-available-in-amazon-bedrock/\">my previous post</a>, I also mentioned that all images generated by Titan Image Generator contain an invisible watermark, by default, which is designed to help reduce the spread of misinformation by providing a mechanism to identify AI-generated images.</p> \n<p>I’m excited to announce that watermark detection for Titan Image Generator is now generally available in the <a href=\"https://console.aws.amazon.com/bedrock/\">Amazon Bedrock console</a>. Today, we’re also introducing a new <code>DetectGeneratedContent</code> API (preview) in Amazon Bedrock that checks for the existence of this watermark and helps you confirm whether an image was generated by Titan Image Generator.</p> \n<p>Let me show you how to get started with these new capabilities.</p> \n<p><strong><u>Instant image customization using Amazon Titan Image Generator</u></strong><br /> You can now generate new images of a subject by providing up to five reference images. You can create the subject in different scenes while preserving its key features, transfer the style from the reference images to new images, or mix styles from multiple reference images. All this can be done without additional prompt engineering or fine-tuning of the model.</p> \n<p>For this demo, I prompt Titan Image Generator to create an image of a “parrot eating a banana.” In the first attempt, I use Titan Image Generator to create this new image without providing a reference image.</p> \n<p>Note: In the following code examples, I’ll use the <a href=\"https://aws.amazon.com/sdk-for-python/\">AWS SDK for Python (Boto3)</a> to interact with Amazon Bedrock. You can find <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/bedrock-runtime_example_bedrock-runtime_InvokeAmazonTitanImageGeneratorForImageGeneration_section.html\">additional code examples for C#/.NET, Go, Java, and PHP</a> in the Bedrock User Guide.</p> \n<pre><code>import boto3\nimport json\n\nbedrock_runtime = boto3.client(service_name=\"bedrock-runtime\")\n\nbody = json.dumps(\n    {\n        \"taskType\": \"TEXT_IMAGE\",\n        \"textToImageParams\": {\n            \"text\": \"parrot eating a banana\",   \n        },\n        \"imageGenerationConfig\": {\n            \"numberOfImages\": 1,   \n            \"quality\": \"premium\", \n            \"height\": 768,\n            \"width\": 1280,\n            \"cfgScale\": 10, \n            \"seed\": 42\n        }\n    }\n)\nresponse = bedrock_runtime.invoke_model(\n    body=body, \n    modelId=\"amazon.titan-image-generator-v1\",\n    accept=\"application/json\", \n    contentType=\"application/json\"\n)</code></pre> \n<p>You can display the generated image using the following code.</p> \n<pre><code>import io\nimport base64\nfrom PIL import Image\n\nresponse_body = json.loads(response.get(\"body\").read())\n\nimages = [\n    Image.open(io.BytesIO(base64.b64decode(base64_image)))\n    for base64_image in response_body.get(\"images\")\n]\n\nfor img in images:\n    display(img)</code></pre> \n<p>Here’s the generated image:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/17/parrot-banana-new.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/17/parrot-banana-new.png\" alt=\"Image of a parrot eating a banana generated by Amazon Titan Image Generator\" width=\"1280\" height=\"768\" /></a></p> \n<p>Then, I use the new instant image customization capability with the same prompt, but now also providing the following two reference images. For easier comparison, I’ve resized the images, added a caption, and plotted them side by side.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/17/titan-parrot-reference-images.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/17/titan-parrot-reference-images.png\" alt=\"Reference images for Amazon Titan Image Generator\" width=\"1214\" height=\"417\" /></a></p> \n<p>Here’s the code. The new instant customization is available through the <code>IMAGE_VARIATION</code> task:</p> \n<pre><code># Import reference images\nimage_path_1 = \"parrot-cartoon.png\"\nimage_path_2 = \"bird-sketch.png\"\n\nwith open(image_path_1, \"rb\") as image_file:\n    input_image_1 = base64.b64encode(image_file.read()).decode(\"utf8\")\n\nwith open(image_path_2, \"rb\") as image_file:\n    input_image_2 = base64.b64encode(image_file.read()).decode(\"utf8\")\n\n# ImageVariationParams options:\n#   text: Prompt to guide the model on how to generate variations\n#   images: Base64 string representation of a reference image, up to 5 images are supported\n#   similarityStrength: Parameter you can tune to control similarity with reference image(s)\n\nbody = json.dumps(\n    {\n        \"taskType\": \"IMAGE_VARIATION\",\n        \"imageVariationParams\": {\n            \"text\": \"parrot eating a banana\",  # Required\n            \"images\": [input_image_1, input_image_2],  # Required 1 to 5 images\n            \"similarityStrength\": 0.7,  # Range: 0.2 to 1.0\n        },\n        \"imageGenerationConfig\": {\n            \"numberOfImages\": 1,\n            \"quality\": \"premium\",\n            \"height\": 768,\n            \"width\": 1280,\n            \"cfgScale\": 10,\n            \"seed\": 42\n        }\n    }\n)\n\nresponse = bedrock_runtime.invoke_model(\n    body=body, \n    modelId=\"amazon.titan-image-generator-v1\",\n    accept=\"application/json\", \n    contentType=\"application/json\"\n)</code></pre> \n<p>Once again, I’ve resized the generated image, added a caption, and plotted it side by side with the originally generated image. <a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/17/titan-parrot-results.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/04/17/titan-parrot-results.png\" alt=\"Amazon Titan Image Generator instance customization results\" width=\"1208\" height=\"403\" /></a></p> \n<p>You can see how the parrot in the second image that has been generated using the instant image customization capability resembles in style the combination of the provided reference images.</p> \n<p><strong><u>Watermark detection for Amazon Titan Image Generator<br /> </u></strong>All <a href=\"https://aws.amazon.com/bedrock/titan/\">Amazon Titan</a> FMs are built with <a href=\"https://aws.amazon.com/machine-learning/responsible-ai/\">responsible AI</a> in mind. They detect and remove harmful content from data, reject inappropriate user inputs, and filter model outputs. As content creators create realistic-looking images with AI, it’s important to promote responsible development of this technology and reduce the spread of misinformation. That’s why all images generated by Titan Image Generator contain an invisible watermark, by default. Watermark detection is an innovative technology, and Amazon Web Services (AWS) is among the first major cloud providers to widely release built-in watermarks for AI image outputs.</p> \n<p>Titan Image Generator’s new watermark detection feature is a mechanism that allows you to identify images generated by Amazon Titan. These watermarks are designed to be tamper-resistant, helping increase transparency around AI-generated content as these capabilities continue to advance.</p> \n<p><strong>Watermark detection using the console<br /> </strong>Watermark detection is generally available in the <a href=\"https://console.aws.amazon.com/bedrock/\">Amazon Bedrock console</a>. You can upload an image to detect watermarks embedded in images created by Titan Image Generator, including those generated by the base model and any customized versions. If you upload an image that was not created by Titan Image Generator, then the model will indicate that a watermark has not been detected.</p> \n<p>The watermark detection feature also comes with a confidence score. The confidence score represents the confidence level in watermark detection. In some cases, the detection confidence may be low if the original image has been modified. This new capability enables content creators, news organizations, risk analysts, fraud detection teams, and others to better identify and mitigate misleading AI-generated content, promoting transparency and responsible AI deployment across organizations.</p> \n<p><strong>Watermark detection using the API (preview)<br /> </strong>In addition to watermark detection using the console, we’re introducing a new <code>DetectGeneratedContent</code> API (preview) in Amazon Bedrock that checks for the existence of this watermark and helps you confirm whether an image was generated by Titan Image Generator. Let’s see how this works.</p> \n<p>For this demo, let’s check if the image of the green iguana I showed in the <a href=\"https://aws.amazon.com/blogs/aws/amazon-titan-image-generator-multimodal-embeddings-and-text-models-are-now-available-in-amazon-bedrock/\">Titan Image Generator preview post</a> was indeed generated by the model.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/15/2023-amazon-titan-image-iguana-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/15/2023-amazon-titan-image-iguana-1.png\" alt=\"Green iguana generated by Amazon Titan Image Generator\" width=\"1280\" height=\"768\" /></a></p> \n<p>I define the imports, set up the Amazon Bedrock boto3 runtime client, and base64-encode the image. Then, I call the <code>DetectGeneratedContent</code> API by specifying the foundation model and providing the encoded image.</p> \n<pre><code>import boto3\nimport json\nimport base64\n\nbedrock_runtime = boto3.client(service_name=\"bedrock-runtime\")\n\nimage_path = \"green-iguana.png\"\n\nwith open(image_path, \"rb\") as image_file:\n    input_image_iguana = image_file.read()\n\nresponse = bedrock_runtime.detect_generated_content(\n    foundationModelId = \"amazon.titan-image-generator-v1\",\n    content = {\n        \"imageContent\": { \"bytes\": input_image_iguana }\n    }\n)</code></pre> \n<p>Let’s check the response.</p> \n<pre><code>response.get(\"detectionResult\")\n'GENERATED'\nresponse.get(\"confidenceLevel\")\n'HIGH'\n</code></pre> \n<p>The response <strong>GENERATED</strong> with the confidence level <strong>HIGH</strong> confirms that Amazon Bedrock detected a watermark generated by Titan Image Generator.</p> \n<p>Now, let’s check another image I generated using <a href=\"https://aws.amazon.com/bedrock/stable-diffusion/\">Stable Diffusion XL 1.0</a> on Amazon Bedrock. In this case, a “meerkat facing the sunset.”</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/02/17/meerkat-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/02/17/meerkat-1.png\" alt=\"Meerkat facing the sunset\" width=\"1280\" height=\"768\" /></a></p> \n<p>I call the API again, this time with the image of the meerkat.</p> \n<pre><code>image_path = \"meerkat.png\"\n\nwith open(image_path, \"rb\") as image_file:\n    input_image_meerkat = image_file.read()\n\nresponse = bedrock_runtime.detect_generated_content(\n    foundationModelId = \"amazon.titan-image-generator-v1\",\n    content = {\n        \"imageContent\": { \"bytes\": input_image_meerkat }\n    }\n)\n\nresponse.get(\"detectionResult\")\n'NOT_GENERATED'</code></pre> \n<p>And indeed, the response <strong>NOT_GENERATED</strong> tells me that there was no watermark by Titan Image Generator detected, and therefore, the image most likely wasn’t generated by the model.</p> \n<p><strong><u>Using Amazon Titan Image Generator and watermark detection in the console</u></strong><br /> Here’s a short demo of how to get started with Titan Image Generator and the new watermark detection feature in the Amazon Bedrock console, put together by my colleague <a href=\"https://www.linkedin.com/in/nirbhayagarwal/\">Nirbhay Agarwal</a>.</p> \n<p></p> \n<p><strong><u>Availability<br /> </u></strong>Amazon Titan Image Generator, the new instant customization capabilities, and watermark detection in the Amazon Bedrock console are available today in the AWS Regions US East (N. Virginia) and US West (Oregon). Check the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/models-regions.html\">full Region list</a> for future updates. The new <code>DetectGeneratedContent</code> API in Amazon Bedrock is available today in public preview in the AWS Regions US East (N. Virginia) and US West (Oregon).</p> \n<p><strong>Amazon Titan Image Generator, now also available in PartyRock<br /> </strong>Titan Image Generator is now also available in <a href=\"https://partyrock.aws/\">PartyRock</a>, an Amazon Bedrock playground. PartyRock gives you a no-code, AI-powered app-building experience that doesn’t require a credit card. You can use PartyRock to create apps that generate images in seconds by selecting from your choice of image generation models from <a href=\"https://stability.ai/\">Stability AI</a> and <a href=\"https://aws.amazon.com/bedrock/titan/\">Amazon</a>.</p> \n<p><strong><u>More resources<br /> </u></strong>To learn more about the Amazon Titan family of models, visit the <a href=\"https://aws.amazon.com/bedrock/titan/\">Amazon Titan</a> product page. For pricing details, check <a href=\"https://aws.amazon.com/bedrock/pricing/\">Amazon Bedrock Pricing</a>.</p> \n<p>Give Amazon Titan Image Generator a try in <a href=\"https://partyrock.aws/\">PartyRock</a> or explore the model’s advanced image generation and editing capabilities in the <a href=\"https://console.aws.amazon.com/bedrock\">Amazon Bedrock console</a>. Send feedback to <a href=\"https://repost.aws/tags/TAQeKlaPaNRQ2tWB6P7KrMag/amazon-bedrock\">AWS re:Post for Amazon Bedrock</a> or through your usual AWS contacts.</p> \n<p>For more deep-dive technical content and to engage with the generative AI Builder community, visit our generative AI space at <a href=\"https://community.aws/generative-ai?trk=e8665609-785f-4bbe-86e8-750a3d3e9e61&amp;sc_channel=el\">community.aws</a>.</p> \n<p>— <a href=\"https://www.linkedin.com/in/antje-barth/\" target=\"_blank\">Antje</a></p>","author":"Antje Barth","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"2e678e16f9abc144477cff8ef3fc0e8918f87b53ae2ddf5b485d4f7717dffcdc","category":"Tech"}