{"title":"How I Learned To Stop Worrying And Love Multimedia Writing","link":"https://smashingmagazine.com/2024/06/mdx-or-how-i-learned-love-multimedia-writing/","date":1718992800000,"content":"<p>Prior to the World Wide Web, the act of writing remained consistent for centuries. Words were put on paper, and occasionally, people would read them. The tools might change — quills, printing presses, typewriters, pens, what have you — and an adventurous author may perhaps throw in imagery to compliment their copy.</p>\n<p>We all know that the web shook things up. With its arrival, writing could become interactive and dynamic. As web development progressed, the creative possibilities of digital content grew — and continue to grow — exponentially. <strong>The line between web writing and web technologies is blurry these days</strong>, and by and large, I think that’s a good thing, though it brings its own challenges. As a sometimes-engineer-sometimes-journalist, I straddle those worlds more than most and have grown to view the overlap as the future. </p>\n<p>Writing for the web is different from traditional forms of writing. It is not a one-size-fits-all process. I’d like to share the benefits of writing content in digital formats like MDX using a personal project of mine as an example. And, by the end, my hope is to convince you of the greater writing benefits of MDX over more traditional formats.</p>\nA Little About Markdown\n<p>At its most basic, MDX is <a href=\"https://www.markdownguide.org/\">Markdown</a> with components in it. For those not in the know, <strong>Markdown</strong> is a lightweight markup language <a href=\"https://daringfireball.net/projects/markdown/\">created by John Gruber in 2003</a>, and it’s <em>everywhere</em> today. GitHub, Trello, Discord — all sorts of sites and services use it. It’s especially popular for authoring blog posts, which makes sense as blogging is very much the digital equivalent of journaling. The syntax doesn’t “get in the way,” and many content management systems support it.</p>\n<p>Markdown’s goal is an “<a href=\"https://web.archive.org/web/20040402182332/http://daringfireball.net/projects/markdown/\">easy-to-read and easy-to-write plain text format</a>” that can readily be converted into XHTML/HTML if needed. Since its inception, Markdown was supposed to facilitate a writing workflow that integrated the physical act of writing with digital publishing. </p>\n<p>We’ll get to actual examples later, but for the sake of explanation, compare a block of text written in HTML to the same text written in Markdown.</p>\n<p>HTML is a pretty legible format as it is:</p>\n<div>\n<pre><code>&lt;h2&gt;Post Title&lt;/h2&gt;\n\n&lt;p&gt;This is an example block of text written in HTML. We can link things up like this, or format the code with &lt;strong&gt;bolding&lt;/strong&gt; and &lt;em&gt;italics&lt;/em&gt;. We can also make lists of items:&lt;/p&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;Like this item&lt;li&gt;\n  &lt;li&gt;Or this one&lt;/li&gt;\n  &lt;li&gt;Perhaos a third?&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;img src=\"image.avif\" alt=\"And who doesn't enjoy an image every now and then?\"&gt;\n</code></pre>\n</div>\n\n<p>But Markdown is somehow even less invasive:</p>\n<div>\n<pre><code>## Post Title\n\nThis is an example block of text written in HTML. We can link things up like this or format the code with **bolding** and *italics*. We can also make lists of items:\n\n- Like this item\n- Or this one\n- Perhaos a third?\n\n<img src=\"image.avif\" />\n</code></pre>\n</div>\n\n<p>I’ve become a Markdown disciple since I first learned to code. Its <strong>clean</strong> and relatively <strong>simple syntax</strong> and <strong>wide compatibilities</strong> make it no wonder that Markdown is as pervasive today as it is. Having structural semantics akin to HTML while preserving the flow of plain text writing is a good place to be. </p>\n<p>However, it could be accused of being a bit <em>too clean</em> at times. If you want to communicate with words and images, you’re golden, but if you want to jazz things up, you’ll find yourself looking further afield for other options.</p>\n<p>Gruber set out to create a “<a href=\"https://daringfireball.net/projects/markdown/syntax#html\">format for writing for the web</a>,” and given its ongoing popularity, you have to say he succeeded, yet the web 20 years ago is a long way away from what it is today.</p>\n<p>This is the all-important context for what I want to discuss about MDX because <strong>MDX is an offshoot of Markdown</strong>, only more capable of supporting richer forms of multimedia — and even user interaction. But before we get into that, we should also discuss the concept of <strong>web components</strong> because that’s the second significant piece that MDX brings to the table.</p>\n<h3>Further Reading</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/02/thoughts-on-markdown/\">Thoughts On Markdown</a>” by Knut Melvær </li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/09/improving-accessibility-of-markdown/\">Improving The Accessibility Of Your Markdown</a>” by Eric Bailey</li>\n</ul>\nA Little About Components\n<p>The move towards richer multimedia websites and apps has led to a thriving ecosystem of web development frameworks and libraries, including React, Vue, Svelte, and Astro, to name a few. The idea that we can have reusable components that are not only interactive but also respond to each other has driven this growth and continues to push on evolving web platform features like <a href=\"https://www.smashingmagazine.com/2022/04/cta-modal-build-web-component/\">web components</a>.</p>\n<p>MDX is like a bridge that connects Markdown with modern web tooling. Simply put, MDX weds Markdown’s simplicity with the creative possibilities of modern web frameworks.</p>\n<p>By <strong>leaning into the overlaps</strong> rather than trying to abstract them away at all costs, we find untold potential for beautiful digital content.</p>\n<h3>Further Reading</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/01/key-good-component-design-selfishness/\">The Key To Good Component Design Is Selfishness</a>” by Daniel Yuschick</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/09/developer-decisions-building-flexible-components/\">Developer Decisions For Building Flexible Components</a>” by Michelle Barker</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/06/css-javascript-requirements-accessible-components/\">When CSS Isn’t Enough: JavaScript Requirements For Accessible Components</a>” by Stephanie Eckles</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/03/complete-guide-accessible-front-end-components/\">A Complete Guide To Accessible Front-End Components</a>” by Vitaly Friedman</li>\n</ul>\nA Case Study\n<p>My own experience with MDX took shape in a side project of mine: <a href=\"https://teeline.online/\">teeline.online</a>. To cut a long story short, before I was a software engineer, I was a journalist, and part of my training involved learning a type of shorthand called Teeline. What it boils down to is ripping out as many superfluous letters as possible — I like to call this process “disemvowelment” — then using Teeline’s alphabet to write the remaining content. This has allowed people like me to write lots of words very quickly.</p>\n<p>During my studies, I found online learning resources lacking, so as my engineering skills improved, I started working on the kind of site I’d have used when I was a student if it was available. Hence, teeline.online.</p>\n<p>I built the teeling.online site with the <a href=\"https://svelte.dev\">Svelte</a> framework for its components. The site’s centerpiece is a dataset of shorthand characters and combinations with which hundreds of outlines can be rendered, combined, and animated as SVG paths.</p>\n<p><img src=\"https://files.smashing.media/articles/mdx-or-how-i-learned-love-multimedia-writing/1-card-component-embedded-between-two-paragraphs.png\" /></p>\n<p><img src=\"https://files.smashing.media/articles/mdx-or-how-i-learned-love-multimedia-writing/2-special-outlines.png\" /></p>\n<p>Likewise, Teeline’s “disemvowelment” script could be wired into a single component that I could then use as many times as I like.</p>\n<p><img src=\"https://files.smashing.media/articles/mdx-or-how-i-learned-love-multimedia-writing/3-disemvowelment.png\" /></p>\n<p>Then, of course, as is only natural when working with components, I could combine them to show the Teeline evolution that converts longhand words into shorthand outlines.</p>\n<p><img src=\"https://files.smashing.media/articles/mdx-or-how-i-learned-love-multimedia-writing/4-connecting-letters.png\" /></p>\n<p>The Markdown, meanwhile, looks as simple as this:</p>\n<p><img src=\"https://files.smashing.media/articles/mdx-or-how-i-learned-love-multimedia-writing/5-markdown.png\" /></p>\n<p>It’s not exactly the sort of complex codebase you might expect for an app. Meanwhile, the files themselves can sit in a nice, tidy directory of their own:</p>\n<p><img src=\"https://files.smashing.media/articles/mdx-or-how-i-learned-love-multimedia-writing/6-file-directory.png\" /></p>\n<p>The syllabus is neatly filed away in its own folder. With a bit of metadata sprinkled in, I have everything I need to render an entire section of the site using <a href=\"https://kit.svelte.dev/docs/routing\">routing</a>. The setup feels like a <strong>fluid medium between worlds</strong>. If you want to write with words and pictures, you can. If an idea comes to mind for a component that would better express what you’re going for, you can go make it and drop it in.</p>\n<p>In fairness, a “WordToOutline” component like this might not mean much to Teeline newcomers, though with such a clear connection between the Markdown and the rendered pages, it’s not much of a stretch to work out what it is. And, of course, there’s always the likes of services like <a href=\"https://storybook.js.org/\">Storybook</a> that can be used to organize component libraries as they grow. </p>\n<p><img src=\"https://files.smashing.media/articles/mdx-or-how-i-learned-love-multimedia-writing/7-animated-outline-card-component.png\" /></p>\n<p>The raw form of multimedia content can be pretty unsightly — something that needs to be kept at arm’s length by content management systems. With MDX — and its ilk — the content feels rather friendly and legible. </p>\n<h3>Benefits</h3>\n<p>I think you can start to see some of the benefits of an MDX setup like this. There are two key benefits in particulart that I think are worth calling out.</p>\n<h4>Editorial Benefits</h4>\n<p>First and foremost, <strong>MDX doesn’t distract the writing and editorial flow</strong> of working with content. When we’re working with traditional code languages, even HTML, the code format is convoluted with things like opening and closing tags. And it’s even more convoluted if we need the added complexity of embedding components in the content.</p>\n<p>MDX (and Markdown, for that matter) is much less verbose. Content is a first-class citizen that takes up way less space than typical markup, making it clear and legible. And where we need the complex affordance of components, those can be dropped in without disrupting that nice editorial experience.</p>\n<p>Another key benefit of using MDX is <strong>reusability</strong>. If, for example, I want to display the same information as images instead, each image would have to be bespoke. But we all know how inefficient it is to maintain content in raster images — it requires making edits in a completely different application, which is highly inconvenient. With an old-school approach, if I update the design of the site, I’m left having to create dozens of images in the new style.</p>\n<p>With MDX (or an equivalent like MDsveX), I only need to make the change once, and it updates everywhere. Having done the leg work of building reusable components, I can weave them throughout the syllabus as I see fit, safe in the knowledge that updates will roll out across the board — and do it without affecting the editorial experience whatsoever.</p>\n<p>Consider the time it would take to create images or videos representing the same thing. Over time, using fixed assets like images becomes a form of technical — or perhaps <em>editorial</em> — debt that adds up over time, while a multimedia approach that leans into components proves to be faster and more flexible than vanilla methods.</p>\n<h4>Tech Benefits</h4>\n<p>I just made the point that working with reusable components in MDX allows Markdown content to become more robust without affecting the content’s legibility as we author it. Using Svelte’s version of MDX, MDsveX, I was able to combine the clean, readable conventions of Markdown with the rich, interactive potential of components.</p>\n<p><img src=\"https://files.smashing.media/articles/mdx-or-how-i-learned-love-multimedia-writing/8-mdx-code.png\" /></p>\n<h3>Caveats</h3>\n<p>It’s only right that all my gushing about MDX and its benefits be tempered with a reality check or two. Like anything else, MDX has its limitations, and your mileage with it will vary.</p>\n<p>That said, I believe that those limitations are likely to show up when MDX is perhaps not the best choice for a particular project. There’s a sweet spot that MDX fills and it’s when we need to <strong>sprinkle in additional web functionality to the content</strong>. We get the best of two worlds: minimal markup and modern web features.</p>\n<p>But if components aren’t needed, MDX is overkill when all you need is a clean way to write content that ports nicely into HTML to be consumed by whatever app or platform you use to display it on the web.</p>\n<p>Without components, MDX is akin to caring for a skinned elbow with a cast; it’s way more than what’s needed in that situation, and the returns you get from Markdown’s legibility will diminish.</p>\n<p>Similarly, if your technical needs go beyond components, you may be looking at a more complex architecture than what MDX can support, and you would be best leaning into what works best for content in the particular framework or stack you’re using.</p>\n<p>Code doesn’t age as well as words or images do. An MDX-esque approach does sign you up for the <strong>maintenance work of dependency updates</strong>, <strong>refactoring</strong>, and — god forbid — <strong>framework migrations</strong>. I haven’t had to face the last of those realities yet, though I’d say the first two are well worth it. Indeed, they’re good habits to keep.</p>\n<h3>Key Takeaways</h3>\n<p>Writing with MDX continues to be a learning experience for me, but it’s already made a positive impact on my editorial work. </p>\n<p>Specifically, I’ve found that <strong>MEX improves the quality of my writing</strong>. I think more laterally about how to convey ideas.</p>\n<blockquote>Is what I’m saying best conveyed in words, an image, or a data visualization? Perhaps an interactive game?</blockquote>\n\n<p>There is way more potential to <strong>enhance my words with componentry</strong> than I would get with Markdown alone, opening more avenues for what I can say and how I say it.</p>\n<p>Of course, those components do not come for free. MDX does sign you up to build those, regardless of whether you have a set of predefined components included in your framework. At the same time, I’d argue that the <strong>opportunities MDX opens up for writing greatly outweigh having to build or maintain a few components</strong>.</p>\n<p>If MDX had been around in the age of Leonardo Di Vinci, perhaps he may have reached for MDX in his journals. I know I’m taking a great leap of assumption here, but <a href=\"https://www.vam.ac.uk/articles/leonardo-da-vincis-notebooks\">the complexity of what he was writing and trying to describe</a> in technical terms with illustrations would have benefited greatly from MDX for everything from interactive demos of his ideas to a better writing experience overall.</p>\n<h4>Further Reading</h4>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/09/power-pen-paper-sketching/\">The Power of Pen and Paper Sketching</a>” by Tracy Osborne</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/03/leonardo-da-vinci-teach-web-design/\">What Leonardo Da Vinci Can Teach Us About Web Design</a>” by Frederick O’Brien</li>\n</ul>\nMultimedia Writing\n<p>In many respects, MDX’s rich, varied way of approaching content is something that Markdown — and writing for the web in general — encourages already. We don’t think only in terms of words but of links, images, and semantic structure. MDX and its equivalents merely take the lid off the cookie jar so we can enhance our work.</p>\n<p><em>Wouldn’t it be nice if…</em> is a redundant turn of phrase on the web. There may be technical hurdles — or, in my case, skill and knowledge hurdles — but it’s a buzz to think about ways in which your thoughts can best manifest on screen.</p>\n<p>At the same time, the simplicity of Markdown is so unintrusive. If someone wants to write content formatted in vanilla Markdown, it’s totally possible to do that without trading up to MDX.</p>\n<p>Just having the possibility of bespoke multimedia content is enough to change the creative process. It leaves you using words because you want to, not because you have to.</p>\n<p>Why describe the solar system when you can render an explorable one? Why have a picture of a proposed skyscraper when you can display a 3D model? Writing with MDX (or, more accurately, MDsveX) has changed my entire thought process. Potential answers to the question, <em>How do I best get this across?</em>, become more expansive.</p>\n<h3>As You Please</h3>\n<p>Good things happen when worlds collide. New possibilities emerge when seemingly disparate things come together. Many content management systems shield writers — and writing — from code. To my mind, this is like shielding painters from wider color palettes, chefs from exotic ingredients, or sculptors from different types of tools.</p>\n<p>Leaning into the overlap between writing and coding gets us closer to one of the web’s great joys: if you can imagine it, you can probably do it.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"e15d6ad0e5ad84028bfd82e7e184b968275e9260d564154cf3044b130d20ae0c","category":"Tech"}