{"title":"IAM Access Analyzer Update: Extending custom policy checks & guided revocation","link":"https://aws.amazon.com/blogs/aws/iam-access-analyzer-update-extending-custom-policy-checks-guided-revocation/","date":1718113754000,"content":"<p>We are making <a href=\"https://aws.amazon.com/iam/access-analyzer/\">IAM Access Analyzer</a> even more powerful, extending custom policy checks and adding easy access to guidance that will help you to fine-tune your IAM policies. Both of these new features build on the <a href=\"https://aws.amazon.com/blogs/aws/iam-access-analyzer-updates-find-unused-access-check-policies-before-deployment/\">Custom Policy Checks and the Unused Access analysis</a> that were launched at re:Invent 2023. Here’s what we are launching:</p> \n<p><strong>New Custom Policy Checks</strong> – Using the power of automated reasoning, the new checks help you to detect policies that grant access to specific, critical AWS resources, or that grant any type of public access. Both of the checks are designed to be used ahead of deployment, possibly as part of your CI/CD pipeline, and will help you proactively detect updates that do not conform to your organization’s security practices and policies.</p> \n<p><strong>Guided Revocation</strong> – IAM Access Analyzer now gives you guidance that you can share with your developers so that they can revoke permissions that grant access that is not actually needed. This includes unused roles, roles with unused permissions, unused access keys for IAM users, and unused passwords for IAM users. The guidance includes the steps needed to either remove the extra items or to replace them with more restrictive ones.</p> \n<p><span><strong>New Custom Policy Checks</strong></span><br /> The new policy checks can be invoked from the command line or by calling an API function. The checks examine a policy document that is supplied as part of the request and return a <code>PASS</code> or <code>FAIL</code> value. In both cases, <code>PASS</code> indicates that the policy document properly disallows the given access, and <code>FAIL</code> indicates that the policy might allow some or all of the permissions. Here are the new checks:</p> \n<p><strong>Check No Public Access</strong> – This check operates on a resource policy, and checks to see if the policy grants public access to a specified resource type. For example, you can check a policy to see if it allows public access to an S3 bucket by specifying the <code>AWS::S3::Bucket</code> resource type. Valid resource types include DynamoDB tables and streams, EFS file systems, OpenSearch domains, Kinesis streams and stream consumers, KMS keys, Lambda functions, S3 buckets and access points, S3 Express directory buckets, S3 Outposts buckets and access points, Glacier, Secrets Manager secrets, SNS topics and queues, and IAM policy documents that assume roles. The list of valid resource types will expand over time and can be found in the <a href=\"https://docs.aws.amazon.com/access-analyzer/latest/APIReference/API_CheckNoPublicAccess.html\">CheckNoPublicAccess</a> documentation,</p> \n<p>Let’s say that I have a policy which accidentally grants public access to an <a href=\"https://aws.amazon.com/sqs/\">Amazon Simple Queue Service (Amazon SQS)</a> queue. Here’s how I check it:</p> \n<div> \n <pre><code>$ aws accessanalyzer check-no-public-access --policy-document file://resource.json \\\n  --resource-type AWS::SQS::Queue --output json</code></pre> \n</div> \n<p>And here is the result:</p> \n<div> \n <pre><code>{\n    \"result\": \"FAIL\",\n    \"message\": \"The resource policy grants public access for the given resource type.\",\n    \"reasons\": [\n        {\n            \"description\": \"Public access granted in the following statement with sid: SqsResourcePolicy.\",\n            \"statementIndex\": 0,\n            \"statementId\": \"SqsResourcePolicy\"\n        }\n    ]\n}\n</code></pre> \n</div> \n<p>I edit the policy to remove the access grant and try again, and this time the check passes:</p> \n<div> \n <pre><code>{\n    \"result\": \"PASS\",\n    \"message\": \"The resource policy does not grant public access for the given resource type.\"\n}\n</code></pre> \n</div> \n<p><strong>Check Access Not Granted</strong> – This check operates on a single resource policy or identity policy at a time. It also accepts an list of actions and resources, both in the form that are acceptable as part of an IAM policy. The check sees if the policy grants unintended access to any of the resources in the list by way of the listed actions. For example, this check could be used to make sure that a policy does not allow a critical CloudTrail trail to be deleted:</p> \n<div> \n <pre><code>$ aws accessanalyzer check-access-not-granted --policy-document file://ct.json \\\n  --access resources=\"arn:aws:cloudtrail:us-east-1:123456789012:trail/MySensitiveTrail\" \\\n  --policy-type IDENTITY_POLICY --output json</code></pre> \n</div> \n<p>IAM Access Analyzer indicates that the check fails:</p> \n<div> \n <pre><code>{\n    \"result\": \"FAIL\",\n    \"message\": \"The policy document grants access to perform one or more of the listed actions or resources.\",\n    \"reasons\": [\n        {\n            \"description\": \"One or more of the listed actions or resources in the statement with index: 0.\",\n            \"statementIndex\": 0\n        }\n    ]\n}\n</code></pre> \n</div> \n<p>I fix the policy and try again, and this time the check passes, indicating that the policy does not grant access to the listed resources:</p> \n<div> \n <pre><code>{\n    \"result\": \"PASS\",\n    \"message\": \"The policy document does not grant access to perform the listed actions or resources.\"\n}\n</code></pre> \n</div> \n<p><span><strong>Guided Revocation</strong></span><br /> In my earlier post I showed you how IAM Access Analyzer discovers and lists IAM items that grant access which is not actually needed. With today’s launch, you now get guidance to help you (or your developer team) to resolve these findings. Here are the latest findings from my AWS account:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/06/05/bbb_findings_2.png\" width=\"894\" height=\"583\" /></p> \n<p>Some of these are leftovers from times when I was given early access to a service so that I could use and then blog about it; others are due to my general ineptness as a cloud admin! Either way, I need to clean these up. Let’s start with the second one, <strong>Unused access key</strong>. I click on the item and can see the new <strong>Recommendations</strong> section at the bottom:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/06/05/bbb_unkey_1.png\" width=\"893\" height=\"797\" /></p> \n<p>I can follow the steps and delete the access key or I can click <strong>Archive</strong> to remove the finding from the list of active findings and add it to the list of archived ones. I can also create an archive rule that will do the same for similar findings in the future. Similar recommendations are provided for unused IAM users, IAM roles, and passwords.</p> \n<p>Now let’s take a look at a finding of <strong>Unused permissions</strong>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/06/05/bbb_unperm_1.png\" width=\"893\" height=\"681\" /></p> \n<p>The recommendation is to replace the existing policy with a new one. I can preview the new policy side-by-side with the existing one:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/06/05/bbb_old_new_perms_1.png\" width=\"894\" height=\"392\" /></p> \n<p>As in the first example I can follow the steps or I can archive the finding.</p> \n<p>The findings and the recommendations are also available from the command line. I generate the recommendation by specifying an analyzer and a finding from it:</p> \n<div> \n <pre><code>$ aws accessanalyzer generate-finding-recommendation \\\n  --analyzer-arn arn:aws:access-analyzer-beta:us-west-2:123456789012:analyzer/MyAnalyzer \\\n  --id 67110f3e-05a1-4562-b6c2-4b009e67c38e</code></pre> \n</div> \n<p>Then I retrieve the recommendation. In this example, I am filtering the output to only show the steps since the entire JSON output is fairly rich:</p> \n<div> \n <pre><code>$ aws accessanalyzer get-finding-recommendation \\\n  --analyzer-arn arn:aws:access-analyzer-beta:us-west-2:123456789012:analyzer/MyAnalyzer \\\n  --id 67110f3e-05a1-4562-b6c2-4b009e67c38e --output json | \\\n  jq .recommendedSteps[].unusedPermissionsRecommendedStep.recommendedAction\n\"CREATE_POLICY\"\n\"DETACH_POLICY\"</code></pre> \n</div> \n<p>You can use these commands (or the equivalent API calls) to integrate the recommendations into your own tools and systems.</p> \n<p><span><strong>Available Now</strong></span><br /> The new checks and the resolution steps are available now and you can start using them today in all public AWS regions!<strong><br /> </strong></p> \n<p>— <a href=\"https://twitter.com/jeffbarr\">Jeff</a>;</p>","author":"Jeff Barr","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"ea733966c84be41e4d40d8bec9f2537e1a37fca83ea133a8ae6db668b338c5a6","category":"Tech"}