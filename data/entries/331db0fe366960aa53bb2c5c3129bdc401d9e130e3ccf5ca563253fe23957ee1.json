{"title":"Write Better CSS By Borrowing Ideas From JavaScript Functions","link":"https://smashingmagazine.com/2023/04/write-better-css-borrow-ideas-javascript-functions/","date":1682668800000,"content":"<p>I like to think of writing CSS, like writing functions that describe how your layouts respond to change. When we forget the principles of writing a good function, here’s some of what can happen:</p>\n<ul>\n<li><strong>We lose time.</strong><br />When we have to worry about side effects, changes take longer.</li>\n<li><strong>We create bugs.</strong><br />My favorite example is an online store where the “Buy” buttons were hidden due to misuse of viewport units.</li>\n<li><strong>We build fewer features.</strong><br />When changes are scary and time-consuming, they often don’t happen.</li>\n</ul>\n<p>Let’s look at how we can borrow best practices and ideas from writing good JavaScript functions for writing CSS that is easy to use, free from unwanted side effects, and resilient to change.</p>\nAvoiding Unwanted Side Effects\n<p>When you change something in your system, it shouldn’t change something else by surprise. That’s as true for CSS as it is for JavaScript functions.</p>\n<p>Let’s look at this arrow icon in a circle as an example:</p>\n<p><img src=\"https://files.smashing.media/articles/write-better-css-borrow-ideas-functions/arrow-icon.png\" /></p>\n<p>It looks fine, but let’s say we want a narrower arrow icon:</p>\n<p><img src=\"https://files.smashing.media/articles/write-better-css-borrow-ideas-functions/squished-arrow-icon.png\" /></p>\n<p>Now the containing circle is squished! This is an example of an unwanted side effect. Using a narrower arrow ruins the shape of the circle.</p>\n<p>If we inspect the element in DevTools, we can see that the shape of the containing circle depends on the <strong>size of the inner icon</strong> and the <strong>padding around the icon</strong>.</p>\n<p><img src=\"https://files.smashing.media/articles/write-better-css-borrow-ideas-functions/squished-arrow-icon-padding.png\" /></p>\n<p>Ideally, the interior icon shouldn’t change the shape of the containing circle. Here’s a demo of how to fix the squished icon:</p>\n<p><img src=\"https://files.smashing.media/articles/write-better-css-borrow-ideas-functions/three-up-cards.png\" /></p>\n<p>The CSS sets <code>max-width: 900px</code> on the container, and each card gets a little breathing room with <code>padding: 5vw</code>. This may look fine on the surface, but there’s a problem: the container has an upper bound while the padding doesn’t. As the screen gets wider, the content gets crushed.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/RwepaQQ\">Example of padding crushing content [forked]</a> by <a href=\"https://codepen.io/yaphi1\">Yaphi</a>.</p>\n<p>Possible solutions include:</p>\n<ul>\n<li>Using viewport or container breakpoints to keep the padding under control,</li>\n<li>Using the CSS <code>min()</code> function to set an upper bound on the padding, or</li>\n<li>Using fixed units, such as pixels, that won’t grow indefinitely with the window.</li>\n</ul>\n<p>What these solutions have in common is that they account for what happens when the viewport width changes. Similarly, we can avoid many CSS problems by considering the layout as output and anticipating what could happen when the inputs change.</p>\n<p>Ahmad Shadeed has a great name for this technique: <a href=\"https://defensivecss.dev/\">Defensive CSS</a>. The idea is that we can “future-proof” styles by thinking about them as inputs that output a UI and anticipating situations that would diminish the output’s usability.</p>\nConclusion\n<p>Coding a layout isn’t about laying things out on a page but <strong>describing how they respond to change</strong>. For that reason, it’s risky to treat CSS like constants rather than functions.</p>\n<p>Fortunately, the same ideas that help us write good functions can help us write good CSS, namely:</p>\n<ul>\n<li>Avoid unwanted side effects.</li>\n<li>Use the right parameters.</li>\n<li>Consider how inputs change outputs.</li>\n</ul>\n<p>What ties these ideas together is a question I hope you’ll ask yourself the next time you write CSS, <em>How should this layout respond to change?</em></p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/2023/03/dynamic-donut-charts-tailwind-css-react/\">How To Create Dynamic Donut Charts With TailwindCSS And React</a>, Paul Scanlon</li>\n<li><a href=\"https://www.smashingmagazine.com/2023/02/build-magazine-layout-css-grid-areas/\">How To Build A Magazine Layout With CSS Grid Areas</a>, Jennifer Brehm</li>\n<li><a href=\"https://www.smashingmagazine.com/2023/01/level-up-css-skills-has-selector/\">Level Up Your CSS Skills With The :has() Selector</a>, Stephanie Eckles</li>\n<li><a href=\"https://www.smashingmagazine.com/2022/05/lesser-known-underused-css-features-2022/\">Lesser-Known And Underused CSS Features In 2022</a>, Adrian Bece</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"331db0fe366960aa53bb2c5c3129bdc401d9e130e3ccf5ca563253fe23957ee1","category":"Tech"}