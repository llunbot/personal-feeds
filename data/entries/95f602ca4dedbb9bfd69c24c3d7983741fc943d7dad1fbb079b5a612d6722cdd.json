{"title":"Terraform Cloud Operator v2 for Kubernetes is now GA","link":"https://www.hashicorp.com/blog/terraform-cloud-operator-v2-for-kubernetes-is-now-ga","date":1699376400000,"content":"<p>Initially launched as v1 in <a href=\"https://www.hashicorp.com/blog/announcing-general-availability-hashicorp-terraform-cloud-operator-for-kubernetes\">February 2021</a>, the Terraform Cloud Operator for Kubernetes enabled users to manage Terraform Cloud workspaces through a single Kubernetes custom resource. Using the Operator brings Terraform Cloud’s proper state handling and locking, sequential execution of runs, and established patterns for injecting secrets and provisioning resources into your Kubernetes-native workflows. </p>\n\n<p>We’ve been working on a v2 iteration of the Operator that now uses multiple custom resources and today, we’re making <a href=\"https://github.com/hashicorp/terraform-cloud-operator\">Terraform Cloud Operator v2</a> generally available. Note that the Operator works with both Terraform Cloud and Terraform Enterprise. This post reviews the details and benefits of the enhanced v2.  </p>\n\n<h2>Terraform Cloud Operator v2 additions</h2>\n\n<p>The v2 release of the Terraform Cloud Operator focuses on three main areas to remove scaling limitations around Kubernetes-Terraform Cloud workflows: </p>\n\n<h3>Flexible resource management</h3>\n\n<p>Instead of a single <code>Workspace</code> custom resource that managed both workspaces and API-driven Terraform runs, the Operator now features multiple custom resources, each with separate controllers for different Terraform Cloud resources. The Terraform Cloud Operator v2 includes three custom resource definitions to help manage Terraform Cloud resources:</p>\n\n<ul>\n<li><code>AgentPool</code> manages <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/agents/agent-pools\">Terraform Cloud agent pools</a> with auto-scaling support</li>\n<li><code>Workspace</code> manages Terraform Cloud workspaces</li>\n<li><code>Module</code> implements API-driven run workflows to provision infrastructure</li>\n</ul>\n\n<p>Splitting the v1 Workspace into separate Workspace and Module resources in the second version of the Operator was the result of user feedback, which led us to conclude that a clearer distinction between the entities will make it easier to deploy and manage workspaces at scale. For example, using the separate Module resource, users can execute API-based runs in workspaces that are not managed by the Operator. Similarly, user feedback led to the addition of the AgentPool resource to simplify the deployment of flexible agent pools within Kubernetes clusters. </p>\n\n<h3>Namespace management</h3>\n\n<p>The introduction of the <code>--namespace</code> option allows users to tailor the Operator’s watch scope to specific namespaces, enabling more fine-grained resource management as setups grow.</p>\n\n<h3>Configurable synchronization</h3>\n\n<p>With the new <code>--sync-period</code>, synchronization between custom resources and Terraform Cloud is faster than ever, ensuring timely updates and smoother operations.</p>\n\n<h3>Observability</h3>\n\n<p>Metrics for each controller are exposed in standard Prometheus format to provide administrators with a familiar way to collect usage and performance data from the Operator. The v2 Operator also produces more detailed logging and controllers produce event messages for each custom resource.</p>\n\n<h2>Workspace and module custom resource examples</h2>\n\n<p>Workspaces in Terraform Cloud contain all necessary components for Terraform to manage distinct sets of infrastructure. Modules act as reusable packages of multiple resources, utilized collectively.  </p>\n\n<p>The <code>Workspace</code> resource allows users to create Terraform Cloud workspaces and manage <a href=\"https://github.com/hashicorp/terraform-cloud-operator/blob/main/docs/features.md#workspace\">many settings</a> including execution mode, team permissions, variable values, version control settings, notifications, and more. Below is a sample <code>Workspace</code> resource to create an <code>example-workspace</code> with <code>remote</code> execution mode.</p>\n<pre><code>---\napiVersion: app.terraform.io/v1alpha2\nkind: Workspace\nmetadata:\n  name: example-workspace\nspec:\n  organization: example-org\n  token:\n    secretKeyRef:\n      name: tfc-token\n      key: token\n  name: example-workspace\n  description: Example workspace\n  applyMethod: auto </code></pre><p>Now you can also create a <code>Module</code> resource to trigger an API-driven run within that workspace by sourcing a Terraform module from the public or private registry:</p>\n<pre><code>---\napiVersion: app.terraform.io/v1alpha2\nkind: Module\nmetadata:\n  name: example-module\nspec:\n  organization: example-org\n  token:\n    secretKeyRef:\n      name: tfc-token\n      key: token\n  destroyOnDeletion: true\n  module:\n    source: \"example-org/examples/example\"\n    version: \"1.2.3\"\n  workspace:\n    name: example-workspace</code></pre><h2>Terraform Cloud agents custom resource examples</h2>\n\n<p>The other custom resource that was added to the Terraform Cloud Operator v2 — the <code>AgentPool</code> resource — allows you  to create, configure, and scale Terraform Cloud agent pools based on demand. <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/agents\">Terraform Cloud agents</a> enable communication between Terraform Cloud and isolated, private networks or on-premises infrastructure. Once set up, these agent pools can be linked to your workspaces based on your specific needs.</p>\n\n<p>Below is a sample <code>AgentPool</code> resource. This will create an agent pool, create a Kubernetes deployment for the agents, and automatically scale the number of replicas of that deployment to match the queue of runs that are waiting for an agent.</p>\n<pre><code>---\napiVersion: app.terraform.io/v1alpha2\nkind: AgentPool\nmetadata:\n  name: example-agent-pool\nspec:\n  organization: example-org\n  token:\n    secretKeyRef:\n      name: tfc-token\n      key: token\n  name: example-agent-pool\n  agentTokens:\n  - name: example-token\n  agentDeployment:\n    spec:\n      containers:\n      - name: tfc-agent\n        image: \"hashicorp/tfc-agent:1.13.1\"\n  autoscaling:\n    minReplicas: 1\n    maxReplicas: 3\n    cooldownPeriodSeconds: 60\n    targetWorkspaces:\n    - wildcardName: example-*</code></pre><p>You can then configure a <code>Workspace</code> resource to use this agent pool:</p>\n<pre><code>---\napiVersion: app.terraform.io/v1alpha2\nkind: Workspace\nmetadata:\n  name: example-workspace\nspec:\n  organization: example-org\n  token:\n    secretKeyRef:\n      name: tfc-token\n      key: token\n  name: example-workspace\n  description: Example workspace\n  applyMethod: auto\n  executionMode: agent\n  agentPool:\n    name: example-agent-pool\n  tags:\n  - example</code></pre><h2>Key high-level benefits</h2>\n\n<p>The latest version of the Terraform Cloud Operator streamlines infrastructure management, allowing platform teams to offer a Kubernetes-native experience for their users while standardizing Terraform workflows. It simplifies the management of Terraform Cloud workspaces and agent pools, ensuring efficiency and consistency across operations. Here are three high-level benefits of this new release: </p>\n\n<ul>\n<li><p><strong>Increased agility</strong>: Platform teams can now provide application developers with Kubernetes-native workflows, while ensuring the use of approved Terraform modules. They also now benefit from auto-scaling agent pools for a cost-effective and reliable Terraform Cloud execution environment.</p></li>\n<li><p><strong>Reduced risk</strong>: Platform and security teams can now retain visibility and policy controls over infrastructure provisioned with Terraform Cloud, ensuring security and compliance. This allows platform and security teams to manage and mitigate risks effectively. </p></li>\n<li><p><strong>Cost efficiency</strong>: The Terraform Cloud Operator provides Kubernetes-focused organizations with a streamlined method for infrastructure management.  Organizations can now leverage the cost benefits of platform teams reduction of time spent developing and supporting custom tooling.  </p></li>\n</ul>\n\n<h2>Get started on Terraform Cloud and Terraform Cloud Operator</h2>\n\n<p>For additional differences between v1 and v2, <a href=\"https://github.com/hashicorp/terraform-cloud-operator/blob/main/docs/faq.md\">read our FAQ</a> on the Terraform Cloud Operator’s GitHub repo.</p>\n\n<p>Read <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/integrations/kubernetes\">Terraform Cloud Operator for Kubernetes overview</a> to get started with the Operator. Learn more by reading our tutorial on how to set up the new Operator: <a href=\"https://developer.hashicorp.com/terraform/tutorials/kubernetes/kubernetes-operator-v2\">Deploy infrastructure with the Terraform Cloud Kubernetes Operator v2</a>. If you’re upgrading to v2 of the Terraform Cloud Operator from v1, please check out the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/integrations/kubernetes/ops-v2-migration\">migration guide</a>.  </p>\n\n<p>Please share any bugs or enhancement requests with us via <a href=\"https://github.com/hashicorp/terraform-cloud-operator/issues/new/choose\">GitHub</a> issues or join the conversation in the Terraform <a href=\"https://discuss.hashicorp.com/c/terraform-providers/kubernetes/40\">discussion forum</a>. As always, we look forward to your feedback. This Operator couldn’t have come this far without strong community interest and thoughtful feedback. You have our sincerest thanks!</p>\n\n<p>If you are completely new to Terraform, <a href=\"http://hashi.co/tf-cloud-bc\">sign up for Terraform Cloud</a> and get started using the Free offering today.</p>\n","author":"John Houston","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"95f602ca4dedbb9bfd69c24c3d7983741fc943d7dad1fbb079b5a612d6722cdd","category":"Tech"}