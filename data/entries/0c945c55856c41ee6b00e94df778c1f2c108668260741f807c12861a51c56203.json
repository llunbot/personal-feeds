{"title":"The View Transitions API And Delightful UI Animations (Part 1)","link":"https://smashingmagazine.com/2023/12/view-transitions-api-ui-animations-part1/","date":1703250000000,"content":"<p>Animations are an essential part of a website. They can draw attention, guide users on their journey, provide satisfying and meaningful feedback to interaction, <a href=\"https://teatrlalka.pl/en\">add character and flair to make the website stand out</a>, and so much more!</p>\n<p>On top of that, CSS has provided us with transitions and keyframe-based animations since at least 2009. Not only that, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API\">Web Animations API</a> and JavaScript-based animation libraries, such as the popular <a href=\"https://gsap.com/\">GSAP</a>, are widely used for building very complex and elaborate animations.</p>\n<p>With all these avenues for making things move on the web, you might wonder where the View Transitions API fits in in all this. Consider the following example of a simple task list with three columns.</p>\n<p><img src=\"https://files.smashing.media/articles/ui-animations-shared-element-transitions-api-part1/1-view-transitions-api-cross-fade-animation.jpg\" /></p>\n<p>We’re merely crossfading between the two screen states, and that includes all elements within it (i.e., other images, cards, grid, and so on). The API is unaware that the image that is being moved from the container (old state) to the overlay (new state) is the same element.</p>\n<p>We need to instruct the browser to pay special attention to the image element when switching between states. That way, we can create a special transition animation that is applied only to that element. The CSS <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/view-transition-name\"><code>view-transition-name</code> property</a> applies the name of the view transition we want to apply to the transitioning elements and instructs the browser to <strong>keep track of the transitioning element’s size and position</strong> while applying the transition.</p>\n<p>We get to name the transition anything we want. Let’s go with <code>active-image</code>, which is going to be declared on a <code>.gallery__image--active</code> class that is a modifier of the class applied to images (<code>.gallery-image</code>) when the transition is in an active state:</p>\n<pre><code>.gallery__image--active {\n  view-transition-name: active-image;\n}\n</code></pre>\n\n<p>Note that <code>view-transition-name</code> <strong>has to be a unique identifier and applied to only a single rendered element during the animation</strong>. This is why we are applying the property to the active image element (<code>.gallery__image--active</code>). We can remove the class when the image overlay is closed, return the image to its original position, and be ready to apply the view transition to another image without worrying whether the view transition has already been applied to another element on the page.</p>\n<p>So, we have an active class, <code>.gallery__image--active</code>, for images that receive the view transition. We need a method for applying that class to an image when the user clicks on that respective image. We can also wait for the animation to finish by storing the transition in a variable and calling <code>await</code> on the <code>finished</code> attribute to toggle off the class and clean up our work.</p>\n<div>\n<pre><code>// Start the transition and save its instance in a variable\nconst transition = document.startViewTransition(() =&amp;gtl /* ... */);\n\n// Wait for the transition to finish.\nawait transition.finished;\n\n/* Cleanup after transition has completed */\n</code></pre>\n</div>\n\n<p>Let’s apply this to our example:</p>\n<div>\n<pre><code>function toggleImageView(index) {\n  const image = document.getElementById(<code>js-gallery-image-${index}</code>);\n\n  // Apply a CSS class that contains the view-transition-name before the animation starts.\n  image.classList.add(\"gallery__image--active\");\n\n  const imageParentElement = image.parentElement;\n\n  if (!document.startViewTransition) {\n    // Fallback if View Transitions API is not supported.\n    moveImageToModal(image);\n  } else {\n    // Start transition with the View Transitions API.\n    document.startViewTransition(() =&gt; moveImageToModal(image));\n  }\n\n  // This click handler function is now async.\n  overlayWrapper.onclick = async function () {\n    // Fallback if View Transitions API is not supported.\n    if (!document.startViewTransition) {\n      moveImageToGrid(imageParentElement);\n      return;\n    }\n\n    // Start transition with the View Transitions API.\n    const transition = document.startViewTransition(() =&gt; moveImageToGrid(imageParentElement));\n\n    // Wait for the animation to complete.\n    await transition.finished;\n\n    // Remove the class that contains the page-transition-tag after the animation ends.\n    image.classList.remove(\"gallery__image--active\");\n  };\n}\n</code></pre>\n</div>\n\n<p>Alternatively, we could have used JavaScript to toggle the CSS <code>view-transition-name</code> property on the element in the inline HMTL. However, I would recommend keeping everything in CSS as you might want to use media queries and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@supports\">feature queries</a> to create fallbacks and manage it all in one place.</p>\n<pre><code>// Applies view-transition-name to the image\nimage.style.viewTransitionName = \"active-image\";\n\n// Removes view-transition-name from the image\nimage.style.viewTransitionName = \"none\";\n</code></pre>\n\n<p>And that’s pretty much it! Let’s take a look at our example (in Chrome) with the transition element applied.</p>\n<p><img src=\"https://files.smashing.media/articles/ui-animations-shared-element-transitions-api-part1/2-view-transitions-api.jpg\" /></p>\n<h3>Customizing Animation Duration And Easing In CSS</h3>\n<p>What we just looked at is what I would call the default experience for the View Transitions API. We can do so much more than a transition that crossfades between two states. Specifically, just as you might expect from something that resembles a CSS animation, we can configure a view transition’s duration and timing function.</p>\n<p>In fact, the <strong>View Transitions API makes use of CSS <code>animation</code> properties</strong>, and we can use them to fully customize the transition’s behavior. The difference is what we declare them on. Remember, a view transition is not part of the DOM, so what is available for us to select in CSS if it isn’t there?</p>\n<p>When we run the <code>startViewTransition</code> function, the API pauses rendering, captures the new state of the page, and constructs a pseudo-element tree:</p>\n<pre><code>::view-transition\n└─ ::view-transition-group(root)\n   └─ ::view-transition-image-pair(root)\n      ├─ ::view-transition-old(root)\n      └─ ::view-transition-new(root)\n</code></pre>\n\n<p>Each one is helpful for customizing different parts of the transition:</p>\n<ul>\n<li><strong><code>::view-transition</code></strong>: This is the root element, which you can consider the transition’s <code>body</code> element. The difference is that this pseudo-element is contained in an overlay that sits on top of everything else on the top.<ul>\n<li><strong><code>::view-transition-group</code></strong>: This mirrors the size and position between the old and new states.<ul>\n<li><strong><code>::view-transition-image-pair</code></strong>: This is the only child of <code>::view-transition-group</code>, providing a container that isolates the blending work between the snapshots of the old and new transition states, which are direct children.<ul>\n<li><strong><code>::view-transition-old(...)</code></strong>: A snapshot of the “old” transition state.</li>\n<li><strong><code>::view-transition-new(...)</code></strong>: A live representation of the new transition state.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Yes, there are quite a few moving parts! But the purpose of it is to give us tons of flexibility as far as selecting specific pieces of the transition.</p>\n<p>So, remember when we applied <code>view-transition-name: active-image</code> to the <code>.gallery__image--active</code> class? Behind the scenes, the following pseudo-element tree is generated, and we can use the pseudo-elements to target either the <code>active-image</code> transition element or other elements on the page with the <code>root</code> value.</p>\n<pre><code>::view-transition\n├─ ::view-transition-group(root)\n│  └─ ::view-transition-image-pair(root)\n│     ├─ ::view-transition-old(root)\n│     └─ ::view-transition-new(root)\n└─ ::view-transition-group(active-image)\n   └─ ::view-transition-image-pair(active-image)\n      ├─ ::view-transition-old(active-image)\n      └─ ::view-transition-new(active-image)\n</code></pre>\n\n<p>In our example, we want to modify both the cross-fade (<code>root</code>) and transition element (<code>active-image</code> ) animations. We can use the universal selector (<code>*</code>) with the pseudo-element to change animation properties for all available transition elements and target pseudo-elements for specific animations using the <code>page-transition-tag</code> value.</p>\n<div>\n<pre><code>/* Apply these styles only if API is supported */\n@supports (view-transition-name: none) {\n  /* Cross-fade animation */\n  ::view-transition-image-pair(root) {\n    animation-duration: 400ms;\n    animation-timing-function: ease-in-out;\n  }\n\n  /* Image size and position animation */\n  ::view-transition-group(active-image) {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n}\n</code></pre>\n</div>\n\n<p><img src=\"https://files.smashing.media/articles/ui-animations-shared-element-transitions-api-part1/3-view-transitions-api-unsupported.png\" /></p>\n<h3>Accessible Animations</h3>\n<p>Of course, any time we talk about movement on the web, we also ought to <a href=\"https://www.smashingmagazine.com/2021/10/respecting-users-motion-preferences/\">be mindful of users with motion sensitivities</a> and ensure that we account for an experience that reduces motion.</p>\n<p>That’s what the CSS <code>prefers-reduced-motion</code> query is designed for! With it, we can sniff out users who have enabled accessibility settings at the OS level that reduce motion and then reduce motion on our end of the work. The following example is a heavy-handed solution that nukes all animation in those instances, but it’s worth calling out that <a href=\"https://css-tricks.com/nuking-motion-with-prefers-reduced-motion/\"><em>reduced</em> motion does not always mean <em>no</em> motion</a>. So, while this code will work, it may not be the best choice for your project, and your mileage may vary.</p>\n<pre><code>@media (prefers-reduced-motion) {\n  ::view-transition-group(*),\n  ::view-transition-old(*),\n  ::view-transition-new(*) {\n    animation: none !important;\n  }\n}\n</code></pre>\n\n<h3>Final Demo</h3>\n<p>Here is the completed demo with fallbacks and <code>prefers-reduced-motion</code> snippet implemented. Feel free to play around with easings and timings and further customize the animations.</p>\n<p><img src=\"https://files.smashing.media/articles/ui-animations-shared-element-transitions-api-part1/4-view-transitions-api-tracks-element-position.png\" /></p>\n<p>This is a perfect example of how the View Transitions API tracks an element’s position and dimensions during animation and transitions between the old and new snapshots right out of the box!</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/dyrybpB\">Add to cart animation v2 - completed [forked]</a> by <a href=\"https://codepen.io/AdrianBece\">Adrian Bece</a>.</p>\nConclusion\n<p>It amazes me every time how the View Transitions API turns expensive-looking animations into somewhat trivial tasks with only a few lines of code. When done correctly, animations can <a href=\"http://species-in-pieces.com/\">breathe life into any project</a> and offer a more <a href=\"https://teatrlalka.pl/en\">delightful and memorable user experience</a>.</p>\n<p>That all being said, we still need to be careful how we use and implement animations. For starters, we’re still talking about a feature that is supported only in Chrome at the time of this writing. But with Safari’s positive stance on it and an open ticket to implement it in Firefox, there’s plenty of hope that we’ll get broader support — we just don’t know when.</p>\n<p>Also, the View Transitions API may be “easy,” but it does not save us from ourselves. Think of things like slow or repetitive animations, needlessly complex animations, serving animations to those who prefer reduced motion, among other poor practices. Adhering to <a href=\"https://www.designbetter.co/animation-handbook\">animation best practices</a> has never been more important. The goal is to ensure that we’re using view transitions in ways that add delight and are inclusive rather than slapping them everywhere for the sake of showing off.</p>\n<p>In another article to follow this one, we’ll use View Transitions API to create full-page transitions in our single-page and multi-page applications — you know, the sort of transitions we see when navigating between two views in a native mobile app. Now, we have those readily available for the web, too!</p>\n<p>Until then, go build something awesome… and use it to experiment with the View Transitions API!</p>\n<h3>References</h3>\n<ul>\n<li>“<a href=\"https://developer.chrome.com/docs/web-platform/view-transitions/\">Smooth And Simple Transitions With The View Transitions API</a>,” Jake Archibald</li>\n<li><a href=\"https://github.com/WICG/view-transitions/blob/main/explainer.md\">View Transitions API explainer</a>, Web Incubator CG</li>\n<li><a href=\"https://drafts.csswg.org/css-view-transitions-1/\">CSS View Transitions Module Level 1</a>, W3C</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"0c945c55856c41ee6b00e94df778c1f2c108668260741f807c12861a51c56203","category":"Tech"}