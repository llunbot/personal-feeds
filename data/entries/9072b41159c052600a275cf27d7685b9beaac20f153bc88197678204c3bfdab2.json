{"title":"เรื่องที่น่าสนใจจาก Prime Video​ :: สำหรับการ Rearchitecture ของระบบ VDO monitoring","link":"https://www.somkiat.cc/prime-video-rearchitecture/","date":1683436903000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/prime-vdo-01-150x150.jpg\" alt srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/05/prime-vdo-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2023/05/prime-vdo-01-75x75.jpg 75w\" /></p>\n<p>จากบทความเรื่อง <a href=\"https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90\" target=\"_blank\">Scaling up the Prime Video audio/video monitoring service and reducing costs by 90%</a></p>\n\n\n\n<p>ทำการอธิบายสำหรับการย้ายระบบที่อยู่ในรูปแบบของ distributed Microservices<br />มาเป็น Monolith หรือถ้าพูดให้ตรง ๆ คือ <strong>ย้ายออกจาก AWS Lambda</strong> นั่นเอง</p>\n\n\n\n<p>ซึ่งผลที่ได้รับกลับมาคือ</p>\n\n\n\n<ul><li>Scale ระบบได้สูงขึ้น</li><li>ระบบมีความ Resilience คือ เมื่อมีปัญหาสามารถ recovery กลับมาทำงานปกติได้ดี</li><li>ที่สำคัญลดค่าใช้จ่ายไปมากกว่า 90%</li></ul>\n\n\n\n<p>ดังนั้นมาดูกันว่าทาง Prime Video ทำอย่างไรบ้าง ซึ่งน่าสนใจมาก ๆ</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>โดย service ที่ทำการเปลี่ยนแปลงคือ Audio/Video Monitoring Service</strong></p>\n\n\n\n<p>ทำหน้าที่ดังนี้</p>\n\n\n\n<ul><li>Monitor ในแต่ละ stream ที่ผู้ใช้งานดู ซึ่งทำงานแบบอัตโนมัติ สำหรับการตรวจสอบคุณภาพของ Video จากนั้นก็จะ trigger เข้าสู่กระบวนการแก้ไขต่อไป</li><li>มีทีม Video Quality Analysis (VQA) คอยดูคุณภาพของเสียงและภาพของ Video</li></ul>\n\n\n\n<p>ระบบนี้ไม่ได้ออกแบบมาเพื่อการ scale มากนัก<br />ทำให้เมื่อมี concurrency สูง ๆ ก็ให้เกิดปัญหาตามมาคือ<br />scale ได้ไม่ดี แถมต้องมีค่าใช้จ่ายที่สูงมาก ๆ อีกด้วย<br />ทำให้กลายเป็นปัญหาคอขวดของระบบไปอีก<br />ดังนั้นจึงต้องทำให้กลับมาดูว่า architecture ของระบบเป็นอย่างไร</p>\n\n\n\n<p>\"<strong><em>โดยเป้าหมายหลักเพื่อลดค่าใช้จ่าย และการ scale</em></strong>\"</p>\n\n\n\n<p><strong>มาดู Architecture และ Technology ที่ใช้กันหน่อย</strong></p>\n\n\n\n<p>หลัก ๆ จะใช้ AWS Lambda จะแยกส่วนการทำงานเป็นแต่ละ component<br />นั่นคือ จะมี serverless แยกกันไปเพียบ ตามที่จะแบ่งกันไป (Distributed component)<br />ประกอบไปด้วย component ดังนี้</p>\n\n\n\n<ul><li><strong>Media conversion</strong> ตรงนี้ทำงานร่วมกับ Amazon S3 ดังนั้นเมื่อมีการดูเยอะ ๆ ก็ดึงข้อมูลจาก S3 เยอะ แพงไหนนะ ?</li><li><strong>Defect detector</strong> เมื่อผ่านการ convert มาแล้วจะ trigger มาทำงานที่นี่ เพื่อทำการตรวจสอบคุณภาพ ก็อ่านจาก S3 อีกนั่นเอง !! ถ้าเจอปัญหาก็ trigger ไปยัง Notification เพื่อแจ้งต่อไป ส่วนปัญหาที่พบเจอเก็บใน S3 อีก bucket หนึ่ง</li><li><strong>Realtime Notification</strong> ใช้งาน Amazon SNS (Simple Notification Service)</li></ul>\n\n\n\n<p>และมีตัวจัดการ หรือ orchestrator คือ <strong>AWS Step Functions</strong><br />ซึ่งเป็นตัวการใหญ่ของปัญหาในระบบนี้</p>\n\n\n\n<p><strong><em>โดย architecture นี้ถูกสร้างมาเพื่อให้เริ่มต้นพัฒนาได้ง่ายและรวดเร็ว<br />และในทางทฤษฎี แต่ละ component มีความเป็นอิสระแก่กัน<br />น่าจะทำให้การ scale ง่าย !!</em></strong></p>\n\n\n\n<p>แต่ในความเป็นจริงพบว่า scale ยาก<br />แถมค่าใช้จ่ายโดยรวมก็สูงขึ้นมาก มากจนยอมรับไม่ได้ !!</p>\n\n\n\n<p><strong>มี 2 ส่วนหลัก ๆ ที่เป็นปัญหาคอขวด และ มีค่าใช้จ่ายสูงมาก ๆ คือ</strong></p>\n\n\n\n<ul><li><a href=\"https://aws.amazon.com/step-functions/pricing/\" target=\"_blank\">AWS Step Functions</a> หรือตัว orchestrate นั่นเอง เนื่องจากมี component เยอะ การใช้งานสูง ทำให้เกิด state transition เยอะ และก็คิดค่าใช้จ่ายตามจำนวน state transition ด้วย (เรื่อง cost estimation ต้องคิดไหมนะ) ใช้จนเกิน limit ของ account นั่นก็ยิ่งทำให้ค่าใช้จ่ายสูงแบบโหดร้ายอีก</li></ul>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/prime-vdo-02.jpg\" alt width=\"480\" height=\"232\" /></figure>\n\n\n\n<ul><li>ส่วนที่สองคือ การเก็บข้อมูลเพื่ออ่านเขียน video frame หรือ รูปภาพ ใน <strong>Amazon S3</strong> นั่นเอง เพื่อให้แต่ละ component มาใช้งาน พบว่าการใช้งาน S3 แบบ Tier 1 จาก AWS Lambda นั้นมีค่าใช้จ่ายที่สูงมาก ๆ</li></ul>\n\n\n\n<p><strong>แสดง Architecture แรกเริ่มดังรูป</strong></p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/prime-vdo-01.jpg\" alt /></figure>\n\n\n\n<p><strong>จากปัญหาข้างต้น จึงนำมาสู่ Architecture ใหม่</strong></p>\n\n\n\n<p>ที่ต้องการลดปัญหาคอขวดของการ scale และ ลดค่าใช้จ่าย<br />ด้วยการตัด AWS Lamba และ Amazon S3 ที่เก็บ video frame ออกไป<br />เรื่องจากพบว่าใน use case นี้ ระบบแบบ distributed นั้นไม่ได้ตอบโจทย์</p>\n\n\n\n<p>โดยแนวทางใหม่ก็รวมแต่ละ component มาอยู่ใน process เดียวกันไปเลย<br />ซึ่งทำงานอยู่บน <a href=\"https://aws.amazon.com/ecs/\">Amazon Elastic Container Service</a><br />ย้ายข้อมูล video frame ที่เก็บใน S3 มาอยู่ใน Memory แทน</p>\n\n\n\n<p><strong>ตารางเปรียบเทียบระหว่าง Container กับ Serverless</strong></p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/prime-vdo-05.jpg\" alt width=\"499\" height=\"261\" /></figure>\n\n\n\n<p>แนะนำเพิ่มเติมคือ  <a href=\"https://aws.amazon.com/savingsplans/compute-pricing/\" target=\"_blank\">Amazon EC2 compute saving plans</a> สำหรับการลดค่าใช้จ่าย</p>\n\n\n\n<p><strong>แสดง Architecture ใหม่ ดังรูป</strong></p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/prime-vdo-03.jpg\" alt width=\"555\" height=\"347\" /></figure>\n\n\n\n<p><strong>จาก architecture ใหม่ก็ช่วยแก้ไขปัญหาที่ตั้งไว้ แต่ก็มีปัญหาใหม่ ๆ ตามมา เช่น</strong></p>\n\n\n\n<p>การ scale ของ Defect detector นั้น จะทำการ scale แบบ vertical แทน<br />ทำไปจนถึง limit ของ instance ที่จะมีให้<br />จนต้องทำการ scale ด้วยการ copy code มายัง instance ใหม่<br />จากนั้นก็ทำ layer กลางขึ้นมา <br />เพื่อกระจาย request ของผู้ใช้งานไปตาม instance ต่าง ๆ นั่นเอง<br />เป็น AWS Lambda นั่นเอง</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/prime-vdo-04.jpg\" alt width=\"497\" height=\"555\" /></figure>\n\n\n\n<p><strong>สิ่งที่ได้เรียนรู้กับแนวทางนี้มีอะไรบ้าง ?</strong></p>\n\n\n\n<ul><li>ในแต่ละ use case มีแนวทางเหมาะสมที่แตกต่างกันไป จะเห็นได้ว่า เป็นแนวทางที่เริ่มได้ง่ายและรวดเร็ว แต่เมื่อถึงจุดหนึ่งก็จะเกิดปัญหาที่ต้องเลือกทางแก้ไข ดังนั้นระบบงานควรต้องปรับปรุงอยู่อย่างสม่ำเสมอ ไม่ควรใช้คำว่าเดี๋ยวก่อน หรือ ใช้เงินเพื่อแก้ไขปัญหาอย่างเดียว</li><li>ในการย้ายระบบมาตัวใหม่ทำได้เร็ว เนื่องจากของเดิมทำการแบ่ง component ออกมาอย่างชัดเจน ทำให้การ reuse หรือ migrate มาระบบใหม่ง่ายและรวดเร็วขึ้น ตรงนี้น่าสนใจมาก ๆ</li><li>ไม่ว่าจะ Microservices, Serverless นั้นมันคือ tool ที่ช่วยเหลือทางด้านการ scale แต่ใช่ว่าจะแก้ไขได้ทุก use case ดังนั้นต้องเข้าใจถึงปัญหาและความต้องการก่อนเสมอ</li><li>สิ่งที่สำคัญคือ การปรับปรุงแต่ละครั้ง เรามีตัวชี้วัดอะไรบ้าง</li></ul>\n\n\n\n<p></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"9072b41159c052600a275cf27d7685b9beaac20f153bc88197678204c3bfdab2","category":"Thai"}