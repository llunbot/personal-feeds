{"title":"Terraform 1.11 brings ephemeral values to managed resources with write-only arguments","link":"https://www.hashicorp.com/blog/terraform-1-11-ephemeral-values-managed-resources-write-only-arguments","date":1741006800000,"content":"<p><strong><em>Learn more about this release on our HashiCast CHANGELOG episode: <a href=\"https://www.hashicorp.com/en/resources/hashicast-changelog-vault-1-19-terraform-1-11\">Vault 1.19 &amp; Terraform 1.11</a></em></strong></p>\n\n<p>Today, we are announcing the general availability of HashiCorp Terraform 1.11, which is <a href=\"https://developer.hashicorp.com/terraform/install?product_intent=terraform\">ready for download</a> and immediately available for use in <a href=\"https://www.hashicorp.com/products/terraform\">HCP Terraform</a>. This version introduces write-only arguments, which let you use ephemeral values in specific managed resource arguments. </p>\n\n<h2>Extending ephemeral values with write-only arguments</h2>\n\n<p>In <a href=\"https://www.hashicorp.com/blog/terraform-1-10-improves-handling-secrets-in-state-with-ephemeral-values\">Terraform 1.10</a>, we introduced ephemeral values to provide a more secure way to handle sensitive data, such as private keys, API tokens, and other secrets. Ephemeral values in Terraform are not persisted in artifacts like the plan or state file. Terraform 1.10 introduced:</p>\n\n<ol>\n<li>Ephemeral input variables and output values for temporary or sensitive data, such as short-lived tokens or session identifiers.</li>\n<li>Ephemeral resources, a new language construct that allows Terraform to temporarily reference external data by opening and closing a remote object. </li>\n</ol>\n\n<p>In Terraform 1.10, ephemeral values could only be used in other ephemeral contexts, such as: </p>\n\n<ul>\n<li>Ephemeral input variables</li>\n<li>Output values</li>\n<li>Provider and provisioner blocks</li>\n<li>Ephemeral resources</li>\n</ul>\n\n<p>With Terraform 1.11, you can use ephemeral values in managed resources through the introduction of write-only arguments. </p>\n\n<p>Write-only arguments are arguments in a resource that can only be written to, and not read. Similar to ephemeral values, write-only arguments are not stored in Terraform artifacts like the plan or state file. </p>\n\n<p>This enhancement makes it possible to securely pass secrets, such as a generated password or a fetched token, directly to managed resources without risking exposure in the state file or plan file.</p>\n\n<p>By extending ephemeral values to managed resources, Terraform 1.11 strengthens the security of workflows involving sensitive data, ensuring your secrets remain secure across input variables and output values, ephemeral resources, and write-only arguments in managed resources.</p>\n\n<h3>Write-only arguments in practice</h3>\n\n<p>To illustrate this new feature, let’s look at an example. You’re using ephemeral resources and write-only arguments in Terraform to provision an AWS RDS instance and generate a random password with the <code>random</code> provider. In the configuration below, the ephemeral resource <code>random.password</code> generates a random password, which is then passed to the <code>password_wo</code> argument of the managed <code>aws_db_instance</code> resource.</p>\n\n<p>Write-only arguments are different from other managed resource arguments in several ways: </p>\n\n<ol>\n<li>They accept ephemeral values.</li>\n<li>Their values are never persisted in Terraform’s plan or state files.</li>\n<li>Since the values of write-only arguments are not persisted, write-only arguments are updated using their version-specific attributes (e.g. <code>value_wo_version</code>). The values of the version-specific attributes get stored in state. To trigger an update of a write-only argument, increment the version argument's value in your configuration.</li>\n</ol>\n\n<p>The configuration below ensures that the password remains ephemeral throughout the workflow — from its generation in the ephemeral resource to its secure use in the RDS instance with the write-only argument — without being exposed in Terraform's plan file or state file.</p>\n<pre><code>provider \"aws\" {\n  region = \"eu-west-2\"\n}\n\nlocals {\n db_password_version = 1\n}\n\nephemeral \"random_password\" \"db_password\"{\n  length = 16\n}\n\nresource \"aws_db_instance\" \"test\" {\n  instance_class      = \"db.t3.micro\"\n  allocated_storage   = \"5\"\n  engine              = \"postgres\"\n  username            = \"newuser\"\n  skip_final_snapshot = true\n\n# 'password_wo' is a write-only argument \n# 'password_wo_version' controls when the password_wo gets updated \n password_wo = ephemeral.random_password.db_password.result\n password_wo_version = local.db_password_version\n}</code></pre><h3>Available with Terraform 1.11</h3>\n\n<p>These are the current write-only arguments supported in the following managed resources:</p>\n\n<h4>AWS</h4>\n\n<ul>\n<li><code>aws_db_instance</code>\n\n<ul>\n<li>Attribute: <code>password_wo</code></li>\n</ul></li>\n<li><code>aws_secretsmanager_secret_version</code>\n\n<ul>\n<li>Attribute: <code>secret_string_wo</code></li>\n</ul></li>\n<li><code>aws_rds_cluster</code>\n\n<ul>\n<li>Attribute: <code>master_password_wo</code></li>\n</ul></li>\n<li><code>aws_redshift_cluster</code>\n\n<ul>\n<li>Attribute: <code>master_password_wo</code></li>\n</ul></li>\n<li><code>aws_redshiftseverless_namespace</code>\n\n<ul>\n<li>Attribute: <code>admin_user_password_wo</code></li>\n</ul></li>\n<li><code>aws_docdb_cluster</code>\n\n<ul>\n<li>Attribute: <code>master_password_wo</code></li>\n</ul></li>\n<li><code>aws_ssm_parameter</code>\n\n<ul>\n<li>Attribute: <code>value_wo</code></li>\n</ul></li>\n<li><p>And more!</p>\n\n<h4>Azure</h4></li>\n<li><p><code>azurerm_mssql_server.administrator</code></p>\n\n<ul>\n<li>Attribute: <code>administrator_login_password_wo</code></li>\n</ul></li>\n<li><p><code>azurerm_mysql_flexible_server</code></p>\n\n<ul>\n<li>Attribute: <code>administrator_password_wo</code></li>\n</ul></li>\n<li><p><code>azurerm_mssql_job_credential</code></p>\n\n<ul>\n<li>Attribute:<code>password_wo</code></li>\n</ul></li>\n<li><p><code>azurerm_postgresql_flexible_server</code></p>\n\n<ul>\n<li>Attribute: <code>administrator_password_wo</code></li>\n</ul></li>\n<li><p><code>azurerm_postgresql_server</code></p>\n\n<ul>\n<li>Attribute: <code>administrator_login_password_wo</code>\n#### Google Cloud</li>\n</ul></li>\n<li><p><code>google_secret_manager_secret_version</code></p>\n\n<ul>\n<li>Attribute: <code>secret_data_wo</code></li>\n</ul></li>\n<li><p><code>google_sql_user</code></p>\n\n<ul>\n<li>Attribute: <code>password_wo</code></li>\n</ul></li>\n<li><p><code>google_bigquery_data_transfer_config</code></p>\n\n<ul>\n<li>Attribute: <code>sensitive_params.secret_access_key_wo</code></li>\n</ul></li>\n</ul>\n\n<h4>Kubernetes</h4>\n\n<ul>\n<li><code>Kubernetes_secret_v1</code>\n\n<ul>\n<li>Attributes: <code>data_wo, binary_data_wo</code></li>\n</ul></li>\n</ul>\n\n<h4>Helm</h4>\n\n<ul>\n<li><code>helm_release</code>\n\n<ul>\n<li>Attributes: <code>set_wo</code> </li>\n</ul></li>\n</ul>\n\n<h3>Partner spotlight</h3>\n\n<p>Terraform language features truly solve problems only when our tech partners extend them to their providers. Addressing the ‘secrets in state’ challenge fully for our mutual users requires every Terraform provider to handle sensitive credentials as ephemeral, short-lived constructs.</p>\n\n<p>That’s why we’d like to give a massive shoutout to our tech partners, <strong>Juniper</strong>, <strong>Palo Alto Networks</strong>, and <strong>Fortinet</strong> for leading the way! With Juniper’s <a href=\"https://registry.terraform.io/providers/Juniper/apstra/latest/docs/ephemeral-resources/api_token\"><code>apstra_api_token</code></a>, Palo Alto Networks’ <a href=\"https://registry.terraform.io/providers/PaloAltoNetworks/panos/latest/docs/ephemeral-resources/api_key\"><code>panos_api_key</code></a> and <a href=\"https://registry.terraform.io/providers/PaloAltoNetworks/panos/latest/docs/ephemeral-resources/vm_auth_key\"><code>panos_vm_auth_key</code></a>, and Fortinet’s <a href=\"https://registry.terraform.io/providers/fortinetdev/fortiflexvm/latest/docs/ephemeral-resources/fortiflexvm_groups_nexttoken\"><code>fortiflexvm_groups_nexttoken</code></a>, these providers offer more secure, temporary credentials that minimize exposure.</p>\n\n<p>Missed our workshop on implementing ephemeral values in your providers? <a href=\"https://www.hashicorp.com/en/events/webinars/ephemeral-values-workshop-americas\">Watch the recording here</a>.</p>\n\n<p>We encourage our partners to explore implementing ephemeral values in their providers and enhance security across the ecosystem!</p>\n\n<h2>Upgrades to Terraform tests</h2>\n\n<p>Terraform 1.11 includes other enhancements outlined in the <a href=\"https://github.com/hashicorp/terraform/blob/v1.11/CHANGELOG.md\">changelog</a>, including new features in the test framework:</p>\n\n<ul>\n<li>Terraform tests have a new <code>state_key</code> attribute for <code>run</code> blocks, allowing test authors control over which internal state file should be used for the current test run. This allows multiple run blocks to target the same infrastructure. For example, you can use a setup module and execute multiple tests on it by utilizing the <code>state_key</code> attribute.</li>\n<li>Terraform test runs now support using mocked or overridden values during unit test runs (e.g. with <code>command = \"plan\"</code>). Set <code>override_during = plan</code> in the test configuration to use the overridden values during the plan phase. The default value is <code>override_during = apply</code>.</li>\n<li>The <code>-junit-xml</code> CLI flag for the <code>terraform test</code> command is now generally available. This flag allows the command to create a test report in <a href=\"https://junit.org/\">JUnit</a> XML format.</li>\n</ul>\n\n<h2>Next steps</h2>\n\n<p>To get started with HashiCorp Terraform:</p>\n\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/downloads\">Download Terraform 1.11</a></li>\n<li><a href=\"https://app.terraform.io/public/signup/account\">Sign up for a free HCP Terraform account</a></li>\n<li>Get hands-on with the <a href=\"https://developer.hashicorp.com/terraform/tutorials/aws/rds-upgrade\">Upgrade RDS major version tutorial</a> at <a href=\"https://developer.hashicorp.com/terraform/tutorials\">HashiCorp Developer</a></li>\n</ul>\n\n<p>As always, this release wouldn’t have been possible without the valuable feedback from the community, including contributions via GitHub issues, HashiCorp Discuss forums, and our customers. Thank you, everyone!</p>\n","author":"Garvita Rai","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"98d580f5013fcaff1bf15e11f42cbec759e579edfa89e41e755d65d0b628da7b","category":"Tech"}