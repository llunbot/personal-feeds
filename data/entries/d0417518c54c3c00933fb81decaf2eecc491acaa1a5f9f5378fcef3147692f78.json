{"title":"Vault Secrets Operator for Kubernetes now GA","link":"https://www.hashicorp.com/blog/vault-secrets-operator-for-kubernetes-now-ga","date":1686643200000,"content":"<p>In March, we introduced the beta version of the <a href=\"https://github.com/hashicorp/vault-secrets-operator\">HashicCorp Vault Secrets Operator</a> for Kubernetes. Today, the Operator has reached general availability. We received a great deal of feedback from our user community that helped us identify and prioritize features for the Vault Secrets Operator GA. This post covers the functionality of the Vault Operator and reviews the new features released along with GA.</p>\n\n<h2>Kubernetes Secrets management</h2>\n\n<p>Kubernetes natively supports the management and distribution of secrets within a cluster. Applications running on Kubernetes can consume secrets natively from the <a href=\"https://kubernetes.io/docs/concepts/configuration/secret/\">Secrets API</a>. Kubernetes Secrets can be consumed directly from files in a volume mounted by a container, container environment variables, or directly from the API by an application. However, Kubernetes does not support dynamic secrets or rotation, leaving that responsibility to users.</p>\n\n<p>Kubernetes Secrets were conceived as a static configuration object containing confidential information. Secrets were typically created during the deployment of an application and remained unchanged throughout the lifecycle of the application’s container. </p>\n\n<p>Vault fills the gaps in Kubernetes by providing a complete solution for modern secrets management. It consolidates identity brokering, secrets management (including <a href=\"https://www.hashicorp.com/blog/why-we-need-dynamic-secrets\">dynamic secrets</a>), rotation, and security policy compliance in one platform. By coupling Vault’s secret management feature set with a Kubernetes Secrets cache, developers have to consume the secret natively only from Kubernetes.</p>\n\n<h2>The Vault Secrets Operator</h2>\n\n<p>Prior approaches to Vault/Kubernetes integration required some level of application modification in order to read from a file. Applications also needed to be aware of when credentials have been modified so that they can be re-read from the file. In response to user interest in a new, Operator-based method of Vault/Kubernetes integration, earlier this year HashiCorp introduced the <a href=\"https://www.hashicorp.com/blog/vault-secrets-operator-a-new-method-for-kubernetes-integration\">Vault Secrets Operator</a>, which allows users to natively sync secrets from Vault to Kubernetes clusters.</p>\n\n<p>The Vault Secrets Operator also helps create an operational boundary between SecOps and engineering teams. SecOps is now positioned to define, enforce, and control security policies independent from development, which means they can establish best practices for secrets rotation and dynamic secrets. The Vault Secrets Operator for Kubernetes also allows SecOps Teams to leverage Vault’s audit capabilities and monitor for access and permissions.</p>\n\n<p><a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/operator/\">Kubernetes Operators</a> allow the customization of automatable tasks within a Kubernetes cluster. This operator pattern removes service management burdens from human operators, such as managing secrets for the services orchestrated by Kubernetes.</p>\n<img src=\"https://www.datocms-assets.com/2885/1686594795-vso.png\" alt=\"VSO\" /><h3>Custom resources</h3>\n\n<p>The Vault Secrets Operator implements a controller that uses Kubernetes <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\">custom resources</a> defined by the Vault Secrets Operator’s custom resource definitions (CRDs) to manage the secrets used by the services. The secrets are then managed by Vault, orchestrated in Kubernetes using custom resources, and consumed by the applications in a Kubernetes-native manner, cleanly separating concerns. Using standard Kubernetes declarative patterns, the Vault Secrets Operator reconciles the current state to the desired state specified in the CRDs.</p>\n\n<p>To check out the code, visit the <a href=\"https://github.com/hashicorp/vault-secrets-operator/\">Kubernetes Vault Secrets Operator GitHub repo</a>. The project SDK is based on the <a href=\"https://sdk.operatorframework.io/\">Operator SDK</a> for Go and provides the tools necessary for building, testing, and deploying a Kubernetes Operator.</p>\n\n<p>The Vault Secrets Operator for Kubernetes is dependent on custom resources. In order to set up a secret sync, users first deploy the Operator through one of two supported methods:</p>\n\n<ul>\n<li><strong>Helm:</strong> Our Helm chart is available in the HashiCorp Helm repository, at <a href=\"https://helm.releases.hashicorp.com\">https://helm.releases.hashicorp.com</a></li>\n<li><strong>Kustomize:</strong> The Operator’s GitHub repo includes the artifacts necessary for deploying an instance of the Operator with Kustomize.</li>\n</ul>\n\n<p>Once that is done, the Operator will be able to handle any of the supported Secret CRs. The Vault Secrets Operator supports a variety of CRs, including:</p>\n\n<ul>\n<li>VaultConnection</li>\n<li>VaultAuth</li>\n<li>VaultDynamicSecret</li>\n<li>VaultPKISecret</li>\n</ul>\n\n<p>Below are code samples to implement a dynamic secrets workflow with the Vault Secrets Operator leveraging the VaultConnection, VaultAuth, and VaultDynamicSecret CRs.</p>\n\n<h4>VaultConnection</h4>\n<pre><code>apiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultConnection\nmetadata:\n  namespace: vso-example\n  name: example\nspec:\n  # address to the Vault server.\n  address: http://vault.vault.svc.cluster.local:8200</code></pre><h4>VaultAuth</h4>\n<pre><code>apiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  namespace: vso-example\n  name: example\nspec:\n  vaultConnectionRef: example\n  # Method to use when authenticating to Vault.\n  method: kubernetes\n  # Mount to use when authenticating to auth method.\n  mount: kubernetes\n  kubernetes:\n    role: demo\n    serviceAccount: default</code></pre><h4>VaultDynamicSecret</h4>\n<pre><code>apiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultDynamicSecret\nmetadata:\n  namespace: vso-example\n  name: example\nspec:\n  vaultAuthRef: example\n  mount: db\n  path: creds/postgres\n  destination:\n    create: true\n    name: dynamic1</code></pre><h3>Required permissions</h3>\n\n<p>The Vault Secrets Operator requires various Kubernetes permissions to function correctly. These include:\n</p><table>\n  <tr>\n   <td>Object\n   </td>\n   <td>Permission\n   </td>\n   <td>Reason\n   </td>\n  </tr>\n  <tr>\n   <td>Secret\n   </td>\n   <td>create, read, update, delete, watch\n   </td>\n   <td>Sync operations, Vault auth\n   </td>\n  </tr>\n  <tr>\n   <td>ServiceAccount\n   </td>\n   <td>read token creation\n   </td>\n   <td>Vault auth\n   </td>\n  </tr>\n  <tr>\n   <td>Deployment\n   </td>\n   <td>read, update, watch\n   </td>\n   <td>Post secret rotation actions\n   </td>\n  </tr>\n</table><p></p>\n\n<p>If granting these permissions for the entire cluster is problematic for your team from a security management or compliance standpoint, consider restricting the Vault Secrets Operator’s access to objects in specific namespaces.</p>\n\n<h3>GA updates</h3>\n\n<p>The GA release of the Vault Secrets Operator also includes several updates that were not included in the beta:</p>\n\n<h4>Authentication methods</h4>\n\n<p>We substantially increased the number of authentication methods available for the Vault Secrets Operator. Only the Kubernetes authentication method was available when we released the beta version. Today, we’re pleased to announce that the following authentication methods are supported by the Vault Secrets Operator: </p>\n\n<ul>\n<li>Kubernetes</li>\n<li>JSON Web Token (JWT)</li>\n<li>AppRole</li>\n<li>AWS</li>\n</ul>\n\n<h4>Cloud services validation</h4>\n\n<p>Validations are key enablers that help assure organizations that their architecture will satisfy their stakeholders’ requirements. The GA release of Vault Secrets Operator includes validations for several common Kubernetes cloud services used by IT and platform teams to validate the Vault Secrets Operator solution. These platforms include:</p>\n\n<ul>\n<li>AKS</li>\n<li>GKE</li>\n<li>EKS</li>\n<li>OpenShift</li>\n</ul>\n\n<h4>Revoke cached Vault client tokens upon Operator deletion</h4>\n\n<p>As an extra security mechanism, when the Vault Secrets Operator deployment is deleted, it will attempt to revoke any cached Vault client tokens. Additionally, any cached storage entries will be purged as well. Enabling this functionality can be invoked from the CLI.</p>\n\n<h2>Related Vault and Kubernetes integrations</h2>\n\n<p>To learn more about all of our Vault/Kubernetes integration methods, read our blog post on <a href=\"https://www.hashicorp.com/blog/kubernetes-vault-integration-via-sidecar-agent-injector-vs-csi-provider\">Kubernetes Vault integration via Sidecar Agent Injector vs. Vault Secrets Operator vs. CSI provider</a> and visit each method’s GitHub repository:</p>\n\n<ul>\n<li><p><a href=\"https://github.com/hashicorp/vault-secrets-operator\">Vault Secrets Operator</a>: Syncs Vault secrets and Kubernetes Secrets.</p></li>\n<li><p><a href=\"https://github.com/hashicorp/vault-k8s\">Vault Sidecar Agent Injector</a>: Provides access to Vault secrets by deploying a vault-agent sidecar into a Kubernetes pod.</p></li>\n<li><p><a href=\"https://github.com/hashicorp/vault-csi-provider/\">Vault CSI provider</a>: Fetches secrets stored in Vault and uses the Secrets Store Container Storage Interface (CSI) driver interface to mount them into Kubernetes pods.</p></li>\n</ul>\n\n<p>Watch this video for a demonstration of Vault Secrets Operator for Kubernetes:</p>\n<h2>Please share your feedback</h2>\n\n<p>As you pursue your Kubernetes secrets management journey with Vault Secrets Operator, we’re interested in any feedback and recommendations you may have. To provide feedback, please submit a <a href=\"https://github.com/hashicorp/vault-secrets-operator/issues\">GitHub issue</a> in the <a href=\"https://github.com/hashicorp/vault-secrets-operator\">project repository</a>.</p>\n\n<p>You can learn more about the Vault Secrets Operator by visiting the <a href=\"https://github.com/hashicorp/vault-secrets-operator\">vault-secrets-operator GitHub repository</a>. Further documentation on using Vault with Kubernetes can be found in our <a href=\"https://developer.hashicorp.com/vault/docs/platform/k8s/vso\">HashiCorp Developer guide to Kubernetes and Vault</a>. To learn more about HashiCorp Vault please visit the <a href=\"https://www.hashicorp.com/products/vault\">Vault product page</a>.</p>\n","author":"Rich Dubose","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"d0417518c54c3c00933fb81decaf2eecc491acaa1a5f9f5378fcef3147692f78","category":"Tech"}