{"title":"Nomad 1.6 adds node pools, UX updates, and more","link":"https://www.hashicorp.com/blog/nomad-1-6-adds-node-pools-ux-updates-and-more","date":1689782400000,"content":"<p>We are excited to announce that HashiCorp Nomad 1.6 is now generally available. <a href=\"https://www.nomadproject.io/\">Nomad</a> is a simple and flexible orchestrator used to deploy and manage containers and non-containerized applications. Nomad works across multiple cloud, on-premises, and edge environments.</p>\n\n<p>Here’s what’s new in Nomad and the Nomad ecosystem:</p>\n\n<ul>\n<li>Node pools</li>\n<li>Node pool governance (Nomad Enterprise)</li>\n<li>Job status page redesign</li>\n<li>Jobspec sources in the UI</li>\n<li>Nomad Pack 0.1</li>\n<li>Production-ready Podman</li>\n<li>Job restart command</li>\n</ul>\n\n<h2>Node pools</h2>\n\n<p>Node pools are a new way to determine which client nodes are eligible to receive workloads. To use node pools, first add a <code>node_pool</code> value to a Nomad client in its agent configuration file. Clients are added to the node pool called “default” unless otherwise specified in the client config:</p>\n<pre><code>client {\n  node_pool = \"gpu-nodes\"\n  …\n}</code></pre><p>Since this client is part of a non-default node pool, no tasks will be placed onto it unless a job opts into using the node pool. To opt a job into a node pool, simply add the <code>node_pool</code> attribute at the job level:</p>\n<pre><code>job \"ml-job\" {\n  node_pool = \"gpu-nodes\"\n  type = \"service\"\n\n  group \"core-work\" {\n  …\n  }\n}\n</code></pre><p>Unlike <a href=\"https://developer.hashicorp.com/nomad/docs/job-specification/constraint\">constraints</a>, node pools allow job writers to avoid sets of nodes without having to know anything about the overall cluster architecture. By default, tasks are opted-out of non-default node pools. This means job authors don’t have to repeatedly add the same constraints to every job just to avoid certain nodes. Node pools can also be used across <a href=\"https://developer.hashicorp.com/nomad/docs/configuration#datacenter\">datacenters</a>, providing an additional layer of hierarchy and control for workload placement.</p>\n\n<h2>Node pool governance (Enterprise)</h2>\n\n<p>Nomad Enterprise users can use node pools to control workload placement using namespaces.</p>\n<img src=\"https://www.datocms-assets.com/2885/1687877456-pools.png\" alt=\"Node\" /><p>In Nomad open source, all namespaces have access to all node pools and jobs are put on the <code>default</code> node pool unless otherwise specified. In Nomad Enterprise, when creating a namespace, a default node pool value can be specified on the namespace, and other node pools can be allowed or disallowed:</p>\n<pre><code>name = \"machine-learning-namespace\"\n\nnode_pool_config {\n  default = \"gpu-nodes\"\n  allowed = [\"default\", \"autoscaling-nodes\"]\n}</code></pre><p>This gives Nomad administrators fine-grained control over which users can put work on which machines. End users of Nomad jobspecs don’t have to know anything about the broader system. Workloads are automatically sent to the correct nodes and separated from each other.</p>\n\n<p>This approach enables multi-tenant Nomad clusters with multiple user groups running on different namespaces whose workloads cannot conflict with one another. Nomad administrators running multiple Nomad clusters to achieve workload isolation can now combine separate clusters into one, reducing administrative and resource overhead.</p>\n\n<p>Additionally, node pools can be configured to use different scheduling algorithms and have different memory-oversubscription values. This can help get the most use out of certain nodes while maximizing stability on others.</p>\n\n<p>For example, a user might have one set of nodes they’ve already paid for in an on-premises pool called <code>gpu-nodes</code>, and another set of nodes they pay for by the hour in a node pool called <code>cloud-autoscaling</code>. Jobs sent to the <code>gpu-nodes</code> pool could use the <a href=\"https://developer.hashicorp.com/nomad/tutorials/advanced-scheduling/spread\">spread</a> scheduling algorithm and use no memory oversubscription. Jobs sent to the <code>cloud-autoscaling</code> pool could use the <a href=\"https://developer.hashicorp.com/nomad/tutorials/advanced-scheduling/advanced-scheduling\">bin-pack</a> scheduling algorithm and turn on memory oversubscription:</p>\n<pre><code>node_pool_config \"gpu-nodes\" {\n  description = \"Pool of nodes in our on prem datacenter\"\n\n  scheduler_config {\n    scheduler_algorithm\t\t\t= \"spread\"\n    memory_oversubscription_enabled\t= false\n  }\n}\n</code></pre><p>This allows node pool users to customize Nomad’s behavior depending on node type. For many Nomad users, this will enable cost savings and efficiency while keeping their most important workloads stable.</p>\n\n<p>Node pool governance is available on the Nomad Enterprise Governance package.</p>\n\n<h2>Job status and deployments redesign</h2>\n<img src=\"https://www.datocms-assets.com/2885/1687877713-status.gif\" alt=\"Job\" /><p>Upon visiting the job page, users can now quickly determine if their job is running and in a healthy state. The new design clarifies how many allocations are meant to be running versus how many actually <em>are</em> running. Additionally, the top-level status of the job reflects if a job is fully healthy, deploying an update, in a degraded state, or recovering from a degraded state.</p>\n\n<p>The update also makes it easier to understand allocation status. The top-level visualization for allocations now shows the status of allocations from the <em>current deployment</em> by default, not the status of all historical allocations. Each allocation block shows its status and its health-check status, and provides a link to the allocation page. This surfaces more important information to the user in an easily understandable format.</p>\n<p>Additionally, the deployments interface has been upgraded to make it clearer when a deployment is active, show the status of every allocation associated with a deployment, and outline the rules Nomad is following for each deployment. Plus, a list of events related to the deployment, such as when allocations were placed, when a canary promotion happened, and when allocations failed, is included in the UI. Even users who are unfamiliar with Nomad’s deployment process should be able to follow along without consulting the documentation.</p>\n\n<p>Altogether, these changes add up to the largest improvements to Nomad’s job page in several years.</p>\n\n<h2>Jobspec sources in the UI</h2>\n\n<p>Nomad 1.6 makes it easier than ever to understand how a job is supposed to behave, by surfacing jobspec source code directly from the UI.</p>\n<p>The job definition tab previously showed only the full jobspec definition in raw JSON, which included the values set by the submitter and all of the default values for the job. This made it difficult to quickly understand and debug jobs from the UI.</p>\n\n<p>Nomad 1.6 includes the full jobspec file that was used to submit the job. This makes it far easier to understand what a job is doing and how it is supposed to behave. Users won’t have to reference their version control system just to read a job file.</p>\n\n<p>Users who wish to make ad-hoc changes to jobs in the UI can do so via HashiCorp configuration language (HCL) as well. While we suggest a git-based flow for regular production use, editing in the UI can be helpful for quickly fixing jobs under time constraints or for trial-and-error while writing a new job.</p>\n\n<p>Submitting and saving large jobspec files in Nomad can increase the storage requirements for high-use clusters. Therefore, for performance-oriented clusters, we’ve included the ability to set a <a href=\"https://developer.hashicorp.com/nomad/docs/configuration/server#job_max_source_size\"><code>job_max_source_size</code></a> size limit. Setting this limit to 0 will cause Nomad to disregard any HCL jobspec files. By default, Nomad will not store a jobspec source over 1MB.</p>\n\n<p>See the new <a href=\"https://developer.hashicorp.com/nomad/api-docs/jobs#submission\">submission value in the job API</a> and <a href=\"https://developer.hashicorp.com/nomad/api-docs/jobs#read-job-submission\">submissions API endpoints</a> for more information on how to save jobspec files using the API.</p>\n\n<h2>Nomad Pack 0.1</h2>\n\n<p><a href=\"https://github.com/hashicorp/nomad-pack\">Nomad Pack</a> is a package manager and templating tool built for Nomad. It allows users to easily templatize Nomad jobs, pass in user-provided parameters, and deploy jobs to Nomad. Platform teams setting up Nomad for their developers can use Pack to standardize the way Nomad jobs are run within their organization. New Nomad users can use Pack to deploy common applications to Nomad.</p>\n\n<p>Nomad Pack’s upcoming 0.1 release includes many major improvements to writing and using packs.</p>\n\n<p>First, Nomad Pack 0.1 will include improved support for versioned dependencies. When writing a Pack, to include a dependency, include it in the metadata using a <code>dependency</code> block, then call the new <code>nomad-pack deps vendor</code> command from the Pack’s root directory. This will bundle the dependencies at the specified version within your pack. To update a dependency’s version, just bump the version in the metadata file, and call the command again:</p>\n<pre><code># metadata.hcl\n\ndependency \"redis\" {\n  source = \"git://github.com/acmecorp/canonical-redis@1.0.2\"\n}</code></pre><pre><code># cli (from pack directory)\nnomad-pack deps vendor</code></pre><p>This lets Nomad Pack users share code between packs in a simple way. For instance, you can write a helper pack that contains your organization’s canonical definitions for health checks, stateful services, or common Nomad tasks. These packs can be used by other packs, with dependencies pinned to specific versions and updated safely.</p>\n\n<p>Next, Nomad Pack will allow users to templatize and render files that are not Nomad jobs. For instance, you can render configuration files that need to be submitted to a Nomad job once it is deployed, or Nomad policies that determine your tasks’ access level. Any file ending in <code>.tpl</code> in the templates directory will be rendered when calling the <code>nomad-pack render</code> command.</p>\n\n<p>Additionally, Nomad Pack 0.1 supports optional jobs. Say you have a pack that could use a database running on Nomad itself or in your cloud provider. You may want to conditionalize running a database Nomad job based on a user-supplied variable. Nomad Pack 0.1 will ignore jobs when templates are blank, allowing users to wrap full jobspec templates in conditionals based on user-supplied variables:</p>\n<pre><code># ./my-pack/templates/database.nomad.tpl\n\n# only deploy database if include_db variable is true\n[[ if ( var \"include_db\" . )]]\njob \"database\" {\n\t\t# rest of pack code\n\t\t…\n}\n[[ end ]]</code></pre><p>Other improvements to Nomad Pack include:</p>\n\n<ul>\n<li>A new <code>var-file</code> command to auto-generate a variable overrides file for a pack by running <code>nomad-pack generate var-file &lt;pack-name&gt;</code>.</li>\n<li>A new <code>list</code> command lists available packs, while the <code>registry list</code> command has been changed to list registries.</li>\n<li>HCL job files are auto-formatted when rendering a pack.</li>\n<li>Users can pass in variables that are unspecified by the pack they are deploying. This allows for more easily shareable variable override files, such as <code>dev</code> or <code>prod</code> variable files that provide values specific to each environment.</li>\n<li>A new syntax for passing in variable values for child packs.</li>\n<li>Author and URL fields have been removed from pack metadata.</li>\n<li>Nomad UI can filter the jobs index to show only packs.</li>\n<li>Multiple bug fixes</li>\n</ul>\n\n<p>Lastly, Nomad Packs are now available in the <a href=\"https://developer.hashicorp.com/nomad/integrations?types=pack\">Nomad Integrations Registry</a>. Currently, any packs submitted to the <a href=\"https://github.com/hashicorp/nomad-pack-community-registry/\">Nomad Pack Community Registry</a> will be auto-imported to the Integrations Registry. In the near future, we will be opening up the integrations registry to other repositories. This self-serve model will allow pack writers to more easily maintain and share packs with other Nomad users. More information will be shared on how to contribute packs in your own GitHub repos once we open the registry to the public.</p>\n\n<p>Nomad Pack 0.1 is expected to be released in the coming weeks.</p>\n\n<h2>Production-ready Podman</h2>\n\n<p>One of Nomad’s guiding principles is to let the user run workloads how they like, and for many Nomad users who wanted to run containers, this meant running <a href=\"https://podman.io/\">Podman</a>. The Nomad ecosystem has long had a <a href=\"https://github.com/hashicorp/nomad-driver-podman\">Podman task driver</a> supported by many members of the community. The Nomad team has lent a hand to our community over the last release cycle and closed gaps between the official Docker driver and Podman on Nomad.</p>\n\n<p>This means improved quality of life and fewer bugs for users in the RHEL ecosystem. Nomad’s Consul Connect integration now also handles Podman without any customized code. With previous releases of Nomad, Podman users had to specify a custom <code>connect.sidecar_task</code> to properly run Envoy as a Podman container. Now, Nomad automatically recognizes if a task is running Podman and launches Envoy using Podman. This allows users to take full advantage of Nomad’s user-friendly integration with HashiCorp Consul.</p>\n\n<p>Additionally, the Podman driver now correctly supports cgroup v2 and bridge networking, and has had <a href=\"https://github.com/hashicorp/nomad-driver-podman/blob/main/CHANGELOG.md\">several major bugs fixed</a>.</p>\n\n<h2>Job restart command</h2>\n\n<p>Nomad 1.6 includes a new <a href=\"https://developer.hashicorp.com/nomad/docs/commands/job/restart\">'nomad job restart'</a> command to make it easier to restart or reschedule all the allocations in a job.</p>\n\n<pre><code>nomad job restart app-server\n</code></pre>\n\n<p>This will be the equivalent of calling <a href=\"https://developer.hashicorp.com/nomad/docs/commands/alloc/restart\"><code>nomad alloc restart</code></a> on every allocation deployed by the job. If you wish to restart all the tasks associated with an allocation, including prestart and sidecar tasks, include the <a href=\"https://developer.hashicorp.com/nomad/docs/commands/job/restart#all-tasks\"><code>-all-tasks</code></a> flag.</p>\n\n<p>Add the <a href=\"https://developer.hashicorp.com/nomad/docs/commands/job/restart#reschedule\"><code>–reschedule</code></a> flag to place allocations on new nodes. This can be helpful in rebalancing allocations in a cluster in response to changes since the last job deployment. </p>\n\n<h2>More Nomad updates</h2>\n\n<p>Outside of these core improvements, new additions in Nomad 1.6 and in minor releases since Nomad 1.5 was released include:</p>\n\n<ul>\n<li>JWT <a href=\"https://developer.hashicorp.com/nomad/api-docs/acl/auth-methods\">authentication method</a> for machine-to-machine authentication and <a href=\"https://developer.hashicorp.com/nomad/api-docs/acl/login#authenticate-with-an-externally-issued-token\">identity token based login</a>. This can enable improved authentication workflows, such as this <a href=\"https://github.com/mikenomitch/nomad-jwt-auth/\">GitHub Action for authentication using JWTs</a> or <a href=\"https://github.com/hashicorp/nomad/pull/16625\">UI logins using JWTs</a>.</li>\n<li>The <a href=\"https://developer.hashicorp.com/nomad/docs/commands/alloc/logs\"><code>nomad alloc logs</code></a> command now streams both <code>stdout</code> and <code>stderr</code> by default when following an allocation.</li>\n<li>A new <a href=\"https://developer.hashicorp.com/nomad/docs/configuration/client#drain_on_shutdown-block\"><code>drain_on_shutdown</code></a> block has been added to Nomad client configuration to allow jobs to more gracefully stop on node shutdown.</li>\n<li>Log collection <a href=\"https://developer.hashicorp.com/nomad/docs/job-specification/logs#disabled\">can now be disabled</a> for deployments with out-of-band log shipping. This can cut down on memory overhead for edge deployments.</li>\n<li>Custom templates or JSON can be produced when calling the <a href=\"https://developer.hashicorp.com/nomad/docs/commands/alloc/checks#checks-options\"><code>alloc checks</code></a>, <a href=\"https://developer.hashicorp.com/nomad/docs/commands/namespace/status#status-options\"><code>namespace status</code></a>, <a href=\"https://developer.hashicorp.com/nomad/docs/commands/quota/status#inspect-options\"><code>quota status</code></a>, <a href=\"https://developer.hashicorp.com/nomad/docs/commands/server/members#server-members-options\"><code>server members</code></a>, and <a href=\"https://developer.hashicorp.com/nomad/docs/commands/quota/inspect#inspect-options\"><code>quota inspect</code></a> endpoints by using the \n<code>-t</code> and <code>-json</code> flags.</li>\n<li>Additional keyboard shortcuts added for <a href=\"https://github.com/hashicorp/nomad/pull/16378\">running, stopping, and purging jobs</a>, <a href=\"https://github.com/hashicorp/nomad/pull/16378\">running exec</a>, <a href=\"https://github.com/hashicorp/nomad/pull/17568\">promoting canaries</a>, <a href=\"https://github.com/hashicorp/nomad/pull/17568\">failing deployments</a>, and <a href=\"https://github.com/hashicorp/nomad/pull/17169\">switching regions</a>.</li>\n<li>Support for Docker’s <a href=\"https://docs.docker.com/compose/compose-file/compose-file-v2/#group_add\">group_add</a> parameter has been added.</li>\n<li>Raft traffic due to client updates <a href=\"https://github.com/hashicorp/nomad/pull/17354\">has been reduced</a>.</li>\n</ul>\n\n<h2>Community highlights: Wasm and Cilium on Nomad</h2>\n\n<p>One of the joys of working on Nomad is watching our community use the product in unexpected ways. The Nomad team wanted to highlight some of the great work done by our community to push Nomad into exciting new territory.</p>\n\n<p>Web Assembly (Wasm) for server-side work is becoming increasingly popular. Rather than running full containers to isolate and encapsulate workloads, some are using WebAssembly modules. Because Nomad can run more than just containers, it is a perfect fit for this sort of workload. Community members have written a <a href=\"https://github.com/c16a/nomad-driver-wasmtime\">wasmtime driver</a> and a <a href=\"https://github.com/fermyon/nomad-driver-spin\">Spin driver</a> to run Wasm on Nomad.</p>\n\n<p>Nomad also provides flexibility at the networking level. Users have a high degree of control over how they want their networking stack to work on Nomad. Nomad users at <a href=\"https://cosmonic.com/\">Cosmonic</a> wanted to use <a href=\"https://cilium.io/blog/2023/01/18/cosmonic-user-story/?hss_channel=tw-94734642\">Cilium</a> to connect their Wasm workloads. They have open sourced the great <a href=\"https://github.com/cosmonic/netreap\">Netreap</a> tool in order to do that.</p>\n\n<p>As Nomad embraces flexibility and “workflows not technologies”, we think it is a perfect fit for those experimenting with server-side Wasm. We look forward to continuing to see this space grow over time.</p>\n\n<h2>Community updates</h2>\n\n<p>Nomad is committed to being an open source-first project, and we’re always looking for open source contributors. If you’re familiar with Go or interested in learning/honing your Golang skills, we invite you to join the group of Nomad contributors helping to improve the product.</p>\n\n<p>Looking for a place to start? Head to the <a href=\"https://github.com/hashicorp/nomad/contribute\">Nomad contribute page</a> for a curated list of good first issues. If you’re a returning Nomad contributor looking for an interesting problem to tackle, take a glance at issues labeled “<a href=\"https://github.com/hashicorp/nomad/issues?q=is%3Aopen+is%3Aissue+label%3Ahelp-wanted\">help-wanted</a>” or “<a href=\"https://github.com/hashicorp/nomad/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\">good first issue</a>”. For help getting started, check out the <a href=\"https://github.com/hashicorp/nomad/tree/main/contributing\">Nomad contributing documentation</a> or comment directly on the issue with any questions you have. Community members can also contribute <a href=\"https://developer.hashicorp.com/nomad/integrations\">integrations to Nomad</a> or to the <a href=\"https://github.com/hashicorp/nomad-pack-community-registry\">Nomad Pack Community Registry</a>.</p>\n\n<p>We also encourage users to go to the official <a href=\"https://discuss.hashicorp.com/c/nomad/28\">Nomad Community Forums</a> or join us for <a href=\"https://www.hashicorp.com/community/office-hours\">community office hours</a> if they have Nomad questions or feedback. We also would like to recognize some of our community members for creating unofficial spaces for Nomad users to connect. Thank you to the communities on <a href=\"https://gitter.im/hashicorp-nomad/Lobby\">Gitter</a> and the <a href=\"https://discord.gg/dF28D6nvEh\">HashiCorp Community Discord</a>.</p>\n\n<h2>Getting started with Nomad 1.6</h2>\n\n<p>We encourage you to try out the new features in Nomad 1.6:</p>\n\n<ul>\n<li><a href=\"https://www.nomadproject.io/downloads\">Download Nomad 1.6</a> from the project website.</li>\n<li>Learn more about Nomad with<a href=\"https://learn.hashicorp.com/nomad\"> tutorials on the HashiCorp Learn</a> site.</li>\n<li>Contribute to Nomad by submitting a pull request for a GitHub issue with the “<a href=\"https://github.com/hashicorp/nomad/issues?q=is%3Aopen+is%3Aissue+label%3Ahelp-wanted\">help wanted</a>” or “<a href=\"https://github.com/hashicorp/nomad/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\">good first issue</a>” label.</li>\n<li><a href=\"https://www.nomadproject.io/community\">Participate in our community</a> forums, office hours, and other events.</li>\n</ul>\n\n<p><em>This post was originally published on June 28 for the beta release.</em></p>\n","author":"Mike Nomitch","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"dd12b16acde516c2de4d1bd6b69570f52c731c3695121007fe818d8e3ffd3a13","category":"Tech"}