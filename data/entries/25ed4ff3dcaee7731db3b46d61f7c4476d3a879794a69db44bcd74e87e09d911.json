{"title":"Revealing Images With CSS Mask Animations","link":"https://smashingmagazine.com/2023/09/revealing-images-css-mask-animations/","date":1694761200000,"content":"<p><a href=\"https://www.smashingmagazine.com/2023/07/shines-perspective-rotations-css-3d-effects-images/\">In a previous article</a>, we explored fancy hover effects for images that involve shines, rotations, and 3D perspectives. We are going to continue playing with images, but this time, we are making animations that reveal images on hover. Specifically, we will learn about CSS masks and how they can be used to cover portions of an image that are revealed when the cursor hovers over the image.</p>\n<p>Here is the HTML we will use for our work:</p>\n<pre><code>&lt;img src=\"\" alt=\"\"&gt;\n</code></pre>\n\n<p>Yes, that’s right, only one image tag. The challenge I like to take on with each new CSS project is: <strong>Let CSS do all of the work without extra markup.</strong></p>\n<p>As we go, you may notice minor differences between the code I share in the article and what is used inside the demos. The code throughout the article reflects the CSS specification. But since browser support is inconsistent with some of the features we’re using, I include prefixed properties for broader support.</p>\nExample 1: Circle Reveal\n<p>In this first one, an image sits in a square container that is wiped away on hover to reveal the image.</p>\n<p><img src=\"https://files.smashing.media/articles/revealing-images-css-mask-animations/1-square-images-sstriped-gradient-borders.png\" /></p>\n<p>So, we have two images, each with a gradient background that is revealed with a touch of padding. We could have added a <code>&lt;div&gt;</code> — or perhaps even a <code>&lt;figure&gt;</code> — to the markup to create a true container, but that goes against the challenge of letting CSS do all of the work.</p>\n<p>While we were able to work around the need for extra markup, we now have to ask ourselves: <em>How do we hide the image without affecting the gradient background?</em> What we need is to hide the image but continue to show the padded area around it. <strong>Enter CSS masks.</strong></p>\n<p>It’s not terribly complicated to apply a mask to an element, but it’s a little trickier in this context. The “trick” is to chain two mask layers together and be more explicit about where the masks are applied:</p>\n<pre><code>img {\n  /* etc. */\n  mask:\n    linear-gradient(#000 0 0) padding-box,\n    linear-gradient(#000 0 0) content-box;\n}\n</code></pre>\n\n<p>Now we have two masks “sources”: </p>\n<ol>\n<li><code>content-box</code>: one that is restricted to the image’s content,</li>\n<li><code>padding-box</code>: one that covers the whole image area, including the padded area.</li>\n</ol>\n<p>We need two layers because then we can combine them with the CSS <code>mask-composite</code> property. We have different ways to combine mask layers with <code>mask-composite</code>, one of which is to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mask-composite\">“exclude” the area where the two masks overlap each other</a>.</p>\n<pre><code>img {\n  /* etc. */\n  mask:\n    linear-gradient(#000 0 0) padding-box,\n    linear-gradient(#000 0 0) content-box;\n  mask-composite: exclude;\n}\n</code></pre>\n\n<p>This will make only the gradient visible (the padded area), as you can see below.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/wvQOJrZ\">Overview of the exclude composition</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>Notice that we can remove the <code>padding-box</code> from the code since, by default, a gradient covers the whole area, and this is what we need.</p>\n<p>Are there other ways we could do this without <code>mask-composite</code>? There are many ways to hide the content box while showing only the padded area. Here is one approach using a <code>conic-gradient</code> as the mask:</p>\n<pre><code>mask:\n  conic-gradient(from 90deg at 10px 10px, #0000 25%, #000 0)\n  0 0 / calc(100% - 10px) calc(100% - 10px);\n  /* 10px is the value of padding */\n</code></pre>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/vYQPxWr\">Border-only using conic-gradient</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>There are others, of course, but I think you get the idea. The approach you choose is totally up to you. I personally think that using <code>mask-composite</code> is best since it doesn’t require us to know the padding value in advance or change it in more than one place. Plus, it’s a good chance to practice using <code>mask-composite</code>.</p>\n<p>Now, let’s replace the second gradient (the one covering only the content area) with a <code>radial-gradient</code>. We want a circle swipe for the hover transition, after all.</p>\n<pre><code>img {\n  mask:\n    linear-gradient(#000 0 0),\n    radial-gradient(#000 70%,#0000 71%) content-box;\n  mask-composite: exclude;\n}\n</code></pre>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/wvQOJmb\">Adding the radial-gradient</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>See that? The <code>exclude</code> mask composite creates a hole in the image. Let’s play with the size and position of that cutout and see what is happening. Specifically, I’m going to cut the size in half and position the circle in the center of the image:</p>\n<pre><code>mask:\n  linear-gradient(#000 0 0),\n  radial-gradient(#000 70%,#0000 71%) content-box\n    center / 50% 50% no-repeat;\n  mask-composite: exclude;\n</code></pre>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/YzRgZvj\">Updating the radial-gradient size and position</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>I bet you can already see where this is going. We adjust the size of the <code>radial-gradient</code> to either hide the image (increase) or reveal the image (decrease). To fully hide the image, we need to scale the mask up to such an extent that the circle covers up the image. That means we need something <em>greater</em> than <code>100%</code>. I did some boring math and found that <code>141%</code> is the precise amount, but you could wing it with a round number if you’d like.</p>\n<p>That gives us our final CSS for the effect:</p>\n<div>\n<pre><code>img {\n  padding: 10px; /* control the thickness of the gradient \"border\" */\n  background: repeating-linear-gradient(45deg, #FF6B6B 0 10px, #4ECDC4 0 20px);\n  mask:\n    linear-gradient(#000 0 0),\n    radial-gradient(#000 70%, #0000 71%) content-box\n      50% / var(--_s, 150% 150%) no-repeat;\n  mask-composite: exclude;\n  transition: .5s;\n}\nimg:hover {\n  --_s: 0% 0%;\n}\n</code></pre>\n</div>\n\n<p>A few minor details:</p>\n<ul>\n<li>We start with a size equal to <code>150% 150%</code> to initially hide the image. I am taking the additional step of applying the size as a CSS variable (<code>--_s</code>) with the full size (<code>150% 150%</code>) as a fallback value. This way, all we need to do is update the variable on hover.</li>\n<li>Add a hover state that decreases the size to zero so that the image is fully revealed.</li>\n<li>Apply a slight transition of <code>.5s</code> to smooth out the hover effect.</li>\n</ul>\n<p>Here’s the final demo one more time:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/abQGGew\">Hover reveal animation using mask</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>We just created a nice reveal animation with only a few lines of CSS — and no additional markup! We didn’t even need to resort to pseudo-elements. And this is merely one way to configure things. For example, we could play with the mask’s position to create a slick variation of the effect:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/dyQrvEq\">Another variation of the circular reveal animation</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>I’m a big fan of putting an idea out there and pushing it forward with more experiments. Fork the demo and let me know what interesting things you can make out of it!</p>\nExample 2: Diagonal Reveal\n<p>Let’s increase the difficulty and try to create a hover effect that needs three gradients instead of two.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/qBQKMKa\">Hover reveal animation using mask II</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>Don't look at the code just yet. Let’s try to create it step-by-step, starting with a simpler effect that follows the same pattern we created in the first example. The difference is that we’re swapping the <code>radial-gradient</code> with a <code>linear-gradient</code>:</p>\n<div>\n<pre><code>img {\n  padding: 10px; /* control the thickness of the gradient \"border\" */\n  background: repeating-linear-gradient(45deg, #FF6B6B 0 10px, #4ECDC4 0 20px);\n  mask:\n    linear-gradient(#000 0 0),\n    linear-gradient(135deg, #000 50%, #0000 0) content-box \n      0% 0% / 200% 200% no-repeat;\n  mask-composite: exclude;\n  transition: .5s;\n}\nimg:hover {\n  mask-position: 100% 100%;\n    }\n</code></pre>\n</div>\n\n<p>You’ll notice that the other minor difference between this CSS and the first example is that the size of the mask is equal to <code>200% 200%</code>. Also, this time, the mask’s position is updated on hover instead of its size, going from <code>0% 0%</code> (top-left) to <code>100% 100%</code> (bottom-right) to create a swiping effect.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/OJaqmWV\">Diagonal reveal animation using mask</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>We can change the swipe direction merely by reversing the linear gradient angle from <code>135deg</code> to <code>-45deg</code>, then updating the position to <code>0% 0%</code> on hover instead of <code>100% 100%</code>:</p>\n<div>\n<pre><code>img {\n  padding: 10px; /* control the thickness of the gradient \"border\" */\n  background: repeating-linear-gradient(45deg, #FF6B6B 0 10px, #4ECDC4 0 20px);\n  mask:\n    linear-gradient(#000 0 0),\n    linear-gradient(-45deg, #000 50%, #0000 0) content-box \n      100% 100% / 200% 200% no-repeat;\n  mask-composite: exclude;\n  transition: .5s;\n}\nimg:hover {\n  mask-position: 0% 0%;\n}\n</code></pre>\n</div>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/ZEmPaYM\">Diagonal reveal animation using mask</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>One more thing: I defined only <em>one</em> <code>mask-position</code> value on hover, but we have <em>two</em> gradients. If you’re wondering how that works, the mask’s position applies to the first gradient, but since a gradient occupies the full area it is applied to, it cannot be moved with percentage values. That means we can safely define only one value for both gradients, and it will affect only the second gradient. I explain this idea much more thoroughly in <a href=\"https://stackoverflow.com/a/51734530/8620333\">this Stack Overflow answer</a>. The answer discusses <code>background-position</code>, but the same logic applies to <code>mask-position</code>.</p>\n<p>Next, I’d like to try to combine the last two effects we created. Check the demo below to understand how I want the combination to work:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/OJaqOym\">Combination of two diagonal reveal</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>This time, both gradients start at the center (<code>50% 50%</code>). The first gradient hides the top-left part of the image, while the second gradient hides the bottom-right part of it. On hover, both gradients slide in the opposite direction to reveal the full image.</p>\n<p>If you’re like me, you’re probably thinking: <em>Add all the gradients together, and we’re done.</em> Yes, that is the most intuitive solution, and it would look like this:</p>\n<div>\n<pre><code>img {\n  padding: 10px; /* control the thickness of the gradient \"border\" */\n  background: repeating-linear-gradient(45deg, #FF6B6B 0 10px, #4ECDC4 0 20px);\n  mask:\n    linear-gradient(#000 0 0),\n    linear-gradient(135deg, #000 50%, #0000 0) content-box \n      50% 50% / 200% 200% no-repeat,\n    linear-gradient(-45deg, #000 50%, #0000 0) content-box \n      50% 50 / 200% 200% no-repeat;\n  mask-composite: exclude;\n  transition: .5s;\n  cursor: pointer;\n}\nimg:hover {\n  mask-position: 0% 0%, 100% 100%;\n}\n</code></pre>\n</div>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/qBQvVPd\">Combining both effects</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>This approach <em>kind of</em> works, but we have a small visual glitch. Notice how a strange diagonal line is visible due to the nature of gradients and issues with anti-aliasing. We can try to fix this by increasing the percentage slightly to <code>50.5%</code> instead of <code>50%</code>:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/ZEmPaXP\">Trying to fix the anti-aliasing issue</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>Yikes, that makes it even worse. You are probably wondering if I should decrease the percentage instead of increasing it. Try it, and the same thing happens.</p>\n<p>The fix is to update the <code>mask-composite</code> property. If you recall, we are already using the <code>exclude</code> value. Instead of declaring <code>exclude</code> alone, we need to also apply the <code>add</code> value to make sure the bottom layers (the swiping gradients) aren’t excluded from each other but are instead added together:</p>\n<pre><code>img {\n  mask:\n    /* 1st layer */\n    linear-gradient(#000 0 0),\n\n    /* 2nd layer */\n    linear-gradient(135deg, #000 50.5%, #0000 0) content-box \n      50% 50% / 200% 200% no-repeat,\n\n    /* 3rd layer */\n    linear-gradient(-45deg, #000 50.5%, #0000 0) content-box \n      50% 50% / 200% 200% no-repeat;\n\n  mask-composite: exclude, add;\n}\n</code></pre>\n\n<p>Now, the second and third layers will use the <code>add</code> composition to create an intermediate layer that will be excluded from the first one. In other words, we must exclude all the layers from the first one.</p>\n<p>I know <code>mask-composite</code> is a convoluted concept. I highly recommend you read Ana Tudor’s <a href=\"https://css-tricks.com/mask-compositing-the-crash-course/\">crash course on mask composition</a> for a deeper and more thorough explanation of how the <code>mask-composite</code> property works with multiple layers.</p>\n<p>This fixes the line issue in our hover effect:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/zYMbPLY\">Diagonal reveal animation using mask</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>One more small detail you may have spotted: we have defined <em>three</em> gradients in the code but only <em>two</em> <code>mask-position</code> values on the hover state:</p>\n<pre><code>img:hover {\n  mask-position: 0% 0%, 100% 100%;\n}\n</code></pre>\n\n<p>The first value (<code>0% 0%</code>) is applied to the first gradient layer; it won't move as it did before. The second value (<code>100% 100%</code>) is applied to the second gradient layer. Meanwhile, the third gradient layer uses the first value! When fewer values are declared on <code>mask-position</code> than the number of mask layers, the series of comma-separated values repeats until all of the mask layers are accounted for.</p>\n<p>In this case, the series repeats circles back to the first value (<code>0% 0%</code>) to ensure the third mask layer takes a value. So, really, the code above is a more succinct equivalent to writing this:</p>\n<pre><code>img:hover {\n  mask-position: 0% 0%, 100% 100%, 0% 0%;\n}\n</code></pre>\n\n<p>Here is the final demo again with both variations. You will see that the second example uses the same code with minor updates.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/qBQKMKa\">Hover reveal animation using mask II</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\nExample 3: Zig-Zag Reveal\n<p>I have one more example for you, this time revealing the image with zig-zag edges sliding apart, sort of like teeth chomping on the image.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/vYQaLaZ\">Hover reveal animation using mask III</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>While this may look like a more complex hover effect than the last two we covered, it still uses the same underlying CSS pattern we’ve used all along. In fact, I’m not even going to dive into the code as I want you to reverse-engineer it using what you now know about using CSS gradients as masks and combining mask layers with <code>mask-composite</code>.</p>\n<p>I won’t give you the answer, but I will share an article I wrote that <a href=\"https://css-tricks.com/css-borders-using-masks/\">demonstrates how I created the zig-zag shape</a>. And since I’m feeling generous, I’ll link up <a href=\"https://css-generators.com/custom-borders/\">this online border generator</a> as another resource.</p>\nWrapping Up\n<p>I hope you enjoyed this little experiment with CSS masks and gradients! Gradients can be confusing, but mixing them with masks is nothing short of complicated. But after spending the time it takes to look at three examples in pieces, we can clearly see how gradients can be used as masks as well as how we can combine them to “draw” visible areas.</p>\n<p>Once we have an idea of how that works, it’s amazing that all we need to do to get the effect is update either the mask’s position or size on the element’s hover state. And the fact that we can accomplish all of this with a single HTML element shows just how powerful CSS is.</p>\n<p>We saw how the same general CSS pattern can be tweaked to generate countless variations of the same effect. I thought I’d end this article with a few more examples for you to play with.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/PoxLMOy\">Hover reveal animation using mask IV</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/jOQJgxN\">Hover reveal animation using mask V</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/gOQEVdQ\">Hover reveal animation using mask VI</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<h3>Further Reading on Smashing Magazine</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/08/css-accessibility-inclusion-user-choice/\">CSS And Accessibility: Inclusion Through User Choice</a>,” Carie Fisher</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/09/gradients-blend-modes-hover-effect/\">Gradients, Blend Modes, And A Really Cool Hover Effect</a>,” Preethi Sam</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/08/interesting-ways-use-css-shadows/\">A Few Interesting Ways To Use CSS Shadows For More Than Depth</a>,” Preethi Sam</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/08/oklch-color-spaces-gamuts-css/\">Falling For Oklch: A Love Story Of Color Spaces, Gamuts, And CSS</a>,” Geoff Graham</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"25ed4ff3dcaee7731db3b46d61f7c4476d3a879794a69db44bcd74e87e09d911","category":"Tech"}