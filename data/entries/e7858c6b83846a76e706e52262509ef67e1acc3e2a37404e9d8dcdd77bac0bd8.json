{"title":"How To Animate Along A Path In CSS","link":"https://smashingmagazine.com/2023/10/animate-along-path-css/","date":1697630400000,"content":"<p>Let’s talk about progress indicators — or loaders. It’s true that there are so many tutorials about them and <a href=\"https://codepen.io/search/pens?q=loaders\">even more examples floating around CodePen</a>. There was a time just a couple of years ago when loaders seemed to be the go-to example for framework documentation, next to to-do apps.</p>\n<p>I recently had the task of creating the loading state for a project, so naturally, I looked to CodePen for inspiration. What I wanted was a circular shape, and there is no shortage of examples. In many cases, the approach is some combination of using the CSS <code>border-radius</code> property to get a circular shape and <code>@keyframes</code> to spin it from <code>0deg</code> to <code>360deg</code>.</p>\n<p>I needed a little more than that. Specifically, I needed a donut shape that fills in the progress indicator as it goes from <code>0%</code> to <code>100%</code>. Thankfully, I found great donut examples I could use for inspiration and several different approaches. For example, I could use the “trick” of an <a href=\"https://css-tricks.com/how-stroke-dasharray-patterns-work/\">SVG with a stroke that animates</a> with a combination of <code>stroke-dasharray</code> and <code>stroke-dashoffset</code>. Temani Afif has <a href=\"https://css-loaders.com\">hundreds of examples</a> that use a combination of CSS gradients and masks.</p>\n<p>There was still more that I needed. What I really wanted was a donut progress indicator that not only fills in as the progress increases but sets a visual on it that moves with the progress. In other words, I wanted to make it look like an object is traveling around the donut, leaving a trail of progress behind.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/vYvrwXo\">Circular animation with offset Pt. 1 [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>.</p>\n<p>See that? The scooter has a circular track that fills in with a gradient as it moves around the shape. If you’re using Firefox, you likely will have trouble with the demo because it relies on a custom <code>@property</code> that <a href=\"https://caniuse.com/mdn-css_at-rules_property\">Firefox doesn’t support</a> yet. However, it is supported in the Nightly version, so perhaps we have full support to look forward to soon.</p>\n<p>In the end, I wound up combining several of the techniques I found and some additional considerations. I thought I would share the approach because I like demonstrating how various ideas can come together to create something different. This demo uses animated custom properties, a conic gradient, CSS <code>offset</code>, and emoji to produce the effect. The truth is that you may find a different combination or set of techniques that get the job done or fit your requirements better. This is more of a thinking exercise.</p>\nCreating The Donut\n<p>Circles in CSS are fairly straightforward. We could draw one in SVG and forget CSS entirely. That’s a valid approach, but I’m comfortable working directly in CSS for this sort of thing. We start with a single element in the HTML:</p>\n<pre><code>&lt;div class=\"progress-circle\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>From here, we set the circle’s dimensions. That can be done by declaring a <code>width</code> and using an <code>aspect-ratio</code> to maintain a perfect one-to-one shape.</p>\n<pre><code>.progress-circle {\n  width: 200px; \n  aspect-ratio: 1;\n}\n</code></pre>\n\n<p>Now we can round the shape with the <code>border-radius</code> property:</p>\n<pre><code>.progress-circle {\n  width: 200px; \n  aspect-ratio: 1;\n  border-radius: 50%;\n}\n</code></pre>\n\n<p>That’s our shape! We won’t see anything yet, of course, because we haven’t filled it in with color. Let’s do that now with a <code>conic-gradient</code>. We want one of those because the gradient moves in a circular direction by default, starting at <code>0%</code> and completing a full circle at <code>360deg</code>.</p>\n<pre><code>.progress-circle {\n  width: 200px; \n  aspect-ratio: 1;\n  border-radius: 50%;\n  background: conic-gradient(red 10%, #eee 0); \n}\n</code></pre>\n\n<p>So far, so good:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/zYyaera\">Conic Gradient Circle [forked]</a> by <a href=\"https://codepen.io/geoffgraham\">Geoff Graham</a>.</p>\n<p>What we’re looking at is pretty much a pie chart, right? We’ve established a circular shape and filled it in with a conical gradient that starts with red and hits a hard color stop at <code>#eee</code>, filling in the rest of the pie in a light gray.</p>\n<p>The pie is delicious, but we’re aiming for a donut, and donuts have a hole cut out of the center. In the true spirit of CSS, there are different ways to approach this. Again, <a href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-2/\">Temani has demonstrated time and again</a> how CSS masks can do cut-outs. It’s a clean approach, too, because we can repurpose the same conical gradient to cut a circle from the center, only changing the color values to mask out the part we want to hide.</p>\n<p>I went a different route, partly for convenience and partly for the sake of demonstrating how CSS is capable of approaching challenges in multiple ways. So, you may even find yourself going with a different route than what we’re demonstrating here. My approach is to use the <code>::before</code> pseudo-element of the <code>.progress-circle</code>. We lay it on top of the conical gradient with absolute positioning, fill it with a solid color, and size it so it eclipses part of the main shape. It’s basically a smaller solid-colored circle on top of a larger gradient-filled circle.</p>\n<pre><code>.progress-circle {\n    /* previous styles */\n    position: relative;\n}\n.progress-circle::before {\n  content: '';\n  position: absolute;\n  inset: 20px; \n  border-radius: inherit;\n  background: white;\n}\n</code></pre> \n\n<p>Notice what we’re doing to position the smaller circle. Since we’re working with <code>::before</code>, we need the CSS <code>content</code> property to make it display, even with an empty value. From there, we’re using absolute positioning, setting the smaller circle towards the center with an <code>inset</code> applied in all directions. We’re able to <code>inherit</code> the larger circle’s <code>border-radius</code> before setting a solid background color. We can’t forget to set relative positioning on the larger circle to (a) set a stacking context and (b) keep the smaller circle within the larger circle’s bounds.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/GRPGzjg\">conic-gradient() [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>.</p>\n<p>That’s it for the donut! We accomplished it purely in CSS, relying on a combination of the <code>border-radius</code> property, a <code>conic-gradient</code>, and a well-positioned <code>::before</code> pseudo-elmement.</p>\nAnimating The Progress\n<p>Have you worked with custom CSS properties? I’m not simply referring to defining <code>--some-variable</code> with a value, but using <code>@property</code> to register a property with a custom syntax. It’s magic how it allows us to interpolate between values that we are normally unable to, <a href=\"https://css-tricks.com/interpolating-numeric-css-variables/\">such as color and angle values in gradients</a>.</p>\n<p>When we register a CSS custom property, we have to mention what its <em>type</em> is, for instance, whether the value is a <code>&lt;length&gt;</code>, <code>&lt;number&gt;</code>, <code>&lt;color&gt;</code> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@property/syntax\">any of the 11 other types that are supported</a> at the time I’m writing this. This way, the browser understands what sort of value it is working with, and when the time arises, it can update the variable’s value for an animation.</p>\n<p>I’m going to register a custom property called <code>--p</code>, which is short for its syntax, <code>&lt;percentage&gt;</code>, with an initial value of <code>10%</code> that will be the “starting” point for the progress indicator.</p>\n<pre><code>@property --p {\n  syntax: '';\n  inherits: false;\n  initial-value: 10%;\n}\n</code></pre>\n\n<p>Now, we can use the <code>--p</code> variable where we need it, such as where the hard color stops between <code>red</code> and <code>#eee</code> in the larger circle’s conical gradient that we’re using as the starting point.</p>\n<pre><code>.progress-circle {\n    /* previous styles */ \n    background: conic-gradient(red var(--p), #eee 0); \n}\n</code></pre>\n\n<p>We want to transition from the custom property’s initial value, <code>10%</code>, to a larger percentage in order to move the gradient’s hard color stop around the shape. So, let’s set up a CSS <code>transition</code> that is designed to update the value of <code>--p</code>.</p>\n<pre><code>.progress-circle {\n  /* previous styles */ \n  background: conic-gradient(red var(--p), #eee 0); \n  transition: --p 2s linear;\n}\n</code></pre>\n\n<p>We’re going to update the value on hover, transitioning from <code>10%</code> to <code>80%</code>:</p>\n<pre><code>.progress-circle:hover{\n  --p: 80%;\n}\n</code></pre>\n\n<p>One more small adjustment: I like to update the <code>cursor</code> on hover so that it’s clearer what sort of interaction the user is dealing with. In this case, we’re working with something indicating progress, so that’s how we’ll configure it:</p>\n<pre><code>.progress-circle {\n  /* previous styles */\n  cursor: progress;\n}\n</code></pre>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/mdaKvBe\">conic-gradient() animation [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>.</p>\n<p>Our circle is done! We can now hover over the element, and the conical gradient’s hard color stops transitions from <code>10%</code> to <code>80%</code> behind the smaller circle that is hiding the rest of the gradient to imply a donut shape. We registered a custom <code>@property</code> with an initial value, applied it to the gradient, and updated the value on hover.</p>\nMoving Around The Circle\n<p>The final part of this exercise is to work on the progress indicator. We’re using the gradient to indicate progress, but I want the additional visual aid of an object that travels around the larger circle with the gradient as it transitions values.</p>\n<p>The idea I had was a little scooter that appears to leave a gradient trail behind it. We already have the circle and the gradient, so all we need is the scooter and a way to make it use the larger circle as a track to drive around.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/NWezoyg\">CSS offset animation [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>.</p>\n<p>Let’s go ahead and add the scooter to the HTML as an emoji:</p>\n<pre><code>&lt;div class=\"progress-circle\"&gt;\n  &lt;div class=\"progress-indicator\"&gt;🛵&lt;/div&gt;\n&lt;/div&gt; \n</code></pre>\n\n<p>If we had decided to create the initial donut shape with SVG, then we could have used the same path we used for the larger circle as the track. However, we can still get the same path-making powers in CSS using the <code>offset-path</code> property. It’s so much like writing SVG in CSS that we can actually use the exact same coordinates for an SVG circle in the <code>path()</code>:</p>\n<pre><code>.chart-indicator {\n  /* previous styles */\n  offset: path(\"M 100, 0 a 100 100 0 1 1 -.1 0 z\");\n}\n</code></pre>\n\n<p>SVG path coordinates are difficult to read, but this is what we’re doing in this particular path:</p>\n<ol>\n<li><code>M 100, 0</code>: This <em>moves</em> the position of the starting point on an X-Y coordinate system, where <code>100</code> is along the X-axis and equal to the larger circle’s radius, or one-half of its width, <code>200px</code>. The starting point is set to <code>0</code> on the Y-axis, placing it at the top of the shape. So, we’re starting at the top-center of the larger circle.</li>\n<li><code>a 100 100</code>: This sets an <em>arc</em> with horizontal and vertical radii of <code>100</code>, giving us a new circle. Even though we won’t technically see the circle, it is drawn in there, providing the scooter with an invisible track that follows the shape of the larger circle.</li>\n</ol>\n<p>One more thing! We have a starting point for the scooter, thanks to the coordinates in the <code>offset-path</code>. The CSS <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/offset-distance\"><code>offset-distance</code></a> property lets us define the end point where we plan to offset the scooter, which is exactly equal to the <code>--p</code> custom property.</p>\n<pre><code>.chart-indicator {\n  /* previous styles */\n  offset-path: path(\"M 100, 0 a 100 100 0 1 1 -.1 0 z\");\n  offset-distance: var(--p);\n}\n</code></pre>\n\n<p>We’re already updating our custom <code>--p</code> property on hover to help move the conical gradient’s hard stop position from an initial value of <code>10%</code> to <code>80%</code>. We should do the same for the scooter so they move together.</p>\n<pre><code>.progress-circle:hover &gt; .progress-indicator { --p: 80%; }\n</code></pre>\n\n<p>I’m using the child combinator (<code>&gt;</code>) since the indicator is a direct child of the circle. If your design includes additional elements or requires the scooter to be a further descendant, then you might consider a general descendant selector instead.</p>\nThe Final Result\n<p>Here’s everything we covered in a single CSS snippet. I’ve cleaned things up a tiny bit, such as setting up variables for recurring values, like the <code>--size</code> of the circle.</p>\n<div>\n<pre><code>/* Custom property */\n@property --p {\n  syntax: '&lt;percentage&gt;';\n  inherits: false;\n  initial-value: 10%;\n}\n\n/* Large circle */\n.progress-circle {\n  --size: 200px; \n  --p: 10%; /* fallback for no @property support */\n\n  background: conic-gradient(red calc(-60% + var(--p)), rgb(224, 187, 77) var(--p), #eee 0);\n  border-radius: 50%;\n  position: relative;\n  margin: auto;\n  cursor: progress;\n}\n\n/* Small circle pseudo-element */\n.progress-circle::before {\n  content:'Going ten to eighty percent';\n  position: absolute;\n  inset: 20px; \n  text-align: center;\n  padding: 50px;\n  font: italic 9pt 'Enriqueta';\n  border-radius: inherit;\n  background: white;\n}\n\n/* The scooter track */\n.progress-indicator {\n    --size: min-content; \n    offset: path(\"M 100,0 a 100 100 0 1 1 -.1 0 z\");\n    offset-distance: var(--p);\n    font: 43pt serif;\n    transform: rotateY(180deg) translateX(-6px);\n}\n\n/* Update initial value on :hover */\n.progress-circle:hover,\n.progress-circle:hover &gt; .progress-indicator { \n  --p: 80%;\n}\n\n/* Controls the width of larger circle and scooter track */\n.progress-circle,\n.progress-indicator {\n    width: var(--size);\n    transition: --p 2s linear;\n}\n</code></pre>\n</div>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/vYvrwXo\">Circular animation with offset Pt. 1 [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>.</p>\n<p>A scooter and a solid gradient are only one idea. How about different objects with different trails?</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/gOZKJma\">Circular animation with offset Pt. 2 [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>.</p>\n<p>I’ve been referring to this component as both a “progress indicator” and a “loader” throughout the article. <strong>There is a difference between displaying progress and loading states, but it’s also possible for a loading state to display the loading progress.</strong> That’s why I’m using a generic <code>&lt;div&gt;</code> as a <code>&lt;figure&gt;</code> in the example, but you could just as well use it on more semantic HTML elements, like <code>&lt;progress&gt;</code> or <code>&lt;meter&gt;</code> depending on your specific use case. For accessibility, you might consider incorporating descriptive text that can be announced as assistive-technology-friendly sentences that describe the data.</p>\n<p>Let me know if you use this on a project and how you approach it. Share it with me in the comments, and we can compare notes.</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/07/shines-perspective-rotations-css-3d-effects-images/\">Shines, Perspective, And Rotations: Fancy CSS 3D Effects For Images</a>,” Temani Afif</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/10/advanced-animations-css/\">How To Create Advanced Animations With CSS</a>,” Yosra Emad</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/01/css-radial-conic-gradient/\">A Deep CSS Dive Into Radial And Conic Gradients</a>,” Ahmad Shadeed</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/08/interesting-ways-use-css-shadows/\">A Few Interesting Ways To Use CSS Shadows For More Than Depth</a>,” Preethi Sam</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"e7858c6b83846a76e706e52262509ef67e1acc3e2a37404e9d8dcdd77bac0bd8","category":"Tech"}