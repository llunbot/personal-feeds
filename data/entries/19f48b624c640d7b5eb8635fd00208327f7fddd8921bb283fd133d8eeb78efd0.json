{"title":"คำแนะนำเรื่อง Technical skill ของ Test Automation Engineer","link":"https://www.somkiat.cc/technical-skill-for-test-automation-engineer/","date":1716959554000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/05/techical-skills-150x150.jpg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/05/techical-skills-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2024/05/techical-skills-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/05/techical-skills.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/05/techical-skills.jpg\" width=\"648\" height=\"421\" /></a></figure>\n\n\n\n<p>มีคำถามเกี่ยวกับการมาเป็น Test Automation Engineer ว่า<br />ควรมี <strong>technical skill </strong>อะไรบ้าง ? <br />เพื่อช่วยให้การทดสอบดีขึ้น<br />จากสิ่งที่ทำและเจอมา สามารถสรุปคร่าว ๆ ได้ดังนี้</p>\n\n\n\n<span></span>\n\n\n\n<p>ให้เริ่มจากวิธีคิดก่อนว่า ต้องปรับปรุงให้ดีกว่าเดิม<br />อย่าไปกลัวที่จะเรียนรู้สิ่งใหม่ ๆ<br />จากนั้นลงมือทำ วัดผล ให้ได้รับ feedback และปรับปรุงด้วยการลงมือทำซ้ำ ๆ</p>\n\n\n\n<p>มาเริ่มกันเลย</p>\n\n\n\n<p><strong>เรื่องแรก programming skill ให้เลือกสักภาษาก่อนเพื่อศึกษา</strong></p>\n\n\n\n<p>เนื่องจากการทำ automation test นั้นจำเป็นต้องเขียน script หรือ code เสมอ<br />แต่เป็นการเขียนในเชิงการทดสอบ ไม่ใช่การพัฒนาระบบงาน<br />แต่เรื่องนี้เป็นกำแพงอันยิ่งใหญ่ สำหรับ QA/Tester ที่ทำ manual มาตลอด หรือ non-technical<br />จึงต้องอาศัยวิธีคิด ความพยายามสูงกว่าคนอื่น ๆ</p>\n\n\n\n<p>แต่ส่วนใหญ่มักจะหนีไปใช้เครื่องมือพวก</p>\n\n\n\n<ul>\n<li>AI หรือ GenAI</li>\n\n\n\n<li>Record and playback tool</li>\n\n\n\n<li>Scriptless/No code/Low Code tool</li>\n</ul>\n\n\n\n<p>ซึ่งมันคือการหนีนั่นเอง ดังนั้นจะไม่ได้มีความรู้ด้าน programming มากนัก<br />ก็จะไม่ได้สนใจเรื่องนี้เท่าไร เน้น tool ล้วน ๆ<br />จะส่งผลดีในช่วงแรก แต่ในการดูแลระยะยาวจะวุ่นวายหรือลำบากมาก ๆ<br />เช่นเกิด flaky test ขึ้นมาอีก<br />สุดท้ายจะบอกว่า ทดสอบแบบเดิมดีกว่า !!</p>\n\n\n\n<p>แต่แน่นอนว่า มันก็คือ หนึ่งในการเรียนรู้เช่นกัน</p>\n\n\n\n<p><strong>เรื่องที่สองคือ การใช้งาน Version Control เช่น Git</strong></p>\n\n\n\n<p>เพราะว่าเขียน test script จำเป็นต้องจัดการ version ของ script เหล่านั้น<br />และการใช้เครื่องมือเดียวกับทีมพัฒนาก็จะช่วยให้ทำงานเป็นทีมมากขึ้น<br />อย่างน้อยถ้ามีปัญหาก็สามารถพูดคุยกันได้</p>\n\n\n\n<p>แนะนำให้เริ่มที่ command line tool ก่อนนะครับ<br />อย่าเพิ่มเริ่มด้วย GUI tool<br />ยากหน่อยในการเริ่มต้น แต่พื้นฐานสำคัญมาก ๆ</p>\n\n\n\n<p>อีกอย่างเรื่องของ การใช้ command line tool ต่าง ๆ ก็ฝึกเอาไว้<br />ถ้าเขียน shell script ได้ก็จะดียิ่งขึ้น</p>\n\n\n\n<p>อีกอย่างเมื่อ test script มีการเปลี่ยน ก็จะเป็นต้องทำการ execute test ทั้งหมดทุก ๆ ครั้งอีกด้วย<br />ตรงนนี้ช่วยให้สามารถเพิ่มการทดสอบแบบอัตโนมัติ<br />ใน pipeline ของ CI/CD process ได้ง่ายอีกด้วย</p>\n\n\n\n<p>ลด ละ เลิก การส่ง test script ผ่าน email หรือ chat tool กันได้แล้ว !!</p>\n\n\n\n<p><strong>เรื่องที่สาม เรียนรู้เรื่อง format file ต่าง ๆ ที่จำเป็นต่อการใช้งาน</strong></p>\n\n\n\n<p>ยกตัวอย่างเช่นส่วนใหญ่ต้องรู้ และ เขียนพวก JSON, YAML ได้<br />ก่อนนี้จะมีพวก XML, CSV เป็นต้น</p>\n\n\n\n<p>หรือถ้าต้องการ validate โครงสร้างข้อมูลก็ต้องรู้ เช่น</p>\n\n\n\n<ul>\n<li>JSON ต้องรู้ JSON Schema</li>\n\n\n\n<li>XML ต้องรู้ XML Schema</li>\n</ul>\n\n\n\n<p><strong>เรื่องที่สี่ จะทดสอบระบบอะไรก็ต้องรู้เรื่องนั้น ๆ</strong></p>\n\n\n\n<p>ยกตัวอย่างเช่น ทดสอบ web application ผ่าน web browser<br />ก็ต้องมีความรู้เรื่องพื้นฐานของ web ก่อนด้วย เช่น</p>\n\n\n\n<ul>\n<li>HTML/CSS/JavaScript พื้นฐาน</li>\n\n\n\n<li>การเข้ามถึง element ต่าง ๆ เช่น id/name/xpath/css seclector</li>\n\n\n\n<li>ใช้ web browser เช่น Google Chrome ก็ต้องเข้าใจ หรือใช้งาน DevTool ได้อย่างดีเช่นกัน</li>\n</ul>\n\n\n\n<p>พวก Database ทั้ง SQL และ NoSQL <br />ถ้ามีความรู้จะช่วยให้เราเข้าใจโครงสร้างระบบมากยิ่งขึ้น</p>\n\n\n\n<p><strong>เรื่องที่ห้า ชุดเครื่องมือต่าง ๆ ในการทดสอบของแต่ละแบบ</strong></p>\n\n\n\n<p>ยกตัวอย่างเช่น</p>\n\n\n\n<ul>\n<li>UI test ของ web app </li>\n\n\n\n<li>UI test ของ mobile app</li>\n\n\n\n<li>API test ของ REST API, GraphQL</li>\n\n\n\n<li>Service component test</li>\n\n\n\n<li>Contract test </li>\n\n\n\n<li>.....</li>\n</ul>\n\n\n\n<p>จะใช้อะไร มีข้อดีข้อเสียอะไรบ้าง<br />เรียนรู้ให้มาก ลองใช้ให้มาก<br />เตรียมความพร้อมเอาไว้ เมื่อถึงเวลาจะได้นำมาใช้ได้เลย<br />ไม่ต้องมาเริ่มเรียนรู้ใหม่จากศูนย์ บ่อยครั้งมันก็ช้าเกินไปแล้ว</p>\n\n\n\n<p><strong>เรื่องที่หก เข้าใจเรื่องของ Architecture ของระบบงาน หรือ Software design บ้าง</strong></p>\n\n\n\n<p>ปัญหาที่เจอสำหรับการทดสอบคือ<br />จะทดสอบแต่ในมุมมองของ Black box testing เยอะมาก ๆ<br />รอให้เสร้จแล้วค่อยทดสอบ<br />บอกได้เลลย เอาอะไรมาช่วยก็ไม่รอด<br />เพราะว่าการทดสอบอยู่ในช่วงท้าย<br />ทำได้แค่ตามทดสอบให้มันจบ ๆ ไป</p>\n\n\n\n<p>ดังนั้นอยากให้กลับมาดูเป็น Gray box หรือ white box testing มากยิ่งขึ้น<br />คือการเข้ามาดู หรือ เข้าใจโครงสร้าง หรือ architecture ของระบบงานให้มากขึ้น<br />เช่นระบบงานมี Frontend, Backend, Database, Caching, API gateway, Load balancer<br />จะช่วยทำให้เข้าใจมากขึ้นมาว่า<br />ควรจะมี test strategy อะไรบ้างที่เหมาะสม<br />เพื่อค่อย ๆ ทดสอบในแต่ละส่วนว่าถูกต้อง<br />ส่วนไหนต้องจำลอง (Test double) แบบไหน อย่างไร เครื่องมืออะไร<br />ส่วนไหนที่มีปัญหา หรือ คอขวด<br />อย่างเช่น Load balancer จะทดสอบอย่างไร ?<br />แนวทางในการเตรียม data test ให้เหมาะสม หรือ ไปจนถึงการ generate data test อีกด้วย<br />จากนั้นค่อยมาทำ End-to-end test ในขั้นตอนสุดท้าย !!</p>\n\n\n\n<p><strong><em>แต่เหนือสิ่งอื่นใด คือการฝึก ฝึก ฝึก ครับ<br />ลงมือศึกษา ลงมือทำ</em></strong></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"19f48b624c640d7b5eb8635fd00208327f7fddd8921bb283fd133d8eeb78efd0","category":"Thai"}