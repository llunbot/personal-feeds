{"title":"Which Terraform workflow should I use? VCS, CLI, or API?","link":"https://www.hashicorp.com/blog/which-terraform-workflow-should-i-use-vcs-cli-or-api","date":1738083600000,"content":"<p>The goal for most organizations is to standardize software development workflows and tooling to simplify operations and ensure security and stability. For provisioning workflows, this means <a href=\"https://www.hashicorp.com/blog/maturing-your-terraform-workflow\">establishing golden workflows and components</a>. However, some applications require more flexibility to build, so experienced developers and operators will need more leeway to provision infrastructure outside certain guardrails.</p>\n\n<p>HCP Terraform (formerly Terraform Cloud) allows this flexibility through <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/run/api\">API-driven workflows</a>. These workflows offer customization but they are more complex than UI/version control system (VCS) or CLI-driven workflows, so it's recommended that experienced Terraform users manage them. This post will compare the three HCP Terraform run workflows (CLI, UI/VCS, and API), highlighting their use cases and benefits. </p>\n\n<h2>How to choose the right HCP Terraform run workflow</h2>\n\n<p>Every organization has a unique journey with infrastructure provisioning shaped by the needs of the business as well as the preferences and skills of the administrators and developers. One size does not fit all when it comes to workflows—each team must evaluate and implement the processes that best align with their unique objectives and dynamics. Below are some essential factors to consider when customizing workflows for your team:</p>\n\n<ul>\n<li>Setup efforts </li>\n<li>Maintenance efforts</li>\n<li>Security concerns</li>\n<li>Architectural and process complexity</li>\n</ul>\n\n<h3>The 3 HCP Terraform workflows</h3>\n\n<p>HCP Terraform has three workflows for managing Terraform runs, and your chosen workflow determines when and how Terraform runs occur.</p>\n<img src=\"https://www.datocms-assets.com/2885/1738007757-create-a-new-workspace.png\" alt=\"New\" /><h4>UI/VCS</h4>\n\n<p>The <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/run/ui\">UI/VCS-driven run workflow</a> is the simplest, most “push-button” method for HCP Terraform runs. In this workflow, HCP Terraform can connect to any of the <a href=\"https://developer.hashicorp.com/terraform/enterprise/vcs#supported-vcs-providers\">major VCS providers</a> (e.g. GitHub or Bitbucket). Once connected, HCP Terraform automatically registers webhooks with your VCS provider when you create a workspace. Whenever new commits are merged to the branch of a workspace’s linked repository, HCP Terraform automatically queues a Terraform run. It also performs a <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/run/remote-operations#speculative-plans\">speculative plan</a> when a pull request is opened against that branch.</p>\n\n<h5>Use this when</h5>\n\n<ul>\n<li>You need simple traceability and transparency.</li>\n<li>You want to employ a GitOps workflow for managing large-scale deployments.</li>\n<li>You want an easy-to-setup, basic, collaborative provisioning workflow.</li>\n<li>You want to provide users with an easy self-service workflow.</li>\n</ul>\n\n<h5>Setup tasks</h5>\n\n<ul>\n<li><strong>Access</strong>: The users need to have access to the VCS and <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/users-teams-organizations/permissions\">HCP Terraform</a> with the appropriate permissions. </li>\n<li><strong>Define the repository architecture</strong>: Set up repositories via your VCS (e.g. GitHub) for internal teams to store the Terraform configuration files. </li>\n<li><strong>Integration</strong>: Link your existing Terraform organization to your chosen VCS. For example, if you are using GitHub, you would use GitHub Apps or GitHub OAuth. </li>\n<li><strong>Create an HCP Terraform workspace</strong>: For new workspaces, follow the UI guidance to create a workspace with a corresponding repository. A workspace is linked to one branch of a VCS repository and ignores changes to other branches.</li>\n</ul>\n\n<h5>Maintenance tasks</h5>\n\n<ul>\n<li><strong>Repository branch management</strong>: Teams need to maintain a disciplined approach to branching and versioning. Regular merging, conflict resolution, and ensuring the branches align with infrastructure changes are all critical tasks.</li>\n<li><strong>VCS provider integration management:</strong> For example, if you use GitHub App, you need to manage the user’s access to different sets of repositories. If you use GitHub OAuth, you need to plan how to maintain the VCS providers if the person leaves the company. </li>\n</ul>\n\n<h5>Security concerns</h5>\n\n<ul>\n<li>Users with access to the repository may also be authorized to trigger Terraform runs.</li>\n</ul>\n\n<h5>Architectural and process complexity</h5>\n\n<ul>\n<li>This workflow is highly automated, promoting strong collaboration and thorough review processes.</li>\n<li>It’s easily scalable for teams and multiple environments. </li>\n</ul>\n\n<h4>CLI</h4>\n\n<p>The <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/run/cli\">CLI-driven run workflow</a> uses Terraform's CLI tools to execute runs remotely in HCP Terraform. This workflow brings more of Terraform’s <a href=\"https://developer.hashicorp.com/terraform/intro/phases/collaborate\">collaboration features</a> into the picture. It has strengths from both the VCS and API-driven workflows  and is useful for developers who are already comfortable with using the Terraform CLI and it can work with existing CI/CD pipelines.</p>\n\n<p>However, the learning curve is steeper than the UI/VCS-driven workflow if you haven’t been exposed to the various CLI tools (<code>terraform</code>, <code>tfci</code>, etc.). Get familiar with these CLIs before using this workflow. </p>\n\n<p>A CLI-driven run can start by simply running the standard <code>terraform plan</code> and <code>terraform apply</code> commands. You can watch the progress of the run from your terminal or the HCP Terraform UI.</p>\n\n<h5>Use this when</h5>\n\n<ul>\n<li>You are comfortable with the Terraform CLI.</li>\n<li>You want to enable additional commands for provisioning.</li>\n<li>Members of a small team want to test configurations locally.</li>\n<li>You want to start with the CLI-driven workflow, and add VCS providers for those workspaces later.</li>\n<li>Your workspaces are not connected to any VCS repository.</li>\n</ul>\n\n<h5>Setup tasks</h5>\n\n<ul>\n<li><strong>Build:</strong> Install and configure the Terraform CLI.</li>\n<li><strong>Authentication setup:</strong> Configure authentication for the CLI using API tokens or OAuth. The HCP Terraform CLI must be connected to your HCP environment with the proper access permissions to manage the infrastructure. </li>\n<li><strong>Integration:</strong> Integrate with your existing CI/CD pipelines.</li>\n<li><strong>Choose starting point:</strong> Start from the UI or from the command line.</li>\n</ul>\n\n<h5>Maintenance tasks</h5>\n\n<ul>\n<li><strong>Terraform version updates:</strong> Updating Terraform versions (CLI and provider plugins) on local machines or CI servers requires version management. </li>\n<li><strong>Branch management:</strong> You need to maintain a disciplined approach to branching and versioning the Terraform configuration files locally and/or through your CI/CD pipeline. </li>\n</ul>\n\n<h5>Security concerns</h5>\n\n<ul>\n<li>Administrators need to have a plan to manage credentials, such as the HCP Terraform API tokens. Other variables can be managed through the HCP Terraform workspace.</li>\n<li>Administrators need to apply access controls on the configuration files. </li>\n</ul>\n\n<h5>Architectural and process complexity</h5>\n\n<ul>\n<li>Uses the Terraform binary (a wrapper around the <code>go-tfe</code>API client)</li>\n<li>This workflow is familiar to those with experience using the Terraform Community Edition, where the CLI workflow is the default workflow. </li>\n<li>Compared to the VCS-driven workflow, it takes more effort to integrate into your CI/CD.</li>\n</ul>\n\n<h4>API</h4>\n\n<p>The <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/run/api\">API-driven run workflow</a> is more flexible than the other two workflows, but it requires the creation of some tooling in most cases. It operates based on an orchestrator capable of monitoring changes to your Terraform code and making a series of calls to HCP Terraform to perform runs (e.g. a CI/CD system or something else capable of monitoring changes to your Terraform code and performing actions in response). The orchestrator can automatically decide when your configuration has changed and a run should occur.</p>\n\n<p>To automate API-driven workflows, users often create custom tooling by wrapping the HCP Terraform API. This enables them to make specific API calls before or after a Terraform run, performing actions based on the output or conditions. For instance, after a Terraform run, this custom wrapper could trigger a tool like <a href=\"https://docs.ansible.com/platform.html\">Ansible</a>. This approach is commonly used to meet organizational needs, address specific requirements, or handle custom workflows that standardized solutions cannot fully support.</p>\n\n<p>This workflow has the steepest learning curve of the three. Get familiar with the HCP Terraform API before you start using this workflow. The workflow author should have expertise in CI/CD integrations and scalable practices.</p>\n\n<h5>Use this when</h5>\n\n<ul>\n<li>You need a custom workflow that is integrated with your specific toolchain.</li>\n<li>You need highly granular controls for each step of the workflow.</li>\n<li>You want workflows that go beyond Terraform provisioning.</li>\n<li>You want to run low-touch, heavily automated workflows.</li>\n<li>When you don’t want the user to access the HCP Terraform UI or CLI, or the VCS directly. The organization wants to trigger those tools only through integration with a different central platform, such as ServiceNow or a custom system.</li>\n</ul>\n\n<h5>Setup tasks:</h5>\n\n<ul>\n<li><strong>Requirements:</strong> Choose the orchestration tool (e.g. your CI/CD system) you want to automate HCP Terraform with. Research its integration points.</li>\n<li><strong>Authentication setup:</strong> Set up API token for authentication with HCP Terraform.</li>\n<li><strong>Automation scripts:</strong> Build scripts that interact with the Terraform API. This can involve using tools like curl, <a href=\"https://www.postman.com/\">Postman</a>, or writing scripts in languages like Python or Go to interact with the HCP Terraform API.</li>\n<li><strong>Webhook configuration:</strong> Set up webhooks to trigger automated workflows when specific events occur. Set up triggers to call Terraform runs or apply changes via the API. </li>\n<li><strong>Integration:</strong> Build a wrapper to integrate workflow with any tools/systems.</li>\n</ul>\n\n<h5>Maintenance tasks:</h5>\n\n<ul>\n<li><strong>API changes and deprecation:</strong> Continuously monitor the API for updates or deprecations. As HCP Terraform or other third-party services update their APIs, you’ll need to maintain your scripts to ensure compatibility.</li>\n<li><strong>Run tracking:</strong> You’ll also want to use the API’s capabilities to monitor and track the progress of runs. </li>\n<li><strong>Error handling and logging:</strong> Have logging and alerting mechanisms in place to ensure that the system provides enough detailed information in real-time, enabling quick issue detection and efficient troubleshooting.</li>\n</ul>\n\n<h5>Security concerns</h5>\n\n<ul>\n<li><strong>Credential management</strong>: Administrators need to have a plan to manage credentials, including the HCP Terraform API token.</li>\n<li><strong>Granular access control:</strong> Ensure that proper access control policies (e.g., OAuth scopes, permissions) are in place to limit the exposure of infrastructure.</li>\n<li><strong>API endpoint security:</strong> Ensure that all API calls are made over HTTPS to avoid man-in-the-middle (MITM) attacks. </li>\n<li><strong>Implement a security strategy:</strong> Set up and manage your own authentication, authorization, monitoring, and anomaly detection.</li>\n</ul>\n\n<h5>Architectural and process complexity</h5>\n\n<ul>\n<li>This workflow is complex to set up, maintain, and debug, especially if integrating with multiple systems.</li>\n</ul>\n\n<h4>Workflows change and evolve</h4>\n\n<p>In real-world infrastructure development, the workflows used can vary depending on the stage of the project. They may even shift from one to another as the project evolves. It's crucial to consider the project's goals, timeline, maintenance costs, and team skill levels to determine the most suitable workflow for your current state.</p>\n\n<h2>Summary chart</h2>\n\n<p>Every organization has a different journey with infrastructure provisioning, and every journey is unique at the organizational, team, and individual level. </p>\n\n<ul>\n<li>Terraform users need to identify what workflows suit them.</li>\n<li>Standardization across one team might not suit the other.</li>\n<li>More flexible requirements typically result in a more complex implementation.</li>\n</ul>\n\n<p>Here is a quick reference table for each of the three HCP Terraform workflows:</p>\n\n<table>\n  <tr>\n   <td>\n   </td>\n   <td><strong>UI/VCS</strong>\n   </td>\n   <td><strong>CLI</strong>\n   </td>\n   <td><strong>API</strong>\n   </td>\n  </tr>\n  <tr>\n   <td><strong>Setup effort</strong>\n   </td>\n   <td>Low\n   </td>\n   <td>Moderate\n   </td>\n   <td>High\n   </td>\n  </tr>\n  <tr>\n   <td><strong>Maintenance effort</strong>\n   </td>\n   <td>Low\n   </td>\n   <td>Moderate\n   </td>\n   <td>High\n   </td>\n  </tr>\n  <tr>\n   <td><strong>Security concerns</strong>\n   </td>\n   <td>Access to VCS and HCP Terraform\n   </td>\n   <td>Credentials and configuration files\n   </td>\n   <td>Credentials and API endpoints \n   </td>\n  </tr>\n  <tr>\n   <td><strong>Architectural and process complexity</strong>\n   </td>\n   <td>Low\n   </td>\n   <td>Moderate\n   </td>\n   <td>High\n   </td>\n  </tr>\n  <tr>\n   <td><strong>Flexibility for customization</strong>\n   </td>\n   <td>Low\n   </td>\n   <td>Moderate\n   </td>\n   <td>High\n   </td>\n  </tr>\n</table>\n\n<h2>Additional references</h2>\n\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud-get-started/cloud-vcs-change\">Use the VCS-driven workflow</a></li>\n<li><a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud-get-started/cloud-workspace-create\">Create a CLI-driven workspace</a></li>\n<li><a href=\"https://developer.hashicorp.com/terraform/enterprise/run/api\">The API-driven run workflow</a></li>\n</ul>\n","author":"Ting Li","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"36a7979c4e1c7af83d0de936e4b5f74ce2123c1e5b02206eae0ec1394aa72fa0","category":"Tech"}