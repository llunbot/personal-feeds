{"title":"Terraform gains upgrades for module tests, explorer, and more","link":"https://www.hashicorp.com/blog/terraform-gains-upgrades-for-module-tests-explorer-and-more","date":1707757200000,"content":"<p>The HashiCorp Terraform team has made a lot of progress over the past few months, simplifying IT operations, increasing developer velocity, and cutting costs for organizations. The new Terraform Cloud and Terraform Enterprise improvements — all now generally available — include:</p>\n\n<ul>\n<li>Test-integrated module publishing</li>\n<li>Explorer for workspace visibility</li>\n<li>Inactivity-based destruction for ephemeral workspaces</li>\n<li>Priority variable sets</li>\n<li>Resource replacement from the UI</li>\n<li>Auto-apply for run triggers</li>\n<li>Version constraints in the Terraform version selector</li>\n</ul>\n\n<h2>Test-integrated module publishing</h2>\n\n<p>Back in October 2023 at HashiConf, we <a href=\"https://www.hashicorp.com/blog/new-terraform-testing-and-ux-features-reduce-toil-errors-and-costs\">released the beta version of test-integrated module publishing for Terraform Cloud</a>, along with the Terraform test framework, to streamline module testing and publishing workflows. Now we are excited to announce general availability of <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/registry/test\">test-integrated module publishing</a>. This new feature helps module authors and platform teams produce high-quality modules quickly and securely with more control over when and how modules are published.</p>\n<img src=\"https://www.datocms-assets.com/2885/1707434355-test-results-tfc.png\" alt=\"Test\" /><p>Since the beta launch, we have made several improvements. </p>\n\n<p>First, branch-based publishing and test integration are now compatible with all supported <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/vcs\">VCS providers</a> in Terraform Cloud: GitHub, GitLab, Bitbucket, and Azure DevOps. Also, test results are now reported back to the connected repository as a VCS status check when tests are initiated by a pull request or merge. This gives module developers immediate in-context feedback without leaving the VCS interface. </p>\n\n<p>Finally, to support customers publishing modules at scale, both the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/api-docs\">Terraform Cloud API</a> and the <a href=\"https://registry.terraform.io/providers/hashicorp/tfe/latest\">provider for Terraform Cloud and Enterprise</a> now support branch-based publishing and enablement for test-integrated modules in addition to the UI-based publishing method.</p>\n<img src=\"https://www.datocms-assets.com/2885/1707434395-checks-failed-tfc.png\" alt=\"An\" /><p>Along with being GA in Terraform Cloud, test-integrated module publishing is also available in the January 2024 (v202401-1) release of Terraform Enterprise, available now.</p>\n\n<h2>Explorer for workspace visibility</h2>\n\n<p>After we announced the <a href=\"https://www.hashicorp.com/blog/new-terraform-cloud-capabilities-to-import-view-and-manage-infrastructure\">beta version of the explorer for workspace visibility</a> back at HashiDays in May 2023, we have been receiving lots of feedback and making improvements. We are now excited to announce general availability of the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/explorer\">explorer for workspace visibility</a> to help users ensure that their environments are secure, reliable, and compliant.</p>\n\n<p>Since the beta launch, we’ve made enhancements to allow users to find, view, and use their important operational data from Terraform Cloud more effectively as they monitor workspace efficiency, health, and compliance. For example, we improved the query speed, added more workspace data, introduced CSV exports, and provided options for filtering and conditions. Popular uses of explorer include tracking Terraform module and provider usage in workspaces, finding workspaces without a connected VCS repo, and identifying health issues like drifted workspaces and continuous validation failures. With the new public Explorer API, users can automate the integration of their data into visibility and reporting workflows outside of Terraform Cloud.</p>\n<img src=\"https://www.datocms-assets.com/2885/1707434510-tfc-explorer-conditions.png\" alt=\"Explorer\" /><h2>Inactivity-based destruction for ephemeral workspaces</h2>\n\n<p>Developer environments cost money to set up and run. If they are left running after developers have finished using them, your organization is incurring unnecessary costs. <a href=\"https://www.hashicorp.com/blog/terraform-ephemeral-workspaces-public-beta-now-available\">Ephemeral workspaces</a> in Terraform Cloud and Enterprise— workspaces that expire after a set time and automatically de-provision — are a way to solve this cost overrun. However, it is sometimes hard to predict how much time you should give an ephemeral workspace to live.</p>\n\n<p>To give users a more dynamic mechanism for ephemeral workspace removal, we’ve introduced inactivity-based destruction for ephemeral workspaces in Terraform Cloud Plus and Terraform Enterprise (v202312-1). Users of those products can now <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings/deletion#destroy-if-a-workspace-is-inactive\">set a workspace to \"destroy if inactive\"</a>, allowing administrators and developers to establish automated clean up of workspaces that haven't been updated or altered within a specified time frame. This eliminates the need for manual clean-up, reducing wasted infrastructure costs and streamlining workspace management. </p>\n<img src=\"https://www.datocms-assets.com/2885/1707496110-tfc-inactivity-auto-destroy-ui.png\" alt=\"Example:\" /><h2>Priority variable sets to enforce variables across workspaces</h2>\n\n<p>Variable sets allow Terraform Cloud users to reuse both Terraform-defined and environment variables across certain workspaces or an entire organization. One of the core use cases for this feature is credential management, but variables can also manage <a href=\"https://www.hashicorp.com/blog/terraform-cloud-variable-sets-beta-now-available\">anything that can be defined as Terraform variables</a>. When using variable sets for credential management, it is critical to ensure that these variables cannot be tampered with by end users. </p>\n\n<p><a href=\"https://developer.hashicorp.com/terraform/enterprise/workspaces/variables/managing-variables#priority-variable-sets\">Priority variable sets</a> for Terraform Cloud and Terraform Enterprise (v202401-1) provide a convenient way to prevent the over-writing of more infrastructure-critical variable sets, such as those used for credentials. Once the platform team has prioritized a variable set, even if a user has access to workspace variables or can modify a workspace’s Terraform configuration, they still won’t be able to override variables in that prioritized set. </p>\n<img src=\"https://www.datocms-assets.com/2885/1707496525-variable-set-priority.png\" alt=\"Enable\" /><p>When creating a new variable set, check the \"Prioritize the variable values in this variable set\" box to make it a priority variable set.</p>\n\n<h2>Resource replacement from the UI</h2>\n\n<p>In the past, Terraform Cloud users were not able to use the UI to regenerate a damaged or degraded resource (or resources) for a VCS-connected workspace without switching to the CLI workflow. This was a tedious and error-prone manual process.</p>\n\n<p>In some cases, a remote object may become damaged or degraded in a way that Terraform cannot automatically detect. For example, if software running inside a virtual machine crashes but the virtual machine itself is still running, Terraform will typically have no way to detect and respond to the problem because Terraform directly manages the machine as a whole.</p>\n\n<p>Now, if you know that an object is damaged or if you want to force Terraform to replace it for any other reason, you can override Terraform's default behavior using the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/run/modes-and-options#replacing-selected-resources\">replace resources option</a> to instruct Terraform to replace the resource(s) you select. Users can now create a new run via the Terraform Cloud UI with the option to replace resources in addition to the CLI and API approach. The replacement workflow is also available in v202401-1 of Terraform Enterprise.</p>\n<img src=\"https://www.datocms-assets.com/2885/1707496775-replace-resources-ui.png\" alt=\"Replace\" /><h2>Auto-apply for run triggers</h2>\n\n<p><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings/run-triggers\">Run triggers</a> let users connect two workspaces in Terraform Cloud to automatically queue runs when the parent workspace is successfully applied. This is commonly used in multi-tier infrastructure deployments where resources are split between multiple workspaces, or with shared infrastructure like networking or databases. In the past, runs initiated by a run trigger did not auto-apply. Instead, users had to manually confirm the pending run in each workspace individually.</p>\n\n<p>The new “auto-apply run triggers” option in the workspace settings allows workspace admins to choose whether to auto-approve runs initiated by a run trigger. This setting is independent from the workspace auto-apply setting, providing more flexibility in defining workspace behavior. It provides an automated way to chain applies across workspaces to simplify operations without human intervention.</p>\n\n<p>Auto-apply run triggers are now generally available in Terraform Cloud and Terraform Enterprise v202401-1.</p>\n\n<h2>Version constraints in the Terraform version selector</h2>\n\n<p>Each workspace in Terraform Cloud defines the version of Terraform used to execute runs. Previously, <a href=\"https://developer.hashicorp.com/terraform/language/expressions/version-constraints\">version constraints</a> could be set via the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/api-docs/workspaces#create-a-workspace\">workspaces API</a>, but in the UI version selector, the choices were limited to specific versions of Terraform or the “latest” option, which always selects the newest version. Users had to either manually update versions for each workspace or accept the risk of potential behavior changes in new versions.</p>\n\n<p>Terraform Cloud and Enterprise (v202302-1) now have an updated Terraform version selector that includes version constraints, allowing workspaces to automatically update specific Terraform versions with patch releases while staying within the selected major or minor version. This provides a more seamless and flexible experience for users who rely on the web console and don’t have direct API access.</p>\n<img src=\"https://www.datocms-assets.com/2885/1707497031-version-constraints.png\" alt=\"New\" /><h2>Get started with Terraform Cloud</h2>\n\n<p>These Terraform Cloud and Enterprise enhancements represent a continued evolution aimed at helping customers maximize their infrastructure investments and accelerate application delivery.</p>\n\n<p>To learn more about these features, visit our <a href=\"https://developer.hashicorp.com/terraform\">Terraform guides and documentation on HashiCorp Developer</a>. If you are new to Terraform, <a href=\"https://app.terraform.io/public/signup/account\">sign up for Terraform Cloud</a> and get started for free today.</p>\n","author":"Yushuo Huang","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"8e5215ac321366d3151cd1f45bac8fc2509b3a0fba39cd4aef90d992d11b8530","category":"Tech"}