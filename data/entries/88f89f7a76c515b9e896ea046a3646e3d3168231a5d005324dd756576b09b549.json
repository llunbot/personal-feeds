{"title":"New – AWS Proton Supports Terraform and Git Repositories to Manage Templates","link":"https://aws.amazon.com/blogs/aws/new-aws-proton-supports-terraform-and-git-repositories-to-manage-templates/","date":1637791382000,"content":"<p>Today we are announcing the launch of two features for <a href=\"https://aws.amazon.com/proton/\">AWS Proton</a>. First, the most requested one in the AWS Proton <a href=\"https://github.com/aws/aws-proton-public-roadmap\">open roadmap,</a> to define and provision infrastructure using <a href=\"https://www.terraform.io/\">Terraform.</a> Second, the capability to manage AWS Proton templates directly from Git repositories.</p> \n<p>AWS Proton is a fully managed application delivery service for containers and serverless applications, <a href=\"https://aws.amazon.com/blogs/aws/preview-aws-proton-automated-management-for-container-and-serverless-deployments/\">announced during reinvent 2020</a>. AWS Proton aims to help infrastructure teams automate and manage their infrastructure without impacting developer productivity. It allows developers to get the templates they need to deliver their applications without the need to involve the platform team.</p> \n<p>When using AWS Proton, the infrastructure team needs to define the environment and the service templates. Learn more about the <a href=\"https://docs.aws.amazon.com/proton/latest/adminguide/ag-works.html\">templates</a>.</p> \n<p><span><strong>Template Sync</strong></span><br /> This new feature in AWS Proton enables the platform team to push, update, and publish templates directly from their Git repositories. Now when you create a new service or environment template, you can specify a remote Git repository containing the templates. AWS Proton will automatically sync those templates and make them available for use. When there are changes to the Git repository, AWS Proton will take care of the updates.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/18/04-create-env-gitsync.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/18/04-create-env-gitsync-893x1024.png\" /></a></p> \n<p>One important advantage of using repositories and syncing the templates is that it simplifies the process of the administrators for uploading, updating, and registering the templates. This process, when done manually, can be error-prone and inconvenient. Now you can automate the process of authoring and updating the templates. Also, you can add more validations using pull requests and track the changes to the templates.</p> \n<p>Template sync allows collaboration between the platform team and the developers. By having all the templates in a Git repository, all the collaboration tooling available in platforms like <a href=\"https://github.com/\">GitHub</a> becomes available to everybody. Now developers can see all the templates, and when they want to improve them, they can just create a pull request with the changes. In addition, tools like bug trackers and features requests can be used to manage the templates.</p> \n<p><span><strong>Configuring the Repository Link</strong></span><br /> To get started using template sync, you need to give AWS Proton permissions to access your repositories. For that, you need to create a link between AWS Proton and your repository.</p> \n<p>To do this, first <a href=\"https://docs.aws.amazon.com/dtconsole/latest/userguide/connections-create-github.html#connections-create-github-console\">create a new source connection for your GitHub account</a>. Then you need to create a new repository link from the AWS Proton. Go to the Repositories option in the side bar. Then in the <strong>Link new repository</strong> screen, use the GitHub connection that you just created and specify a repository name.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/24/08-repo-info.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/24/08-repo-info-1024x696.png\" /></a></p> \n<p><span><strong>AWS Proton supports Terraform</strong></span><br /> Until now, <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> was the only infrastructure as code (IaC) engine available in AWS Proton. Now you can define service and environment templates based on infrastructure defined using Terraform and through a pull-request-based mechanism, use Terraform to provision and keep your infrastructure updated.</p> \n<p>Platforms teams author their IaC templates in <a href=\"https://www.terraform.io/docs/language/index.html\">HCL</a>, the Terraform language, and then provision the infrastructure using Terraform Open Source. AWS Proton renders the ready-to-provision Terraform module and makes a pull request to your infrastructure repository, from where you can plan and apply the changes.</p> \n<p>This operation is asynchronous, as AWS Proton is not the one managing the provision of infrastructure. Therefore it is important that in the process of provisioning the infrastructure, there is a step that notifies AWS Proton of the status of the deployment.</p> \n<p>I want to show you a demo on how you can set up an environment using Terraform. For that, you will use <a href=\"https://github.com/features/actions\">GitHub actions</a> to provision the Terraform infrastructure in your AWS account.</p> \n<p>To get started with Terraform templates, first, configure the repository link as it was described before. Then you need to create a new role to give permissions to GitHub actions to perform some activities in your AWS account. You can find the <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> <a href=\"https://github.com/aws-samples/awsproton-terraform-githubactions-sample/\">template for this role here</a>.</p> \n<p>Create an empty GitHub repository and create a folder <code>.github/workflows/</code>. Create a file called <code>terraform.yml</code>. In that file, you need to define the GitHub actions to plan and apply the infrastructure changes. <a href=\"https://github.com/aws-samples/awsproton-terraform-githubactions-sample/tree/main/.github/workflows\">Copy the template from the terraform example file</a>.</p> \n<p>This template configures your AWS credentials, configures Terraform, plans the whole infrastructure, and applies the changes in the infrastructure using Terraform, and then notifies AWS Proton on the status of this process.</p> \n<p>In addition, you need to modify the file <code>env_config.json</code>, which is located inside that folder. In that file, you need to add the configuration for the environment you plan to create. You can append new environments to the JSON file. In the example, the environment is called <strong>tf-test</strong>. The role is the role you created previously, and the region is the region where you want to deploy this infrastructure. <a href=\"https://github.com/aws-samples/awsproton-terraform-githubactions-sample/blob/main/env_config.json\">Look at the example file</a>.</p> \n<pre><code>{\n    “tf-test”: {\n        “role”: “arn:aws:iam::123456789:role/TerraformGitHubActionsRole”,\n        “region”: “us-west-2”\n    }\n}</code></pre> \n<p>For this example, you upload the Terraform project to Amazon S3. <a href=\"https://github.com/aws-samples/awsproton-terraform-githubactions-sample/tree/main/sample-templates/sample-vpc-environment-template\">See an example of a Terraform project</a>.</p> \n<p>Now it is time to create a new environment template in AWS Proton. You can follow the instructions in the console.</p> \n<p>When your environment template is ready, create a new environment using the template you just created. When configuring the environment, select <strong>Provision through pull request</strong> and then configure the repository with the correct parameters.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/24/09-create-new-env-1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/24/09-create-new-env-1-900x1024.png\" /></a>Now, in the <strong>Environment details</strong>, you can see the Deployment status to be In progress. This will stay like this until the GitHub action finishes.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/18/06-inprogress.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/18/06-inprogress-1024x439.png\" /></a></p> \n<p>If you go to your repository, you should see a new pull request. Next to the pull request name, you will see a red cross, yellow dot, or green check. That icon depends on the status of the GitHub action. If you have a yellow dot, wait for it to turn red or green. If there is an error, you need to see what is going on inside the logs of the GitHub action.</p> \n<p>If you see a green check on the pull request, it means that the GitHub actions has completed, and the pull request can be merged. After the pull request is merged, the infrastructure is provisioned. Go back to the Environment Details page. After a while, and once your infrastructure is provisioned, which can take some minutes depending on your template, you should see that the Deployment Status is Successful.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/18/07-pr.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/18/07-pr-1024x136.png\" /></a></p> \n<p>By the end of this demo, you have provisioned your infrastructure using AWS Proton to handle the environment templates and GitHub actions, and Terraform Open Source to provision the infrastructure in your AWS account.</p> \n<p><strong><span>Availability<br /> </span></strong>Terraform support is available in public preview mode.</p> \n<p>These new features are available in the regions where AWS Proton is available: US East (Ohio), US East (N. Virginia), US West (Oregon), Asia Pacific (Tokyo), and Europe (Ireland).</p> \n<p>To learn more about these features, visit the <a href=\"https://aws.amazon.com/proton/\">AWS Proton</a> service page.</p> \n<p>– <a href=\"https://twitter.com/mavi888uy\">Marcia</a></p>","author":"Marcia Villalba","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"88f89f7a76c515b9e896ea046a3646e3d3168231a5d005324dd756576b09b549","category":"Tech"}