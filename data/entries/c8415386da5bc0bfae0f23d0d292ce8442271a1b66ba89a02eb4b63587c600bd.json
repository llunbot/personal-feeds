{"title":"How Developers Can Strengthen Their Mental Health Amidst High-Pressure Projects","link":"https://smashingmagazine.com/2024/03/developers-strengthen-mental-health/","date":1711699200000,"content":"<p>I have had my fair share of projects that have given me life because of what I accomplished, as well as those that have cost me life when I reflect on the terrible stress they caused. I know I’m not unique that way; sometimes, my work makes me feel like a rock star and other times, I question whether I should be a developer at all. Some projects test you — like <em>really</em> test you.</p>\n<p>In the first week of December 2023, I got a contract to rebuild an entire web app from the ground-up using a new technology designed to be launched alongside a “new year, new system” initiative heading into 2024.</p>\n<p>I think you know where this is going. I built up a lot of confidence heading into the project but soon found that I had bitten off way more than I could chew. The legacy code I inherited was the epitome of “legacy” code, and its spaghetti nature needed more than one developer to suss out. The project looked doomed from the beginning, and I hadn’t even written a line of code!</p>\n<p>I quit the job. After weeks of stress-laden sleep, I simply couldn’t stomach the work. I actually dreaded work altogether. And with that dread came doubts about my career and whether I should start looking outside the industry.</p>\n<p>Is this starting to sound familiar?</p>\n<p>That job wasn’t just a project that posed a personal challenge; no, <strong>it was a battle for my mental health</strong>. I was officially burned out. Thankfully, I was relieved of some pressure when, to my surprise, the client was weirdly understanding and offered to bring in an additional developer to share the load. That really helped, and it gave me what I needed to roll my sleeves back up and finish the job.</p>\nIs This Success?\n<p>The project launched, and the client was happy with it. But I still experience aftershocks, even today, where the trauma from that contract seeps back in and reminds me just how awful it was and the extent to which it made me question my entire career.</p>\n<p>So, even though the project was ultimately a success, I wouldn’t say it was “successful.” There was a real non-monetary cost that I paid just for taking the job.</p>\n<p>I’m sure it is the same for you. We’ve all had stressful projects that push us to the brink of what feels like self-destruction. It’s clear because there are so many other articles and blog posts about it, all offering insightful personal advice for relieving stress, like exercise, sleep, and eating right.</p>\n<p>In fact, as I reflected back on projects that predated this one particular nightmare, I realized there had been other projects I’d taken that had likely contributed to the burnout. Interestingly, I found a few common threads between them that I now use as “warning flags” going into new work.</p>\n<p>All of our experiences are unique to us, and there is no standard recipe for managing stress and protecting your mental health. Advice in this area is always best described as “your mileage may vary” for no other reason than that it is scoped to a specific individual. True, one’s experiences can go so far as to help someone through a tough situation. I find it’s the same thing with self-help books — the best advice is usually the same advice found elsewhere, only articulated better or in a way that resonates with you.</p>\n<p>Think of this article as more of my personal story of experiences safeguarding my mental health when finding myself in super specific work situations.</p>\nThe Urgent Hotfix\n<p>Remember that project with the “comfortable” deadline? Yeah, me neither. It’s that common thing where you ask when the project needs to be completed, and you get back a sarcastic “last Tuesday.”</p>\n<p>In this particular instance, it was a usual Monday morning. There I was, still in bed, happily rested after a fulfilling weekend. Then Slack started blasting me with notifications, all of which were in the vein of,</p>\n<blockquote>“Hey, users can’t make payments on the app — urgent!”</blockquote>\n\n<p>You can fault me for having Slack notifications enabled early on a Monday. But still, it killed my good mood and practically erased whatever respite I gained from the weekend. But I got up, headed over to the laptop, and began working as quickly as the day had started.</p>\n<p>The timeline for this sort of fix is most definitely a “due last Tuesday” situation. It’s urgent and demands immediate attention at the expense of dropping everything else. There’s nothing easygoing about it. The pressure is on. As we were all trying to fix the bug, the customer support team also added to the pressure by frequently reporting the rising number of users having difficulties processing payments.</p>\n<p>We read through this huge codebase and ran different kinds of tests, but nothing worked. I think it was around 40 minutes before the deadline that a colleague came across a Reddit post (dated six years ago or so) that had the solution in it. I tell you, that bug stood no chance. We finally got the payment system up and running. I was relieved, but at what cost?</p>\n<h3>What I Learned About HotFixes</h3>\n<p>Urgent hotfixes are a reality for most developers I know. They sort of come with the territory. But allowing them to take away your well-earned peace of mind is all too easy. A day can go from peaceful to panicking with just one Slack notification, and it may happen at any time, even first thing on a Monday morning.</p>\n<h3>What I’d Do Differently</h3>\n<p>It’s funny how Slack is called “Slack” because it really does feel like “slacking off” when you’re not checking in. But I can tell you that my Slack notifications are now paused until more reasonable hours. </p>\n<p>Yes, it was a very real and very urgent situation, but allowing it to pull me completely out of my personal time wasn’t the best choice. I am not the only person on the team, so someone else who is already readily available can take the call.</p>\n<p>After all, a rested developer is a productive developer, especially when faced with an urgent situation. </p>\nThe Pit Of Procrastination\n<p>I once got myself into a contract for a project that was way above my skill set. But what’s that thing developers love saying, “Fake it ’til you make it,” or something like that? It’s hard to say “no” to something, particularly if your living depends on winning project bids. Plus, I won’t lie: there’s a little pride in not wanting to admit defeat.</p>\n<p>When I accepted the job, I convinced myself that all I needed was two full days of steady focus and dedication to get up to speed and knock things out. But guess what? I procrastinated.</p>\n<p>It actually started out very innocently. I’d give myself a brain break and read for 30 minutes, then maybe scroll through socials, then switch to YouTube, followed by… you get the picture. By the time I realize what happened, I’m several hours off schedule and find stress starting to harbor and swell inside me.</p>\n<p>Those half hours here and there took me right up to the eleventh hour.</p>\n<p>Unfortunately, I lost the contract as I couldn’t hit my promised timeline. I take full responsibility for that, of course, but I want to be honest and illustrate the real consequences that happen when stress and fear take over. I let myself get distracted because I was essentially <em>afraid</em> of the project and wasn’t being honest with myself.</p>\n<h3>What I Learned About Procrastination</h3>\n<p>The “fake it ’til you make it” ethos is a farce. There are relatively “safe” situations where getting into unfamiliar territory outside your skillset is going to be just fine. However, a new client with a new project spending new money on my expertise is not one of them.</p>\n<p>Saying “yes” to a project is a promise, not a gamble.</p>\n<p>And I’m no longer gambling with my client’s projects.</p>\n<h3>What I’d Do Differently</h3>\n<p>Learning on the job without a solid plan is a bad idea. If a project screams “out of my league,” I’ll politely decline. In fact, I have found that referring a client to another developer with the right skill set is actually a benefit because the client appreciates the honesty and convenience of not having to find another lead. I actually get <em>more</em> work when I push away the work I’m least suited for.</p>\nThe Unrealistic Request\n<p>This happened recently at a startup I volunteered for and is actually quite funny in hindsight. Slack chimed in with a direct message from a marketing lead on the team:</p>\n<blockquote>“Hi, we are gonna need to add an urgent feature for a current social media trend. Can you implement it ASAP?”</blockquote>\n\n<p>It was a great feature! I dare say I was even eager to work on it because I saw its potential for attracting new users to the platform. Just one problem: <em>what exactly does “ASAP” mean in this instance?</em> Yes, I know it’s “as soon as possible,” but what is the actual deadline, and what’s driving it? Are we talking one day? One week? One month? Again, startups are famous for wanting everything done two weeks ago.</p>\n<p>But I didn’t ask those questions. I dropped everything I was doing and completed the feature in two weeks’ time. If I’m being honest, there was also an underlying fear of saying “no” to the request. I didn’t want to disappoint someone on my team.</p>\n<p>That’s the funny part. “ASAP” was really code for “as soon as possible <em>with your current workload</em>.” Was that communicated well? Definitely not. Slack isn’t exactly the best medium for detailed planning. I had a lot more time than I thought, yet I let myself get swept up by the moment. Sure, I nailed the new feature, and it did indeed attract new users — but again, at what cost? I patted myself on the back for a job well done but then swiveled my chair around to realize that I was facing a pile of work that I let mount up in the meantime.</p>\n<p>And thus, the familiar weight of stress began taking its typical toll.</p>\n<h3>What I Learned About Unrealistic Requests</h3>\n<p>Everything has a priority. Someone else may have a pressing deadline, but does it supersede your own priorities? <strong>Managing priorities is more of a juggling act</strong>, but I was treating them as optional tasks that I could start and stop at will.</p>\n<h3>What I’d Do Differently</h3>\n<p>There are two things I’d do differently next time an unrealistic request comes up:</p>\n<ul>\n<li>First, I’ll be sure to get a firm idea of when the request is actually needed and compare it to my existing priorities before agreeing to it.</li>\n<li>Second, I plan on saying “no” without actually saying it. How different would the situation have been had I simply replied, “Yes, if...” instead, as in, “Yes, if I can complete this thing I’m working on first, then I’d be happy to jump on that next.” That puts the onus on the requester to do a little project management rather than allowing myself to take on the burden carte blanche.</li>\n</ul>\nThe 48-Hour Workday\n<p>How many times have you pulled an all-nighter to get something done? If the answer is zero, that’s awesome. In my experience, though, it’s come up more times than I can count on two hands. Sometimes it’s completely my doing; I’ll get sucked into a personal side project or an interesting bug that leads to hours passing by like minutes.</p>\n<p>I have more than a few friends and acquaintances who wear sleepless nights like merit badges as if accumulating them is somehow a desirable thing.</p>\n<p>The most recent example for me was a project building a game. It was supposed to be pretty simple: You’re a white ball chasing red balls that are flying around the screen. That might not be the most exciting thing in the world, but it was introducing me to some new coding concepts, and I started riding a wave I didn’t want to leave. In my head, this little game could be the next Candy Crush, and there was no way I’d risk losing success by quitting at 2:00 a.m. No way.</p>\n<p>To this day, the game is sitting dormant and collecting digital dust in a GitHub repository, unfinished and unreleased. I’m not convinced the five-day marathon was worth it. If anything, it’s like I had spent my enthusiasm for the job all at once, and when it burned me out, I needed a marathon stretch of sleep to get back to reality.</p>\n<h3>What I Learned About All-Nighters</h3>\n<p>The romanticized image of a fast-typing developer sporting a black hoodie in a dark room of servers and screens only exists in movies and is not something to emulate. There’s a reason there are 24 hours in a day instead of 48 — we need breaks and rest, if for nothing else, to be <em>better</em> at what we do. Mimicking a fictional stereotype is not the path to becoming a good developer, nor is it the path to sustainable living conditions.</p>\n<h3>What I’d Do Differently</h3>\n<p>I’m definitely more protective of the boundaries between me and my work. There’s a time to work, just as there’s a time for resting, personal needs, and even a time for playing.</p>\n<p>That means I have clearly defined working hours and respect them. Naturally, there are days I need to be adaptable, but having the boundaries in place makes those days the exception as opposed to the rule.</p>\n<p>I also <strong>identify milestones in my work that serve as natural pauses</strong> to break things up into more manageable pieces. If I find myself coding past my regular working hours, especially on consecutive days, then that’s an indication that I am taking on too much, that I am going outside of scope, or that the scope hasn’t been defined at all and needs more definition.</p>\nBugged By A Bug\n<p>There are no escaping bugs. As developers, we’re going to make mistakes and clean them up as we go. I won’t say I enjoy bugfixes as much as developing new features, but there is some little part of me at the same time that’s like, “Oh yeah, challenge accepted!” Bugs can often be approached as mini puzzles, but that’s not such a bad thing.</p>\n<p>But there are those bugs that never seem to die. You know, the kind you can’t let go of? You’re absolutely sure that you’ve done everything correctly, and yet, the bug persists. It nearly gets to the point where you might be tempted to blame the bug on the browser or whatever dependency you’re working with, but you know it’s not. It sticks with you at night as you go to bed.</p>\n<p>Then comes the epiphany: <em>Oh crap, it’s a missing X</em>. And X is usually a missing semicolon or anything else that’s the equivalent of unplugging the thing and plugging it back in only to find things are working perfectly.</p>\n<p>I have lots of stories like this. This one time, however, takes the cake. I was working on this mobile app with React Native and Expo. Everything was going smoothly, and I was in the zone! Then, a rendering error cropped up for no clear reason. My code compiled, and all the tests passed, but the app refused to render on my mobile device.</p>\n<p>So, like any logical developer, I  CTRL + Z’d my way back in time until I reached a point where I was sure that the app rendered as expected. I still got the same rendering error.</p>\n<p>That was when I knew this bug was out for my blood. I tried every trick I knew in the book to squash that thing, but it simply would not go away. I was removing and installing packages like a madman, updating dependencies, restarting VS Code, pouring through documentation, and rebooting my laptop. Still nothing.</p>\n<p><strong>For context</strong>: <em>Developers typically use Expo on their devices to render the apps in real-time when working with React Native and Expo. I was not, and therein lies the problem. My phone had decided to ditch the same Wi-Fi network that my laptop was connected to.</em></p>\n<p>All I had to do was reconnect my phone to the network. Problem solved. But agony in the process.</p>\n<h3>What I Learned About Bugfixes</h3>\n<p>Not every code bug has a code solution. Even though I had produced perfectly valid scripts, I doubted my work and tackled the issue with what’s natural to me: code.</p>\n<p>If I had stepped back from my work for even a moment, then I probably would have seen the issue and saved myself many hours and headaches. I let my frustration take over to the extent that the <strong>bug was no longer a mini puzzle but the bane of my existence</strong>. I really needed to read my temperature level and know when to take a break.</p>\n<p>Bugs sometimes make me doubt my credibility as a developer, especially when the solution is both simple and right under my nose the entire time — <em>like</em> <em>network connectivity</em>.</p>\n<h3>What I’d Do Differently</h3>\n<p>There’s an old Yiddish saying: <em>To a worm in horseradish, the world is horseradish.</em> You may recognize it as the leading quote in Malcolm Gladwell’s <em>What the Dog Saw and Other Adventures</em>. It’s closely related to other common sayings along the lines of, <em>“To a hammer, everything is a nail.”</em></p>\n<p>In addition to trying to look at bugs from a non-horseradish perspective, I now know to watch my frustration level when things start feeling helpless. Take breaks. Take a walk. Eat lunch. Anything to break the cycle of rumination. It’s often in that moment of clarity that the puzzle finally starts to come together.</p>\nThe Meeting-Working Imbalance\n<p>I don’t like meetings, and I’m sure many developers would agree with me on that. They’re somewhat of a necessary evil right? There’s value, for example, in the weekly standups for checking in on the team’s progress and staying on the same page as far as what’s coming up in the following week of planning.</p>\n<p>If only that was the one single meeting I had to attend on a given day.</p>\n<p>Let me describe one particular day that I feel is emblematic of what I think is a common conflict between time spent in meetings and time spent working. I got to my workspace and was ready for the usual half-hour weekly team check-in. It went a little over, which was fine, but it did mean I had to rush to the next meeting instead of having a little buffer between the two. That meeting was a classic one, the type where everyone wants a developer in the room <em>in case</em> something technical comes up but never does, leaving me bored and dividing my attention with my actual work.</p>\n<p>We had five meetings that day. In my book, that’s a full day completely wasted because I was unable to get around to writing any code at all, save for a few lines I could squeeze in here and there. That’s no way to work, but is unfortunately a common pattern.</p>\n<h3>What I Learned About Meetings</h3>\n<p>Meetings have to happen. I get that. But I’ve learned that not every meeting is one that I personally need to attend. In many cases, I can get the gist of what happened in a meeting by watching the recording or reading the project manager’s notes. I now know that meetings can “happen” in lots of ways, and what comes from them can still be learned asynchronously in many instances.</p>\n<h3>What I’d Do Differently</h3>\n<p>From here on out, I am asking (politely, of course) whether my attendance is mandatory or not when certain meetings come up. I also ask if I can either prepare something for the group in advance or get caught up to speed after the meeting has happened.</p>\nConclusion\n<p>That’s it! These are a handful of situations I have found myself in the past couple of years. It’s funny how seemingly small events are able to coalesce and reveal patterns of behavior. There’s a common thread of stubbornness running through them that has opened my eyes to the way I work and how I manage my mental health.</p>\n<p><strong>I’m sure it is the same for you.</strong> What times can you remember when stress, anxiety, and frustration consumed you? Are you able to write them down? Do you see a pattern forming? I believe doing this sort of mental inventory is valuable because you start to see specific things that trigger your feelings, and with that, it’s possible to recognize and avoid them in the future.</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/10/effective-mental-health-routine-programmers/\">A Simple But Effective Mental Health Routine For Programmers</a>,” Dave Oscar</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2020/07/thoughts-feelings-creative-wellness/\">It’s Good To Talk: Thoughts And Feelings On Creative Wellness</a>,” Jhey Tompkins</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2015/10/increase-workflow-reduce-stress-with-nature-sounds/\">How To Increase Workflow And Reduce Stress With Nature Sounds</a>,” Scott McGregor</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2015/10/dealing-with-loud-silent-burnout/\">Dealing With Loud And Silent Burnout</a>,” Alexander Charchar</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2014/10/lets-talk-about-it/\">Mental Health: Let’s Talk About It</a>,” Christopher Murphy</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"c8415386da5bc0bfae0f23d0d292ce8442271a1b66ba89a02eb4b63587c600bd","category":"Tech"}