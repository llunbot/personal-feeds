{"title":"Apple releases macOS Sonoma 14.2 beta 4","link":"https://www.macworld.com/article/2117732/apple-releases-macos-sonoma-14-2-beta.html","date":1701196045000,"content":"<p><a href=\"https://www.macworld.com\">Macworld</a></p>\n\n<div>\n<section><div></div></section>\n\n\n\n<p>Apple on Tuesday released the macOS Sonoma 14.3 beta to developers. This beta release comes after Apple released the Sonoma 14.2 beta 2 on November 14. It includes the new iMessage Contact Key Verification.</p>\n\n\n\n<h2>How to install the macOS Sonoma 14.2 beta</h2>\n\n\n\n<p>If you are already part of Apple’s developer program or Apple’s public beta program, you can install the update through <em>System Settings</em> &gt; <em>General</em> &gt; <em>Software Update</em>.</p>\n\n\n\n<p>If you are not in either program but would like to try the beta, we have a guide on <a href=\"https://www.macworld.com/article/671123/how-to-install-macos-beta.html\">how to enter the beta program</a>. Also, check out out <a href=\"https://www.macworld.com/article/1670742/macos-14-release-date-features-compatibility-beta.html\">macOS Sonoma superguide</a>.</p>\n\n\n\n<h2>macOS 14.2 beta developer release notes</h2>\n\n\n\n<p>Below are the developer release notes, which are different from the release notes to users.</p>\n\n\n\n<p>The macOS 14.2 beta SDK provides support to develop apps for Mac computers running Sonoma 14.2 beta. The SDK comes bundled with Xcode 15.1, available from the Mac App Store. For information on the compatibility requirements for Xcode 15.1, see <a href=\"https://go.redirectingat.com/?id=111346X1569486&amp;url=https://developer.apple.com/documentation/Xcode-Release-Notes/xcode-15_1-release-notes&amp;xcust=1-1-2117732-1-0-0&amp;sref=https://www.macworld.com/feed\">Xcode 15.1 Release Notes</a>.</p>\n\n\n\n<h3>iMessage Contact Key Verification</h3>\n\n\n\n<p><strong>New Features</strong></p>\n\n\n\n<ul>\n<li>With iMessage Contact Key Verification, users can choose to further verify that they are messaging only with the people they intend. Contact Key Verification uses Key Transparency to enable automatic verification that the iMessage key distribution service returns device keys that have been logged to a verifiable and auditable map. When a user enables Contact Key Verification, they will be notified about any validation errors directly in the Messages conversation transcript and Apple ID Settings.</li>\n</ul>\n\n\n\n<p>For even higher security, iMessage contact key verification users can compare a Contact Verification Code in person, on FaceTime, or through another secure call. They can also choose to create or edit a contact and save a public key to turn on CKV with that person.</p>\n\n\n\n<p>All devices signed into your iCloud account must be on the minimum supported version of iOS 17.2 Beta, macOS 17.2 Beta, or watchOS 17.2 Beta. If you wish to keep using other devices on older versions of the OS, you will need to sign out of iMessage on these devices in order to enable contact key verification. (111356044)</p>\n\n\n\n<p><strong>Known Issues</strong></p>\n\n\n\n<ul>\n<li>The Learn More links do not link to Knowledge Base articles during Beta. (101563811)</li>\n\n\n\n<li>When verifying another user, Contact Verification Code might not show if one user interrupts the flow. (114462363)</li>\n</ul>\n\n\n\n<p><strong>Workaround:</strong> Both users restart the process.</p>\n\n\n\n<ul>\n<li>After verifying a contact, the verificaton checkmark might not show up in Messages app. (116142336)</li>\n\n\n\n<li>Users might see an error to Turned Off transcript every few hours. (116405131)</li>\n</ul>\n\n\n\n<p><strong>Workaround:</strong> Dismiss the error.</p>\n\n\n\n<ul>\n<li>Users might see that they’re are not eligible to enable Contact Key Verification on some of their upgraded devices. (117044482)</li>\n</ul>\n\n\n\n<p><strong>Workaround:</strong> Retry after waiting at least 30 minutes.</p>\n\n\n\n<h3>Messages</h3>\n\n\n\n<p><strong>Known Issues</strong></p>\n\n\n\n<ul>\n<li>Unlocalized string shown for member count in the full screen Map View of Group Messages might appear (e.g. DETAIL_NUMBER_OF_PEOPLE_LABEL). (117287069)</li>\n</ul>\n\n\n\n<h3>StoreKit</h3>\n\n\n\n<p><strong>New Features</strong></p>\n\n\n\n<ul>\n<li>New pricing properties price, currency, and currencyCode are now available on <a href=\"https://go.redirectingat.com/?id=111346X1569486&amp;url=https://developer.apple.com/documentation/storekit/transaction&amp;xcust=1-1-2117732-1-0-0&amp;sref=https://www.macworld.com/feed\">Transaction</a>. If an offer was applied to the transaction, a new property offer is available to see information about it (id, type, payment mode), as well as convenience properties offerID, offerType, and offerPaymentMode. (106650768)</li>\n</ul>\n\n\n\n<h3>SwiftUI</h3>\n\n\n\n<p><strong>New Features</strong></p>\n\n\n\n<ul>\n<li> Use <code>_logChanges()</code> to log causes of SwiftUI view updates.</li>\n</ul>\n\n\n\n<p>Call the new debugging method <code>`_logChanges()`</code> in the body of a SwiftUI view to log information about why the system is updating the view. For example:</p>\n\n\n\n<pre><code>struct MyView: View {\n\n    var body: some View {\n\n        #if DEBUG\n\n        let _ = Self._logChanges()\n\n        #endif\n\n        // … rest of view body …\n\n    }\n\n}</code></pre>\n\n\n\n<p>As well as the physical property names, “@self” marks that the view value itself has changed, and “@identity” marks that the identity of the view has changed (that is, that the persistent data associated with the view has been recycled for a new instance of the same type).</p>\n\n\n\n<p>The new <code>`_logChanges()`</code> method is like the existing <code>`_printChanges()`</code> one, except that the new method uses the system console, which is useful in some debugging workflows.</p>\n\n\n\n<p>Calls to <code>`_logChanges()`</code> log at the info level to the <code>\"com.apple.SwiftUI\"</code> subsystem with the category “Changed Body Properties”. (113352555)</p>\n\n\n\n<p><strong>Resolved Issues</strong></p>\n\n\n\n<ul>\n<li>Fixed: Resolved a possible Swift access conflict crash that could occur with toolbar items. (113992797)</li>\n</ul>\n\n\n\n<h3><strong>WidgetKit</strong></h3>\n\n\n\n<p><strong>Known Issues</strong></p>\n\n\n\n<ul>\n<li>In widgets <code>Text(_:style:)</code> does not animate its content by default. (107582710)</li>\n</ul>\n\n\n\n<p><strong>Workaround:</strong> To explicitly request an animation, use the <code>View.contentTransition(_:)</code> modifier.</p>\n\nMacOS</div>","author":"","siteTitle":"Macworld","siteHash":"37e84dd5a21fa961d6d6630e269546024dbb7741b2e2fadbe74f47383c70dfbb","entryHash":"dd6433778769bfea2c71f2b475c6dfe8bab63a5241c47fae23b2049750211712","category":"Apple"}