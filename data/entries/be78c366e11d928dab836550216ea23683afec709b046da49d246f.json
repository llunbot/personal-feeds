{"title":"Keys To An Accessibility Mindset","link":"https://smashingmagazine.com/2023/02/keys-accessibility-mindset/","date":1676901600000,"content":"<p>How many times have you heard this when asking about web accessibility? “It’s something we’d like to do more of, but we don’t have the time or know-how.”</p>\n<p>From a broad perspective, web accessibility and its importance are understood. Most people will say it’s important to create a product that can be used by a wide array of people with an even wider range of needs and capabilities. However, that is most likely where the conversation ends. Building an accessible product requires commitment from every role at every step of the process. Time, priorities, and education for all involved, so often get in the way.</p>\n<p>Performing an accessibility audit can cost a lot of time and money. The results can cost even more with just design, development, and QA (Quality Assurance). An audit becomes even more expensive when considering the other heavy investment. For every role, the learning curve for accessibility can be steep.</p>\n<p>There’s so much nuance and technical depth when learning about web accessibility. It’s easy to feel lost in the trees. Instead, this article will take a look at the forest as a whole and demonstrate three keys for approaching accessibility naturally.</p>\nThe POUR Principles of Web Accessibility\n<p>It may sound too simple, but we can break web accessibility down into four core principles: Perceivable, Operable, Understandable, and Robust. These principles, known as POUR, are the perfect starting point for learning how to approach accessibility.</p>\n<p><img src=\"https://files.smashing.media/articles/keys-accessibility-mindset/pour-principles-accessibility.jpeg\" /></p>\n<h3>Perceivable</h3>\n<p>What does it mean for content to be perceivable?</p>\n<p>Let’s say you’re experiencing this article by reading it. That would mean the content is perceivable to people who are sighted. Perhaps, you’re listening to it. That would mean the content is perceivable by people who engage with content audibly.</p>\n<p>The more perceivable your content is, the more ways people can engage with it.</p>\n<p>Common examples of perceivable content would be:</p>\n<ul>\n<li>Images with alternative descriptive text,</li>\n<li>Videos with captions and/or subtitles,</li>\n<li>Indicating a state with more than just color.</li>\n</ul>\n<p>A terrific real-world example of perceivable content is a crosswalk. When it is not safe to cross the street, there is a red icon of a standing figure and a slow, repeating beep. Then, once the streetlights change and people can cross safely, the icon changes to a green figure walking, and the beeping speeds up. The crosswalk communicates with understandable icons, colors, and sound to create a comprehensive and safe experience.</p>\n<h3>Operable</h3>\n<p>Operable content determines whether a person can use a product or navigate a website.</p>\n<p>It is common for the person developing a product to create one that works for themselves. If that person uses a mouse and clicks around the website, that’s often the first, and sometimes the only, experience they develop. However, the ways for operating a website extend far beyond a traditional mouse and keyboard. </p>\n<p>Some important requirements for operable content are the following:</p>\n<ul>\n<li>All functionality available by mouse must be available by the keyboard.</li>\n<li>Visible and consistent keyboard focus for all interactive elements.</li>\n<li>Pages have clear titles and descriptive, sequential headings.</li>\n</ul>\n<h3>Understandable</h3>\n<p>What good is creating content if the people consuming it can not understand it?</p>\n<p>Understandable content is more than defining acronyms and terms. A product must be <strong>consistent and empathetic in both its design and content</strong>.</p>\n<p>Ways to create an understandable experience would include:</p>\n<ul>\n<li>Defining content language(s) to allow assistive technologies to interpret correctly.</li>\n<li>Navigations that are repeated across pages are in the same location.</li>\n<li>Error messages are descriptive and, when possible, actionable.</li>\n</ul>\n<p>In Jenni Nadler’s article, “<a href=\"https://wix-ux.com/when-life-gives-you-lemons-write-better-error-messages-46c5223e1a2f\">When Life Gives You Lemons, Write Better Error Messages</a>”, she describes her team’s approach to error messaging at <a href=\"https://www.wix.com/\">Wix</a>. With clear language and an empathetic tone, they’ve created a standard in understandable messaging.</p>\n<h3>Robust</h3>\n<p>In a way, many of us are already familiar with creating robust content.</p>\n<p>If you’ve ever had to use a compiler like Babel to transpile JavaScript for greater support, you’ve created more robust content. Now, JavaScript is just one piece of the front end, and that same broad, reliable approach should be applied to writing semantic HTML.</p>\n<p>Ways to create robust markup include:</p>\n<ul>\n<li>Validating the rendered HTML to ensure devices can reliably interpret it.</li>\n<li>Using markup to assign names and roles to non-native elements.</li>\n</ul>\n<p>The POUR principles of web accessibility lay a broad (if a bit abstract) foundation. Yet, it can still feel like a lot to consider when facing roadmaps with other priorities. This depth of information and considerations can be enough to turn some people away.</p>\n<p>Web accessibility is not all or nothing.</p>\n<p>Even small improvements can have a big impact on the accessibility of a product. In the same way software development has moved away from the waterfall approach, we can look at web accessibility with the same <strong>incremental mindset</strong>.</p>\n<p>Even so, sometimes it’s easier to learn more about something you already know than to learn about something anew. At least, that’s what this entire article relies upon.</p>\n<p>With slight adjustments to how we approach the design and development of a product, we can create one that more closely aligns with the POUR principles of accessibility but in a way that feels natural and intuitive to what we already know.</p>\nKeys To An Accessibility Mindset\n<p>There’s a lot to learn about web accessibility. While the POUR principles make the process more approachable, it can still feel like a lot. Instead, by applying these keys to our approach, we can dramatically improve the accessibility of a product and reduce the risk of exhaustive refactors in the future.</p>\n<h3>Markup Must Communicate As Clearly As The Design</h3>\n<p>When working from a design, it’s common to build what we see. However, visual design is only one part of creating <em>perceivable</em> content.</p>\n<p><img src=\"https://files.smashing.media/articles/keys-accessibility-mindset/example-navigation-design.jpeg\" /></p>\n<p>Let’s consider the navigation of a website. When a person is on a specific page, we highlight the corresponding link in the navigation with a different background color. Visually, this makes the link stand out. But what about other methods of perception?</p>\n<p>The content becomes more perceivable when its <strong>markup communicates as clearly as its design</strong>.</p>\n<p>When dealing with the navigation, what exactly are we communicating with the contrasting styles? We’re trying to say, “this is the page you’re on right now.” While this works visually, let’s look at how our markup can communicate just as clearly.</p>\n<pre><code>&lt;a aria-current=\"page\" href=\"/products\"&gt;Products&lt;/a&gt;\n</code></pre>\n\n<p>By setting <code>aria-current=\"page\"</code> on the anchor of the current page, we communicate with markup the same information as the design. This makes the content perceivable to assistive technologies, such as screen readers.</p>\n<p>In this demo, we’ll hear the difference perceivable markup can make.</p>\n<p><img src=\"https://files.smashing.media/articles/keys-accessibility-mindset/example-navigation-design.jpeg\" /></p>\n<p>Even though navigation items often look like buttons, we understand that they function as links or anchors instead. This is the perfect example of marking up an element based on its function and not its appearance.</p>\n<p>When using an anchor tag, we receive several expected functional benefits by default. The anchor will support keyboard focus. Hovering or focusing on an anchor will reveal the URL to preview. Lastly, whether with a keyboard shortcut or through the context (right-click) menu, a link can be opened in a new window or tab.</p>\n<p>If we marked up a navigation item like it appeared, as a <code>button</code>, we would lose the last two expected behaviors of anchor tags. When we break the expectations of an element, accessibility will suffer the most.</p>\n<p>The following demo highlights the functional differences when using the <code>a</code>, <code>button</code>, and <code>div</code> elements as a link. By navigating the demo with our keyboard, we can see the differences between each variation.</p>\n<p><img src=\"https://files.smashing.media/articles/keys-accessibility-mindset/flight-details-color-only-indicator.jpeg\" /></p>\n<p>Without first looking at the altitude and ground speed values, I couldn’t tell which system was active. Maybe the imperial option was active since it was the same color as the data. But maybe the metric option was active because it was a different color.</p>\n<p>While it may take us a moment to figure out which option is active, it’s an unnecessary one caused by indicating a state with only color.</p>\n<p>In the following mockup, we underline the active option and increase its font weight. With these details, it’s now easier to understand the active state of the screen.</p>\n<p><img src=\"https://files.smashing.media/articles/keys-accessibility-mindset/flight-details-extra-layer-indication.jpeg\" /></p>\n<p>So much of creating perceivable content comes down to <strong>communicating in layers</strong>. When we write perceivable markup, we’re creating an extra layer of information. Designing is no different. If we indicate a state with only color, that’s one layer. When we add an underline and font weight, we add additional layers of communication.</p>\n<p>People learn and experience in different ways. Consider a book that has an audio version and a movie adaptation. Some people will read the book. Others will listen to it. Others still will watch the movie. When we communicate in layers, more people benefit.</p>\nReview\n<p>Most people will agree that web accessibility is important. But they will also agree that it can be difficult. With so many combinations of hardware and software and so many nuances with each, accessibility can feel overwhelming.</p>\n<p>It’s easy to become lost in the weeds of code samples and articles trying to help. One article may suggest an approach, while a second article suggests another. If we’re not able to test each scenario ourselves, it can often feel like guessing. Guessing can be disheartening, even discouraging. It can turn people away from accessibility.</p>\n<p>Instead, we can have a dramatic impact on the accessibility of our work by not focusing on specific details but by adjusting how we approach a design from the start. One of the most challenging areas of accessibility is knowing <em>when</em> and <em>where</em> it’s needed. With the keys to an <strong>accessibility mindset</strong>, we can identify those areas and understand what they need. We may not know how to provide a perceivable or operable experience, but it’s easier to find the answer when you understand the question.</p>\n<p>I should note, though, that applying these keys will not ensure your work is accessible. Will it make a positive impact? Yes. But <strong>accessibility extends far beyond design and development</strong>. For as long as a product is changing, a <strong>commitment to accessibility must remain at every step and in every role</strong>, from leadership on down.</p>\n<p>Ensuring markup communicates as clearly as its design will help provide perceivable content. Writing functional markup instead of visual will help make that content operable. If the functional markup cannot be styled, then return to the first key, and make it perceivable.</p>\n<p>Remember, creating an accessible experience for some doesn’t take away from others.</p>\n<p>If we think back to the crosswalk example, who are some people who benefit from their design? Of course, those who are blind, even partially, can benefit. But what about a person looking down at their phone? The audible cue can grab their attention to let them know when it’s safe to cross. I’ve benefited from crosswalks in this way. How about a parent using the lights to teach their child how to cross? Everybody can benefit from the accessible design of a crosswalk. Of course, if a person wants to cross when they feel comfortable, regardless of the state of the crosswalk, they can. The accessible design does not prevent that experience. It enables that experience for others.</p>\n<p>Accessible design is good design, and it all starts with our mindset.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://codepen.io/collection/wayWEE\">Keys to an Accessibility Mindset Collection on CodePen</a></li>\n<li>“<a href=\"https://wix-ux.com/when-life-gives-you-lemons-write-better-error-messages-46c5223e1a2f\">When Life Gives You Lemons, Write Better Error Messages</a>”, Jenni Nadler</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"f300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"be78c366e11d928dab836550216ea23683afec709b046da49d246f","category":"Tech"}