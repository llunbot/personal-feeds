{"title":"Consul 1.15 adds Envoy extensions and enhances Envoy access logging","link":"https://www.hashicorp.com/blog/consul-1-15-adds-envoy-extensions-and-enhances-access-logging","date":1677697200000,"content":"<p>We’re pleased to announce that HashiCorp Consul 1.15 is now generally available to all users. This release represents yet another step forward in our effort to help organizations simplify onboarding to service mesh, improve their troubleshooting workflow, and reduce operational complexity.</p>\n<p>Important new features in Consul 1.15 include:</p>\n<ul>\n<li>Envoy access logging</li>\n<li>Consul Envoy extensions</li>\n<li>Service-to-service troubleshooting</li>\n<li>Linux VM runtime support in Consul-native API gateway (Beta)</li>\n<li>Consul server rate limiting</li>\n<li>Raft write-ahead log (Experimental)</li>\n</ul>\n<p>Let’s run through what’s new.</p>\n<h2><a href=\"#envoy-access-logging\">»</a><a></a>Envoy access logging</h2>\n<p>Envoy currently provides access logging to understand incoming traffic patterns to the proxy. Prior versions of Consul allowed the operator to adjust bootstrap configuration for Envoy using <a href=\"https://developer.hashicorp.com/consul/docs/v1.14.x/connect/proxies/envoy#escape-hatch-overrides\">escape hatches</a> to enable access logs, which proved hard to manage at scale. With Consul 1.15, Envoy access logs are now centrally managed via config entries and CRDs to allow operators to easily turn on access logs for all proxies within the service mesh.</p>\n<p>Access log configuration can be fine tuned to output to <code>stdout pipe</code> or to a file, and can also be configured to output a variety of different request properties such as response codes and request headers. This allows the service mesh operator to quickly audit incoming traffic to proxies within the mesh for security purposes, and also allows them to troubleshoot requests made to workloads within the mesh. Please visit <a href=\"https://developer.hashicorp.com/consul/docs/connect/config-entries/proxy-defaults\">Proxy default configuration entry</a> for more details on how to enable access logs.</p>\n<h2><a href=\"#consul-envoy-extensions\">»</a><a></a>Consul Envoy extensions</h2>\n<p>Consul 1.15 now adds an extension system to Consul that allows the service mesh operators to modify Consul-generated Envoy resources without customizing the Consul binary. This will allow extensions to add, delete, and modify Envoy listeners, routes, clusters, and endpoints, enabling support for additional Envoy features without changes to the Consul codebase.</p>\n<p>Prior work for modifying existing Envoy config involved utilizing escape hatches to rewrite the Envoy resources so that they are compatible with Consul, a task that also requires understanding how Consul names Envoy resources and enforces intentions. With Consul Envoy extensions you can now configure your services to use extensions through the <code>EnvoyExtensions</code> field with the Proxy Defaults or Service Defaults configuration entries or CRDs. Current supported extensions include the <a href=\"https://developer.hashicorp.com/consul/docs/connect/proxies/envoy-extensions#lua\">Lua</a> and <a href=\"https://developer.hashicorp.com/consul/docs/connect/proxies/envoy-extensions#lambda\">AWS Lambda</a> extensions. Please visit the <a href=\"https://developer.hashicorp.com/consul/docs/connect/proxies/envoy-extensions\">Envoy extensions overview</a> for more information on how to leverage these extensions for Consul service mesh.</p>\n<h2><a href=\"#service-to-service-troubleshooting\">»</a><a></a>Service-to-service troubleshooting</h2>\n<p>Identifying communication issues between services is challenging due to the complexity of configurations and lack of standard methodology for troubleshooting. Ambiguous error outputs and overwhelming amounts of logs and telemetry data add to the difficulty, leading to a challenging user experience.</p>\n<p>Consul now includes a built-in tool for troubleshooting communication between services in a service mesh. A new <code>consul troubleshoot</code> command is provided to validate Envoy configurations on both upstream and downstream Envoy proxies deployed on VM and Kubernetes deployments.</p>\n<p>The <code>consul troubleshoot</code> command performs several checks in sequence that enable you to discover issues that impede service-to-service communication. The process systematically queries the Envoy administration interface API to determine the cause of the communication failure.</p><img src=\"https://www.datocms-assets.com/2885/1677615426-service-to-service-troubleshooting-prototype.gif\" alt=\"Service\" /><p>The troubleshooting command validates service-to-service communication by checking for the following common issues:</p>\n<ul>\n<li>\n<p>Upstream service does not exist</p>\n</li>\n<li>\n<p>One or both hosts are unhealthy</p>\n</li>\n<li>\n<p>A filter affects the upstream service</p>\n</li>\n<li>\n<p>The CA has expired mTLS certificates</p>\n</li>\n<li>\n<p>The services have expired mTLS certificates</p>\n</li>\n</ul>\n<p>Please visit our <a href=\"https://developer.hashicorp.com/consul/docs/troubleshoot/troubleshoot-services\">Service-to-service troubleshooting overview</a> for more details on how to use the new troubleshooting commands.</p>\n<h2><a href=\"#linux-vm-runtime-support-in-consul-native-api-gateway-beta\">»</a><a></a>Linux VM runtime support in Consul-native API gateway (Beta)</h2>\n<p>Prior to Consul 1.15, Consul API gateway was only supported on Kubernetes. VM support is now available, allowing operators to stand up and configure API gateway for VM-based deployments using native Consul config entries. The following workflows are now available for Consul API gateway in a VM environment:</p>\n<ol>\n<li>Create an API gateway configuration entry. The configuration entry includes listener configurations and references to TLS certificates.</li>\n<li>Deploy the API gateway configuration entry to create the listeners.</li>\n<li>Create and deploy routes to bind to the gateway.</li>\n</ol>\n<p>VM support is currently in beta and will be generally available in a future release. Please read <a href=\"https://developer.hashicorp.com/consul/docs/connect/gateways/api-gateway/usage\">API gateways on virtual machines</a> for more details.</p>\n<h2><a href=\"#consul-server-rate-limiting\">»</a><a></a>Consul server rate limiting</h2>\n<p>Consul servers do not have means to protect themselves from excessive usage or a load spike. They rely fully on Consul client rate limiting and operators dimensioning the servers to handle all the required load. With the release of a new architecture to use <a href=\"https://developer.hashicorp.com/consul/docs/connect/dataplane\">Consul Dataplane</a> for establishing connections back to Consul servers within the mesh, Consul clients are no longer available to perform rate limiting and protect the servers.</p>\n<p>In a scenario where a single Consul user is misbehaving by sending an excessive amount of load to the servers, the entire Cluster is impacted, which could potentially lead to outages in some Consul environments.</p>\n<p>With Consul 1.15, an operator will now be able to configure rate limiting for each Consul server. To do so, an operator can add a set of runtime configurations in the server configuration which will configure:</p>\n<ul>\n<li>A set of global limits for read and write operations for each Consul server</li>\n<li>A mode to apply when the global limit is reached (e.g. permissive, enforcing) for a given Consul server</li>\n</ul>\n<p>This provides a critical way to protect Consul servers from cascading failures when they reach capacity or a traffic spike is observed, allowing a graceful degradation. For more details on how to utilize the new server rate limiting features on Consul, please visit <a href=\"https://developer.hashicorp.com/consul/docs/agent/limits\">Limit traffic rates overview</a>.</p>\n<h2><a href=\"#raft-write-ahead-log-experimental\">»</a><a></a>Raft write-ahead log (Experimental)</h2>\n<p>Consul now provides an experimental storage backend called write-ahead log (WAL). WAL implements a traditional log with rotating, append-only log files. The current <code>LogStore</code> uses BoltDB, which is a copy-on-write BTree, which is less optimized for append-only workloads. The storage backend now resolves a number of performance issues with the current BoltDB storage backend, which was not originally designed for retaining a large number of logs. The new raft write-ahead log storage backend is not recommended for production use cases yet, but is ready for testing by the general community. Please read our <a href=\"https://developer.hashicorp.com/consul/docs/agent/wal-logstore\">Experimental WAL LogStore backend overview</a> for more details.</p>\n<h2><a href=\"#next-steps-for-consul\">»</a><a></a>Next steps for Consul</h2>\n<p>We are excited for users to try these new Consul updates and further expand their service mesh implementations. The Consul 1.15 includes enhancements for all types of Consul users leveraging the product for service discovery and service mesh across multiple environments, <a href=\"https://www.hashicorp.com/blog/consul-service-mesh-support-for-aws-lambda-now-generally-available\">including serverless functions</a>. Our goal with Consul is to enable a consistent enterprise-ready control plane to discover and securely connect any application.</p>\n<ul>\n<li>Learn more in the <a href=\"https://developer.hashicorp.com/consul/docs\">Consul documentation</a>.</li>\n<li>Get started with Consul 1.15 by installing the latest Helm chart provided in our <a href=\"https://developer.hashicorp.com/consul/tutorials/get-started-kubernetes/kubernetes-gs-deploy\">Consul Kubernetes documentation</a>.</li>\n</ul>","author":"David Yu","siteTitle":"HashiCorp Blog","siteHash":"3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"607a938ac02cbb3f817999c599e8abfc33fc43fac740a886e8fc41","category":"Tech"}