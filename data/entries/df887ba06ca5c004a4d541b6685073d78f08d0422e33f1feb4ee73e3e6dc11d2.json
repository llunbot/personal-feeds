{"title":"Smashing Animations Part 2: How CSS Masking Can Add An Extra Dimension","link":"https://smashingmagazine.com/2025/05/smashing-animations-part-2-css-masking-add-extra-dimension/","date":1747227600000,"content":"<p>Despite keyframes and scroll-driven events, CSS animations have remained relatively rudimentary. As I wrote in <a href=\"https://www.smashingmagazine.com/2025/05/smashing-animations-part-1-classic-cartoons-inspire-css/\">Part 1</a>, they remind me of the 1960s <a href=\"https://en.wikipedia.org/wiki/Hanna-Barbera\">Hanna-Barbera</a> animated series I grew up watching on TV. Shows like Dastardly and Muttley in <em>Their Flying Machines</em>, <em>Scooby-Doo</em>, <em>The Perils of Penelope Pitstop</em>, <em>Wacky Races</em>, and, of course, <a href=\"https://en.wikipedia.org/wiki/Yogi_Bear\">Yogi Bear</a>.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/1-yogi-bear-show.jpg\" /></p>\n<p>Mike loves ’90s animation — especially <a href=\"https://en.wikipedia.org/wiki/DuckTales_(1987_TV_series\">Disney’s <em>Duck Tales</em></a>). So, that is the aesthetic applied throughout the design.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/2-yogi-bear-design-andy-clarke.png\" /></p>\n<p>I used animations throughout and have recently added an extra dimension to them using <strong>masking</strong>. So, to explain how this era of animation relates to masking in CSS, I’ve chosen an episode of <em>The Yogi Bear Show</em>, “Disguise and Gals,” first broadcast in May 1961. In this story, two bank robbers, disguised as little old ladies, hide their loot in a “pic-a-nic” basket in Yogi and Boo-Boo’s cave! </p>\n<p>What could <em>possibly</em> go wrong?</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/3-yogi-bear-disguise-gals.jpg\" /></p>\nWhat’s A Mask?\n<p>One simple masking example comes at the end of “Disguise and Gals” and countless other cartoons. Here, an animated vignette gradually hides more of Yogi’s face. The content behind the mask isn’t erased; it’s hidden.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/4-yogi-bear-masking-example.jpg\" /></p>\n<p>In CSS, <strong>masking controls visibility using a bitmap, vector, or gradient mask image</strong>. When a mask’s filled pixels cover an element, its content will be visible. When they are transparent, it will be hidden, which makes sense. Filled pixels can be any colour, but I always make mine hot pink so that it’s clear to me which areas will be visible.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/5-yogi-bear-andy-clarke-recreation.jpg\" /></p>\n<p>A <code>clip-path</code> functions similarly to a <code>mask</code> but uses paths to create hard-edged clipping areas. If you want to be picky, masks and clipping paths are technically different, but the goal for using them is usually the same. So, for this article, I’ll refer to them as two entrances to the same cave and call using either “masking.”</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/6-yogi-bear-show.png\" /></p>\n<p>In this sequence from “Disguise and Gals,” one of the robbers rushes the picnic basket containing their loot into Yogi’s cave. Masking defines the visible area, creating the illusion that the robber is entering the cave. </p>\n<blockquote>How do I choose when to use <code>clip path</code> and when to choose <code>mask</code>?</blockquote>\n\n<p>I’ll explain my reasons in each example.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/7-yogi-bear-show.png\" /></p>\n<p>When Mike Worth and I discussed working together, we knew we would neither have the budget nor the time to create a short animated cartoon for his website. However, we were keen to explore how animations could bring to life what would’ve otherwise been static images.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/8-mike-worth-website.png\" /></p>\nMasking Using A Clipping Path\n<p>On Mike’s biography page, his character also enters a cave. The SVG illustration I created contains two groups, one for the background and the other for the orangutan in the foreground:</p>\n<pre><code>&lt;figure&gt;\n  &lt;svg viewBox=\"0 0 1400 960\" id=\"cave\"&gt;\n    &lt;g class=\"background\"&gt;…&lt;/g&gt;\n    &lt;g class=\"foreground\"&gt;…&lt;/g&gt;\n  &lt;/svg&gt;\n&lt;/figure&gt;\n</code></pre>\n\n<p>I defined a keyframe animation that moves the character from <code>2000px</code> on the right to its natural position in the center of the frame by altering its <code>translate</code> value:</p>\n<pre><code>@keyframes foreground {\n  0% { \n    opacity: .75; \n    translate: 2000px 0;\n  }\n  60% { \n    opacity: 1;\n    translate: 0 0;\n  }\n  80% {\n    opacity: 1; \n    translate: 50px 0;\n  }\n  100% {\n    opacity: 1;\n    translate: 0 0;\n  }\n}\n</code></pre>\n\n<p>Then, I applied that animation to the foreground group:</p>\n<pre><code>.foreground {\n  opacity: 0;\n  animation: foreground 5s 2s ease-in-out infinite;\n}\n</code></pre>\n\n<p>Try this yourself:</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/9-masking-using-clipping-path.png\" /></p>\n<p>I wanted him to become visible at the edge of the illustration instead. As the edges of the cave walls are hard, I chose a <code>clip-path</code>.</p>\n<p>There are several ways to define a <code>clip-path</code> in CSS. I could use a primitive shape like a rectangle, where each of the first four values specifies its corner positions. The <code>round</code> keyword and the value that follows define any rounded corners:</p>\n<pre><code>clip-path: rect(0px 150px 150px 0px round 5px);\n</code></pre>\n\n<p>Or <code>xywh</code> (x, y, width, height) values, which I find easier to read:</p>\n<pre><code>clip-path: xywh(0 0 150px 150px round 5px);\n</code></pre>\n\n<p>I could use a <code>circle</code>:</p>\n<pre><code>clip-path: circle(60px at center);\n</code></pre>\n\n<p>Or an <code>ellipse</code>:</p>\n<pre><code>clip-path: ellipse(50% 40% at 50% 50%);\n</code></pre>\n\n<p>I could use a <code>polygon</code> shape:</p>\n<pre><code>clip-path: polygon(...);\n</code></pre>\n\n<p>Or even the points from a path I created in a graphics app like Sketch:</p>\n<pre><code>clip-path: path(\"M ...\");\n</code></pre>\n\n<p>Finally — and my choice for this example — I might use a mask that I defined using paths from an SVG file:</p>\n<pre><code>clip-path: url(#mask-cave);\n</code></pre>\n\n<p>To make the character visible from the edge of the illustration, I added a second SVG. To prevent a browser from displaying it, set both its dimensions to zero:</p>\n<pre><code>&lt;figure&gt;\n  &lt;svg viewBox=\"0 0 1400 960\" id=\"cave\"&gt;...&lt;/svg&gt;\n  &lt;svg height=\"0\" width=\"0\" id=\"mask\"&gt;...&lt;/svg&gt;\n&lt;/figure&gt;\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/10-svg-clippath.png\" /></p>\n<p>This contains a single SVG <code>clipPath</code>. By placing this inside the <code>defs</code> element, this path isn’t rendered, but it will be available to create my CSS <code>clip-path</code>:</p>\n<pre><code>&lt;svg height=\"0\" width=\"0\" id=\"mask\"&gt;\n  &lt;defs&gt;\n    &lt;clipPath id=\"mask-cave\"&gt;...&lt;/clipPath&gt;\n  &lt;/defs&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p>I applied the <code>clipPath</code> URL to my illustration, and now Mike’s mascot only becomes visible when he enters the cave:</p>\n<pre><code>#cave {\n  clip-path: url(#mask-cave);\n}\n</code></pre>\n\n<p>Try this yourself:</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/11-altered-illustrations.png\" /></p>\n<p>While a <code>clipPath</code> will give me the result I’m looking for, the complexity and size of these paths can sometimes negatively affect performance. That’s when I choose a CSS <code>mask</code> as its properties have been baseline and highly usable since 2023.</p>\n<p>The <code>mask</code> property is a shorthand and can include values for <code>mask-clip</code>, <code>mask-mode</code>, <code>mask-origin</code>, <code>mask-position</code>, <code>mask-repeat</code>, <code>mask-size</code>, and <code>mask-type</code>. I find it’s best to learn these properties individually to grasp the concept of masks more easily.</p>\n<p>Masks control visibility using bitmap, vector, or gradient mask images. Again, when a mask’s filled pixels cover an element, its content will be visible. When they‘re transparent, the content will be hidden. And when parts of a mask are semi-transparent, some of the content will show through. I can use a bitmap format that includes an alpha channel, such as PNG or WebP:</p>\n<pre><code>mask-image: url(mask.webp);\n</code></pre>\n\n<p>I could apply a mask using a vector graphic:</p>\n<pre><code>mask-image: url(mask.svg);\n</code></pre>\n\n<p>Or generate an image using a conical, linear, or radial gradient:</p>\n<pre><code>mask-image: linear-gradient(#000, transparent); \n</code></pre>\n\n<p>…or:</p>\n<div>\n<pre><code>mask-image: radial-gradient(circle, #ff104c 0%, transparent 100%);\n</code></pre>\n</div>\n\n<p>I might apply more than one mask to an element and mix several image types using what should be a familiar syntax:</p>\n<pre><code>mask-image:\n  image(url(mask.webp)),\n  linear-gradient(#000, transparent);\n</code></pre>\n\n<p><code>mask</code> shares the same syntax as CSS backgrounds, which makes remembering its properties much easier. To apply a <code>background-image</code>, add its URL value:</p>\n<pre><code>background-image: url(\"background.webp\");\n</code></pre>\n\n<p>To apply a mask, swap the <code>background-image</code> property for <code>mask-image</code>:</p>\n<pre><code>mask-image: url(\"mask.webp\");\n</code></pre>\n\n<p>The <code>mask</code> property also shares the same browser styles as CSS backgrounds, so by default, a mask will repeat horizontally and vertically unless I specify otherwise:</p>\n<div>\n<pre><code>/* Options: repeat, repeat-x, repeat-y, round, space, no-repeat */\nmask-repeat: no-repeat;\n</code></pre>\n</div>\n\n<p>It will be placed at the top-left corner unless I alter its position:</p>\n<pre><code>/* Options: Keywords, units, percentages */\nmask-position: center;\n</code></pre>\n\n<p>Plus, I can specify <code>mask-size</code> in the same way as <code>background-size</code>:</p>\n<div>\n<pre><code>/* Options: Keywords (auto, contain, cover), units, percentages */\nmask-size: cover;\n</code></pre>\n</div>\n\n<p>Finally, I can define where a mask starts:</p>\n<pre><code>mask-origin: content-box;\nmask-origin: padding-box;\nmask-origin: border-box;\n</code></pre>\n\nUsing A Mask Image\n<p>Mike’s FAQs page includes an animated illustration of his hero standing at a crossroads. My goal was to separate the shape from its content, allowing me to change the illustration throughout the hero’s journey. So, I created a scalable <code>mask-image</code> which defines the visible area and applied it to the figure element:</p>\n<pre><code>figure {\n  mask-image: url(mask.svg);\n}\n</code></pre>\n\n<p>To ensure the mask matched the illustration’s dimensions, I also set the <code>mask-size</code> to always <code>cover</code> its content:</p>\n<pre><code>figure {\n  mask-size: cover;\n}\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/12-mask-image.png\" /></p>\n<p>Try this yourself:</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/13-mike-worth-review-page-illustration.png\" /></p>\n<pre><code>figure {\n  clip-path: ellipse(45% 35% at 50% 50%);\n}\n</code></pre>\n\n<p>However, the hard edges of a clip <code>clip-path</code> don’t create the effect I was aiming to achieve:</p>\n<p>Try this yourself:</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/14-layering-multiple-masks.png\" /></p>\n<p>Finally, to add an extra touch of realism, I added a keyframe animation — which changes the <code>mask-size</code> and creates the effect that the lamp light is flickering — and applied it to the figure:</p>\n<pre><code>@keyframes lamp-flicker {\n  0%, 19.9%, 22%, 62.9%, 64%, 64.9%, 70%, 100% { \n    mask-size: 90%, auto;\n  }\n\n  20%, 21.9%, 63%, 63.9%, 65%, 69.9% { \n    mask-size: 90%, 0px;\n  }\n}\n\nfigure {\n  animation: lamp-flicker 3s 3s linear infinite;\n}\n</code></pre>\n\n<p>Try this yourself:</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/15-binocular-shaped-mask.png\" /></p>\n<p>I started by creating the binocular shape, complete with some viewfinder markers.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/16-binocular-shape.png\" /></p>\n<p>Then, I applied that image as a mask, setting its position, repeat, and size values to place it in the center of the figure element:</p>\n<pre><code>figure {\n  mask-image: url(mask.svg);\n  mask-position: 50% 50%;\n  mask-repeat: no-repeat;\n  mask-size: 85%;\n}\n</code></pre>\n\n<p>Try this yourself:</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-animations-part-2-css-masking-add-extra-dimension/17-masking-animation.png\" /></p>\n<p>To let someone know they might’ve reached the end of their adventure, I wanted to ape the zooming-in effect I started this article with:</p>\n<pre><code>&lt;figure&gt;\n  &lt;svg&gt;…&lt;/svg&gt;\n&lt;/figure&gt;\n</code></pre>\n\n<p>I created a circular <code>clip-path</code> and set its default size to <code>75%</code>. Then, I defined the animation keyframes to resize the circle from 75% to 15% before attaching it to my figure with a one-second duration and a three-second delay:</p>\n<pre><code>@keyframes error {\n  0% { clip-path: circle(75%); }\n  100% { clip-path: circle(15%); }\n}\n\nfigure {\n  clip-path: circle(75%);\n  animation: error 1s 3s ease-in forwards;\n}\n</code></pre>\n\n<p>The animation now focuses someone’s attention on the hapless hero, before he sinks lower and lower into the bubblingly hot lava.</p>\n<p>Try this yourself:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/qEEgdxy\">Mike Worth’s error page [forked]</a> by <a href=\"https://codepen.io/malarkey\">Andy Clarke</a>.</p>\nBringing It All To Life\n<p>Masking adds an <strong>extra dimension to web animation</strong> and makes stories more engaging and someone’s experience more compelling — all while keeping animations efficiently lightweight. Whether you’re revealing content, guiding focus, or adding more depth to a design, masks offer endless creative possibilities. So why not experiment with them in your next project? You might uncover a whole new way to bring your animations to life.</p>\n<p>The end. Or is it? …</p>\n<p>Mike Worth’s website will launch in June 2025, but you can <a href=\"https://codepen.io/collection/YwMKPb\">see examples from this article on CodePen</a> now.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"df887ba06ca5c004a4d541b6685073d78f08d0422e33f1feb4ee73e3e6dc11d2","category":"Tech"}