{"title":"re:Invent Session Preview – Under the Hood at Amazon Ads","link":"https://aws.amazon.com/blogs/aws/reinvent-session-preview-under-the-hood-at-amazon-ads/","date":1638198587000,"content":"<p>My colleagues have spent months creating, reviewing, and improving the content for their upcoming <a href=\"https://reinvent.awsevents.com/\">AWS re:Invent</a> sessions. While I do my best not to play favorites, I would like to tell you about one that recently caught my eye!</p> \n<p>Session ADM301 (<strong>Under the Hood at Amazon Ads</strong>) takes place on Tuesday, November 30th at 2 PM. In the session, my colleagues will introduce <a href=\"https://advertising.amazon.com/\">Amazon Ads</a>, outline the challenges that come with building an advertising system at scale, and then show how they solved those challenges using multiple AWS services. I was able to review a near-final version of their presentation and this post is based on what I learned from that review.</p> \n<p>Amazon Ads uses an omnichannel strategy with four elements: building awareness, increasing consideration, engaging shoppers, and driving purchases. Using the well-known “start from the customer and work backwards” model that we use at Amazon, they identified three distinct customer types and worked to design a system that would address their needs. The customer types were:</p> \n<ul> \n <li><strong>Advertisers</strong> running campaigns</li> \n <li><strong>Third-party partners</strong> who use Amazon Ads APIs to build tools &amp; services</li> \n <li><strong>Shoppers</strong> on a purchase journey</li> \n</ul> \n<p>Advertisers and third-party developers wanted an experience that spanned both UIs and programmatic interfaces, encompassing campaign management, budgeting, ad serving, a data lake for ad events, and machine learning to improve ad selection &amp; relevance.</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/26/rin_ad_eas_1.png\" />Scaling is a really interesting problem, with challenges around performance, storage, availability, cost, and effectiveness. In addition to handling hundreds of millions of ad requests per second (trillions of ads per day) within a latency budget of 120 ms, the ad server must be able to:</p> \n<ul> \n <li>Track tens of billions of campaign objects, with overall storage measured in hundreds of petabytes</li> \n <li>Deliver &gt; 99.9999% availability</li> \n <li>Handle peak events such as Prime Day automatically</li> \n <li>Run economically and enforce advertiser budgets in near real-time</li> \n <li>Deliver highly relevant ads using predictions from hundreds of machine learning models</li> \n</ul> \n<p>As just one example of what it takes to handle a workload of this magnitude, they needed a caching system capable of handling 500 million requests per second!</p> \n<p>As is often the case, the system went through multiple iterations before it reached its current form, and is still under active development. The presentation recaps the journey that the team went through, with architectural snapshots and performance metrics for each iteration.</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/27/rin_ads_ml_1.png\" />The presentation wraps up by discussing some of the ways that they were able to apply machine learning at scale. For example, to select the right ad for each request, Amazon Ads uses deep learning models to predict relevant ads to show shoppers, predict whether a shopper will click or purchase, and allocate and price an ad. In order to do this, they needed to be able to score thousands of ads per request within a 20 ms window at over 100K transactions per second, all across hundreds of models that each required different hardware and software optimizations.</p> \n<p>To handle this workload they built a micro-service inferencing architecture on top of <a href=\"https://aws.amazon.com/ecs/\">Amazon Elastic Container Service (Amazon ECS)</a> and <a href=\"https://aws.amazon.com/app-mesh/\">AWS App Mesh</a> with specific hardware and software optimizations for each type of inference model. For low-latency inferencing the Ads team began with a CPU-based solution and then moved to GPUs to reduce prediction time even as complexity and the number of models grew.</p> \n<p>This looks like a very interesting session and I hope that you will be able to attend in person or to watch it online as part of <a href=\"https://reinvent.awsevents.com/\">virtual re:Invent</a>.</p> \n<p>— <a href=\"https://twitter.com/jeffbarr\">Jeff</a>;</p>","author":"Jeff Barr","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"890b5ed1a25887547a2cdc89425eacb5de6e6be1ec74ec81b29da7e5826567fb","category":"Tech"}