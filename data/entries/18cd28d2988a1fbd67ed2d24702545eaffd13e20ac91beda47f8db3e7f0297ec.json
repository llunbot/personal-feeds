{"title":"The Safest Way To Hide Your API Keys When Using React","link":"https://smashingmagazine.com/2023/05/safest-way-hide-api-keys-react/","date":1683550800000,"content":"<p>Back in the day, developers had to write all sorts of custom code to get different applications to communicate with each other. But, these days, <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/API\">Application Programming Interfaces</a> (APIs) make it so much easier. APIs provide you with everything you need to interact with different applications smoothly and efficiently, most commonly where one application requests data from the other application.</p>\n<p>While APIs offer numerous benefits, they also present a significant risk to your application security. That is why it is essential to learn about their vulnerabilities and how to protect them. In this article, we’ll delve into the wonderful world of API keys, discuss why you should protect your API keys, and look at the best ways to do so when using React.</p>\nWhat Are API Keys?\n<p>If you recently signed up for an API, you will get an API key. Think of API keys as secret passwords that prove to the provider that it is you or your app that’s attempting to access the API. While some APIs are free, others charge a cost for access, and because most API keys have zero expiration date, it is frightening not to be concerned about the safety of your keys.</p>\nWhy Do API Keys Need To Be Protected?\n<p>Protecting your API keys is crucial for guaranteeing the security and integrity of your application. Here are some reasons why you ought to guard your API keys:</p>\n<ul>\n<li><strong>To prevent unauthorized API requests.</strong><br />If someone obtains your API key, they can use it to make unauthorized requests, which could have serious ramifications, especially if your API contains sensitive data.</li>\n<li><strong>Financial insecurity.</strong><br />Some APIs come with a financial cost. And if someone gains access to your API key and exceeds your budget requests, you may be stuck with a hefty bill which could cost you a ton and jeopardize your financial stability.</li>\n<li><strong>Data theft, manipulation, or deletion.</strong><br />If a malicious person obtains access to your API key, they may steal, manipulate, delete, or use your data for their purposes.</li>\n</ul>\nBest Practices For Hiding API Keys In A React Application\n<p>Now that you understand why API keys must be protected, let’s take a look at some methods for hiding API keys and how to integrate them into your React application.</p>\n<h3>Environment Variables</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Environment_variable\">Environment variables</a> (<code>env</code>) are used to store information about the environment in which a program is running. It enables you to hide sensitive data from your application code, such as API keys, tokens, passwords, and just any other data you’d like to keep hidden from the public. </p>\n<p>One of the most popular <code>env</code> packages you can use in your React application to hide sensitive data is the <a href=\"https://github.com/motdotla/dotenv\"><code>dotenv</code></a> package. To get started:</p>\n<ol>\n  <li>Navigate to your react application directory and run the command below.<br />\n<pre><code>npm install dotenv --save\n</code></pre>\n  </li>\n  <li>Outside of the <code>src</code> folder in your project root directory, create a new file called <code>.env</code>.<br /><br />\n<img src=\"https://files.smashing.media/articles/safest-way-hide-api-keys-react/1-env-file-project-root-directory.png\" />\n</li>\n  <li>In your <code>.env</code> file, add the API key and its corresponding value in the following format:<br />\n<pre><code>// for CRA applications\nREACT_APP_API_KEY = A1234567890B0987654321C ------ correct\n\n// for Vite applications\nVITE_SOME_KEY = 12345GATGAT34562CDRSCEEG3T  ------ correct\n</code></pre>\n</li>\n  <li>Save the <code>.env</code> file and avoid sharing it publicly or committing it to version control.</li>\n  <li>You can now use the <code>env</code> object to access your environment variables in your React application.<br />\n<pre><code>// for CRA applications\n'X-RapidAPI-Key':process.env.REACT_APP_API_KEY\n// for Vite  applications\n'X-RapidAPI-Key':import.meta.env.VITE_SOME_KEY\n</code></pre>\n</li>\n  <li>Restart your application for the changes to take effect.</li>\n</ol>\n\n<p>However, running your project on your local computer is only the beginning. At some point, you may need to upload your code to GitHub, which could potentially expose your <code>.env</code> file. So what to do then? You can consider using the <code>.gitignore</code> file to hide it.</p>\n<h3>The <code>.gitignore</code> File</h3>\n<p>The <code>.gitignore</code> file is a text file that instructs Git to ignore files that have not yet been added to the repository when it’s pushed to the repo. To do this, add the <code>.env</code> to the <code>.gitignore</code> file before moving forward to staging your commits and pushing your code to GitHub.</p>\n<pre><code>// .gitignore\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n\n# api keys\n.env\n</code></pre>\n\n<p>Keep in mind that at any time you decide to host your projects using any hosting platforms, like <a href=\"https://vercel.com/\">Vercel</a> or <a href=\"https://www.netlify.com/\">Netlify</a>, you are to provide your environment variables in your project settings and, soon after, redeploy your app to view the changes.</p>\n<h3>Back-end Proxy Server</h3>\n<p>While environment variables can be an excellent way to protect your API keys, remember that they can still be compromised. Your keys can still be stolen if an attacker inspects your bundled code in the browser. So, what then can you do? Use a back-end proxy server.</p>\n<p>A back-end proxy server acts as an intermediary between your client application and your server application. Instead of directly accessing the API from the front end, the front end sends a request to the back-end proxy server; the proxy server then retrieves the API key and makes the request to the API. Once the response is received, it removes the API key before returning the response to the front end. This way, your API key will never appear in your front-end code, and no one will be able to steal your API key by inspecting your code. Great! Now let’s take a look at how we can go about this:</p>\n<ol>\n<li><strong>Install necessary packages.</strong><br />To get started, you need to install some packages such as <a href=\"http://expressjs.com/\">Express</a>, <a href=\"https://github.com/expressjs/cors\">CORS</a>, <a href=\"https://axios-http.com/\">Axios</a>, and <a href=\"https://nodemon.io/\">Nodemon</a>. To do this, navigate to the directory containing your React project and execute the following command:<br />\n<pre><code>npm install express cors axios nodemon\n</code></pre>\n</li>\n<li><strong>Create a back-end server file.</strong><br />In your project root directory, outside your <code>src</code> folder, create a JavaScript file that will contain all of your requests to the API.<br /><br />\n<img src=\"https://files.smashing.media/articles/safest-way-hide-api-keys-react/2-javascript-file-project-root-directory.png\" />\n</li>\n<li><strong>Initialize dependencies and set up an endpoint.</strong><br />In your backend server file, initialize the installed dependencies and set up an endpoint that will make a <code>GET</code> request to the third-party API and return the response data on the listened port. Here is an example code snippet:<br />\n<pre><code>// defining the server port\nconst port = 5000\n\n// initializing installed dependencies\nconst express = require('express')\nrequire('dotenv').config()\nconst axios = require('axios')\nconst app = express()\nconst cors = require('cors')\napp.use(cors())\n\n// listening for port 5000\napp.listen(5000, ()=&gt; console.log(<code>Server is running on ${port}</code> ))\n\n// API request\napp.get('/', (req,res)=&gt;{<br />    const options = {\n        method: 'GET',\n        url: '<a href=\"https://wft-geo-db.p.rapidapi.com/v1/geo/adminDivisions'\">https://wft-geo-db.p.rapidapi.com/v1/geo/adminDivisions'</a>,\n        headers: {\n            'X-RapidAPI-Key':process.env.REACT_APP_API_KEY,\n            'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'\n        }\n   };\n\n    axios.request(options).then(function (response) {\n        res.json(response.data);\n    }).catch(function (error) {\n        console.error(error);\n    });\n}\n</code></pre>\n</li>\n<li>Add a script tag in your <code>package.json</code> file that will run the back-end proxy server.<br /><br />\n<img src=\"https://files.smashing.media/articles/safest-way-hide-api-keys-react/3-script-tag-package-json-file.png\" />\n</li>\n<li>Kickstart the back-end server by running the command below and then, in this case, navigate to <code>localhost:5000</code>.<br />\n<pre><code>npm run start:backend\n</code></pre>\n</li>\n<li>Make a request to the backend server (<code><a href=\"http://localhost:5000/\">http://localhost:5000/</a></code>) from the front end instead of directly to the API endpoint. Here’s an illustration:<br />\n<pre><code>import axios from \"axios\";\nimport {useState, useEffect} from \"react\"\n\nfunction App() {\n\n  const [data, setData] = useState(null)\n\n  useEffect(()=&gt;{\n    const options = {\n      method: 'GET',\n      url: \"<a href=\"http://localhost:5000&quot;\">http://localhost:5000\"</a>,\n    }\n    axios.request(options)\n    .then(function (response) {\n        setData(response.data.data)\n    })\n    .catch(function (error) {\n        console.error(error);\n    })<br />  }, [])\n\n  console.log(data)\n\n  return (\n    &lt;main className=\"App\"&gt;\n    &lt;h1&gt;How to Create a Backend Proxy Server for Your API Keys&lt;/h1&gt;\n     {data &amp;&amp; data.map((result)=&gt;(\n      &lt;section key ={result.id}&gt;\n        &lt;h4&gt;Name:{result.name}&lt;/h4&gt;\n        &lt;p&gt;Population:{result.population}&lt;/p&gt;\n        &lt;p&gt;Region:{result.region}&lt;/p&gt;\n        &lt;p&gt;Latitude:{result.latitude}&lt;/p&gt;\n        &lt;p&gt;Longitude:{result.longitude}&lt;/p&gt;\n      &lt;/section&gt;\n    ))}\n    &lt;/main&gt;\n  )\n}\nexport default App;\n</code></pre>\n</li>\n</ol>\n\n<p>Okay, there you have it! By following these steps, you'll be able to hide your API keys using a back-end proxy server in your React application.</p>\n<h3>Key Management Service</h3>\n<p>Even though environment variables and the back-end proxy server allow you to safely hide your API keys online, you are still not completely safe. You may have friends or foes around you who can access your computer and steal your API key. That is why data encryption is essential.</p>\n<p>With a key management service provider, you can encrypt, use, and manage your API keys. There are tons of key management services that you can integrate into your React application, but to keep things simple, I will only mention a few:</p>\n<ul>\n<li><strong>AWS Secrets Manager</strong><br />The <a href=\"https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html\">AWS Secrets Manager</a> is a secret management service provided by Amazon Web Services. It enables you to store and retrieve secrets such as database credentials, API keys, and other sensitive information programmatically via API calls to the AWS Secret Manager service. There are a ton of resources that can get you started in no time.</li>\n<li><strong>Google Cloud Secret Manager</strong><br />The <a href=\"https://cloud.google.com/secret-manager\">Google Cloud Secret Manager</a> is a key management service provided and fully managed by the Google Cloud Platform. It is capable of storing, managing, and accessing sensitive data such as API keys, passwords, and certificates. The best part is that it seamlessly integrates with Google’s back-end-as-a-service features, making it an excellent choice for any developer looking for an easy solution.</li>\n<li><strong>Azure Key Vault</strong><br />The <a href=\"https://azure.microsoft.com/en-us/products/key-vault/\">Azure Key Vault</a> is a cloud-based service provided by Microsoft Azure that allows you to seamlessly store and manage a variety of secrets, including passwords, API keys, database connection strings, and other sensitive data that you don’t want to expose directly in your application code.</li>\n</ul>\n<p>There are more key management services available, and you can choose to go with any of the ones mentioned above. But if you want to go with a service that wasn’t mentioned, that’s perfectly fine as well.</p>\nTips For Ensuring Security For Your API Keys\n<p>You have everything you need to keep your API keys and data secure. So, if you have existing projects in which you have accidentally exposed your API keys, don’t worry; I've put together some handy tips to help you identify and fix flaws in your React application codebase:</p>\n<ol>\n<li>Review your existing codebase and identify any hardcoded API key that needs to be hidden.</li>\n<li>Use environment variables with <code>.gitignore</code> to securely store your API keys. This will help to prevent accidental exposure of your keys and enable easier management across different environments.</li>\n<li>To add an extra layer of security, consider using a back-end proxy server to protect your API keys, and, for advanced security needs, a key management tool would do the job.</li>\n</ol>\nConclusion\n<p>Awesome! You can now protect your API keys in React like a pro and be confident that your application data is safe and secure. Whether you use environment variables, a back-end proxy server, or a key management tool, they will keep your API keys safe from prying eyes.</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/12/protect-api-key-production-nextjs-api-route/\">How To Protect Your API Key In Production With Next.js API Route</a>”, Caleb Olojo</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/10/react-apis-building-flexible-components-typescript/\">Useful React APIs For Building Flexible Components With TypeScript</a>”, Gaurav Khanna</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/08/state-management-nextjs/\">State Management In Next.js</a>”, Atila Fassina</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/03/internationalization-nextjs-13-react-server-components/\">Internationalization In Next.js 13 With React Server Components</a>”, Jan Amann</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"18cd28d2988a1fbd67ed2d24702545eaffd13e20ac91beda47f8db3e7f0297ec","category":"Tech"}