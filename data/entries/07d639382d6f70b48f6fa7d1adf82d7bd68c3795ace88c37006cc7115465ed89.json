{"title":"ว่าด้วยเรื่องของ Observability บน Grafana + Loki + Tempo","link":"https://www.somkiat.cc/observability-with-grafana-platform/","date":1680837408000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/04/grafana-platform-150x150.jpg\" alt srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/04/grafana-platform-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2023/04/grafana-platform-75x75.jpg 75w\" /></p>\n<p>จากการแบ่งปันเรื่อง Observability ของระบบงาน<br />ใน <strong><a href=\"https://www.skooldio.com/workshops/microservices\" target=\"_blank\">C</a><a href=\"https://www.skooldio.com/workshops/microservices\" target=\"_blank\">ourse Microservices workshop ที่ Skooldio</a></strong> มานั้น<br />โดย Observability นั่นประกอบไปด้วย 3 ส่วนหลัก ๆ คือ</p>\n\n\n\n<ul><li>Application metric</li><li>Distributed tracing</li><li>Log aggregation</li></ul>\n\n\n\n<p>ต่อจากนั้นก็เอาไปทำ dashboard และ alert system ได้อีก<br />เพื่อช่วยให้เราสามารถดูได้ว่า application ทำงานอย่างไร<br />มีปัญหาตรงไหนบ้าง ?<br />หรือมีสัญญาณของปัญหาที่อาจจะเกิดขึ้นไหม ?<br />ถ้าเจอแล้ว สามารถเข้าถึงจุดเกิดเหตุได้ง่ายและรวดเร็วมากยิ่งขึ้น</p>\n\n\n\n<span></span>\n\n\n\n<p>จากแนวคิด นำมาสู่วิธีการจัดการ นั่นคือเครื่องมือที่ใช้งาน<br />หนึ่งในชุดของเครื่องมือที่แนะนำกันมาคือ Grafana platform<br />ประกอบไปด้วย</p>\n\n\n\n<ul><li>Grafana สำหรับ dashboard</li><li><a href=\"https://grafana.com/oss/loki/\" target=\"_blank\">Loki</a> สำหรับเก็บ logging</li><li><a href=\"https://grafana.com/oss/tempo/\" target=\"_blank\">Tempo</a> สำหรับเก็บ tracing</li><li>ใช้งาน Prometheus สำหรับ data source ที่จัดเก็บข้อมูล metric</li></ul>\n\n\n\n<p><strong>ตัวใหม่ที่น่าสนใจคือ <a href=\"https://grafana.com/docs/tempo/latest/getting-started/\" target=\"_blank\">Tempo</a></strong> </p>\n\n\n\n<p>ใช้ในการจัดการ distributed tracing<br />แสดงการทำงานดังรูป</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/04/getting-started.png\" alt width=\"556\" height=\"195\" /></figure>\n\n\n\n<p>โดยที่ตัว Agent นั้น สามารถกำหนดได้ว่า exporter หรือปลายทางที่เก็บคืออะไร<br />เช่น</p>\n\n\n\n<ul><li>OTLP (http, grpc)</li><li>Zipkin</li><li>Jaeger (http, grpc)</li></ul>\n\n\n\n<p><strong>ตัว Tempo นั้น สร้างมาเพื่อเป้าหมายของ high-scale distributed tracing backend</strong><br />นั่นคือ เลือก data storage ได้เยอะขึ้น ทั้ง local และ remote<br />ช่วยให้เก็บได้ทั้ง 100% ดีขึ้น ลดพื้นนที่ในการจัดเก็บ<br />สนับสนุน TraceQL สำหรับการดึงข้อมูล tracing<br />และใช้งานได้ง่าย</p>\n\n\n\n<p><strong>เพื่อความเข้าใจมาดูการใช้งาน Grafana platform กับ Spring Boot 3 กัน</strong></p>\n\n\n\n<p>แสดงโครงสร้างการทำงานดังรูป</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/04/grafana-platform-1024x457.jpg\" alt width=\"568\" height=\"253\" /></figure>\n\n\n\n<p>ใน Sprint Boot นั้นทำงานเรื่อง Tracing เหมือนเดิม <br />เพิ่มเติมคือ จะมี <a href=\"https://github.com/open-telemetry/opentelemetry-java-instrumentation\" target=\"_blank\">Grafana Agenet สำหรับ Java เข้ามา</a> เข้ามา<br />เพื่อทำการส่งข้อมูลจากเครื่องที่ service ของ Spring Boot ทำงานอยู่<br />ไปเก็บที่ Tempo นั่นเอง</p>\n\n\n\n<p><strong>ตัวอย่างการกำหนดค่าใน docker compose ของ Spring Boot 3</strong></p>\n\n\n\n<ul><li>ทำการกำหนด Grafana agent และกำหนด <a href=\"https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md\" target=\"_blank\">environment variable</a> ได้อีก</li><li>เก็บ trace ผ่าน OTLP</li><li>ที่จัดเก็บ trace คือ Tempo server ผ่าน HTTP protocol</li></ul>\n\n\n\n[gist id=\"8b9e04d239b0bc1482028b9a45386c5c\" file=\"1.yml\"]\n\n\n\n<p>มาดูตัวอย่างการ config Tempo และ Grafana กัน</p>\n\n\n\n[gist id=\"8b9e04d239b0bc1482028b9a45386c5c\" file=\"2.yml\"]\n\n\n\n<p>ผลการทำงาน เมื่อมีการ access เข้า Spring Boot 3 application<br />ข้อมูล trace จะเข้าไปที่ Tempo และแสดงผลผ่าน <a href=\"http://localhost:3000/explore\" target=\"_blank\">Grafana Explore</a> ดังรูป</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/04/Screenshot-2566-04-07-at-10.15.03-1024x502.png\" alt width=\"802\" height=\"392\" /></figure>\n\n\n\n<p><strong>ชุดเครื่องมืออื่น ๆ ประกอบไปด้วย</strong></p>\n\n\n\n<ul><li>Application metric =&gt; Prometheus, Grafana Loki</li><li>Distributed tracing =&gt; Zipkin, Jaeger และ Grafana Tempo</li><li>Log aggregation =&gt; ELK stack</li></ul>\n\n\n\n<p><strong>Reference Websites</strong></p>\n\n\n\n<ul><li><a href=\"https://www.somkiat.cc/hello-loki/\" target=\"_blank\">ทำความรู้จักกับ Loki</a></li><li><a href=\"https://piotrminkowski.com/2022/11/03/spring-boot-3-observability-with-grafana/\" target=\"_blank\">Spring Boot 3 Observability with Grafana</a></li><li><a href=\"https://grafana.com/blog/2021/02/03/auto-instrumenting-a-java-spring-boot-application-for-traces-and-logs-using-opentelemetry-and-grafana-tempo/\" target=\"_blank\">Auto-instrumenting a Java Spring Boot application for traces and logs using OpenTelemetry and Grafana Tempo</a></li><li><a href=\"https://github.com/mnadeem/nodejs-opentelemetry-tempo\" target=\"_blank\">Project Demonstrating Observability For NodeJs Applications</a></li><li><a href=\"https://github.com/joe-elliott/tempo-springboot-example\" target=\"_blank\">Springboot, OTEL and Tempo</a></li></ul>\n\n\n\n<p></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"07d639382d6f70b48f6fa7d1adf82d7bd68c3795ace88c37006cc7115465ed89","category":"Thai"}