{"title":"Monetize Open-Source Software With Gatsby Functions And Stripe","link":"https://smashingmagazine.com/2021/09/monetize-open-source-software-gatsby-functions-stripe/","date":1631869200000,"content":"<p>In this article, I’ll be explaining how I’ve used <a href=\"https://www.gatsbyjs.com/docs/reference/functions/\">Gatsby Functions</a> and the <a href=\"https://stripe.com/\">Stripe</a> API to enable secure “Pay what you want” contributions that help fund my open-source project <a href=\"https://www.mdx-embed.com/\">MDX Embed</a>.</p>\n<p><strong>Note</strong>: <em>MDX Embed allows you to easily embed popular third-party media content such as YouTube videos, Tweets, Instagram posts, Egghead lessons, Spotify, TikTok and many more straight into your <code>.mdx</code> — no import required.</em></p>\nGatsby Serverless Functions\n<p><a href=\"https://www.gatsbyjs.com/docs/reference/functions/\">Gatsby Functions</a> open up a whole new world for front-end developers as they provide a way to write and use server-side code without the hassle of maintaining a server. Uses for Serverless Functions range from Newsletter signups with <a href=\"https://convertkit.com/\">ConvertKit</a>, sending an email using <a href=\"https://sendgrid.com/\">SendGrid</a>, saving data in a database like <a href=\"https://fauna.com/\">Fauna</a>, or in this case, accepting secure payments using <a href=\"https://stripe.com/\">Stripe</a> — the list is quite frankly endless!</p>\n<p>Third-party services like the ones mentioned above will only accept requests that are sent server-side. There’s a number of reasons for this but using secure or private keys is typically one. Using these keys server-side means they’re not exposed to the client (browser) and can’t be abused, and it’s here where Gatsby’s Serverless Functions can help.</p>\n<p><a href=\"https://www.gatsbyjs.com/\">Gatsby</a> provides the same logical approach to Serverless Functions as they do with pages. For example, website pages are located in <code>src/pages</code> and Serverless Functions are located in <code>src/api</code>.</p>\n<p>Naturally, there’s slightly more to it than that but Gatsby’s developer experience is both logical and consistent, and I for one absolutely love that!</p>\nSame Origin Functions\n<p>Nine times out of ten when working with Serverless Functions you’ll be using them the way they were supposed to be used, E.g, your website uses its own functions. I call this usage <strong>Same Origin Functions</strong> or SOF’s for short. In this scenario both the Front-end and the API are deployed to the same origin, E.g <a href=\"www.my-website.com\">www.my-website.com</a>, and <a href=\"www.my-website.com/api\">www.my-website.com/api</a>, and communication between the two is both seamless and, of course, blazing fast!</p>\n<p>Here’s a diagram to help illustrate what that looks like:</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1ba8f0a-7d06-4fb0-8664-08d51b8a9f25/1-monetize-open-source-software-gatsby-functions-stripe.jpg\" /></p>\nCross-Origin Functions\n<p>There are, however, at least two scenarios I’ve encountered where I’ve needed what I’ve been calling “Cross-Origin Functions” (or COF’s for short). The two scenarios where I’ve needed COF’s are as follows:</p>\n<ol>\n<li>I need server-side capabilities but the origin website can’t run Serverless Functions.</li>\n<li>The Serverless Function is used by more than one origin.</li>\n</ol>\n<p><strong>Note</strong>: <em>Using Gatsby isn’t the only way to write Serverless Functions but more on that in a moment.</em></p>\n<p>I first experimented with this approach in November 2020 before the release of Gatsby Functions and used Netlify Functions to provide server-to-server communications with the Twitter API and my Gatsby blog and commercial portfolio. You can read about this approach here: <a href=\"https://paulie.dev/posts/2020/11/gatsby-netlify-twitter/\">Use Netlify Functions and the Twitter API v2 as a CMS for your Gatsby blog</a>.</p>\n<p>After the release of Gatsby Functions in June 2021 I refactored the above to work with Gatsby Functions and here’s a little more information about how I went about it and why: <a href=\"https://paulie.dev/posts/2021/06/gatsby-abstracted-functions/\">Using Gatsby Functions as an abstracted API</a>.</p>\n<p>Here’s a diagram to better illustrate the general approach.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52d07d29-6fe4-4b5e-9040-0e1fea0fd493/2-monetize-open-source-software-gatsby-functions-stripe.jpg\" /></p>\n<p>In the above diagram <code>website-1.com</code> is built with Gatsby and <em>could</em> have used Serverless Functions (but doesn’t) and <code>website-2.com</code> is built using something that has no Serverless Function capabilities.</p>\n<p><strong>Note</strong>: <em>In both cases, they both need to use the same third-party service so it makes sense to abstract this functionality into a standalone API.</em></p>\n<p>The example standalone API (<code>my-api.com</code>) is also a Gatsby site and has Serverless Function capabilities, but more importantly, it allows websites from other origins to use its Serverless Functions.</p>\n<p>I know what you’re thinking: CORS! Well, sit tight. I’ll cover this shortly. </p>\n💰 Monetizing MDX Embed\n<p>This was the situation I found myself in with MDX Embed. The documentation website for this project is built using <a href=\"https://storybook.js.org/\">Storybook</a>. Storybook has no serverless capabilities but I really needed server-to-server communication. My solution? I created a standalone API called <a href=\"https://paulieapi.gatsbyjs.io/\">Paulie API</a>.</p>\n<h3>Paulie API</h3>\n<p>Paulie API (like the example standalone API mentioned above) can accept requests from websites of different origins and can connect to a number of different third-party services, one of which is Stripe.</p>\n<p>To enable Stripe payments from MDX Embed, I created an <code>api/make-stripe-payment</code> endpoint on Paulie API which can pass the relevant information from MDX Embed through its own Serverless Function and on to the Stripe API to create a “checkout”. You can <a href=\"https://github.com/PaulieScanlon/paulie-api/blob/main/src/api/make-stripe-payment.js\">see the src code here</a>.</p>\n<p>Once a checkout has been successfully created, the Stripe API returns a URL. This URL is passed back to MDX Embed which opens a new window in the browser where “customers” can securely enter their payment details on a Stripe webpage... and boom! You get paid!</p>\n<p>Here’s a diagram that better illustrates how this works:</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/76efecc6-ff6b-49d0-b522-b71da1b92f2d/3-monetize-open-source-software-gatsby-functions-stripe.jpg\" /></p>\n<p>This approach is the same as mentioned above where <a href=\"https://mdx-embed.com\">https://mdx-embed.com</a> sends requests to <a href=\"https://paulieapi.gatsbyjs.io\">https://paulieapi.gatsbyjs.io</a> which in turn connects to the Stripe API using server-to-server communication. But before we go too much further, it’s worth explaining why I didn’t use <a href=\"https://github.com/stripe/react-stripe-js\"><code>react-stripe-js</code></a>.</p>\n<h3><code>react-stripe-js</code></h3>\n<p><a href=\"https://github.com/stripe/react-stripe-js\"><code>react-stripe-js</code></a> is a client-side (browser) toolkit that allows you to create Stripe checkouts and elements in your React project. With react-stripe-js you can set up a method for accepting payments securely without the need for server-side communication, but… and there is a but. I wanted to implement “Pay what you want” contributions. Allow me to explain.</p>\n<p>Here’s a screenshot of the MDX Embed “product” that I’ve set up in my Stripe dashboard. Notice the price is $1.00.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4e4c8934-ae67-4127-b616-c6a941eb6829/4-monetize-open-source-software-gatsby-functions-stripe.jpg\" /></p>\n<p>If I’d used react-stripe-js to enable payments all “customers” would be asked to pay the same amount. In this case, it’s only $1.00 and that’s not gonna pay the bills is it!</p>\n<p>To enable “Pay what you want” (e.g. a nominal amount chosen by a “customer”), you have to dive a little deeper and use server-to-server communication and send this amount to the Stripe API using a custom HTTP request. This is where I'm using a Gatsby Function and I pass in a dynamic value which will then be used to create the “checkout” experience and overwrite the price defined in my Stripe dashboard.</p>\n<p>On MDX Embed, I’ve added an HTML <code>&lt;input type=\"number\" /&gt;</code> which allows “customers” to set an amount rather than paying a predefined amount — if only all e-commerce were like this!</p>\n<p>Here’s a little video I made that shows how MDX Embed, Paulie API and the Stripe API all work together:</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f8b3462-e9b3-447d-a9da-aa0e3aa7af78/5-monetize-open-source-software-gatsby-functions-stripe.jpg\" /></p>\n<p>You should see from the above diagram that <a href=\"http://paulie.dev\">http://paulie.dev</a> also uses the Stripe endpoint. I’ve used the same approach as with MDX Embed to enable the “Pay what you want” functionality. It’s a small thing, but since the <code>make-stripe-payment</code> endpoint is already written and working, I can re-use it and avoid duplicating this functionality.</p>\n<p>The <a href=\"http://paulie.dev\">http://paulie.dev</a> website also has its own Gatsby Serverless Functions which I use to post user reactions to Fauna and capture Newsletter signups. This functionality is unique to this site so I haven’t abstracted this yet. However, if I wanted newsletter sign-ups on <a href=\"https://www.pauliescanlon.io\">https://www.pauliescanlon.io</a>, this would be the point where I migrate the function over to Paulie API.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/235c79d0-b1a4-45a3-9325-6158e479cee1/6-monetize-open-source-software-gatsby-functions-stripe.jpg\" /></p>\nAbstraction\n<p>This might seem like a step backwards to abstract your Serverless Functions. After all, one of the coolest things about going serverless is that both your front and back-end code are live in the same place. As I’ve shown, there are times where abstracting makes sense — to me anyway.</p>\n<p>I’m certainly benefitting from using this approach and plan to further develop my API to provide more functionality to a number of my own websites, but if making money from open-source is of interest to you and your site isn’t built using Gatsby, this approach may well be the answer you were looking for.</p>\n<p>Wanna get started with Gatsby Functions? Check out the <a href=\"https://www.gatsbyjs.com/docs/reference/functions/\">Gatsby Functions docs</a> to get going!</p>\n<h3>Further Reading</h3>\n<p>If you’re interested in learning more about Serverless Functions I’d recommend:</p>\n<ul>\n<li><a href=\"https://twitter.com/Swizec\">Swizec Teller</a>’s book, “<a href=\"https://serverlesshandbook.dev/\">Serverless Handbook For Frontend Engineers</a>”</li>\n<li>Benedict’s <a href=\"https://www.crowdcast.io/raae\">Summer Functions course</a></li>\n<li>...and, of course, <a href=\"https://www.gatsbyjs.com/docs/reference/functions\">the Gatsby docs</a></li>\n</ul>\n<h3>FuncJam</h3>\n<p>From August 17 to September 30, the Gatsby folks are running a community competition with some absolutely mega prizes to be won. If there’s still time, then <a href=\"https://www.gatsbyjs.com/func-jam-21\">pop on over to FuncJam</a> and join in. Also, <a href=\"https://www.gatsbyjs.com/blog/the-gatsby-funcjam-challenge\">check out the Byte-size section of this blog post</a>; it contains helpful videos and links to a number of example functions.</p>\n<p>Thanks for reading, and if you’d like to discuss anything mentioned in this article, leave a comment below or <a href=\"https://twitter.com/PaulieScanlon\">find me on Twitter</a>.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"98a7775a47fa477db6e2968610e19c16e2cd8c716cd7ed3849434558b7b77d47","category":"Tech"}