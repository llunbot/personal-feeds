{"title":"Terraform Modules on AWS","link":"https://www.hashicorp.com/blog/terraform-modules-on-aws","date":1632176100000,"content":"<p><a href=\"https://aws.amazon.com/quickstart/architecture/terraform-modules-on-aws/\">Terraform modules on AWS</a> allow practitioners to easily describe their infrastructure in terms of its architecture, rather than directly in terms of physical objects. Modules can be called multiple times, either within the same solution or in separate ones, helping practitioners quickly deploy Terraform-based deployments on AWS. Currently there are 15 modules available (all include the process to work with <a href=\"https://www.terraform.io/cloud\">Terraform Cloud</a>):</p>\n<ul>\n<li><a href=\"https://github.com/aws-ia/terraform-aws-vpc\">terraform-aws-vpc</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-aws-ecs-cluster\">terraform-aws-ecs-cluster</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-aws-ecs-fargate\">terraform-aws-ecs-fargate</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-aws-rds-aurora\">terraform-aws-rds-aurora</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-aws-globalnetwork\">terraform-aws-globalnetwork</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-aws-codestar\">terraform-aws-codestar</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-aws-codebuild\">terraform-aws-codebuild</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-hashicorp-cloud_workspace\">terraform-hashicorp-cloud_workspace</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-aws-sqs\">terraform-aws-sqs</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-aws-codecommit\">terraform-aws-codecommit</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-modules-examples\">terraform-modules-examples</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-aws-sns\">terraform-aws-sns</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-hashicorp-cts-alb_listener-nia\">terraform-hashicorp-cts-alb_listener-nia</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-aws-transit-gateway\">terraform-aws-transit-gateway</a></li>\n<li><a href=\"https://github.com/aws-ia/terraform-aws-label\">terraform-aws-label</a></li>\n</ul>\n<p>Each of the Terraform modules on AWS include:</p>\n<ul>\n<li>Availability from registry.terraform.io and GitHub</li>\n<li>Getting started provisioning instructions</li>\n<li>A readme that details how the module can be imported into your Terraform files</li>\n</ul>\n<p>In this post, we’ll walk through setting up and using the Amazon Virtual Private Cloud (VPC) for Terraform on AWS module.</p>\n<h2><a href=\"#deploying-your-first-pattern-on-aws\">»</a><a></a>Deploying Your First Pattern on AWS</h2>\n<p>The Amazon VPC pattern allows you to set up a VPC that provides a networking foundation based on AWS best practices for your infrastructure. The VPC environment has both public and private subnets where you can launch AWS services and other resources based on this <a href=\"https://aws-quickstart.github.io/quickstart-aws-vpc/\">quickstart guide</a>.</p>\n<h3><a href=\"#install-terraform\">»</a><a></a>Install Terraform</h3>\n<p>To deploy this module, do the following: Install Terraform. (See <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">Install Terraform</a> for a tutorial)</p>\n<h3><a href=\"#sign-up-for-terraform-cloud\">»</a><a></a>Sign up for Terraform Cloud</h3>\n<p>This pattern uses Terraform Cloud. <a href=\"https://app.terraform.io/signup/account\">Sign up and log into Terraform Cloud here</a>. (There is a free tier available)</p>\n<h3><a href=\"#configure-terraform-cloud-api-access\">»</a><a></a>Configure Terraform Cloud API Access</h3>\n<blockquote>\n<p>Tip: If you are using a pre-12.21 version of Terraform, set up a <a href=\"https://www.terraform.io/docs/cli/config/config-file.html#credentials\">CLI configuration file</a> to authenticate.</p>\n</blockquote>\n<p>In order to authenticate with Terraform Cloud, run the <code>terraform login</code> subcommand. Terraform will prompt you to confirm that you want to authenticate by typing <code>yes</code> in your terminal.</p><img src=\"https://www.datocms-assets.com/2885/1620916574-tf-moaws-1.png\" /><h3><a href=\"#generate-a-token\">»</a><a></a>Generate a Token</h3>\n<p>A browser window will automatically open to the Terraform Cloud login screen. Enter a token name in the web UI, or leave the default name, <code>terraform login</code>.</p>\n<blockquote>\n<p>Tip: If your browser doesn't open automatically, navigate to the URL output in your terminal or <a href=\"https://app.terraform.io/app/settings/token?source=terraform-login\">click here</a> to be taken to the token creation UI.</p>\n</blockquote><img src=\"https://www.datocms-assets.com/2885/1620920485-tf-moaws-2-edited.png\" /><p>Click \"Create API token\" and Terraform Cloud will generate the authentication token.</p><img src=\"https://www.datocms-assets.com/2885/1620920410-tf-moaws-3-edited-edited.png\" /><p>Save a copy of the token in a secure location. It provides access to your Terraform Cloud organization.</p>\n<h3><a href=\"#add-the-token-to-the-cli\">»</a><a></a>Add the Token to the CLI</h3>\n<p>Your terminal will prompt you for the generated user token.</p><img src=\"https://www.datocms-assets.com/2885/1620916562-tf-moaws-4.png\" /><p>Paste the user token exactly once into your terminal. Terraform will hide the token for security, so when you paste it in you will not see it. Press Enter and you will now have access to the Terraform Cloud backend.</p><img src=\"https://www.datocms-assets.com/2885/1620916560-tf-moaws-5.png\" /><h2><a href=\"#deploy-your-first-module-linux-or-macos\">»</a><a></a>Deploy Your First Module (Linux or macOS)</h2>\n<p>To get started as quickly as possible with the module, we have created a workflow that automatically sets up workspaces with Terraform Cloud so that you can run the VPC deployment within a workspace.</p><img src=\"https://www.datocms-assets.com/2885/1620916557-tf-moaws-6.png\" /><h3><a href=\"#credential-handling\">»</a><a></a>Credential Handling</h3>\n<p>Now export the Terraform Cloud credentials to a local host variable to use for this session. Here’s the command:</p><pre><code>export TERRAFORM_CONFIG=\"$HOME/.terraform.d/credentials.tfrc.json\"</code></pre><p>Now we need to create a configuration that will populate the variables used in the module. This is done by using a <code>tfvars</code> file like so:</p>\n<p>Example filepath = <code>$HOME/.aws/terraform.tfvars</code></p>\n<p>Example <code>tfvars</code> file contents</p><img src=\"https://www.datocms-assets.com/2885/1620916534-tf-moaws-7.png\" /><p>Replace <code>***</code> with <code>AKEY</code> and <code>SKEY</code></p>\n<blockquote>\n<p>NOTE: STS-based credentials are optional but highly recommended.</p>\n</blockquote>\n<blockquote>\n<p>CAUTION: Make sure your credentials are secured outside version control and follow secrets management best practices.</p>\n</blockquote>\n<h2><a href=\"#module-deployment\">»</a><a></a>Module Deployment</h2>\n<p>Now that we have the basics covered, we can deploy this module. These instructions are for Linux or macOS based machines.</p>\n<p>First, clone the <code>aws-quickstart/terraform-aws-vpc</code> repository.</p>\n<pre><code><span>git</span> clone https://github.com/aws-quickstart/terraform-aws-vpc\n</code></pre>\n<p>Move from your current directory to the root directory.</p>\n<pre><code><span>cd</span> terraform-aws-vpc/ \n</code></pre>\n<p>Switch into the workspace directory.</p>\n<pre><code><span>cd</span> setup_workspace\n</code></pre>\n<p>Run these two commands to build the workspace in Terraform Cloud and create your remote file.</p>\n<pre><code>terraform init\n</code></pre>\n<pre><code>terraform apply\n</code></pre>\n<blockquote>\n<p>NOTE:  If you run <code>terraform apply</code> without the <code>tfvars</code> file you will have to manually add your credentials into the newly created environment vars in Terraform Cloud or in the <code>variables.tf</code> file in this directory.</p>\n</blockquote>\n<p>Alternatively, you can use the <code>tfvar</code> file to populate the variables in the <code>variable.tf</code> file.</p>\n<pre><code>terraform apply -var-file<span>=</span><span>\"<span>$HOME</span>/.aws/terraform.tfvars\"</span>\n</code></pre>\n<p>If you use that command you will be prompted to create an organization name to use in Terraform Cloud or you can press Enter to auto-generate a name.</p><img src=\"https://www.datocms-assets.com/2885/1621002039-screen-shot-2021-05-14-at-10-20-13-am.png\" /><p>Next, confirm the plan.</p><img src=\"https://www.datocms-assets.com/2885/1621001803-screen-shot-2021-05-14-at-10-14-13-am.png\" /><p>Once complete you will see this output message.</p><img src=\"https://www.datocms-assets.com/2885/1621001204-3-outputs.png\" /><p>Next, move into the deploy directory. There, the previous command auto-generated a <code>backend.hcl</code> file, which will allow you to run the VPC build in Terraform Cloud.</p>\n<pre><code>cd ../deploy\n</code></pre>\n<pre><code>terraform apply\n</code></pre>\n<p>Again, you can alternatively use the <code>tfvar</code> file to populate the variables in the <code>variable.tf</code>.</p>\n<pre><code>terraform apply -var-file=\"$HOME/.aws/terraform.tfvars\"\n</code></pre>\n<p>The <code>terraform apply</code> is run remotely in Terraform Cloud and will end with the following outputs:</p><img src=\"https://www.datocms-assets.com/2885/1621001593-screen-shot-2021-05-14-at-10-11-21-am.png\" /><p>Once Terraform finishes, you will have created a VPC setup in your account that is illustrated in the diagram below. This deployment is based on the best practices outlined in this <a href=\"https://aws-quickstart.github.io/quickstart-aws-vpc/\">AWS quickstart deployment guide</a>.</p><img src=\"https://www.datocms-assets.com/2885/1621002374-aws-quickstart-deploy-diagram.png\" /><h2><a href=\"#additional-information\">»</a><a></a>Additional Information</h2>\n<p><a href=\"https://aws.amazon.com/quickstart/architecture/terraform-modules-on-aws/\">Terraform modules on AWS</a> are published under an open source license with the source code available on <a href=\"https://github.com/aws-ia/?q=terraform-aws&amp;type=&amp;language=\">GitHub</a>. Terraform modules on AWS are currently available as a developer preview and on the <a href=\"https://registry.terraform.io/browse/modules?provider=aws\">Terraform registry</a>.</p>\n<p>Terraform Cloud is free for up to five users and organizations can upgrade to the Team &amp; Governance or Business tiers at any time. To get started, <a href=\"https://app.terraform.io/session\">sign up for Terraform Cloud</a> and follow our <a href=\"https://learn.hashicorp.com/collections/terraform/cloud-get-started\">Getting Started tutorial</a> or <a href=\"https://www.hashicorp.com/contact-sales/?utm_source=TFC4B\">contact HashiCorp Sales</a>.</p>","author":"David Wright","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"fc0b2373ea719db508d172cb6721ff98921b1dac2071e36ae5dbf7f302db97a0","category":"Tech"}