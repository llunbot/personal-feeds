{"title":"Spring Framework 6.2.0-M1 ::  มาใช้งาน @TestBean ใน test กัน","link":"https://www.somkiat.cc/spring-framework-testbean/","date":1714405460000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/04/spring-framework-6.2-150x150.png\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/04/spring-framework-6.2-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2024/04/spring-framework-6.2-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/04/spring-framework-6.2.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/04/spring-framework-6.2-1024x512.png\" width=\"625\" height=\"313\" /></a></figure>\n\n\n\n<p>เห็น <strong><a href=\"https://spring.io/blog/2024/04/16/spring-framework-6-2-0-m1-overriding-beans-in-tests\" target=\"_blank\">Spring Framework 6.2.0-M1</a></strong> เพิ่งปล่อยออกมาให้ลองทดสอบ<br />มีการเพิ่มและเปลี่ยนแปลง feature เยอะเลย<br />โดยหนึ่งในความสามารถด้านการทดสอบ<br />คือการเพิ่ม @TestBean เข้ามาในการทดสอบ (Spring Test Context)<br />ช่วยให้เราสามารถ override bean ต่าง ๆ ใน context ของการทดสอบได้ง่ายขึ้น<br />ดังนั้นมาดูการใช้งานกัน</p>\n\n\n\n<span></span>\n\n\n\n<p>ใน test code นั้นสามารถทำการ override bean ที่ต้องการด้วย @TestBean<br />จากนั้นก็ทำการสร้าง static method (Factory method) <br />โดยชื่อ method มีรูปแบบดังนี้  {beanName}TestOverride<br />สำหรับการทำงานใน test ได้เลย<br />ยกตัวอย่างดังนี้</p>\n\n\n\n[gist id=\"ff49626652fe3d4fe78467585cf949b5\" file=\"Demo.java\"]\n\n\n\n<p>รวมทั้งยังสามารถใช้งาน library อื่น ๆ ได้ด้วย<br />ไม่จำเป็นต้องใช้ Mockito เพียงอย่างเดียว<br />ลองเล่นกันดูครับ น่าจะเปลี่ยนแปลงไปเรื่อย ๆ จนกว่าจะเข้าสู่สถานะ Release Candidate (RC)</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"4617745ed3ed4d5e44aaac90ed0d8dc8cdaca7e4e5234a8ad17577451cfc28f5","category":"Thai"}