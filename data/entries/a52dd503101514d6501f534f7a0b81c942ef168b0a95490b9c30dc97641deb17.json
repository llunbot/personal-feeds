{"title":"Introducing resource control policies (RCPs), a new type of authorization policy in AWS Organizations","link":"https://aws.amazon.com/blogs/aws/introducing-resource-control-policies-rcps-a-new-authorization-policy/","date":1731548691000,"content":"<p>Today, I am happy to introduce <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_rcps.html\">resource control policies (RCPs)</a> – a new authorization policy managed in AWS Organizations that can be used to set the maximum available permissions on resources within your entire organization. They are a type of preventative control that help you establish a <a href=\"https://aws.amazon.com/identity/data-perimeters-on-aws/\">data perimeter</a> in your AWS environment and restrict external access to resources at scale. Enforced centrally within Organizations, RCPs provide confidence to the central governance and security teams that access to resources within their AWS accounts conforms to their organization’s access control guidelines.</p> \n<p>RCPs are available in all commercial AWS Regions and, at launch, the following services are supported: <a href=\"https://aws.amazon.com/s3/getting-started/?nc=sn&amp;loc=6&amp;dn=1\">Amazon Simple Storage Service (Amazon S3)</a>, <a href=\"https://docs.aws.amazon.com/STS/latest/APIReference/welcome.html\">AWS Security Token Service (AWS STS)</a>, <a href=\"https://aws.amazon.com/kms/getting-started/\">AWS Key Management Service (AWS KMS)</a>, <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-getting-started.html\">Amazon Simple Queue Service (Amazon SQS)</a>, and <a href=\"https://aws.amazon.com/secrets-manager/getting-started/\">AWS Secrets Manager</a>.</p> \n<p>There are no additional charges for enabling and using RCPs.</p> \n<p><strong>How are they different from service control policies (SCPs)?</strong><br /> While similar in nature, RCPs complement <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps.html\">service control policies (SCPs)</a>, but they work independently.</p> \n<p>Service control policies (SCPs) allow you to limit the permissions granted to principals within your organization such as AWS Identity and Access Management (IAM) roles. By constraining these permissions centrally within Organizations you can restrict access to AWS services, specific resources and even under what conditions principals can make requests across multiple AWS accounts.</p> \n<p>RCPs, on the other hand, allow you to limit the permissions granted to resources in your organization. Because you implement RCPs centrally within Organizations, you can enforce consistent access controls on resources across multiple AWS accounts. For instance, you can restrict access to S3 buckets in your accounts so that they can only be accessed by principals that belong to your organization. RCPs are evaluated when your resources are being accessed irrespective of who is making the API request.</p> \n<p>Keep in mind that neither SCPs nor RCPs grant any permissions. They only set the maximum permissions available to principals and resources in your organization. You still need to grant permissions with appropriate IAM policies, such as identity-based or resource-based policies.</p> \n<p>Quotas for SCPs and RCPs are completely independent from each other. Each RCP can contain up to 5,120 characters. You can have up to five RCPs attached to the organization root, each OU, and account, and you can create and store up to 1000 RCPs in an organization.</p> \n<p><span><strong>How to get started</strong></span><br /> To start using RCPs you must first enable them. You can do this using the Organizations console, an <a href=\"https://aws.amazon.com/developer/tools/\">AWS SDK</a>, or by using the <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html\">AWS Command Line Interface (AWS CLI)</a>. Make sure you are using the Organizations management account or a delegated administrator because those are the only accounts that can enable or disable policy types.</p> \n<p>Make sure that you are using Organizations with the “<strong>all features</strong>” option. If you are using the “<strong>Consolidated billing features</strong>” mode, then you need to <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\">migrate to using all features</a> before you can enable RCPs.</p> \n<p>For console users, first head to the Organizations console. Choose <strong>Policies</strong> and you should see the option to enable <strong>Resource control policies</strong>.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/09/enabling-RCPs.png\" alt=\"enabling RCPs in the AWS Organizations console\" width=\"856\" height=\"642\" /></p> \n<p>After RCPs are enabled, you will notice in the <strong>Resource control policies</strong> page that a new policy called <code>RCPFullAWSAccess</code> is now available. This is an AWS managed policy that is automatically created and attached to every entity in your organization including the root, each OU, and AWS account.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/09/RCPFullAWSAccess-policy.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/09/RCPFullAWSAccess-policy.png\" alt=\"the RCPFullAWSAccessPolicy can be seen on the console once RCPs are enabled\" width=\"845\" height=\"266\" /></a></p> \n<p>This policy allows all principals to perform any action against the organization’s resources, which means that until you start creating and attaching your own RCPs, all of your existing IAM permissions continue to operate as they did.</p> \n<p>This is how it looks:</p> \n<div> \n <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    { \n        \"Effect\": \"Allow\", \n        \"Principal\": \"*\", \n        \"Action\": \"*\", \n        \"Resource\": \"*\" \n    }\n  ]\n}</code></pre> \n</div> \n<p><strong><span>Creating an RCP</span><br /> </strong></p> \n<p>Now, we are ready to create our ﬁrst RCP! Let’s look at an example.</p> \n<p>By default, AWS resources do not permit access to external principals; resource owners must explicitly grant such access by conﬁguring their policies. While developers have the ﬂexibility to set resource-based policies according to their application needs, RCPs enable central IT teams to maintain control over the effective permissions across resources in their organization. This ensures that even if developers grant broad access, external identities are still restricted access in accordance with the organization’s security requirements.</p> \n<p>Let’s create an RCP to restrict access to our S3 buckets so that only principals within our organization can access them.</p> \n<p>On the <strong>Resources control policies</strong> page, choose <strong>Create policy</strong> which will take you to the page where you can author a new policy.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/09/create-a-new-resource-control-policy-page.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/09/create-a-new-resource-control-policy-page.png\" alt=\"create a new resource control policy page\" width=\"762\" height=\"777\" /></a>I am going to call this policy <code>EnforceOrgIdentities</code>. I recommend you enter a clear description so it is easy to understand at first glance what this policy does and to tag it appropriately.</p> \n<p>The next section is where you can edit your policy statement. I replace the pre-populated policy template with my own:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/09/create-policy-policy-syntax.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/09/create-policy-policy-syntax.png\" alt=\"create policy - policy syntax\" width=\"855\" height=\"721\" /></a>Here is the full JSON policy document:</p> \n<div> \n <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"EnforceOrgIdentities\",\n            \"Effect\": \"Deny\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:*\",\n            \"Resource\": \"*\",\n            \"Condition\": {\n                \"StringNotEqualsIfExists\": {\n                    \"aws:PrincipalOrgID\": \"[MY ORG ID]\"\n                },\n                \"BoolIfExists\": {\n                    \"aws:PrincipalIsAWSService\": \"false\"\n                }\n            }\n        }\n    ]\n}</code></pre> \n</div> \n<p>Let’s break this down:</p> \n<p><strong>Version</strong> – This is a standard and required element of IAM policies. AWS maintains backwards compatibility, so using the latest version, currently 2012-10-17, doesn’t break existing policies but allows you to use newer features.</p> \n<p><strong>Statement</strong> – An array that can contain one or more statement objects. Each of these statement objects defines a single permission or set of permissions.</p> \n<p><strong>Sid</strong> – This is an optional field that can be helpful for policy management and troubleshooting. It needs to be unique within the scope of this JSON policy document.</p> \n<p><strong>Effect</strong> – As you might remember from earlier, by default we have an RCP that allows access to every AWS principal, action, and resource attached to every entity in our organization. Therefore, you should use <code>Deny</code> to apply restrictions.</p> \n<p><strong>Principal</strong> – For an RCP, this field must always be set to <code>\"*\"</code>. Use the Condition field if you want this policy to apply only to specific principals.</p> \n<p><strong>Action</strong> – Specifies the AWS service and the actions that this policy applies to. In this case, we want to deny all interactions with Amazon S3 if they don’t meet our access control guidelines.</p> \n<p><strong>Resource</strong> – Specifies the resources that the RCP applies to.</p> \n<p><strong>Condition</strong> – A collection of conditions that will be evaluated to determine whether the policy should be applied or not for each request.</p> \n<p>It’s important to remember that <strong>all conditions must evaluate to true for the RCP to be applied</strong>. In this case, we are applying two conditions:</p> \n<p>1. Was the request made by an external principal?</p> \n<pre><code>\"StringNotEqualsIfExists\": \n { \n   \"aws:PrincipalOrgID\": \"[MY ORG ID]\" \n }</code></pre> \n<p>This condition first checks if the key <code>aws:PrincipalOrgID</code> is present in the request. If it’s not, then this condition evaluates to true without further evaluation.</p> \n<p>If it does exist, then it compares the value to our organization ID. If the value is the same then it evaluates to false which means that the RCP will not be applied because all conditions must evaluate to true. This is the intended behaviour because we don’t want to deny access to principals within our organization.</p> \n<p>However, if the value doesn’t match our organization ID, that means the request was made by a principal who is external to our organization. The condition evaluates to true which means that the RCP can still potentially be applied as long as the second condition also evaluates to true.</p> \n<p>2. Is the request coming from an AWS service?</p> \n<pre><code>\"BoolIfExists\": \n   { \n     \"aws:PrincipalIsAWSService\": \"false\"\n   }</code></pre> \n<p>This condition tests if the request contains a special key called <code>aws:PrincipalIsAWSService</code> which is automatically injected into the request context for all signed API requests and is set to true when it originates from an AWS service such as <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">AWS CloudTrail</a> writing events to your S3 bucket. If the key is not present, then this condition evaluates to <code>true</code>.</p> \n<p>If it does exist, then it will compare the value to what we declare in our statement. In this case, we are testing if the value is equal to <code>false</code>. If it is, then we return <code>true</code> since that would mean that the request was not made by an AWS service and could potentially still have been made by someone outside of our organization. Otherwise, we return <code>false</code>.</p> \n<p>In other words, if the request did not originate from a principal within our organization and it did not originate from an AWS service, then access to the S3 bucket is denied.</p> \n<p>This policy is just a sample and you should tailor it to meet your unique business and security objectives. For instance, you might want to customize this policy to allow access by your business partners or to restrict access to AWS services so that they can access your resources only on your behalf. See <a href=\"https://aws.amazon.com/blogs/security/establishing-a-data-perimeter-on-aws-allow-only-trusted-identities-to-access-company-data/\">Establishing a data perimeter on AWS: Allow only trusted identities to access company data</a> for more details.</p> \n<p><strong><span>Attaching an RCP</span><br /> </strong>The process of attaching an RCP is similar to an SCP. As previously mentioned, you can attach it to the root of your organization, to an OU, or to specific AWS accounts within your organization.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/09/attach-a-policy.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/09/attach-a-policy.png\" alt=\"attaching a policy\" width=\"963\" height=\"505\" /></a></p> \n<p>After the RCP is attached, access requests to affected AWS resources must comply with the RCP restrictions. We recommend that you thoroughly test the impact that the RCP has on resources in your accounts before enforcing it at scale. You can begin by attaching RCPs to individual test accounts or test OUs.</p> \n<p><strong><span>Seeing it in action</span><br /> </strong>I have now created and attached my RCP, so I’m ready to see it in practice! Let’s assume that a developer attached a resource-based policy to an S3 bucket in our organization and they explicitly gave access to identities in an external account:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/09/bucket-policy-with-external-account-id.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/09/bucket-policy-with-external-account-id.png\" alt=\"bucket policy with external account id\" width=\"1122\" height=\"599\" /></a></p> \n<p>RCPs do not prevent users from saving resource-based policies that are more permissive than the RCP allows. However, the RCP will be evaluated as part of the authorization process, as we’ve seen previously, so the request by external identities will be denied regardless.</p> \n<p>We can prove this by trying to access the bucket with this external account, this time from the AWS CLI:</p> \n<div> \n <pre><code>\n$ aws s3api get-object —bucket 123124ffeiufskdjfgbwer \\\n  --key sensitivefile.txt \\\n  --region us-east-1 local_file\n\nAn error occurred (AccessDenied) when calling the GetObject operation: Access Denied\n</code></pre> \n</div> \n<p><span><strong>Scaling the deployment of RCPs in your environment<br /> </strong></span>So far, we have seen how we can manage RCPs using the console. However, for large-scale control management you should look into configuring them as infrastructure as code and make sure they are integrated into your existing continuous integration and continuous delivery (CI/CD) pipelines and processes.</p> \n<p>If you use <a href=\"https://docs.aws.amazon.com/controltower/latest/userguide/getting-started-with-control-tower.html\">AWS Control Tower</a>, you can deploy RCP-based controls in addition to SCP-based controls. For instance, you can use AWS Control Tower to deploy an RCP similar to that we created in the preceding example which prevents external principals from accessing S3 buckets in our organization. This ensures that RCPs are consistently applied to resources in managed accounts, streamlining and centralizing access control governance at scale.</p> \n<p>Additionally, similar to SCPs, AWS Control Tower also supports drift detection for RCPs. If an RCP is modified or removed outside of AWS Control Tower, you will be notified of the drift and provided with steps for remediation.</p> \n<p><span><strong>Conclusion<br /> </strong></span>Resource control policies (RCPs) oﬀer centralized management over the maximum permissions available to AWS resources in your organization. Along with SCPs, RCPs help you to centrally establish a <a href=\"https://aws.amazon.com/identity/data-perimeters-on-aws/\">data perimeter</a> across your AWS environment and prevent unintended access at scale. SCPs and RCPs are independent controls that allow you to achieve a distinct set of security objectives. You can choose to enable only SCPs or RCPs, or use both policy types together to establish a comprehensive security baseline as part of the defense-in-depth security model.</p> \n<p>To learn more, see Resource control policies (RCPs) in the <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_rcps.html\">AWS Organizations User Guide</a>.</p> \n<p><a href=\"https://www.linkedin.com/in/codingmatheus/\">Matheus Guimaraes | @codingmatheus</a></p>","author":"Matheus Guimaraes","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"a52dd503101514d6501f534f7a0b81c942ef168b0a95490b9c30dc97641deb17","category":"Tech"}