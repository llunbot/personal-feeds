{"title":"★ WebKit Adds Support for ‘text-wrap: pretty’, Now Shipping in Safari Technology Preview","link":"https://daringfireball.net/2025/04/webkit_textwrap_pretty","date":1744240265000,"content":"\n<p>Jen Simmons, writing on the WebKit blog, “<a href=\"https://webkit.org/blog/16547/better-typography-with-text-wrap-pretty/\">Better Typography With text-wrap pretty</a>”:</p>\n\n<blockquote>\n  <p>For over 30 years, the web had only one technique for determining\nwhere to wrap text.</p>\n\n<p>The browser starts with the first line of text, and lays out each\nword or syllable, one after another until it runs out of room. As\nsoon as it has no more space to fit another word/syllable, it\nwraps to the next line (if <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap-mode\">wrapping</a> is allowed). Then it\nstarts on the next line, fitting all the content it can… then\nwhen it runs out of room, it wraps… and starts working on the\nnext line.</p>\n\n<p>It’s always thinking about only one line at a time. It wraps\nwhenever it needs, after it’s fit the maximum amount of content\non the previous line. If hyphenation is turned on, it will\nhyphenate whatever word is last on the line, at whatever point\nleaves as much of the word on the previous line as possible.\nNothing else is taken into consideration — which is why text on\nthe web has bad rag, rivers, short last lines, and hyphenation\nthat makes no sense.</p>\n\n<p>This is not required by the fact that text is laid out by a\ncomputer. For decades, software like Adobe InDesign and LaTeX has\nevaluated multiple lines of text at a time as they decide where to\nend one line and begin the next. It’s just that the web didn’t use\na multiline algorithm. Until now.</p>\n\n<p>We are excited to bring this capability to the web for the first\ntime, in Safari Technology Preview 216.</p>\n</blockquote>\n\n<p>I’ve turned this on here at Daring Fireball, at least as an experiment. (Look at me, fast adopter of novel CSS features.) I have mixed feelings about the results. Here are saved PDFs showing the rendering of my “<a href=\"https://daringfireball.net/2025/04/how_many_iphones_can_fit_on_a_freight_plane\">How Many New iPhones Can Fit on a Freight Plane?</a>” article from earlier today: <a href=\"https://daringfireball.net/misc/2025/04/df-iphones-on-plane-textwrap-auto.pdf\">first with traditional <code>text-wrap: auto</code></a> line wrapping, and <a href=\"https://daringfireball.net/misc/2025/04/df-iphones-on-plane-textwrap-pretty.pdf\">second with WebKit’s new <code>text-wrap: pretty</code></a> in <a href=\"https://developer.apple.com/safari/technology-preview/\">STP</a> 216. Looking at each paragraph by itself, there’s no question this new layout algorithm is, well, prettier. The problem I see is going from one paragraph to another. Within a paragraph, WebKit’s new <code>pretty</code> wrapping definitely makes lines a more uniform width. But in some cases it so narrows an entire paragraph that it makes going from one paragraph to the next jarring. Line-to-line the new algorithm looks better, but paragraph-to-paragraph I think it looks worse.</p>\n\n<p>One specific example, from <a href=\"https://daringfireball.net/2025/03/something_is_rotten_in_the_state_of_cupertino\">my longest recent article</a>. First, with the old <code>text-wrap: auto</code>:</p>\n\n<p><a href=\"https://daringfireball.net/misc/2025/04/df-something-rotten-textwrap-auto.png\">\n  <img src=\"https://daringfireball.net/misc/2025/04/df-something-rotten-textwrap-auto.png\" alt=\"A screenshot from a recent Daring Fireball article, showing a list of 4 items.\" width=\"500\" /></a></p>\n\n<p>Here’s that same list with the new <code>text-wrap: pretty</code> in STP 216:</p>\n\n<p><a href=\"https://daringfireball.net/misc/2025/04/df-something-rotten-textwrap-pretty.png\">\n  <img src=\"https://daringfireball.net/misc/2025/04/df-something-rotten-textwrap-pretty.png\" alt=\"A screenshot of the same section from the same recent article as the previous screenshot, but in this one, one of the list item paragraphs is noticeably wider than the others.\" width=\"500\" /></a></p>\n\n<p>With the new <code>text-wrap: pretty</code>, the entire paragraph for the first list item is noticeably wider than the subsequent ones (and noticeably wider than the one preceding the list). To me, there’s so much disparity between paragraph widths that it’s distracting, even though each paragraph, taken on its own, looks better. But you don’t take paragraphs on their own when reading.</p>\n\n<p>I suspect (informed by toying with <a href=\"https://codepen.io/jensimmons/full/xxvoqNM\">Simmons’s fun interactive demo page</a> using STP 216) that this initial WebKit <code>text-wrap: pretty</code> layout algorithm works better with wider column widths than are currently specified on Daring Fireball. With a little more width to play with, there seems to be less back-and-forth change from paragraph to paragraph.</p>\n\n<p>So, for my purposes, this might be yet another improvement that will need to wait for the long-promised-but-who-knows-when-it-might-actually-happen-but-I-swear-I-think-about-it-quite-a-bit-and-a-few-years-ago-even-had-something-in-motion-but-then-let-the-project-drop layout modernization here. But, even with a nice responsive design, column widths on phones are inherently narrow, so I think this algorithm ought to be tweaked to render more consistent paragraph widths in narrow-ish columns.</p>\n\n<p>But I think it’s a good start, and I couldn’t be happier that the WebKit team is even tackling the problem at all. As Simmons notes, line-wrapping layout in web browsers has, until now, been very crude — and the web has been around a long time.</p>\n\n\n\n    ","author":"John Gruber","siteTitle":"Daring Fireball","siteHash":"fc569638025dadf22a867470f8215f38855cf50e975782a6c989909474292a36","entryHash":"5615a975f2ec63439f46c3cb7253db50cb9b42e5c83dd0fb06c9aca394aee2c3","category":"Tech"}