{"title":"Automate Consul Agent Security with Auto-Config","link":"https://www.hashicorp.com/blog/automate-consul-agent-security-with-auto-config","date":1631116800000,"content":"<p><a href=\"https://www.consul.io/\">HashiCorp Consul</a> includes several built-in security features that protect against eavesdropping, tampering, and spoofings, such as access control lists (ACLs), TLS encryption, and gossip encryption. These security features require configuration on the server cluster as well as each client. This includes configurations for various properties including secure generation and distribution.</p>\n<p>Configuring these security features can be a challenge for many teams. As a result, Consul engineering created the <code>auto-config</code> method for Consul. <code>auto-config</code> is a highly scalable method used to distribute secure properties and other configuration settings to all Consul agents in a datacenter, which greatly reduces the technical overhead associated with securing an environment.</p>\n<p>This article gives an overview on how the <code>auto-config</code> feature functions and as a result, reduces manual security configuration overhead throughout a Consul datacenter.</p>\n<h2><a href=\"#using-json-web-tokens-to-propagate-security-config\">»</a><a></a>Using JSON Web Tokens to Propagate Security Config</h2>\n<p>Consul clients configured with <code>auto-config</code> use JSON web tokens (JWTs) to securely retrieve gossip encryption keys, TLS certificates, ACL settings, and other configuration properties from Consul servers. JSON web tokens are an open, industry-standard method for representing claims securely between two parties. With <code>auto-config</code>, the Consul server cluster acts as the JWT authorizer for Consul clients. The Consul server cluster can authorize JWTs using an OIDC URL endpoint, PEM-encoded public certificates, or a JWKS URL endpoint.</p>\n<p>For generating and validating secure JWTs, we recommend using a production-grade tool such as <a href=\"https://www.vaultproject.io/\">HashiCorp Vault</a>. With Vault’s identity engine, an authorized user/application can request a token that encapsulates identity information for their associated entity. These tokens are signed JWTs following the <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IDToken\">OIDC ID token</a> structure. The public keys used to authenticate the tokens are published by Vault on an unauthenticated endpoint following OIDC discovery and JWKS conventions, which are directly usable for <code>auto-config</code> functionality.</p>\n<p>To learn more about JSON web tokens, feel free to explore the <a href=\"https://jwt.io/introduction\">jwt.io documentation</a>.</p>\n<h2><a href=\"#the-auto-config-workflow\">»</a><a></a>The <code>auto-config</code> Workflow</h2>\n<p>The <code>auto-config</code> feature is simple to set up and utilize. First, your Consul servers must be configured to act as a JWT authorizer. The authorization service is used to validate client requests for security settings.</p>\n<p>Next, you must generate a JWT using Vault or another third-party, production-grade secrets management platform. The JWT should contain claims data such as the issuer (<code>iss</code>), audience (<code>aud</code>), subject (<code>sub</code>), and expiration time (<code>exp</code>).</p>\n<p>The JWT value can then be set in the Consul client <code>auto-config</code> configuration file. When the Consul agent is restarted, and the configuration is read, the Consul client will submit an <code>auto-config</code> request to the Consul server cluster for validation.</p>\n<p>Once the Consul server cluster successfully validates the Consul client <code>auto-config</code> request, it will send all respective security settings to the Consul client. Upon receiving these security settings, the Consul client will merge this information into any existing client settings.</p>\n<h2><a href=\"#next-steps\">»</a><a></a>Next Steps</h2>\n<p>To get started, check out the <a href=\"https://learn.hashicorp.com/tutorials/consul/docker-compose-auto-config\">Automate Consul Agent Security with <code>auto-config</code> tutorial</a>. This tutorial will guide you through deploying a Consul datacenter with Docker and utilizing <code>auto-config</code> to secure the environment. Docker is light on system resources, easy to deploy on any operating system, and highly customizable. While this tutorial uses elements that are not suitable for large-scale production environments, it will teach you the core concepts for deploying and interacting with a secure Consul datacenter using <code>auto-config</code>.</p>\n<p>Feel free to also explore the <a href=\"https://learn.hashicorp.com/tutorials/consul/reference-architecture\">Consul Reference Architecture</a> for Consul best practices and the <a href=\"https://docs.docker.com/\">Docker documentation</a> for Docker best practices.</p>\n<p><em>For even more news about our latest tutorials added to HashiCorp Learn, follow @HashiCorp on Twitter.</em></p>","author":"Eddie Rowe","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"b12236cb3aae029c04fa23639cb718b7dd23984905064430e7c6084e249ab286","category":"Tech"}