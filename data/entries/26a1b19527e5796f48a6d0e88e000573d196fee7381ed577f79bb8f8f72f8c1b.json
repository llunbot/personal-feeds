{"title":"Azure Managed Identities with the HashiCorp Stack: Part 3","link":"https://www.hashicorp.com/blog/azure-managed-identities-with-the-hashicorp-stack-part-3","date":1629820800000,"content":"<p>Throughout this blog series, we have explored Microsoft Azure’s <a href=\"https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview\">managed identity feature</a> and looked at how <a href=\"https://www.hashicorp.com/blog/azure-managed-identities-with-the-hashicorp-stack-part-1\">Packer, Terraform</a> and <a href=\"https://www.hashicorp.com/blog/azure-managed-identities-with-the-hashicorp-stack-part-2\">Vault</a> work in harmony with it.  In this blog post, we’ll discuss how Consul and Nomad can make use of Azure managed identities.</p>\n<p><a href=\"https://www.consul.io/\">HashiCorp Consul</a> offers service mesh capability to facilitate service-to-service communication. Service mesh primarily solves problems with distributed software architecture patterns, such as microservices.  A microservices architecture <a href=\"https://martinfowler.com/articles/microservices.html.\">decouples</a> different application components into individual deployable units, sometimes called services.  You can package services into containers, binaries, or executables.</p>\n<p>Once packaged, you need an orchestrator to schedule and run these services.  Orchestrators like <a href=\"https://kubernetes.io/docs/tutorials/kubernetes-basics/\">Kubernetes</a> and <a href=\"https://learn.hashicorp.com/collections/nomad/get-started\">Nomad</a> can place your workloads on infrastructure to run them for you.  As orchestrator deployments scale and grow in complexity, you will have clusters deployed in different datacenters across regions on different networks.</p>\n<h2><a href=\"#multi-datacenter-challenges\">»</a><a></a>Multi-Datacenter Challenges</h2>\n<p>Services often need to communicate with each other. For example, an API service may need to communicate with a payment service.  In this instance, the API service will need to be able to reach the payment service.  In situations where the API service has been scheduled in one datacenter and the payment service in another, they will need to know how to reach each other on different networks.</p><img src=\"https://www.datocms-assets.com/2885/1629489847-nomad-datacenter.png\" /><p>The short life cycle of containers adds to the operational complexity of service-to-service communication across regions. An orchestrator reschedules the workload when a container stops, potentially issuing the workload a different IP address and port.  Each time the workload reschedules, you must reconfigure connectivity details across dependent services, firewalls, and other network resources.</p>\n<p>Service mesh operates at the infrastructure layer to reduce the complexity of network automation for services. Services register to Consul’s control plane, which makes it the source of truth for up-to-date, real-time connectivity details for each service. With this information, Consul can easily broker communication between services.</p>\n<p>Consul plays a critical role as a service broker that can affect application availability and uptime.  Consul itself must be highly available and ready to broker communications all the time. To achieve this, Consul has the concept of clustering, whereby we deploy up to 7 nodes in a cluster to ensure availability in a failure scenario.</p>\n<h2><a href=\"#cloud-auto-join\">»</a><a></a>Cloud Auto-Join</h2>\n<p>The Consul configuration file contains a <a href=\"https://www.consul.io/docs/agent/options#_retry_join\"><code>retry_join</code> stanza</a>, where you specify the IP address or DNS name of other nodes in the cluster.</p><pre><code>retry_join = [\n    \"172.16.0.11\",\n    “172.16.0.12”,\n    “172.16.0.13”\n]</code></pre><p>Rather than statically define the IP address or DNS name of other nodes in the cluster, you can use a Consul feature called <a href=\"https://www.consul.io/docs/install/cloud-auto-join\">cloud auto-join</a> to discover nodes. Cloud auto-join reads the key-value pairs inside tags of network interface cards (NICs) and automatically joins any instances with these NICs containing the pre-specified tags to the cluster.</p>\n<p>For Consul nodes in Azure, we need to configure service principal details in order for Consul to be able to authenticate against Azure and read the resource tags. Similar to the problem discussed in the <a href=\"https://www.hashicorp.com/blog/azure-managed-identities-with-the-hashicorp-stack-part-2\">previous blog</a> post with Vault, the configuration may expose service principal details. Consul can use managed identities to authenticate against Azure in order to read the tags and eliminate the need for hard-coded service principal information.</p>\n<p>When you use a managed identity, you set the <a href=\"https://www.consul.io/docs/install/cloud-auto-join#microsoft-azure\"><code>retry_join</code> stanza to the Azure provider</a>, instance tag, and subscription ID.</p><pre><code>{\n  \"retry_join\": [\n    \"provider=azure tag_key=... tag_value=...subscription_id=... \"\n  ]\n}</code></pre><p>The subscription ID can also be set using the <code>ARM_SUBSCRIPTION_ID</code> environment variable.</p>\n<p>Nomad also has the same functionality with cloud auto-join and can also take advantage of managed identities. You can configure cloud auto-join in <a href=\"https://learn.hashicorp.com/tutorials/nomad/clustering\">the Nomad configuration file</a>.</p>\n<h2><a href=\"#conclusion\">»</a><a></a>Conclusion</h2>\n<p>In this blog post, we explored how Consul and Nomad can use Azure managed identities to dynamically join a cluster. We also looked at some more fundamental concepts about service mesh and the problems it solves.</p>\n<p>For more information on how to use Azure managed identities with Terraform and Packer, review <a href=\"https://www.hashicorp.com/blog/azure-managed-identities-with-the-hashicorp-stack-part-1\">the first blog of this series</a>. You can learn more about managed identities with Vault in the <a href=\"https://www.hashicorp.com/blog/azure-managed-identities-with-the-hashicorp-stack-part-2\">second part of this series</a>.</p>\n<p>Reach out to us with any questions on our <a href=\"http://discuss.hashicorp.com\">forum</a>.</p>","author":"Rob Barnes","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"26a1b19527e5796f48a6d0e88e000573d196fee7381ed577f79bb8f8f72f8c1b","category":"Tech"}