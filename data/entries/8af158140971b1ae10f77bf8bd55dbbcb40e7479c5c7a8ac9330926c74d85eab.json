{"title":"AWS CodeArtifact adds support for Rust packages with Cargo","link":"https://aws.amazon.com/blogs/aws/aws-codeartifact-adds-support-for-rust-packages-with-cargo/","date":1718918651000,"content":"<p>Starting today, Rust developers can store and access their libraries (known as <a href=\"https://doc.rust-lang.org/rust-by-example/crates.html\">crates</a> in Rust’s world) on <a href=\"https://aws.amazon.com/codeartifact\">AWS CodeArtifact</a>.</p> \n<p>Modern software development relies heavily on pre-written code packages to accelerate development. These packages, which can number in the hundreds for a single application, tackle common programming tasks and can be created internally or obtained from external sources. While these packages significantly help to speed up development, their use introduces two main challenges for organizations: legal and security concerns.</p> \n<p>On the legal side, organizations need to ensure they have compatible licenses for these third-party packages and that they don’t infringe on intellectual property rights. Security is another risk, as vulnerabilities in these packages could be exploited to compromise an application. A known tactic, the supply chain attack, involves injecting vulnerabilities into popular open source projects.</p> \n<p>To address these challenges, organizations can set up private package repositories. These repositories store pre-approved packages vetted by security and legal teams, limiting the risk of legal or security exposure. This is where CodeArtifact enters.</p> \n<p><a href=\"https://aws.amazon.com/codeartifact\">AWS CodeArtifact</a> is a fully managed artifact repository service designed to securely store, publish, and share software packages used in application development. It supports popular package managers and formats such as <a href=\"https://www.npmjs.com/\">npm</a>, <a href=\"https://pypi.org/project/pip/\">PyPI</a>, <a href=\"https://maven.apache.org/\">Maven</a>, <a href=\"https://www.nuget.org/\">NuGet</a>, <a href=\"https://aws.amazon.com/blogs/aws/new-add-your-swift-packages-to-aws-codeartifact/\">SwiftPM</a>, and <a href=\"https://aws.amazon.com/blogs/aws/add-your-ruby-gems-to-aws-codeartifact/\">Rubygem</a>, enabling easy integration into existing development workflows. It helps enhance security through controlled access and facilitates collaboration across teams. CodeArtifact helps maintain a consistent, secure, and efficient software development lifecycle by integrating with <a href=\"https://aws.amazon.com/iam/\">AWS Identity and Access Management (IAM)</a> and continuous integration and continuous deployment (CI/CD) tools.</p> \n<p>For the eighth year in a row, <a href=\"https://github.com/rust-lang\">Rust</a> has topped the chart as “the most desired programming language” in <a href=\"https://survey.stackoverflow.co/2023/#section-admired-and-desired-programming-scripting-and-markup-languages\">Stack Overflow’s annual developer survey</a>, with more than 80 percent of developers reporting that they’d like to use the language again next year. Rust’s growing popularity stems from its ability to combine the performance and memory safety of systems languages such as C++ with features that makes writing reliable, concurrent code easier. This, along with a rich ecosystem and a strong focus on community collaboration, makes Rust an attractive option for developers working on high-performance systems and applications.</p> \n<p>Rust developers rely on <a href=\"https://doc.rust-lang.org/book/ch01-03-hello-cargo.html\">Cargo</a>, the official package manager, to manage package dependencies. Cargo simplifies the process of finding, downloading, and integrating pre-written crates (libraries) into their projects. This not only saves time by eliminating manual dependency management, but also ensures compatibility and security. Cargo’s robust dependency resolution system tackles potential conflicts between different crate versions, and because many crates come from a curated registry, developers can be more confident about the code’s quality and safety. This focus on efficiency and reliability makes Cargo an essential tool for building Rust applications.</p> \n<p><span><strong>Let’s create a CodeArtifact repository for my crates<br /> </strong></span>In this demo, I use the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a> and <a href=\"https://console.aws.amazon.com\">AWS Management Console</a> to create two repositories. I configure the first repository to download public packages from the official <a href=\"https://crates.io/\">crates.io</a> repository. I configure the second repository to download packages from the first one only. This dual repository configuration is the recommended way to manage repositories and external connections, see <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/external-connection.html#adding-an-external-connection\">the CodeArtifact documentation for managing external connections</a>. To quote the documentation:</p> \n<blockquote>\n <p>“It is recommended to have one repository per domain with an external connection to a given public repository. To connect other repositories to the public repository, add the repository with the external connection as an upstream to them.”</p>\n</blockquote> \n<p>I sketched this diagram to illustrate the setup.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/06/12/code-artifact-cargo-v01.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/06/12/code-artifact-cargo-v01.png\" alt=\"Code Artifact repositories for cargo\" width=\"800\" height=\"450\" /></a></p> \n<p>Domains and repositories can be created either from the command line or the console. I choose the command line. In shell terminal, I type:</p> \n<pre><code>CODEARTIFACT_DOMAIN=stormacq-test\n\n# Create an internal-facing repository: crates-io-store\naws codeartifact create-repository \\\n   --domain $CODEARTIFACT_DOMAIN   \\\n   --repository crates-io-store\n\n# Associate the internal-facing repository crates-io-store to the public crates-io\naws codeartifact associate-external-connection \\\n--domain $CODEARTIFACT_DOMAIN \\\n--repository crates-io-store  \\\n--external-connection public:crates-io\n\n# Create a second internal-facing repository: cargo-repo \n# and connect it to upstream crates-io-store just created\naws codeartifact create-repository \\\n   --domain $CODEARTIFACT_DOMAIN   \\\n   --repository cargo-repo         \\\n   --upstreams '{\"repositoryName\":\"crates-io-store\"}'\t </code></pre> \n<p>Next, as a developer, I want my local machine to fetch crates from the internal repository (<code>cargo-repo</code>) I just created.</p> \n<p>I configure <code>cargo</code> to fetch libraries from the internal repository instead of the public crates.io. To do so, I create a <code>config.toml</code> file to point to CodeArtifact internal repository.</p> \n<pre><code># First, I retrieve the URI of the repo\nREPO_ENDPOINT=$(aws codeartifact get-repository-endpoint \\\n                           --domain $CODEARTIFACT_DOMAIN \\ \n                           --repository cargo-repo       \\\n                           --format cargo                \\\n                           --output text)\n\n# at this stage, REPO_ENDPOINT is https://stormacq-test-012345678912.d.codeartifact.us-west-2.amazonaws.com/cargo/cargo-repo/\n\n# Next, I create the cargo config file\ncat &lt;&lt; EOF &gt; ~/.cargo/config.toml\n[registries.cargo-repo]\nindex = \"sparse+$REPO_ENDPOINT\"\ncredential-provider = \"cargo:token-from-stdout aws codeartifact get-authorization-token --domain $CODEARTIFACT_DOMAIN --query authorizationToken --output text\"\n\n[registry]\ndefault = \"cargo-repo\"\n\n[source.crates-io]\nreplace-with = \"cargo-repo\"\nEOF\n</code></pre> \n<p>Note that the two environment variables are replaced when I create the config file. <code>cargo</code> doesn’t support environment variables in its configuration.</p> \n<p>From now on, on this machine, every time I invoke <code>cargo</code> to add a crate, <code>cargo</code> will obtain an authorization token from CodeArtifact to communicate with the internal <code>cargo-repo</code> repository. I must have <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/security_iam_id-based-policy-examples.html#managed-policies\">IAM privileges</a> to call the <code>get-authorization-token</code> CodeArtifact API in addition to permissions for read/publish package according to the command I use. If you’re running this setup from a build machine for your continuous integration (CI) pipeline, your build machine must have proper permissions to do so.</p> \n<p>I can now test this setup and add a crate to my local project.</p> \n<pre><code>$ cargo add regex\n    Updating `codeartifact` index\n      Adding regex v1.10.4 to dependencies\n             Features:\n             + perf\n             + perf-backtrack\n             + perf-cache\n             + perf-dfa\n             + perf-inline\n             + perf-literal\n             + perf-onepass\n             + std\n             + unicode\n             + unicode-age\n             + unicode-bool\n             + unicode-case\n             + unicode-gencat\n             + unicode-perl\n             + unicode-script\n             + unicode-segment\n             - logging\n             - pattern\n             - perf-dfa-full\n             - unstable\n             - use_std\n    Updating `cargo-repo` index\n\n# Build the project to trigger the download of the crate\n$ cargo build\n  Downloaded memchr v2.7.2 (registry `cargo-repo`)\n  Downloaded regex-syntax v0.8.3 (registry `cargo-repo`)\n  Downloaded regex v1.10.4 (registry `cargo-repo`)\n  Downloaded aho-corasick v1.1.3 (registry `cargo-repo`)\n  Downloaded regex-automata v0.4.6 (registry `cargo-repo`)\n  Downloaded 5 crates (1.5 MB) in 1.99s\n   Compiling memchr v2.7.2 (registry `cargo-repo`)\n   Compiling regex-syntax v0.8.3 (registry `cargo-repo`)\n   Compiling aho-corasick v1.1.3 (registry `cargo-repo`)\n   Compiling regex-automata v0.4.6 (registry `cargo-repo`)\n   Compiling regex v1.10.4 (registry `cargo-repo`)\n   Compiling hello_world v0.1.0 (/home/ec2-user/hello_world)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 16.60s</code></pre> \n<p>I can verify CodeArtifact downloaded the crate and its dependencies from the upstream public repository. I connect to the CodeArtifact console and check the list of packages available in either repository I created. At this stage, the package list should be identical in the two repositories.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/06/12/2024-06-09_07-48-08.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/06/12/2024-06-09_07-48-08.png\" alt=\"CodeArtifact cargo packages list\" width=\"2094\" height=\"1336\" /></a></p> \n<p><span><strong>Publish a private package to the repository<br /> </strong></span>Now that I know the upstream link works as intended, let’s publish a private package to my <code>cargo-repo</code> repository to make it available to other teams in my organization.</p> \n<p>To do so, I use the standard Rust tool <code>cargo</code>, just like usual. Before doing so, I add and commit the project files to the <code>git</code>repository.</p> \n<pre><code>$  git add . &amp;&amp; git commit -m \"initial commit\"\n 5 files changed, 1855 insertions(+)\ncreate mode 100644 .gitignore\ncreate mode 100644 Cargo.lock\ncreate mode 100644 Cargo.toml\ncreate mode 100644 commands.sh\ncreate mode 100644 src/main.rs\n\n$  cargo publish \n    Updating `codeartifact` index\n   Packaging hello_world v0.1.0 (/home/ec2-user/hello_world)\n    Updating crates.io index\n    Updating `codeartifact` index\n   Verifying hello_world v0.1.0 (/home/ec2-user/hello_world)\n   Compiling libc v0.2.155\n... (redacted for brevity) ....\n   Compiling hello_world v0.1.0 (/home/ec2-user/hello_world/target/package/hello_world-0.1.0)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1m 03s\n    Packaged 5 files, 44.1KiB (11.5KiB compressed)\n   Uploading hello_world v0.1.0 (/home/ec2-user/hello_world)\n    Uploaded hello_world v0.1.0 to registry `cargo-repo`\nnote: waiting for `hello_world v0.1.0` to be available at registry `cargo-repo`.\nYou may press ctrl-c to skip waiting; the crate should be available shortly.\n   Published hello_world v0.1.0 at registry `cargo-repo`</code></pre> \n<p>Lastly, I use the console to verify the <code>hello_world</code> crate is now available in the <code>cargo-repo</code>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/06/12/2024-06-09_07-52-10.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/06/12/2024-06-09_07-52-10.png\" alt=\"CodeArtifact cargo package hello world\" width=\"800\" height=\"543\" /></a></p> \n<p><span><strong>Pricing and availability<br /> </strong></span>You can now store your Rust libraries in <a href=\"https://aws.amazon.com/codeartifact/faq/\">the 13 AWS Regions where CodeArtifact is available</a>. There is no additional cost for Rust packages. The three billing dimensions are the storage (measured in GB per month), the number of requests, and the data transfer out to the internet or to other AWS Regions. Data transfer to AWS services in the same Region is not charged, meaning you can run your continuous integration and delivery (CI/CD) jobs on <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> or <a href=\"https://aws.amazon.com/codebuild/\">AWS CodeBuild</a>, for example, without incurring a charge for the CodeArtifact data transfer. As usual, <a href=\"https://aws.amazon.com/codeartifact/pricing/\">the pricing page</a> has the details.</p> \n<p>Now go build your Rust applications and upload your private crates to CodeArtifact!</p> \n<p><a href=\"https://twitter.com/sebsto\">-- seb</a></p>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"8af158140971b1ae10f77bf8bd55dbbcb40e7479c5c7a8ac9330926c74d85eab","category":"Tech"}