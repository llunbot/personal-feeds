{"title":"Mitigating risk at the root: Platform engineering is a humanistic approach that works","link":"https://www.hashicorp.com/blog/mitigating-risk-at-root-platform-engineering-humanistic-approach-that-works","date":1737392400000,"content":"<p>Human error is the root cause of the majority of security incidents and data breaches — 68% of a record-high 10,000+ breaches globally, according to<a href=\"https://www.verizon.com/business/resources/reports/dbir/?cmp=knc:ggl:ac:ent:ea:na:8888855284_ds_cid_71700000082350639_ds_agid_58700008639394490&amp;utm_term=data%2520breach&amp;utm_medium=cpc&amp;utm_source=google&amp;utm_campaign=GGL_NB_Security_Phrase&amp;utm_content=Enterprise&amp;gad_source=1&amp;gclid=CjwKCAiA-Oi7BhA1EiwA2rIu2xaDExAvm_DkrsGqqAQsZtvN-06nNt91II0FlUx-Pw2h2Z3NVDYdfBoCHrUQAvD_BwE&amp;gclsrc=aw.ds\"> Verizon’s 2024 Data Breach Investigation Report</a>. Human error runs the gamut from misconfigurations at cloud resource inception, to manual errors in secrets management, to being tricked by targeted phishing attacks. Fortunately, applying a platform engineering approach to the vast cloud estates modern enterprises rely on can dramatically reduce related human error — and cloud risk — at its root.</p>\n\n<h2>Platform engineering and IDPs</h2>\n\n<p><a href=\"https://www.hashicorp.com/resources/what-is-a-platform-team-and-why-do-we-need-them\">Platform engineering</a> enables a cohesive, highly secure, and efficient enterprise cloud operating model. It is the discipline of designing and building tools and workflows that give software engineering teams self-service access to cloud resources in a secure and compliant manner. </p>\n\n<p>Conceptually, platform engineering is a highly scalable superset of DevOps methodologies designed to break down the barriers between development and operations teams. Its a practice that is especially critical at organizations that have a long tradition of operating as siloes. </p>\n\n<p>Platform teams are typically focused on building an internal developer platform (IDP), which consists of tools and workflows that blend security, development, and operations components. An IDP can be broken down into <a href=\"https://www.hashicorp.com/on-demand/the-six-pillars-of-platform-engineering\">six key functions</a>: </p>\n\n<ol>\n<li>Security </li>\n<li>Pipeline </li>\n<li>Provisioning </li>\n<li>Connectivity </li>\n<li>Orchestration </li>\n<li>Observability</li>\n</ol>\n\n<p>The platform team aims to create a stable and scalable foundation for practices like DevOps. Properly executed, the IDP mitigates risk and improves efficiency in multiple ways: </p>\n\n<ol>\n<li><strong>Reduces human error and risk</strong> by driving consistency, streamlining developer workflows, and scaling compliance and security practices at scale through automation</li>\n<li>Supports improved software developer <strong>productivity</strong>, more frequent releases, better application <strong>stability</strong>, and <strong>lower costs</strong></li>\n<li><strong>Creates a single point of engagement</strong> for cybersecurity, software development, IT operations teams, and compliance.</li>\n</ol>\n\n<h2>IDPs and error reduction during cloud resource provisioning</h2>\n\n<p>Error reduction is the flashing-neon benefit of an IDP, with good reason. It is estimated that an American adult makes<a href=\"https://pmc.ncbi.nlm.nih.gov/articles/PMC6119549/\"> 35,000 decisions a day</a>, with most studies suggesting that the average person can effectively compare and choose between five to nine options simultaneously. The<a href=\"https://aws.amazon.com/servicecatalog/\"> AWS Service Catalog</a> offers well over 200 services, making it impossible to consider more than a handful of options when spinning up new cloud resources. Cloud resource provisioning is one of the key areas where an IDP shines.  Provisioning is a step where many configuration errors occur, creating the data breach vulnerabilities that cybercriminals most frequently exploit.</p>\n\n<h2>IDPs as a bridge between developers and security</h2>\n\n<p>An IDP can neutralize the <a href=\"https://www.hashicorp.com/blog/fix-the-developers-vs-security-conflict-by-shifting-further-left\">opposing goals between development and security teams</a>. Generally speaking, developers want to go fast and reduce cost; security teams want to reduce risk, which can be expensive and hinder developer speed. Organizations that don’t provide clear overarching goals of where and how these teams can meet in the middle create (and perpetuate) opposing cultures. </p>\n\n<p>Instead of continuing an environment in which developers barge ahead to procure and configure cloud resources, and security/operations teams are branded “the department of ‘no,’” platform teams deliver a more prescriptive approach that brings both parties into closer alignment. Because the IDP provides the structure for these teams to meet in the middle, all members can spend more time doing the work they do best. </p>\n\n<h3>How to “shift left” to systemically reduce risk</h3>\n\n<p><a href=\"https://aws.amazon.com/blogs/security/implement-an-early-feedback-loop-with-aws-developer-tools-to-shift-security-left/\">Shift left</a> is a strategy that puts testing,  vulnerability scans, and best practice templating in the earlier stages of software development. By shifting these tasks “left” to a point in the design, development, and pre-provisioning phases, software teams can prevent security issues or discover them earlier before they become more impactful in the final phases when the application and infrastructure are already built.  An IDP can implement a shift-left strategy by abstracting security, reliability, and compliance policies and best practices into: </p>\n\n<ul>\n<li>Golden images</li>\n<li>Golden modules</li>\n<li>Tests</li>\n<li>Checks</li>\n<li><a href=\"https://developer.hashicorp.com/sentinel/docs/concepts/policy-as-code\">Policy-as-code</a> gates </li>\n</ul>\n\n<p>This allows organizations to to enforce corporate development, security and operations policies in a repeatable and highly scalable way, without pushing developers into deeply technical territory. These guidelines are built into the way cloud resources are initiated, providing strong protection that is invisible to users.</p>\n\n<p>IDPs allow security and compliance organizations to insert a security plane into every developer workflow to be automatically consumed before deployment. Equally important, cloud resources originating through the IDP are more easily tracked, audited, and managed, allowing vulnerabilities to be detected and remediated faster.</p>\n\n<h3>Mitigate risk with an IDP now</h3>\n\n<p>HashiCorp believes that a successful platform engineering program starts with a conversation. We want to listen and learn about your organization’s story, its digital estate, and its larger ecosystem. What needs to change, and what does “good” look like? </p>\n\n<p>To start the conversation, <a href=\"https://www.hashicorp.com/contact\">get in touch</a>. For another look into internal development platforms, watch the video of my session at <a href=\"https://www.hashicorp.com/conferences/hashiconf\">HashiConf</a>,  <a href=\"https://www.hashicorp.com/conferences/hashiconf/agenda/10-15/measuring-the-impact-of-an-internal-development-platform\">Measuring the impact of an internal development platform</a>, and follow me on<a href=\"https://www.linkedin.com/in/sarah-polan/\"> LinkedIn</a>. </p>\n","author":"Sarah Polan","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"261aa2ab5a0ae66a54cdf43695d55aef89077ac266c77d5b0d7d431dd970b3fc","category":"Tech"}