{"title":"Nomad 1.8 adds exec2 task driver, support for Consul API gateway, and transparent proxy","link":"https://www.hashicorp.com/blog/nomad-1-8-adds-exec2-task-driver-support-consul-api-gateway-transparent-proxy","date":1716991200000,"content":"<p><a href=\"https://www.nomadproject.io/\">HashiCorp Nomad</a> is a simple and flexible orchestrator used to deploy and manage containers and non-containerized applications across multiple cloud, on-premises, and edge environments. It is widely adopted and used in production by organizations such as [Roblox] and(<a href=\"https://www.hashicorp.com/case-studies/roblox\">https://www.hashicorp.com/case-studies/roblox</a>) <a href=\"https://www.hashicorp.com/case-studies/q2-software\">Q2</a>. We are excited to announce that Nomad 1.8 is now generally available.</p>\n\n<p>Here’s what’s new in Nomad 1.8, Nomad’s first <a href=\"https://www.hashicorp.com/long-term-support\">LTS release</a>:</p>\n\n<ul>\n<li> <code>exec2</code> task driver (beta)</li>\n<li>Consul integration improvements: Consul API gateway, transparent proxy, and admin partitions</li>\n<li>A re-worked jobs page in the web UI with live updates</li>\n<li>Job descriptions in the web UI</li>\n<li>Time-based task execution (Enterprise)</li>\n<li>Support for specifying existing cgroups</li>\n<li>nomad-bench: A benchmarking framework for the core scheduler</li>\n<li>Sentinel policy management in the web UI (Enterprise)</li>\n<li>GitHub Actions for Nomad and Nomad Pack</li>\n</ul>\n\n<h2>Nomad Enterprise 1.8 LTS release</h2>\n\n<p>We are pleased to announce a Long-Term Support (LTS) release program for HashiCorp Nomad Enterprise, starting with Nomad 1.8. Going forward, the first major release of each calendar year will be an LTS release. LTS releases have the following benefits for Nomad operators: </p>\n\n<ul>\n<li><strong>Extended maintenance</strong>: Two years of critical fixes provided through minor releases</li>\n<li><strong>Efficient upgrades</strong>: Support for direct upgrades from one LTS release to the next, reducing major-version upgrade risk and improving operational efficiency</li>\n</ul>\n\n<p>LTS releases reduce operational overhead and risk by letting organizations receive critical fixes in minor releases without having to upgrade their major version more than once a year. Once you’ve upgraded to Nomad Enterprise 1.8, you will be running on a maintained LTS release that will allow you to easily upgrade to the next LTS major release when it's available. For more information, refer to <a href=\"https://www.hashicorp.com/long-term-support\">HashiCorp’s multi-product LTS statement</a>.</p>\n\n<h2>exec2 task driver (beta)</h2>\n\n<p>Nomad has always provided support for heterogeneous workloads. The Nomad <code>exec</code> task driver provided a simple and relatively easy way to run binary workloads in a sandboxed environment. Nomad 1.8 introduces a new <code>exec2</code> task driver beta release.</p>\n\n<p>Similar to the exec driver, the new exec2 driver is used to execute a command for a task. However, it offers a security model optimized for running “ordinary” processes with very short startup times and minimal overhead in terms of CPU, disk, and memory utilization. The <code>exec2</code> driver leverages kernel features such as the <a href=\"https://github.com/shoenig/go-landlock\">Landlock LSM</a>, <code>cgroups</code> v2, and the <a href=\"https://www.man7.org/linux/man-pages/man1/unshare.1.html\">unshare system utility</a>. Tasks are no longer required to use filesystem isolation based on <code>chroot</code> due to these enhancements, which enhances security and improves performance for the Nomad operator.</p>\n\n<p>Below is a task that uses the new <code>exec2</code> driver, which must be <a href=\"https://developer.hashicorp.com/nomad/plugins/v1.8.x/drivers/exec2#installation\">installed</a> on the Nomad client host prior to executing the task:</p>\n<pre><code>job \"http\" {\n group \"web\" {\n   task \"python\" {\n     driver = \"exec2\"\n     config {\n       command = \"python3\"\n       args    = [\"-m\", \"http.server\", \"8080\", \"--directory\", \"${NOMAD_TASK_DIR}\"]\n       unveil  = [\"r:/etc/mime.types\"]\n     }\n   }\n }\n}</code></pre><h2>Consul integration improvements</h2>\n\n<p><a href=\"https://www.consul.io/\">HashiCorp Consul</a> is a service networking platform that provides service discovery for workloads, <a href=\"https://developer.hashicorp.com/consul/docs/concepts/service-mesh\">service mesh</a> for secure service-to-service communication, and dynamic application configuration for workloads. Nomad is frequently deployed together with Consul for a variety of <a href=\"https://www.hashicorp.com/resources/how-we-used-the-hashistack-to-transform-the-world-of-roblox\">large-scale use cases</a>, and has long supported Consul service mesh for securing service-to-service traffic. With Nomad 1.8, we introduce official support for <a href=\"https://developer.hashicorp.com/consul/docs/connect/gateways/api-gateway\">Consul API gateway</a>, <a href=\"https://developer.hashicorp.com/consul/docs/k8s/connect/transparent-proxy\">transparent proxy</a> on service mesh, and <a href=\"https://developer.hashicorp.com/consul/docs/enterprise/admin-partitions\">admin partitions</a> for multi-tenancy with Consul Enterprise. </p>\n\n<h3>Consul API gateway</h3>\n\n<p>Consul API gateway is a dedicated ingress solution for intelligently routing traffic to applications on your Consul service mesh. It provides a consistent method for handling inbound requests to the service mesh from external clients. Consul API gateway routes any API requests from clients across various protocols (TCP/HTTP) to the appropriate backend service and also performs duties such as load balancing to backend service instances, modifying HTTP headers for requests, and splitting traffic between multiple services based on weighted ratios.</p>\n\n<p>Although Consul has supported VM runtimes since Consul 1.15, running API gateway on Nomad and routing traffic to services on Nomad was not officially supported. Nomad 1.8 provides a <a href=\"https://github.com/hashicorp-guides/consul-api-gateway-on-nomad\">prescriptive job specification</a> along with a supporting <a href=\"https://developer.hashicorp.com/nomad/tutorials/integrate-consul/deploy-api-gateway-on-nomad\">tutorial</a> on how to securely deploy Consul API gateway on Nomad.</p>\n\n<p>Below is an example of running Consul API gateway as a Nomad job when using the provided example job spec. Notably, the example leverages HCL2 variables to specify the latest versions of Consul and Envoy.</p>\n<pre><code>nomad job run \\\n    -var=\"consul_image=hashicorp/consul:1.18.2\" \\\n    -var=\"envoy_image=hashicorp/envoy:1.28.3\" \\\n    -var=\"namespace=consul\"\n    ./api-gateway.nomad.hcl</code></pre><p>Once Consul API gateway is running on Nomad, you can define routes using Consul configuration entries to bind traffic-routing rules for requests to backend services on the mesh. The example below creates a new HTTP routing rule that routes requests with an HTTP prefix path of <code>/hello</code> to a backend service on the mesh named <code>hello-app</code>: </p>\n<pre><code>Kind = \"http-route\"\nName = \"my-http-route\"\n\n// Rules define how requests will be routed\nRules = [\n  {\n    Matches = [\n      {\n        Path = {\n          Match = \"prefix\"\n          Value = \"/hello\"\n        }\n      }\n    ]\n    Services = [\n      {\n        Name = \"hello-app\"\n      }\n    ]\n  }\n]\n\nParents = [\n  {\n    Kind        = \"api-gateway\"\n    Name        = \"my-api-gateway\"\n    SectionName = \"my-http-listener\"\n  }\n]</code></pre><p>For more information on using Consul API gateway with Nomad, see the <a href=\"https://developer.hashicorp.com/nomad/tutorials/integrate-consul/deploy-api-gateway-on-nomad\">Deploy a Consul API Gateway on Nomad</a> tutorial.</p>\n\n<h3>Transparent proxy</h3>\n\n<p>Transparent proxy is a key service mesh feature that lets applications communicate through the service mesh without modifying their configurations. It also hardens application security by preventing direct inbound connections to services that bypass the mesh. </p>\n\n<p>Consul service mesh on Nomad has always required addressing upstream services using the explicit address of the local proxy to route traffic to the <a href=\"https://developer.hashicorp.com/nomad/docs/v1.8.x/job-specification/upstreams\"><code>upstreams</code></a> service. Nomad 1.8 introduces a more seamless way of dialing upstream services: configuring services to use transparent proxy with a new <code>transparent_proxy</code> block. This simplifies the configuration of Consul service mesh by eliminating the need to configure <code>upstreams</code> blocks in Nomad. Instead, the Envoy proxy will determine its configuration entirely from Consul <a href=\"https://developer.hashicorp.com/consul/docs/connect/config-entries/service-intentions\">service intentions</a>:</p>\n<pre><code>group \"api\" {\n   network {\n     mode = \"bridge\"\n   }\n \n\n   service {     \n     name = \"count-api\"\n     port = \"9001\"\n \n     connect {\n       sidecar_service {\n         proxy {\n           transparent_proxy {}\n         }\n       }\n     }\n   }\n \n   task \"web\" {\n     driver = \"docker\"\n \n     config {\n       image = \"hashicorpdev/counter-api:v3\"\n     }\n   }\n }</code></pre><p>When a service is configured to use transparent proxy, workloads can now dial the service using a virtual IP Consul DNS name as shown here: </p>\n<pre><code>group \"dashboard\" {\n    network {\n      mode = \"bridge\"\n \n      port \"http\" {\n        static = 9002\n        to     = 9002\n      }\n    }\n \n    service {\n      name = \"count-dashboard\"\n      port = \"http\"\n \n      connect {\n        sidecar_service {\n          proxy {\n            transparent_proxy {}\n          }\n        }\n      }\n    }\n \n    task \"dashboard\" {\n      driver = \"docker\"\n \n      env {\n        COUNTING_SERVICE_URL = \"http://count-api.virtual.consul\"\n      }\n \n      config {\n        image = \"hashicorpdev/counter-dashboard:v3\"\n      }\n    }\n  }</code></pre><p>Note that in order to use transparent proxy, the <a href=\"https://releases.hashicorp.com/consul-cni\"><code>consul-cni</code></a> plugin must be installed on the client host along with the reference CNI plugins at the directory specified by <a href=\"https://developer.hashicorp.com/nomad/docs/configuration/client#cni_path\"><code>cni_path</code></a> config for the Nomad client. Nomad will invoke the <code>consul-cni</code> CNI plugin to configure <code>iptables</code> rules in the network namespace to force outbound traffic from an allocation to flow through the proxy.</p>\n\n<h3>Admin partitions</h3>\n\n<p>Consul supports native multi-tenancy through admin partitions, which was released in Consul 1.11 (Enterprise only). Nomad can now use admin partitions to register services in Consul onto a specific admin partition, or for interacting with the Consul KV API on a specific partition via the template block:</p>\n<pre><code>job \"docs\" {\n group \"example\" {\n \n   consul {\n     cluster   = \"default\"\n     namespace = \"default\"\n     partition = \"prod\"\n   }\n\n   service {\n     name = \"count-api\"\n     port = \"9001\" \n   }\n \n   task \"web\" {\n     template {\n       data        = \"FRONTEND_NAME={{key \\\"fe/name\\\"}}\"\n       destination = \"local/config.txt\"\n     }\n   }\n \n   task \"app\" {\n     template {\n       data        = \"APP_NAME={{key \\\"app/name\\\"}}\"\n       destination = \"local/config.txt\"\n     }\n   }\n  }\n}</code></pre><h2>Re-worked Jobs page in the web UI with live updates</h2>\n<img src=\"https://www.datocms-assets.com/2885/1716916899-image3.png\" alt=\"Jobs\" /><p>Nomad's UI lets users explore many jobs at a glance, or narrow in on individual jobs to see fine-grained details. Previously, in Nomad 1.6, we re-worked job detail pages to give users live updates during deployments or when job allocations change state. In Nomad 1.8, we're bringing these themes to the jobs index page in three major areas:</p>\n\n<ol>\n<li>We've prioritized showing the <strong>current state over historical state</strong> for jobs. Previously, long-garbage-collected allocation placement failures, lost nodes, and other historical representations of job state were shown alongside currently running allocations. In self-healing jobs, this often meant that a healthy job looked like it had failures, when in fact Nomad had replaced or rescheduled those failures. Now, the jobs list tries to show accurate allocation information and meaningful statuses (like \"Degraded\", or \"Recovering\") to better illustrate the current state of a job.</li>\n<li>We've added <strong>server-side pagination</strong>. For users with many thousands of jobs, the main landing page for the web UI will no longer have a noticeable delay on rendering. Users can control page length and filter paginated jobs appropriately.</li>\n<li>We've added <strong>live updating</strong>. Previously, users had to manually refresh the page to see newly created jobs, or to hide jobs that had been stopped and garbage-collected. Now, the jobs list will update in real-time as jobs are created, updated, or removed. Further, any changes to allocations of jobs on-page will be reflected in the status of that job in real-time.</li>\n</ol>\n<img src=\"https://www.datocms-assets.com/2885/1716916984-image6.png\" alt=\"Improved\" /><p>Additionally, we've made some enhancements to searching and filtering on the jobs index page. In addition to filters for Status, Type, Node Pool, and Namespace, the UI now allows for <a href=\"https://developer.hashicorp.com/nomad/api-docs#filtering\">filter expressions</a> to refine the list at a granular level. </p>\n\n<h2>Job descriptions in the web UI</h2>\n\n<p>Nomad 1.8 includes enhancements for annotating job specifications, allowing job authors to easily convey additional information that may be helpful for themselves and others during regular operation. Below is an example of a job specification with a <code>ui</code> job block and its rendered view within the Nomad UI:</p>\n<pre><code>job \"fails_every_10\" {\n\n  ui {\n    description = \"A job that fails **every 10 allocations**, but a 1x [restart](https://nomadproject.io) and 1x <a href=\"https://hashicorp.com\">reschedule</a> means that a given allocation would have to fail 4x (initial, restarted, rescheduled, rescheduled+restarted) to be considered permanently failed, or 0.01% permanent failure rate (1/10,000 allocs)\"'\n    link {\n      label = \"nomad\"\n      url   = \"https://nomadproject.io\"\n    }\n    link {\n      label = \"Some Arbitrary String Label\"\n      url   = \"http://hashicorp.com/\"\n    }\n  }</code></pre><img src=\"https://www.datocms-assets.com/2885/1716917005-image4.png\" alt=\"A\" /><h2>Time-based task execution (Enterprise)</h2>\n\n<p>Nomad 1.8 introduces a new way to provide governance for tasks executed from jobs through time-based execution. With a CRON-like syntax, operators can now schedule when tasks should execute and when they should stop. This reduces the operational risk and complexity for Nomad operators in situations with constraints for running workloads during certain business hours. When using time-based task execution, operators can easily opt-in or opt-out of a schedule that governs when the task can run through the web based UI. This easily allows operators to manage the execution of time sensitive workloads such as High Frequency Trading (HFT) or High Performance Compute (HPC) workloads.</p>\n<pre><code>job \"example-task-with-schedule\" {\n  type = \"service\" \n\n   ...\n\n    // scheduled task\n    task \"business\" {\n      schedule {\n        cron {\n          // start is a full cron expression, except:\n          //  * it must have 6 fields (no seconds in front)\n          //  * it may not contain \"/\" or \",\"\n          // start 09:30 AM on weekdays:\n          start = \"30 9 * * MON-FRI *\"\n          // end is a partial cron expression with only minute &amp; hour.\n          // end at 16:00 after the start time on the same day:\n          end = \"0 16\"\n          // timezone is any available in the system's tzdb\n          timezone = \"America/New_York\"\n        }\n      }\n\n      driver = \"docker\"\n      config {\n        image   = \"python:slim\"\n        command = \"python3\"\n        args    = [\"./local/trap.py\"]\n      }\n      template {\n        destination = \"local/trap.py\"\n        data        = file(\"trap.py\") # apps should handle the kill_signal\n      }\n    }\n  }\n}</code></pre><h2>Support for specifying existing cgroups</h2>\n\n<p><code>cgroups</code> provides resource isolation on Linux for processes. Although Nomad currently provides the ability to manage <code>cgroups</code> for certain task drivers, Nomad makes opinionated decisions regarding <code>cpusets</code>, memory limits, and cpu limits. <a href=\"https://www.investopedia.com/terms/h/high-frequency-trading.asp\">HFT</a> and <a href=\"https://www.intel.com/content/www/us/en/high-performance-computing/what-is-hpc.html\">HPC</a> workloads may leverage custom <code>cgroups</code> configured on the host operating system, which are managed externally from Nomad. With this new capability, custom <code>cgroups</code> v2 and <code>cgroups</code> v1 are specified with a new <code>cgroup_v2_override</code> or <code>cgroup_v1_override</code> field in the <code>raw_exec</code> task driver’s config block. When using <code>cgroups</code>, no resource limits (<code>cores</code>, <code>cpu</code>, <code>memory</code>) are enforced: </p>\n<pre><code>job \"example\" {\n  type = \"service\"\n\n  group \"example_group\" {\n\n    task \"example_task\" {\n      driver = \"raw_exec\"\n      config {\n        command = \"/bin/bash\"\n        args    = [\"-c\", \"sleep 9000\"]\n\n        cgroup_v2_override = \"custom.slice/app.scope\"\n      }\n\n      resources {\n        cpu    = 1024\n        memory = 512\n      }\n    }\n  }\n}</code></pre><h2>nomad-bench: Benchmarking framework for our core scheduler</h2>\n\n<p><a href=\"https://github.com/hashicorp-forge/nomad-bench\">nomad-bench</a> is a testing framework that provisions infrastructure used to run tests and benchmarks against Nomad test clusters. The infrastructure consists of Nomad test clusters that each have a set of servers with hundreds or thousands of simulated nodes created using <a href=\"https://github.com/hashicorp-forge/nomad-nodesim\">nomad-nodesim</a>. </p>\n\n<p>The Nomad server processes are not simulated and are expected to run on their own hosts, mimicking real-world deployments. Metrics are then gathered from the Nomad servers for use with benchmarking and load testing. We hope to share more details in later blogs and also document learnings from our benchmarking efforts to guide requirements and sizing recommendations for production deployments. </p>\n\n<h2>Sentinel policy management in the web UI</h2>\n\n<p><a href=\"https://www.hashicorp.com/products/nomad/\">Nomad Enterprise</a> integrates with <a href=\"https://docs.hashicorp.com/sentinel\">HashiCorp Sentinel</a> for fine-grained policy enforcement. Sentinel allows operators to express their policies as code and have them automatically enforced. This allows operators to define a \"sandbox\" and restrict actions to only those compliant with policy. Nomad 1.8 now allows Enterprise users to manage Sentinel policies directly within the Nomad UI. Users can create a Sentinel policy based on a template provided from the UI or create policies directly using an editor for Sentinel policies. </p>\n\n<p>The standard templates in the UI include common building-block policies like time-based enforcement (e.g. no Friday deployments), and image-based enforcement (e.g. only operator-specified images may be used in job specifications):</p>\n<img src=\"https://www.datocms-assets.com/2885/1716917031-image2.png\" alt=\"Sentinel\" /><p>After selecting a policy template to use, users can then edit the policy directly within the Nomad UI with the Sentinel policy editor. </p>\n<img src=\"https://www.datocms-assets.com/2885/1716917058-image1.png\" alt=\"Sentinel\" /><h2>GitHub Actions for Nomad and Nomad Pack</h2>\n\n<p>In addition to the release of Nomad 1.8, we’re pleased to announce the availability of two GitHub Actions — <a href=\"https://github.com/marketplace/actions/setup-hashicorp-nomad\"><code>setup-nomad</code></a> and <a href=\"https://github.com/marketplace/actions/setup-hashicorp-nomad-pack\"><code>setup-nomad-pack</code></a> — which provide an easy way to leverage the <code>nomad</code> and <code>nomad-pack</code> binaries as part of your GitHub Actions pipeline. Below is an example of how to leverage the <code>nomad</code> binary for setting up Nomad jobs within the same repository. Refer to <a href=\"https://github.com/marketplace/actions/setup-hashicorp-nomad#usage\">setup-nomad#Usage</a> and <a href=\"https://github.com/marketplace/actions/setup-hashicorp-nomad-pack#usage\">setup-nomad-pack#Usage</a> for further details.</p>\n<pre><code>name: nomad\non:\n  push:\nenv:\n  PRODUCT_VERSION: \"1.8.0\"\n  NOMAD_ADDR: \"${{ vars.NOMAD_ADDR }}\"\njobs:\n  nomad:\n    runs-on: ubuntu-latest\n    name: Run Nomad\n    steps:\n      - name: Print `env`\n        run: env\n      # see https://github.com/actions/checkout\n      - name: Checkout\n        uses: actions/checkout@v4\n      # see https://github.com/hashicorp/setup-nomad\n      - name: Setup `nomad`\n        uses: hashicorp/setup-nomad@v1.0.0\n        with:\n          version: \"${{ env.PRODUCT_VERSION }}\"\n      - name: Run `nomad version`\n        run: \"nomad version\"\n      - name: Validate Nomad Job\n        run: \"nomad job validate http.nomad.hcl\"\n      - name: Run Nomad Job\n        run: \"nomad run http.nomad.hcl\"</code></pre><h2>Deprecations</h2>\n\n<p>Nomad 1.8 officially deprecates the <a href=\"https://github.com/hashicorp/nomad-driver-lxc\">LXC task driver</a> and <a href=\"https://developer.hashicorp.com/nomad/plugins/drivers/remote/ecs\">ECS task driver</a>. Archival of both projects and removal of support is scheduled for Nomad 1.9.  Both plug-ins are maintained separately from the Nomad Core project and are not subject to the LTS program. </p>\n\n<h2>Getting started with Nomad 1.8</h2>\n\n<p>Nomad 1.8 adds a variety of  new features and enhancements. We encourage you to try them out:</p>\n\n<ul>\n<li><a href=\"https://developer.hashicorp.com/nomad/install\">Download Nomad 1.8</a> from the project website.</li>\n<li>Learn more about Nomad with <a href=\"https://developer.hashicorp.com/nomad/tutorials\">tutorials on the HashiCorp Developer site</a>.</li>\n<li>Contribute to Nomad by submitting a pull request for a GitHub issue with the “<a href=\"https://github.com/hashicorp/nomad/issues?q=is%3Aopen+is%3Aissue+label%3Ahelp-wanted\">help wanted</a>” or “<a href=\"https://github.com/hashicorp/nomad/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\">good first issue</a>” label.</li>\n<li><a href=\"https://www.nomadproject.io/community\">Participate in our community</a> forums, office hours, and other events.</li>\n</ul>\n","author":"David Yu","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"6cdc6ed30092d8ca488d546dcff692cbd2b1d1a7903ae453e0e2458372963ac4","category":"Tech"}