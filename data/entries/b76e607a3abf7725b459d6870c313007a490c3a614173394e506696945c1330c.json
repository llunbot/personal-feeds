{"title":"ทำการจำลอง API server ใน JavaScript ด้วย MirageJS","link":"https://www.somkiat.cc/mocking-api-server-with-miragejs/","date":1679902509000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/miragejs-150x150.jpg\" alt srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/03/miragejs-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2023/03/miragejs-75x75.jpg 75w\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/03/miragejs.jpg\" alt width=\"571\" height=\"294\" /></figure>\n\n\n\n<p>เรื่องมีอยู่ว่าต้องทำพัฒนา frontend ด้วย ReactJS<br />สิ่งหนึ่งที่ต้องทำเลยคือ การจำลองฝั่ง API ที่ต้องใช้งาน<br />เพื่อให้สามารถพัฒนาและทดสอบได้ง่ายขึ้น<br />หนึ่งในวิธีการก็คือ การใช้งาน <strong><a href=\"https://miragejs.com/\">MirageJS</a></strong><br />มาดูการใช้งานกันดู</p>\n\n\n\n<span></span>\n\n\n\n<p><strong><em>ปล. สามารถใช้งาน MirageJS ได้ทั้ง frontend และ backend</em></strong><br />และยังทำงานร่วมกัย Cypress ได้ด้วย</p>\n\n\n\n<p><strong>ความสามารถพื้นฐานของ MirageJS</strong> เช่น</p>\n\n\n\n<ul><li>ทำ dynamic data ได้ </li><li>กำหนดความสัมพันธ์ของ model/entity database เพื่อสร้างข้อมูล</li><li>ทำการ route ของ HTTP request</li><li>มี factory และ fixture สำหรับการ stub data (static)</li><li>มีตัว serialize สำหรับ HTTP response ให้ด้วย</li></ul>\n\n\n\n<p><strong>ขั้นตอนการใช้งาน</strong></p>\n\n\n\n<p><strong>ขั้นตอนที่ 1 ติดตั้งเข้าไปใน project</strong></p>\n\n\n\n[code]\n$npm install --save-dev miragejs\n[/code]\n\n\n\n<p><strong>ขั้นตอนที่ 2 สร้างไฟล์ server.js เข้ามาใน project</strong></p>\n\n\n\n<p>ในไฟล์นี้จะประกอบไปด้วย</p>\n\n\n\n<ul><li>สร้าง web server (Mock) ด้วย  MirageJS</li><li>สร้าง seed data ขึ้นมา ตรงนี้สามารถใช้งาน <a href=\"https://fakerjs.dev/\" target=\"_blank\">FakeJS</a> เข้ามาร่วมได้</li><li>สร้าง route ของ API ที่ต้องการจำลอง และใส่ <a href=\"https://miragejs.com/docs/main-concepts/route-handlers/#timing\" target=\"_blank\">timing</a> เพื่อจำลองความช้าได้อีกด้วย</li><li>กำหนด model และ factory</li></ul>\n\n\n\n[gist id=\"ef71880157c4a68c263e110ed6530820\" file=\"server.js\"]\n\n\n\n<p><strong>ขั้นตอนที่ 3 สามารถใช้งานได้ทั้ง development และ testing</strong></p>\n\n\n\n<p>ตัวอย่างใช้ใน development mode<br />ก็ทำการสร้าง Mock API server ขึ้นมาได้เลย</p>\n\n\n\n[gist id=\"ef71880157c4a68c263e110ed6530820\" file=\"1.js\"]\n\n\n\n<p>ส่วนในชุดการทดสอบ เขียนแบบนี้</p>\n\n\n\n[gist id=\"ef71880157c4a68c263e110ed6530820\" file=\"2.js\"]\n\n\n\n<p>เพียงเท่านี้เราก็สามารถจำลอง<br />และเรียกใช้งานใน development mode ได้แล้ว<br />เนื่องจากตัว MirageJS จะคอยดัก request ที่ออกจาก web browser ให้</p>\n\n\n\n<p>ขอให้สนุกกับการ coding</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"b76e607a3abf7725b459d6870c313007a490c3a614173394e506696945c1330c","category":"Thai"}