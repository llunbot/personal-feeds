{"title":"Improving Web Accessibility with Web Platform Tests","link":"https://webkit.org/blog/15400/improving-web-accessibility-with-web-platform-tests/","date":1717708072000,"content":"<p>Last year, a colleague introduced me to the <a href=\"https://github.com/web-platform-tests/interop-accessibility/\">Interop Accessibility project</a>. I immediately resonated with its charge to “improve the state of accessibility across the entire web, regardless of which platform, browser, or assistive technology.” The project’s mission was compelling but it also represented, from my perspective, a transformative example of shifting accessibility to the level of web platform features.</p>\n<p>After digging in further, I learned about <a href=\"https://github.com/web-platform-tests/wpt\">Web Platform Tests</a> (WPT), a cross-browser test suite essential to executing Interop Accessibility’s ambitious vision. WPT enables anyone to write a single automated test that runs in all major browser engines (i.e., Chromium, Gecko, and WebKit), thereby ensuring that web technologies such as <a href=\"https://html.spec.whatwg.org/\">HTML</a> or <a href=\"https://www.w3.org/TR/wai-aria-1.2/\">ARIA (Accessible Rich Internet Applications)</a> work as expected. It’s never been possible before this to write an accessibility test that runs in all browsers, on any system. Despite some limitations around mobile testing and operating system coverage, WPT holds great promise as a tool for realizing a more accessible and inclusive web!</p>\n<p>As an example, the following hypothetical test asserts that the accessibility role of an <code>&lt;img&gt;</code> element is “<code>image</code>”:</p>\n<pre><code><span>&lt;<span>img</span> <span>data-expectedrole</span>=<span>\"image\"</span> ...&gt;</span>\n</code></pre>\n<p>For an inclusive user experience, it’s imperative that roles are accurately computed by the browser and in turn, properly exposed by platform accessibility APIs (<a href=\"https://www.w3.org/TR/html-aam-1.0/\">HTML Accessibility API Mappings</a>). Roles enable assistive technology users to understand the purpose of user interface elements (e.g., <code>button</code>, <code>link</code>, <code>dialog</code>) and with WPT, we can easily verify browser-calculated roles.</p>\n<p>You may observe that our fictitious <code>&lt;img&gt;</code> example is missing a text alternative even though it’s required for accessibility. I can add this to test that the <code>&lt;img&gt;</code>’s textual description, supplied via the <code>alt</code> attribute, is properly exposed as its accessibility label:</p>\n<pre><code><span>&lt;<span>img</span> <span>alt</span>=<span>\"stack of fluffy pancakes\"</span> \n     <span>data-expectedlabel</span>=<span>\"stack of fluffy pancakes\"</span>\n     <span>data-expectedrole</span>=<span>\"image\"</span> \n ...\n &gt;</span>\n</code></pre>\n<p>In terms of the screen reader experience, we expect that this particular UI properly announces as “<em>stack of fluffy pancakes, image</em>”. Another hypothetical example showcasing label calculation for an image button:</p>\n<pre><code><span>&lt;<span>button</span> <span>data-expectedlabel</span>=<span>\"Order!\"</span> ...&gt;</span>\n    <span>&lt;<span>img</span> <span>alt</span>=<span>\"Order!\"</span> ...&gt;</span>\n<span>&lt;/<span>button</span>&gt;</span>\n</code></pre>\n<p>Here, the button’s nested content (the <code>&lt;img&gt;</code>’s  <code>alt</code> specifically) provides the accessibility label for the button itself and the resulting announcement would be “<em>Order!</em>, <em>button</em>”. These examples demonstrate the simplicity and power of WPT: with a couple lines of markup, we’re able to quickly ascertain how web browsers expose the accessibility of <em>any</em> DOM element.</p>\n<p><strong>Note</strong>: for those interested in seeing more complex, real WPT examples: <a href=\"https://github.com/w3c/accname/issues/211\">resolving ambiguity in label calculation that involves hidden nodes</a>, <a href=\"https://github.com/web-platform-tests/interop-accessibility/issues/60\">investigating <code>display: contents</code></a>  and <a href=\"https://github.com/web-platform-tests/interop-accessibility/issues/34\">accessible name calculation for <code>aria-label</code></a> .</p>\n<p>Under the hood, when I run the above <code>&lt;img&gt;</code> test for example, a JavaScript Promise function asserts that the image’s accessibility role and label are calculated correctly by the browser. To this end, WPT uses <a href=\"https://web-platform-tests.org/writing-tests/testharness-api.html\">testharness.js</a>, a JavaScript framework for writing test cases, and <a href=\"https://web-platform-tests.org/writing-tests/testdriver.html#accessibility\">WebDriver</a> for obtaining browser-calculated accessibility metadata about DOM elements (at present, either an element’s programmatic label or role). Most WPT accessibility tests are also written with HTML markup and some <code>data-*</code> attributes (e.g., <code>data-testname</code>, <code>data-expectedrole</code>) that provide hooks for WPT test execution and reporting.</p>\n<p>Tests can be run locally using CLI commands that invoke browser automation. One of the slicker aspects of WPT is its robust continuous integration (CI) infrastructure that runs tests in the WPT repo across latest versions of <em>all</em> major browser engines on a daily basis (and for pull requests)! Test results are stored in the <a href=\"https://wpt.fyi/interop-2024\">WPT interop dashboard</a> for easy viewing and to help browser engineers improve interoperability. A special thank you is definitely in order to all the people that keep the WPT CI servers running; their hard work provides a well-maintained, reliable, and stable WPT infrastructure.</p>\n<p>I hope that the utility of these WPT accessibility tests is abundantly clear: when accessibility semantics (e.g., role) and labels work interoperably across browsers, and in accordance with developer intent, this is a victory for both web developers and users. Thinking more broadly, what if we could regularly test the accessibility behavior of any and all web platform features on the latest browsers in an automated fashion? How much time and effort could this save?</p>\n<p>This is why WPT is so compelling: using a powerful, scaleable testing framework, we can produce easy-to-write tests that:</p>\n<ul>\n<li>decrease frustration for code that should “just work”,</li>\n<li>provide a more consistent, accessible experience for the entire web, including your users,</li>\n<li>surface and eliminate cross-browser discrepancies and unexpected accessibility behaviors,</li>\n<li>prevent future regressions of web platform accessibility bugs,</li>\n<li>reduce accessibility QA efforts, and</li>\n<li>allow you more time to focus efforts on other development priorities.</li>\n</ul>\n<p>For the reasons above, it’s difficult to overstate the utility of interoperability and the ultimate benefit of WPT: it gets everyone collectively closer to the shared goal and vision of a reliable and inclusive web!</p>\n<p>The value of writing WPT accessibility tests isn’t limited to ensuring correct cross-browser behavior or gauging browser conformance to accessibility specifications. WPT tests can also positively influence the very criteria they are written to test. For example, a colleague recently wrote a <a href=\"https://github.com/w3c/accname/issues/209\">WPT test for accessible name node traversal</a> and after investigation, we observed that all major browsers failed in an identical manner (which is unusual). We identified multiple specification ambiguities from this work which motivated fixes across browsers. The issue also spawned fruitful discussion on several related topics all in the pursuit of great web accessibility and a best-in-class user experience. Awesome stuff!</p>\n<p>In addition to the value of WPT testing for web developers, further benefits include:</p>\n<ul>\n<li>increased coordination between browser vendors</li>\n<li>greater influence on browser vendors to support web technologies in interoperable ways</li>\n<li>reduction of implementation gaps in accessibility standards and specifications</li>\n<li>improved standardization of how code is interpreted by assistive technologies</li>\n<li>concrete evidence of how browsers actually behave thus facilitating fixes, improved behavior and greater browser parity by browser engineers </li>\n</ul>\n<p>It’s incredible to see the WPT accessibility testing grow over time with our efforts continually bolstered by more efficient infrastructure, broader testing coverage, and strong partnerships. While Apple has taken a lead role, it’s highly collaborative across partners such as Adobe, Hilton, Mozilla, Google, Igalia, Bocoup, etc. I’m amazed by the degree of diligence, technical knowledge and passion that is demonstrated in all aspects of this project. From both inside and outside of Apple, the deep focus and unwavering commitment towards the mission of web accessibility is infectious. To everyone involved: kudos and keep up the great work!</p>\n<p>I’m excited for a future that includes greater WebDriver capabilities in inspecting browser-generated accessibility metadata, in addition to dwindling accessibility gaps across web browsers as a result of productive collaboration. I invite you, dear reader, to contribute to this future of a more interoperable, reliable, and accessible web by writing WPT tests. <a href=\"https://github.com/web-platform-tests/interop-accessibility\">Please join us</a>!</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"412a2d33239af6f35d956ab78a9bb8d1ca68ee731d31c874fc280961705677d4","category":"Tech"}