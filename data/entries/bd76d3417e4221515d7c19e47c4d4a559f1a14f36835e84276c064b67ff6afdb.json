{"title":"Mastering SVG Arcs","link":"https://smashingmagazine.com/2024/12/mastering-svg-arcs/","date":1733734800000,"content":"<p>So, <strong>I love drawing birds with code.</strong> Inspired by my brother’s love for birdwatching, I admire the uniqueness of their feathers, colors, and sounds. But what I notice most is the way their bodies curve and different birds can have dramatically different curves! So, I took my love for drawing with SVG graphics and used it to experiment with bird shapes. Over time, I’ve drawn enough to become incredibly adept at working with arc shapes.</p>\n<p><img src=\"https://files.smashing.media/articles/mastering-svg-arcs/1-birds-with-code-svg.jpg\" /></p>\n<p>Here are a few of my recent works. Inspired by designs I came across on <a href=\"https://dribbble.com\">Dribbble</a>, I created my versions with code. You can browse through the code for each on my <a href=\"https://codepen.io/akshaygpt\">CodePen</a>.</p>\n<p>But before we dive into creating curves with arcs, please pause here and check out Myriam Frisano’s recent article, “<a href=\"https://www.smashingmagazine.com/2024/09/svg-coding-examples-recipes-writing-vectors-by-hand/\">SVG Coding Examples: Useful Recipes For Writing Vectors By Hand</a>.” It’s an excellent primer to the SVG syntax and it will give you solid context heading into the concepts we’re covering here when it comes to mastering <strong>SVG arcs</strong>.</p>\nA Quick SVG Refresher\n<p>You probably know that SVGs are crisp, infinitely scalable illustrations without pixelated degradation — vectors for the win! What you might not know is that <strong>few developers write SVG code.</strong> Why? Well, the syntax looks complicated and unfamiliar compared to, say, HTML. But trust me, once you break it down, it’s not only possible to hand-code SVG but also quite a bit of fun.</p>\n<p>Let’s make sure you’re up to speed on the SVG <code>viewBox</code> because it’s a key concept when it comes to the <em>scalable</em> part of *SVG. We’ll use the analogy of a camera, lens, and canvas to explain this concept. Think of your browser window as a camera and the SVG <code>viewBox</code> as the camera lens focusing on the painting of a bird you’ve created (the SVG). Imagine the painting on a large canvas that may stretch far beyond what the camera captures. The <code>viewBox</code> defines which part of this canvas is visible through the camera.</p>\n<p><img src=\"https://files.smashing.media/articles/mastering-svg-arcs/2-svg-viewbox.png\" /></p>\n<p>Let’s say we have an SVG element that we’re sizing at <code>600px</code> square with <code>width</code> and <code>height</code> attributes directly on the <code>&lt;svg&gt;</code> element. </p>\n<pre><code>&lt;svg width=\"600px\" height=\"600px\"&gt;\n</code></pre>\n\n<p>Let’s turn our attention to the <code>viewBox</code> attribute:</p>\n<pre><code>&lt;svg width=\"600px\" height=\"600px\" viewBox=\"-300 -300 600 600\"&gt;\n</code></pre>\n\n<p>The <code>viewBox</code> attribute defines the internal coordinate system for the SVG, with four values mapping to the SVG’s x, y, width, and height in that order. </p>\n<p>Here’s how this relates to our analogy:</p>\n<ul>\n<li><strong>Camera Position and Size</strong><br />The <code>-300, -300</code> represents the camera lens’ left and top edge position. Meanwhile, <code>600 x 600</code> is like the camera’s frame size, showing a specific portion of that space.</li>\n<li><strong>Unchanging Canvas Size</strong><br />Changing the <code>x</code> and <code>y</code> values adjusts where the camera points, and <code>width</code> and <code>height</code> govern how much of the canvas it frames. It doesn’t resize the actual canvas (the SVG element itself, which remains at <code>600</code>×<code>600</code> pixels). No matter where the camera is positioned or zoomed, the canvas itself remains fixed.</li>\n</ul>\n<p>So, when you adjust the <code>viewBox</code> coordinates, you’re simply choosing a new area of the canvas to focus on without resizing the canvas itself. This lets you control the visible area without changing the SVG’s actual display dimensions.</p>\n<p><img src=\"https://files.smashing.media/articles/mastering-svg-arcs/3-coordinates-viewbox.png\" /></p>\n<p>You now have the context you need to learn how to work with <code>&lt;path&gt;</code> elements in SVG, which is where we start working with arcs!</p>\nThe <code>&lt;path&gt;</code> Element\n<p>We have an <code>&lt;svg&gt;</code> element. And we’re viewing the element’s contents through the “lens” of a <code>viewBox</code>.</p>\n<p>A <code>&lt;path&gt;</code> allows us to draw shapes. We have other elements for drawing shapes — namely <code>&lt;circle&gt;</code>, <code>&lt;line&gt;</code>, and <code>&lt;polygon&gt;</code> — but imagine being restricted to strict geometrical shapes as an artist. That’s where the custom <code>&lt;path&gt;</code> element comes in. It’s used to draw complex shapes that cannot be created with the basic ones. Think of <code>&lt;path&gt;</code> as a flexible container that lets you mix and match different drawing commands.</p>\n<p>With a single <code>&lt;path&gt;</code>, you can combine multiple drawing commands into one smooth, elegant design. Today, we’re focusing on a super specific path command: <strong>arcs.</strong> In other words, what we’re doing is drawing arc shapes with <code>&lt;path&gt;</code>.</p>\n<p>Here’s a quick, no-frills example that places a <code>&lt;path&gt;</code> inside the <code>&lt;svg&gt;</code> example we looked at earlier:</p>\n<div>\n<pre><code>&lt;svg width=\"600px\" height=\"600px\" viewBox=\"-300 -300 600 600\"&gt;</code>\n  <code>&lt;path d=\"M 0 0 A 100 100 0 1 1 200 0\"</code> \n    <code>fill=\"transparent\"\n    stroke=\"black\"\n    stroke-width=\"24\"\n  /&gt;\n&lt;/svg&gt;\n</code></pre>\n</div>\n\n<p><img src=\"https://files.smashing.media/articles/mastering-svg-arcs/4-illustrating-arc-x-y-radii.png\" /></p>\n<p>Let’s take this information and start playing with values to see how it behaves.</p>\nVisualizing The Possibilities\n<p>Again, if this is the <code>&lt;path&gt;</code> we’re starting with:</p>\n<pre><code>&lt;path d=\"M 0 0 A 100 100 0 1 1 200 0\"/&gt;\n</code></pre>\n\n<p>Then, we can manipulate it in myriad ways. Mathematically speaking, you can create an infinite number of arcs between any two points by adjusting the parameters. Here are a few variations of an arc that we get when all we do is change the arc’s endpoints in the X (<code>&lt;ex&gt;</code>) and Y (<code>&lt;ey&gt;</code>) directions.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/WbexYLV\">Arc Possibilities b/w 2 points [forked]</a> by <a href=\"https://codepen.io/akshaygpt\">akshaygpt</a>.</p>\n<p>Or, let’s control the arc’s width and height by updating its radius in the X direction (<code>&lt;rx&gt;</code>) and the Y direction (<code>&lt;ry&gt;</code>). If we play around with the <code>&lt;rx&gt;</code> value, we can manipulate the arc’s height:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/xbKOQMr\">Rx [forked]</a> by <a href=\"https://codepen.io/akshaygpt\">akshaygpt</a>.</p>\n<p>Similarly, we can manipulate the arc’s width by updating the <code>&lt;ry&gt;</code> value:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/mybEQvG\">Ry [forked]</a> by <a href=\"https://codepen.io/akshaygpt\">akshaygpt</a>.</p>\n<p>Let’s see what happens when we rotate the arc along its X-axis (<code>&lt;rotation&gt;</code>). This parameter rotates the arc’s ellipse around its center. It won’t affect circles, but it’s a game-changer for ellipses.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/VYZjVRx\">x-axis-rotation [forked]</a> by <a href=\"https://codepen.io/akshaygpt\">akshaygpt</a>.</p>\n<p>Even with a fixed set of endpoints and radii (<code>&lt;rx&gt;</code> and <code>&lt;ry&gt;</code>), and a given angle of rotation, four distinct arcs can connect them. That’s because we have the <code>&lt;arc&gt;</code> flag value that can be one of two values, as well as the <code>&lt;sweep&gt;</code> flag that is also one of two values. Two boolean values, each with two arguments, give us four distinct possibilities.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/wBwWQOb\">4 cases [forked]</a> by <a href=\"https://codepen.io/akshaygpt\">akshaygpt</a>.</p>\n<p>And lastly, adjusting the arc’s endpoint along the X (<code>&lt;ex&gt;</code>) and Y (<code>&lt;ey&gt;</code>) directions shifts the arc’s location without changing the overall shape.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/xbKOQeL\">endx, endy [forked]</a> by <a href=\"https://codepen.io/akshaygpt\">akshaygpt</a>.</p>\nWrapping Up\n<p>And there you have it, SVG arcs demystified! Whether you’re manipulating radii, rotation, or arc direction, you now have all the tools to master these beautiful curves. With practice, arcs will become just another part of your SVG toolkit, one that gives you the power to create <strong>more dynamic, intricate designs</strong> with confidence.</p>\n<p>So keep playing, keep experimenting, and soon you’ll be bending arcs like a pro — making your SVGs not just functional but beautifully artistic. If you enjoyed this dive into arcs, drop a like or share it with your friends. Let’s keep pushing the boundaries of what SVG can do!</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"bd76d3417e4221515d7c19e47c4d4a559f1a14f36835e84276c064b67ff6afdb","category":"Tech"}