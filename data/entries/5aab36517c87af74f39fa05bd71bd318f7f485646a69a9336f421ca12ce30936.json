{"title":"Writer Palmyra X5 and X4 foundation models are now available in Amazon Bedrock","link":"https://aws.amazon.com/blogs/aws/writer-palmyra-x5-and-x4-foundation-models-are-now-available-in-amazon-bedrock/","date":1745861839000,"content":"<p>One thing we’ve witnessed in recent months is the expansion of context windows in <a href=\"https://aws.amazon.com/what-is/foundation-models/?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">foundation models (FMs)</a>, with many now handling sequence lengths that would have been unimaginable just a year ago. However, building AI-powered applications that can process vast amounts of information while maintaining the reliability and security standards required for enterprise use remains challenging.</p> \n<p>For these reasons, we’re excited to announce that <a href=\"https://aws.amazon.com/bedrock/writer/?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">Writer Palmyra X5 and X4</a> models are available today in <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a> as a fully managed, serverless offering. AWS is the first major cloud provider to deliver fully managed models from Writer. Palmyra X5 is a new model launched today by Writer. Palmyra X4 was previously available in <a href=\"https://aws.amazon.com/bedrock/marketplace/?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">Amazon Bedrock Marketplace</a>.</p> \n<p>Writer Palmyra models offer robust reasoning capabilities that support complex agent-based workflows while maintaining enterprise security standards and reliability. Palmyra X5 features a one million token context window, and Palmyra X4 supports a 128K token context window. With these extensive context windows, these models remove some of the traditional constraints for app and agent development, enabling deeper analysis and more comprehensive task completion.</p> \n<p>With this launch, Amazon Bedrock continues to bring access to the most advanced models and the tools you need to build generative AI applications with security, privacy, and <a href=\"https://aws.amazon.com/ai/responsible-ai/?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">responsible AI</a>.</p> \n<p>As a pioneer in FM development, Writer trains and fine-tunes its industry leading models on <a href=\"https://aws.amazon.com/sagemaker-ai/hyperpod/?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">Amazon SageMaker HyperPod</a>. With its optimized distributed training environment, Writer reduces training time and brings its models to market faster.</p> \n<p><span><strong>Palmyra X5 and X4 use cases<br /> </strong></span>Palmyra X5 and X4 models excel in various enterprise use cases across multiple industries:</p> \n<p><strong>Financial services</strong> – Palmyra models power solutions across investment banking and asset and wealth management, including deal transaction support, 10-Q, 10-K and earnings transcript highlights, fund and market research, and personalized client outreach at scale.</p> \n<p><strong>Healthcare and life science</strong> – Payors and providers use Palmyra models to build solutions for member acquisition and onboarding, appeals and grievances, case and utilization management, and employer request for proposal (RFP) response. Pharmaceutical companies use these models for commercial applications, medical affairs, R&amp;D, and clinical trials.</p> \n<p><strong>Retail and consumer goods</strong> – Palmyra models enable AI solutions for product description creation and variation, performance analysis, SEO updates, brand and compliance reviews, automated campaign workflows, and RFP analysis and response.</p> \n<p><strong>Technology</strong> – Companies across the technology sector implement Palmyra models for personalized and account-based marketing, content creation, campaign workflow automation, account preparation and research, knowledge support, job briefs and candidate reports, and RFP responses.</p> \n<p>Palmyra models support a comprehensive suite of enterprise-grade capabilities, including:</p> \n<p><strong>Adaptive thinking</strong> – Hybrid models combining advanced reasoning with enterprise-grade reliability, excelling at complex problem-solving and sophisticated decision-making processes.</p> \n<p><strong>Multistep tool-calling</strong> – Support for advanced tool-calling capabilities that can be used in complex multistep workflows and agentic actions, including interaction with enterprise systems to perform tasks like updating systems, executing transactions, sending emails, and triggering workflows.</p> \n<p><strong>Enterprise-grade reliability</strong> – Consistent, accurate results while maintaining strict quality standards required for enterprise use, with models specifically trained on business content to align outputs with professional standards.</p> \n<p><span><strong>Using Palmyra X5 and X4 in Amazon Bedrock<br /> </strong></span>As for all new serverless models in Amazon Bedrock, I need to request access first. In the <a href=\"https://console.aws.amazon.com/bedrock?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">Amazon Bedrock console</a>, I choose <strong>Model access</strong> from the navigation pane to enable access to <strong>Palmyra X5</strong> and <strong>Palmyra X4</strong> models.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/22/bedrock-writer-model-access.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/22/bedrock-writer-model-access.png\" alt=\"Console screenshot\" width=\"1385\" height=\"366\" /></a></p> \n<p>When I have access to the models, I can start building applications with any <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a> using the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference.html?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">Amazon Bedrock Converse API</a>. The models use <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">cross-Region inference</a> with these inference profiles:</p> \n<ul> \n <li>For Palmyra X5: <code>us.writer.palmyra-x5-v1:0</code></li> \n <li>For Palmyra X4: <code>us.writer.palmyra-x4-v1:0</code></li> \n</ul> \n<p>Here’s a sample implementation with the <a href=\"https://aws.amazon.com/sdk-for-python/?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">AWS SDK for Python (Boto3)</a>. In this scenario, there is a new version of an existing product. I need to prepare a detailed comparison of what’s new. I have the old and new product manuals. I use the large input context of Palmyra X5 to read and compare the two versions of the manual and prepare a first draft of the comparison document.</p> \n<pre><code>import sys\nimport os\nimport boto3\nimport re\n\nAWS_REGION = \"us-west-2\"\nMODEL_ID = \"us.writer.palmyra-x5-v1:0\"\nDEFAULT_OUTPUT_FILE = \"product_comparison.md\"\n\ndef create_bedrock_runtime_client(region: str = AWS_REGION):\n    \"\"\"Create and return a Bedrock client.\"\"\"\n    return boto3.client('bedrock-runtime', region_name=region)\n\ndef get_file_extension(filename: str) -&gt; str:\n    \"\"\"Get the file extension.\"\"\"\n    return os.path.splitext(filename)[1].lower()[1:] or 'txt'\n\ndef sanitize_document_name(filename: str) -&gt; str:\n    \"\"\"Sanitize document name.\"\"\"\n    # Remove extension and get base name\n    name = os.path.splitext(filename)[0]\n    \n    # Replace invalid characters with space\n    name = re.sub(r'[^a-zA-Z0-9\\s\\-\\(\\)\\[\\]]', ' ', name)\n    \n    # Replace multiple spaces with single space\n    name = re.sub(r'\\s+', ' ', name)\n    \n    # Strip leading/trailing spaces\n    return name.strip()\n\ndef read_file(file_path: str) -&gt; bytes:\n    \"\"\"Read a file in binary mode.\"\"\"\n    try:\n        with open(file_path, 'rb') as file:\n            return file.read()\n    except Exception as e:\n        raise Exception(f\"Error reading file {file_path}: {str(e)}\")\n\ndef generate_comparison(client, document1: bytes, document2: bytes, filename1: str, filename2: str) -&gt; str:\n    \"\"\"Generate a markdown comparison of two product manuals.\"\"\"\n    print(f\"Generating comparison for {filename1} and {filename2}\")\n    try:\n        response = client.converse(\n            modelId=MODEL_ID,\n            messages=[\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"Please compare these two product manuals and create a detailed comparison in markdown format. Focus on comparing key features, specifications, and highlight the main differences between the products.\"\n                        },\n                        {\n                            \"document\": {\n                                \"format\": get_file_extension(filename1),\n                                \"name\": sanitize_document_name(filename1),\n                                \"source\": {\n                                    \"bytes\": document1\n                                }\n                            }\n                        },\n                        {\n                            \"document\": {\n                                \"format\": get_file_extension(filename2),\n                                \"name\": sanitize_document_name(filename2),\n                                \"source\": {\n                                    \"bytes\": document2\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        )\n        return response['output']['message']['content'][0]['text']\n    except Exception as e:\n        raise Exception(f\"Error generating comparison: {str(e)}\")\n\ndef main():\n    if len(sys.argv) &lt; 3 or len(sys.argv) &gt; 4:\n        cmd = sys.argv[0]\n        print(f\"Usage: {cmd} &lt;manual1_path&gt; &lt;manual2_path&gt; [output_file]\")\n        sys.exit(1)\n\n    manual1_path = sys.argv[1]\n    manual2_path = sys.argv[2]\n    output_file = sys.argv[3] if len(sys.argv) == 4 else DEFAULT_OUTPUT_FILE\n    paths = [manual1_path, manual2_path]\n\n    # Check each file's existence\n    for path in paths:\n        if not os.path.exists(path):\n            print(f\"Error: File does not exist: {path}\")\n            sys.exit(1)\n\n    try:\n        # Create Bedrock client\n        bedrock_runtime = create_bedrock_runtime_client()\n\n        # Read both manuals\n        print(\"Reading documents...\")\n        manual1_content = read_file(manual1_path)\n        manual2_content = read_file(manual2_path)\n\n        # Generate comparison directly from the documents\n        print(\"Generating comparison...\")\n        comparison = generate_comparison(\n            bedrock_runtime,\n            manual1_content,\n            manual2_content,\n            os.path.basename(manual1_path),\n            os.path.basename(manual2_path)\n        )\n\n        # Save comparison to file\n        with open(output_file, 'w') as f:\n            f.write(comparison)\n\n        print(f\"Comparison generated successfully! Saved to {output_file}\")\n\n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \n<p>To learn how to use Amazon Bedrock with AWS SDKs, browse the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/service_code_examples.html\">code samples in the Amazon Bedrock User Guide</a>.</p> \n<p><span><strong>Things to know</strong></span><br /> <a href=\"https://aws.amazon.com/bedrock/writer/?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">Writer Palmyra X5 and X4 models</a> are available in <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a> today in the US West (Oregon) <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">AWS Region</a> with <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">cross-Region inference</a>. For the most up-to-date information on model support by Region, refer to the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/models-regions.html?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">Amazon Bedrock documentation</a>. For information on pricing, visit <a href=\"https://aws.amazon.com/bedrock/pricing/?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">Amazon Bedrock pricing</a>.</p> \n<p>These models support English, Spanish, French, German, Chinese, and multiple other languages, making them suitable for global enterprise applications.</p> \n<p>Using the expansive context capabilities of these models, developers can build more sophisticated applications and agents that can process extensive documents, perform complex multistep reasoning, and handle sophisticated agentic workflows.</p> \n<p>To start using Writer Palmyra X5 and X4 models today, visit the Writer model section in the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">Amazon Bedrock User Guide</a>. You can also explore how our Builder communities are using Amazon Bedrock in their solutions in the generative AI section of our <a href=\"https://community.aws/generative-ai?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">community.aws</a> site.</p> \n<p>Let us know what you build with these powerful new capabilities!</p> \n<p>— <a href=\"https://x.com/danilop\">Danilo</a></p> \n<hr /> \n<p>How is the News Blog doing? Take this <a href=\"https://amazonmr.au1.qualtrics.com/jfe/form/SV_eyD5tC5xNGCdCmi\">1 minute survey</a>!</p> \n<p><em>(This <a href=\"https://amazonmr.au1.qualtrics.com/jfe/form/SV_eyD5tC5xNGCdCmi\">survey</a> is hosted by an external company. AWS handles your information as described in the <a href=\"https://aws.amazon.com/privacy/?trk=4b29643c-e00f-4ab6-ab9c-b1fb47aa1708&amp;sc_channel=blog\">AWS Privacy Notice</a>. AWS will own the data gathered via this survey and will not share the information collected with survey respondents.)</em></p> \n<p><em>Update 4/29/25: Sentence removed regarding enterprise security use cases.</em></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"5aab36517c87af74f39fa05bd71bd318f7f485646a69a9336f421ca12ce30936","category":"Tech"}