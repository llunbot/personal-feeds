{"title":"The Path To Awesome CSS Easing With The linear() Function","link":"https://smashingmagazine.com/2023/09/path-css-easing-linear-function/","date":1695376800000,"content":"<p>To paraphrase a saying that has always stuck with me: <em>“The best animation is that which goes unnoticed.”</em> One of the most important concepts of motion design on the web is making motion “feel right.” At the same time, CSS has been fairly limited when it comes to creating animations and transitions that feel natural and are unobtrusive to the user experience.</p>\n<p>Fortunately, that’s changing. Today, let’s look at new easing capabilities arriving in CSS. Specifically, I want to demonstrate the easing superpowers of <code>linear()</code> — a new easing function that is currently defined in the CSS Easing Level 2 specification in the Editor’s Draft. Together, we’ll explore its ability to craft custom easing curves that lead to natural-feeling UI movement.</p>\n<p>The fact that <code>linear()</code> is in the Editor’s Draft status means we’re diving into something still taking shape and could change by the time it reaches the Candidate Recommendation. As you might imagine, that means <code>linear()</code> has <a href=\"https://caniuse.com/mdn-css_types_easing-function_linear-function\">limited support</a> at this moment in time. <strong>It is supported in Chrome and Firefox</strong>, however, so be sure to bear that in mind as we get into some demos.</p>\n<p>Before we jump straight in, there are a couple of articles I recommend checking out. They’ve really influenced how I approach UI motion design as a whole:</p>\n<ul>\n<li>“<a href=\"https://uxdesign.cc/good-to-great-ui-animation-tips-7850805c12e5\">Good to great UI animation tips</a>,” Pablo Stanley</li>\n<li>“<a href=\"https://medium.com/@ruthiran_b/disneys-motion-principles-in-designing-interface-animations-9ac7707a2b43\">Disney’s Motion Principles in designing interface animations</a>,” Ruthiran Babu</li>\n</ul>\n<p>There are plenty of great resources for designing motion in UI, but those are two that I always keep within reach in my browser’s bookmarks, and they have certainly influenced this article.</p>\nThe Current State Of Easing In CSS\n<p>We define CSS easing with either the <code>animation-timing-function</code> or <code>transition-timing-function</code> properties, depending on whether we are working with an animation or transition respectively. </p>\n<p>Duration is all about timing, and timing has a big impact on the movement’s naturalness.</p>\n<p>But, until recently, CSS has limited us to the following easing functions:</p>\n<ul>\n<li><code>linear</code>,</li>\n<li><code>steps</code>,</li>\n<li><code>ease</code>,</li>\n<li><code>ease-in</code>,</li>\n<li><code>ease-out</code>,</li>\n<li><code>ease-in-out</code>,</li>\n<li><code>cubic-bezier()</code>.</li>\n</ul>\n<p>For a refresher, check out this demo that shows the effect of different timings on how this car travels down the track.</p>\n<p><img src=\"https://files.smashing.media/articles/path-css-easing-linear-function/1-easing-curve-represents-movement-behavior.png\" /></p>\n<p>Easing curves can also be viewed in Chromium DevTools, allowing you to inspect any curve applied to a transition or animation.</p>\n<p><img src=\"https://files.smashing.media/articles/path-css-easing-linear-function/2-editable-curves.png\" /></p>\nGetting “Extra” Easing With <code>linear()</code>\n<p>But what if you need something a little extra than what’s available? For example, what about a bounce? Or a spring? These are the types of easing functions that we are unable to achieve with a <code>cubic-bezier()</code> curve.</p>\n<p><strong>This is where the new <code>linear()</code> easing function comes into play,</strong> <a href=\"https://github.com/w3c/csswg-drafts/pull/6533\">pioneered</a> by <a href=\"https://twitter.com/jaffathecake\">Jake Archibald</a> and defined in the <a href=\"https://drafts.csswg.org/css-easing-2/#linear-easing-function-examples\">CSS Easing Level 2 specification</a>, which is currently in the Editor’s Draft. MDN describes it well:</p>\n<blockquote>The <code>linear()</code> function defines a piecewise linear function that interpolates linearly between its points, allowing you to approximate more complex animations like bounce and elastic effects.</blockquote>\n\n<p>In other words, it’s a way to plot a graph with as many points as you like to define a custom easing curve. That’s pretty special and opens new possibilities we could not do before with CSS animations and transitions.</p>\n<p>For example, the easing for a bounce could look like this:</p>\n<div>\n<pre><code>:root {\n  --bounce-easing: linear(\n    0, 0.004, 0.016, 0.035, 0.063, 0.098, 0.141 13.6%, 0.25, 0.391, 0.563, 0.765,\n    1, 0.891 40.9%, 0.848, 0.813, 0.785, 0.766, 0.754, 0.75, 0.754, 0.766, 0.785,\n    0.813, 0.848, 0.891 68.2%, 1 72.7%, 0.973, 0.953, 0.941, 0.938, 0.941, 0.953,\n    0.973, 1, 0.988, 0.984, 0.988, 1\n  );\n}\n</code></pre>\n</div>\n\n<p>Here’s how that looks in action:</p>\n<p><img src=\"https://files.smashing.media/articles/path-css-easing-linear-function/3-linear-generator-app.png\" /></p>\nWhere’s All Of This Going?\n<p>For as long as I can remember, if I’ve needed some special easing for the work I’m doing, GreenSock has been my go-to solution. Its <a href=\"https://greensock.com/docs/v3/Eases\">ease visualizer</a> is one of my favorite examples of interactive documentation.</p>\n<p><img src=\"https://files.smashing.media/articles/path-css-easing-linear-function/4-greensock-ease-visualizer.png\" /></p>\n<p>As soon as I heard about the <code>linear()</code> function, my mind went straight to: <em>“How can I convert GreenSock eases to CSS?”</em> Imagine how awesome it would be to have access to a popular set of eases that can be used directly in CSS without reaching for JavaScript.</p>\n<p>GreenSock’s visualizer accepts JavaScript or an SVG path. So, my first thought was to open DevTools, grab the SVG paths from the visualizer, and drop them into the tool. However, I encountered a hurdle because I needed to scale down the path coordinates for a <code>viewBox</code> of <code>0 0 1 1</code>. GreenSock’s visualizer has a <code>viewBox</code> set to <code>0 0 500 500</code>. I wrote a function to convert the coordinates and reverse the path to go in the right direction. Then, I reached out to Jake with some questions about the generator. The code is available <a href=\"https://github.com/jakearchibald/linear-easing-generator\">on GitHub</a>.</p>\n<p>In my head, I thought the SVG route made sense. But, then I <a href=\"https://linear-easing-generator.netlify.app/?codeType=svg&amp;code=M1%2C0%2C0.996%2C0.02400000000000002%2C0.99%2C0.04800000000000004%2C0.986%2C0.06999999999999995%2C0.98%2C0.09199999999999997%2C0.976%2C0.11399999999999999%2C0.97%2C0.136%2C0.966%2C0.15800000000000003%2C0.96%2C0.17800000000000005%2C0.956%2C0.19999999999999996%2C0.95%2C0.21999999999999997%2C0.946%2C0.24%2C0.94%2C0.26%2C0.9359999999999999%2C0.28%2C0.9299999999999999%2C0.30000000000000004%2C0.926%2C0.31799999999999995%2C0.92%2C0.33799999999999997%2C0.916%2C0.356%2C0.91%2C0.374%2C0.906%2C0.392%2C0.9%2C0.41000000000000003%2C0.896%2C0.42800000000000005%2C0.89%2C0.44399999999999995%2C0.886%2C0.45999999999999996%2C0.88%2C0.478%2C0.876%2C0.494%2C0.87%2C0.51%2C0.866%2C0.526%2C0.86%2C0.54%2C0.856%2C0.556%2C0.85%2C0.5720000000000001%2C0.846%2C0.5860000000000001%2C0.84%2C0.6%2C0.836%2C0.614%2C0.83%2C0.628%2C0.8260000000000001%2C0.642%2C0.8200000000000001%2C0.656%2C0.8160000000000001%2C0.6679999999999999%2C0.81%2C0.6819999999999999%2C0.806%2C0.694%2C0.8%2C0.706%2C0.796%2C0.718%2C0.79%2C0.73%2C0.786%2C0.742%2C0.78%2C0.754%2C0.776%2C0.766%2C0.77%2C0.776%2C0.766%2C0.788%2C0.76%2C0.798%2C0.756%2C0.808%2C0.75%2C0.8180000000000001%2C0.746%2C0.8280000000000001%2C0.74%2C0.838%2C0.736%2C0.848%2C0.73%2C0.856%2C0.726%2C0.866%2C0.72%2C0.874%2C0.716%2C0.884%2C0.71%2C0.892%2C0.706%2C0.9%2C0.7%2C0.908%2C0.696%2C0.916%2C0.69%2C0.924%2C0.6859999999999999%2C0.9299999999999999%2C0.6799999999999999%2C0.938%2C0.6759999999999999%2C0.946%2C0.6699999999999999%2C0.952%2C0.6659999999999999%2C0.958%2C0.6599999999999999%2C0.966%2C0.656%2C0.972%2C0.65%2C0.978%2C0.646%2C0.984%2C0.64%2C0.99%2C0.636%2C0.996%2C0.63%2C1%2C0.626%2C1.004%2C0.62%2C1.008%2C0.616%2C1.014%2C0.61%2C1.018%2C0.606%2C1.024%2C0.6%2C1.028%2C0.596%2C1.032%2C0.5900000000000001%2C1.036%2C0.5860000000000001%2C1.04%2C0.5800000000000001%2C1.044%2C0.5760000000000001%2C1.048%2C0.5700000000000001%2C1.052%2C0.5660000000000001%2C1.054%2C0.56%2C1.058%2C0.556%2C1.062%2C0.55%2C1.064%2C0.546%2C1.066%2C0.54%2C1.07%2C0.536%2C1.072%2C0.53%2C1.074%2C0.526%2C1.076%2C0.52%2C1.08%2C0.516%2C1.082%2C0.506%2C1.084%2C0.496%2C1.088%2C0.486%2C1.09%2C0.476%2C1.094%2C0.46599999999999997%2C1.096%2C0.45599999999999996%2C1.096%2C0.44599999999999995%2C1.098%2C0.43600000000000005%2C1.098%2C0.42600000000000005%2C1.098%2C0.41600000000000004%2C1.098%2C0.406%2C1.098%2C0.396%2C1.098%2C0.386%2C1.096%2C0.376%2C1.096%2C0.366%2C1.094%2C0.35%2C1.092%2C0.33599999999999997%2C1.088%2C0.31999999999999995%2C1.084%2C0.30000000000000004%2C1.08%2C0.28%2C1.074%2C0.25%2C1.064%2C0.14600000000000002%2C1.026%2C0.126%2C1.02%2C0.10599999999999998%2C1.014%2C0.08999999999999997%2C1.01%2C0.07599999999999996%2C1.008%2C0.06000000000000005%2C1.004%2C0.050000000000000044%2C1.002%2C0.040000000000000036%2C1.002%2C0.030000000000000027%2C1%2C0.020000000000000018%2C1%2C0.010000000000000009%2C1%2C0%2C1&amp;simplify=0.0117803221483705&amp;round=5\">created a path</a> that wouldn’t work in the tool. So, I reached back out to Jake, and we both thought the issue was a bug in the tool.</p>\n<p>Jake then asked, “Why do you need to go via SVG?”. His question was spot on! The JavaScript input for the tool expects an easing function. An easing function maps time to a progress value. And we can get the easing functions straight out of GreenSock and pass them to the generator. Jake managed to dig the <code>back</code> easing function out of <a href=\"https://github.com/greensock/GSAP/blob/6032c54a21981b389a5f5603a45083f38ed5acf9/src/gsap-core.js#L1059\">the GreenSock GitHub repo</a> and <a href=\"https://linear-easing-generator.netlify.app/?codeType=js&amp;code=console.clear%28%29%0Aconst+_configBack+%3D+%28type%2C+overshoot+%3D+1.70158%29+%3D%3E+%7B%0A++let+easeOut+%3D+p+%3D%3E+%7B%0A++++const+result+%3D+p+%3F+%28%28--p%29+*+p+*+%28%28overshoot+%2B+1%29+*+p+%2B+overshoot%29+%2B+1%29+%3A+0%0A++++console.info%28%7B+p%2C+result+%7D%29%0A++++return+result%0A++%7D%3B%0A++let+ease+%3D+type+%3D%3D%3D+%22out%22+%3F+easeOut+%3A+type+%3D%3D%3D+%22in%22+%3F+p+%3D%3E+1+-+easeOut%281+-+p%29+%3A+_easeInOutFromOut%28easeOut%29%3B%0A++ease.config+%3D+overshoot+%3D%3E+_configBack%28type%2C+overshoot%29%3B%0A++return+ease%3B%0A%7D%3B%0A%0Aself.back+%3D+_configBack%28%27out%27%29%3B&amp;simplify=0.0026660145798495&amp;round=3\">create the easing</a> I was originally after.</p>\nGenerating GSAP Eases For CSS\n<p>Now that I’ve given you a bunch of context, we have all the parts of the puzzle we need to make something that can convert GSAP easing to CSS code.</p>\n<p>First, we extract the parts from Jake’s <code>linear()</code> generator tool into a script. The idea is to loop over a set of keys and generate a block of CSS with <code>linear()</code> easings. GreenSock has a lovely utility method called <code>parseEase</code>. It takes a string and returns the easing function. The accepted strings are the GreenSock easing functions.</p>\n<pre><code>const ease = gsap.parseEase('power1.in')\nease(0.5) // === 0.25\n</code></pre>\n\n<p>As this loops over an object with different easing functions, we can pass them into the extracted code from the tool. We modify that extracted code to our needs.</p>\n<div>\n<pre><code>const easings = ''\nconst simplified = 0.0025\nconst rounded = 4\nconst EASES = {\n  'power-1--out': gsap.parseEase('power1.out')\n  // Other eases\n}\n// Loop over the easing keys and generate results.\nfor (const key of Object.keys(EASES)) {\n  // Pass the easing function through the linear-generator code.\n  const result = processEase(key, EASES[key])\n  const optimised = useOptimizedPoints(result.points, simplified, rounded)\n  const linear = useLinearSyntax(optimised, rounded)\n  const output = useFriendlyLinearCode(linear, result.name, 0)\n  easings += output\n}\n// Generate an output CSS string.\nlet outputStart = ':root {'\nlet outputEnd = '}' \nlet styles = <code>${outputStart}\n  ${easings}\n  ${outputEnd}</code>\n// Write it to the body.\ndocument.body.innerHTML = styles\n</code></pre>\n</div>\n\n<p>The functions we extracted from the linear generator do different things:</p>\n<ul>\n<li><code>processEase</code><br />This is a modified version of <a href=\"https://github.com/jakearchibald/linear-easing-generator/blob/b263bdbfda190aa2b0c4de622c621f121e2d924c/src/workers/process-script/index.ts#L23\"><code>processScriptData</code></a>. It takes the easing functions and returns points for our graph.</li>\n<li><code>useOptimizedPoints</code><br />This optimizes those points based on the <code>simplied</code> and <code>rounded</code> values. This was where I learned about the <a href=\"https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm\">Douglas Peucker</a> algorithm from Jake.</li>\n<li><code>useLinearSyntax</code><br />This takes the optimized points and returns the values for the <code>linear()</code> function.</li>\n<li><code>useFriendlyLinearCode</code><br />This takes the <code>linear</code> values and returns a CSS string that we can use with the ease’s custom property name.</li>\n</ul>\n<p>It’s worth noting that I’ve tried not to touch these too much. But it’s also <a href=\"https://codepen.io/jh3y/pen/yLGOaLG\">worth digging in</a> and dropping in a breakpoint or <code>console.info</code> at various spots to understand how things are working.</p>\n<p>After running things, the result gives us CSS variables containing the <code>linear()</code> easing functions and values. The following example shows the elastic and bounce eases.</p>\n<div>\n<pre><code>:root {\n  --elastic-in: linear( 0, 0.0019 13.34%, -0.0056 27.76%, -0.0012 31.86%, 0.0147 39.29%, 0.0161 42.46%, 0.0039 46.74%, -0.0416 54.3%, -0.046 57.29%, -0.0357, -0.0122 61.67%, 0.1176 69.29%, 0.1302 70.79%, 0.1306 72.16%, 0.1088 74.09%, 0.059 75.99%, -0.0317 78.19%, -0.3151 83.8%, -0.3643 85.52%, -0.3726, -0.3705 87.06%, -0.3463, -0.2959 89.3%, -0.1144 91.51%, 0.7822 97.9%, 1 );\n  --elastic-out: linear( 0, 0.2178 2.1%, 1.1144 8.49%, 1.2959 10.7%, 1.3463 11.81%, 1.3705 12.94%, 1.3726, 1.3643 14.48%, 1.3151 16.2%, 1.0317 21.81%, 0.941 24.01%, 0.8912 25.91%, 0.8694 27.84%, 0.8698 29.21%, 0.8824 30.71%, 1.0122 38.33%, 1.0357, 1.046 42.71%, 1.0416 45.7%, 0.9961 53.26%, 0.9839 57.54%, 0.9853 60.71%, 1.0012 68.14%, 1.0056 72.24%, 0.9981 86.66%, 1 );\n  --elastic-in-out: linear( 0, -0.0028 13.88%, 0.0081 21.23%, 0.002 23.37%, -0.0208 27.14%, -0.023 28.64%, -0.0178, -0.0061 30.83%, 0.0588 34.64%, 0.0651 35.39%, 0.0653 36.07%, 0.0514, 0.0184 38.3%, -0.1687 42.21%, -0.1857 43.04%, -0.181 43.8%, -0.1297 44.93%, -0.0201 46.08%, 1.0518 54.2%, 1.1471, 1.1853 56.48%, 1.1821 57.25%, 1.1573 58.11%, 0.9709 62%, 0.9458, 0.9347 63.92%, 0.9349 64.61%, 0.9412 65.36%, 1.0061 69.17%, 1.0178, 1.023 71.36%, 1.0208 72.86%, 0.998 76.63%, 0.9919 78.77%, 1.0028 86.12%, 1 );\n    --bounce-in: linear( 0, 0.0117, 0.0156, 0.0117, 0, 0.0273, 0.0468, 0.0586, 0.0625, 0.0586, 0.0468, 0.0273, 0 27.27%, 0.1093, 0.1875 36.36%, 0.2148, 0.2343, 0.2461, 0.25, 0.2461, 0.2344, 0.2148 52.28%, 0.1875 54.55%, 0.1095, 0, 0.2341, 0.4375, 0.6092, 0.75, 0.8593, 0.9375 90.91%, 0.9648, 0.9843, 0.9961, 1 );\n  --bounce-out: linear( 0, 0.0039, 0.0157, 0.0352, 0.0625 9.09%, 0.1407, 0.25, 0.3908, 0.5625, 0.7654, 1, 0.8907, 0.8125 45.45%, 0.7852, 0.7657, 0.7539, 0.75, 0.7539, 0.7657, 0.7852, 0.8125 63.64%, 0.8905, 1 72.73%, 0.9727, 0.9532, 0.9414, 0.9375, 0.9414, 0.9531, 0.9726, 1, 0.9883, 0.9844, 0.9883, 1 );\n  --bounce-in-out: linear( 0, 0.0078, 0, 0.0235, 0.0313, 0.0235, 0.0001 13.63%, 0.0549 15.92%, 0.0938, 0.1172, 0.125, 0.1172, 0.0939 27.26%, 0.0554 29.51%, 0.0003 31.82%, 0.2192, 0.3751 40.91%, 0.4332, 0.4734 45.8%, 0.4947 48.12%, 0.5027 51.35%, 0.5153 53.19%, 0.5437, 0.5868 57.58%, 0.6579, 0.7504 62.87%, 0.9999 68.19%, 0.9453, 0.9061, 0.8828, 0.875, 0.8828, 0.9063, 0.9451 84.08%, 0.9999 86.37%, 0.9765, 0.9688, 0.9765, 1, 0.9922, 1 );\n}\n</code></pre>\n</div>\n\n<p>We’re able to adjust this output to our heart’s desire with different keys or accuracy. The really cool thing is that we can now <a href=\"https://gist.github.com/jh3y/1b3afdfa7af3ebc5668bf169cea17d09\">drop these GreenSock eases</a> into CSS! </p>\nHow To Get Your Very Own CSS <code>linear()</code> Ease\n<p>Here’s a little tool I put together. It allows you to select the type of animation you want, apply a <code>linear()</code> ease to it, and determine its speed. From there, flip the card over to view and copy the generated code.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/zYywLXB\">GreenSock Easing with CSS linear() ⚡️ [forked]</a> by <a href=\"https://codepen.io/jh3y\">Jhey</a>.</p>\n<p>In cases where <code>linear()</code> isn’t supported by a browser, we could use a fallback value for the ease using <code>@supports</code>:</p>\n<pre><code>:root {\n  --ease: ease-in-out;\n}\n@supports(animation-timing-function: linear(0, 1)) {\n  :root {\n    --ease: var(--bounce-easing);\n  }\n}\n</code></pre>\n\n<p>And just for fun, here’s a demo that takes the GreenSock ease string as an input and gives you the <code>linear()</code> function back. Try something like <code>elastic.out(1, 0.1)</code> and see what happens!</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/RwEVBmM\">Convert GSAP Ease to CSS linear() [forked]</a> by <a href=\"https://codepen.io/jh3y\">Jhey</a>.</p>\nBonus: Linear Eases For Tailwind\n<p>You don’t think we’d leave out those of you who use Tailwind, do you? Not a chance. In fact, extending Tailwind with our custom eases isn’t much trouble at all.</p>\n<div>\n<pre><code>/** @type {import('tailwindcss').Config} */\nconst plugin = require('tailwindcss/plugin')\nconst EASES = {\n  \"power1-in\": \"linear( 0, 0.0039, 0.0156, 0.0352, 0.0625, 0.0977, 0.1407, 0.1914, 0.2499, 0.3164, 0.3906 62.5%, 0.5625, 0.7656, 1 )\",\n  /* Other eases */\n}\nconst twease = plugin(\n  function ({addUtilities, theme, e}) {\n    const values = theme('transitionTimingFunction')\n    var utilities = Object.entries(values).map(([key, value]) =&gt; {\n      return {\n        [<code>.${e(</code>animation-timing-${key}<code>)}</code>]: {animationTimingFunction: <code>${value}</code>},\n      }\n    })\n    addUtilities(utilities)\n  }\n)\nmodule.exports = {\n  theme: {\n    extend: {\n      transitionTimingFunction: {\n        ...EASES,\n      }\n    },\n  },\n  plugins: [twease],\n}\n</code></pre>\n</div>\n\n<p>I’ve <a href=\"https://play.tailwindcss.com/T3w72VmyPj?file=config\">put something together in Tailwind Play</a> for you to see this in action and do some experimenting. This will give you classes like <code>animation-timing-bounce-out</code> and <code>ease-bounce-out</code>.</p>\nConclusion\n<p>CSS has traditionally only provided limited control over the timing of animations and transitions. The only way to get the behavior we wanted was to reach for JavaScript solutions. Well, that’s soon going to change, thanks to the <strong>easing superpowers of the new <code>linear()</code> timing function</strong> that’s defined in the CSS Easing Level 2 draft specification. Be sure to drop those transitions into your demos, and I look forward to seeing what you do with them!</p>\n<p>Stay awesome. ┬┴┬┴┤•ᴥ•ʔ├┬┴┬┴</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"2f7e5a39bc0e3aeb776fcb94556d9d20619d038ab18fd2c9fca50b3f0540c275","category":"Tech"}