{"title":"Taking RWD To The Extreme","link":"https://smashingmagazine.com/2025/02/taking-rwd-to-the-extreme/","date":1738933200000,"content":"<p>When Ethan Marcotte conceived RWD, web technologies were far less mature than today. As web developers, we started to grasp how to do things with <code>float</code>s after years of stuffing everything inside table cells. There weren’t many possible ways to achieve a responsive site. There were two of them: <strong>fluid grids</strong> (based on percentages) and <strong>media queries</strong>, which were a hot new thing back then.</p>\n<p>What was lacking was a <em>real</em> layout system that would allow us to <em>lay</em> <em>things</em> <em>out</em> on a page instead of improvising with floating content. We had to wait several years for Flexbox to appear. And CSS Grid followed that.</p>\n<p>Undoubtedly, new layout systems native to the browser were groundbreaking 10 years ago. They were revolutionary enough to usher in a new era. In her talk “<a href=\"https://talks.jensimmons.com/jugbbe/everything-you-know-about-web-design-just-changed\">Everything You Know About Web Design Just Changed</a>” at the An Event Apart conference in 2019, Jen Simmons proposed a name for it: <strong>Intrinsic Web Design (IWD)</strong>. Let’s disarm that fancy word first. According to the Merriam-Webster dictionary, intrinsic means “<a href=\"https://www.merriam-webster.com/dictionary/intrinsic\"><em>belonging to the essential nature or constitution of a thing</em></a>.” In other words, IWD is a natural way of doing design for the web. And that boils down to using CSS layout systems for… laying out things. That’s it.</p>\n<p>It does not sound that groundbreaking on its own. But it opens a lot of possibilities that weren’t earlier available with float-based layouts or table ones. We got the best things from both worlds: two-dimensional layouts (like tables with their rows and columns) with wrapping abilities (like floating content when there is not enough space for it). And there are even more goodies, like mixing fixed-sized content with fluid-sized content or intentionally overlapping elements:</p>\n<p><img src=\"https://files.smashing.media/articles/taking-rwd-to-the-extreme/1-layouts.png\" /></p>\n<p>Native layout systems are here to make the browser work for you — don’t hesitate to use that to your advantage.</p>\n<h3>Start With Semantic HTML</h3>\n<p>HTML is the backbone of the web. It’s the language that structures and formats the content for the user. And it comes with a huge bonus: it loads and displays to the user, even if CSS and JavsScript fail to load for whatever reason. In other words, the website should still make sense to the user even if the CSS that provides the layout and the JavsScript that provides the interactivity are no-shows. A website is a text document, not so different from the one you can create in a text processor, like Word or LibreWriter.</p>\n<p>Semantic HTML also provides important accessibility features, like headings that are often <a href=\"https://webaim.org/projects/screenreadersurvey10/#finding\">used by screen-reader users for navigating pages</a>. This is why starting not just with any markup but <em>semantic</em> markup for meaningful structure is a crucial step to embracing native web features.</p>\n<h3>Use Fluid Type With Fluid Space</h3>\n<p>We often need to adjust the font size of our content when the screen size changes. Smaller screens mean being able to display less content, and larger screens provide more affordance for additional content. This is why we ought to make content as <em>fluid</em> as possible, by which I mean the content should automatically adjust based on the screen’s size. A fluid typographic system optimizes the content’s legibility when it’s being viewed in different contexts.</p>\n<p>Nowadays, we can achieve truly fluid type with one line of CSS, thanks to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/clamp\"><code>clamp()</code> function</a>:</p>\n<pre><code>font-size: clamp(1rem, calc(1rem + 2.5vw), 6rem);\n</code></pre>\n\n<p>The maths involved in it goes quite above my head. Thankfully, there is a <a href=\"https://www.smashingmagazine.com/2022/01/modern-fluid-typography-css-clamp/\">detailed article on fluid type by Adrian Bece</a> here on Smashing Magazine and <a href=\"https://utopia.fyi/\">Utopia</a>, a handy tool for doing the maths for us. But beware — there be dragons! Or at least <a href=\"https://adrianroselli.com/2019/12/responsive-type-and-zoom.html\">possible accessibility issues</a>. By limiting the maximum font size, we could break the ability to zoom the text content, violating <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/resize-text.html\">one of the WCAG’s requirements</a> (though there are <a href=\"https://www.smashingmagazine.com/2023/11/addressing-accessibility-concerns-fluid-type/\">ways to address that</a>).</p>\n<p>Fortunately, fluid space is much easier to grasp: if gaps (margins) between elements are defined in font-dependent units (like <code>rem</code> or <code>em</code>), they will scale alongside the font size. Yet rest assured, <a href=\"https://ashleemboyer.com/blog/why-you-should-use-px-units-for-margin-padding-and-other-spacing-techniques\">there are also caveats</a>.</p>\n<h3>Always Bet On Progressive Enhancement</h3>\n<p>Yes, that’s this over-20-year-old technique for creating web pages. And it’s still relevant today in 2025. Many interesting features have limited availability — like cross-page <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API\">view transitions</a>. They won’t work for every user, but enabling them is as simple as adding one line of CSS:</p>\n<pre><code>@view-transition { navigation: auto; }\n</code></pre>\n\n<p>It won’t work in some browsers, but it also won’t break anything. And if some browser catches up with the standard, the code is already there, and view transitions start to work in that browser on your website. It’s sort of like opting into the feature when it’s ready.</p>\n<p>That’s progressive enhancement at its best: allowing you to make your stairs into an escalator whenever it’s possible.</p>\n<p>It applies to many more things in CSS (unsupported grid is just a flow layout, unsupported <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Masonry_layout\">masonry layout</a> is just a grid, and so on) and other web technologies.</p>\n<h3>Trust The Browser</h3>\n<p>Trust it because it knows much more about how safe it is for users to surf the web. Besides, it’s a computer program, and computer programs are pretty good at calculating things. So instead of calculating all these breakpoints ourselves, take their helping hand and allow them to do it for you. Just give them some constraints. Make that <code>&lt;main&gt;</code> element no wider than 60 characters and no narrower than 20 characters — and then relax, watching the browser make it 37 characters on some super rare viewport you’ve never encountered before. It Just Works™.</p>\n<p>But trusting the browser also means trusting <a href=\"https://www.w3.org/standards/\">the open web</a>. After all, these algorithms responsible for laying things out are all parts of the standards.</p>\n<h3>Ditch The “Physical” CSS</h3>\n<p>That’s a bonus point from me. Layout systems introduced the concept of logical CSS. Flexbox does not have a notion of a left or right side — it has a start and an end. And that way of thinking lurked into other areas of CSS, creating the whole <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values\">CSS Logical Properties and Values module</a>. After working more with layout systems, logical CSS seems much more intuitive than the old “physical” one. It also has at least one advantage over the old way of doing things: <strong>it works far better with internationalized content</strong>.</p>\n<p><img src=\"https://files.smashing.media/articles/taking-rwd-to-the-extreme/2-meme-one-rem.png\" /></p>\n<p>And I know that sounds crazy, but it forces a change in thinking about websites. If you don’t know the most basic information about your content (the font size), you can’t really apply any concrete numbers to your layout. You can only think in <em>ratios</em>. If the font size equals <code>✕</code>, your heading could equal <code>2✕</code>, the main column <code>60✕</code>, some text input — <code>10✕</code>, and so on. This way, everything should work out with any font size and, by extension, scale up with any font size.</p>\n<p>We’ve already been doing that with layout systems — we allow them to work on ratios and figure out how big each part of the layout should be. And we’ve also been doing that with <code>rem</code> and <code>em</code> units for <a href=\"https://css-tricks.com/rems-ems/\">scaling things up depending on font size</a>. The only thing left is to completely forget the “<code>1rem</code> = <code>16px</code>” equation and fully embrace the exciting shores of unknown dimensions.</p>\n<p>But that sort of mental shift comes with one not-so-straightforward consequence. Not setting the font size and working with the user-provided one instead fully <strong>moves the power from the web developer to the browser and, effectively, the user</strong>. And the browser can provide us with <a href=\"https://www.smashingmagazine.com/2023/08/css-accessibility-inclusion-user-choice/\">far more information about user preferences</a>.</p>\n<p>Thanks to the modern CSS, we can <em>respond</em> to these things. For example, we can switch to dark mode if the user prefers one, we can limit motion if the user requests it, we can make clickable areas bigger if the device has a touch screen, and so on. By having this kind of <strong>dialogue with the browser</strong>, exchanging information (it gives us data on the user, and we give it hints on how to display our content), we <strong>empower the user</strong> in the result. The content would be displayed in the way <em>they</em> want. That makes our website far more inclusive and accessible.</p>\n<p>After all, the users know what they need best. If they set the default font size to 64 pixels, they would be grateful if we respected that value. We don’t know why they did it (maybe they have some kind of vision impairment, or maybe they simply have a screen far away from them); we only know they did it — and we respect that.</p>\n<p>And that’s responsive design for me.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"9ffba8490d4190df3057952aeac1ef5b038794bc3079f21388e092519b2e8f3c","category":"Tech"}