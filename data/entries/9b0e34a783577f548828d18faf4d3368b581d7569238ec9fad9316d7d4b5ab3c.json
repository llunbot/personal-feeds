{"title":"★ Beeper? I Hardly Knew Her.","link":"https://daringfireball.net/2023/12/beeper_i_hardly_knew_her","date":1702254220000,"content":"\n<p><a href=\"https://www.beeper.com/\">Beeper</a> is a company founded by Eric Migicovsky, who is best known as the founder of the now-defunct <a href=\"https://en.wikipedia.org/wiki/Pebble_(watch)\">Pebble</a>, <a href=\"https://daringfireball.net/search/pebble+watch\">which made groundbreaking smartwatches a decade ago</a>. Migicovsky founded Beeper <a href=\"https://blog.beeper.com/p/the-universal-communication-bus-42dfb9a141ad\">to create a meta-platform</a> for disparate messaging apps — a single messaging client that could connect to dozens of different platforms like WhatsApp, Telegram, Twitter DMs, and more. Until this week, Beeper was best known for an app it has now rebranded as <a href=\"https://www.beeper.com/cloud\">Beeper Cloud</a>. Beeper Cloud works as a single client for a slew of different messaging platforms — including iMessage — by way of relay servers. For each Beeper Cloud user, Beeper runs a virtual server in the cloud, and your local Beeper Cloud app communicates with that relay server. For each messaging service you connect to Beeper Cloud, the relay server needs to store your login credentials. You can also self-host your own server, which they describe as “<a href=\"https://github.com/beeper/self-host\">possible, but not an easy task right now</a>”, as it requires Linux system administration skills.</p>\n\n<p>If you’re thinking that running a server instance for each user sounds like something that would be hard to scale, you’re right. <a href=\"https://techcrunch.com/2021/01/21/pebble-founder-launches-beeper-a-universal-chat-app-that-works-with-imessage-and-others/\">Beeper Cloud launched in January 2021</a>, but there remains a (seemingly long) waitlist to get access today, nearly three years later.</p>\n\n<p>If you’re thinking that giving your iCloud account credentials to a third party so that they can sign you into iMessage on a virtual MacOS machine in the cloud sounds like a sketchy idea, you’re correct. It’s a terrible idea.</p>\n\n<p>If you’re thinking that a scheme like this sounds familiar, you’re right — there are a few other “universal chat” services which have also been in the news recently. The best is <a href=\"https://texts.com/\">Texts</a>, a currently-desktop-only $12.50/month app created by Kishan Bagaria, and <a href=\"https://ma.tt/2023/10/texts-joins-automattic/\">recently acquired by Automattic</a> (the parent company of WordPress.com, Tumblr, and Day One, <a href=\"https://automattic.com/\">among numerous other apps and services</a>). Texts directly communicates with the protocols for services like WhatsApp and Twitter DMs, but for iMessage — which of course has no open APIs for third-party clients — communicates via AppleScript and accessibility APIs with Apple’s Messages app running on your own Mac.</p>\n\n<p>The other such service I’m aware of is <a href=\"https://www.sunbirdapp.com/\">Sunbird</a>, which was recently in the news for a partnership with upstart Android phone maker <a href=\"https://us.nothing.tech/pages/phone-2\">Nothing</a>, wherein they created a white-label Android app called Nothing Chat, that brought iMessage support to Nothing phones by way of relay servers running virtual MacOS instances. <a href=\"https://texts.blog/2023/11/18/sunbird-security/\">Turns out Nothing Chat and Sunbird were a privacy disaster</a>, with message contents and attachments stored unencrypted in a database, and some network traffic being transmitted over unencrypted HTTP. This, despite <a href=\"https://www.youtube.com/watch?v=A9PP8AeSbbo\">claims at launch</a> that everything was “end-to-end encrypted”. Nothing Chat was available in the Play Store for just four days last month <a href=\"https://www.theverge.com/2023/11/18/23966781/nothing-chats-imessage-unencrypted-sunbird-plaintext\">before being pulled after the security issues were discovered</a>.</p>\n\n<p>So, to recap the various third-party apps that support (or in the case of Sunbird/Nothing, support<em>ed</em>) iMessage:</p>\n\n<ul>\n<li><p>Beeper Cloud supports iMessage by way of relay servers in the cloud, to use which you must entrust Beeper with your iCloud account password. An <a href=\"https://support.apple.com/en-us/102654\">app-specific iCloud password</a> won’t work, because Messages relies upon your system-level iCloud account on MacOS. Beeper also relies upon relay servers for WhatsApp and Signal. <a href=\"https://www.beeper.com/faq#how-does-beeper-connect-to-encrypted-chat-networks-like-imessage-signal-whatsapp\">Beeper swears up and down you can trust them with this</a>. They even have <a href=\"https://apps.apple.com/us/app/beeper-universal-messenger/id1551695541?platform=iphone\">a client for iOS on the App Store</a> (for now).</p></li>\n<li><p>Texts supports iMessage by communicating with the local instance of Apple’s Messages app running on the same Mac Texts is running on. No relay servers, and you never give Texts your iCloud password. It’s just one app (Texts) communicating with another app (Messages), both running locally on your Mac.</p></li>\n<li><p>Sunbird/Nothing Chat supported iMessage using relay servers, and it was revealed to be a security fiasco.</p></li>\n</ul>\n\n<p>That brings us to this week, <a href=\"https://www.theverge.com/2023/12/5/23987817/beeper-mini-imessage-android-reverse-engineer\">when Beeper launched Beeper Mini</a> — a $2/month Android app that worked as a standalone iMessage client, thanks to the <a href=\"https://github.com/JJTech0130/pypush\">reverse engineering efforts of a 16-year-old high school student</a> (who goes by “JJTech1030” on GitHub, and apparently wishes to remain pseudonymous). Beeper Mini’s launch <a href=\"https://www.techmeme.com/231205/p18#a231205p18\">garnered a lot of press attention</a> — <em>blue bubbles for Android, finally</em>.</p>\n\n<p>Quinn Nelson had early access to Beeper Mini, and <a href=\"https://www.youtube.com/watch?v=S24TDRxEna4\">made an exemplary video showing it in action</a> and explaining in detail how it worked — including using <a href=\"https://github.com/JJTech0130/pypush\">JJTech1030’s open-source proof of concept</a> from the terminal on a Linux laptop. If you’re curious about how Beeper Mini pulled this off and what it looked like in action, watch Nelson’s video.</p>\n\n<p>I installed Beeper Mini on my Pixel 4, and it worked like a charm. In addition to working seamlessly — including support for group chats, tapbacks (albeit substituting animated emoji in place of Apple’s monochromatic badges), undoing sent messages, and editing recent messages — it’s just a really nice chat app. It looks a lot like what I’d imagine an official iMessages Android client from Apple would look like. Just like with an iPhone, Beeper Mini even worked without requiring you to sign in to an iCloud account. Beeper Mini reverse-engineered the way that Apple creates a new implicit iMessage account based on your phone number, via a one-time exchange of keys sent through SMS. But, if you wanted to use your existing iCloud account with Beeper Mini, they allowed you to sign in — which, unlike Beeper Cloud, worked with an app-specific password. When I tried Beeper Mini, I used a secondary iCloud account that I use for testing and product reviews, but even with that account, I would not have signed in if Beeper Mini didn’t support app-specific passwords.</p>\n\n<p><a href=\"https://www.theverge.com/2023/12/5/23987817/beeper-mini-imessage-android-reverse-engineer\">Migicovsky told The Verge</a> and Nelson that Beeper believed Apple would be unable to cut off their technique without also breaking iMessage for a significant number of iMessage users on actual Apple devices. I found that hard to believe, given that part of Beeper’s technique involves masquerading as a legitimate Apple device, re-using device identifiers. Others speculated that even if Apple <em>could</em> cut off Beeper Mini, either through technical changes or legal threats, they wouldn’t, lest they draw the ire of people happy to see iMessage available on Android. <a href=\"https://www.threads.net/@reckless1280/post/C0eh1CHLbU-\">E.g., Nilay Patel</a>:</p>\n\n<blockquote>\n  <p>Someone like Beeper finally reverse-engineering iMessage in this \nwas way inevitable and will cause Apple infinitely more pain and \nbad press in trying to shut it down than if it had just made \nthings interoperable to begin with. </p>\n</blockquote>\n\n<p>I found that unlikely as well. On Thursday night, two days after Beeper Mini launched, I wrote <a href=\"https://www.threads.net/@gruber/post/C0k1VgyMGZN\">on Threads</a> and <a href=\"https://mastodon.social/@gruber/111542468082463653\">Mastodon</a>:</p>\n\n<blockquote>\n  <p>My prediction is that Apple will make changes — fixing bugs \nand/or closing loopholes — that break Beeper Mini. It’s untenable \nthat there’s unsanctioned client software for a messaging platform \nfor which privacy and security are a primary feature. </p>\n\n<p>It’s a very nice app, remarkably clever, and for now works like a \ncharm, but if Apple wanted an iMessage client for Android they’d \nrelease an iMessage client for Android. Seems irresponsible for \nBeeper to charge a subscription for an unsupported service. </p>\n\n<p>I think the only way Apple doesn’t break Beeper Mini by closing \nloopholes is if they can’t, but I find that unlikely. </p>\n</blockquote>\n\n<p>Glad I predicted that Thursday night, because on Friday, <a href=\"https://www.techmeme.com/231208/p23#a231208p23\">Beeper Mini stopped working</a>. Apple also issued the following statement, which doesn’t mention Beeper by name, but didn’t need to:</p>\n\n<blockquote>\n  <p>At Apple, we build our products and services with industry-leading \nprivacy and security technologies designed to give users control \nof their data and keep personal information safe. We took steps to \nprotect our users by blocking techniques that exploit fake \ncredentials in order to gain access to iMessage. These techniques \nposed significant risks to user security and privacy, including \nthe potential for metadata exposure and enabling unwanted \nmessages, spam, and phishing attacks. We will continue to make \nupdates in the future to protect our users. </p>\n</blockquote>\n\n<p>That last sentence translates to “<em>We’ll keep closing loopholes if Beeper Mini finds another workaround.</em>”</p>\n\n<p>It’s true that a lot of people — <a href=\"https://daringfireball.net/linked/2022/01/19/cue-imessage-android\">including me</a> — wish Apple would release an iMessage client for Android.<sup><a href=\"#fn2-2023-12-10\">2</a></sup> As revealed in a deposition that was part of the <em>Epic v. Apple</em> Fortnight lawsuit, <a href=\"https://www.theverge.com/2021/4/27/22406303/imessage-android-eddy-cue-emails-apple-epic-deposition\">Eddy Cue himself pushed for Apple to release an iMessage client for Android back in 2013</a>, when Facebook bought WhatsApp for $19 billion. But that’s Apple’s decision to make, and they obviously decided against it, choosing instead to keep iMessage as a value-add exclusively for Apple devices.</p>\n\n<p>What I meant by it being “untenable” for Apple to look the other way at Beeper Mini wasn’t that Beeper made legitimate use of iMessage insecure. That’s part of the point of end-to-end encryption. But it was untenable <em>perception-wise</em> for Apple to allow unauthorized client software on a messaging platform heralded first and foremost for its privacy and security. Apple had even lost control over new account signups. That couldn’t stand, and that seems so obvious to me that I found it hard to believe Migicovsky truly believed Apple would allow it.<sup><a href=\"#fn3-2023-12-10\">3</a></sup></p>\n\n<p>But reading Migicovsky’s remarks to The Verge’s David Pierce in the wake of Apple’s response, <a href=\"https://www.theverge.com/2023/12/9/23995150/beeper-imessage-android-apple-statement\">it seems he really is surprised</a>:</p>\n\n<blockquote>\n  <p>Founder Eric Migicovsky said on Friday that he simply didn’t understand why Apple would block his app: “if Apple truly cares about the privacy and security of their own iPhone users, why would they stop a service that enables their own users to now send encrypted messages to Android users, rather than using unsecure SMS?”</p>\n\n<p>Migicovsky says now that his stance hasn’t changed, even after hearing Apple’s statement. He says he’d be happy to share Beeper’s code with Apple for a security review, so that it could be sure of Beeper’s security practices. Then he stops himself. “But I reject that entire premise! Because the position we’re starting from is that iPhone users can’t talk to Android users except through unencrypted messages.”</p>\n</blockquote>\n\n<p>Well, you know, unless they use WhatsApp or Signal <a href=\"https://arstechnica.com/tech-policy/2023/12/meta-defies-fbi-opposition-to-encryption-brings-e2ee-to-facebook-messenger/\">or, now, finally, Facebook Messenger</a>. Again, I wish Apple would release an iMessage client for Android. (But what I really wish is that they’d done so a decade ago, before current platforms had gotten so entrenched, country-by-country around the world.) But I don’t buy the argument that Apple is under any sort of ethical obligation to do so. Part of what makes iMessage so valuable is its seamlessness on iPhones — that you don’t even need to create an account when using your phone number as your identifier. What Migicovsky is implicitly arguing is that Apple is obliged to make E2EE messaging as seamless for Android users as they’ve made it for iPhone users.</p>\n\n<div>\n<hr />\n<ol>\n\n<li>\n<p>This is actually pretty interesting. Part of the onboarding for Beeper Mini on Android requires granting it permission to read and send SMS messages. Beeper Mini does work as an SMS messaging client (although they supposedly have (had?) plans to add that in the future), but it needs SMS read and write access in order to facilitate that exchange of keys to allow you to register your cellular phone number with iMessage. I believe this is what the Messages app on iPhone does too, but iOS Messages hides this handshake-over-SMS from users — it just happens behind the scenes. But on my Pixel, those SMS messages were visible in the system Messages app. First, Beeper Mini sent an SMS to 22223333 (which I presume is an Apple-controlled shortcode?):</p>\n\n<blockquote>\n  <p>REG-REQ?v=3;t=742427F5960C7B246950C6CD0F8FA3DBC8AF44B268931592099175BAE9D06618;r=2202323240;</p>\n</blockquote>\n\n<p>Then 22223333 responded with:</p>\n\n<blockquote>\n  <p>REG-RESP?v=3;r=2202323240;n=+1267•••••••;s=026570EDECFFFFFFFF6F6BC100F449F092B7ABCB7A85ADDB2B89B9BD64</p>\n</blockquote>\n\n<p>(I’ve replaced the last 7 digits of my Pixel’s phone number with bullets in the response.) This request-response handshake seems to be how Apple registers a phone number for iMessage without an associated Apple ID. <a href=\"#fnr1-2023-12-10\">↩︎︎</a></p>\n</li>\n\n\n<li>\n<p>Or open an iMessage API that could be used to create third-party clients like Beeper Mini. But an API seems far less likely than Apple releasing an iMessage app. Apple releasing an iMessage client for Android would be a pleasant surprise; Apple opening a third-party iMessage API would be shocking. <a href=\"#fnr2-2023-12-10\">↩︎</a></p>\n</li>\n\n<li>\n<p>It’s also the case that Apple just eats the cost of running iMessage — a fast, reliable messaging platform with over a billion users, and, by any reasonable estimate, <em>billions</em> of messages sent every single day (and thus, I’d wager, <em>trillions</em> per year) — at no charge and with no ads, with high-resolution image and video attachments. It’s subsidized by the sale of Apple devices. Would it pose a financial hardship to Apple to just offer iMessage free of charge to Android users? No. But the bill for running iMessage is surely significant. The whole business model for Beeper Mini presupposed that Apple should just foot the bill for the usage of Beeper’s (paying!) customers, as though iMessage is a public resource, or part of your cellular phone service, like SMS/MMS/RCS. <a href=\"#fnr3-2023-12-10\">↩︎︎</a></p>\n</li>\n\n</ol>\n</div>\n\n\n\n    ","author":"John Gruber","siteTitle":"Daring Fireball","siteHash":"fc569638025dadf22a867470f8215f38855cf50e975782a6c989909474292a36","entryHash":"9b0e34a783577f548828d18faf4d3368b581d7569238ec9fad9316d7d4b5ab3c","category":"Tech"}