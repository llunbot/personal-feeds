{"title":"Announcing Pull Through Cache Repositories for Amazon Elastic Container Registry","link":"https://aws.amazon.com/blogs/aws/announcing-pull-through-cache-repositories-for-amazon-elastic-container-registry/","date":1638204671000,"content":"<p>Organizations, development teams, and individual developers who have chosen to use containers to host their applications may prefer, or perhaps are required, to source all images from <a href=\"https://aws.amazon.com/ecr/\">Amazon Elastic Container Registry</a> to take advantage of its high availability and security. To satisfy those requirements, customers have needed to take on the burden of manually pulling images from public registries into their private Amazon Elastic Container Registry repositories, and then keeping them in sync. This adds operational complexity and maintenance costs, thereby impacting developer productivity. Additionally, some registries may have limitations or restrictions on how frequently images can be downloaded. When reached, those limitations then begin impacting developers and the release velocity of their business, due to build errors when image pulls are throttled, or even rejected.</p> \n<p>Today, we have announced pull through cache repository support in Amazon Elastic Container Registry, for publicly accessible registries that do not require authentication. Pull through cache repositories offer developers the improved performance, security, and availability of Amazon Elastic Container Registry for container images that they source from public registries. Images in pull through cache repositories are automatically kept in sync with the upstream public registries, thereby eliminating the manual work of pulling images and periodically updating.</p> \n<p>Pull through cache repositories provide the benefits of the built-in security capabilities in Amazon Elastic Container Registry, such as <a href=\"https://aws.amazon.com/privatelink/\">AWS PrivateLink</a> enabling you to keep all of the network traffic private, image scanning to detect vulnerabilities, encryption with <a href=\"https://aws.amazon.com/kms/\">AWS Key Management Service (KMS)</a> keys, cross-region replication, and lifecycle policies. When enabled, cross-region replication is designed to automatically distribute updated images to additional Regions. All you need to do is update the pull URL so that the image is downloaded from the relevant Region.</p> \n<p>When consuming images from pull through cache repositories, download throttling is also no longer a problem for developers, as well as the build and deployment infrastructure that supports their applications. Amazon Elastic Container Registry is designed to automatically keep the cache repository in sync.</p> \n<p><span><strong>Getting Started with Amazon Elastic Container Registry Pull Through Cache Repositories</strong></span><br /> Setting up pull through cache repositories is a simple process. For the following example, I’m using Amazon Elastic Container Registry Public in the South America (São Paulo) Region as my upstream registry.</p> \n<p>First, I must modify my private registry’s settings to add a rule that references the upstream, publicly accessible registry (multiple rules can be set if I need additional upstream registries). In the Amazon Elastic Container Registry console, I begin by selecting <strong>Private registry</strong>, and then select <strong>Edit</strong> in the <em>Pull through cache</em> panel to change settings. This takes me to the <strong>Pull through cache configuration</strong> page, where I select <strong>Add rule</strong>.</p> \n<p>On the <strong>Create pull through cache rule</strong> page, I choose the upstream registry, which is ECR Public in this example. I also must set a namespace that I’ll use when referring to images in my pull commands. For this example, I’ll accept the suggested namespace, <em>ecr-public</em>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/23/ecr_setting_upstream_registry.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/23/ecr_setting_upstream_registry.png\" /></a></p> \n<p>Selecting <strong>Save</strong> takes me back to the Pull through cache configuration page where my newly configured rule is listed. Now, I’m ready to utilize the cache repository when pulling images.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/23/ecr_ptc_rules.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/23/ecr_ptc_rules.png\" /></a></p> \n<p>To reference an image, I must specify the namespace that I chose in the pull URL, using the URL format <em>&lt;accountId&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/<strong>&lt;namespace&gt;</strong>/&lt;sourcerepo&gt;:&lt;tag&gt;</em>. When images are pulled, the cache repository associated with the namespace is checked for the image. In my case, the cache repository doesn’t exist yet, but I don’t have to create it myself. The image is fetched from the upstream repository in the public registry associated with the namespace, and then stored in a new cache repository that is created for me automatically.</p> \n<p>In the command prompt session below, I first authenticate with my registry, and then pull an <a href=\"https://gallery.ecr.aws/amazonlinux/amazonlinux\" target=\"_blank\">Amazon Linux 2 image</a> from Amazon Elastic Container Registry Public into the cache:</p> \n<pre><code>C:\\ aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin 111122223333.dkr.ecr.sa-east-1.amazonaws.com/ecr-public\nLogin Succeeded\nC:\\ docker pull 111122223333.dkr.ecr.sa-east-1.amazonaws.com/ecr-public/amazonlinux/amazonlinux:latest\nlatest: Pulling from ecr-public/amazonlinux/amazonlinux\ne11e8d46e102: Pull complete\nDigest: sha256:916dbbb288948b54c94b5b9f0769085aa601d4468d099e90d8a7da5cfa551b50\nStatus: Downloaded newer image for 111122223333.dkr.ecr.sa-east-1.amazonaws.com/ecr-public/amazonlinux/amazonlinux:latest\n111122223333.dkr.ecr.us-west-2.amazonaws.com/ecr-public/amazonlinux/amazonlinux:latest</code></pre> \n<p>In my Amazon Elastic Container Registry console, a check of the <strong>Repositories</strong> page shows that a new private repository has been created containing the image I pulled, together with an indication that a pull through cache is active.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/23/ecr_cached_image.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/23/ecr_cached_image.png\" /></a></p> \n<p>Working with images and the pull through cache repository is just as straightforward in Dockerfiles. All I need do is reference the image I need using the namespace in the pull URL. If the image is not in the cache repository, then it will be pulled and stored there for me. Cached images are checked once per 24 hours to verify if the cached image is the latest version, with the timer based off the last pull time of the cached image.</p> \n<p><span><strong>Start using Pull through Cache Repositories Today</strong></span><br /> Pull through cache repositories for <a href=\"https://aws.amazon.com/ecr/\">Amazon Elastic Container Registry</a> are available for you to take advantage of today in all commercial <a href=\"https://aws.amazon.com/\">AWS</a> Regions, with support for upstream repositories hosted on <a href=\"https://aws.amazon.com/ecr\">Amazon Elastic Container Registry Public</a> and <a href=\"https://quay.io/\" target=\"_blank\">Quay.io</a>. There is no charge for using pull through cache repositories, only standard Amazon Elastic Container Registry pricing for storage and data transfer charges applies. You can find more details on pricing at the <a href=\"https://aws.amazon.com/ecr/pricing/\" target=\"_blank\">Amazon Elastic Container Registry pricing page</a>. Learn more about pull through cache repositories in the <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/\" target=\"_blank\">Amazon Elastic Container Registry User Guide</a>, and get started today.</p> \n<a href=\"https://twitter.com/bellevuesteve\">— Steve</a>","author":"Steve Roberts","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"36bfd5735c8e978a2645c9c2d7b4153f89c87ef3529aedee2550a85c6e15ba10","category":"Tech"}