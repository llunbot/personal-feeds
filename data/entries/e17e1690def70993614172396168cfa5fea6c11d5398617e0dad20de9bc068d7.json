{"title":"HashiCorp at re:Invent 2024: Infrastructure Lifecycle Management with AWS","link":"https://www.hashicorp.com/blog/hashicorp-at-re-invent-2024-infrastructure-lifecycle-management-with-aws","date":1733245200000,"content":"<p>Amazon Web Services’ flagship cloud conference — <a href=\"https://www.hashicorp.com/blog/hashicorp-at-aws-re-invent-your-blueprint-for-cloud-success\">AWS re:Invent</a> — is back, and this year, as an Emerald sponsor, HashiCorp’s presence is bigger than ever. For both in-person and remote attendees, we’re pleased to share the latest news on our long-standing relationship with AWS and how we help organizations provision, secure, run, and connect applications running in AWS. </p>\n\n<p>HashiCorp <a href=\"https://www.hashicorp.com/infrastructure-cloud/infrastructure-lifecycle-management\">Infrastructure Lifecycle Management</a> (ILM) with AWS lets you build, deploy, and manage** your infrastructure lifecycle the right way by enforcing policies, boosting productivity, sharpening visibility, and removing unneeded resources on AWS. As AWS re:Invent takes center stage, it’s a great moment to reflect on our major infrastructure collaborations with AWS and significant milestones from the past year. </p>\n\n<p>Here are some highlights from 2024 with details further below:</p>\n\n<p><strong>Build.</strong> Establishing a robust and consistent approach to building your AWS environments is the cornerstone of effective ILM. Key highlights this year include:</p>\n\n<ul>\n<li><strong>3 billion downloads of the Terraform AWS provider:</strong> A testament to the trust and adoption of our tools by the community</li>\n<li><strong>AWS Cloud Control provider launch</strong>: Seamlessly provisioning and managing AWS resources across services with ease</li>\n</ul>\n\n<p><strong>Deploy.</strong> Provision the infrastructure needed to deploy an application — then schedule and make it happen. Key highlights include: </p>\n\n<ul>\n<li><strong>Pre-written Sentinel polices for AWS</strong>: Simplify governance with out-of-the-box policy enforcement</li>\n<li><strong>Provider-defined functions:</strong> Build custom functions directly within AWS providers, giving you greater flexibility</li>\n<li><strong>Terraform Stacks public beta</strong>: Streamline complex multi-account, multi-region environments</li>\n</ul>\n\n<p><strong>Manage.</strong> Provide a system of record for all infrastructure, images, workloads, and applications in one platform for visibility and management. Key highlights include: </p>\n\n<ul>\n<li><strong>AppFabric support</strong>: Expanding HCP Terraform integration capabilities with AWS</li>\n<li><strong>OIDC federation for HCP Terraform</strong>: Simplify and secure AWS access directly from HCP Terraform</li>\n</ul>\n\n<h2>Build</h2>\n\n<h3>3 billion downloads of the Terraform AWS provider</h3>\n\n<p>This year, we reached the 10th anniversary of the Terraform AWS provider and <a href=\"https://www.hashicorp.com/blog/terraform-aws-provider-tops-3-billion-downloads\">crossed three billion downloads</a>. These milestones represent the collective success of AWS builders and the essential role Terraform plays in shaping the future of infrastructure management. It underscores the growing recognition of the need for standardized IaC solutions as organizations scale. Terraform plays a pivotal role in empowering application teams to compose, reuse, and collaborate effectively on infrastructure provisioning, ultimately accelerating the build and deployment process. We look forward to the next major milestones. </p>\n<img src=\"https://www.datocms-assets.com/2885/1733158256-screenshot-2024-12-02-at-11-50-12-am.png\" alt=\"3B\" /><h3>AWS Cloud Control provider launch</h3>\n\n<p>Built around the AWS Cloud Control API and designed to bring new services to HashiCorp Terraform faster, the <a href=\"https://www.hashicorp.com/blog/terraform-aws-cloud-control-api-provider-now-generally-available\">AWS Cloud Control (AWSCC) provider is now generally available</a>. The 1.0 release of the AWSCC provider represents another step forward in our effort to offer launch-day support for AWS services. The <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest\">Terraform AWS Cloud Control provider</a> is automatically generated based on the Cloud Control API published by AWS, which means the latest features and services on AWS can be supported right away. </p>\n\n<p>The AWSCC provider is a great complementary provider to add to your existing Terraform configurations that use the standard <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest\">AWS provider.</a> Given its ability to automatically support new features and services, this AWSCC provider will increase resource coverage and significantly reduce the time it takes to support new capabilities.</p>\n\n<h2>Deploy</h2>\n\n<h3>Pre-written Sentinel polices for AWS</h3>\n\n<p>Earlier in June, in partnership with AWS, HashiCorp agreed to <a href=\"https://www.globenewswire.com/news-release/2024/06/04/2893429/0/en/HashiCorp-and-AWS-sign-strategic-collaboration-agreement-to-expand-joint-product-and-go-to-market-initiatives.html\">co-develop a comprehensive set of Terraform policies</a> to provide expert guidance for architecting, configuring, and operating on AWS. These policies will enforce compliance with standards such as CIS, HIPAA, FINOS, and the <a href=\"https://aws.amazon.com/architecture/well-architected/?wa-lens-whitepapers.sort-by=item.additionalFields.sortDate&amp;wa-lens-whitepapers.sort-order=desc&amp;wa-guidance-whitepapers.sort-by=item.additionalFields.sortDate&amp;wa-guidance-whitepapers.sort-order=desc\">AWS Well-Architected Framework</a>.</p>\n\n<p>This joint effort is intended to help customers implement infrastructure and security lifecycle management, accelerate time-to-value, mitigate implementation risk, and provide a framework to address outcome-driven use cases surrounding security and compliance.</p>\n\n<p>At re:Invent, we are excited to announce the public beta of <a href=\"https://www.hashicorp.com/blog/simplify-policy-adoption-in-terraform-with-pre-written-sentinel-policies-for-aws\">pre-written Sentinel policy sets for AWS</a>, now available for use in the <a href=\"https://registry.terraform.io/\">Terraform registry</a>. These new policies are co-created and co-owned by HashiCorp and AWS, and are written specifically to help organizations comply with industry standards. With this release, we aim to lower the barrier of adoption for infrastructure policy enforcement and accelerate the time to value for customers looking to address cloud governance at scale. For more information on this collaborative effort, please see our blog post or the <a href=\"https://aws-blogs-prod.amazon.com/apn/scale-your-aws-environment-securely-with-hashicorp-terraform-and-sentinel-policy-as-code\">AWS blog post</a>.</p>\n\n<p>This first set of policies has been written specifically for AWS services in compliance with the <a href=\"https://www.cisecurity.org/cis-benchmarks\">Center for Internet Security (CIS)</a>. CIS is a non-profit organization that provides prescriptive configuration recommendations that represent the consensus-based effort of cybersecurity globally. Our pre-written policy sets help with CIS benchmarks v1.2, v1.4, and v3.0, with supported services including EC2, IAM, Cloudtrail, S3 and more. </p>\n\n<p>Users can now browse the <a href=\"https://registry.terraform.io/browse/policies\">Terraform Registry Policy Library</a> to discover and reference the pre-built policies. With Sentinel’s native integration, users can quickly deploy the policy sets into their HCP Terraform organizations. Sentinel policy will inspect the Terraform configuration plan and block resource provisioning if it fails one of the defined policy checks. </p>\n<h3>Provider-defined functions</h3>\n\n<p><a href=\"https://developer.hashicorp.com/terraform/plugin/framework/functions/concepts\">Provider-defined functions</a> in the AWS provider represent yet another step forward in our unique approach to ecosystem extensibility. Provider-defined functions will allow anyone in the Terraform community to build custom functions within the AWS providers and extend the capabilities of Terraform.</p>\n\n<p>The <a href=\"https://github.com/hashicorp/terraform-provider-aws/releases/tag/v5.40.0\">5.40</a> release of the <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest\">Terraform AWS provider</a> includes its first provider-defined functions to parse and build Amazon Resource Names (ARNs), simplifying Terraform configurations where ARN manipulation is required. The <code><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/functions/arn_parse\">arn_parse</a></code> provider-defined function is used to parse an ARN and return an object of individual referenceable components, such as a region or account identifier.</p>\n\n<h3>Terraform Stacks public beta</h3>\n\n<p><a href=\"https://www.hashicorp.com/blog/terraform-stacks-explained\">Terraform Stacks</a> are a feature intended to simplify infrastructure provisioning and management at scale. When deploying and managing infrastructure at scale, teams usually need to provision the same infrastructure multiple times with different input values, across multiple cloud provider accounts, regions, environments (dev, staging, production) and landing zones. </p>\n\n<p>Before Terraform Stacks, there was no built-in way to provision and manage the lifecycle of these instances as a single unit in Terraform, making it difficult to manage each infrastructure root module individually. Now, Stacks help users automate and optimize the coordination, deployment, and lifecycle management of interdependent Terraform configurations, reducing the time and overhead of managing infrastructure.</p>\n\n<h2>Manage</h2>\n\n<h3>AppFabric support for Terraform</h3>\n\n<p><a href=\"https://aws.amazon.com/about-aws/whats-new/2024/02/aws-appfabric-cisco-duo-terraform/\">AWS AppFabric now supports Terraform</a>. IT administrators and security analysts can use AppFabric to quickly integrate with Terraform, aggregate enriched and normalized SaaS audit logs, and audit end-user access across their SaaS apps. This launch expands AWS AppFabric <a href=\"https://docs.aws.amazon.com/appfabric/latest/adminguide/supported-applications.html\">supported applications</a> used across an organization.</p>\n\n<p>AWS AppFabric quickly connects SaaS applications, or data lakes like Amazon Security Lake. For HCP Terraform users, this integration can accelerate time-to-market and help developers release new features to production faster with streamlined infrastructure provisioning and application delivery workflows.</p>\n\n<p>To learn more, visit the <a href=\"https://aws.amazon.com/appfabric/\">AWS AppFabric page</a> and then check out <a href=\"https://docs.aws.amazon.com/appfabric/latest/adminguide/terraform.html\">how to connect AppFabric to your Terraform account.</a></p>\n\n<h3>OIDC federation for HCP Terraform</h3>\n\n<p>Storing access keys in Terraform configurations poses a security risk. While HCP Terraform secures sensitive credentials as write-only variables, you must audit the usage of long-lived access keys to detect if they are compromised. Not only is leaking the access key a risk, but many organizations have a policy to block the creation of such access keys.</p>\n\n<p>Fortunately, in many cases, you can authenticate with more secure alternatives to access keys. One such alternative is <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html\">AWS IAM OIDC federation</a>, which uses identity and access management (IAM) to grant external identities (such as HCP Terraform) the ability to <a href=\"https://docs.aws.amazon.com/sdkref/latest/guide/access-assume-role.html#credOrSourceAssumeRole\">assume</a> an IAM role.</p>\n\n<p>HCP Terraform’s <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials\">dynamic provider credentials</a> allow Terraform runs to assume an IAM role through native OpenID Connect (OIDC) integration and obtain temporary security credentials for each run. These AWS credentials allow you to call AWS APIs that the IAM role has access to at runtime. These credentials are usable for only one hour by default, so their usefulness to an attacker is limited. </p>\n\n<p>This <a href=\"https://www.hashicorp.com/blog/access-aws-from-hcp-terraform-with-oidc-federation\">brief tutorial</a> will show you how to set up an OIDC provider and access AWS from HCP Terraform using dynamic provider credentials and OIDC federation.</p>\n\n<h2><strong>Learn more about AWS and HashiCorp</strong></h2>\n\n<p><a href=\"https://www.hashicorp.com/partners/cloud/aws\">AWS and HashiCorp</a> continue to extend our partnership, building new integrations to help customers work faster, take advantage of more services and features, and provide developer-friendly ways to deploy cloud infrastructure.</p>\n\n<p>To learn the basics of Terraform using the AWS provider, follow the hands-on tutorials for <a href=\"https://developer.hashicorp.com/terraform/tutorials/aws-get-started\">getting started with Terraform on AWS</a> on our developer education platform. Interact with AWS services, including Lambda, RDS, and IAM, by following the <a href=\"https://developer.hashicorp.com/terraform/tutorials/aws\">AWS services tutorials</a>.</p>\n","author":"Mike Doheny","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"e17e1690def70993614172396168cfa5fea6c11d5398617e0dad20de9bc068d7","category":"Tech"}