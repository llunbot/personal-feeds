{"title":"Beta Support for CRDs in the Terraform Provider for Kubernetes","link":"https://www.hashicorp.com/blog/beta-support-for-crds-in-the-terraform-provider-for-kubernetes","date":1628017200000,"content":"<p>In 2020 we released the <a href=\"https://github.com/hashicorp/terraform-provider-kubernetes-alpha\">kubernetes-alpha</a> project: an experimental provider with the goal of giving practitioners a dynamic way to manage any Kubernetes API resource using <a href=\"https://terraform.io\">HashiCorp Terraform</a>. This new provider contained only a single resource, named <code>kubernetes_manifest</code>, which provided an HCL analog for Kubernetes YAML manifests.</p>\n<p>The <code>kubernetes_manifest</code> resource from the kubernetes-alpha project is now in beta, and a part of the official <a href=\"https://github.com/hashicorp/terraform-provider-kubernetes\">Terraform Provider for Kubernetes</a>. This addition allows users to manage custom resource definitions (CRDs), custom resources, and any additional Kubernetes resources that are not otherwise supported by the official provider — without having to use any additional providers.</p>\n<h2><a href=\"#example-usage\">»</a><a></a>Example Usage</h2>\n<p>Since the <code>kubernetes_manifest</code> resource is still in beta, we added it to the official provider as an experimental feature that can be enabled in the provider’s configuration block. This resource provides a pure Terraform way of declaring any arbitrary Kubernetes manifest using HCL.</p><pre><code>provider \"kubernetes\" {\n  experiments {\n    manifest_resource = true\n  }\n  config_path = \"~/.kube/config\"\n}\n\nresource \"kubernetes_manifest\" \"example\" {\n  manifest = {\n    apiVersion = \"v1\"\n    kind = \"ConfigMap\"\n    metadata = {\n      name = \"example\"\n    }\n    data = {\n      provider = \"Terraform\"\n    }\n  }\n}</code></pre><p>The <code>kubernetes_manifest</code> resource can be used to create any Kubernetes API resource, including <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\">custom resource definitions</a>. See the <a href=\"https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs/resources/manifest\">provider documentation page</a> for more information on the additional attributes available for this resource.</p>\n<h2><a href=\"#adoption\">»</a><a></a>Adoption</h2>\n<p>We recommend converting your YAML manifests to HCL for use with the provider. You can do this using the <a href=\"https://www.terraform.io/docs/language/functions/yamldecode.html\">yamldecode</a> function in the <a href=\"https://www.terraform.io/docs/cli/commands/console.html\">Terraform console</a>, or with the community tool <a href=\"https://github.com/jrhouston/tfk8s\">tfk8s</a>.</p>\n<p>You can also use our Learn guide on <a href=\"https://learn.hashicorp.com/tutorials/terraform/kubernetes-crd-faas?in=terraform/kubernetes\">Managing Kubernetes Custom Resources with Terraform</a>.</p>\n<h2><a href=\"#migration-from-kubernetes-alpha\">»</a><a></a>Migration From kubernetes-alpha</h2>\n<p>If you were already using the kubernetes-alpha provider alongside the official Kubernetes provider, you can simply remove the kubernetes-alpha provider block and <code>provider = kubernetes-alpha</code> attribute and the resource will continue to work with the official provider.</p>\n<p>If you were using the kubernetes-alpha provider on its own, you should remove the <code>provider = kubernetes-alpha</code> attribute and replace the provider configuration block with one from the official provider as seen in the example above.</p>\n<p>See our <a href=\"https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs/guides/alpha-manifest-migration-guide\">migration guide</a> for more information.</p>\n<h2><a href=\"#how-the-kubernetes_manifest-resource-works\">»</a><a></a>How the kubernetes_manifest Resource Works</h2>\n<p>Manifests for Kubernetes resources, particularly custom resources, are very dynamic in nature. This means that it’s impractical for us to maintain a provider that is statically built to support the schemas of every possible Kubernetes resource. Just maintaining parity with the core Kubernetes API keeps our team and contributors busy.</p>\n<p>As a solution, we created the <code>kubernetes_manifest</code> resource using <a href=\"https://github.com/hashicorp/terraform-plugin-go\">terraform-plugin-go</a>. This allows us greater access to Terraform’s plugin protocol to generate the type information that’s needed by querying the OpenAPI specification from the Kubernetes API at plan time, and then storing it as an attribute of the type object. Once the plan has been generated, we use <a href=\"https://kubernetes.io/docs/reference/using-api/server-side-apply/\">server side apply</a> to apply the manifest. This gives us a native Terraform way of expressing a Kubernetes manifest without resorting to strings containing YAML or JSON.</p>\n<p>We were then able to merge the code from the kubernetes-alpha repository into the official provider and use <a href=\"https://github.com/hashicorp/terraform-plugin-mux\">terraform-plugin-mux</a> to allow the <code>kubernetes_manifest</code> resource to be used alongside the other Kubernetes resources officially supported by Terraform.</p>\n<h2><a href=\"#limitations\">»</a><a></a>Limitations</h2>\n<p>As the <code>kubernetes_manifest</code> resource is dynamic in nature, you need to be aware of a few limitations compared to resources built into the Kubernetes provider.</p>\n<ol>\n<li>\n<p><strong>Access to the Kubernetes API is required at plan time.</strong> This means that a Kubernetes cluster must be created and available in a separate Terraform apply operation before you can apply a <code>kubernetes_manifest</code> resource. This is because the provider has to fetch the OpenAPI specification from the Kubernetes API to generate the type information required by Terraform.</p>\n</li>\n<li>\n<p><strong>Custom resource definitions must be applied before custom resources.</strong> As above, this is because the provider queries the Kubernetes API for the OpenAPI specification for the resource supplied in the manifest attribute. If the CRD doesn’t exist in the OpenAPI specification during plan time then Terraform can’t use it to create custom resources.</p>\n</li>\n<li>\n<p><strong>Each manifest resource can contain only one Kubernetes resource.</strong> Each Terraform resource represents the state for a single Kubernetes resource, so your manifest can not contain multiple YAML documents or a manifest that is a list of resources – they must be broken up into individual resources.</p>\n</li>\n<li>\n<p><strong>Slower performance.</strong> When using the <code>kubernetes_manifest</code> resource, the provider has to query for and generate the type information for that resource’s schema. So we recommend that if your resource is already supported as a named resource in the provider, you should use that, as the plan will run faster.</p>\n</li>\n</ol>\n<h2><a href=\"#future-work\">»</a><a></a>Future Work</h2>\n<p>We added the <code>kubernetes_manifest</code> feature to the provider as an opt-in experiment, so we expect to collect feedback on how the resource fits into existing workflows that will shape any changes before we remove the experiment flag and consider the feature generally available. Please <a href=\"https://github.com/hashicorp/terraform-provider-kubernetes/issues\">file issues</a> generously if you encounter any.</p>\n<p>We also expect to add import support, greater flexibility in waiting for conditions and events, and a data source that is an analog to the manifest resource.</p>\n<h2><a href=\"#want-to-contribute\">»</a><a></a>Want to Contribute?</h2>\n<p>The kubernetes-alpha repository has now been archived and the provider code and issues have been moved to the repository for the <a href=\"https://github.com/hashicorp/terraform-provider-kubernetes\">official provider</a>. Please see our <a href=\"https://github.com/hashicorp/terraform-provider-kubernetes/blob/main/_about/CONTRIBUTING.md\">contributing guide</a> and talk to us on Slack (#terraform-providers on the Kubernetes Slack) if you want to help improve the Terraform and Kubernetes experience.</p>\n<p>Special thanks to Alex Somesan and Stef Forrester on the Terraform OSS team for all their hard work developing and testing the provider, and to <a href=\"https://github.com/hashicorp/terraform-provider-kubernetes-alpha/graphs/contributors\">all of the contributors</a> to the kubernetes-alpha repository for making the <code>kubernetes_manifest</code> feature possible.</p>","author":"John Houston","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"e58361d5248b82df49795cfb8c6d8985ff505c509aca5e0bab2d3eeec0137b43","category":"Tech"}