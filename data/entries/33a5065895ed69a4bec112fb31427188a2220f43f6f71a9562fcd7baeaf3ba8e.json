{"title":"New Terraform Cloud capabilities to import, view, and manage infrastructure","link":"https://www.hashicorp.com/blog/new-terraform-cloud-capabilities-to-import-view-and-manage-infrastructure","date":1686643200000,"content":"<p>Today at <a href=\"https://hashidays.com/\">HashiDays</a>, we are excited to announce new capabilities for HashiCorp Terraform Cloud, making it easier to import, view, validate, and manage resources across your entire infrastructure. </p>\n\n<p>The announcements include:</p>\n\n<ul>\n<li>Explorer for workspace visibility (beta)</li>\n<li>Ephemeral workspaces (coming soon)</li>\n<li>Config-driven import (GA)</li>\n<li>Continuous validation with Terraform checks (GA)</li>\n</ul>\n\n<h2>Terraform is designed to secure infrastructure</h2>\n\n<p>According to the <a href=\"https://www.hashicorp.com/state-of-the-cloud\">2023 State of Cloud Strategy Survey</a>, commissioned by HashiCorp and conducted by Forrester Consulting, security initiatives are critical cloud strategy drivers, and 88% of respondents see security as a key factor in cloud success. Meanwhile, 92% of respondents see multi-cloud as helping to achieve or expected to achieve their organization’s business goals. </p>\n\n<p>So how can customers manage multiple environments without increased risks and complexity? Terraform is a key part of the solution.</p>\n\n<p>Earlier this year, HashiCorp released <a href=\"https://www.hashicorp.com/blog/terraform-cloud-adds-dynamic-provider-credentials-vault-official-cloud-providers\">dynamic provider credentials</a> for secure, short-lived authentication, giving platform teams a way to securely authenticate to Terraform providers. Dynamic provider credentials use just-in-time (JIT) access to reduce the risk and complexity associated with storing long-lived static credentials in Terraform. </p>\n\n<p>In April, Terraform added <a href=\"https://www.hashicorp.com/blog/terraform-cloud-adds-vault-backed-dynamic-credentials\">Vault-backed dynamic credentials</a>, which combine dynamic provider credentials with<a href=\"https://developer.hashicorp.com/vault/docs/secrets\"> Vault secrets engines</a> to offer a consolidated workflow. This approach authenticates Terraform runs to Vault using workload identity tokens generated by Terraform Cloud, then uses Vault secrets engines to generate dynamic credentials for the Amazon Web Services (AWS), Microsoft Azure, and Google Cloud providers. This authentication method is a significant enhancement for customers already using Vault for on-demand cloud access and for any organization seeking to reduce the risks of managing credentials.</p>\n\n<p>Today's announcements further bolster secure infrastructure provisioning and management from Terraform.</p>\n\n<h2>Explorer provides workspace visibility across all infrastructure</h2>\n\n<p>When organizations scale their cloud environments and DevOps teams with multiple technologies and tools, it can become difficult to keep the software — including module, provider, and Terraform versions — up to date across teams. This can lead to teams using deprecated or revoked versions, which poses a security risk. What teams need is a way to view the versions of those Terraform components across all workspaces to see which workspaces might be falling behind.</p>\n\n<p>Explorer for Terraform Cloud provides a consolidated view of workspace data across your organization, including information on providers, modules, Terraform versions, and <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/health\">health checks</a> from drift detection and continuous validation. This consolidated view helps teams ensure their environments have the necessary up-to-date versions for Terraform, modules, and providers, while tracking health checks ensures security, reliability, and compliance. </p>\n\n<p>Using explorer, platform teams can determine which versions to remediate when vulnerabilities or misconfigurations are discovered. They can then notify the appropriate workspace owners to upgrade by identifying all workspaces utilizing a specific version. Manually building a report with all of this data could take weeks, but with explorer it can be done in minutes.</p>\n<h2>Ephemeral workspaces remove unused resources</h2>\n\n<p>Unused or forgotten infrastructure constitutes a runaway cost for many organizations. These costs can be mitigated if administrators have effective methods to enforce time-to-live policies for infrastructure resources.</p>\n\n<p>Terraform Cloud’s upcoming ephemeral workspaces will allow customers to set timeouts that automatically destroy temporary resources. For administrators, this should eliminate a large amount of manual clean-up, reduce infrastructure costs, and further simplify workspace management and testing. </p>\n\n<p>Ephemeral workspaces work with existing workspace permissions and have a simple workflow. Just set a date when you would like the workspace to be deprovisioned. Then, once that date is reached, Terraform will automatically run a <code>destroy</code> plan and apply it to destroy your managed resources. A reminder notification will be sent before it starts and after the run is finished to indicate success or failure. </p>\n\n<p>Unused resources also represent more potential attack surfaces for malicious actors. Therefore, removing unused workspaces will be important not just for cost control, but for security as well.</p>\n\n<h2>Config-driven import simplifies migration to Terraform</h2>\n\n<p>A unified workflow for all infrastructure reduces risks and alleviates <a href=\"https://www.hashicorp.com/state-of-the-cloud#mature-organizations-handle-staffing-and-skills-issues-better\">skills gaps that many organizations identify as a common barrier to multi-cloud</a>. While Terraform provides a single workflow for all infrastructure, we understand that not all infrastructure resources are provisioned through Terraform today. Customers need to migrate unmanaged resources (from API, CLI, or web console) into Terraform to reduce costs and improve security. The Terraform <code>import</code> command was a good first step in simplifying migration to Terraform, but resources had to be imported one at a time and the matching resource code had to be created manually. Further, import was not supported for VCS and UI-driven workflows in Terraform Cloud, meaning state and provider credentials had to be exposed to direct access from the developer’s local machine.</p>\n\n<p>Config-driven import — released in Terraform 1.5 and now available in Terraform Cloud — provides a more automated, efficient, and secure way to plan multiple imports with existing VCS, UI, and CLI workflows. It enables bulk imports while Terraform Cloud continues to secure the state and credentials. This reduces risks and eliminates the complexity of coordination across multiple users to prevent conflicting operations that lead to resources being deleted. Another benefit is auto-generated configuration — no more repetition between running a plan, referencing documentation, and updating configurations. For more information read our <a href=\"https://www.hashicorp.com/blog/terraform-1-5-brings-config-driven-import-and-checks\">Terraform 1.5 release blog</a>.</p>\n<img src=\"https://www.datocms-assets.com/2885/1686603598-config-driven-import-1.png\" alt=\"Multiple\" /><img src=\"https://www.datocms-assets.com/2885/1686603612-config-drivne-2.png\" alt=\"Auto-generated\" /><h2>Continuous validation ensures infrastructure works as expected</h2>\n\n<p>It is challenging and time-consuming to maintain infrastructure health and security, especially when using integrated third-party solutions. Users often need to check multiple dashboards manually and continuously. </p>\n\n<p>To alleviate these challenges in infrastructure tracking and management, we announced the <a href=\"https://www.hashicorp.com/blog/terraform-gains-visibility-self-service-and-compliance-upgrades\">beta version of continuous validation</a> at HashiConf Global 2022. In that beta, continuous validation allowed customers to add custom conditions to Terraform configurations and/or modules. Today, we’ve announced the general availability of continuous validation for Terraform Cloud Plus, which now supports checks — a new feature in Terraform 1.5, which gives customers more flexible options to validate their infrastructure uptime, health, and security — all in one place without requiring additional tools. </p>\n\n<p>Continuous validation sends notifications immediately when things fail, so customers can quickly take action to remedy the situation. For example, by using Terraform checks to continuously validate certification expiration dates, platform administrators can avoid downtime caused by expired certificates. Other use cases include evaluating the status of resources and checking if an app is returning an expected result or if a monitoring metric is exceeding a threshold.</p>\n\n<p>Terraform checks also present new opportunities for provider authors to expose additional data to help users perform functional validation. Here are a few examples of how customers can use continuous validation with the leading cloud and technology partners: </p>\n\n<ul>\n<li><strong>AWS:</strong> Ensure your AWS account is within budget and detect threats with detailed findings for AWS accounts. (See: <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/guides/continuous-validation-examples\">Using Terraform Cloud's continuous validation feature with AWS</a>.)</li>\n<li><strong>Google Cloud</strong>: Assert a VM is in a running state, check if a certificate will expire within a certain timeframe, and validate the status of a cloud function. (See: <a href=\"https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/google-continuous-validation\">Using Terraform Cloud's continuous validation feature with Google Cloud</a>.)</li>\n<li><strong>Azure:</strong> Assert if a VM is in a running state, monitor if a Container App certificate will expire within a certain timeframe, and check if an App Service Function or Web App has exceeded its usage limit. (See: <a href=\"https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/tfc-check-blocks\">Using Terraform Cloud's continuous validation feature with Azure</a>.)</li>\n<li><strong>New Relic</strong>: Assert the configuration or status of your New Relic notification destination and validate the age of a New Relic secure credential. (See: <a href=\"https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/guides/continuos_validation_with_terraform_cloud\">New Relic Terraform Provider: Continuous Validation with Terraform Cloud</a>)</li>\n</ul>\n<h2>Try Terraform Cloud today</h2>\n\n<p>Terraform is the industry standard for provisioning and managing any infrastructure. It offers a way to standardize infrastructure automation for any resource and provides a shared provisioning service within organizations. With new features such as continuous validation, explorer, and config-driven import (available today and coming soon to Terraform Enterprise) alongside upcoming ephemeral workspaces, platform teams can better leverage Terraform to gain efficiency, reduce risks, and optimize costs. Try these new features today — and if you are new to Terraform, <a href=\"https://app.terraform.io/public/signup/account\">sign up for Terraform Cloud</a> and get started using the Free offering today.</p>\n","author":"Yushuo Huang","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"33a5065895ed69a4bec112fb31427188a2220f43f6f71a9562fcd7baeaf3ba8e","category":"Tech"}