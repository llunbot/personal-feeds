{"title":"Zonal autoshift – Automatically shift your traffic away from Availability Zones when we detect potential issues","link":"https://aws.amazon.com/blogs/aws/zonal-autoshift-automatically-shift-your-traffic-away-from-availability-zones-when-we-detect-potential-issues/","date":1701369838000,"content":"<p>Today we’re launching zonal autoshift, a new capability of <a href=\"https://aws.amazon.com/route53/application-recovery-controller/\">Amazon Route 53 Application Recovery Controller</a> that you can enable to <strong>automatically</strong> and <strong>safely</strong> shift your workload’s traffic away from an <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones\">Availability Zone</a> when AWS identifies a potential failure affecting that Availability Zone and shift it back once the failure is resolved.</p> \n<p>When deploying resilient applications, you typically deploy your resources across multiple Availability Zones in a Region. Availability Zones are distinct groups of physical data centers at a meaningful distance apart (typically miles) to make sure that they have diverse power, connectivity, network devices, and flood plains.</p> \n<p>To help you protect against an application’s errors, like a failed deployment, an error of configuration, or an operator error, we introduced last year <a href=\"https://aws.amazon.com/blogs/networking-and-content-delivery/rapidly-recover-from-application-failures-in-a-single-az/\">the ability to manually or programmatically trigger a zonal shift.</a> This enables you to shift the traffic away from one Availability Zone when you observe degraded metrics in that zone. It does so by configuring your load balancer to direct all new connections to infrastructure in healthy Availability Zones only. This allows you to preserve your application’s availability for your customers while you investigate the root cause of the failure. Once fixed, you stop the zonal shift to ensure the traffic is distributed across all zones again.</p> \n<p>Zonal shift works at the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html\">Application Load Balancer</a> (ALB) or <a href=\"https://aws.amazon.com/elasticloadbalancing/network-load-balancer/\">Network Load Balancer</a> (NLB) level only when <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/network/target-group-cross-zone.html\">cross-zone load balancing</a> is turned off, which is the default for NLB. In a nutshell, load balancers offer two levels of load balancing. The first level is configured in the DNS. Load balancers expose one or more IP addresses for each Availability Zone, offering a client-side load balancing between zones. Once the traffic hits an Availability Zone, the load balancer sends traffic to registered healthy targets, typically an <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instance. By default, ALBs send traffic to targets across all Availability Zones. For zonal shift to properly work, you must configure your load balancers to disable cross-zone load balancing.</p> \n<p>When zonal shift starts, the DNS sends all traffic away from one Availability Zone, as illustrated by the following diagram.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/15/zonal-shift-v02.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/15/zonal-shift-v02.png\" alt=\"ARC Zonal Shift\" width=\"800\" height=\"299\" /></a></p> \n<p>Manual zonal shift helps to protect your workload against errors originating from your side. But when there is a potential failure in an Availability Zone, it is sometimes difficult for you to identify or detect the failure. Detecting an issue in an Availability Zone using application metrics is difficult because, most of the time, you don’t track metrics per Availability Zone. Moreover, your services often call dependencies across Availability Zone boundaries, resulting in errors seen in all Availability Zones. With modern microservice architectures, these detection and recovery steps must often be performed across tens or hundreds of discrete microservices, leading to recovery times of multiple hours.</p> \n<p>Customers asked us if we could take the burden off their shoulders to detect a potential failure in an Availability Zone. After all, we might know about potential issues through our internal monitoring tools before you do.</p> \n<p>With this launch, you can now configure <strong>zonal autoshift</strong> to protect your workloads against potential failure in an Availability Zone. We use our own AWS internal monitoring tools and metrics to decide when to trigger a network traffic shift. The shift starts automatically; there is no API to call. When we detect that a zone has a potential failure, such as a power or network disruption, we automatically trigger an autoshift of your infrastructure’s NLB or ALB traffic, and we shift the traffic back when the failure is resolved.</p> \n<p>Obviously, shifting traffic away from an Availability Zone is a delicate operation that must be carefully prepared. We built a series of safeguards to ensure we don’t degrade your application availability by accident.</p> \n<p>First, we have internal controls to ensure we shift traffic away from no more than one Availability Zone at a time. Second, we practice the shift on your infrastructure for 30 minutes every week. You can define blocks of time when you don’t want the practice to happen, for example, 08:00–18:00, Monday through Friday. Third, you can define two <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> alarms to act as a <a href=\"https://docs.aws.amazon.com/prescriptive-guidance/latest/cloud-design-patterns/circuit-breaker.html\">circuit breaker</a> during the practice run: one alarm to prevent starting the practice run at all and one alarm to monitor your application health during a practice run. When either alarm triggers during the practice run, we stop it and restore traffic to all Availability Zones. The state of application health alarm at the end of the practice run indicates its outcome: success or failure.</p> \n<p>According to the principle of <a href=\"https://aws.amazon.com/compliance/shared-responsibility-model/\">shared responsibility</a>, you have two responsibilities as well.</p> \n<p>First you must ensure there is enough capacity deployed in all Availability Zones to sustain the increase of traffic in remaining Availability Zones after traffic has shifted. We strongly recommend having enough capacity in remaining Availability Zones at all times and not relying on scaling mechanisms that could delay your application recovery or impact its availability. When zonal autoshift triggers, <a href=\"https://aws.amazon.com/autoscaling\">AWS Auto Scaling</a> might take more time than usual to scale your resources. Pre-scaling your resource ensures a predictable recovery time for your most demanding applications.</p> \n<p>Let’s imagine that to absorb regular user traffic, your application needs six EC2 instances across three Availability Zones (2×3 instances). Before configuring zonal autoshift, you should ensure you have enough capacity in the remaining Availability Zones to absorb the traffic when one Availability Zone is not available. In this example, it means three instances per Availability Zone (3×3 = 9 instances with three Availability Zones in order to keep 2×3 = 6 instances to handle the load when traffic is shifted to two Availability Zones).</p> \n<p>In practice, when operating a service that requires high reliability, it’s normal to operate with some redundant capacity online for eventualities such as customer-driven load spikes, occasional host failures, etc. Topping up your existing redundancy in this way both ensures you can recover rapidly during an Availability Zone issue but can also give you greater robustness to other events.</p> \n<p>Second, you must explicitly enable zonal autoshift for the resources you choose. AWS applies zonal autoshift only on the resources you chose. Applying a zonal autoshift will affect the total capacity allocated to your application. As I just described, your application must be prepared for that by having enough capacity deployed in the remaining Availability Zones.</p> \n<p>Of course, deploying this extra capacity in all Availability Zones has a cost. When we talk about resilience, there is a business tradeoff to decide between your application availability and its cost. This is another reason why we apply zonal autoshift only on the resources you select.</p> \n<p><span><strong>Let’s see how to configure zonal autoshift<br /> </strong></span>To show you how to configure zonal autoshift, I deploy my now-famous <a href=\"https://github.com/sebsto/tictactoe-dynamodb/\">TicTacToe web application</a> using a <a href=\"https://github.com/sebsto/tictactoe-cdk/tree/main/app\">CDK script</a>. I open the <strong>Route 53 Application Recovery Controller</strong> page of the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a>. On the left pane, I select <strong>Zonal autoshift</strong>. Then, on the welcome page, I select <strong>Configure zonal autoshift for a resource</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/22/2023-10-22_18-16-31.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/22/2023-10-22_18-16-31.png\" alt=\"Zonal autoshift - 1\" width=\"800\" height=\"390\" /></a></p> \n<p>I select the load balancer of my demo application. Remember that currently, only load balancers with cross-zone load balancing turned off are eligible for zonal autoshift. As the warning on the console reminds me, I also make sure my application has enough capacity to continue to operate with the loss of one Availability Zone.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/22/2023-10-22_18-19-08-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/22/2023-10-22_18-19-08-1.png\" alt=\"Zonal autoshift - 2\" width=\"800\" height=\"455\" /></a></p> \n<p>I scroll down the page and configure the times and days I don’t want AWS to run the 30-minute practice. At first, and until I’m comfortable with autoshift, I block the practice 08:00–18:00, Monday through Friday. Pay attention that hours are expressed in UTC, and they don’t vary with <a href=\"https://en.wikipedia.org/wiki/Daylight_saving_time\">daylight saving time</a>. You may use a <a href=\"https://www.google.com/search?client=firefox-b-d&amp;q=utc+coverter\">UTC time converter application</a> for help. While it is safe for you to exclude business hours at the start, we recommend configuring the practice run also during your business hours to ensure capturing issues that might not be visible when there is low or no traffic on your application. You probably most need zonal autoshift to work without impact at your peak time, but if you have never tested it, how confident are you? Ideally, you don’t want to block any time at all, but we recognize that’s not always practical.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/22/2023-10-22_18-19-20.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/22/2023-10-22_18-19-20.png\" alt=\"Zonal autoshift - 3\" width=\"800\" height=\"514\" /></a></p> \n<p>Further down on the same page, I enter the two circuit breaker alarms. The first one prevents the practice from starting. You use this alarm to tell us this is not a good time to start a practice run. For example, when there is an issue ongoing with your application or when you’re deploying a new version of your application to production. The second CloudWatch alarm gives the outcome of the practice run. It enables zonal autoshift to judge how your application is responding to the practice run. If the alarm stays green, we know all went well.</p> \n<p>If either of these two alarms triggers during the practice run, zonal autoshift stops the practice and restores the traffic to all Availability Zones.</p> \n<p>Finally, I acknowledge that a 30-minute practice run will run weekly and that it might reduce the availability of my application.</p> \n<p>Then, I select <strong>Create</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/22/2023-10-22_18-19-25-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/10/22/2023-10-22_18-19-25-1.png\" alt=\"Zonal autoshift - 4\" width=\"800\" height=\"441\" /></a>And that’s it.</p> \n<p>After a few days, I see the history of the practice runs on the <strong>Zonal shift history for resource</strong> tab of the console. I monitor the history of my two circuit breaker alarms to stay confident everything is correctly monitored and configured.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/15/zonal-autoshit-screenshot-v1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/15/zonal-autoshit-screenshot-v1.png\" alt=\"ARC Zonal Shift - practice run\" width=\"1600\" height=\"670\" /></a></p> \n<p>It’s not possible to test an autoshift itself. It triggers automatically when we detect a potential issue in an Availability Zone. I asked the service team if we could shut down an Availability Zone to test the instructions I shared in this post; they politely declined my request :-).</p> \n<p>To test your configuration, you can trigger a manual shift, which behaves identically to an autoshift.</p> \n<p><span><strong>A few more things to know<br /> </strong></span>Zonal autoshift is now available at no additional cost in all AWS Regions, except for China and GovCloud.</p> \n<p>We recommend applying the crawl, walk, run methodology. First, you get started with manual zonal shifts to acquire confidence in your application. Then, you turn on zonal autoshift configured with practice runs outside of your business hours. Finally, you modify the schedule to include practice zonal shifts during your business hours. You want to test your application response to an event when you least want it to occur.</p> \n<p>We also recommend that you think holistically about how all parts of your application will recover when we move traffic away from one Availability Zone and then back. The list that comes to mind (although certainly not complete) is the following.</p> \n<p>First, plan for extra capacity as I discussed already. Second, think about possible single points of failure in each Availability Zone, such as a self-managed database running on a single EC2 instance or a microservice that leaves in a single Availability Zone, and so on. I strongly recommend using managed databases, such as <a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a> or <a href=\"https://aws.amazon.com/rds/aurora/\">Amazon Aurora</a> for applications requiring zonal shifts. These have built-in replication and fail-over mechanisms in place. Third, plan the switch back when the Availability Zone will be available again. How much time do you need to scale your resources? Do you need to rehydrate caches?</p> \n<p>You can learn more about resilient architectures and methodologies with <a href=\"https://adhorn.medium.com/\">this great series of articles from my colleague Adrian</a>.</p> \n<p>Finally, remember that only load balancers with cross-zone load balancing turned off are currently eligible for zonal autoshift. To turn off cross-zone load balancing from a CDK script, you need to remove <code>stickinessCookieDuration</code> and add <code>load_balancing.cross_zone.enabled=false</code> on the target group. Here is an example with CDK and Typescript:</p> \n<pre><code>    // Add the auto scaling group as a load balancing\n    // target to the listener.\n    const targetGroup = listener.addTargets('MyApplicationFleet', {\n      port: 8080,\n      // for zonal shift, stickiness &amp; cross-zones load balancing must be disabled\n      // stickinessCookieDuration: Duration.hours(1),\n      targets: [asg]\n    });    \n    // disable cross zone load balancing\n    targetGroup.setAttribute(\"load_balancing.cross_zone.enabled\", \"false\");</code></pre> \n<p>Now it’s time for you to select your applications that would benefit from zonal autoshift. Start by reviewing your infrastructure capacity in each Availability Zone and then define the circuit breaker alarms. Once you are confident your monitoring is correctly configured, <a href=\"https://console.aws.amazon.com/route53recovery\">go and enable zonal autoshift</a>.</p> \n<a href=\"https://twitter.com/sebsto\">-- seb</a>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"8cf354661dfc60eeb4242dadde536cd1600644f662318e815700d7e171818669","category":"Tech"}