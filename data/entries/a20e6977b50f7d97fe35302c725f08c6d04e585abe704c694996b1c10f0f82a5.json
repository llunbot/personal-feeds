{"title":"Simplifying Form Styles With `accent-color`","link":"https://smashingmagazine.com/2021/09/simplifying-form-styles-accent-color/","date":1632394800000,"content":"<p>I don’t know about you, but I love it when new CSS properties arrive that make our daily lives as developers simpler and enable us to remove a whole lot of redundant code. <code>aspect-ratio</code> is one such property (recently eliminating the need for the <a href=\"https://css-tricks.com/aspect-ratio-boxes/\">padding hack</a>). <code>accent-color</code> just might be the next.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/670a7ef5-7695-42fb-b7dd-eca523c5020b/1-simplifying-form-styles-accent-color.jpg\" /></p>\nStyling Form Inputs\n<p>Let’s take checkboxes. In every browser, these are styled differently by the user agent stylesheet (responsible for the browser’s default styles).</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a25eeddc-f485-44e4-b4db-fa0d259915f3/2-simplifying-form-styles-accent-color.jpg\" /></p>\n<p>Historically there hasn’t been any real way to style these inputs. Instead, many web developers resort to a well-known hack, which involves visually (but accessibly) hiding the input itself, then styling a pseudo-element on the label. (All this applies to radio buttons too.)</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a05ed1bd-3b32-47b6-bc18-2496172f807e/3-simplifying-form-styles-accent-color.jpg\" /></p>\n<h3>Accessibility</h3>\n<p>A pretty cool feature is that the browser will automatically determine the best color for the checkmark to ensure sufficient color contrast, using its own internal algorithms. That means no extra code styling is required to ensure our checkboxes are as accessible as they can be.</p>\n<p>In the following demo, we’re applying two different accent colors. If you view this in Chrome, you should see that the checkmark of the one on the left is white, while the one on the right is black. Browsers use different algorithms for this, so you may experience different results in Chrome versus Firefox.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a85843d-9026-437c-865c-2768db25480b/4-simplifying-form-styles-accent-color.jpg\" /></p>\n<p>We can use <code>color-scheme</code> to ensure that our checkboxes take on a light or dark style according to preference. Setting it on the root element in our CSS ensures that it applies to the whole page:</p>\n<pre><code>:root {\n  color-scheme: light dark;\n}</code></pre>\n\n<p>This expresses the color schemes in order of preference. Alternatively we could implement it using a meta tag in our HTML:</p>\n<pre><code>&lt;meta name=\"color-scheme\" content=\"light dark\"&gt;</code></pre>\n\n<p>This is actually preferable, as it will be read by the browser immediately before the CSS file is parsed and executed — therefore could help us avoid a flash of unstyled content (FOUC).</p>\n<p>In our rainbow checkbox demo, you might notice that the browser also adjusts the color of some of the checkmarks when we switch the color scheme, while still maintaining sufficient contrast. Pretty cool!</p>\n<p><code>color-scheme</code> affects the user agent styles. If we use it without providing other background color or text color styles for the page, the default colors of the page will be inverted if the user selects a dark color scheme — so the default background color will be black, and the text color will be white. In practice, it’s quite likely we’ll want to override these with CSS. We can use <code>color-scheme</code> alongside the <code>prefers-color-scheme</code> media query. In this demo, I’m using <code>prefers-color-scheme</code> to set the text color only when a dark scheme is preferred.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/NWgMMpd\">accent-color with color-scheme</a> by <a href=\"https://codepen.io/michellebarker\">Michelle Barker</a>.</p>\n<p><code>color-scheme</code> can also be set on individual elements, which is useful if there are some areas in our design that we want to retain a specified color scheme, regardless of whether light or dark mode is toggled. In this demo, we have a form with a dark background even when the overall color scheme is light. We can specify a dark color scheme, to ensure our checkboxes are styled with a dark color at all times:</p>\n<pre><code>.dark-form {\n  color-scheme: dark;\n}</code></pre>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/JjJvvWw\">accent-color – showing two different colours</a> by <a href=\"https://codepen.io/michellebarker\">Michelle Barker</a>.</p>\nLimitations\n<p>As mentioned, there are several elements that are not currently affected by <code>accent-color</code>, for which this functionality would be useful. Another consideration is that we’re currently limited to only styling the checked state of the checkbox or radio button — aside from using <code>color-scheme</code>, which has some effect on the checkbox border, but doesn’t allow for full customization. It would be great to be able to style the border color and thickness for the input in its unchecked state or implement even more custom styling, such as changing the overall shape, but we’re not quite there yet. At the very least, allowing the checkbox border to inherit the body text color would be preferable.</p>\n<p>It would also be useful to be able to extend the use of <code>accent-color</code> to other elements beyond forms, such as video controls. Currently for a developer to create custom controls entails a significant amount of work in order to re-create the accessibility of native ones. <a href=\"https://www.smashingmagazine.com/2020/11/standardizing-select-native-html-form-controls/\">This excellent article</a> by Stephanie Stimac details the work being done by <a href=\"https://open-ui.org\">Open UI</a> to standardize UI elements in order to make it easier for developers to style them.</p>\nAlternatives\n<p>An alternative way to style a checkbox or radio button is to hide default styling with <code>-webkit-appearance: none</code> and replace it with a background image. (See <a href=\"https://codepen.io/smashingmag/pen/ZEyooKx\">this demo</a>.) Modern browsers support this pretty well, but it has its limitations when compared to the first method of using a pseudo-element (described at the start of this article), as we can’t directly manipulate the background image with CSS (e.g. changing its color or opacity), or transition the image.</p>\n<p>The CSS Paint API — part of the Houdini set of CSS APIs — opens up more options for customization, allowing us to pass in custom properties to manipulate a background image. Check out <a href=\"https://css-houdini.rocks/checkboxes/\">this lovely demo</a> (and accompanying worklet) by Matteo. Support is currently limited to Chromium browsers.</p>\n<h3>Accessibility</h3>\n<p>We should take care to provide accessible focus styles when using hiding the default appearance of form controls. An advantage of <code>accent-color</code> is that it doesn’t hide the browser defaults, preserving accessibility.</p>\nBrowser Support\n<p><code>accent-color</code> is currently supported in the latest versions of Chrome and Edge. It can be enabled in Firefox with the <code>layout.css.accent-color.enabled</code> flag, and is due to be supported in the next release. Unfortunately, there is no Safari support at present. That’s not to say you <em>can’t</em> start using it right away — browsers that don’t support <code>accent-color</code> will simply get the browser defaults, so it works great as progressive enhancement.</p>\nConclusion\n<p>We’ve mostly talked about checkboxes and radio buttons here, as they’re among the most common form elements requiring customization. But <code>accent-color</code> has the potential to provide quick and easy styling for many of our form elements, especially where extensive customization isn’t needed, as well as allowing the browser to pick the best options for accessibility.</p>\n<h3>Further Reading</h3>\n<p>Some resources on <code>accent-color</code>, <code>color-scheme</code>, and styling form inputs:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/accent-color\">MDN documentation</a></li>\n<li><a href=\"https://css-tricks.com/almanac/properties/a/accent-color/:\">CSS Tricks guide to accent-color</a></li>\n<li>Web.dev: <a href=\"https://web.dev/accent-color\">CSS accent-color</a></li>\n<li>Web.dev: <a href=\"https://web.dev/color-scheme/\">Improved dark mode with color-scheme</a></li>\n<li>Modern CSS: <a href=\"https://moderncss.dev/custom-css-styles-for-form-inputs-and-textareas/\">Custom CSS Styles for Form Inputs and Text Areas</a></li>\n<li>Modern CSS: <a href=\"https://moderncss.dev/pure-css-custom-styled-radio-buttons/\">Pure CSS Custom Styled Radio Buttons</a></li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"a20e6977b50f7d97fe35302c725f08c6d04e585abe704c694996b1c10f0f82a5","category":"Tech"}