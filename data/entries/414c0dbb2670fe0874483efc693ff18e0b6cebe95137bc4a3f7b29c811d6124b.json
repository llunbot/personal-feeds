{"title":"Plans to Archive Unmaintained Packer Provisioner Plugins","link":"https://www.hashicorp.com/blog/plans-to-archive-unmaintained-packer-provisioner-plugins","date":1636128000000,"content":"<p>For some time, the best practice amongst HashiCorp Packer users has been to use <a href=\"https://www.packer.io/docs/provisioners/shell\"><code>shell</code></a> and <a href=\"https://www.packer.io/docs/provisioners/shell-local\"><code>shell-local</code></a> provisioners to execute tools such as Chef, InSpec, Puppet, and Salt. However, due to early first-class integrations, we have maintained plugins for such tools for more than four years. The Packer team is currently supportive of third parties maintaining first-class plugins for these, but in the absence of such maintenance, the team recommends the more common approach of installing and running these tools via the <code>shell</code> or <code>shell-local</code> provisioners.</p>\n<p>Given this common practice of using <code>shell</code> and <code>shell-local</code> to execute tools instead of Packer's early first-class integrations, development of some of the community-maintained plugins has slowed. When this happens, HashiCorp may use GitHub's option to archive the plugin’s repository, to clearly signal the plugin's status to users.</p>\n<p>With the release of the Packer <a href=\"https://www.packer.io/docs/commands/init\">init command</a> in Packer 1.7, we extracted all non-core plugins from the Packer core <a href=\"https://github.com/hashicorp/packer\">repository</a> into their own respective repositories, and have labeled community-maintained plugins on their respective <a href=\"https://www.packer.io/docs#packer-documentation\">documentation pages</a>. Unmaintained plugins were also labeled to indicate to users that certain plugins were no longer under active development: see <a href=\"https://www.packer.io/docs/provisioners/puppet/puppet-masterless#puppet-masterless-provisioner\">Puppet Masterless</a> for an example.</p>\n<p>We understand that some plugins may be critical to existing user workflows, so we are sharing our plans for archiving plugins to assist users in navigating the change.</p>\n<p>Archiving is used in this case to direct users toward a different way to do things, and is reversible if a new maintainer steps forward. If you are interested in maintaining an archived plugin, please reach out to us at <a href=\"mailto:packer@hashicorp.com\">packer@hashicorp.com</a>.</p>\n<h2><a href=\"#what-will-change\">»</a><a></a>What Will Change?</h2>\n<p>In Packer release v1.7.9, which is slated for release in late November 2021, we will archive the following plugin repositories:</p>\n<ul>\n<li>Chef: <a href=\"https://github.com/hashicorp/packer-plugin-chef\">https://github.com/hashicorp/packer-plugin-chef</a></li>\n<li>Converge: <a href=\"https://github.com/hashicorp/packer-plugin-converge\">https://github.com/hashicorp/packer-plugin-converge</a></li>\n<li>InSpec: <a href=\"https://github.com/hashicorp/packer-plugin-inspec\">https://github.com/hashicorp/packer-plugin-inspec</a></li>\n<li>Puppet: <a href=\"https://github.com/hashicorp/packer-plugin-puppet\">https://github.com/hashicorp/packer-plugin-puppet</a></li>\n<li>Salt: <a href=\"https://github.com/hashicorp/packer-plugin-salt\">https://github.com/hashicorp/packer-plugin-salt</a></li>\n</ul>\n<p>In Packer 1.7.9, the plugins listed above will be released one last time before archiving. The final release of each plugin will be bundled into the single Packer release binary as we do currently, to prevent any breaking changes. The final release will also be available for installation via the <code>packer init</code> command for users using HCL2 templates with Packer 1.7.0+.</p>\n<p>The code repositories along with all commits and issues remain available. Existing binaries for historical releases will also continue to be available on the releases site. Documentation for each of the plugins will also remain available on the Packer website, and will be updated with a notice, reflecting the archival status of the plugin.</p>\n<p>In the next minor release of Packer — version 1.8.0, slated for early 2022 — the archived plugins and other non-core plugins will no longer be bundled in the Packer binary. When that occurs, users will have to use the <code>packer init</code> command to install the latest available versions of non-core plugins, including any archived plugins.</p>\n<p>Users who are not able to install via <code>packer init</code> are encouraged to manually install plugins using the steps described in the <a href=\"https://www.packer.io/docs/plugins#installing-plugins\">Installing Plugins documentation</a>.</p>\n<h2><a href=\"#next-steps\">»</a><a></a>Next Steps</h2>\n<p>For users of the plugins slated to be archived in 1.7.9, there is no immediate action needed at this time. Your workflows will continue to work with the latest version of Packer. However, before the release of 1.8 in 2022, we encourage you to look into migrating from these archived plugins to using the <code>shell</code> or <code>shell-local</code> provisioners for executing these third-party tools.</p>\n<p>Please remember that archiving is reversible; if anyone from the community is willing to maintain an archived plugin, please reach out to us at <a href=\"mailto:packer@hashicorp.com\">packer@hashicorp.com</a> for more details.</p>","author":"Wilken Rivera","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"414c0dbb2670fe0874483efc693ff18e0b6cebe95137bc4a3f7b29c811d6124b","category":"Tech"}