{"title":"AWS Lambda SnapStart for Python and .NET functions is now generally available","link":"https://aws.amazon.com/blogs/aws/aws-lambda-snapstart-for-python-and-net-functions-is-now-generally-available/","date":1731964035000,"content":"<p>Today, we’re announcing the general availability of <strong>AWS Lambda SnapStart for Python and .NET functions </strong>that delivers faster function startup performance, from several seconds to as low as sub-second, typically with minimal or no code changes in Python, C#, F#, and Powershell.</p> \n<p>In November 28, 2022, we <a href=\"https://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart/\">introduced Lambda SnapStart for Java functions</a> to improve startup performance by up to 10 times. With Lambda SnapStart, you can reduce outlier latencies that come from initializing functions, without having to provision resources or spend time implementing complex performance optimizations.</p> \n<p>Lambda SnapStart works by caching and reusing the snapshotted memory and disk state of any one-time initialization code, or code that runs only the first time a Lambda function is invoked. Lambda takes a <a href=\"https://github.com/firecracker-microvm/firecracker/blob/main/docs/snapshotting/snapshot-support.md\">Firecracker microVM snapshot</a> of the memory and disk state of the initialized execution environment, encrypts the snapshot, and caches it for low-latency access.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/12/2024-lambda-snapstart-diagram-1.png\" width=\"1560\" height=\"566\" /></p> \n<p>When you invoke the function version for the first time, and as the invocations scale up, Lambda resumes new execution environments from the cached snapshot instead of initializing them from scratch, improving startup latency. Lambda SnapStart makes it easy to build highly scalable and responsive applications in Python and .NET using AWS Lambda.</p> \n<p>For Python functions, startup latency from initialization code can be several seconds long. Some scenarios where this can occur are – loading dependencies (such as LangChain, Numpy, Pandas, and DuckDB) or using frameworks (such as Flask or Django). Many functions also perform machine learning (ML) inference using Lambda, and need to load ML models during initialization – a process that can take tens of seconds depending on the size of the model used. Using Lambda SnapStart can reduce startup latency from several seconds to as low as sub-second for these scenarios.</p> \n<p>For .NET functions, we expect most use cases to benefit because .NET just-in-time (JIT) compilation takes up to several seconds. Latency variability associated with initialization of Lambda functions has been a long-standing barrier for customers to use .NET for AWS Lambda. SnapStart enables functions to resume quickly by caching a snapshot of their memory and disk state. Therefore, most .NET functions will experience significant improvement in latency variability with Lambda SnapStart.</p> \n<p><strong><u>Getting started with Lambda SnapStart for Python and .NET</u></strong><br /> To get started, you can use the <a href=\"https://console.aws.amazon.com/ec2\">AWS Management Console</a>, <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a> or <a href=\"http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html\">AWS SDKs</a> to activate, update, and delete SnapStart for Python and .NET functions.</p> \n<p>On the <a href=\"https://console.aws.amazon.com/lambda/home#/functions\">AWS Lambda console</a>, go to the <strong>Functions</strong> page and choose your function to use Lambda SnapStart. Select <strong>Configuration</strong>, choose <strong>General configuration</strong>, and then choose <strong>Edit</strong>. You can see <strong>SnapStart</strong> settings on the <strong>Edit basic settings</strong> page.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/15/2024-lambda-snapstart-python-dotnet.jpg\" width=\"1678\" height=\"1421\" /></p> \n<p>You can activate Lambda functions using Python 3.12 and higher, and .NET 8 and higher managed runtimes. Choose <strong>Published versions</strong> and then choose <strong>Save</strong>.</p> \n<p>When you publish a new version of your function, Lambda initializes your code, creates a snapshot of the initialized execution environment, and then caches the snapshot for low-latency access. You can invoke the function to confirm activation of SnapStart.</p> \n<p>Here is an AWS CLI command to update the function configuration by running the <code>update-function-configuration</code> command with the <code>--snap-start</code> option.</p> \n<pre><code>aws lambda update-function-configuration \\\n  --function-name lambda-python-snapstart-test \\\n  --snap-start ApplyOn=PublishedVersions</code></pre> \n<p>Publish a function version with the <code>publish-version</code> command.</p> \n<pre><code>aws lambda publish-version \\\n  --function-name lambda-python-snapstart-test</code></pre> \n<p>Confirm that SnapStart is activated for the function version by running the <code>get-function-configuration</code> command and specifying the version number.</p> \n<pre><code>aws lambda get-function-configuration \\\n  --function-name lambda-python-snapstart-test:1</code></pre> \n<p>If the response shows that <code>OptimizationStatus</code> is <code>On</code> and <code>State</code> is <code>Active</code>, then <code>SnapStart</code> is activated, and a snapshot is available for the specified function version.</p> \n<pre><code>\"SnapStart\": { \n    \"ApplyOn\": \"PublishedVersions\",\n    \"OptimizationStatus\": \"On\"\n },\n \"State\": \"Active\",</code></pre> \n<p>To learn more about activating, updating, and deleting a snapshot with AWS SDKs, <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a>, <a href=\"https://aws.amazon.com/serverless/sam/\">AWS Serverless Application Model (AWS SAM)</a>, and <a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit (AWS CDK)</a>, visit <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/snapstart-activate.html\">Activating and managing Lambda SnapStart</a> in the AWS Lambda Developer Guide.</p> \n<p><strong><u>Runtime hooks</u></strong><br /> You can use runtime hooks to run code executed before Lambda creates a snapshot or after Lambda resumes a function from a snapshot. Runtime hooks are useful to perform cleanup or resource release operations, dynamically update configuration or other metadata, integrate with external services or systems, such as sending notifications or updating external state or to fine-tune your function’s startup sequence, such as by preloading dependencies.</p> \n<p>Python runtime hooks are available as part of the open source <a href=\"https://pypi.org/project/snapshot-restore-py/\">Snapshot Restore for Python library</a>, which is included in Python managed runtime. This library provides two decorators <code>@register_before_snapshot</code> to run before Lambda creates a snapshot and <code>@register_after_restore</code> to run when Lambda resumes a function from a snapshot. To learn more, visit <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/snapstart-runtime-hooks-python.html\">Lambda SnapStart runtime hooks for Python</a> in the AWS Lambda Developer Guide.</p> \n<p>Here is an example Python handler to show how to run code before checkpointing and after restoring:</p> \n<pre><code>from snapshot_restore_py import register_before_snapshot, register_after_restore\n\ndef lambda_handler(event, context):\n    # handler code\n\n@register_before_snapshot\ndef before_checkpoint():\n    # Logic to be executed before taking snapshots\n\n@register_after_restore\ndef after_restore():\n    # Logic to be executed after restore</code></pre> \n<p>You can also use .NET runtime hooks available as part of the Amazon.Lambda.Core package (version 2.5 or later) from <a href=\"https://www.nuget.org/packages/Amazon.Lambda.Core\">NuGet</a>. This library provides two methods <code>RegisterBeforeSnapshot()</code> to run before snapshot creation and <code>RegisterAfterRestore()</code> to run after resuming a function from a snapshot. To learn more, visit <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/snapstart-runtime-hooks-dotnet.html\">Lambda SnapStart runtime hooks for .NET</a> in the AWS Lambda Developer Guide.</p> \n<p>Here is an example C# handler to show how to run code before checkpointing and after restoring:</p> \n<pre><code>public class SampleClass\n{\n    public SampleClass()\n    { \n        Amazon.Lambda.Core.SnapshotRestore.RegisterBeforeSnapshot(BeforeCheckpoint); \n        Amazon.Lambda.Core.SnapshotRestore.RegisterAfterRestore(AfterRestore);\n    }\n    \n    private ValueTask BeforeCheckpoint()\n    {\n        // Add logic to be executed before taking the snapshot\n        return ValueTask.CompletedTask;\n    }\n\n    private ValueTask AfterRestore()\n    {\n        // Add logic to be executed after restoring the snapshot\n        return ValueTask.CompletedTask;\n    }\n\n    public APIGatewayProxyResponse FunctionHandler(APIGatewayProxyRequest request, ILambdaContext context)\n    {\n        // INSERT business logic\n        return new APIGatewayProxyResponse\n        {\n            StatusCode = 200\n        };\n    }\n}</code></pre> \n<p>To learn how to implement runtime hooks for your preferred runtime, visit <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/snapstart-runtime-hooks.html\">Implement code before or after Lambda function snapshots</a> in the AWS Lambda Developer Guide.</p> \n<p><strong><u>Things to know</u></strong><br /> Here are some things that you should know about Lambda SnapStart:</p> \n<ul> \n <li><strong>Handling uniqueness</strong> – If your initialization code generates unique content that is included in the snapshot, then the content will not be unique when it’s reused across execution environments. To maintain uniqueness when using SnapStart, you must generate unique content after initialization, such as if your code uses custom random number generation that doesn’t rely on built-in-libraries or caches any information such as DNS entries that might expire during initialization. To learn how to restore uniqueness, visit <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/snapstart-uniqueness.html\">Handling uniqueness with Lambda SnapStart</a> in the AWS Lambda Developer Guide.</li> \n <li><strong>Performance tuning </strong>– To maximize the performance, we recommend that you preload dependencies and initialize resources that contribute to startup latency in your initialization code instead of in the function handler. This moves the latency associated with heavy class loading out of the invocation path, optimizing startup performance with SnapStart.</li> \n <li><strong>Networking best practices</strong> –The state of connections that your function establishes during the initialization phase isn’t guaranteed when Lambda resumes your function from a snapshot. In most cases, network connections that an AWS SDK establishes automatically resume. For other connections, review the <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/snapstart-best-practices.html#snapstart-networking\">Maximize Lambda SnapStart performance</a> in the AWS Lambda Developer Guide.</li> \n <li><strong>Monitoring functions </strong>– You can monitor your SnapStart functions using <a href=\"https://aws.amazon.com/cloudwatch\">Amazon CloudWatch</a> log stream, <a href=\"https://aws.amazon.com/xray\">AWS X-Ray</a> active tracing, and accessing real-time telemetry data for extensions using the <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/telemetry-api.html\">Telemetry API</a>, <a href=\"https://aws.amazon.com/api-gateway/\">Amazon API Gateway</a> and function URL metrics. To learn more about differences for SnapStart functions, visit <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/snapstart-monitoring.html\">Monitoring for Lambda SnapStart</a> in the AWS Lambda Developer Guide.</li> \n</ul> \n<p><strong><u>Now available</u></strong><br /> AWS Lambda SnapStart for Python and .NET functions are available today in US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), Europe (Frankfurt), Europe (Ireland), and Europe (Stockholm) AWS Regions.</p> \n<p>With the Python and .NET managed runtimes, there are two types of SnapStart charges: the cost of caching a snapshot per function version that you publish with SnapStart enabled, and the cost of restoration each time a function instance is restored from a snapshot. So, <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html#snapstart-pricing\">delete unused function versions</a> to reduce your SnapStart cache costs. To learn more, visit the <a href=\"https://aws.amazon.com/lambda/pricing/\">AWS Lambda pricing</a> page.</p> \n<p>Give Lambda SnapStart for Python and .NET a try in the <a href=\"https://console.aws.amazon.com/lambda\">AWS Lambda console</a>. To learn more, visit <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html\">Lambda SnapStart page</a> and send feedback through <a href=\"https://repost.aws/tags/TA5uNafDy2TpGNjidWLMSxDw/aws-lambda\">AWS re:Post for AWS Lambda</a> or your usual AWS Support contacts.</p> \n<p>— <a href=\"https://twitter.com/channyun\">Channy</a></p>","author":"Channy Yun (윤석찬)","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"78a005e546573c3a52ccc98873f5378125ee876d1784fb952f35d5760a719188","category":"Tech"}