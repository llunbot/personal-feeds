{"title":"How To Work With GraphQL In WordPress In 2024","link":"https://smashingmagazine.com/2024/04/how-work-graphql-wordpress-2024/","date":1713520800000,"content":"<p>Three years ago, I published “<a href=\"https://www.smashingmagazine.com/2021/04/making-graphql-work-in-wordpress/\">Making GraphQL Work In WordPress</a>,” where I compared the two leading GraphQL servers available for WordPress at the time: <a href=\"https://www.wpgraphql.com\">WPGraphQL</a> and <a href=\"https://gatographql.com\">Gato GraphQL</a>. In the article, I aimed to delineate the scenarios best suited for each.</p>\n<p><em>Full disclosure: I created Gato GraphQL, originally known as</em> <strong><em>GraphQL API for WordPress</em></strong>, <em>as referenced in the article.</em></p>\n<p>A lot of new developments have happened in this space since my article was published, and it’s a good time to consider what’s changed and how it impacts the way we work with GraphQL data in WordPress today.</p>\n<p>This time, though, let’s focus less on <em>when</em> to choose one of the two available servers and more on the developments that have taken place and how both plugins and headless WordPress, in general, have been affected.</p>\nHeadless Is The Future Of WordPress (And Shall Always Be)\n<p>There is no going around it: <em>Headless is the future of WordPress!</em> At least, that is what we have been reading in posts and tutorials for the last eight or so years. Being Argentinian, this reminds me of an old joke that goes, “Brazil is the country of the future and shall always be!” The future is both imminent and far away.</p>\n<p>Truth is, WordPress sites that actually make use of headless capabilities — via GraphQL or the WP REST API — represent no more than a small sliver of the overall WordPress market. WPEngine may have the most extensive research into headless usage in its “The State of Headless” report. Still, it’s already a few years old and focused more on both the general headless movement (not just WordPress) and the context of enterprise organizations. But the future of WordPress, according to the report, is written in the clouds:</p>\n<blockquote>“Headless is emphatically here, and with the rapid rise in enterprise adoption from 2019 (53%) to 2021 (64%), it’s likely to become the industry standard for large-scale organizations focused on building and maintaining a powerful, connected digital footprint. […] Because it’s already the most popular CMS in the world, used by many of the world’s largest sites, and because it’s highly compatible as a headless CMS, bringing flexibility, extensibility, and tons of features that content creators love, WordPress is a natural fit for headless configurations.”</blockquote>\n\n<p>Just a year ago, a Reddit user <a href=\"https://www.reddit.com/r/Wordpress/comments/z83d54/are_you_using_headless_wordpress/?rdt=48997\">informally polled people in r/WordPress</a>, and while it’s far from scientific, the results are about as reliable as the conjecture before it:</p>\n<p><img src=\"https://files.smashing.media/articles/how-work-graphql-wordpress-2024/1-reddit-poll-results.png\" /></p>\n<p>Headless may very well be the future of WordPress, but the proof has yet to make its way into everyday developer stacks. It could very well be that general interest and curiosity are driving the future more than tangible works, as another of WPEngine’s articles from the same year as the bespoke report suggests <a href=\"https://wpengine.com/builders/introducing-the-headless-wordpress-developer-roadmap/\">when identifying “Headless WordPress” as a hot search term</a>. This could just as well be a lot more smoke than fire.</p>\n<p>That’s why I believe that “headless” is not yet a true alternative to a traditional WordPress stack that relies on the WordPress front-end architecture. I see it more as another approach, or flavor, to building websites in general <a href=\"https://css-tricks.com/just-how-niche-is-headless-wordpress/\">and a niche one at that</a>.</p>\n<p>That was all true merely three years ago and is still true today.</p>\nWPEngine “Owns” Headless WordPress\n<p>It’s no coincidence that we’re referencing WPEngine when discussing headless WordPress because the hosting company is heavily betting on it becoming the <em>de facto</em> approach to WordPress development. </p>\n<p>Take, for instance, WPEngine’s launch of <a href=\"https://github.com/wpengine/faustjs\">Faust.js</a>, a headless framework with WPGraphQL as its foundation. Faust.js is an opinionated framework that allows developers to use WordPress as the back-end content management system and Next.js to render the front-end side of things. Among other features, Faust.js <a href=\"https://faustjs.org/reference/template-system\">replicates the WordPress template system for Next.js</a>, making the configuration to render posts and pages from WordPress data a lot easier out of the box.</p>\n<p>WPEngine is well-suited for this task, as it can offer hosting for both Node.js and WordPress as a single solution via its <a href=\"https://developers.wpengine.com/docs/atlas/overview/\">Atlas</a> platform. WPEngine also bought the popular <a href=\"https://wordpress.org/plugins/advanced-custom-fields/\">Advanced Custom Fields</a> (ACF) plugin that helps define relationships among entities in the WordPress data model. Add to that the fact that WPEngine has taken over the <a href=\"https://discord.com/invite/headless-wordpress-836253505944813629\">Headless WordPress</a> Discord server, with discussions centered around WPGraphQL, Faust, Atlas, and ACF. It could very well be named the WPEngine-Powered Headless WordPress server instead.</p>\n<p>But WPEngine’s agenda and dominance in the space is not the point; it’s more that they have a lot of skin in the game as far as anticipating a headless WordPress future. Even more so now than three years ago.</p>\nGraphQL API for WordPress → Gato GraphQL\n<p>I created a plugin several years ago called GraphQL API for WordPress to help support headless WordPress development. It converts data pulled from the WordPress REST API into structured GraphQL data for more efficient and flexible queries based on the content managed and stored in WordPress.</p>\n<p>More recently, I released a significantly updated version of the plugin, so updated that I chose to rename it to <strong>Gato GraphQL</strong>, and it is now <a href=\"https://wordpress.org/plugins/gatographql/\">freely available in the WordPress Plugin Directory</a>. It’s a freemium offering like many WordPress plugin pricing models. The free, open-source version in the plugin directory provides the GraphQL server, maps the WordPress data model into the GraphQL schema, and provides several useful features, including custom endpoints and persisted queries. The paid <a href=\"https://gatographql.com/features\">commercial add-on</a> extends the plugin by supporting multiple query executions, automation, and an HTTP client to interact with external services, among other advanced features.</p>\n<p>I know this sounds a lot like a product pitch but stick with me because there’s a point to the decision I made to revamp my existing GraphQL plugin and introduce a slew of premium services as features. It fits with my belief that</p>\n<p>WordPress is becoming more and more open to giving WordPress developers and site owners a lot more room for innovation to work collaboratively and manage content in new and exciting ways both in and out of WordPress.</p>\nJavaScript Frameworks &amp; Headless WordPress\n<p><a href=\"https://www.gatsbyjs.com/\">Gatsby</a> was perhaps the most popular and leading JavaScript framework for creating headless WordPress sites at the time my first article was published in 2021. These days, though, <a href=\"https://www.smashingmagazine.com/2024/03/end-of-gatsby-journey/\">Gatsby is in steep decline</a> and its integration with WordPress is <a href=\"https://twitter.com/wpgraphql/status/1709967179998019979\">no longer maintained</a>.</p>\n<p><a href=\"https://nextjs.org/\">Next.js</a> was also a leader back then and is still very popular today. The framework includes <a href=\"https://github.com/leoloso/next-wordpress-starter\">several starter templates</a> designed specifically for headless WordPress instances.</p>\n<p><a href=\"https://svelte.dev/\">SvelteKit</a> and <a href=\"https://nuxt.com/\">Nuxt</a> are surging these days and are considered good choices for establishing headless WordPress, <a href=\"https://wordpress.tv/2024/04/10/fighting-the-javascript-fatigue-picking-the-right-framework-for-headless-wordpress/\">as was discussed during WordCamp Asia 2024</a>.</p>\n<p>Today, in 2024, we continue to see new JavaScript framework entrants in the space, notably <a href=\"https://docs.astro.build/en/guides/cms/wordpress/\">Astro</a>. Despite Gatsby’s recent troubles, the landscape of using JavaScript frameworks to create front-end experiences from the WordPress back-end is largely the same as it was a few years ago, if maybe a little easier, thanks to the availability of new templates that are integrated right out of the box.</p>\nGraphQL Transcends Headless WordPress\n<p>The biggest difference between the WPGraphQL and Gato GraphQL plugins is that, where WPGraphQL is designed to convert REST API data into GraphQL data in a <em>single direction</em>, Gato GraphQL uses GraphQL data in <em>both directions</em> in a way that can be used to manage non-headless WordPress sites as well. I say this not as a way to get you to use my plugin but to help describe how GraphQL has evolved to the point where it is useful for more cases than headless WordPress sites.</p>\n<p>Managing a WordPress site via GraphQL is possible because GraphQL is an <strong>agnostic tool for interacting with data</strong>, whatever that interaction may be. GraphQL can fetch data from the server, modify it, store it back on the server, and invoke external services. These interactions can all be coded within a single query.</p>\n<p>GraphQL can then be used to <a href=\"https://gatographql.com/library/regex-search-and-replace-multiple-strings-in-all-posts\">regex search and replace a string in all posts</a>, which is practical when doing site migrations. We can also import a post from another WordPress site or even from an RSS feed or CSV source.</p>\n<p>And thanks to the likes of WordPress hooks and <a href=\"https://developer.wordpress.org/plugins/cron/\">WP-Cron</a>, executing a GraphQL query can be an automated task. For instance, whenever the <code>publish_post</code> hook is triggered — i.e., a new post on the site is published — we can execute certain actions, like <a href=\"https://gatographql.com/library/send-email-to-the-admin-notifying-of-a-new-post\">an email notification to the site admin</a>, or generate a featured image with AI if the post lacks one.</p>\n<p>In short, GraphQL works both ways and opens up new possibilities for better developer and author experiences!</p>\nGraphQL Becomes A “Core” Feature In WordPress 6.5\n<p>I have gone on record saying that <a href=\"https://gatographql.com/blog/why-graphql-should-not-be-in-wordpress-core\">GraphQL should not be a core part of WordPress</a>. There’s a lot of reasoning behind my opinion, but what it boils down to is that the WP REST API is perfectly capable of satisfying our needs for passing data around, and <strong>adding GraphQL to the mix could be a security risk</strong> in some conditions.</p>\n<p>My concerns aside, GraphQL officially became a first-class citizen of WordPress when it was baked into <a href=\"https://wordpress.org/documentation/wordpress-version/version-6-5/\">WordPress 6.5</a> with the introduction of <a href=\"https://make.wordpress.org/core/2024/03/05/introducing-plugin-dependencies-in-wordpress-6-5/\">Plugin Dependencies</a>, a feature that allows plugins to identify other plugins as dependencies. We see this in the form of a new “Requires Plugins” comment in a plugin’s header:</p>\n<pre><code>/**\n * Plugin Name: My Ecommerce Payments for Gato GraphQL\n * Requires Plugins: gatographql\n */\n</code></pre>\n\n<p>WordPress sees which plugins are needed for the current plugin to function properly and installs everything together at the same time, assuming that the dependencies are readily available in the WordPress Plugin Directory.</p>\n<p>So, check this out. Since WPGraphQL and Gato GraphQL are in the plugin directory, we can now create <em>another</em> plugin that internally uses GraphQL and distributes it via the plugin directory or, in general, without having to indicate how to install it. For instance, we can now use GraphQL to <a href=\"https://gatographql.com/guides/interact/working-with-gutenberg-blocks\">fetch data to render the plugin’s blocks</a>.</p>\n<p>In other words, plugins are now capable of more symbiotic relationships that open even more possibilities! Beyond that, every plugin in the WordPress Plugin Directory is now technically part of WordPress Core, including WPGraphQL and Gato GraphQL. So, yes, GraphQL is now technically a “core” feature that can be leveraged by other developers.</p>\nHelping WordPress Lead The CMS Market, Again\n<p>While delivering the keynote presentation during WordCamp Asia 2024, <a href=\"https://humanmade.com\">Human Made</a> co-founder <a href=\"https://wordpress.tv/2024/04/07/the-future-of-wordpress-noel-tock/\">Noel Tock discussed the future of WordPress</a>. He argues that <strong>WordPress growth has stagnated in recent years</strong>, thanks to a plethora of modern web services capable of interacting and resulting in composable content management systems tailored to certain developers in a way that WordPress simply isn’t.</p>\n<p><img src=\"https://files.smashing.media/articles/how-work-graphql-wordpress-2024/2-line-chart-wordpress-cms.png\" /></p>\n<p>Tock continues to explain how WordPress can once again become a growth engine by <a href=\"https://twitter.com/noeltock/status/1773264868864598374\">cleaning up the WordPress plugin ecosystem</a> and providing first-class integrations with external services.</p>\n<p><img src=\"https://files.smashing.media/articles/how-work-graphql-wordpress-2024/3-noel-tock-wordcamp-asia-2024-cms-market-graph.png\" /></p>\n<p>Do you see where I am going with this? GraphQL could play an instrumental role in WordPress’s future success. It very well could be <strong>the link between WordPress and all the different services it interacts with</strong>, positioning WordPress at the center of the web. The recent Plugin Dependencies feature we noted earlier is a peek at what WordPress could look like as it adopts more composable approaches to content management that support its position as a market leader.</p>\nConclusion\n<p>“Headless” WordPress is still “the future” of WordPress. But as we’ve discussed, there’s very little actual movement towards that future as far as developers buying into it despite displaying deep interest in headless architectures, with WordPress purely playing the back-end role.</p>\n<p>There are new and solid frameworks that rely on GraphQL for querying data, and those won’t go away anytime soon. And those frameworks are the ones that rely on existing WordPress plugins that consume data from the WordPress REST API and convert it to structured GraphQL data.</p>\n<p>Meanwhile, WordPress is making strides toward greater innovation as plugin developers are now able to leverage other plugins as dependencies for their plugins. Every plugin listed in the WordPress Plugin Directory is essentially a feature of WordPress Core, including WPGraphQL and Gato GraphQL. That means GraphQL is readily available for any plugin developer to tap into as of WordPress 6.5.</p>\n<p>GraphQL can be used not only for headless but also to manage the WordPress site. Whenever data must be transformed, whether locally or by invoking an external service, GraphQL can be the tool to do it. That even means that <strong>data transforms can be triggered automatically to open up new and interesting ways to manage content</strong>, both <em>inside</em> and <em>outside</em> of WordPress. It works both ways!</p>\n<p>So, yes, even though headless is the future of WordPress (and shall always be), GraphQL could indeed be a key component in making WordPress once again an innovative force that shapes the future of CMS.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"a38441f466424c03fe5d203f8eb2e2e3c3af45744d791a1daac7891b7cdfa4b1","category":"Tech"}