{"title":"ตอบคำถาม แนวทางในการทดสอบ API ที่พัฒนาด้วย NodeJS","link":"https://www.somkiat.cc/testing-with-nodejs/","date":1708232289000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/02/javascript-testing-150x150.png\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/02/javascript-testing-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2024/02/javascript-testing-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/02/javascript-testing.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/02/javascript-testing.png\" width=\"717\" height=\"359\" /></a></figure>\n\n\n\n<p>จากการแบ่งปันความรู้เรื่องการพัฒนาระบบ API ด้วย NodeJS นั้น<br />มีคำถามเกี่ยวกับแนวทางในการทดสอบว่า</p>\n\n\n\n<ul>\n<li>มีแบบไหนบ้าง</li>\n\n\n\n<li>ทำอย่างไรบ้าง</li>\n</ul>\n\n\n\n<p>จึงทำการสรุปในแบบที่เคยทำไว้บ้าง ดังนี้</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>โดยปกติชอบแบ่งการทดสอบเป็น 2 แบบ คือ</strong></p>\n\n\n\n<ul>\n<li><strong>ทดสอบมุมมองของผู้ใช้งาน หรือ ภายนอก (External test)</strong> มักจะใช้เครื่องมือ หรือ ภาษาโปรแกรมต่างจากการพัฒนา</li>\n\n\n\n<li><strong>ทดสอบในมุมมองนักพัฒนา หรือ ภายใน (Internal test)</strong> มักจะใช้เครื่องมือ หรือ ภาษาโปรแกรมเดียวกับการพัฒนา</li>\n</ul>\n\n\n\n<p><strong>แบบที่ 1 External test</strong></p>\n\n\n\n<p>จะใช้งาน <a href=\"https://www.somkiat.cc/tag/postman/\" target=\"_blank\">Postman + newman</a> สำหรับการทดสอบ API แบบง่าย ๆ</p>\n\n\n\n<p><strong>แบบที่ 2 Internal test</strong></p>\n\n\n\n<p>สำหรับ API test นั้นสามารถแบ่งได้หลาย level ดังนี้ </p>\n\n\n\n<ul>\n<li>Unit test</li>\n\n\n\n<li>Component test</li>\n\n\n\n<li>Contract test</li>\n\n\n\n<li>Integration test</li>\n\n\n\n<li>End-to-End test</li>\n</ul>\n\n\n\n<p>ขึ้นอยู่กับความเชื่อมั่น หรือ ความต้องการของระบบงาน และ การทดสอบ<br />แน่นอนว่ามีทั้งข้อดีและข้อเสีย<br />ยิ่งเป็นพวก integration และ end-to-end test ก็จะยิ่งเพิ่มความเชื่อมั่นสูงสุด<br />แต่ต้องระวังในเรื่องของความเร็วในการทดสอบว่า ช้า หรือ เร็ว<br />รวมทั้งเรื่องของการจัดการ environment/dependency <br />เพื่อไม่ให้การทดสอบไม่เสถียร</p>\n\n\n\n<p>ส่วน unit, component และ contract นั้น<br />จะทดสอบได้เร็วมาก ๆ แต่ความเชื่อมันของระบบโดยรวมอาจจะน้อย</p>\n\n\n\n<p><strong>ตัวอย่างและวิธีการทดสอบเป็นดังนี้</strong></p>\n\n\n\n<p>Production code เป็นการดึงข้อมูล user ด้วย id</p>\n\n\n\n[gist id=\"4e153460662727cf5961935620549fd1\" file=\"user.js\"]\n\n\n\n<p><strong>Unit test ด้วย <a href=\"https://jestjs.io/\" target=\"_blank\">Jest</a></strong></p>\n\n\n\n<p>สามารถทำการ mock ตัว axios ได้เลย<br />จากนั้นก็สามารถจำลอง response ได้เลย</p>\n\n\n\n[gist id=\"4e153460662727cf5961935620549fd1\" file=\"test-01.js\"]\n\n\n\n<p><strong>Component test ด้วย SuperTest และ Nock</strong></p>\n\n\n\n<p>ทำการทดสอบ API ด้วยการ start server และ ยิง request ด้วย <a href=\"https://www.npmjs.com/package/supertest\" target=\"_blank\">SuperTest</a><br />และทำการจำลองการยิง request ไปยัง external API ด้วย <a href=\"https://github.com/nock/nock\" target=\"_blank\">Nock</a><br />ซึ่งกำหนดพฤติกรรมการทำงานให้เหมือนจริงได้ ในกรณีต่าง ๆ</p>\n\n\n\n<p>ตัวอย่างการใช้งาน</p>\n\n\n\n[gist id=\"4e153460662727cf5961935620549fd1\" file=\"test-02.js\"]\n\n\n\n<p>ลองนำไปใช้งานกันดูครับ<br />ขอให้สนุกกับการ coding</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"6733eb92abfee04a393804020610128c20695b090012b004dfa1d457f5ea1146","category":"Thai"}