{"title":"The Complex But Awesome CSS¬†border-image Property","link":"https://smashingmagazine.com/2024/01/css-border-image-property/","date":1705410000000,"content":"<p>The <code>border-image</code> property is nothing new. Even deprecated Internet Explorer supports it, so you know we‚Äôre treading well-charted territory. At the same time, it‚Äôs not exactly one of those properties you likely keep close at hand, and its confusing concepts of ‚Äúslicing‚Äù and ‚Äúoutsets‚Äù don‚Äôt make it the easiest property to use.</p>\n<p>I‚Äôm here to tell you that <code>border-image</code> is not only capable of producing some incredibly eye-catching UI designs but is also able to accomplish some other common patterns we often turn to other properties and approaches for.</p>\n<p>In this article, my plan is to dispel the confusing aspects of <code>border-image</code> without getting into a bunch of theoretical explanations and technical jargon. Instead, we‚Äôre going to have fun with the property, using it to create shapes and put a different spin on things like range sliders, tooltips, and title decorations.</p>\n<p>By the end of this, I hope that <code>border-image</code> becomes your new favorite property just as it has become mine!</p>\nThe Concept of Image Borders\n<p>There are a few specific aspects of <code>border-image</code> that I think are crucial for understanding how it works.</p>\nIt‚Äôs Easy To Accidentally Override A Border Image\n<p>The <a href=\"https://drafts.csswg.org/css-backgrounds/#border-images\">CSS Backgrounds and Border Module Level 3 specif</a><a href=\"https://drafts.csswg.org/css-backgrounds/#border-images\">i</a><a href=\"https://drafts.csswg.org/css-backgrounds/#border-images\">cation</a> says <code>border-image</code> should replace any regular border you define, but it‚Äôs not always the case. Try the code below, and all you will see is a red border.</p>\n<pre><code>/* All I see is a red border */\n.element {\n  border-image: linear-gradient(blue, red) 1;\n  border: 5px solid red;\n}\n</code></pre>\n\n<p>That‚Äôs because we‚Äôre technically declaring <code>border</code> <em>after</em> <code>border-image</code>. Order really does matter when working with <code>border-image</code>!</p>\n<pre><code>/* üëç */\n.element {\n  border: 5px solid red;\n  border-image: linear-gradient(blue, red) 1;\n}\n</code></pre>\n\n<p>You can already see how this could be confusing for anyone jumping into <code>border-image</code>, especially for the first time. You will also notice that our gradient border has a thickness equal to <code>5px</code>, which is the <code>border-width</code> we defined. </p>\n<p>I make it a personal habit not to use <code>border</code> and <code>border-image</code> together because it helps me avoid overriding the border image I‚Äôm trying to create and be able to control the border decoration using only one property (even if both can be used together). So, if you get a strange result, don‚Äôt forget to check if you have a <code>border</code> declared somewhere. </p>\nIt Is Painted Over Backgrounds And Box Shadows\n<p>The second tip I want to offer is that <code>border-image</code> is painted <em>above</em> the element‚Äôs <code>background</code> and <code>box-shadow</code> but <em>below</em> the element‚Äôs content. This detail is important for some of the tricks we will use in later examples. The following Pen demonstrates how a border image is applied in that order:</p>\n<p><img src=\"https://files.smashing.media/articles/css-border-image-property/1-illustration-slice-width-outset-values.png\" /></p>\n<p>If we were to translate the figure above into code using the provided variables as values, it would look like this:</p>\n<pre><code>border-image:\n  linear-gradient(...)\n  s-top s-right s-bottom s-left / \n  w-top w-right w-bottom w-left /\n  o-top o-right o-bottom o-left;\n</code></pre>\n\n<p>By default, <code>border-image</code> considers the boundaries of the element (illustrated with the blue dotted border in Figure 1) as its <strong>area</strong> to paint the gradient, but we can change this using the <code>&lt;outset&gt;</code> to increase that area and create an overflow. This is super useful to have ‚Äúoutside‚Äù decorations.</p>\n<p>Then, the <code>&lt;width&gt;</code> is used to split the area into <strong>nine regions</strong>, and the <code>&lt;slice&gt;</code> is used to split the source (i.e., the gradient) into <strong>nine slices</strong> as well. From there, we assign each slice to its corresponding region. Each slice is stretched to fill its assigned region, and if they don‚Äôt share equal dimensions, the result is typically a distorted image slice. Later on, we will learn how to control that and prevent distortion.</p>\n<p>The middle region is kept empty by default. That said, it is totally possible to use the <code>fill</code> keyword to do what it says and fill the middle region with slice nine (which is always the center slice).</p>\n<pre><code>border-image: linear-gradient(...) fill\n  s-top s-right s-bottom s-left / \n  w-top w-right w-bottom w-left /\n  o-top o-right o-bottom o-left;\n</code></pre>\n\n<p>I know this was a pretty fast primer on <code>border-image</code>, but I think it‚Äôs all we need to do some pretty awesome stuff. Let‚Äôs jump into the fun and start experimenting with effects.</p>\nGradient Overlay\n<p>Our first experiment is to add <a href=\"https://css-tip.com/gradient-overlay-border-image/\">a gradient overlay above an existing background</a>. This is a fairly common pattern to improve the legibility of text by increasing the contrast between the text color and the background color.</p>\n<p>There are several well-known approaches to setting an overlay between text and content. <a href=\"https://css-tricks.com/tinted-images-multiple-backgrounds/\">Here‚Äôs one from Chris Coyier back in 2013.</a> And that isn‚Äôt even the most widely-used approach, which is likely <a href=\"https://css-tricks.com/7-practical-uses-for-the-before-and-after-pseudo-elements-in-css/#aa-gradient-overlays\">using pseudo-elements</a>.</p>\n<p>But <code>border-image</code> gives us a one-line way to pull it off:</p>\n<pre><code>.overlay {\n  border-image: fill 0 linear-gradient(#0003,#000); \n}\n</code></pre>\n\n<p>That‚Äôs all! No extra element, no pseudo-element, and no need to modify the <code>background</code> property. </p>\n<p><img src=\"https://files.smashing.media/articles/css-border-image-property/2-full-width-backgrounds.png\" /></p>\n<p>Well, guess what? The <code>border-image</code> property can pull it off with one line of code:</p>\n<pre><code>.full-background {\n  border-image: conic-gradient(pink 0 0) fill 0//0 100vw;\n}\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/css-border-image-property/3-viewports-width-large-value.png\" /></p>\n<p>If you compare what we just did with the gradient overlay example, the <code>&lt;outset&gt;</code> is the only difference between the implementations. Other than that, we have a single slice placed in the middle region that covers the entire area we extended to the edge of the screen.</p>\n<p>We are not limited to a solid color, of course, since we are working with gradients.</p>\n<p><img src=\"https://files.smashing.media/articles/css-border-image-property/4-background-before-after-clipping.png\" /></p>\nFancy Headings\n<p>Another thing we can use <code>border-image</code> for is decorating headings with fancy borders. Let‚Äôs start with the exact same implementation we used for the full-width backgrounds. Only this time, we‚Äôre replacing the <code>conic-gradient()</code> with a <code>linear-gradient()</code>:</p>\n<div>\n<pre><code>.full-background {\n  border-image: linear-gradient(0deg, #1095c1 5px, lightblue 0) fill 0//0 100vw;\n}\n</code></pre>\n</div>\n\n<p>Now we apply this to an <code>&lt;h1&gt;</code> element:</p>\n<p><img src=\"https://files.smashing.media/articles/css-border-image-property/6-region-height.png\" /></p>\n<p>So, that‚Äôs two different ways to get the same effect using the same <code>border-image</code> syntax. We can actually get this a third way as well:</p>\n<div>\n<pre><code>.full-line {\n  border-image: conic-gradient(#1095c1 0 0) 0 0 1 0/0 0 8px 0/0 100vw 0 0;\n}\n</code></pre>\n</div>\n\n<p>This time, I have defined a bottom slice equal to <code>1</code> (unitless values are computed as pixels), which produces two slices, the seventh (bottom center) and the ninth (center). From there, I have set the seventh region to a height of <code>8px</code>. Note that I am not using the <code>fill</code> keyword this time, so the middle region is not filled like it was last time. Instead, we only fill the seventh region that takes up <code>100%</code> of the <code>boder-image</code>‚Äôs area and <code>8px</code> of its height. </p>\n<p><img src=\"https://files.smashing.media/articles/css-border-image-property/5-seventh-region-height-8px.png\" /></p>\n<p>You‚Äôre wondering why I am defining a slice equal to <code>1</code>, right? The goal is to have only two slices: the seventh (bottom center) and the ninth (middle), and since we are applying a solid color, the size doesn't matter. That‚Äôs why I used <code>1</code>; a small positive value. Any value will work (e.g., <code>0.5</code>, <code>2</code>, <code>100</code>, <code>50%</code>, <code>76%</code>, and so on); it‚Äôs just that <code>1</code> is shorter to type. Remember that the slice will get stretched within its region, so <code>1px</code> is enough to fill the whole region.</p>\n<p><strong>Here‚Äôs the deal:</strong> The slice value doesn‚Äôt really matter when working with a solid coloration. In most cases, the value winds up being <code>0</code> (empty) or <code>1</code> (filled). You can think of it as binary logic.</p>\n<p>We could do this a fourth way!</p>\n<div>\n<pre><code>.full-line {\n  border-image: conic-gradient(#1095c1 0 0) 0 1 0 0/calc(100% - 8px) 100% 0 0/0 100vw 0 0;\n}\n</code></pre>\n</div>\n\n<p>I‚Äôll let you do the work to figure out how the above CSS works. It‚Äôs a good opportunity to get a feel for slicing elements. Take a pen and paper and try to identify which slices we are using and which regions will be filled.</p>\n<p>One thing that makes <code>border-image</code> a complex property is all the different ways to achieve the same result. You can wind up with a lot of different combinations, and when all of them produce the same result, it‚Äôs tough to form a mental model for understanding how all of the values work together.</p>\n<p>Even though there is no single ‚Äúright‚Äù way to do these heading borders, I prefer the second syntax because it allows me to simply change one color value to establish a ‚Äúreal‚Äù gradient instead of a solid color.</p>\n<pre><code>.full-line {\n  border-image: repeating-linear-gradient(...) fill 0 /\n    calc(100% - var(--b)) 0 0/0 100vw 0 0 repeat;\n}\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/css-border-image-property/7-slices-corresponding-regions.png\" /></p>\n<p>Let‚Äôs try another syntax for the same effect:</p>\n<pre><code>h2 {\n  --s: 3px;   /* the thickness */\n  --w: 100px; /* the width */\n  --g: 10px;  /* the gap */\n  border-image: \n     conic-gradient(red 0 0) \n     0 50%/calc(50% - var(--s)/2) var(--w)/0 calc(var(--w) + var(--g));\n}\n</code></pre>\n\n<p>The top and bottom values of the <code>&lt;slice&gt;</code> are equal to <code>0</code>, and the left and right ones are equal to <code>50%</code>. This means that slices six and eight share the gradient. All the other slices ‚Äî including the center ‚Äî are empty.</p>\n<p>As far as the regions go, the top and bottom regions (consisting of regions 1, 5, and 2 at the top and regions 4, 7, and 3 at the bottom) have a height equal to <code>50% - var(--s)/2</code> leaving the <code>--s</code> variable as a height for the remaining regions (6, 8, and 9). The right and the left regions have a width equal to the <code>--w</code> variable. Since slices 6 and 8 are the only ones that are filled, the only regions we need to care about are 6 and 8. Both have a height equal to the border‚Äôs thickness, <code>--s</code>, and a width equal to <code>--w</code>.</p>\n<p>I think you know how the rest of the story goes.</p>\n<p><img src=\"https://files.smashing.media/articles/css-border-image-property/8-slices-applied-corresponding-regions.png\" /></p>\n<p>Notice I am using <code>50%</code> as a slice. It demonstrated how any value does the job, as we discussed in the last section when I explained why I chose to use a value of <code>1</code> but also to prepare for the next effect where I will be using a real gradient:</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/RwvYvGr\">Horizontal lines around your title with gradient coloration</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>When it comes to real gradients, the value of the slice is important, and sometimes you need very precise values. To be honest, this can be very tricky, and I even get lost trying to figure out the right value. </p>\n<p>Let‚Äôs end this section with more examples of title decorations. When combined with other properties, <code>border-image</code> can make really nice effects.</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/VwXOmjW\">Fancy title divider with one element</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/zYWQmyo\">Fancy title divider with one element</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\nMore Examples\n<p>Now that we‚Äôve seen several detailed examples of how <code>border-image</code>, I‚Äôm going to drop in several other examples. Rather than explaining them in great detail, try to explain them in your own words by inspecting the CSS, and use these as inspiration for your own work.</p>\n<h3>Infinite Image Decorations</h3>\n<p>When it comes to images, <code>border-image</code> can be a lifesaver since we don‚Äôt have access to pseudo-elements. Here are some cool infinite decorations where we can have a touch of 3D effect. </p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/XWoNdGK\">Infinite image shadow</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/mdvaeoq\">Infinite image shadow II</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/yLZwLKj\">Infinite image stripes shadow</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/mdQwgMO\">3D trailing shadow for images</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>If you check the code in these examples, you will find they share nearly the same structure. If you have trouble recognizing the pattern, please don‚Äôt hesitate to leave a comment at the end of this article, and I would be happy to point it out.</p>\n<h3>Custom Range Slider</h3>\n<p>I wrote <a href=\"https://www.sitepoint.com/css-custom-range-slider/\">a detailed article</a> on how to create the following example, and you can refer to it for range slider variations using the same technique.</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/KKGpmGE\">CSS only custom range sliders</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>I used <code>border-image</code> and styled only the ‚Äúthumb‚Äù element. Range inputs are known to have different implementation cross-browser, but the ‚Äúthumb‚Äù is common between all of them.</p>\n<h3>Ribbon Shapes</h3>\n<p>In case you missed it, I have created <a href=\"https://css-generators.com/ribbon-shapes/\">a collection of more than 100 single-element ribbon shapes</a>, and some of them rely on <code>border-image</code>. I call them the ‚Äúinfinite ribbons.‚Äù</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/rNqJYrZ\">Full screen Ribbon title</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/NWoRJMy\">Infinite Ribbon Shapes</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\nHeart Shapes\n<p>I have <a href=\"https://verpex.com/blog/website-tips/css-shapes-the-heart\">written about CSS heart shapes</a> using different approaches, and one of them uses a <code>border-image</code> technique.</p>\n<pre><code>.heart {\n  width: 200px;\n  aspect-ratio: 1;\n  border-image: radial-gradient(red 69%,#0000 70%) 84.5%/50%;\n  clip-path: polygon(-42% 0,50% 91%, 142% 0);\n}\n</code></pre>\n\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/MWPOJpP\">Heart shape using border-image</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>The interesting part here is the slice that is equal to <code>84.5%</code>. That is a bigger value than <code>50%</code>, so it may seem incorrect since the total exceeds <code>100%</code>. But it‚Äôs perfectly fine because <strong>slices are able to overlap one another</strong>!</p>\n<p>When using values bigger than <code>50%</code>, the corner slices (1, 2, 3, and 4) will share common parts, but the other slices are considered empty. Logically, when using a slice equal to <code>100%</code>, we will end with four slices containing the full source.</p>\n<p>Here is an example to illustrate the trick:</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/jOdemWL\">Overview of the slice effect</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>The slider will update the slice from <code>0%</code> to <code>100%</code>. On the left, you can see how the corner slices (1-4) grow. Between <code>0%</code> and <code>50%</code>, the result is logical and intuitive. Bigger than <code>50%</code>, you start having the overlap. When reaching <code>100%</code>, you can see the full circle repeated four times because each slice contains the full gradient, thanks to the overlap.</p>\n<p>It can be confusing and not easy to visualize, but overlaps can be really useful to create custom shapes and fancy decorations.</p>\nTooltips\n<p>What about <a href=\"https://css-tip.com/simple-tooltip/\">a simple tooltip shape with only two properties</a>? Yes, it‚Äôs possible!</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/ExrEXoO\">A simple Tooltip using 2 CSS properties</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<pre><code>.tooltip {\n  /* triangle dimension */\n  --b: 2em; /* base */\n  --h: 1em; /* height*/\n\n  border-image: conic-gradient(#CC333F 0 0) fill 0//var(--h);\n  clip-path: \n    polygon(0 100%,0 0,100% 0,100% 100%,\n      calc(50% + var(--b)/2) 100%,\n      50% calc(100% + var(--h)),\n      calc(50% - var(--b)/2) 100%);\n}\n</code></pre>\n\nFilling Border Radius\n<p>Unlike most decorative border properties (e.g., <code>box-shadow</code>, <code>outline</code>, <code>border</code>, and so on), <code>border-image</code> doesn‚Äôt respect <code>border-radius</code>. The element is still a box, even if we‚Äôve rounded off the corners. Other properties will recognize the visual boundary established by <code>border-radius</code>, but <code>border-image</code> bleeds right through it.</p>\n<p>That could be a drawback in some instances, I suppose, but it‚Äôs also one of the quirky things about CSS that can be leveraged for other uses like creating <a href=\"https://css-tip.com/inner-radius-image/\">images with inner radius</a>:</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/abMvjZj\">Inner radius to image element</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>Cool, right? Only one line of code makes it happen:</p>\n<div>\n<pre><code>img {\n  --c: #A7DBD8;\n  --s: 10px; /* the border thickness*/\n\n  border-image: conic-gradient(var(--c) 0 0) fill 0 // var(--s);\n}\n</code></pre>\n</div>\n\n<p>We can even leave the center empty to get a variation that simply borders the entire element:</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/gOqBWvg\">Rounded images inside squares</a> by <a href=\"https://codepen.io/t_afif\">Michelle Barker</a>.</p>\nConclusion\n<p>Did you know <code>border-image</code> property was such a powerful ‚Äî and flexible ‚Äî CSS property? Despite the challenge it takes to understand the syntax, there are ways to keep the code clean and simple. Plus, there is often more than one ‚Äúright‚Äù way to get the same result. It‚Äôs a complicated and robust CSS feature.</p>\n<p>If the concepts of slicing and defining regions with <code>border-image</code> are still giving you problems, don‚Äôt worry. That‚Äôs super common. It took me a lot of time to fully understand how <code>border-image</code> works and how to use it with different approaches to the syntax. Give yourself plenty of time, too. It helps to re-read things like this article more than once to let the concepts sink in.</p>\n<p>Complexities aside, I hope that you will add <code>border-image</code> to your toolbox and create a lot of magic with it. We can do even more with <code>border-image</code> than what was demonstrated here. I actually experiment with this sort of stuff frequently and share my work over at my <a href=\"https://css-tip.com/\">CSS Tip website</a>. Consider subscribing (<a href=\"https://css-tip.com/feed/feed.xml\">RSS</a>) to keep up with the fun and weird things I try.</p>\n<p>Special thanks to <a href=\"https://twitter.com/SelenIT2\">@SelenIT2</a>, who pushed me to explore this property and <a href=\"https://css-live.ru/tricks/border-image-gradients-sorcery.html\">wrote an excellent article on it</a>.</p>","author":"","siteTitle":"Articles on Smashing Magazine ‚Äî For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"5ced21119ccfb2ce8e661732283d0efdd9c63014d5c36e202f5820fcccd2cc93","category":"Tech"}