{"title":"Frustrating Design Patterns: Broken Filters","link":"https://smashingmagazine.com/2021/07/frustrating-design-patterns-broken-frozen-filters/","date":1626269400000,"content":"<p>Filters are <em>everywhere</em>. While we often think of them appearing when booking flights or shopping online, filters are frequently used in pretty much every interface that features more than a handful of data points.</p>\n<p>It’s not necessarily just the sheer amount of data that is difficult to make sense of though; it’s the <strong>complexity and lack of consistency</strong> that the data usually entails which requires some filtering — such a common scenario in data grids, enterprise dashboards, vaccine tracking and public records registries.</p>\n<div>\n<h4>Part Of: <a href=\"/category/design-patterns/\">Design Patterns</a></h4>\n<ul>\n<li>Part 1: <a href=\"https://www.smashingmagazine.com/2017/06/designing-perfect-accordion-checklist/\">Perfect Accordion</a></li>\n<li>Part 2: <a href=\"https://www.smashingmagazine.com/2018/02/designing-a-perfect-responsive-configurator/\">Perfect Responsive Configurator</a></li>\n<li>Part 3: <a href=\"https://www.smashingmagazine.com/2017/07/designing-perfect-date-time-picker/\">Perfect Date and Time Picker</a></li>\n<li>Part 4: <a href=\"https://www.smashingmagazine.com/2017/08/designing-perfect-feature-comparison-table/\">Perfect Feature Comparison</a></li>\n<li>Part 5: <a href=\"https://www.smashingmagazine.com/2017/07/designing-perfect-slider/\">Perfect Slider</a></li>\n<li>Part 6: <a href=\"http://localhost:3000/2021/05/frustrating-design-patterns-birthday-picker/\">Perfect Birthday Picker</a></li>\n<li>Part 7: <a href=\"https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-mega-dropdown-hover-menus/\">Perfect Mega-Dropdown Menus</a></li>\n<li><strong>Part 8: Perfect Filters</strong></li>\n<li><a href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\">Subscribe to our email newsletter</a> to not miss the next ones.</li>\n</ul>\n</div>\n\nDesigning For The Comfortable Range\n<p>As customers, we use filters to reduce a large set of options to a more manageable and highly relevant selection. Perhaps just a few dozens of payment slips instead of thousands, or just a handful of blouses rather than the entire collection.</p>\n<p>We have specific attributes of interest, a specific <em>intent</em>, that we need to somehow communicate to the interface. We do so by breaking our intent down into a set of available features. That intent might be fairly specific or quite general, but in both cases, the design should <strong>minimize the time</strong> needed for customers to get from the default state (when no filters are selected) to the final state (when all filters are successfully applied).</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c283becc-5402-4a3d-acb3-b3c4af0193bc/nsw-transport.jpg\" /></p>\n<p>That’s only one part of the story though. Applying relevant filters is the easy part, but showing <em>just enough</em> relevant results is slightly more difficult. In fact, for every interface, and for every intent, we have a particular <strong>comfortable range</strong> in mind, that is a preferred number of options that we think we can manage relatively effortlessly.</p>\n<p>This range of options doesn’t have to fit on a single screen, or be displayed on a single page, or be limited to a small shortlist that we can easily remember. It can be anything from <strong>dozens to hundreds of items</strong> scattered over a number of pages.</p>\n<p>The important part is that this range meets our expectations that: </p>\n<ul>\n<li>we are looking at highly relevant options,</li>\n<li>we can easily understand what we are exploring,</li>\n<li>we can spot the differences between all options, and</li>\n<li>we can process everything within a reasonable, foreseeable timeframe.</li>\n</ul>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/535f6b02-4359-450a-8b69-a9d8edf5d277/tv-filtering.jpg\" /></p>\n<p>Unlike sorting, which merely <em>rearranges</em> the results according to some preferred attributes (<em>soft boundaries</em>), filters always represent <strong>hard boundaries.</strong> They strictly limit the scope of results. Not enough proper filters and users shoot way over the comfortable range; too many filters and users end up with zero-results and abandon the site altogether.</p>\n<p>The comfortable range <strong>varies significantly</strong> from a product to product. The cue to where it lies can be inferred from how different the options actually are. In usability tests, we see people having no issues exploring 20–30 kinds of vehicles, 40–50 kinds of sneakers, 70–80 bouquets of flowers, or even paginating through 100–200 payment slips. Yet they feel utterly overwhelmed when exploring 15 different types of sharpies or AAA-batteries. As a rule of thumb, it seems that the more <em>different</em> the options are, the more comfortable we feel with a slightly larger set of options.</p>\n<p>The ultimate question, then, is how to find that delicate balance, when our interface helps users <em>quickly</em> arrive at <em>just enough</em> results. One answer to that question lies in something that sounds awfully obvious: <strong>eliminate any roadblocks</strong> on users' path towards that comfortable range. It’s easier written than done though — especially when you have dozens or even hundreds of filters that have to be accessible on mobile, on desktop, and everywhere in-between.</p>\nThe Complexity of Filtering\n<p>At the first glance, filtering doesn’t seem like a particularly complex endeavour. Of course we can have lengthy debates about the right form elements for different kind of filters — autocomplete, radios, toggles, select-dropdowns, sliders and buttons just to name a few — but in their essence, all of the form elements are just basic input, right?</p>\n<p>Well, as it turns out, there are quite a few facets of the experience that make designing filters <strong>quite difficult</strong>:</p>\n<ul>\n<li>filters can come in <strong>various flavours</strong> and shapes, for pricing, ratings, colors, dates, times, size, brand, capacity, features, level of experience, age range, symptoms, product status etc.</li>\n<li>filters usually come in <strong>large numbers</strong>, and they need to be displayed across screens,</li>\n<li>filters often have different <strong>states</strong> (selected, unselected, disabled)</li>\n<li>filters often need <strong>sensible defaults</strong>, and they have to remember user’s input,</li>\n<li>filters can be <strong>interdependent</strong>, and these dependencies need to be obvious,</li>\n<li>filters can be <strong>difficult to validate</strong>, e.g. when users can type in complex data, such as time or dates,</li>\n<li>filters need to support and show meaningful <strong>error messages,</strong></li>\n<li>and so many others.</li>\n</ul>\n<p><strong>Filters never exist on their own</strong>; in one way or another, they are always connected to the results that they are acting upon. This connection often causes filters and matching results to be somewhat <em>synchronous</em>, as the latter depend on how fast the UI registers an input, and how much time it needs to successfully process it.</p>\n<p>Now, addressing all the fine intricacies of each of these challenges is nothing short of monumental work, yet some issues are slightly more frustrating than others, making the overall experience painful and annoying, and hence causing high abandonment and high bounce rates. Let’s explore some of the critical ones.</p>\nAvoid Tiny Scrollable Panes\n<p>After just a few usability sessions with customers who try to use filters on their own device, one can spot some <strong>common frustrations</strong> making rounds over and over again. One of the most annoying patterns comes from lengthy filter sections that contain dozens of options. These options often get tucked away in a tiny scrollable pane, showing 3–4 options at a time and requiring vertical scrolling to browse the options. </p>\n<p>These sections often cause customers to scroll vertically, slowly, accurately, with extreme focus and precision. As they do on mobile, some filters get activated by mistake, prompting the customer to be even more focused. A classic example of this pattern is the “Brands” filter, which often contain hundreds of options, sorted by popularity or by alphabet.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8528f3af-6fa4-46e8-81ac-34b0644da627/1-frustrating-design-patterns.png\" /></p>\n<p>An alternative option would be to show as many as 7–10 options at a time with an accordion that would expand and show all options on tap/click. These options don’t have to be displayed in their full height, but can live in a <strong>larger scrollable pane</strong>, but then they shouldn’t be activated by scrolling through the pane.</p>\n<p>It’s also a good idea to compliment the filter with a search autocomplete and an alphabetical view if some of the popular options are highlighted at the top. A good example of it is <a href=\"https://bt.rozetka.com.ua/blenders/c80155/producer=braun,domotec/\">Rozetka.ua</a>, an eCommerce retailer from Ukraine (see above).</p>\nAlways Provide Text Input Fallback For Sliders\n<p>Whenever users can define a large <em>range</em> of values, be it pricing range in retail store, max duration of a train trip or a min/max coverage for an insurance plan, we probably will use some sort of a <strong>slider</strong>. All sliders have one thing in common: they are wonderful when we want to encourage customers to explore many options quickly, but they are quite frustrating when the user has something specific in mind and hence needs to be a little bit more precise.</p>\n<p>Just think about the frustration we usually have to go through when bumping up the price a little bit, from $200 to $215, or adding another hour for the duration of your flight. Doing so with a slider is difficult because it requires incredible precision, and that always causes mistakes and frustrations.</p>\n<p>We’ve covered <a href=\"https://www.smashingmagazine.com/2017/07/designing-perfect-slider/\">how to design a perfect slider</a> in detail already, but probably the most important feature that every slider needs is to support different <em>speeds</em> of interaction. In fact, there are a few common types of interaction:</p>\n<ul>\n<li>when customers want to explore many options quickly, a good ol’ slider with a track and a thumb works perfectly fine;</li>\n<li>when customers to be more precise in their exploration, we can help by <strong>adding steppers</strong> <strong>(+/-)</strong> for granular jumps forward and backwards,</li>\n<li>when customers have an exact value in mind, we can help by providing <strong>text input fields</strong> for min/max values, so users can type in values directly without having to use the slider,</li>\n<li>in all of these cases, solutions have to be accessible and support keyboard-only interaction.</li>\n</ul>\n<p>Take a look at the <a href=\"https://www.lloydsbank.com/\">Lloydsbank</a>’s example below. A <a href=\"https://www.lloydsbank.com/loans/loan-calculator.html\">personal loan calculator</a> supports all types of interaction beautifully. Also, notice the focus styles when the thumb is activated, and ranges displayed below the interest rate slider at the top to indicate where the customer is currently navigating. The interest rate changes depending on how much money the customer would like to borrow.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8c08283-92bd-4984-93f2-7af03888a725/2-frustrating-design-patterns.png\" /></p>\n<p>Another intersting example of a well-designed slider comes from Made.com’s <a href=\"https://www.made.com/sofasizer\">Sofasizer</a>, which allows you to filter couches based on the dimensions that they need to have. Rather than using a set of input fields, Made.com chose to use a visual interface with a “Resize” icon. You can drag the handle to adjust the size, or you can type in exact values in the height and width input fields.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2b163ca0-8d60-45a7-9c6c-55b511734821/3-frustrating-design-patterns.png\" /></p>\n<p>Another option is to turn all filter sections into overlays and display them on tap/click above the results. In fact, you could even use <strong>floating filters</strong>, so as the customer scroll down the page, the filters are always still accessible.</p>\n<p>An example of this pattern is <a href=\"https://www.adidas.de/en/women-shoes\">Adidas</a> (see the image below). The filters bar is persistent; even as users are scrolling down the page, the filter overlay <strong>won’t close automatically</strong> — it requires user’s input, again handing over the control to the user. However, it does close automatically once one of the filters is selected. If the user wants to select multiple filters, they have to re-open the same filter group over and over again. Keeping the filters persistent might be a better idea. Still, the result: no layout shifts, no frustrating scrolling in narrow corridors, and filters always accessible.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1e9cddc6-e6f2-4fda-a56a-8b15ee42fb04/4-frustrating-design-patterns.png\" /></p>\n<p>Not to say that displaying filters above the results is <em>always</em> better by default. On <a href=\"https://www.asos.com/women/shoes/cat/?cid=4172&amp;nlid=ww|shoes|shop+by+product|view+all\">Asos</a>, every filter input causes jumps to the top of the page, so customers have to manually scroll down to continue filtering. Instead of re-rendering the entire page, it would make more sense to re-render only the filters area and the product list.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/98421fe7-f756-4337-a3e1-bc1df810a3e6/5-frustrating-design-patterns.png\" /></p>\n<p><a href=\"https://www.ikea.com/gb/en/cat/tv-media-storage-14885/?filters=f-online-sellable%3Atrue\">Ikea</a> features filters at the top of the results. Sometimes filters appear in a drop-down overlay, and sometimes as a pill below the filters. But most of the time, unlike previous examples, when a filter is selected, it displays a <strong>sidebar mega-filter-overlay</strong> on the right with all available filtering options grouped there. As the customer is making their way through the filters, the product list is updated in the background asynchronously. More importantly, notice the “Apply” button which label changes depending on the input.</p>\n<p>With every filter input, a new request is sent to the server, retrieving the number of results, and then showing them in the UI. That’s a great way to give users a very clear sense of how far or how close they are towards their comfortable range.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/046d59bf-3be2-4d15-a6d6-5dd182eb3be7/6-frustrating-design-patterns.png\" /></p>\n<p>Another example is <a href=\"https://www.galaxus.ch/\">Galaxus.ch</a> (see below), a Swiss eCommerce retailer that provides a first-class experience when it comes to filtering. The filters are displayed above product results; a filter overlay appears on tap/click. No slowdowns, fast response times and a lovely integration of active filters with the filters area. A <strong>great reference example</strong> that is worth considering when designing any kind of filter.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0c5f2df3-3d78-4563-a599-8c924604e84a/7-frustrating-design-patterns.png\" /></p>\n<p>In general, having an <strong>“Apply” button</strong> along with real-time updates of the content area seems to be working best. It really combines the best of both solutions: showing results immediately when they arrive, while keeping filters accessible at all times.</p>\nAvoid Split-Screens On Mobile\n<p>The issues that we’ve explored in the article apply equally for large and for small screens. However, on small screens, and especially on slow connections, these issues become even more critical. Most of the time, <strong>interfaces tend to block the entire UI</strong> on a single filter input, causing massive delays for customers on the go (e.g. <a href=\"https://www.crutchfield.com/g_300/All-Car-Stereos.html?tp=5684\">Crutchfield</a>, <a href=\"https://www.walgreens.com/q/multi+symptom+relief+?N=2000012489-2000011429-305525\">Walgreens</a>). On the other hand, it’s common to split the screen to display a filters overlay, while still showing the product list updated in the background (e.g. <a href=\"https://www.nordstrom.com/browse/women/clothing/tops-tees?campaign=0419wmnclothinghdrp01a&amp;jid=j012040-15278&amp;cm_sp=merch-_-womens_15278_j012040-_-cathead_wmnclothing_p01_shop\">Nordstrom</a>).</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/204d3d52-1808-4be8-9a37-d7d0e35959df/8-frustrating-design-patterns.png\" /></p>\n<p>In general, though, it might be a better idea to experiment if a <strong>full-page overlay</strong> for filters would perform better. It gives more space to experiment with a multi-column view, or perhaps even display a swipeable area to choose filters without having to move between separate pages. In fact, using accordions that could collapse and expand instead of bringing the user to a separate page might be a good idea — similar to what we’ve discussed with <a href=\"https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-mega-dropdown-hover-menus/\">mega-dropdowns</a>. </p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a49c836-e804-480e-b4e2-25c90cc600f7/9-frustrating-design-patterns.png\" /></p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/37e12f40-5e36-412c-9863-89fc286069e5/10-frustrating-design-patterns.png\" /></p>\n<p>Unlike on desktop, having an “Apply” button in all these examples matters, and you can make it slightly more useful by adding the amount of products as a label on the button and keeping the button sticky at the bottom as the user is scrolling down.</p>\nFiltering Design Checklist\n<p>As usual, here are all the things to keep in mind when designing any kind of filter — a little helper to not forget something important before heading into conversations with your fellows designers and developers. You can find a <strong>full deck</strong> of <a href=\"https://www.smashingmagazine.com/printed-books/checklist-cards/\">Smart Interface Design Patterns Checklists</a> at yours truly Smashing Magazine as well.</p>\n<ol>\n  <li>Can we avoid a filter icon and show filters as they are?</li>\n  <li>If not, what icon do we choose to indicate filtering?</li>\n  <li>Is the icon + padding large enough for comfortable tapping?</li>\n  <li>Do we put the icon at the top, bottom or floating (mobile/desktop)?</li>\n  <li> What exactly happens when the user clicks/taps on the icon?</li>\n  <li>How will the icon change on tap/click?</li>\n  <li>Will we have some sort of animation or transition on click?</li>\n  <li>Will filters appear as full page/partial overlay or slide-in?</li>\n  <li>Can we avoid sidebar filtering as it’s usually slow?</li>\n  <li>Do we expose popular or relevant filters by default?</li>\n  <li>Do we display the number of expected results for each filter?</li>\n  <li>Can we use a horizontal swiper to move between filters?</li>\n  <li>Can we avoid drop-downs and use only buttons/chips + toggles?</li>\n  <li>For complex filters, do we provide search within filters?</li>\n  <li>Do we use icons to explain differences between various filters?</li>\n  <li>Do we use the right elements for filters, e.g. sliders, buttons, toggles?</li>\n  <li>Do filters apply automatically (yes, for slide-ins)?</li>\n  <li>Do filters apply manually on confirmation (“Apply”) (yes, for overlays)?</li>\n  <li>How do we communicate already selected filters?</li>\n  <li>Can selected filters appear as removable pills, chips or tags?</li>\n  <li>Do we recommend relevant filters based on selection?</li>\n  <li>Do we track incompatibility between selected filters?</li>\n  <li>How do error messages or warning appear in the UI?</li>\n  <li>Do we allow customers to reset all filters quickly, at once?</li>\n  <li>Are filters (or filters button) floating on scroll on mobile/desktop?</li>\n  <li>Can users tap on the same spot to open/close filters?</li>\n</ol>\n\nWrapping Up\n<p>Too often the filtering experience on the web is broken and frustrating, making it just <strong>unnecessarily difficult</strong> for customers to get to that shiny comfortable range of relevant results. When designing the next filter, take a look at some of the common issues that you might want to avoid, and hopefully avoid all the frustration that comes from broken, frozen and inaccessible filters.</p>\n<ul>\n<li><strong>Design for the comfortable range</strong> of options and for the case when a customer wants to add multiple filters quickly — one right after another.</li>\n<li>For lengthy filter groups, <strong>avoid tiny scrollable panes</strong> and show as many as 7–10 options at a time with an accordion that would expand and show all options on tap/click. Add a search autocomplete and an alphabetical view as well.</li>\n<li>Always add steppers (+/-) and <strong>text input fields</strong> when using sliders,</li>\n<li>Customer often want to set a number of filters of the same type. <strong>Never auto-scroll users on a single input</strong> and never collapse a group of filters automatically.</li>\n<li><strong>Never freeze the UI on a single input</strong>, and never make your customer wait for an interface to respond back when setting filters.</li>\n<li>Always update filters and show results <strong>asynchronously</strong>, so that on every filter input, matching results could be updated asynchronously, while the filters always remain accessible and at the same place.</li>\n<li>Always <strong>avoid layout shifts</strong> on filter input and consider displaying filters above the results. </li>\n<li>On mobile, <em>“Apply”-button</em> could be sticky at the bottom of the screen. Update the <em>count of products</em> and show them on the button.</li>\n</ul>\n<h3>Related Articles</h3>\n<p>If you find this article useful, here’s an overview of similar articles we’ve published over the years — and a few more are coming your way.</p>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/2017/06/designing-perfect-accordion-checklist/\">Perfect Accordion</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2018/02/designing-a-perfect-responsive-configurator/\">Perfect Responsive Configurator</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-birthday-picker/\">Perfect Birthday Picker</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2017/07/designing-perfect-date-time-picker/\">Perfect Date and Time Picker</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-mega-dropdown-hover-menus/\">Perfect Mega-Dropdown</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2017/08/designing-perfect-feature-comparison-table/\">Perfect Feature Comparison</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2017/07/designing-perfect-slider/\">Perfect Slider</a></li>\n<li><a href=\"https://www.smashingmagazine.com/printed-books/form-design-patterns/\">Form Design Patterns Book</a> by Adam Silver, published on SmashingMag</li>\n<li><a href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\">Subscribe to our email newsletter</a> to not miss the next ones.</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"4bfccf6f9c11d99c5f8319fc2f8f156ce4895c36df50ca9d399dd7e547bf4711","category":"Tech"}