{"title":"Use case :: การดึงข้อมูลจาก database ที่ช้า จนเกิด Timeout","link":"https://www.somkiat.cc/use-case-database-timeout-with-go/","date":1724133241000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/08/golang-timeout-150x150.png\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/08/golang-timeout-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2024/08/golang-timeout-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/08/golang-timeout.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/08/golang-timeout.png\" width=\"646\" height=\"270\" /></a></figure>\n\n\n\n<p><strong>ปัญหาที่พบเจอกับระบบงานง่าย ๆ ที่พัฒนาด้วยภาษา Go เป็นดังนี้</strong></p>\n\n\n\n<ul>\n<li>ระบบทำการดึงข้อมูลจาก MySQL database</li>\n\n\n\n<li>เป็นการดึงข้อมูลมาจาก 2 table และแยก query กัน (table แรกได้ id, table สองได้ detail)</li>\n\n\n\n<li>มีการใช้งาน connection pool</li>\n</ul>\n\n\n\n<p>ปัญหาคือ เมื่อมี load จำนวนมากเกินกว่า max connection ใน connectio pool<br />จึงทำให้เกิด timeout ในการดึงข้อมูลขึ้นมา<br />จะแก้ไขอย่างไรดี ?</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>แนวทางการแก้ไขมีหลายวิธีการ</strong></p>\n\n\n\n<p>ยกตัวอย่างเช่น</p>\n\n\n\n<ul>\n<li>เพิ่ม max connection ใน connection pool ไปสิ (ทำได้ง่ายสุด ๆ แต่มีข้อจำกัดที่ database)</li>\n\n\n\n<li>แทนที่จะดึงแยกกัน 2 query หรือ 2 ครั้ง ทำไมไม่ใน query เดียวไปเลย ใช้การ join นั่นเอง</li>\n\n\n\n<li>ในกรณีนี้ ถ้าทำ pre-join data ไว้ก่อนก็ทำได้นะ เนื่องจากเป็นการดึง detail ของผู้ใช้งานในแต่ละ comment นั่นเอง</li>\n\n\n\n<li>ถ้ายังจะใช้ 2 query เหมือนเดิม ดังนั้นก็ต้องเข้าไป review code กันหน่อย</li>\n\n\n\n<li>ถ้าข้อมูลไม่ค่อยเปลี่ยนแปลง ก็ทำ caching ซะ น่าจะดีกว่า</li>\n</ul>\n\n\n\n<p>จากที่แก้ไขมา ทุกแนวทางใช้ได้หมดเลย<br />นั่นหมายความว่า  หนึ่งปัญหามันมีหลายวิธีในการแก้ไขนั่นเอง</p>\n\n\n\n<p>แต่จากการ review code แล้วพบสิ่งที่น่าสนใจ<br />มาดูกันว่าเป็นอย่างไร</p>\n\n\n\n<p><strong>เริ่มจาก code เดิม ก็ทำการ load test ง่าย ๆ ก่อน</strong></p>\n\n\n\n[gist id=\"1da6037e0fa4959c4631cd83debe722e\" file=\"1.txt\"]\n\n\n\n<p>จะเห็นได้ว่าเกิด timeout ทั้งหมดเลย<br />เนื่องจากจำนวน concurrent user 50 ซึ่งมากกว่า max connection ใน connection pool นั่นเอง</p>\n\n\n\n[gist id=\"1da6037e0fa4959c4631cd83debe722e\" file=\"db.go\"]\n\n\n\n<p><strong>แก้ไขด้วยการเพิ่ม max connection ก็เสร็จ แต่มันไม่ใช่ root cause !!</strong><br />ดังนั้นไป review code กันหน่อย<br />สิ่งที่เจอคือ</p>\n\n\n\n[gist id=\"1da6037e0fa4959c4631cd83debe722e\" file=\"v1.go\"]\n\n\n\n<p><strong>ปัญหาคืออะไร ?</strong></p>\n\n\n\n<ul>\n<li>สิ่งที่เจอคือ  เป็นการวน loop ของข้อมูล rows.Next()</li>\n\n\n\n<li>ยังไม่พอ ใน loop มีการดึงข้อมูล user ของแต่ละคนอีก</li>\n</ul>\n\n\n\n<p>ส่งผลให้ไม่ทำการคืน connection กลับไปยัง pool สักที<br />ดังนั้นเมื่อนักพัฒนาทดสอบคนเดียว ไม่มีทางเจอ<br />แต่เมื่อทำ load test ในจำนวนคนใช้งานมากขึ้น<br />จึงทำให้เกิดปัญหา<br />ดังนั้นการแก้ไขที่จุดเกิดเหตุคือ เปลี่ยน flow ของ code ซะ<br />ให้ทำการดึงข้อมูล list comment เสร็จแล้ว และคืน conenction ไปที่ connection pool<br />จากนั้นจึงทำการดึงข้อมูลของ user อีกที ดังนี้</p>\n\n\n\n[gist id=\"1da6037e0fa4959c4631cd83debe722e\" file=\"2.txt\"]\n\n\n\n<p>ก็เร็วขึ้นอยู่นะ<br />มีหลายวิธีการให้แก้ไข สนุกดีนะครับ</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"3528f585fadf1addf4dfb5f16a63667365220fc9ccd0c21e812cc4bba9c878d2","category":"Thai"}