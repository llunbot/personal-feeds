{"title":"Accelerate CI/CD pipelines with the new AWS CodeBuild Docker Server capability","link":"https://aws.amazon.com/blogs/aws/accelerate-ci-cd-pipelines-with-the-new-aws-codebuild-docker-server-capability/","date":1747336353000,"content":"<p>Starting today, you can use <a href=\"https://aws.amazon.com/codebuild/\">AWS CodeBuild</a> Docker Server capability to provision a dedicated and persistent Docker server directly within your CodeBuild project. With Docker Server capability, you can accelerate your Docker image builds by centralizing image building to a remote host, which reduces wait times and increases overall efficiency.</p> \n<p>From my benchmark, with this Docker Server capability, I reduced the total building time by 98 percent, from 24 minutes and 54 seconds to 16 seconds. Here’s a quick look at this feature from my AWS CodeBuild projects.</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/30/news-2025-codebuilddockerserver-rev-0.png\" alt=\"\" width=\"2692\" height=\"1035\" /></p> \n<p><a href=\"https://aws.amazon.com/codebuild/\">AWS CodeBuild</a> is a fully managed continuous integration service that compiles source code, runs tests, and produces software packages ready for deployment. Building Docker images is one of the most common use cases for CodeBuild customers, and the service has progressively improved this experience over time by releasing features such as <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/build-caching.html\">Docker layer caching</a> and <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/fleets.html\">reserved capacity features</a> to improve Docker build performance.</p> \n<p>With the new Docker Server capability, you can reduce build time for your applications by providing a persistent Docker server with consistent caching. When enabled in a CodeBuild project, a dedicated Docker server is provisioned with persistent storage that maintains your Docker layer cache. This server can handle multiple concurrent Docker build operations, with all builds benefiting from the same centralized cache.</p> \n<p><span><strong>Using AWS CodeBuild Docker Server</strong></span><br /> Let me walk you through a demonstration that showcases the benefits with the new Docker Server capability.</p> \n<p>For this demonstration, I’m building a complex, multi-layered Docker image based on the official <a href=\"https://github.com/aws/aws-codebuild-docker-images/tree/master\">AWS CodeBuild curated Docker images repository</a>, specifically the Dockerfile for building a <a href=\"https://github.com/aws/aws-codebuild-docker-images/tree/master/ubuntu/standard/5.0\">standard Ubuntu image</a>. This image contains numerous dependencies and tools required for modern continuous integration and continuous delivery (CI/CD) pipelines, making it a good example of the type of large Docker builds that development teams regularly perform.</p> \n<pre><code>\n# Copyright 2020-2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Amazon Software License (the \"License\"). You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#\n#    http://aws.amazon.com/asl/\n#\n# or in the \"license\" file accompanying this file.\n# This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied.\n# See the License for the specific language governing permissions and limitations under the License.\nFROM public.ecr.aws/ubuntu/ubuntu:20.04 AS core\n\nARG DEBIAN_FRONTEND=\"noninteractive\"\n\n# Install git, SSH, Git, Firefox, GeckoDriver, Chrome, ChromeDriver,  stunnel, AWS Tools, configure SSM, AWS CLI v2, env tools for runtimes: Dotnet, NodeJS, Ruby, Python, PHP, Java, Go, .NET, Powershell Core,  Docker, Composer, and other utilities\nCOMMAND REDACTED FOR BREVITY\n# Activate runtime versions specific to image version.\nRUN n $NODE_14_VERSION\nRUN pyenv  global $PYTHON_39_VERSION\nRUN phpenv global $PHP_80_VERSION\nRUN rbenv  global $RUBY_27_VERSION\nRUN goenv global  $GOLANG_15_VERSION\n\n# Configure SSH\nCOPY ssh_config /root/.ssh/config\nCOPY runtimes.yml /codebuild/image/config/runtimes.yml\nCOPY dockerd-entrypoint.sh /usr/local/bin/dockerd-entrypoint.sh\nCOPY legal/bill_of_material.txt /usr/share/doc/bill_of_material.txt\nCOPY amazon-ssm-agent.json /etc/amazon/ssm/amazon-ssm-agent.json\n\nENTRYPOINT [\"/usr/local/bin/dockerd-entrypoint.sh\"]\n</code></pre> \n<p>This Dockerfile creates a comprehensive build environment with multiple programming languages, build tools, and dependencies – exactly the type of image that would benefit from persistent caching.</p> \n<p>In the build specification (buildspec), I use the <code>docker buildx build .</code> command:</p> \n<pre><code>version: 0.2\nphases:\n  build:\n    commands:\n      - cd ubuntu/standard/5.0\n      - docker buildx build -t codebuild-ubuntu:latest .\n</code></pre> \n<p>To enable the Docker Server capability, I navigate to the AWS CodeBuild console and select <strong>Create project</strong>. I can also enable this capability when editing existing CodeBuild projects.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/28/news-2025-codebuilddockerserver-0.png\" alt=\"\" width=\"3024\" height=\"1716\" /></p> \n<p>I fill in all details and configuration. In the <strong>Environment</strong> section, I select <strong>Additional configuration</strong>.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/30/news-2025-codebuilddockerserver-rev-1.png\" alt=\"\" width=\"2646\" height=\"3256\" /></p> \n<p>Then, I scroll down and find <strong>Docker server configuration</strong> and select <strong>Enable docker server for this project</strong>. When I select this option, I can choose a compute type configuration for the Docker server. When I’m finished with the configurations, I create this project.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/03/news-2025-codebuilddockerserver-rev-6.png\" alt=\"\" width=\"917\" height=\"385\" /></p> \n<p>Now, let’s see the Docker Server capability in action.</p> \n<p>The initial build takes approximately 24 minutes and 54 seconds to complete because it needs to download and compile all dependencies from scratch. This is expected for the first build of such a complex image.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/30/news-2025-codebuilddockerserver-rev-3.png\" alt=\"\" width=\"2708\" height=\"2071\" /></p> \n<p>For subsequent builds with no code changes, the build takes only 16 seconds and that shows 98% reduction in build time.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/30/news-2025-codebuilddockerserver-rev-4.png\" alt=\"\" width=\"2696\" height=\"2080\" /></p> \n<p>Looking at the logs, I can see that with Docker Server, most layers are pulled from the persistent cache:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/30/news-2025-codebuilddockerserver-rev-5.png\" alt=\"\" width=\"2664\" height=\"2548\" /></p> \n<p>The persistent caching provided by the Docker Server maintains all layers between builds, which is particularly valuable for large, complex Docker images with many layers. This demonstrates how Docker Server can dramatically improve throughput for teams running numerous Docker builds in their CI/CD pipelines.</p> \n<p><span><strong>Additional things to know</strong></span><br /> Here are a couple of things to note:</p> \n<ul> \n <li><strong>Architecture support</strong> – The feature is available for both x86 (Linux) and ARM builds.</li> \n <li><strong>Pricing</strong> – To learn more about pricing for Docker Server capability, refer to the <a href=\"https://aws.amazon.com/codebuild/pricing/\">AWS CodeBuild pricing</a> page.</li> \n <li><strong>Availability</strong> – This feature is available in all AWS Regions where AWS CodeBuild is offered. For more information about the AWS Regions where CodeBuild is available, see the <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/\">AWS Regions page</a>.</li> \n</ul> \n<p>You can learn more about the Docker Server feature in the <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/sample-docker-server.html\">AWS CodeBuild documentation</a>.</p> \n<p>Happy building! —</p> \n<p><a href=\"https://linkedin.com/in/donnieprakoso\">Donnie Prakoso</a></p> \n<hr /> \n<p>How is the News Blog doing? Take this <a href=\"https://amazonmr.au1.qualtrics.com/jfe/form/SV_eyD5tC5xNGCdCmi\">1 minute survey</a>!</p> \n<p><em>(This <a href=\"https://amazonmr.au1.qualtrics.com/jfe/form/SV_eyD5tC5xNGCdCmi\">survey</a> is hosted by an external company. AWS handles your information as described in the <a href=\"https://aws.amazon.com/privacy/?trk=4b29643c-e00f-4ab6-ab9c-b1fb47aa1708&amp;sc_channel=blog\">AWS Privacy Notice</a>. AWS will own the data gathered via this survey and will not share the information collected with survey respondents.)</em></p>","author":"Donnie Prakoso","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"deb426962c97d640a49a2d1f1f0e5e5edd703687eead6a95c374bcfac743d284","category":"Tech"}