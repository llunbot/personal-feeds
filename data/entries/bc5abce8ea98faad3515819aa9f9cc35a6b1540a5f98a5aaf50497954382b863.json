{"title":"New – AWS Control Tower Account Factory for Terraform","link":"https://aws.amazon.com/blogs/aws/new-aws-control-tower-account-factory-for-terraform/","date":1638233257000,"content":"<p><a href=\"https://aws.amazon.com/controltower/\">AWS Control Tower</a> makes it easier to set up and manage a secure, multi-account AWS environment. AWS Control Tower uses <a href=\"https://aws.amazon.com/organizations/\">AWS Organizations</a> to create what is called a <strong>landing zone</strong>, bringing ongoing account management and governance based on our experience working with thousands of customers.</p> \n<p>If you use <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> to manage your infrastructure as code, you can customize your AWS Control Tower landing zone using <a href=\"https://aws.amazon.com/solutions/implementations/customizations-for-aws-control-tower/\">Customizations for AWS Control Tower</a>, a solution that helps you deploy custom templates and policies to individual accounts and organizational units (OUs) within your organization.</p> \n<p>But what if you use <a href=\"https://www.terraform.io/\">Terraform</a> to manage your AWS infrastructure?</p> \n<p>Today, I am happy to share the availability of <a href=\"https://github.com/aws-ia/terraform-aws-control_tower_account_factory\">AWS Control Tower Account Factory for Terraform (AFT)</a>, a new Terraform module maintained by the AWS Control Tower team that allows you to provision and customize AWS accounts through Terraform using a deployment pipeline. The source code for the development pipeline can be stored in <a href=\"https://aws.amazon.com/codecommit/\">AWS CodeCommit</a>, <a href=\"https://github.com/\">GitHub</a>, <a href=\"https://github.com/enterprise\">GitHub Enterprise</a>, or <a href=\"https://bitbucket.org/\">BitBucket</a>. With AFT, you can automate the creation of fully functional accounts that have access to all the resources they need to be productive. The module works with <a href=\"https://github.com/hashicorp/terraform\">Terraform open source</a>, <a href=\"https://www.terraform.io/docs/enterprise/index.html\">Terraform Enterprise</a>, and <a href=\"https://www.terraform.io/cloud\">Terraform Cloud</a>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/12/aws-control-tower-account-factory-for-terraform-diagram.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/12/aws-control-tower-account-factory-for-terraform-diagram-1024x498.png\" /></a></p> \n<p>Let’s see how this works in practice.</p> \n<p><span><strong>Using AWS Control Tower Account Factory for Terraform<br /> </strong></span>First, I create a <code>main.tf</code> file that uses the <a href=\"https://github.com/aws-ia/terraform-aws-control_tower_account_factory\">AWS Control Tower Account Factory for Terraform (AFT)</a> module:</p> \n<div> \n <pre><code>module \"aft\" {\n  source = \"git@github.com:aws-ia/terraform-aws-control_tower_account_factory.git\"\n\n  # Required Parameters\n  ct_management_account_id    = \"123412341234\"\n  log_archive_account_id      = \"234523452345\"\n  audit_account_id            = \"345634563456\"\n  aft_management_account_id   = \"456745674567\"\n  ct_home_region              = \"us-east-1\"\n  tf_backend_secondary_region = \"us-west-2\"\n\n  # Optional Parameters\n  terraform_distribution = \"oss\"\n  vcs_provider           = \"codecommit\"\n\n  # Optional Feature Flags\n  aft_feature_delete_default_vpcs_enabled = false\n  aft_feature_cloudtrail_data_events      = false\n  aft_feature_enterprise_support          = false\n}</code></pre> \n</div> \n<p>The first six parameters are required. As a prerequisite, I need to pass the ID of four AWS accounts in my AWS organization:</p> \n<ul> \n <li><code>ct_management_account_id</code> – AWS Control Tower management account</li> \n <li><code>log_archive_account_id</code> – Log Archive account</li> \n <li><code>audit_account_id</code> – Audit account</li> \n <li><code>aft_management_account_id</code> – AFT management account</li> \n</ul> \n<p>Then, I have to pass two <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/#Regions\">AWS Regions</a>:</p> \n<ul> \n <li><code>ct_home_region</code> – The Region from which this module will be executed. This must be the same Region where AWS Control Tower is deployed.</li> \n <li><code>tf_backend_secondary_region</code> – The backend primary Region is the same as the AFT Region. This parameter defines the secondary Region to replicate to. AFT creates a backend for state tracking for its own state. It is also used for Terraform when using the open-source version.</li> \n</ul> \n<p>The other parameters are optional and are set to their default value in the previous <code>main.tf</code> file:</p> \n<ul> \n <li><code> terraform_distribution</code> – To select between Terraform open source (default), Enterprise, or Cloud</li> \n <li><code>vcs_provider</code> – To choose the version control system to use between AWS CodeCommit (default), GitHub, GitHub Enterprise, or BitBucket.</li> \n</ul> \n<p>These feature flags are disabled by default and can be omitted unless you want to enable them:</p> \n<ul> \n <li><code>aft_feature_delete_default_vpcs_enabled</code> – To automatically delete the <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html\">default VPC</a> for new accounts.</li> \n <li><code>aft_feature_cloudtrail_data_events</code> – To enable <a href=\"https://aws.amazon.com/cloudtrail/\">AWS CloudTrail</a> data events for new accounts. Be aware that this option, usually required for compliance in highly regulated environments, can have an impact on your costs.</li> \n <li><code>aft_feature_enterprise_support</code> – To automatically enroll new accounts with Enterprise Support (if you have an Enterprise Support Plan).</li> \n</ul> \n<p>First, I initialize the project and download the plugins:</p> \n<div> \n <pre><code>terraform init</code></pre> \n</div> \n<p>Then, I use <a href=\"https://aws.amazon.com/single-sign-on/\">AWS Single Sign-On</a> to log in with the AWS Control Tower management account and start the deployment:</p> \n<div> \n <pre><code>terraform apply</code></pre> \n</div> \n<p>I confirm with a <code>yes</code> and, after some time, the deployment is complete.</p> \n<p>Now, I use AWS SSO again to log in with the AFT management account. In the <a href=\"https://aws.amazon.com/codecommit/\">AWS CodeCommit</a> console, I find four repositories that I can use to customize the accounts created with AFT.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/aft-repositories.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/11/15/aft-repositories-1024x504.png\" /></a></p> \n<p>These repositories are used by pipelines managed by <a href=\"https://aws.amazon.com/codepipeline/\">AWS CodePipeline</a> to automate the account creation:</p> \n<ul> \n <li><code>aft-account-request</code> – This is where I place requests for accounts provisioned and managed by AFT.</li> \n <li><code>aft-global-customizations</code> – I can use this repository to customize all provisioned accounts with customer-defined resources. The resources can be created through Terraform or through Python.</li> \n <li><code>aft-account-customizations</code> – Here, I can customize provisioned accounts depending on the value of the <code>account_customizations_name</code> parameter in the <code>aft-account-request</code> repository. In this way, I can create different sets of customizations depending on the role the account will be used for.</li> \n <li><code>aft-account-provisioning-customizations</code> – This repository uses <a href=\"https://aws.amazon.com/step-functions\">AWS Step Functions</a> to customize the provisioning process for new accounts and simplify the integration with additional environments. State machines can use <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> functions, <a href=\"https://aws.amazon.com/ecs/\">Amazon Elastic Container Service (Amazon ECS)</a> or <a href=\"https://aws.amazon.com/fargate/\">AWS Fargate</a> tasks, custom <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/concepts-activities.html\">activities</a> hosted either on AWS or on-premises, or <a href=\"https://aws.amazon.com/sns/\">Amazon Simple Notification Service (SNS)</a> and <a href=\"https://aws.amazon.com/sqs/\">Amazon Simple Queue Service (SQS)</a> to communicate with external applications.</li> \n</ul> \n<p>Currently, these four repositories are all empty. To start, I use the code in the <code>sources/aft-customizations-repos</code> folder in the <a href=\"https://github.com/aws-ia/terraform-aws-control_tower_account_factory\">GitHub repo of the AFT Terraform module</a>.</p> \n<p>Using the example in the <code>aft-account-request</code> repository, I prepare a template to create a couple of AWS accounts. One of the two accounts is for a software developer.</p> \n<p>To help software developers be productive quickly, I create a specific account customization. In the template, I set the parameter <code>account_customizations_name</code> equal to <code>developer-customization</code>.</p> \n<p>Then, in the <code>aft-account-customizations</code> repository, I create a <code>developer-customization</code> folder where I put a <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloud9_environment_ec2\">Terraform template</a> to automatically create an <a href=\"https://aws.amazon.com/cloud9/\">AWS Cloud9</a> EC2-based development environment for new accounts of that type. Optionally, I can extend that with my Python code, for example, to invoke internal or external APIs. Using this approach, all new accounts for software developers will have their development environment ready as they go through the delivery pipeline.</p> \n<p>I push the changes to the <code>main</code> branch (first for the <code>aft-account-customizations</code> repository, then for the <code>aft-account-request</code>). This triggers the execution of the pipeline. After a few minutes, the two new accounts are ready to be used.</p> \n<p>You can customize accounts created by AFT based on your unique requirements. For example, you can provide each account with its own specific security setup (such as IAM roles or security groups) and storage (for example, pre-configured <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> buckets).</p> \n<p><span><strong>Availability and Pricing<br /> </strong></span><a href=\"https://github.com/aws-ia/terraform-aws-control_tower_account_factory\">AWS Control Tower Account Factory for Terraform (AFT)</a> works in any Region where <a href=\"https://aws.amazon.com/controltower/\">AWS Control Tower</a> is available. There are no additional costs when using AFT. You pay for the services used by the solution. For example, when you set up AWS Control Tower, you will begin to incur costs for AWS services configured to set up your landing zone and mandatory guardrails.</p> \n<p>When building this solution, we worked together with <a href=\"https://www.hashicorp.com/\">HashiCorp</a>. <a href=\"https://twitter.com/armon\">Armon Dadgar</a>, HashiCorp Co-Founder and CTO, told us: “Managing cloud environments with hundreds or thousands of users can be a complex and time-consuming process. Using a software delivery pipeline integrating Terraform and AWS Control Tower makes it easier to achieve consistent governance and compliance requirements across all accounts.” For more information on our collaboration, see <a href=\"https://www.hashicorp.com/blog/hashicorp-teams-with-aws-on-new-control-tower-account-factory-for-terraform\">HashiCorp Teams with AWS on New Control Tower Account Factory for Terraform</a>.</p> \n<p>The pipeline provides an account creation process that monitors when account provisioning is complete and then triggers additional Terraform modules to enhance the account with further customizations. You can configure the pipeline to use your own custom Terraform modules or pick from pre-published Terraform modules for common products and configurations.</p> \n<p><strong><a href=\"https://github.com/aws-ia/terraform-aws-control_tower_account_factory\">Simplify and standardize AWS account creation using AWS Control Tower Account Factory for Terraform</a>.</strong></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"bc5abce8ea98faad3515819aa9f9cc35a6b1540a5f98a5aaf50497954382b863","category":"Tech"}