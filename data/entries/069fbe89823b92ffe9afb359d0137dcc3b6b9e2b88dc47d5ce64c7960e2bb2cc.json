{"title":"New: AWS Telco Network Builder – Deploy and Manage Telco Networks","link":"https://aws.amazon.com/blogs/aws/new-aws-telco-network-builder-deploy-and-manage-telco-networks/","date":1677000658000,"content":"<p>Over the course of more than one hundred years, the telecom industry has become standardized and regulated, and has developed methods, technologies, and an entire vocabulary (chock full of interesting acronyms) along the way. As an industry, they need to honor this tremendous legacy while also taking advantage of new technology, all in the name of delivering the best possible voice and data services to their customers.</p> \n<p>Today I would like to tell you about <a href=\"https://aws.amazon.com/tnb/\">AWS Telco Network Builder (TNB)</a>. This new service is designed to help Communications Service Providers (CSPs) deploy and manage public and private telco networks on AWS. It uses existing standards, practices, and data formats, and makes it easier for CSPs to take advantage of the power, scale, and flexibility of AWS.</p> \n<p>Today, CSPs often deploy their code to virtual machines. However, as they look to the future they are looking for additional flexibility and are increasingly making use of containers. <span>AWS TNB</span> is intended to be a part of this transition, and makes use of Kubernetes and <a href=\"https://aws.amazon.com/eks/\">Amazon Elastic Kubernetes Service (EKS)</a> for packaging and deployment.</p> \n<p><span><strong>Concepts and Vocabulary</strong></span><br /> Before we dive in to the service, let’s take a look some concepts and vocabulary that are unique to this industry, and are relevant to <span>AWS TNB</span>:</p> \n<p><strong>European Telecommunications Standards Institute (<a href=\"https://www.etsi.org/\">ETSI</a>)</strong> – A European organization that defines specifications suitable for global use. <span>AWS TNB</span> supports multiple ETSI specifications including <a href=\"https://www.etsi.org/deliver/etsi_gs/NFV-SOL/001_099/001/03.06.01_60/gs_NFV-SOL001v030601p.pdf\">ETSI SOL001</a> through <a href=\"https://www.etsi.org/deliver/etsi_gs/NFV-SOL/001_099/005/03.06.01_60/gs_NFV-SOL005v030601p.pdf\">ETSI SOL005</a>, and <a href=\"https://www.etsi.org/deliver/etsi_gs/NFV-SOL/001_099/007/03.05.01_60/gs_NFV-SOL007v030501p.pdf\">ETSI SOL007</a>.</p> \n<p><strong>Communications Service Provider (CSP)</strong> – An organization that offers telecommunications services.</p> \n<p><strong>Topology and Orchestration Specification for Cloud Applications (<a href=\"http://docs.oasis-open.org/tosca/TOSCA/v1.0/TOSCA-v1.0.html\">TOSCA</a>) – </strong>A standardized grammar that is used to describe service templates for telecommunications applications.</p> \n<p><strong>Network Function (NF)</strong> – A software component that performs a specific core or value-added function within a telco network.</p> \n<p><strong>Virtual Network Function Descriptor (VNFD) – </strong>A specification of the metadata needed to onboard and manage a Network Function.</p> \n<p><strong>Cloud Service Archive (CSAR)</strong> – A ZIP file that contains a VNFD, references to container images that hold Network Functions, and any additional files needed to support and manage the Network Function.</p> \n<p><strong>Network Service Descriptor (NSD) – </strong>A specification of the compute, storage, networking, and location requirements for a set of Network Functions along with the information needed to assemble them to form a telco network.</p> \n<p><strong>Network Core</strong> – The heart of a network. It uses control plane and data plane operations to manage authentication, authorization, data, and policies.</p> \n<p><strong>Service Orchestrator (SO) – </strong>An external, high-level network management tool.</p> \n<p><strong>Radio Access Network (RAN) – </strong>The components (base stations, antennas, and so forth) that provide wireless coverage over a specific geographic area.<strong><br /> </strong></p> \n<p><span><strong>Using <a href=\"https://aws.amazon.com/tnb/\">AWS Telco Network Builder (TNB)</a></strong></span><br /> I don’t happen to be a CSP, but I will do my best to walk you through the getting-started experience anyway! The primary steps are:</p> \n<ol> \n <li>Creating a function package for each Network Function by uploading a CSAR.</li> \n <li>Creating a network package for the network by uploading a Network Service Descriptor (NSD).</li> \n <li>Creating a network by selecting and instantiating an NSD.</li> \n</ol> \n<p>To begin, I open the <span>AWS TNB</span> Console and click Get started:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/21/tnb_dash_3.png\" alt width=\"900\" height=\"867\" /></p> \n<p>Initially, I have no networks, no function packages, and no network packages:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/21/tnb_dashes_4.png\" alt width=\"900\" height=\"303\" /></p> \n<p>My colleagues supplied me with sample CSARs and an NSD for use in this blog post (the network functions are from <a href=\"https://www.free5gc.org/\">Free 5G Core</a>):</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/14/tnb_vnf_dir_2.png\" alt width=\"567\" height=\"293\" /></p> \n<p>Each CSAR is a fairly simple ZIP file with a VNFD and other items inside. For example, the VNFD for the <a href=\"https://www.free5gc.org/\">Free 5G Core</a> Session Management Function (<strong>smf</strong>) looks like this:</p> \n<div> \n <pre><code>tosca_definitions_version: tnb_simple_yaml_1_0\n\ntopology_template:\n\n  node_templates:\n\n    Free5gcSMF:\n      type: tosca.nodes.AWS.VNF\n      properties:\n        descriptor_id: \"4b2abab6-c82a-479d-ab87-4ccd516bf141\"\n        descriptor_version: \"1.0.0\"\n        descriptor_name: \"Free5gc SMF 1.0.0\"\n        provider: \"Free5gc\"\n      requirements:\n        helm: HelmImage\n\n    HelmImage:\n      type: tosca.nodes.AWS.Artifacts.Helm\n      properties:\n        implementation: \"./free5gc-smf\"</code></pre> \n</div> \n<p>The final section (<code>HelmImage</code>) of the VNFD points to the Kubernetes <a href=\"https://helm.sh/\">Helm Chart</a> that defines the implementation.</p> \n<p>I click <strong>Function packages</strong> in the console, then click <strong>Create function package</strong>. Then I upload the first CSAR and click <strong>Next</strong>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/17/tnb_amf_upload_2.png\" alt width=\"899\" height=\"472\" /></p> \n<p>I review the details and click <strong>Create function package</strong> (each VNFD can include a set of parameters that have default values which can be overwritten with values that are specific to a particular deployment):</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/21/tnb_amf_create_3.png\" alt width=\"900\" height=\"539\" /></p> \n<p>I repeat this process for the nine remaining CSARs, and all ten function packages are ready to use:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/21/tnb_funpacks_2.png\" alt width=\"901\" height=\"490\" /></p> \n<p>Now I am ready to create a Network Package. The Network Service Descriptor is also fairly simple, and I will show you several excerpts. First, the NSD establishes a mapping from <code>descriptor_id</code> to <code>namespace</code> for each Network Function so that the functions can be referenced by name:</p> \n<div> \n <pre><code>vnfds:\n  - descriptor_id: \"aa97cf70-59db-4b13-ae1e-0942081cc9ce\"\n    namespace: \"amf\"\n  - descriptor_id: \"86bd1730-427f-480a-a718-8ae9dcf3f531\"\n    namespace: \"ausf\"\n...</code></pre> \n</div> \n<p>Then it defines the input variables, including default values (this reminds me of a <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> template):</p> \n<div> \n <pre><code>  inputs:\n    vpc_cidr_block:\n      type: String\n      description: \"CIDR Block for Free5GCVPC\"\n      default: \"10.100.0.0/16\"\n\n    eni_subnet_01_cidr_block:\n      type: String\n      description: \"CIDR Block for Free5GCENISubnet01\"\n      default: \"10.100.50.0/24\"\n...</code></pre> \n</div> \n<p>Next, it uses the variables to create a mapping to the desired AWS resources (a VPC and a subnet in this case):</p> \n<div> \n <pre><code>   Free5GCVPC:\n      type: tosca.nodes.AWS.Networking.VPC\n      properties:\n        cidr_block: { get_input: vpc_cidr_block }\n        dns_support: true\n\n    Free5GCENISubnet01:\n      type: tosca.nodes.AWS.Networking.Subnet\n      properties:\n        type: \"PUBLIC\"\n        availability_zone: { get_input: subnet_01_az }\n        cidr_block: { get_input: eni_subnet_01_cidr_block }\n      requirements:\n        route_table: Free5GCRouteTable\n        vpc: Free5GCVPC\n</code></pre> \n</div> \n<p>Then it defines an AWS Internet Gateway within the VPC:</p> \n<div> \n <pre><code>    Free5GCIGW:\n      type: tosca.nodes.AWS.Networking.InternetGateway\n      capabilities:\n        routing:\n          properties:\n            dest_cidr: { get_input: igw_dest_cidr }\n      requirements:\n        route_table: Free5GCRouteTable\n        vpc: Free5GCVPC</code></pre> \n</div> \n<p>Finally, it specifies deployment of the Network Functions to an EKS cluster; the functions are deployed in the specified order:</p> \n<div> \n <pre><code>    Free5GCHelmDeploy:\n      type: tosca.nodes.AWS.Deployment.VNFDeployment\n      requirements:\n        cluster: Free5GCEKS\n        deployment: Free5GCNRFHelmDeploy\n        vnfs:\n          - amf.Free5gcAMF\n          - ausf.Free5gcAUSF\n          - nssf.Free5gcNSSF\n          - pcf.Free5gcPCF\n          - smf.Free5gcSMF\n          - udm.Free5gcUDM\n          - udr.Free5gcUDR\n          - upf.Free5gcUPF\n          - webui.Free5gcWEBUI\n      interfaces:\n        Hook:\n          pre_create: Free5gcSimpleHook</code></pre> \n</div> \n<p>I click <strong>Create network package</strong>, select the NSD, and click <strong>Next</strong> to proceed. <span>AWS TNB</span> asks me to review the list of function packages and the NSD parameters. I do so, and click <strong>Create network package</strong>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/14/tnb_netpack_1.png\" alt width=\"700\" height=\"942\" /></p> \n<p>My network package is created and ready to use within seconds:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/21/tnb_net_packs_2.png\" alt width=\"900\" height=\"324\" /></p> \n<p>Now I am ready to create my network instance! I select the network package and choose <strong>Create network instance</strong> from the <strong>Actions</strong> menu:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/21/tnb_action_menu_2.png\" alt width=\"480\" height=\"387\" /></p> \n<p>I give my network a name and a description, then click <strong>Next</strong>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/14/tnb_netinfo_1.png\" alt width=\"899\" height=\"533\" /></p> \n<p>I make sure that I have selected the desired network package, review the list of functions packages that will be deployed, and click <strong>Next</strong>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/21/tnb_net_select_2.png\" alt width=\"867\" height=\"1193\" /></p> \n<p>Then I do one final review, and click <strong>Create network instance</strong>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/21/tnb_net_review_2.png\" alt width=\"800\" height=\"520\" /></p> \n<p>I select the new network instance and choose <strong>Instantiate</strong> from the <strong>Actions</strong> menu:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/21/tnb_instantiate_2.png\" alt width=\"900\" height=\"243\" /></p> \n<p>I review the parameters, and enter any desired overrides, then click <strong>Instantiate network</strong>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/21/tnb_instantiate_params_2.png\" alt width=\"900\" height=\"1063\" /></p> \n<p>AWS Telco Network Builder (TNB) begins to instantiate my network (behind the scenes, the service creates a <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> template, uses the template to create a stack, and executes other tasks including Helm charts and custom scripts). When the instantiation step is complete, my network is ready to go. Instantiating a network creates a <em>deployment</em>, and the same network (perhaps with some parameters overridden) can be deployed more than once. I can see all of the deployments at a glance:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/21/tnb_net_deploys_2.png\" alt width=\"901\" height=\"484\" /></p> \n<p>I can return to the dashboard to see my networks, function packages, network packages, and recent deployments:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/02/21/tnb_inst_dash_2.png\" alt width=\"900\" height=\"370\" /></p> \n<p><strong><span>Inside an <span>AWS TNB</span> Deployment</span></strong><br /> Let’s take a quick look inside my deployment. Here’s what <span>AWS TNB</span> set up for me:</p> \n<p><strong>Network</strong> – An <a href=\"https://aws.amazon.com/vpc/\">Amazon Virtual Private Cloud (Amazon VPC)</a> with three subnets, a route table, a route, and an Internet Gateway.</p> \n<p><strong>Compute</strong> – An <a href=\"https://aws.amazon.com/eks/\">Amazon Elastic Kubernetes Service (EKS)</a> cluster.</p> \n<p><strong>CI/CD</strong> – An <a href=\"https://aws.amazon.com/codebuild/\">AWS CodeBuild</a> project that is triggered every time a node is added to the cluster.</p> \n<p><span><strong>Things to Know</strong></span><br /> Here are a couple of things to know about AWS Telco Network Builder (TNB):</p> \n<p>Access – In addition to the console access that I showed you above, you can access <span>AWS TNB</span> from the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a> and the <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a>.</p> \n<p><strong>Deployment Options</strong> – We are launching with the ability to create a network that spans multiple Availability Zones in a single AWS Region. Over time we expect to add additional deployment options such as Local Zones and Outposts.</p> \n<p><strong>Pricing</strong> – Pricing is based on the number of Network Functions that are managed by <span>AWS TNB</span> and on calls to the <span>AWS TNB</span> APIs, but the first 45,000 API requests per month in each AWS Region are not charged. There are also additional charges for the AWS resources that are created as part of the deployment. To learn more, read the <a href=\"https://aws.amazon.com/tnb/pricing\">TNB Pricing</a> page.</p> \n<p><span><strong>Getting Started</strong></span><br /> To learn more and to get started, visit the <a href=\"https://aws.amazon.com/tnb/\">AWS Telco Network Builder (TNB)</a> home page.</p> \n<p></p>\n<p>— <a href=\"https://twitter.com/jeffbarr\">Jeff</a>;</p>\n<p></p>","author":"Jeff Barr","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"069fbe89823b92ffe9afb359d0137dcc3b6b9e2b88dc47d5ce64c7960e2bb2cc","category":"Tech"}