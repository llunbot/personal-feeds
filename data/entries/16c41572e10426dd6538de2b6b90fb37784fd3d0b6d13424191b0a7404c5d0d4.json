{"title":"Amazon MSK Introduces Managed Data Delivery from Apache Kafka to Your Data Lake","link":"https://aws.amazon.com/blogs/aws/amazon-msk-introduces-managed-data-delivery-from-apache-kafka-to-your-data-lake/","date":1695850813000,"content":"<p>I’m excited to announce today a new capability of <a href=\"https://aws.amazon.com/msk/\">Amazon Managed Streaming for Apache Kafka</a> (Amazon MSK) that allows you to continuously load data from an <a href=\"https://kafka.apache.org/\">Apache Kafka</a> cluster to <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>. We use <a href=\"https://aws.amazon.com/kinesis/data-firehose/\">Amazon Kinesis Data Firehose</a>—an extract, transform, and load (ETL) service—to read data from a Kafka topic, transform the records, and write them to an Amazon S3 destination. Kinesis Data Firehose is entirely managed and you can configure it with just a few clicks in the console. No code or infrastructure is needed.</p> \n<p>Kafka is commonly used for building real-time data pipelines that reliably move massive amounts of data between systems or applications. It provides a highly scalable and fault-tolerant publish-subscribe messaging system. Many AWS customers have adopted Kafka to capture streaming data such as click-stream events, transactions, IoT events, and application and machine logs, and have applications that perform real-time analytics, run continuous transformations, and distribute this data to data lakes and databases in real time.</p> \n<p>However, deploying Kafka clusters is not without challenges.</p> \n<p>The first challenge is to deploy, configure, and maintain the Kafka cluster itself. This is why we released Amazon MSK in <a href=\"https://aws.amazon.com/blogs/aws/amazon-managed-streaming-for-apache-kafka-msk-now-generally-available/\">May 2019</a>. MSK reduces the work needed to set up, scale, and manage Apache Kafka in production. We take care of the infrastructure, freeing you to focus on your data and applications. The second challenge is to write, deploy, and manage application code that consumes data from Kafka. It typically requires coding connectors using the <a href=\"https://docs.confluent.io/platform/current/connect/index.html\">Kafka Connect framework</a> and then deploying, managing, and maintaining a scalable infrastructure to run the connectors. In addition to the infrastructure, you also must code the data transformation and compression logic, manage the eventual errors, and code the retry logic to ensure no data is lost during the transfer out of Kafka.</p> \n<p>Today, we announce the availability of a fully managed solution to deliver data from Amazon MSK to Amazon S3 using <a href=\"https://aws.amazon.com/kinesis/data-firehose/\">Amazon Kinesis Data Firehose</a>. The solution is serverless–there is no server infrastructure to manage–and requires no code. The data transformation and error-handling logic can be configured with a few clicks in the console.</p> \n<p>The architecture of the solution is illustrated by the following diagram.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/14/diagram-msk-v1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/14/diagram-msk-v1.png\" alt=\"Amazon MSK to Amazon S3 architecture diagram\" width=\"1203\" height=\"340\" /></a></p> \n<p>Amazon MSK is the data source, and Amazon S3 is the data destination while <a href=\"https://aws.amazon.com/kinesis/data-firehose/\">Amazon Kinesis Data Firehose</a> manages the data transfer logic.</p> \n<p>When using this new capability, you no longer need to develop code to read your data from Amazon MSK, transform it, and write the resulting records to Amazon S3. Kinesis Data Firehose manages the reading, the transformation and compression, and the write operations to Amazon S3. It also handles the error and retry logic in case something goes wrong. The system delivers the records that can not be processed to the S3 bucket of your choice for manual inspection. The system also manages the infrastructure required to handle the data stream. It will scale out and scale in automatically to adjust to the volume of data to transfer. There are no provisioning or maintenance operations required on your side.</p> \n<p>Kinesis Data Firehose delivery streams support both public and private Amazon MSK provisioned or serverless clusters. It also supports cross-account connections to read from an MSK cluster and to write to S3 buckets in different AWS accounts. The Data Firehose delivery stream reads data from your MSK cluster, buffers the data for a configurable threshold size and time, and then writes the buffered data to Amazon S3 as a single file. MSK and Data Firehose must be in the same AWS Region, but Data Firehose can deliver data to Amazon S3 buckets in other Regions.</p> \n<p>Kinesis Data Firehose delivery streams can also convert data types. It has built-in transformations to support JSON to <a href=\"https://parquet.apache.org/\">Apache Parquet</a> and <a href=\"https://orc.apache.org/\">Apache ORC</a> formats. These are columnar data formats that save space and enable faster queries on Amazon S3. For non-JSON data, you can use <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> to transform input formats such as CSV, XML, or structured text into JSON before converting the data to Apache Parquet/ORC. Additionally, you can specify data compression formats from Data Firehose, such as <a href=\"https://en.wikipedia.org/wiki/Gzip\">GZIP</a>, <a href=\"https://en.wikipedia.org/wiki/ZIP_(file_format)\">ZIP</a>, and <a href=\"https://en.wikipedia.org/wiki/Snappy_(compression)\">SNAPPY</a>, before delivering the data to Amazon S3, or you can deliver the data to Amazon S3 in its raw form.</p> \n<p><span><strong>Let’s See How It Works<br /> </strong></span>To get started, I use an AWS account where there’s an Amazon MSK cluster already configured and some applications streaming data to it. To get started and to create your first Amazon MSK cluster, I encourage you <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/getting-started.html\">to read the tutorial</a>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/10/2023-09-08_18-30-15-2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/10/2023-09-08_18-30-15-2.png\" alt=\"Amazon MSK - List of existing clusters\" width=\"800\" height=\"273\" /></a></p> \n<p>For this demo, I use the console to create and configure the data delivery stream. Alternatively, I can use the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a>, <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a>, <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a>, or <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kinesis_firehose_delivery_stream.html\">Terraform</a>.</p> \n<p>I navigate to the <a href=\"https://aws.amazon.com/kinesis/data-firehose/\">Amazon Kinesis Data Firehose</a> page of the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a> and then choose <strong>Create delivery stream</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/10/2023-09-08_18-30-26-2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/10/2023-09-08_18-30-26-2.png\" alt=\"Kinesis Data Firehose - Main console page\" width=\"810\" height=\"168\" /></a></p> \n<p>I select Amazon MSK as a data <strong>Source</strong> and Amazon S3 as a delivery <strong>Destination</strong>. For this demo, I want to connect to a private cluster, so I select <strong>Private bootstrap brokers</strong> under <strong>Amazon MSK cluster connectivity</strong>.</p> \n<p>I need to enter the full ARN of my cluster. Like most people, I cannot remember the ARN, so I choose <strong>Browse</strong> and select my cluster from the list.</p> \n<p>Finally, I enter the cluster <strong>Topic</strong> name I want this delivery stream to read from.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/10/2023-09-08_18-33-49.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/10/2023-09-08_18-33-49.png\" alt=\"Configure the delivery stream\" width=\"828\" height=\"846\" /></a></p> \n<p>After the source is configured, I scroll down the page to configure the data transformation section.</p> \n<p>On the <strong>Transform and convert records</strong> section, I can choose whether I want to provide my own Lambda function to transform records that aren’t in JSON or to transform my source JSON records to one of the two available pre-built destination data formats: <a href=\"https://parquet.apache.org/\">Apache Parquet</a> or <a href=\"https://orc.apache.org/\">Apache ORC</a>.</p> \n<p>Apache Parquet and ORC formats are more efficient than JSON format to query data from Amazon S3. You can select these destination data formats when your source records are in JSON format. You must also provide a data schema from a table in <a href=\"https://aws.amazon.com/glue/\">AWS Glue</a>.</p> \n<p>These built-in transformations optimize your Amazon S3 cost and reduce time-to-insights when downstream analytics queries are performed with <a href=\"https://aws.amazon.com/athena\">Amazon Athena</a>, <a href=\"https://aws.amazon.com/redshift/spectrum/\">Amazon Redshift Spectrum</a>, or other systems.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/11/2023-09-08_18-32-20.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/11/2023-09-08_18-32-20.png\" alt=\"Configure the data transformation in the delivery stream\" width=\"832\" height=\"884\" /></a></p> \n<p>Finally, I enter the name of the destination Amazon S3 bucket. Again, when I cannot remember it, I use the <strong>Browse</strong> button to let the console guide me through my list of buckets. Optionally, I enter an <strong>S3 bucket prefix</strong> for the file names. For this demo, I enter <strong>aws-news-blog</strong>. When I don’t enter a prefix name, Kinesis Data Firehose uses the date and time (in UTC) as the default value.</p> \n<p>Under the <strong>Buffer hints, compression and encryption</strong> section, I can modify the default values for buffering, enable data compression, or select the <span>KMS</span> key to encrypt the data at rest on Amazon S3.</p> \n<p>When ready, I choose <strong>Create delivery stream</strong>. After a few moments, the stream status changes to <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" />  available.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/11/2023-09-08_18-33-05.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/11/2023-09-08_18-33-05.png\" alt=\"Select the destination S3 bucket \" width=\"825\" height=\"832\" /></a></p> \n<p>Assuming there’s an application streaming data to the cluster I chose as a source, I can now navigate to my S3 bucket and see data appearing in the chosen destination format as Kinesis Data Firehose streams it.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/26/Screenshot-2023-09-25-at-23.44.19.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/26/Screenshot-2023-09-25-at-23.44.19.png\" alt=\"S3 bucket browsers shows the files streamed from MSK\" width=\"810\" height=\"376\" /></a></p> \n<p>As you see, no code is required to read, transform, and write the records from my Kafka cluster. I also don’t have to manage the underlying infrastructure to run the streaming and transformation logic.</p> \n<p><span><strong>Pricing and Availability.<br /> </strong></span>This new capability is available today in all AWS Regions where <a href=\"https://docs.aws.amazon.com/general/latest/gr/msk.html\">Amazon MSK</a> and <a href=\"https://docs.aws.amazon.com/general/latest/gr/fh.html\">Kinesis Data Firehose</a> are available.</p> \n<p>You pay for the volume of data going out of Amazon MSK, measured in GB per month. The billing system takes into account the exact record size; there is no rounding. As usual, <a href=\"https://aws.amazon.com/kinesis/data-firehose/pricing/\">the pricing page</a> has all the details.</p> \n<p>I can’t wait to hear about the amount of infrastructure and code you’re going to retire after adopting this new capability. <a href=\"https://console.aws.amazon.com/firehose/home\">Now go and configure your first data stream between Amazon MSK and Amazon S3 today</a>.</p> \n<p><a href=\"https://twitter.com/sebsto\">-- seb</a></p>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"16c41572e10426dd6538de2b6b90fb37784fd3d0b6d13424191b0a7404c5d0d4","category":"Tech"}