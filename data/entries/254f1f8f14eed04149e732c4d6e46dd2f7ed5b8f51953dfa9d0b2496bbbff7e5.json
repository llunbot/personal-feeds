{"title":"New – Add Your Swift Packages to AWS CodeArtifact","link":"https://aws.amazon.com/blogs/aws/new-add-your-swift-packages-to-aws-codeartifact/","date":1695249953000,"content":"<p>Starting today, <a href=\"https://www.swift.org/\">Swift</a> developers who write code for Apple platforms (<a href=\"https://developer.apple.com/ios/\">iOS</a>, <a href=\"https://developer.apple.com/ipados/\">iPadOS</a>, <a href=\"https://developer.apple.com/macos/\">macOS</a>, <a href=\"https://developer.apple.com/tvos/\">tvOS</a>, <a href=\"https://developer.apple.com/watchos/\">watchOS</a>, or <a href=\"https://developer.apple.com/visionos/\">visionOS</a>) or for Swift <a href=\"https://www.swift.org/server/\">applications running on the server side</a> can use <a href=\"https://aws.amazon.com/codeartifact\">AWS CodeArtifact</a> to securely store and retrieve their package dependencies. CodeArtifact integrates with standard developer tools such as <a href=\"https://developer.apple.com/xcode/\">Xcode</a>, <a href=\"https://developer.apple.com/library/archive/technotes/tn2339/_index.html#//apple_ref/doc/uid/DTS40014588-CH1-HOW_DO_I_BUILD_MY_PROJECTS_FROM_THE_COMMAND_LINE_\">xcodebuild</a>, and the <a href=\"https://www.swift.org/package-manager/\">Swift Package Manager</a> (the <code>swift package</code> command).</p> \n<p>Simple applications routinely include dozens of packages. Large enterprise applications might have hundreds of dependencies. These packages help developers speed up the development and testing process by providing code that solves common programming challenges such as network access, cryptographic functions, or data format manipulation. Developers also embed <a href=\"https://aws.amazon.com/what-is/sdk/\">SDKs</a>–such as the <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a>–to access remote services. These packages might be produced by other teams in your organization or maintained by third-parties, such as open-source projects. Managing packages and their dependencies is an integral part of the software development process. Modern programming languages include tools to download and resolve dependencies: <a href=\"https://maven.apache.org\">Maven</a> in Java, <a href=\"https://www.nuget.org/\">NuGet</a> in C#, <a href=\"https://www.npmjs.com/\">npm</a> or <a href=\"https://yarnpkg.com/\">yarn</a> in JavaScript, and <a href=\"https://pypi.org/project/pip/\">pip</a> in Python just to mention a few. Developers for Apple platforms use <a href=\"https://cocoapods.org/\">CocoaPods</a> or the <a href=\"https://www.swift.org/package-manager/\">Swift Package Manager</a> (SwiftPM).</p> \n<p>Downloading and integrating packages is a routine operation for application developers. However, it presents at least two significant challenges for organizations.</p> \n<p>The first challenge is legal. Organizations must ensure that licenses for third-party packages are compatible with the expected use of licenses for your specific project and that the package doesn’t violate someone else’s intellectual property (IP). The second challenge is security. Organizations must ensure that the included code is safe to use and doesn’t include back doors or intentional vulnerabilities designed to introduce security flaws in your app. Injecting vulnerabilities in popular open-source projects is known as a <a href=\"https://en.wikipedia.org/wiki/Supply_chain_attack\">supply chain attack</a> and has become increasingly popular in recent years.</p> \n<p>To address these challenges, organizations typically install private package servers on premises or in the cloud. Developers can only use packages vetted by their organization’s security and legal teams and made available through private repositories.</p> \n<p><a href=\"https://aws.amazon.com/codeartifact\">AWS CodeArtifact</a> is a managed service that allows you to safely distribute packages to your internal teams of developers. There is no need to install, manage, or scale the underlying infrastructure. We take care of that for you, giving you more time to work on your apps instead of the software development infrastructure.</p> \n<p>I’m excited to announce that CodeArtifact now supports native Swift packages, in addition to <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/using-npm.html\">npm</a>, <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/using-python.html\">PyPI</a>, <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/using-maven.html\">Maven</a>, <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/using-nuget.html\">NuGet</a>, and <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/using-generic.html\">generic</a> package formats. Swift packages are a popular way to package and distribute reusable Swift code elements. To learn how to create your own Swift package, you can follow <a href=\"https://www.swift.org/getting-started/library-swiftpm/\">this tutorial</a>. The community has also created <a href=\"https://swiftpackageindex.com/\">more than 6,000 Swift packages</a> that you can use in your Swift applications.</p> \n<p>You can now publish and download your Swift package dependencies from your CodeArtifact repository in the AWS Cloud. CodeArtifact SwiftPM works with existing developer tools such as <a href=\"https://developer.apple.com/xcode/\">Xcode</a>, <a href=\"https://www.swift.org/blog/vscode-extension/\">VSCode</a>, and the <a href=\"https://github.com/apple/swift-package-manager/blob/main/Documentation/Usage.md\">Swift Package Manager command line tool</a>. After your packages are stored in CodeArtifact, you can reference them in your project’s <code>Package.swift</code> file or in your Xcode project, in a similar way you use Git endpoints to access public Swift packages.</p> \n<p>After the configuration is complete, your network-jailed build system will download the packages from the CodeArtifact repository, ensuring that only approved and controlled packages are used during your application’s build process.</p> \n<p><span><strong>How To Get Started<br /> </strong></span>As usual on this blog, I’ll show you how it works. Imagine I’m working on an iOS application that uses <a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a> as a database. My application embeds the <a href=\"https://github.com/awslabs/aws-sdk-swift\">AWS SDK for Swift</a> as a dependency. To comply with my organization policies, the application must use a specific version of the AWS SDK for Swift, compiled in-house and approved by my organization’s legal and security teams. In this demo, I show you how I prepare my environment, upload the package to the repository, and use this specific package build as a dependency for my project.</p> \n<p>For this demo, I focus on the steps specific to Swift packages. You can read <a href=\"https://aws.amazon.com/blogs/aws/software-package-management-with-aws-codeartifact/\">the tutorial written by my colleague Steven to get started with CodeArtifact</a>.</p> \n<p>I use an AWS account that has a package <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/codeartifact-concepts.html#welcome-concepts-repository\">repository</a> (<code>MySwiftRepo</code>) and <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/codeartifact-concepts.html#welcome-concepts-domain\">domain</a> (<code>stormacq-test</code>) already configured.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/2023-09-11_22-12-12.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/2023-09-11_22-12-12.png\" alt=\"CodeArtifact repository\" width=\"800\" height=\"151\" /></a></p> \n<p>To let SwiftPM acess my CodeArtifact repository, I start by collecting an authentication token from CodeArtifact.</p> \n<pre><code>export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token \\\n                                     --domain stormacq-test              \\\n                                     --domain-owner 012345678912         \\\n                                     --query authorizationToken          \\\n                                     --output text`</code></pre> \n<p>Note that the authentication token expires after 12 hours. I must repeat this command after 12 hours to obtain a fresh token.</p> \n<p>Then, I request the repository endpoint. I pass the <code>domain</code> name and <code>domain owner</code> (the AWS account ID). Notice the <code>--format swift</code> option.</p> \n<pre><code>export CODEARTIFACT_REPO=`aws codeartifact get-repository-endpoint  \\\n                               --domain stormacq-test               \\\n                               --domain-owner 012345678912          \\\n                               --format swift                       \\\n                               --repository MySwiftRepo             \\\n                               --query repositoryEndpoint           \\\n                               --output text`</code></pre> \n<p>Now that I have the repository endpoint and an authentication token, I use the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a> to configure SwiftPM on my machine.</p> \n<p>SwiftPM can store the repository configurations at <a href=\"https://github.com/apple/swift-package-manager/blob/main/Documentation/PackageRegistry/PackageRegistryUsage.md#configuring-a-registry\">user level</a> (in the file <code>~/.swiftpm/configurations</code>) or at <a href=\"https://github.com/apple/swift-package-manager/blob/main/Documentation/PackageRegistry/PackageRegistryUsage.md#configuring-a-registry\">project level</a> (in the file <code>&lt;your project&gt;/.swiftpm/configurations</code>). By default, the CodeArtifact login command creates a project-level configuration to allow you to use different CodeArtifact repositories for different projects.</p> \n<p>I use the AWS CLI to configure SwiftPM on my build machine.</p> \n<pre><code>aws codeartifact login          \\\n    --tool swift                \\\n    --domain stormacq-test      \\\n    --repository MySwiftRepo    \\\n    --namespace aws             \\\n    --domain-owner 012345678912</code></pre> \n<p>The command invokes <code>swift package-registry login</code> with the correct options, which in turn, creates the required SwiftPM configuration files with the given repository name (<code>MySwiftRepo</code>) and scope name (<code>aws</code>).</p> \n<p>Now that my build machine is ready, I prepare my organization’s approved version of the AWS SDK for Swift package and then I upload it to the repository.</p> \n<pre><code>git clone https://github.com/awslabs/aws-sdk-swift.git\npushd aws-sdk-swift\nswift package archive-source\nmv aws-sdk-swift.zip ../aws-sdk-swift-0.24.0.zip\npopd</code></pre> \n<p>Finally, I upload this package version to the repository.</p> \n<p>When using Swift 5.9 or more recent, I can upload my package to my private repository using the SwiftPM command:</p> \n<pre><code>swift package-registry publish           \\\n                       aws.aws-sdk-swift \\\n                       0.24.0            \\\n                       --verbose</code></pre> \n<p>The versions of Swift before 5.9 don’t provide a <code>swift package-registry publish</code> command. So, I use the <code>curl</code> command instead.</p> \n<pre><code>curl  -X PUT \n      --user \"aws:$CODEARTIFACT_AUTH_TOKEN\"               \\\n      -H \"Accept: application/vnd.swift.registry.v1+json\" \\\n      -F source-archive=\"@aws-sdk-swift-0.24.0.zip\"       \\\n      \"${CODEARTIFACT_REPO}aws/aws-sdk-swift/0.24.0\"</code></pre> \n<p>Notice the format of the package name after the URI of the repository: <code>&lt;scope&gt;/&lt;package name&gt;/&lt;package version&gt;</code>. The package version must follow the <a href=\"https://semver.org/\">semantic versioning</a> scheme.</p> \n<p>I can use the CLI or the console to verify that the package is available in the repository.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/2023-09-12_00-03-46.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/2023-09-12_00-03-46.png\" alt=\"CodeArtifact List Packages\" width=\"800\" height=\"252\" /></a></p> \n<pre><code>aws codeartifact list-package-versions      \\\n                  --domain stormacq-test    \\\n                  --repository MySwiftRepo  \\\n                  --format swift            \\\n                  --namespace aws           \\\n                  --package aws-sdk-swift\n{\n    \"versions\": [\n        {\n            \"version\": \"0.24.0\",\n            \"revision\": \"6XB5O65J8J3jkTDZd8RMLyqz7XbxIg9IXpTudP7THbU=\",\n            \"status\": \"Published\",\n            \"origin\": {\n                \"domainEntryPoint\": {\n                    \"repositoryName\": \"MySwiftRepo\"\n                },\n                \"originType\": \"INTERNAL\"\n            }\n        }\n    ],\n    \"defaultDisplayVersion\": \"0.24.0\",\n    \"format\": \"swift\",\n    \"package\": \"aws-sdk-swift\",\n    \"namespace\": \"aws\"\n}\n</code></pre> \n<p>Now that the package is available, I can use it in my projects as usual.</p> \n<p>Xcode uses SwiftPM tools and configuration files I just created. To add a package to my Xcode project, I select the project name on the left pane, and then I select the <strong>Package Dependencies</strong> tab. I can see the packages that are already part of my project. To add a private package, I choose the + sign under <strong>Packages</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/2023-09-12_00-18-31.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/12/2023-09-12_00-18-31.png\" alt=\"Xcode add a package as dependency to a project\" width=\"800\" height=\"302\" /></a></p> \n<p>On the top right search field, I enter <code>aws.aws-sdk-swift</code> (this is <code>&lt;scope name&gt;.&lt;package name&gt;</code>). After a second or two, the package name appears on the list. On the top right side, you can verify the source repository (next to the <strong>Registry </strong>label). Before selecting the <strong>Add Package</strong> button, select the version of the package, just like you do for publicly available packages.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/14/2023-09-12_14-32-49.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/14/2023-09-12_14-32-49.png\" alt=\"Add a private package from Codeartifact on Xcode\" width=\"800\" height=\"450\" /></a></p> \n<p>Alternatively, for my server-side or command-line applications, I add the dependency in the <code>Package.swift</code> file. I also use the format (<code>&lt;scope&gt;.&lt;package name&gt;</code>) as the first parameter of <code>.package(id:from:)</code>function.</p> \n<pre><code>    dependencies: [\n        .package(id: \"aws.aws-sdk-swift\", from: \"0.24.0\")\n    ],\n</code></pre> \n<p>When I type <code>swift package update</code>, SwiftPM downloads the package from the CodeArtifact repository.</p> \n<p><span><strong>Things to Know<br /> </strong></span>There are some things to keep in mind before uploading your first Swift packages.</p> \n<ul> \n <li>Be sure <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html\">to update to the latest version of the CLI</a> before trying any command shown in the preceding instructions.</li> \n <li>You have to use Swift version 5.8 or newer to use CodeArtifact with the <code>swift package</code> command. On macOS, the Swift toolchain comes with Xcode. Swift 5.8 is available on macOS 13 (Ventura) and Xcode 14. On Linux and Windows, you can <a href=\"https://www.swift.org/download/\">download the Swift toolchain from swift.org</a>.</li> \n <li>You have to use Xcode 15 for your iOS, iPadOS, tvOS, or watchOS applications. I tested this with Xcode 15 beta8.</li> \n <li>The <code>swift package-registry publish</code> command is available with Swift 5.9 or newer. When you use Swift 5.8, you can use <code>curl</code>to upload your package, as I showed in the demo (or use any HTTP client of your choice).</li> \n <li>Swift packages have the concept of <a href=\"https://github.com/apple/swift-package-manager/blob/main/Documentation/PackageRegistry/Registry.md#361-package-scope\">scope</a>. A scope provides a namespace for related packages within a package repository. Scopes are mapped to CodeArtifact <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/codeartifact-concepts.html#welcome-concepts-package-namespace\">namespaces</a>.</li> \n <li>The authentication token expires after 12 hours. We suggest writing a script to automate its renewal or using <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-run-lambda-schedule.html\">a scheduled AWS Lambda function</a> and securely storing the token in <a href=\"https://aws.amazon.com/secrets-manager/\">AWS Secrets Manager</a> (for example).</li> \n</ul> \n<p><span><strong>Troubleshooting<br /> </strong></span>If Xcode can not find your private package, double-check the registry configuration in <code>~/.swiftpm/configurations/registries.json</code>. In particular, check if the scope name is present. Also verify that the authentication token is present in the keychain. The name of the entry is the URL of your repository. You can verify the entries in the keychain with the <code>/Application/Utilities/Keychain Access.app</code> application or using the <code>security</code> command line tool.</p> \n<pre><code>security find-internet-password                                                  \\\n          -s \"stormacq-test-012345678912.d.codeartifact.us-west-2.amazonaws.com\" \\\n          -g</code></pre> \n<p>Here is the SwiftPM configuration on my machine.</p> \n<pre><code>cat ~/.swiftpm/configuration/registries.json\n\n{\n  \"authentication\" : {\n    \"stormacq-test-012345678912.d.codeartifact.us-west-2.amazonaws.com\" : {\n      \"loginAPIPath\" : \"/swift/MySwiftRepo/login\",\n      \"type\" : \"token\"\n    }\n  },\n  \"registries\" : {\n    \"aws\" : { // &lt;-- this is the scope name!\n      \"url\" : \"https://stormacq-test-012345678912.d.codeartifact.us-west-2.amazonaws.com/swift/MySwiftRepo/\"\n    }\n  },\n  \"version\" : 1\n}</code></pre> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/13/2023-09-12_18-08-27.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/09/13/2023-09-12_18-08-27.png\" alt=\"Keychain item for codeartifact authentication token\" width=\"810\" height=\"239\" /></a></p> \n<p><strong><span>Pricing and Availability</span><br /> </strong>CodeArtifact costs for Swift packages are the same as for the other package formats already supported. CodeArtifact billing depends on three metrics: the storage (measured in GB per month), the number of requests, and the data transfer out to the internet or to other AWS Regions. Data transfer to AWS services in the same Region is not charged, meaning you can run your CICD jobs on <a href=\"https://aws.amazon.com/ec2/instance-types/mac/\">Amazon EC2 Mac</a> instances, for example, without incurring a charge for the CodeArtifact data transfer. As usual, <a href=\"https://aws.amazon.com/codeartifact/pricing/\">the pricing page</a> has the details.</p> \n<p>CodeArtifact for Swift packages is available in <a href=\"https://aws.amazon.com/codeartifact/faq/\">all 13 Regions where CodeArtifact is available</a>.</p> \n<p>Now go build your Swift applications and upload your private packages to CodeArtifact!</p> \n<a href=\"https://twitter.com/sebsto\">-- seb</a> \n<p>PS : Do you know you can write Lambda functions in the Swift programming language? Check <a href=\"https://swiftpackageindex.com/swift-server/swift-aws-lambda-runtime/main/documentation/awslambdaruntimecore/quick-setup\">the quick start guide</a> or follow <a href=\"https://swiftpackageindex.com/swift-server/swift-aws-lambda-runtime/main/tutorials/table-of-content\">this 35-minute tutorial</a>.</p>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"254f1f8f14eed04149e732c4d6e46dd2f7ed5b8f51953dfa9d0b2496bbbff7e5","category":"Tech"}