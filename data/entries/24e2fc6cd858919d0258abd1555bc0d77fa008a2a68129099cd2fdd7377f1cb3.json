{"title":"Add macOS to your continuous integration pipelines with AWS CodeBuild","link":"https://aws.amazon.com/blogs/aws/add-macos-to-your-continuous-integration-pipelines-with-aws-codebuild/","date":1724102071000,"content":"<p>Starting today, you can build applications on <a href=\"https://en.wikipedia.org/wiki/MacOS\">macOS</a> with <a href=\"https://aws.amazon.com/codebuild/\">AWS CodeBuild</a>. You can now build artifacts on managed <a href=\"https://en.wikipedia.org/wiki/Apple_M2\">Apple M2</a> machines that run on <a href=\"https://www.apple.com/macos/sonoma/\">macOS 14 Sonoma</a>. AWS CodeBuild is a fully managed continuous integration service that compiles source code, runs tests, and produces ready-to-deploy software packages.</p> \n<p>Building, testing, signing, and distributing applications for Apple systems (<a href=\"https://en.wikipedia.org/wiki/IOS\">iOS</a>, <a href=\"https://en.wikipedia.org/wiki/IPadOS\">iPadOS</a>, <a href=\"https://en.wikipedia.org/wiki/WatchOS\">watchOS</a>, <a href=\"https://en.wikipedia.org/wiki/TvOS\">tvOS</a>, and <a href=\"https://en.wikipedia.org/wiki/MacOS\">macOS</a>) requires the use of <a href=\"https://developer.apple.com/xcode/\">Xcode</a>, which runs exclusively on macOS. When you build for Apple systems in the AWS Cloud, it is very likely you configured your continuous integration and continuous deployment (CI/CD) pipeline to run on <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-mac-instances.html\">Amazon Elastic Cloud Compute (Amazon EC2) Mac instances</a>.</p> \n<p><a href=\"https://aws.amazon.com/blogs/aws/new-use-mac-instances-to-build-test-macos-ios-ipados-tvos-and-watchos-apps/\">Since we launched Amazon EC2 Mac in 2020</a>, I have spent <a href=\"https://www.youtube.com/watch?v=DwDO_wPLLsA&amp;list=PLZ_TUMnTqfu807CK1WZis4h89umhDapCE&amp;index=1&amp;t=13s\">a significant amount of time with our customers</a> in various industries and geographies, helping them configure and optimize their pipelines on macOS. In the simplest form, a customer’s pipeline might look like the following diagram.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/07/ec2-mac-devops-v02.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/07/ec2-mac-devops-v02.png\" alt=\"iOS build pipeline on EC2 Mac\" width=\"1920\" height=\"1080\" /></a></p> \n<p>The pipeline starts when there is a new commit or pull request on the source code repository. The repository agent installed on the machine triggers various scripts to configure the environment, build and test the application, and eventually deploy it to <a href=\"https://appstoreconnect.apple.com/\">App Store Connect</a>.</p> \n<p>Amazon EC2 Mac drastically simplifies the management and automation of macOS machines. As I like to describe it, an EC2 Mac instance has all the things I love from Amazon EC2 (<a href=\"https://aws.amazon.com/ebs/\">Amazon Elastic Block Store (Amazon EBS)</a> volumes, snapshots, virtual private clouds (VPCs), security groups, and more) applied to Mac minis running macOS in the cloud.</p> \n<p>However, customers are left with two challenges. The first is to prepare the Amazon Machine Image (AMI) with all the required tools for the build. A minimum build environment requires Xcode, but it is very common to install <a href=\"https://fastlane.tools/\">Fastlane</a> (and <a href=\"https://www.ruby-lang.org/en/\">Ruby</a>), as well as other build or development tools and libraries. Most organizations require multiple build environments for multiple combinations of macOS and Xcode versions.</p> \n<p>The second challenge is to scale your build fleet according to the number and duration of builds. Large organizations typically have hundreds or thousands of builds per day, requiring dozens of build machines. Scaling in and out of that fleet helps to save on costs. EC2 Mac instances are reserved for your dedicated use. One instance is allocated to one dedicated host. <a href=\"https://aws.amazon.com/blogs/compute/implementing-autoscaling-for-ec2-mac-instances/\">Scaling a fleet of dedicated hosts</a> requires a specific configuration.</p> \n<p>To address these challenges and simplify the configuration and management of your macOS build machines, today we introduce CodeBuild for macOS.</p> \n<p>CodeBuild for macOS is based on the recently introduced <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/fleets.html\">reserved capacity fleet</a>, which contains instances powered by Amazon EC2 that are maintained by CodeBuild. With reserved capacity fleets, you configure a set of dedicated instances for your build environment. These machines remain idle, ready to process builds or tests immediately, which reduces build durations. With reserved capacity fleets, your machines are always running and will continue to incur costs as long as they’re provisioned.</p> \n<p>CodeBuild provides a standard disk image (AMI) to run your builds. It contains preinstalled versions of Xcode, Fastlane, Ruby, Python, Node.js, and other popular tools for a development and build environment. The full <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/available-runtimes.html#macOS-runtimes\">list of tools installed</a> is available in the documentation. Over time, we will provide additional disk images with updated versions of these tools. You can also bring your own custom disk image if you desire.</p> \n<p>In addition, CodeBuild makes it easy to configure auto scaling. You tell us how much capacity you want, and we manage everything from there.</p> \n<p><span><strong>Let’s see CodeBuild for macOS in action<br /> </strong></span>To show you how it works, I create a CI/CD pipeline for my pet project: getting started with <a href=\"https://aws-amplify.github.io/\">AWS Amplify</a> on iOS. This tutorial and its accompanying source code explain how to create a simple iOS app with a cloud-based backend. The app uses a GraphQL API (<a href=\"https://aws.amazon.com/appsync/\">AWS AppSync</a>), a NoSQL database (<a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a>), a file-based storage (<a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>), and user authentication (<a href=\"https://aws.amazon.com/cognito/\">Amazon Cognito</a>). <a href=\"https://docs.amplify.aws/swift/\">AWS Amplify for Swift</a> is the piece that glues all these services together.</p> \n<p>The <a href=\"https://github.com/sebsto/amplify-ios-getting-started\">tutorial and the source code of the app are available in a Git repository</a>. It includes <a href=\"https://github.com/sebsto/amplify-ios-getting-started/tree/main/code/ci_actions\">scripts to automate the build, test, and deployment of the app</a>.</p> \n<p>Configuring a new CI/CD pipeline with CodeBuild for macOS involves the following high-level steps:</p> \n<ol> \n <li>Create the build project.</li> \n <li>Create the dedicated fleet of machines.</li> \n <li>Configure one or more build triggers.</li> \n <li>Add a pipeline definition file (<code>buildspec.yaml</code>) to the project.</li> \n</ol> \n<p>To get started, I open the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a>, select CodeBuild, and select <strong>Create project</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-02_10-19-52.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-02_10-19-52.png\" alt=\"codebuild mac - 1\" width=\"800\" height=\"346\" /></a></p> \n<p>I enter a <strong>Project name</strong> and configure the connection to the <strong>Source</strong> code repository. I use GitHub in this example. CodeBuild also supports GitLab and BitBucket. The documentation has an up-to-date list of <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/create-project.html#create-project-console-source\">supported source code repositories</a>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-02_10-24-24.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-02_10-24-24.png\" alt=\"codebuild mac - 2\" width=\"800\" height=\"874\" /></a></p> \n<p>For the <strong>Provisioning model</strong>, I select <strong>Reserved capacity</strong>. This is the only model where Amazon EC2 Mac instances are available. I don’t have a fleet defined yet, so I decide to create one on the fly while creating the build project. I select <strong>Create fleet</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-02_10-25-01.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-02_10-25-01.png\" alt=\"codebuild mac - 3\" width=\"800\" height=\"641\" /></a></p> \n<p>On the <strong>Compute fleet configuration</strong> page, I enter a <strong>Compute fleet name</strong> and select <strong>macOS</strong> as <strong>Operating system</strong>. Under <strong>Compute</strong>, I select the amount of memory and the quantity of vCPUs needed for my build project, and the number of instances I want under <strong>Capacity</strong>.</p> \n<p>For this example, I am happy to use the <strong>Managed image</strong>. It includes Xcode 15.4 and the simulator runtime for iOS 17.5, among other packages. You can read <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/available-runtimes.html#macOS-runtimes\">the list of packages preinstalled on this image</a> in the documentation.</p> \n<p>When finished, I select <strong>Create fleet</strong> to return to the CodeBuild project creation page.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-02_10-25-47.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-02_10-25-47.png\" alt=\"CodeBuild - create fleet\" width=\"1642\" height=\"2610\" /></a></p> \n<p>As a next step, I tell CodeBuild to create a new service role to define the permissions I want for my build environment. In the context of this project, I must include permissions to pull an Amplify configuration and access <a href=\"https://aws.amazon.com/secrets-manager/\">AWS Secrets Manager</a>. I’m not sharing step-by-step instructions to do so, but <a href=\"https://github.com/sebsto/amplify-ios-getting-started/blob/main/code/cli-build/iam_permissions_for_ec2.json\">the sample project code contains the list of the permissions I added</a>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-02_10-26-23.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-02_10-26-23.png\" alt=\"codebuild mac - 4\" width=\"800\" height=\"641\" /></a></p> \n<p>I can choose between providing my set of build commands in the project definition or in a <code>buildspec.yaml</code> file included in my project. I select the latter.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-02_10-27-18.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-02_10-27-18.png\" alt=\"codebuild mac - 5\" width=\"800\" height=\"313\" /></a></p> \n<p>This is optional, but I want to upload the build artifact to an S3 bucket where I can archive each build. In the <strong>Artifact 1 – Primary</strong> section, I therefore select <strong>Amazon S3</strong> as <strong>Type</strong>, and I enter a <strong>Bucket name</strong> and artifact <strong>Name</strong>. The file name to upload is specified in the <code>buildspec.yaml</code> file.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-05_10-34-14-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-05_10-34-14-1.png\" alt=\"codebuild mac - 6\" width=\"1558\" height=\"1694\" /></a></p> \n<p>Down on the page, I configure the project trigger to add a GitHub WebHook. This will configure CodeBuild to start the build every time a commit or pull request is sent to my project on GitHub.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/07/2024-08-02_17-20-20-02.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/07/2024-08-02_17-20-20-02.png\" alt=\"codebuild - webhook\" width=\"800\" height=\"608\" /></a></p> \n<p>Finally, I select the orange <strong>Create project</strong> button at the bottom of the page to create this project.</p> \n<p><span><strong>Testing my builds<br /> </strong></span>My project already includes build scripts to prepare the build, build the project, run the tests, and deploy it to <a href=\"https://developer.apple.com/testflight/\">Apple’s TestFlight</a>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-05_11-26-45.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-05_11-26-45.png\" alt=\"codebuild - project scripts\" width=\"400\" height=\"377\" /></a></p> \n<p>I add a <code>buildspec.yaml</code> file at the root of my project to orchestrate these existing scripts.</p> \n<pre><code>version: 0.2\n\nphases:\n\n  install:\n    commands:\n      - code/ci_actions/00_install_rosetta.sh\n  pre_build:\n    commands:\n      - code/ci_actions/01_keychain.sh\n      - code/ci_actions/02_amplify.sh\n  build:\n    commands:\n      - code/ci_actions/03_build.sh\n      - code/ci_actions/04_local_tests.sh\n  post_build:\n    commands:\n      - code/ci_actions/06_deploy_testflight.sh\n      - code/ci_actions/07_cleanup.sh\nartifacts:\n   name: $(date +%Y-%m-%d)-getting-started.ipa\n   files:\n    - 'getting started.ipa'\n  base-directory: 'code/build-release'</code></pre> \n<p>I add this file to my Git repository and push it to GitHub with the following command: <code>git commit -am \"add buildpsec\" buildpec.yaml</code></p> \n<p>On the console, I can observe that the build has started.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-05_11-41-02.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-05_11-41-02.png\" alt=\"codebuild - build history\" width=\"800\" height=\"545\" /></a></p> \n<p>When I select the build, I can see the log files or select <strong>Phase details</strong> to receive a high-level status of each phase of the build.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-05_11-39-54.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-05_11-39-54.png\" alt=\"codebuild - phase details\" width=\"800\" height=\"639\" /></a></p> \n<p>When the build is successful, I can see the iOS application IPA file uploaded to my S3 bucket.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-05_11-45-33.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-05_11-45-33.png\" alt=\"aws s3 ls \" width=\"600\" height=\"67\" /></a></p> \n<p>The last build script that CodeBuild executes uploads the binary to App Store Connect. I can observe new builds in the TestFlight section of the App Store Connect.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-05_11-49-20.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/05/2024-08-05_11-49-20.png\" alt=\"App Store Connect\" width=\"800\" height=\"625\" /></a></p> \n<p><span><strong>Things to know<br /> </strong></span>It takes <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-mac-instances.html#mac-instance-readiness\">8-10 minutes to prepare an Amazon EC2 Mac instance</a> and to accept the very first build. This is not specific to CodeBuild. The builds you submit during the machine preparation time are queued and will be run in order as soon as the machine is available.</p> \n<p>CodeBuild for macOS works with reserved fleets. Contrary to on-demand fleets, where you pay per minute of build, reserved fleets are charged for the time the build machines are reserved for your exclusive usage, even when no builds are running. The capacity reservation follows the Amazon EC2 Mac 24-hour minimum allocation period, as required by the <a href=\"https://www.apple.com/legal/sla/docs/macOSSonoma.pdf\">Software License Agreement for macOS</a> (article 3.A.ii).</p> \n<p>A fleet of machines can be shared across CodeBuild projects on your AWS account. The machines in the fleet are reserved for your exclusive use. Only CodeBuild can access the machines.</p> \n<p>CodeBuild cleans the working directory between builds, but the machines are reused for other builds. It allows you to use the <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/build-caching.html#caching-local\">CodeBuild local cache mechanism</a> to quickly restore selected files after a build. If you build different projects on the same fleet, be sure to reset any global state, such as the <a href=\"https://www.unix.com/man-page/osx/1/security/\">macOS keychain</a>, and build artifacts, such as <a href=\"https://stackoverflow.com/questions/72788019/where-is-swift-package-manager-cache-located-swift-5-7\">the SwiftPM and Xcode package caches</a>, before starting a new build.</p> \n<p>When you work with custom build images, be sure they are built for a 64-bit Mac-Arm architecture. You also must install and start the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent-macos.html\">AWS Systems Manager Agent (SSM Agent)</a>. CodeBuild uses the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent.html\">SSM Agent</a> to install its own agent and to manage the machine. Finally, make sure the AMI is available to <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/fleets.html#ami\">the CodeBuild organization ARN</a>.</p> \n<p>CodeBuild for macOS is available in the following <a href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#region\">AWS Regions</a>: US East (Ohio, N. Virginia), US West (Oregon), Asia Pacific (Sydney), and Europe (Frankfurt). These are the same Regions that offer Amazon EC2 Mac M2 instances.</p> \n<p>Get started today and <a href=\"https://console.aws.amazon.com/codesuite/codebuild/projects\">create your first CodeBuild project on macOS</a>.</p> \n<p><a href=\"https://twitter.com/sebsto\">-- seb</a></p>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"24e2fc6cd858919d0258abd1555bc0d77fa008a2a68129099cd2fdd7377f1cb3","category":"Tech"}