{"title":"Use natural language to query Amazon CloudWatch logs and metrics (preview)","link":"https://aws.amazon.com/blogs/aws/use-natural-language-to-query-amazon-cloudwatch-logs-and-metrics-preview/","date":1701027777000,"content":"<p>To make it easy to interact with your operational data, <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> is introducing today natural language query generation for Logs and Metrics Insights. With this capability, powered by <a href=\"https://aws.amazon.com/generative-ai/\">generative artificial intelligence (AI)</a>, you can describe in English the insights you are looking for, and a Logs or Metrics Insights query will be automatically generated.</p> \n<p>This feature provides three main capabilities for CloudWatch Logs and Metrics Insights:</p> \n<ul> \n <li>Generate new queries from a description or a question to help you get started easily.</li> \n <li>Query explanation to help you learn the language including more advanced features.</li> \n <li>Refine existing queries using guided iterations.</li> \n</ul> \n<p>Let’s see how these work in practice with a few examples. I’ll cover logs first and then metrics.</p> \n<p><span><strong>Generate CloudWatch Logs Insights queries with natural language<br /> </strong></span>In the <a href=\"https://console.aws.amazon.com/cloudwatch\">CloudWatch console</a>, I select <strong>Log Insights</strong> in the <strong>Logs</strong> section. I then select the log group of an <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> function that I want to investigate.</p> \n<p>I choose the <strong>Query generator</strong> button to open a new <strong>Prompt</strong> field where I enter what I need using natural language:</p> \n<p><code>Tell me the duration of the 10 slowest invocations</code></p> \n<p>Then, I choose <strong>Generate new query</strong>. The following Log Insights query is automatically generated:</p> \n<div> \n <pre><code>fields @timestamp, @requestId, @message, @logStream, @duration \n| filter @type = \"REPORT\" and @duration &gt; 1000\n| sort @duration desc\n| limit 10</code></pre> \n</div> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/cloudwatch-assist-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/cloudwatch-assist-1.png\" alt=\"Console screenshot.\" width=\"2328\" height=\"914\" /></a></p> \n<p>I choose <strong>Run query</strong> to see the results.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/cloudwatch-assist-results.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/cloudwatch-assist-results.png\" alt=\"Console screenshot.\" width=\"2296\" height=\"714\" /></a></p> \n<p>I find that now there’s too much information in the output. I prefer to see only the data I need, so I enter the following sentence in the <strong>Prompt</strong> and choose <strong>Update query</strong>.</p> \n<p><code>Show only timestamps and latency</code></p> \n<p>The query is updated based on my input and only the timestamp and duration are returned:</p> \n<div> \n <pre><code>fields @timestamp, @duration \n| filter @type = \"REPORT\" and @duration &gt; 1000\n| sort @duration desc\n| limit 10</code></pre> \n</div> \n<p>I run the updated query and get a result that is easier for me to read.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/cloudwatch-assist-new-results.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/cloudwatch-assist-new-results.png\" alt=\"Console screenshot.\" width=\"2296\" height=\"720\" /></a></p> \n<p>Now, I want to know if there are any errors in the log. I enter this sentence in the <strong>Prompt</strong> and generate a new query:</p> \n<p><code>Count the number of ERROR messages</code></p> \n<p>As requested, the generated query is counting the messages that contain the <code>ERROR</code> string:</p> \n<div> \n <div> \n  <pre><code>fields @message\n| filter @message like /ERROR/\n| stats count()</code></pre> \n </div> \n</div> \n<p>I run the query and find out that there are more errors than I expected. I need more information.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/cloudwatch-assist-count.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/cloudwatch-assist-count.png\" alt=\"Console screenshot.\" width=\"2296\" height=\"586\" /></a></p> \n<p>I use this prompt to update the query and get a better distribution of the errors:</p> \n<p><code>Show the errors per hour</code></p> \n<p>The updated query uses the <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax-operations-functions.html#CWL_QuerySyntax-datetime\">bin()</a> function to group the result in one hour intervals.</p> \n<div> \n <pre><code>fields @timestamp, @message\n| filter @message like /ERROR/\n| stats count(*) by bin(1h)</code></pre> \n</div> \n<p>Let’s see a more advanced query about memory usage. I select the log groups of a few Lambda functions and type:</p> \n<p><code>Show invocations with the most over-provisioned memory grouped by log stream</code></p> \n<p>Before generating the query, I choose the gear icon to toggle the options to include my prompt and an explanation as comment. Here’s the result (I split the explanation over multiple lines for readability):</p> \n<div> \n <pre><code># Show invocations with the most over-provisioned memory grouped by log stream\n\nfields @logStream, @memorySize/1000/1000 as memoryMB, @maxMemoryUsed/1000/1000 as maxMemoryUsedMB, (@memorySize/1000/1000 - @maxMemoryUsed/1000/1000) as overProvisionedMB \n| stats max(overProvisionedMB) as maxOverProvisionedMB by @logStream \n| sort maxOverProvisionedMB desc\n\n# This query finds the amount of over-provisioned memory for each log stream by\n# calculating the difference between the provisioned and maximum memory used.\n# It then groups the results by log stream and calculates the maximum\n# over-provisioned memory for each log stream. Finally, it sorts the results\n# in descending order by the maximum over-provisioned memory to show\n# the log streams with the most over-provisioned memory.</code></pre> \n</div> \n<p>Now, I have the information I need to understand these errors. On the other side, I also have EC2 workloads. How are those instances running? Let’s look at some metrics.</p> \n<p><span><strong>Generate CloudWatch Metrics Insights queries with natural language<br /> </strong></span>In the <a href=\"https://console.aws.amazon.com/cloudwatch\">CloudWatch console</a>, I select <strong>All metrics</strong> in the <strong>Metrics</strong> section. Then, in the <strong>Query</strong> tab, I use the <strong>Editor</strong>. If you prefer, the <strong>Query generator</strong> is available also in the <strong>Builder</strong>.</p> \n<p>I choose <strong>Query generator</strong> like before. Then, I enter what I need using plain English:</p> \n<p><code>Which 10 EC2 instances have the highest CPU utilization?</code></p> \n<p>I choose <strong>Generate new query</strong> and get a result using the Metrics Insights syntax.</p> \n<div> \n <pre><code>SELECT AVG(\"CPUUtilization\")\nFROM SCHEMA(\"AWS/EC2\", InstanceId)\nGROUP BY InstanceId\nORDER BY AVG() DESC\nLIMIT 10</code></pre> \n</div> \n<p>To see the graph, I choose <strong>Run</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/cloudwatch-assist-metrics-cpu.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/cloudwatch-assist-metrics-cpu.png\" alt=\"Console screenshot.\" width=\"2496\" height=\"1504\" /></a></p> \n<p>Well, it looks like my EC2 instances are not doing much. This result shows how those instances are using the CPU, but what about storage? I enter this in the prompt and choose <strong>Update query</strong>:</p> \n<p><code>How about the most EBS writes?</code></p> \n<p>The updated query replaces the average CPU utilization with the sum of bytes written to all EBS volumes attached to the instance. It keeps the limit to only show the top 10 results.</p> \n<div> \n <pre><code>SELECT SUM(\"EBSWriteBytes\")\nFROM SCHEMA(\"AWS/EC2\", InstanceId)\nGROUP BY InstanceId\nORDER BY SUM() DESC\nLIMIT 10</code></pre> \n</div> \n<p>I run the query and, by looking at the result, I have a better understanding of how storage is being used by my EC2 instances.</p> \n<p>Try entering some requests and run the generated queries over your logs and metrics to see how this works with your data.</p> \n<p><span><strong>Things to know<br /> </strong></span><a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> natural language query generation for logs and metrics is available in preview in the US East (N. Virginia) and US West (Oregon) <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\">AWS Regions</a>.</p> \n<p>There is no additional cost for using natural language query generation during the preview. You only pay for the cost of running the queries according to <a href=\"https://aws.amazon.com/cloudwatch/pricing/\">CloudWatch pricing</a>.</p> \n<p>When generating a query, you can include your original request and an explanation of the query as comments. To do so, choose the gear icon in the bottom right corner of the query edit window and toggle those options.</p> \n<p>This new capability can help you generate and update queries for logs and metrics, saving you time and effort. This approach allows engineering teams to scale their operations without worrying about specific data knowledge or query expertise.</p> \n<p><a href=\"https://aws.amazon.com/cloudwatch/\"><strong>Use natural language to analyze your logs and metrics with Amazon CloudWatch.</strong></a></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"8cd357bfd56659f0330b55f063b02076db467cdb0bdda8e7b81b258fd5079f36","category":"Tech"}