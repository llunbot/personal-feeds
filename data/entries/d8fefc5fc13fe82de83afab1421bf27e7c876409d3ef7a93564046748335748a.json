{"title":"How To Define An Array Of Colors With CSS","link":"https://smashingmagazine.com/2023/07/define-array-colors-css/","date":1690538400000,"content":"<p>CSS is mainly known as a language based on a set of property-value pairs. You select an element, define the properties, and write styles for it. There’s nothing wrong with this approach, but CSS has evolved <em>a lot</em> recently, and we now have more robust features, like variables, math formulas, conditional logic, and a bunch of new pseudo selectors, just to name a few.</p>\n<p>What if I tell you we can also use CSS to create an array? More precisely, we can create an array of colors. Don’t try to search MDN or the specification because this is not a new CSS feature but a combination of what we already have. It’s like we’re remixing CSS features into something that feels new and different.</p>\n<p>For example, how cool would it be to define a variable with a comma-separated array of color values:</p>\n<pre><code>--colors: red, blue, green, purple;\n</code></pre>\n\n<p>Even cooler is being able to change an index variable to select only the color we need from the array. I know this idea may sound impossible, but it <em>is</em> possible — with some limitations, of course, and we’ll get to those.</p>\n<p>Enough suspense. Let’s jump straight into the code!</p>\nAn Array Of Two Colors\n<p>We will first start with a basic use case with two colors defined in a variable:</p>\n<pre><code>--colors: black, white;\n</code></pre>\n\n<p>For this one, I will rely on the new <code>color-mix()</code> function. MDN has a nice way of explaining <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix\">how the function works</a>:</p>\n<blockquote>The <strong><code>color-mix()</code></strong> functional notation takes two <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\"><code>&lt;color&gt;</code></a> values and returns the result of mixing them in a given colorspace by a given amount.</blockquote>\n\n<p>The trick is not to use <code>color-mix()</code> for its designed purpose — mixing colors — but to use it instead to return one of the two colors in its argument list.</p>\n<pre><code>:root {\n  --colors: black, white; /* define an array of color values */\n  --i: 0; \n\n  --_color: color-mix(in hsl, var(--colors) calc(var(--i) * 100%));\n}\n\nbody {\n  color: var(--_color);\n}\n</code></pre>\n\n<p>So far, all we’ve done is assign the array of colors to a <code>--colors</code> variable, then update the index, <code>--i</code>, to select the colors. The index starts from <code>0</code>, so it’s either <code>0</code> or <code>1</code>, kind of like a Boolean check. The code may look a bit complex, but it becomes clear if we replace the variables with their values. For example, when <code>i=0</code>:</p>\n<pre><code>--_color: color-mix(in hsl, black, white 0%);\n</code></pre>\n\n<p>This results in black because the amount of white is <code>0%</code>. We mixed <code>100%</code> black with <code>0%</code> white to get solid black. When <code>i=1</code>:</p>\n<pre><code>--_color: color-mix(in hsl, black, white 100%);\n</code></pre>\n\n<p>I bet you already know what happens. The result is solid white because the amount of white is <code>100%</code> while black is <code>0%</code>.</p>\n<p>Think about it: We just created <a href=\"https://css-tip.com/color-switch-color-mix/\">a color switch</a> between two colors using a simple CSS trick. This sort of technique can be helpful if, say, you want to add a dark mode to your site’s design. You define both colors inside the same variable.</p>\n<p><img src=\"https://files.smashing.media/articles/define-array-colors-css/css-array-linear-gradient.png\" /></p>\n<p>The trick is manipulating the gradient to extract the colors based on the index. By definition, a gradient transitions between colors, but we have at least a few pixels of the actual colors defined in the array while we have a mixture or blend of colors in between them. At the very top, we can find <code>red</code>. At the very bottom, we can find <code>purple</code>. And so on.</p>\n<p>What if we increase the size of the gradient to something really big?</p>\n<p><img src=\"https://files.smashing.media/articles/define-array-colors-css/css-array-linear-illustration.png\" /></p>\n<pre><code>background-position: 0 calc(var(--i) * 100% / (var(--n) - 1));\n</code></pre>\n\n<p>Here’s the complete code:</p>\n<pre><code>.box {\n  --colors: red, blue, green, purple; /* color array */\n  --n: 4; /* length of the array */\n  --i: 0; /* index of the color [0 to N-1] */\n\n  background:\n    linear-gradient(var(--colors)) no-repeat\n     0 calc(var(--i)*100%/(var(--n) - 1)) /* position */\n     /100% calc(1px*infinity);  /* size */\n}\n</code></pre>\n\n<p><strong>Note</strong>: <em>I used <code>no-repeat</code> in the <code>background</code> property. That keyword should be unnecessary, but for some reason, it’s not working without it. It might be that browsers cannot repeat gradients that have an infinite size.</em></p>\n<p>The following demo illustrates the trick:</p>\n<p><img src=\"https://files.smashing.media/articles/define-array-colors-css/css-array-conical-gradients.png\" /></p>\n<p>After that, we can make our gradient very big by, once again, multiplying it by <code>infinity</code>. This time, <code>infinity</code> calculates the gradient’s width and height. </p>\n<pre><code>background-size: calc(1px * infinity) calc(1px * infinity);\n</code></pre>\n\n<p>We place the gradient at the top to zoom in on the top color:</p>\n<pre><code>background-position: top;\n</code></pre>\n\n<p>Then we rotate the gradient to select the color we want:</p>\n<pre><code>from calc((var(--i) + 1) * -1turn / var(--n))\n</code></pre>\n\n<p>It’s like having a color wheel where we only display a few pixels from the top.</p>\n<p><img src=\"https://files.smashing.media/articles/define-array-colors-css/css-array-conical-gradients-illustration.png\" /></p>\n<p>Since what we have is essentially a color wheel, we can turn it as many times as we want in any direction and always get a color. This trick allows us to use <em>any value</em> we want for the index! After a full rotation, we get back to the same color.</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/QWJpyGY\">Colors array using only CSS II</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>Note that CSS does have a <code>mod()</code> function. So, instead of the conical gradient implementation, we can also update the first method that uses the linear gradient like this:</p>\n<pre><code>.box {\n  --colors: red, blue, green, purple; /* color array */\n  --n: 4; /* array length  */\n  --i: 0; /* index  */\n\n  --_i: mod(var(--i), var(--n)); /* the used index */\n  background:\n    linear-gradient(var(--colors)) no-repeat\n     0 calc(var(--_i) * 100% / (var(--n) - 1)) /* position */\n     / 100% calc(1px * infinity);  /* size */\n}\n</code></pre>\n\n<p>I didn’t test the above code because support for <code>mod()</code> is still low for such a function. That said, you can keep this idea somewhere, as it might be helpful in the future and is probably more intuitive than the conic gradient approach.</p>\nWhat Are The limitations?\n<p>First, I consider this approach more of a hack than a CSS feature. So, use it cautiously. I’m not totally sure if there are implications to multiplying things by <code>infinity</code>. Forcing the browser to use a huge gradient can probably lead to a performance lag or, worse, accessibility issues. If you spot something, please share them in the comments so I can adjust this accordingly.</p>\n<p>Another limitation is that this can only be used with the <code>background</code> property. We could overcome this with other tricks, like using <code>background-clip: text</code> to manipulate text color. But since this uses gradients, which are only supported by specific properties, usage is limited.</p>\n<p>The two-color method is safe since it doesn’t rely on any hack. I don’t see any drawbacks to using it on real projects.</p>\nWrapping Up\n<p>I hope you enjoyed this little CSS experimentation. We went from a simple two-color switch to an array of colors without adding much code. Now if someone tells you that CSS isn’t a programming language, you can tell them, <em>“Hey, we have arrays!”</em></p>\n<p>Now it’s your turn. Please show me what you will build using this trick. I will be waiting to see what you make, so share below!</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/01/creating-high-contrast-design-system-css-custom-properties/\">Creating A High-Contrast Design System With CSS Custom Properties</a>,” Brecht De Ruyte</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/06/simplify-color-palette-css-color-mix/\">Simplify Your Color Palette With CSS Color-Mix()</a>,” Daniel Yuschick</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/11/guide-modern-css-colors/\">A Guide To Modern CSS Colors With RGB, HSL, HWB, LAB And LCH</a>,” Michelle Barker</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/07/color-tools-resources/\">Color Tools And Resources</a>,” Cosima Mielke</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"d8fefc5fc13fe82de83afab1421bf27e7c876409d3ef7a93564046748335748a","category":"Tech"}