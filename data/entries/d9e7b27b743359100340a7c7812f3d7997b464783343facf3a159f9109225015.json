{"title":"CDK for Terraform in Production: Learning from Pocket","link":"https://www.hashicorp.com/blog/cdk-for-terraform-in-production-learning-from-pocket","date":1634054400000,"content":"<p>Kelvin Yeboah and Mathijs Miermans from <a href=\"https://www.mozilla.org/en-US/firefox/pocket/\">Pocket’s</a> engineering team joined us in a recent Terraform <a href=\"https://www.hashicorp.com/community/office-hours\">Community Office Hours</a> to share a live demo of how they define and provision infrastructure using CDK for Terraform. Check out the recording to watch the live demo, and read on for a summary of how their team is using CDK for Terraform.</p><h2><a href=\"#cdk-for-terraform\">»</a><a></a>CDK for Terraform</h2>\n<p>The <a href=\"https://github.com/hashicorp/terraform-cdk\">Cloud Development Kit for Terraform (CDKTF)</a> allows you to use familiar programming languages to define cloud infrastructure and provision it through Terraform. This gives you access to the entire Terraform ecosystem while allowing you to leverage the power of your existing toolchain.</p>\n<p>CDKTF is under active development and is not officially recommended for production use cases. However, some early adopters, like Pocket, are already using CDK for Terraform in production, and we are excited to work with them to validate and improve workflows.</p>\n<h2><a href=\"#provisioning-with-terraform-using-the-familiarity-of-typescript\">»</a><a></a>Provisioning with Terraform Using the Familiarity of TypeScript</h2>\n<p><a href=\"https://getpocket.com/\">Pocket</a> — a Mozilla product — is a website and app that finds the most interesting, thought-provoking and entertaining articles from trusted sources around the internet and puts them all in one place. Pocket also lets you save articles — as well as anything else you find online (videos, recipes, shopping pages, etc.) — to your personal Pocket for digging into later.</p>\n<p>To support the user experience, the Pocket engineering team is tasked with building, maintaining, and deploying a wide variety of services, with the same type of infrastructure being deployed frequently. Over time, the team transitioned from managing infrastructure in a UI to working with Terraform, where they loved having version control and being able to manage state. But HCL was a new syntax and framework for the team to learn.</p>\n<p>Transitioning to writing infrastructure code in their preferred programming language— TypeScript — using CDK for Terraform has allowed them to spin up new services faster and get new features in front of users with less delay. Managing infrastructure in a familiar language has also empowered their developers to engage closely with the infrastructure, giving them a better understanding of the services they are building and removing blockers.</p>\n<blockquote>\n<p>“When CDKTF came out, that was like a game changer for us. We are mostly application developers, we are not an SRE team … so if we could write our infrastructure in code in the language that we already use, that was a game changer for us. Because then we can empower ourselves to work faster and more efficiently and build services faster.”  <em>— Kelvin Yeboah, Senior Software Engineer, Mozilla, Pocket</em></p>\n</blockquote>\n<p>Another practical improvement that they’ve noticed is that they have fewer files to manage and they are able to use their existing code pipeline with CircleCI to automate the plan/apply deployment workflow. For those interested in seeing a CDK for Terraform project in action, the team’s open source GitHub repos are an excellent reference for structuring and writing code with CDKTF: <a href=\"https://github.com/Pocket\">https://github.com/Pocket</a>.</p>\n<h2><a href=\"#the-demo\">»</a><a></a>The Demo</h2>\n<p>During the <a href=\"https://www.youtube.com/watch?v=pj6iEqtYVsQ\">live demo</a>, Mathijs and Kelvin walked us through how to deploy a “Hello world” Apache web server in a production-ready environment using Amazon ECS in fewer than 150 lines of readable TypeScript code. In addition to provisioning infrastructure for the web server, this demo application also includes other production-ready necessities, including an ECS cluster, application load balancer, defined security groups, alarms via PagerDuty, and snapshot testing of the output JSON configuration file.</p><img src=\"https://www.datocms-assets.com/2885/1633985285-new-app-in-main-ts-file.png\" /><p>You can reference the code used for this demo in the repos below, and even follow along as you <a href=\"https://www.youtube.com/watch?v=pj6iEqtYVsQ\">watch the recording</a>:</p>\n<ul>\n<li><a href=\"https://github.com/Pocket/hashicorp-pocket-cdktf\">Demo source code</a></li>\n<li><a href=\"https://github.com/Pocket/terraform-modules/\">Reusable constructs</a></li>\n</ul>\n<p>And be sure to check out the second demo recording that Pocket did after that, also <a href=\"https://youtu.be/4fUnKBsk898\">covering more of their CDK for Terraform production usage</a>.</p>\n<h3><a href=\"#simplifying-application-code-with-reusable-constructs\">»</a><a></a>Simplifying Application Code with Reusable Constructs</h3>\n<p>CDK for Terraform allows you to manage complexity and reduce code duplication by creating custom abstraction layers, referred to as <em>constructs</em>. During the demo, Kelvin references the custom construct libraries that their team has built for their CDK for Terraform TypeScript applications. These are opinionated libraries that their team has built to customize the CDKTF interface to the developer team’s needs. For example, in the demo, Kelvin uses two of these custom packages to add a production-ready ECS cluster, a load balancer, and to create alarms using PagerDuty. You can find these libraries in an <a href=\"https://github.com/Pocket/terraform-modules/\">open source repo</a> of Node.js packages that define their infrastructure patterns in CDKTF.</p><img src=\"https://www.datocms-assets.com/2885/1633985355-imports-from-pocketterraform-modules.png\" /><p>For more examples of how the Pocket team uses custom constructs to simplify their development process and ensure best practices, check out these open source repos:</p>\n<ul>\n<li><a href=\"https://github.com/Pocket/firefox-android-home-recommendations\">Pocket/firefox-android-home-recommendations</a>: TypeScript REST API</li>\n<li><a href=\"https://github.com/Pocket/collection-api\">Pocket/collection-api</a>: TypeScript GraphQL API with a relational database</li>\n<li><a href=\"https://github.com/Pocket/recommendation-api\">Pocket/recommendation-api</a>: Python GraphQL API with a key-value store and AWS Lambda functions</li>\n</ul>\n<h2><a href=\"#get-started-with-cdk-for-terraform\">»</a><a></a>Get Started with CDK for Terraform</h2>\n<p>If you’re new to CDK for Terraform, the best place to get started is with the hands-on tutorials on <a href=\"https://learn.hashicorp.com/collections/terraform/cdktf\">HashiCorp Learn</a>.</p>\n<p>There's also a <a href=\"https://youtu.be/4fUnKBsk898\"><strong>new</strong> follow up office hours</a>, where the Pocket team does a more thorough walkthrough of their codebase, recommended architecture, and best practices.</p>","author":"Sarah MacDonald","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"d9e7b27b743359100340a7c7812f3d7997b464783343facf3a159f9109225015","category":"Tech"}