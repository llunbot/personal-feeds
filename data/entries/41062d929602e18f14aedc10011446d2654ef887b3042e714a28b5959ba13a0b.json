{"title":"Securely share AWS resources across VPC and account boundaries with PrivateLink, VPC Lattice, EventBridge, and Step Functions","link":"https://aws.amazon.com/blogs/aws/securely-share-aws-resources-across-vpc-and-account-boundaries-with-privatelink-vpc-lattice-eventbridge-and-step-functions/","date":1733109497000,"content":"<p>At some point, every AWS customer tells me that they have the desire to move into the future as quickly as possible. They want to simplify their modernization efforts, drive growth, and adapt to the cloud, while also reducing costs as they proceed. These customers typically have a large suite of legacy applications, possibly running on-premises, that are running on diverse technology stacks managed by disparate parts of the organization. To make things even more challenging, these organizations often have to meet stringent security and compliance requirements.</p> \n<p><span><strong>Prepare to Share</strong></span><br /> You can now share AWS resources such as <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instances, <a href=\"https://aws.amazon.com/ecs/\">Amazon Elastic Container Service (Amazon ECS)</a> and <a href=\"https://aws.amazon.com/eks/\">Amazon Elastic Kubernetes Service (Amazon EKS)</a> container services, and your own HTTPS services across <a href=\"https://aws.amazon.com/vpc/\">Amazon Virtual Private Cloud (Amazon VPC)</a> and AWS account boundaries and use them to build event-driven apps via <a href=\"https://aws.amazon.com/eventbridge\">Amazon EventBridge</a> and orchestrate workflows with <a href=\"https://aws.amazon.com/step-functions\">AWS Step Functions</a>. You can update your existing workloads, connect your modern cloud-native apps to on-premises legacy systems, with all communication routed across private endpoints and networks.</p> \n<p>These new features build on <a href=\"https://aws.amazon.com/vpc/lattice/\">Amazon VPC Lattice</a> and <a href=\"https://aws.amazon.com/privatelink/\">AWS PrivateLink</a>, and give you a lot of new options to design and control your network, along with some cool new ways to integrate and orchestrate across all of your technology stacks. For example, you can build hybrid event-driven architectures that make use of your existing on-premises applications.</p> \n<p>Today, some customers use <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> functions or <a href=\"https://aws.amazon.com/sqs/\">Amazon Simple Queue Service (Amazon SQS)</a> queues to transfer data into VPCs. This undifferentiated heavy lifting can now be replaced with a simpler and more efficient solution.</p> \n<p>Bringing all of this together, you get a set of services that will help you to accelerate your modernization efforts and simplify integration between your applications, regardless of where they are situated. EventBridge and Step Functions work hand-in-hand with PrivateLink and <span>VPC Lattice</span> to enable integration of public and private HTTPS-based applications into your event-driven architectures and workflows.</p> \n<p>Here are the essential terms and concepts:</p> \n<p><strong><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/vpc_pl_menu_1.png\" width=\"221\" height=\"308\" />Resource Owner VPC</strong> – A VPC that has resources to be shared. The owner of this VPC creates a Resource Gateway with one or more associated Resource Configurations, then uses <a href=\"https://aws.amazon.com/ram/\">AWS Resource Access Manager (RAM)</a> to share the Resource Configuration with the Resource Consumer, such as another AWS account, or a developer building event-driven architectures and workflows using EventBridge and Step Functions. Let’s define the Resource Owner as the person (maybe you) in your organization who is responsible for the care and feeding of this VPC.</p> \n<p><strong>Resource Gateway</strong> – Provides a point of ingress to a VPC so that clients can access resources in the Resource Owner VPC, as indicated by the Resource Configurations that are associated with the gateway. One Resource Gateway can make multiple resources available.</p> \n<p><strong>Resource</strong> – This can be a HTTPS endpoint, a database, a database cluster, an EC2 instance, an <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html\">Application Load Balancer</a> in front of multiple EC2 instances, an ECS service discoverable via AWS Cloud Map, an <a href=\"https://aws.amazon.com/eks/\">Amazon Elastic Kubernetes Service (Amazon EKS)</a> service behind a <a href=\"https://aws.amazon.com/elasticloadbalancing/network-load-balancer/\">Network Load Balancer</a>, a legacy service running in the Resource Owner VPC, or on-premises across AWS Site-to-Site VPN or <a href=\"https://aws.amazon.com/directconnect/\">AWS Direct Connect</a>.</p> \n<p><strong>Resource Configuration</strong> – Defines a set of resources that can be accessed through a particular Resource Gateway. The resources can be referenced by IP address, DNS name, or (for AWS resources) an ARN.</p> \n<p><strong>Resource Consumer</strong> – The person in your organization who is responsible for building applications that connect with and consume services provided by resources in a Resource Owner VPC.</p> \n<p><span><strong>Sharing Resources</strong></span><br /> You can put all of this power to use in a lot of different ways; I’ll focus on one for this post.</p> \n<p>First, I will play the role of the Resource Owner. I click <strong>Resource gateways</strong> in the VPC Console, see that I don’t have a gateway, and click <strong>Create resource gateway</strong> to get started:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/vpcl_rgs_1.png\" width=\"895\" height=\"366\" /></p> \n<p>I assign a name (<strong>main-rg</strong>) and an IP address type, then pick the VPC and the private subnets where the gateway will have a presence (this is a one-shot selection that cannot be changed without creating a new Resource Gateway). I also choose up to five security groups to control inbound traffic:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/vpcl_create_rg_top_1.png\" width=\"894\" height=\"844\" /></p> \n<p>I scroll down, assign any desired tags, and click <strong>Create resource gateway</strong> to proceed:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/vpcl_create_rg_bottom_1.png\" width=\"893\" height=\"321\" /></p> \n<p>My new gateway is active within seconds; I nod in appreciation and click <strong>Create resource configuration</strong> to move ahead:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/vpcl_rg_tada_1.png\" width=\"894\" height=\"744\" /></p> \n<p>Now I need to create my first Resource Configuration. Let’s say that I have a HTTPS service running on an EC2 instance on a private subnet in my Resource Owner VPC. I assign a DNS name to the service and use a <a href=\"https://aws.amazon.com/route53/\">Amazon Route 53</a> Alias record which returns the IP address of the instance:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/21/vpcl_dns_3.png\" width=\"363\" height=\"620\" /></p> \n<p>I am using a public hosted zone in this example. We already working on support for private hosted zones.</p> \n<p>With DNS all set up, I click <strong>Create resource configuration</strong> to move ahead. I enter a name (<strong>rc-service1</strong>), choose <strong>Resource</strong> as the type, and select the Resource Gateway that I created earlier:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/vpcl_rc_top_1.png\" width=\"894\" height=\"603\" /></p> \n<p>I scroll down and define my EC2 instance as a resource, entering the DNS name and setting up sharing for ports 80 and 443:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/21/vpcl_rg_mid_2.png\" width=\"894\" height=\"700\" /></p> \n<p>Now I take a small detour, and hop over to the RAM Console to create a Resource Share so that other AWS accounts can access the resources (this is optional, and only relevant for cross-account scenarios). I could create one Resource Share for each service, but in most cases I would create one share and use it to package up a collection of related services. I’ll do that, and call it <strong>shared-services</strong>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/vpcl_ram_1.png\" width=\"796\" height=\"265\" /></p> \n<p>Returning from my detour, I refresh the list of resource shares, pick the one that I created, and click <strong>Create resource configuration</strong>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/20/vpcl_rg_bottom_1.png\" width=\"894\" height=\"616\" /></p> \n<p>The resource configuration is ready within seconds.</p> \n<p><span><strong>Recap and Planning Time</strong></span><br /> Before moving ahead, let’s do a quick recap and make some plans. Here’s what I (in the role of Resource Provider) have so far:</p> \n<ul> \n <li><strong>MainVPC</strong> – My Resource Owner VPC.</li> \n <li><strong>main-rg</strong> – A Resource Gateway in MainVPC.</li> \n <li><strong>rc-service1</strong> – The Resource Configuration for <strong>main-rg</strong>.</li> \n <li><strong>service1</strong> – An HTTPS service hosted on an EC2 instance in a private subnet of MainVPC, at a fixed IP address.</li> \n</ul> \n<p>Ok, so what’s next?</p> \n<p><strong>Share</strong> – This is the first and most obvious use use. I can use <a href=\"https://aws.amazon.com/ram/\">AWS Resource Access Manager (RAM)</a> to share the Resource Configuration with another AWS account and access the service from another VPC. On the other side (as the Resource Consumer), I take a couple of quick steps to connect to the service that has been shared with me:</p> \n<ul> \n <li><strong>Service Network</strong> – I can create a service network, add the Resource Configuration to the Service Network, and create a VPC endpoint in a VPC to connect to the service network.</li> \n <li><strong>Endpoint</strong> – I can create a VPC endpoint in a VPC and access the shared resource via the endpoint.</li> \n</ul> \n<p><strong>Modernize</strong> – I can remove my legacy Lambda or SQS integration to get rid of some undifferentiated heavy lifting.</p> \n<p><strong>Build</strong> – I can use EventBridge and Step Functions to build event-driven architectures and orchestrate applications. I’ll take this option!</p> \n<p><strong><span>Accessing Private Resources with EventBridge and Step Functions</span><br /> </strong>EventBridge and Step Functions already make it easy access to public HTTPS endpoints such as those from SaaS providers like Slack, Salesforce, and Adobe. With today’s launch, consuming private HTTPS services is just as easy.</p> \n<p>As a Resource Consumer, I simply create an EventBridge connection, reference a Resource Configuration that was shared with me, and call the service from my event-driven application. Everything that I already know still applies, and I now have the new-found power to access private services.</p> \n<p>To create the EventBridge connection, I open the EventBridge console and click <strong>Connections</strong> in the <strong>Integration </strong> menu:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/eb_console_integ_1.png\" width=\"225\" height=\"224\" /></p> \n<p>I review my existing connections (none so far), then click <strong>Create connection</strong> to move ahead:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/vpcl_conn_none_1.png\" width=\"894\" height=\"678\" /></p> \n<p>I enter a name (<strong>MyService1</strong>) and a description for my connection, select <strong>Private</strong> as the <strong>API type</strong>, and choose the Resource Configuration that I created earlier:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/vpcl_create_eb_conn_top_1.png\" width=\"898\" height=\"586\" /></p> \n<p>Scrolling down, I need to configure the authorization for the service that I am connecting to. I select <strong>Custom configuration</strong> and <strong>Basic authorization</strong>, and enter the <strong>Username</strong> and <strong>Password</strong> for my service. I also add <strong>Action=Forecast</strong> to the query string (as you can see there are a lot of options for authorization), and click <strong>Create</strong>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/25/vpcl_create_eb_conn_bottom_2.png\" width=\"894\" height=\"552\" /></p> \n<p>The connection is created and ready within minutes. Then I use it in my Step Functions workflows by using the <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/call-https-apis.html\">HTTP Task</a>, selecting the connection, entering the URL of my API endpoint, and choosing an HTTP method:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/26/vpcl_stepfunc_3.png\" width=\"894\" height=\"845\" /></p> \n<p>And that’s all there is to it: your Step Functions workflows can now make use of Private Resources!</p> \n<p>I can also use this connection as an EventBridge API destination target in Event Buses and Pipes.</p> \n<p><span><strong>Things to Know<br /> </strong></span>Here a couple of things to know about these cool new features:<span><strong><br /> </strong></span></p> \n<p><strong>Pricing</strong> – Existing pricing for <a href=\"https://aws.amazon.com/step-functions/pricing/\">Step Functions</a>, <a href=\"https://aws.amazon.com/eventbridge/pricing/\">EventBridge</a>, <a href=\"https://aws.amazon.com/privatelink/pricing/\">PrivateLink</a>, and <a href=\"https://aws.amazon.com/vpc/lattice/pricing/\">VPC Lattice</a> apply including the per-GB charge for data transfer into the VPC.</p> \n<p><strong>Regions</strong> – You can create and use Resource Gateways and Resource Configurations in 21 AWS Regions: US East (Ohio, N. Virginia), US West (N. California, Oregon), Africa (Cape Town), Asia Pacific (Hong Kong, Mumbai, Osaka, Seoul, Singapore, Sydney, Tokyo), Canada (Central), Europe (Frankfurt, Ireland, London, Milan, Paris, Stockholm), Middle East (Bahrain), and South America (São Paulo).</p> \n<p><strong>In the Works</strong> – As I noted earlier, we are already working on support for private hosted zones. We are also planning to support access to other types of AWS resources through EventBridge and Step Functions .</p> \n<p></p>\n<p>— <a href=\"https://twitter.com/jeffbarr\">Jeff</a>;</p>\n<p></p>","author":"Jeff Barr","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"41062d929602e18f14aedc10011446d2654ef887b3042e714a28b5959ba13a0b","category":"Tech"}