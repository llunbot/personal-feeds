{"title":"Preview – Enable Foundation Models to Complete Tasks With Agents for Amazon Bedrock","link":"https://aws.amazon.com/blogs/aws/preview-enable-foundation-models-to-complete-tasks-with-agents-for-amazon-bedrock/","date":1690385548000,"content":"<p>This April, Swami Sivasubramanian, Vice President of Data and Machine Learning at AWS, <a href=\"https://aws.amazon.com/blogs/machine-learning/announcing-new-tools-for-building-with-generative-ai-on-aws/?trk=c09acef7-aaea-4170-a505-c3610ef42eea&amp;sc_channel=el\">announced Amazon Bedrock and Amazon Titan models</a> as part of new tools for building with generative AI on AWS. <a href=\"https://aws.amazon.com/bedrock/?trk=2b018ff9-4fab-4de4-8d9f-61b5d1d945cc&amp;sc_channel=el\">Amazon Bedrock</a>, currently available in preview, is a fully managed service that makes foundation models (FMs) from Amazon and leading AI startups—such as <a href=\"https://www.ai21.com/\">AI21 Labs</a>, <a href=\"https://www.anthropic.com/\">Anthropic</a>, <a href=\"https://cohere.com/\">Cohere</a>, and <a href=\"https://stability.ai/\">Stability AI</a>—available through an API.</p> \n<p>Today, I’m excited to announce the preview of <a href=\"https://aws.amazon.com/bedrock/features/?trk=80acb49a-e4e5-48be-8dd5-24a05b52f386&amp;sc_channel=el\"><strong>agents for Amazon Bedrock</strong></a>, a new capability for developers to create fully managed agents in a few clicks. Agents for Amazon Bedrock accelerate the delivery of generative AI applications that can manage and perform tasks by making API calls to your company systems. Agents extend FMs to understand user requests, break down complex tasks into multiple steps, carry on a conversation to collect additional information, and take actions to fulfill the request.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/25/agents-for-amazon-bedrock-intro.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/25/agents-for-amazon-bedrock-intro.png\" alt=\"Agents for Amazon Bedrock\" width=\"2670\" height=\"1130\" /></a></p> \n<p>Using agents for Amazon Bedrock, you can automate tasks for your internal or external customers, such as managing retail orders or processing insurance claims. For example, an agent-powered generative AI e-commerce application can not only respond to the question, “Do you have this jacket in blue?” with a simple answer but can also help you with the task of updating your order or managing an exchange.</p> \n<p>For this to work, you first need to give the agent access to external data sources and connect it to existing APIs of other applications. This allows the FM that powers the agent to interact with the broader world and extend its utility beyond just language processing tasks. Second, the FM needs to figure out what actions to take, what information to use, and in which sequence to perform these actions. This is possible thanks to an exciting emerging behavior of FMs—their ability to reason. You can show FMs how to handle such interactions and how to reason through tasks by building prompts that include definitions and instructions. The process of designing prompts to guide the model towards desired outputs is known as prompt engineering.</p> \n<p><strong><u>Introducing Agents for Amazon Bedrock<br /> </u></strong>Agents for Amazon Bedrock automate the prompt engineering and orchestration of user-requested tasks. Once configured, an agent automatically builds the prompt and securely augments it with your company-specific information to provide responses back to the user in natural language. The agent is able to figure out the actions required to automatically process user-requested tasks. It breaks the task into multiple steps, orchestrates a sequence of API calls and data lookups, and maintains memory to complete the action for the user.</p> \n<p>With fully managed agents, you don’t have to worry about provisioning or managing infrastructure. You’ll have seamless support for monitoring, encryption, user permissions, and API invocation management without writing custom code. As a developer, you can use the Bedrock console or SDK to upload the API schema. The agent then orchestrates the tasks with the help of FMs and performs API calls using <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> functions.</p> \n<p><strong>Primer on Advanced Reasoning and ReAct<br /> </strong>You can help FMs to reason and figure out how to solve user-requested tasks with a reasoning technique called <a href=\"https://arxiv.org/pdf/2210.03629.pdf\">ReAct</a> (synergizing <em>reasoning</em> and <em>acting</em>). Using ReAct, you can structure prompts to show an FM how to reason through a task and decide on actions that help find a solution. The structured prompts include a sequence of question-thought-action-observation examples.</p> \n<p>The question is the user-requested task or problem to solve. The thought is a reasoning step that helps demonstrate to the FM how to tackle the problem and identify an action to take. The action is an API that the model can invoke from an allowed set of APIs. The observation is the result of carrying out the action. The actions that the FM is able to choose from are defined by a set of instructions that are prepended to the example prompt text. Here is an illustration of how you would build up a ReAct prompt:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/react-example-prompt-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/react-example-prompt-1.png\" alt=\"Building up a ReAct prompt\" width=\"934\" height=\"431\" /></a></p> \n<p>The good news is that Bedrock performs the heavy lifting for you! Behind the scenes, agents for Amazon Bedrock build the prompts based on the information and actions you provide.</p> \n<p>Now, let me show you how to get started with agents for Amazon Bedrock.</p> \n<p><strong><u>Create an Agent for Amazon Bedrock<br /> </u></strong>Let’s assume you’re a developer at an insurance company and want to provide a generative AI application that helps the insurance agency owners automate repetitive tasks. You create an agent in Bedrock and integrate it into your application.</p> \n<p>To get started with the agent, open the <a href=\"https://console.aws.amazon.com/bedrock/home\">Bedrock console</a>, select <strong>Agents</strong> in the left navigation panel, then choose <strong>Create Agent</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-amazon-bedrock-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-amazon-bedrock-1.png\" alt=\"Agents for Amazon Bedrock\" width=\"1554\" height=\"826\" /></a></p> \n<p>This starts the agent creation workflow.</p> \n<ol> \n <li><strong>Provide agent details </strong>including agent name, description (optional), whether the agent is allowed to request additional user inputs, and the<a href=\"https://aws.amazon.com/iam/\"> AWS Identity and Access Management (IAM) service role</a> that gives your agent access to other required services, such as <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> and <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a>.<a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-amazon-bedrock-2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-amazon-bedrock-2.png\" alt=\"Agents for Amazon Bedrock\" width=\"1501\" height=\"1160\" /></a></li> \n <li><strong>Select a foundation model </strong>from Bedrock that fits your use case. Here, you provide an instruction to your agent in natural language. The instruction tells the agent what task it’s supposed to perform and the persona it’s supposed to assume. For example, “You are an agent designed to help with processing insurance claims and managing pending paperwork.”<a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/25/agents-for-amazon-bedrock-3_final.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/25/agents-for-amazon-bedrock-3_final.png\" alt=\"Agents for Amazon Bedrock\" width=\"3056\" height=\"1400\" /></a></li> \n <li><strong><strong>Add action groups. </strong></strong>An action is a task that the agent can perform automatically by making API calls to your company systems. A set of actions is defined in an action group. Here, you provide an API schema that defines the APIs for all the actions in the group. You also must provide a Lambda function that represents the business logic for each API. For example, let’s define an action group called <em>ClaimManagementActionGroup</em> that manages insurance claims by pulling a list of open claims, identifying outstanding paperwork for each claim, and sending reminders to policy holders. Make sure to capture this information in the action group description. The FM will use this information to reason and decide which action to take.<a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/25/agents-for-amazon-bedrock-4_final.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/25/agents-for-amazon-bedrock-4_final.png\" alt=\"Agents for Amazon Bedrock\" width=\"2630\" height=\"1762\" /></a>The business logic for my action group is captured in the Lambda function <em>InsuranceClaimsLambda</em>. This AWS Lambda function implements methods for the following API calls: <code>open-claims</code>, <code>identify-missing-documents</code>, and <code>send-reminders.</code>Here’s a short extract from my <em>OrderManagementLambda</em>: <pre><code>import json\nimport time\n \ndef open_claims():\n    ...\n\ndef identify_missing_documents(parameters):\n    ...\n \ndef send_reminders():\n    ...\n \ndef lambda_handler(event, context):\n    responses = []\n \n    for prediction in event['actionGroups']:\n        response_code = ...\n        action = prediction['actionGroup']\n        api_path = prediction['apiPath']\n        \n        if api_path == '/claims':\n            body = open_claims() \n        elif api_path == '/claims/{claimId}/identify-missing-documents':\n\t\t\tparameters = prediction['parameters']\n            body = identify_missing_documents(parameters)\n        elif api_path == '/send-reminders':\n            body =  send_reminders()\n        else:\n            body = {\"{}::{} is not a valid api, try another one.\".format(action, api_path)}\n \n        response_body = {\n            'application/json': {\n                'body': str(body)\n            }\n        }\n        \n        action_response = {\n            'actionGroup': prediction['actionGroup'],\n            'apiPath': prediction['apiPath'],\n            'httpMethod': prediction['httpMethod'],\n            'responseCode': response_code,\n            'responseBody': response_body\n        }\n        \n        responses.append(action_response)\n \n    api_response = {'response': responses}\n \n    return api_response</code></pre> <p>Note that you also must provide an API schema in the <a href=\"https://swagger.io/specification/\">OpenAPI schema</a> JSON format. Here’s what my API schema file <code>insurance_claim_schema.json</code> looks like:</p> <pre><code>{\"openapi\": \"3.0.0\",\n    \"info\": {\n        \"title\": \"Insurance Claims Automation API\",\n        \"version\": \"1.0.0\",\n        \"description\": \"APIs for managing insurance claims by pulling a list of open claims, identifying outstanding paperwork for each claim, and sending reminders to policy holders.\"\n    },\n    \"paths\": {\n        \"/claims\": {\n            \"get\": {\n                \"summary\": \"Get a list of all open claims\",\n                \"description\": \"Get the list of all open insurance claims. Return all the open claimIds.\",\n                \"operationId\": \"getAllOpenClaims\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Gets the list of all open insurance claims for policy holders\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"claimId\": {\n                                                \"type\": \"string\",\n                                                \"description\": \"Unique ID of the claim.\"\n                                            },\n                                            \"policyHolderId\": {\n                                                \"type\": \"string\",\n                                                \"description\": \"Unique ID of the policy holder who has filed the claim.\"\n                                            },\n                                            \"claimStatus\": {\n                                                \"type\": \"string\",\n                                                \"description\": \"The status of the claim. Claim can be in Open or Closed state\"\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/claims/{claimId}/identify-missing-documents\": {\n            \"get\": {\n                \"summary\": \"Identify missing documents for a specific claim\",\n                \"description\": \"Get the list of pending documents that need to be uploaded by policy holder before the claim can be processed. The API takes in only one claim id and returns the list of documents that are pending to be uploaded by policy holder for that claim. This API should be called for each claim id\",\n                \"operationId\": \"identifyMissingDocuments\",\n                \"parameters\": [{\n                    \"name\": \"claimId\",\n                    \"in\": \"path\",\n                    \"description\": \"Unique ID of the open insurance claim\",\n                    \"required\": true,\n                    \"schema\": {\n                        \"type\": \"string\"\n                    }\n                }],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"List of documents that are pending to be uploaded by policy holder for insurance claim\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"pendingDocuments\": {\n                                            \"type\": \"string\",\n                                            \"description\": \"The list of pending documents for the claim.\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        },\n        \"/send-reminders\": {\n            \"post\": {\n                \"summary\": \"API to send reminder to the customer about pending documents for open claim\",\n                \"description\": \"Send reminder to the customer about pending documents for open claim. The API takes in only one claim id and its pending documents at a time, sends the reminder and returns the tracking details for the reminder. This API should be called for each claim id you want to send reminders for.\",\n                \"operationId\": \"sendReminders\",\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"claimId\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"Unique ID of open claims to send reminders for.\"\n                                    },\n                                    \"pendingDocuments\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"The list of pending documents for the claim.\"\n                                    }\n                                },\n                                \"required\": [\n                                    \"claimId\",\n                                    \"pendingDocuments\"\n                                ]\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Reminders sent successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"sendReminderTrackingId\": {\n                                            \"type\": \"string\",\n                                            \"description\": \"Unique Id to track the status of the send reminder Call\"\n                                        },\n                                        \"sendReminderStatus\": {\n                                            \"type\": \"string\",\n                                            \"description\": \"Status of send reminder notifications\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request. One or more required fields are missing or invalid.\"\n                    }\n                }\n            }\n        }\n    }\n}</code></pre> <p>When a user asks your agent to complete a task, Bedrock will use the FM you configured for the agent to identify the sequence of actions and invoke the corresponding Lambda functions in the right order to solve the user-requested task.</p></li> \n <li>In the final step, review your agent configuration and choose <strong>Create Agent</strong>.<a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/25/agents-for-amazon-bedrock-5_final.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/25/agents-for-amazon-bedrock-5_final.png\" alt=\"Agents for Amazon Bedrock\" width=\"2660\" height=\"2382\" /></a></li> \n <li>Congratulations, you’ve just created your first agent in Amazon Bedrock!<a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-amazon-bedrock-7.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-amazon-bedrock-7.png\" alt=\"Agents for Amazon Bedrock\" width=\"1923\" height=\"1160\" /></a></li> \n</ol> \n<p><strong><u>Deploy an Agent for Amazon Bedrock</u><br /> </strong>To deploy an agent in your application, you must create an alias. Bedrock then automatically creates a version for that alias.</p> \n<ol> \n <li>In the Bedrock console, select your agent, then select <strong>Deploy</strong>, and choose <strong>Create </strong>to create an alias.<a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-amazon-bedrock-11.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-amazon-bedrock-11.png\" alt=\"Agents for Amazon Bedrock\" width=\"1870\" height=\"319\" /></a></li> \n <li>Provide an alias name and description and choose whether to create a new version or use an existing version of your agent to associate with this alias.<br /> <a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-amazon-bedrock-9.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-amazon-bedrock-9.png\" alt=\"Agents for Amazon Bedrock\" width=\"1923\" height=\"1043\" /></a></li> \n <li>This saves a snapshot of the agent code and configuration and associates an alias with this snapshot or version. You can use the alias to integrate the agent into your applications.<br /> <a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-amazon-bedrock-10-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-amazon-bedrock-10-1.png\" alt=\"Agents for Amazon Bedrock\" width=\"1914\" height=\"315\" /></a></li> \n</ol> \n<p>Now, let’s test the insurance agent! You can do this right in the Bedrock console.</p> \n<p>Let’s ask the agent to “Send reminder to all policy holders with open claims and pending paper work.” You can see how the FM-powered agent is able to understand the user request, break down the task into steps (collect the open insurance claims, lookup the claim IDs, send reminders), and perform the corresponding actions.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-bedrock10.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/agents-for-bedrock10.png\" alt=\"Agents for Amazon Bedrock\" width=\"400\" height=\"548\" /></a></p> \n<p>Agents for Amazon Bedrock can help you increase productivity, improve your customer service experience, or automate DevOps tasks. I’m excited to see what use cases you will implement!</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/generative-ai-with-llms.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/21/generative-ai-with-llms.png\" alt=\"Generative AI with large language models\" width=\"300\" height=\"150\" /></a><strong><u>Learn the Fundamentals of Generative AI</u></strong><br /> If you’re interested in the fundamentals of generative AI and how to work with FMs, including advanced prompting techniques and agents, check out this this new hands-on course that I developed with AWS colleagues and industry experts in collaboration with <a href=\"https://www.deeplearning.ai/\">DeepLearning.AI</a>:</p> \n<p><a href=\"https://www.deeplearning.ai/courses/generative-ai-with-llms/\"><strong>Generative AI with large language models (LLMs)</strong></a> is an on-demand, three-week course for data scientists and engineers who want to learn how to build generative AI applications with LLMs. It’s the perfect foundation to start building with Amazon Bedrock. <a href=\"https://www.deeplearning.ai/courses/generative-ai-with-llms/\">Enroll for generative AI with LLMs today.</a></p> \n<p><strong><u>Sign up to Learn More about Amazon Bedrock (Preview)<br /> </u></strong><a href=\"https://us-east-1.console.aws.amazon.com/bedrock\">Amazon Bedrock</a> is currently available in preview. Reach out to us if you’d like access to agents for Amazon Bedrock as part of the preview. We’re regularly providing access to new customers. <a href=\"https://aws.amazon.com/bedrock/features/?trk=80acb49a-e4e5-48be-8dd5-24a05b52f386&amp;sc_channel=el\">Visit the Amazon Bedrock Features page</a> and <a href=\"https://pages.awscloud.com/generative-AI-interest-learn.html\">sign up to learn more about Amazon Bedrock</a>.</p> \n<p>— <a href=\"https://twitter.com/anbarth\" target=\"_blank\">Antje</a></p> \n<hr /> \n<p>P.S. We’re focused on improving our content to provide a better customer experience, and we need your feedback to do so. Please take <a href=\"https://amazonmr.au1.qualtrics.com/jfe/form/SV_234fKSz305XaQpE\">this quick survey</a> to share insights on your experience with the AWS Blog. Note that this survey is hosted by an external company, so the link does not lead to our website. AWS handles your information as described in the <a href=\"https://aws.amazon.com/privacy/\">AWS Privacy Notice</a>.</p>","author":"Antje Barth","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"b8be8e60e6810b70607cff6ce856ae1399f676591e4977306fe955b8dde2acc5","category":"Tech"}