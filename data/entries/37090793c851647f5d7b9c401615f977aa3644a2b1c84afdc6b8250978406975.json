{"title":"Access AWS from HCP Terraform with OIDC federation","link":"https://www.hashicorp.com/blog/access-aws-from-hcp-terraform-with-oidc-federation","date":1725519600000,"content":"<p>Storing access keys in HCP Terraform poses a security risk. While HCP Terraform secures sensitive credentials as write-only variables, you must audit the usage of long-lived access keys to detect if they are compromised. Not only is leaking the access key a risk, but many organizations have a policy to block the creation of such access keys. </p>\n\n<p>Fortunately, in many cases, you can authenticate with more secure alternatives to access keys. One such alternative is <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html\">AWS IAM OIDC federation</a>, which uses identity and access management (IAM) to grant external identities (such as HCP Terraform) the ability to <a href=\"https://docs.aws.amazon.com/sdkref/latest/guide/access-assume-role.html#credOrSourceAssumeRole\">assume</a> an IAM role.</p>\n\n<p>HCP Terraform’s <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials\">dynamic provider credentials</a> allow Terraform runs to assume an IAM role through native OpenID Connect (OIDC) integration and obtain temporary security credentials for each run. These AWS credentials allow you to call AWS APIs that the IAM role has access to at runtime. These credentials are usable for only one hour by default, so their usefulness to an attacker is limited.</p>\n\n<p>This brief tutorial will show you how to set up an OIDC provider and access AWS from HCP Terraform using dynamic provider credentials and OIDC federation.</p>\n\n<h2>Authentication sequence</h2>\n\n<p>For this tutorial, you will use HCP Terraform to provision an OIDC provider that establishes a trust relationship between HCP Terraform and your AWS account. This setup allows HCP Terraform to assume an IAM role at runtime and pass the obtained temporary security credentials to the AWS Terraform provider to run <code>terraform plan</code> or <code>apply</code>.</p>\n\n<p>The diagram below illustrates the authentication sequence for accessing AWS using dynamic provider credentials and OIDC federation.</p>\n<img src=\"https://www.datocms-assets.com/2885/1725487402-aws-provider-dynamic-credentials.png\" alt=\"AWS\" /><p>To set up an OIDC provider, this step assumes that you already have a <a href=\"https://docs.aws.amazon.com/cli/v1/userguide/cli-chap-authentication.html\">method</a> available to authenticate to your AWS account.</p>\n\n<h2>Set up the OIDC provider</h2>\n\n<p>To set up the HCP Terraform OIDC provider for OIDC federation in AWS, use the following example configuration:</p>\n<pre><code>data \"tls_certificate\" \"provider\" {\n  url = \"https://app.terraform.io\"\n}\n\nresource \"aws_iam_openid_connect_provider\" \"hcp_terraform\" {\n  url = \"https://app.terraform.io\"\n\n  client_id_list = [\n    \"aws.workload.identity\", # Default audience in HCP Terraform for AWS.\n  ]\n\n  thumbprint_list = [\n    data.tls_certificate.provider.certificates[0].sha1_fingerprint,\n  ]\n}</code></pre><p>Once the HCP Terraform OIDC provider is created, create an ‘example’ IAM role that HCP Terraform will assume at runtime:</p>\n<pre><code>data \"aws_iam_policy_document\" \"example_oidc_assume_role_policy\" {\n  statement {\n    effect = \"Allow\"\n\n    actions = [\"sts:AssumeRoleWithWebIdentity\"]\n\n    principals {\n      type        = \"Federated\"\n      identifiers = [aws_iam_openid_connect_provider.hcp_terraform.arn]\n    }\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"app.terraform.io:aud\"\n      values   = [\"aws.workload.identity\"]\n    }\n\n    condition {\n      test     = \"StringLike\"\n      variable = \"app.terraform.io:sub\"\n      values   = [\"organization:ORG_NAME:project:PROJECT_NAME:workspace:WORKSPACE_NAME:run_phase:*\"]\n    }\n  }\n}\n\nresource \"aws_iam_role\" \"example\" {\n  name               = \"example\"\n  assume_role_policy = data.aws_iam_policy_document.example_oidc_assume_role_policy.json\n}</code></pre><p>The IAM role defined above currently includes only an <code>assume_role_policy</code> and lacks additional permissions. Depending on your requirements, you may need to add more permissions to the role to allow it to create and manage resources, such as <a href=\"https://aws.amazon.com/s3/\">S3</a> buckets, or <a href=\"https://aws.amazon.com/ec2/\">EC2</a> instances.</p>\n\n<p>In the <code>aws_iam_policy_document</code>, define a condition that evaluates the OIDC subject claim for HCP Terraform organization, project, workspace, and run phase. The subject claim in the example searches for specific organization, project, and workspace. However, you can make the claim more flexible by using wildcards (*), such as <code>organization:ORG_NAME:project:PROJECT_NAME:workspace:*:run_phase:*</code>. </p>\n\n<p>This claim allows for matching of all workspaces and run phases within a specific HCP Terraform project and organization, which can be helpful in scenarios like using <a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/no-code-provisioning\">HCP Terraform’s no-code modules</a> to provide self-service infrastructure, where workspace names may not be known in advance.</p>\n\n<p>Note that wildcards in OIDC subject claims can simplify access policies but introduce potential security risks. To balance flexibility and security, use wildcards carefully. While you can scope claims down to a specific HCP Terraform workspace or run phase for maximum security, wildcards can be used selectively to replace certain values, offering a compromise between granularity and convenience.</p>\n\n<p>You can add additional permissions to an IAM role by using the <code>aws_iam_policy_document</code> data source and the <code>aws_iam_policy</code> resource. See the example below:</p>\n<pre><code>data \"aws_iam_policy\" \"AmazonS3FullAccess\" {\n  arn = \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\n}\n\nresource \"aws_iam_role_policy_attachment\" \"example_s3_full_access\" {\n  policy_arn = data.aws_iam_policy.AmazonS3FullAccess.arn\n  role       = aws_iam_role.example.name\n}</code></pre><h2>Using OIDC federation</h2>\n\n<p>When using OIDC federation, apart from the region argument, you don’t need to include any authentication configuration within the provider block. As long as you set up the correct environment variables in your workspace—specifically, set <code>TFC_AWS_PROVIDER_AUTH</code> to <code>true</code> and <code>TFC_AWS_RUN_ROLE_ARN</code> to the IAM role <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html\">ARN</a> that HCP Terraform should assume at runtime.</p>\n<pre><code>resource \"tfe_variable\" \"tfc_aws_provider_auth\" {\n  key          = \"TFC_AWS_PROVIDER_AUTH\"\n  value        = \"true\"\n  category     = \"env\"\n  workspace_id = tfe_workspace.example.id\n}\n\nresource \"tfe_variable\" \"tfc_example_role_arn\" {\n  sensitive    = true\n  key          = \"TFC_AWS_RUN_ROLE_ARN\"\n  value        = aws_iam_role.example.arn\n  category     = \"env\"\n  workspace_id = tfe_workspace.example.id\n}</code></pre><p>HCP Terraform will automatically assume the IAM role and inject the temporary credentials for you, using the workspace environment variables, allowing you to focus on creating infrastructure.</p>\n\n<h2>Implementing access management for your AWS organization</h2>\n\n<p>For improved security and scalability, we recommend implementing a pattern where one or more HCP Terraform workspaces inject the IAM role and OIDC provider ARNs into other workspaces using an <a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/cloud-multiple-variable-sets#create-variable-sets\">HCP Terraform variable set</a>. This enables the platform/cloud team to create HCP Terraform workspaces with pre-configured AWS authentication, scoped to a specific IAM role and permissions.</p>\n\n<p>Whether you create an OIDC provider per AWS account, per environment, or use a single OIDC provider, providing pre-configured AWS authentication for teams’ HCP Terraform workspace is a win-win for both the platform/cloud team and the teams they enable to work autonomously.</p>\n\n<p>Below is an example configuration that creates a variable set for a specific IAM role and sets two environment variables. HCP Terraform uses these environment variables to assume the IAM role and obtain temporary security credentials at runtime, injecting them into the provider to enable access to any AWS API allowed by the IAM role’s policies.</p>\n\n<p>First, create the variable set:</p>\n<pre><code>resource \"tfe_variable_set\" \"example\" {\n  name         = aws_iam_role.example.name\n  description  = \"OIDC federation configuration for ${aws_iam_role.example.arn}\"\n  organization = \"XXXXXXXXXXXXXXX\"\n}</code></pre><p>Next, set up the required environment variables and link them to the variable set:</p>\n<pre><code>resource \"tfe_variable\" \"tfc_aws_provider_auth\" {\n  key             = \"TFC_AWS_PROVIDER_AUTH\"\n  value           = \"true\"\n  category        = \"env\"\n  variable_set_id = tfe_variable_set.example.id\n}\n\nresource \"tfe_variable\" \"tfc_example_role_arn\" {\n  sensitive       = true\n  key             = \"TFC_AWS_RUN_ROLE_ARN\"\n  value           = aws_iam_role.example.arn\n  category        = \"env\"\n  variable_set_id = tfe_variable_set.example.id\n}</code></pre><p>Finally, share the variable set with another HCP Terraform workspace. This ensures that the targeted workspace receives and uses the environment variables, allowing HCP Terraform to automatically assume the IAM role and inject the temporary security credentials:</p>\n<pre><code>resource \"tfe_workspace_variable_set\" \"example\" {\n  variable_set_id = tfe_variable_set.example.id\n  workspace_id    = \"ws-XXXXXXXXXXXXXXX\"\n}</code></pre><h2>Creating infrastructure from another workspace</h2>\n\n<p>Using the IAM role created earlier in this tutorial, which has been assigned S3 permissions, you can create a bucket  right away within the workspace you’ve delegated access to without needing any additional configuration:</p>\n<pre><code>provider \"aws\" {\n  region = \"us-west-2\"\n}\n\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"example\"\n}</code></pre><h2>Learn more about OIDC federation</h2>\n\n<p>For more on how to securely access AWS from HCP Terraform with OIDC federation, check out the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials/aws-configuration\">Dynamic Credentials with the AWS Provider</a> and <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html\">OIDC federation</a> documentation. Find a more complete example of configuring the AWS IAM OIDC identity provider on <a href=\"https://github.com/bschaatsbergen/hcp-terraform-aws-oidc-federation/blob/main/main.tf\">GitHub</a>.</p>\n","author":"Bruno Schaatsbergen","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"37090793c851647f5d7b9c401615f977aa3644a2b1c84afdc6b8250978406975","category":"Tech"}