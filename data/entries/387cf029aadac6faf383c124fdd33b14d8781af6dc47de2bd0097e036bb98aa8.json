{"title":"Nomad 1.10 adds dynamic host volumes, extended OIDC support, and more","link":"https://www.hashicorp.com/blog/nomad-1-10-adds-dynamic-host-volumes-extended-oidc-support-and-more","date":1744819200000,"content":"<p><a href=\"https://www.nomadproject.io/\">HashiCorp Nomad</a> is a simple and flexible orchestrator used to deploy and manage containers and non-containerized applications across multiple cloud, on-premises, and edge environments. It is widely adopted and used in production by organizations such as <a href=\"https://www.hashicorp.com/resources/accelerating-bt-s-migration-from-on-prem-to-cloud-with-hashicorp\">BT Group</a> and <a href=\"https://www.hashicorp.com/resources/cooking-with-nomad-powering-the-fortnite-creator-ecosystem\">Epic Games</a>. Today, we are excited to announce that Nomad 1.10 is now generally available.</p>\n\n<p>Here’s what’s new in Nomad:</p>\n\n<ul>\n<li>Dynamic host volumes\nDynamic host volume governance (Nomad Enterprise)</li>\n<li>Extended OIDC support — Signed client assertions and Proof Key Code Exchange (PKCE)</li>\n<li>Improved CLI to UI transition</li>\n<li>Expanded upgrade testing</li>\n</ul>\n\n<h2>Dynamic host volumes</h2>\n\n<p>The new dynamic host volume capability introduced in Nomad 1.10 brings an improved storage option to your Nomad workloads that expands on the previously available host volume capability. This provides a more flexible way to provision storage across your Nomad client infrastructure when compared to traditional host volumes or CSI plugins.</p>\n\n<p>Instead of relying on traditional configuration management approaches for storage provisioning with traditional host volumes, leveraging dynamic host volumes now allows you to create new volumes via the CLI or API on demand. Host volumes no longer need to be defined as part of the Nomad client configuration, removing the need to restart the client agent as new volumes are added. Volumes can be provisioned using a flexible plugin specification that allows you to customize the provisioning workflow and target different storage options based on parameters defined during volume creation.</p>\n\n<p>Host volumes can now optionally be created with more detailed characteristics like their minimum and maximum capacities, capabilities, and custom provisioning parameters that can be used during volume creation or update processes in order to define sizing or tiering functionality within the host volume plugin.</p>\n<pre><code>name            = \"database\"\ntype            = \"host\"\nplugin_id       = \"lvm-thin-provisioner\"\nnode_pool       = \"prod\"\n\ncapacity_min = \"80G\"\ncapacity_max = \"100G\"\n\ncapability {\n  access_mode     = \"single-node-reader-only\"\n  attachment_mode = \"file-system\"\n}\n\ncapability {\n  access_mode     = \"single-node-writer\"\n  attachment_mode = \"file-system\"\n}\n\nparameters {\n  skuname = \"Premium_LRS\"\n}</code></pre><p>Whether targeting host local NVMe storage managed with LVM, ZFS, or remote SAN/NAS storage, the host volume <a href=\"https://developer.hashicorp.com/nomad/docs/concepts/plugins/storage/host-volumes\">plugin specification</a> provides the flexibility needed to prepare the volume mount path on the client node ahead of consumption by any jobs mounting the volume. </p>\n\n<p>Dynamic host volumes are a great fit for when you want to control the provisioning process on specific client nodes and then allow jobs to be reliably scheduled next to the provisioned volumes. When using remote storage where you are attempting to allow more portability across client hosts, deploying CSI plugins with Nomad may still be an appropriate choice in comparison to dynamic host volumes that are more closely tied to specific clients once created. For a detailed comparison of different persistent storage options within Nomad, visit our <a href=\"https://developer.hashicorp.com/nomad/docs/v1.10.x/operations/stateful-workloads#storage-comparison\">storage comparison section</a>.</p>\n\n<h3>Stateful deployments</h3>\n\n<p>When using host local storage, enabling sticky volumes in your job specification will allow the same volume on the same client to be claimed when a task group is rescheduled. This allows for persistence across the life of the task group and tightly couples the task group to the client node where the volume is claimed. Sticky volumes can optionally be enabled when mounting volumes in your job specification.</p>\n\n<p>An alternative workflow can be used with dynamic host volumes across shared storage that is accessible from many different client nodes. You can allow more flexible workload portability by creating volumes with the same name across clients while using a simple host volume plugin that prepares local paths and mounts the shared storage. Leaving sticky volumes disabled allows a volume on another client with the same name to be claimed when the task group is rescheduled to a new client. This pattern may be an appropriate consideration when using dynamic host volumes with NFS, EFS, or CephFS filesystems.</p>\n\n<h3>Dynamic host volume governance (Nomad Enterprise)</h3>\n\n<p>Providing guardrails to platform consumers is an important aspect of the storage provisioning workflow when leveraging host volumes across a shared Nomad cluster. Nomad Enterprise supports several new capabilities to provide governance when provisioning host volumes.  </p>\n\n<h4>Sentinel integration</h4>\n\n<p>During volume creation, all of the <a href=\"https://developer.hashicorp.com/nomad/docs/v1.10.x/enterprise/sentinel#sentinel-dynamic-host-volume-objects\">details</a> within the dynamic host volume specification can be <a href=\"https://developer.hashicorp.com/nomad/docs/v1.10.x/enterprise/sentinel#submit-host-volume-scope\">evaluated</a> against Sentinel policies defining and enforcing specific patterns. An example policy might enforce the storage tier based on the environment or namespace specified. This would allow reserving more expensive NVMe storage only for specific workloads. Being able to apply policy to the volume specification gives storage operators many ways to enforce specific patterns while providing platform consumers with more flexibility around self-service volume provisioning.</p>\n\n<h4>Quota support</h4>\n\n<p>Nomad’s <a href=\"https://developer.hashicorp.com/nomad/docs/other-specifications/quota#storage-parameters\">resource quota system</a> now includes coverage for host volume capacity limits that can be applied to provisioned storage within a specific namespace. This will help operators control storage consumption within a namespace based on the maximum capacities they’ve defined.</p>\n\n<h4>Namespace and node pool validation</h4>\n\n<p>Dynamic host volumes live within the context of a specific namespace when created. When provisioning volumes in a namespace targeting a specific node pool, the namespace node pool <a href=\"https://developer.hashicorp.com/nomad/docs/other-specifications/namespace#node_pool_config-parameters\">configuration</a> is evaluated to ensure that volume creation aligns with job placement rules for node pools.</p>\n\n<h3>Dynamic host volume examples</h3>\n\n<p>Several host volume plugin reference examples are available on the <a href=\"https://developer.hashicorp.com/nomad/docs/concepts/plugins/storage/host-volumes#examples\">Host volume plugins</a> page to help you get started with implementing your own custom host volume plugins.</p>\n\n<p>Check out the <a href=\"https://developer.hashicorp.com/nomad/tutorials/stateful-workloads/stateful-workloads-dynamic-host-volumes\">dynamic host volume tutorial</a> for an in-depth walkthrough of the new host volume workflow.</p>\n\n<h2>Extended OIDC support</h2>\n\n<p>Nomad 1.10 expands its existing OpenID Connect (OIDC) client SSO support with signed client assertions and Proof Key Code Exchange (PKCE). These enhancements are recommended as part of the Financial-grade API (FAPI) specifications and the OAuth 2.1 specification to enhance security for all OIDC clients. This enables customers in finance, government, and other industries with higher security requirements to authenticate Nomad users using their OIDC providers. Some customers in these industries are already enforcing these updated security recommendations in sensitive environments. Other Nomad users can optionally take advantage of these updated capabilities to improve security within their OIDC authentication workflows when supported by their identity providers.</p>\n\n<h3>Client assertions</h3>\n\n<p>Nomad now supports using the <code>private_key_jwt</code>client assertion workflow with asymmetric key signatures. This workflow serves as an alternative to relying on a shared <code>client_secret</code> when authenticating Nomad users with their identity providers. This removes the requirement of storing a shared <code>client_secret</code> value on both the OIDC client (Nomad server) and the identity provider, reducing the risk of authentication secret exposure. </p>\n\n<p>The client assertion capability can be enabled using the internal Nomad keyring with JSON Web Key Sets (JWKS) or externally provided certificates to provide flexibility to Nomad operators. This broadens the application of Nomad’s authentication support to include newly recommended standards while continuing to maintain compatibility with many commonly deployed identity providers.</p>\n\n<p>Refer to the <a href=\"https://developer.hashicorp.com/nomad/docs/concepts/acl/auth-methods/oidc#client-assertions\">client assertion</a> documentation for configuration examples.</p>\n\n<h3>Proof Key Code Exchange(PKCE)</h3>\n\n<p>Nomad 1.10 also supports Proof Key for Code Exchange (PKCE) when configuring new OIDC authentication methods as an additional layer of security. While traditionally seen with native mobile applications or single-page web applications within OAuth 2.0 standards, PKCE has recently been recommended for all OIDC client workflows as part of the FAPI 2.0 and OAuth 2.1 specifications. This recommendation applies even when authenticating with confidential OIDC clients like Nomad. PKCE provides an additional layer of defense in order to prevent attackers from intercepting sensitive tokens during the authentication process. This can be enabled whether deploying traditional <code>client_secret</code> authentication or the newly introduced client assertion workflows with <code>private_key_jwt</code> authentication, and is broadly supported by identity providers.</p>\n\n<p>Existing auth method configurations will not retroactively enable PKCE until your configuration is updated to explicitly enable it. Some OIDC providers require additional configuration in order to support or enforce PKCE within the identity provider itself. Evaluate your OIDC provider’s capabilities when enabling this feature within your auth method configurations. It is also important to test this capability with your specific identity provider prior to updating your auth method configuration in order to avoid inadvertently disabling your SSO access to Nomad.</p>\n\n<h2>Improved CLI to UI transition</h2>\n\n<p>When navigating in the Nomad CLI there are often moments where you may have wished you had a richer visualization of the data you are currently viewing. Nomad 1.10 introduces a new UI URL hints capability within the CLI output that is enabled by default to allow a quick transition to the web UI view with the same information.</p>\n<pre><code>$ nomad status\nNo running jobs\n\n==&gt; View and manage Nomad jobs in the Web UI: https://localhost:4646/ui/jobs\n\n$ export NOMAD_CLI_SHOW_HINTS=0\n$ nomad status\nNo running jobs</code></pre><h2>Expanded upgrade testing</h2>\n\n<p>Nomad 1.10 marks the second LTS release for Nomad. During the 1.10 development cycle, we spent time refining our existing automated testing capabilities to provide a heightened focus on upgrade stability when moving between supported LTS releases. This commitment to a seamless upgrade experience allows organizations to confidently embrace new features and enhancements while upholding the stability expected with LTS releases. By prioritizing comprehensive testing, Nomad 1.10 LTS minimizes potential disruptions and ensures a smooth, reliable upgrade path for all users, whether moving from Nomad 1.9 or the previous Nomad 1.8 LTS releases.</p>\n\n<h2>Getting started with Nomad 1.10</h2>\n\n<p>Nomad 1.10 adds a variety of new features and enhancements. We encourage you to try them out:\n- <a href=\"https://developer.hashicorp.com/nomad/install\">Download Nomad 1.10</a> from the project website.\n- Learn more about Nomad with <a href=\"https://developer.hashicorp.com/nomad/tutorials\">tutorials on the HashiCorp Developer site</a>.\n- Contribute to Nomad by submitting a pull request for a GitHub issue with the “<a href=\"https://github.com/hashicorp/nomad/issues?q=is%3Aopen+is%3Aissue+label%3Ahelp-wanted\">help wanted</a>” or “<a href=\"https://github.com/hashicorp/nomad/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\">good first issue</a>” label.\n- <a href=\"https://www.nomadproject.io/community\">Participate in our community</a> forums, office hours, and other events.\n- To learn more about how Nomad can solve your business-critical workload orchestration needs, <a href=\"https://www.hashicorp.com/contact-sales\">talk to our sales team and solutions engineers</a> about test-driving Nomad Enterprise.\nRefer to the <a href=\"https://developer.hashicorp.com/nomad/docs/release-notes/nomad/v1-10-x\">release notes</a> for a comprehensive list of new capabilities as well as any breaking changes or deprecations included as part of the Nomad 1.10 release.</p>\n","author":"Austin Workman","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"387cf029aadac6faf383c124fdd33b14d8781af6dc47de2bd0097e036bb98aa8","category":"Tech"}