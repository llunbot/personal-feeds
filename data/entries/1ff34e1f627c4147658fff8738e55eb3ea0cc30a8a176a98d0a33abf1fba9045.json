{"title":"สรุปจาก Meetup :: MongoDB Data Modeling จากกลุ่ม MongoDB Thailand User Group","link":"https://www.somkiat.cc/note-mongodb-data-modeling/","date":1711861212000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/03/mongodb-meetup-01-150x150.jpeg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/03/mongodb-meetup-01-150x150.jpeg 150w, https://www.somkiat.cc/wp-content/uploads/2024/03/mongodb-meetup-01-75x75.jpeg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/03/mongodb-meetup-01.jpeg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/03/mongodb-meetup-01-1024x556.jpeg\" width=\"650\" height=\"353\" /></a></figure>\n\n\n\n<p>วันนี้มีโอกาสได้เข้าร่วมฟัง meetup เรื่อง MongoDB Data Modeling<br />จากกลุ่ม <a href=\"https://www.facebook.com/groups/104161329726941\" target=\"_blank\">MongoDB Thailand User Group</a><br />ซึ่งมีหัวข้อต่าง ๆ เหล่านี้</p>\n\n\n\n<ul>\n<li>แนะนำ MongoDB ว่าเป็นอย่างไร มีเป้าหมายอะไรบ้าง ความเข้าใจผิดต่าง ๆ จากการใช้งาน</li>\n\n\n\n<li>อธิบายเรื่อง Replication และ Sharding</li>\n\n\n\n<li>แนะนำเรื่อง Data modeling pattern โดยเป็นรูปแบบตามรูปแบบการใช้งานของ application</li>\n</ul>\n\n\n\n<p>ทำการสรุปจากสิ่งที่ได้ฟังดังนี้<br />มาเริ่มกันเลย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เริ่มที่แนะนำ MongoDB สักเล็กน้อย เช่น</strong></p>\n\n\n\n<ul>\n<li>Flexible schema ทำให้มีความยืดหยุ่นสูง หรือ change friendly แต่ก็ต้องทำ schema validationไว้ด้วย</li>\n\n\n\n<li>No-locking column</li>\n\n\n\n<li>ง่ายต่อการดึงและวิเคราะห์ข้อมูล</li>\n\n\n\n<li>ง่ายต่อการ horizontal scale ด้วย sharing</li>\n</ul>\n\n\n\n<p>แต่ปัญหาในการใช้งาน MongoDB คือ ความเข้าใจผิด<br />ก่อให้เกิดความผิดพลาดต่อการนำไปใช้งาน<br />หรือ แรก ๆ ระบบทำงานได้ดี แต่เมื่อเวลาผ่านไประบบช้าลงเรื่อย ๆ เป็นต้น<br />ยกตัวอย่างเช่น</p>\n\n\n\n<ul>\n<li>Normalize ข้อมูลเหมือนกับการออกแบบใน RDBMS </li>\n\n\n\n<li>ไม่ออกแบบตามการใช้งาน ทั้ง Read และ Write</li>\n\n\n\n<li>ไม่ทำการ shading ข้อมูล</li>\n</ul>\n\n\n\n<p><strong>ต่อมาเรื่องของ MongoDB Design</strong></p>\n\n\n\n<ul>\n<li><strong><a href=\"https://www.mongodb.com/docs/manual/replication/\" target=\"_blank\">Replication</a></strong> ทำการเพิ่มเครื่องเข้ามา จากนั้นทุก ๆ เครื่องก็ทำการ sync ข้อมูลไปเหมือน ๆ กัน เพื่อช่วยเพิ่มเครื่องมาช่วยงาน และช่วยเครื่อง High avaliability (HA) โดยเครื่อง prinary สำหรับ read และ write ส่วนเครื่อง secondary นั้น read-only</li>\n\n\n\n<li><strong><a href=\"https://www.mongodb.com/docs/manual/sharding/\" target=\"_blank\">Sharding</a></strong> ทำการกระจายข้อมูลตาม shard key ที่กำหนด เช่น hash และ range เป็นต้น หรือเรียกว่า collection sharding ไม่จำเป็นต้อง sync ข้อมูลเหมือนกันทุกเครื่อง โดย shard ยังคงมีการ replicate data อยู่นั่นเอง ใน MongoDB 7 นั้นจะมีเครื่องมือทำ sharding analytic มาให้ด้วย</li>\n</ul>\n\n\n\n<p>การติดตั้งแบบ replication จะง่ายกว่า sharding</p>\n\n\n\n<p><strong>เรื่องสุดท้ายคือ Data modeling pattern สำหรับ MongoDB</strong></p>\n\n\n\n<p>โดยจะมีหลายรูปแบบมาก ๆ ขึ้นอยู่กับรูปแบบของการใช้งาน<br />ทั้ง read และ write<br />รวมทั้งยังต้องลดการ join หรือ ดึงข้อมูลหลาย ๆ ครั้ง<br />เนื่องจากจะถูกจัดการผ่าน application มากกว่า เช่นการ application join เป็นต้น<br />ซึ่งถ้าทำเยอะ ๆ ก็จะทำให้ประสิทธิภาพแย่ลง</p>\n\n\n\n<p><strong>ใน meetup ครั้งนี้ จะทำการอธิบายถึง pattern ที่ใช้งานบ่อย ๆ ดังนี้</strong></p>\n\n\n\n<ul>\n<li><strong>Computed pattern</strong> ทำการสรุปข้อมูลที่จะถูกใช้งานหรืออ่านบ่อย ๆ ไว้ก่อน เช่นการ count, summary, average หรือ grouping เป็นต้น</li>\n\n\n\n<li><strong>Inheritance pattern</strong> หรือ Polymorphic นั่นเอง ถ้าต้องการเก็บข้อมูลที่หลากหลายใน collection เดียวกัน แล้วมีข้อมูลที่คล้าย ๆ กัน ดังนั้นทำเป็น parent/child ไปเลย ช่วยให้เก็บง่าย ดึงง่าย เช่น single view app, content management เป็นต้น</li>\n\n\n\n<li><strong>Extended pattern</strong> ถ้าต้องใช้ข้อมูลจากหลาย ๆ  collection มักต้องทำการ join ดังนั้นทำการเพิ่มข้อมูลที่ต้องการใช้ใน document ของ colelction หลักไปเลย เอาเท่าที่ใช้มานะ เพื่อลดการ join ทำให้เร็วต่อการอ่าน แต่ระวังเรื่องขนาดของ document ต้องไม่เกิน 16 MB</li>\n\n\n\n<li><strong>Schema versioning pattern</strong> สำหรับจัดการ version ของ document ด้วยการเพิ่ม property version เข้ามา ทำให้ฝั่ง application จัดการกับข้อมูลตาม version ได้ง่าย ลด downtime ลงไป อาจจะเป็น zero-downtime ได้ อย่าลืมทำ schema validate ไว้ด้วย</li>\n\n\n\n<li><strong>Subset pattern</strong> คล้ายกับการ extened แต่ว่าด้วยเรื่องของขนาดข้อมูลที่อาจจะใหญ่เกินไป ดังนั้นจึงให้เก็บเท่าที่จะใช้งานก่อน เช่นถ้าเป็น paging ก็เก็บ page แรกไว้ หรือ top 100 เป็นต้น</li>\n\n\n\n<li>Bucket pattern เป็น pattern ที่คิดออกมาสำหรับจัดการข้อมูลแบบ time-series, real-time analytic และ IoT เป็นต้น ทั้งการอ่านและเขียนข้อมูลปริมาณมาก ๆ เนื่องจาก disk และ memory มีจำกัด เป็นการนำเอาแนวคิดของ computed และ subset มาใช้งาน โดยใน MongoDB 5.0 ได้สร้าง <a href=\"https://www.mongodb.com/docs/v5.3/core/timeseries-collections/\" target=\"_blank\">Time-series collection</a> ออกมา เพื่อให้ใช้งานง่ายขึ้น</li>\n</ul>\n\n\n\n<p>สามารถดู pattern อื่น ๆ เพิ่มได้ที่ <a href=\"https://www.mongodb.com/blog/post/building-with-patterns-a-summary\" target=\"_blank\">Building with Patterns: A Summary</a></p>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/03/patternsmatrix-xv1kqjlrpb.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/03/patternsmatrix-xv1kqjlrpb-1024x942.png\" width=\"519\" height=\"477\" /></a></figure>\n\n\n\n<p><strong>Reference Websites</strong></p>\n\n\n\n<ul>\n<li>Slide ของ meetup ครั้งที่ <a href=\"https://github.com/mongodbthailand/thmug-mdb-data-modeling\" target=\"_blank\">Download</a> ได้เลย</li>\n\n\n\n<li><a href=\"https://www.mongodb.com/products/capabilities/security/encryption\" target=\"_blank\">MongoDB Data Encryption</a></li>\n\n\n\n<li><a href=\"https://www.practical-mongodb-aggregations.com/\" target=\"_blank\">Practical MongoDB Aggregations Book</a></li>\n</ul>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"1ff34e1f627c4147658fff8738e55eb3ea0cc30a8a176a98d0a33abf1fba9045","category":"Thai"}