{"title":"How to use Vault namespaces","link":"https://www.hashicorp.com/blog/how-to-use-vault-namespaces","date":1727193600000,"content":"<p>As the adoption of your HashiCorp Vault cluster grows in scope and complexity, it's natural to adapt and plan to support multiple tenants so you can centralize, scale, and standardize your organization's secrets lifecycle. To address this requirement, several years ago Vault 0.11 introduced the concept of <a href=\"https://developer.hashicorp.com/vault/tutorials/enterprise/namespaces\">namespaces</a>, which has continued to evolve over time.</p>\n\n<p>However, the benefits of using namespaces are not always clear, and it may not be obvious how namespaces should be used in various situations. </p>\n\n<p>This blog post draws on our practical solutions engineering experience to explore what works and what doesn't when using namespaces for multi-tenant deployments. We’ll explain when we think namespaces are appropriate vs. inappropriate to use. Then we'll dive into real-world examples and share insights gained from tackling multiple use cases. </p>\n\n<h2>What namespaces are not</h2>\n\n<p>Vault namespaces have a clear definition, but we’ve seen many examples of their misuse among customers. These are the use cases where you shouldn’t employ namespaces:</p>\n\n<h3>A security boundary</h3>\n\n<p>By default, policies in Vault deny access, so an empty policy results in no permission within the system. Vault's access control list (ACL) policies uphold the <a href=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">principle of least privilege</a>, including the deny-by-default posture, so namespaces do not need to be used to handle these controls.</p>\n\n<p>Another area to focus on as a security boundary is your infrastructure as code (IaC) workflow, which is <a href=\"https://www.hashicorp.com/blog/why-use-vault-backed-dynamic-credentials-to-secure-hcp-terraform-infrastructure\">crucial for preventing unauthorized lateral movement</a> within your systems.</p>\n\n<h3>An onboarding strategy</h3>\n\n<p>Vault namespaces should be not treated as a consumption model, where users can utilize them without any kind of control. To ensure secure self-service usage of Vault, it’s essential to have a well-designed IaC pipeline and API-based onboarding process along with thoughtful Day 2+ management strategies.</p>\n\n<p>One symptom of an inadequate consumption model is having empty namespaces or <a href=\"https://developer.hashicorp.com/vault/docs/secrets/kv/kv-v2\">KV</a> mounts. This should be avoided since they serve no purpose and <a href=\"https://developer.hashicorp.com/vault/docs/internals/limits\">reduce the space available to other tenants</a>. To avoid this, configure the secrets engine in the same provisioning process as the resource it provides access to. This creates a more seamless lifecycle management process.</p>\n\n<p>Vending namespaces is not an end goal, but merely one tool in an effective multi-tenancy solution. </p>\n\n<h2>When should namespaces be used?</h2>\n\n<p>Here are some typical use cases for namespaces.</p>\n\n<h3>Tenant segregation</h3>\n\n<p>Vault namespaces help you organize secrets engines, authentication mounts, policies, entities, and groups in a structured manner.</p>\n\n<p>When a client authenticates at the namespace level, by default, their token can have only policies that are specified in that namespace. This behavior is particularly useful with dynamic or templated policies, ensuring that a path will never match an incorrect namespace path by mistake.</p>\n\n<p>For cross-namespace access, you can add an entity from a different namespace to a group or move the authentication backend to a higher level. This requires <a href=\"https://developer.hashicorp.com/vault/api-docs/system/config-group-policy-application\">a setting change</a> in <code>/sys/config/group-policy-application</code>. However, it’s rare to have applications that need cross-namespace access. If applications are being given cross-namespace access, it may mean that the namespace strategy (or consumption) needs to be reviewed.</p>\n\n<h3>Granular break-glass workflows</h3>\n\n<p>Administrators can leverage the namespace API to <a href=\"https://developer.hashicorp.com/vault/docs/concepts/namespace-api-lock\">lock a specific namespace</a>. This is similar to the process of sealing Vault, but eliminates the risk of break-glass workflows affecting multiple tenants or geographies hosted on other namespaces. This granular approach allows for more targeted and controlled access management, reducing the risk of unintended consequences.</p>\n\n<h3>Setting lease limits</h3>\n\n<p><a href=\"https://developer.hashicorp.com/vault/docs/enterprise/lease-count-quotas\">Lease count quotas</a> can help ensure cluster stability by protecting the cluster against unchecked lease generation that could overwhelm the system. This setting can be set on a path, such as an auth mount or applicable to a whole namespace.</p>\n\n<h3>Setting rate limits</h3>\n\n<p>Vault lets operators <a href=\"https://developer.hashicorp.com/vault/api-docs/system/rate-limit-quotas\">set resource quotas and apply rate limits</a> to prevent system overloads and ensure consistent performance. This setting can be applied to any path, such as a mount or a namespace.</p>\n\n<p>While rate limits manage the frequency of API requests, lease count quotas control the number of active resource permissions. Both are necessary for efficient resource management and system reliability</p>\n\n<h3>Scoping performance replication</h3>\n\n<p>When using performance replication, namespaces can be used to scope what gets replicated to which cluster by <a href=\"https://developer.hashicorp.com/vault/docs/enterprise/replication#paths-filter\">configuring a paths-filter with an allow filter</a>.</p>\n\n<p>The following example shows a primary cluster with namespaces defined by region. Each namespace is replicated to its own individual secondary cluster. Changes in a secondary cluster are also replicated back to the primary cluster unless a mount is created as <code>local</code>.</p>\n<img src=\"https://www.datocms-assets.com/2885/1727193111-vault-regional-replica-clusters-edited.png\" alt=\"A\" /><p>To ensure clients connect to the correct namespace on each cluster, consider using <a href=\"https://developer.hashicorp.com/vault/tutorials/enterprise/namespace-structure#chroot-namespace\">chroot in the TLS listener configuration</a>.</p>\n\n<h3>Usage cross-charging</h3>\n\n<p>Implementing cross-charging of the Vault license helps distribute costs fairly by allocating expenses based on actual usage. This promotes accountability and encourages resource optimization. It also contributes to better budget management and financial reporting, helping to identify and control costs. </p>\n\n<p>This can be achieved by <a href=\"https://developer.hashicorp.com/vault/api-docs/system/internal-counters#client-count\">exporting the exact consumption per namespace and mount</a>. This information, coupled with namespace metadata and mount descriptions, can be used to generate a detailed usage report to improve financial management and strategic planning.</p>\n\n<h2>Exploring Vault namespace structures</h2>\n\n<p>There are several possible approaches to structuring Vault namespaces. The one you choose will depend on your business requirements. For example, let's look at the pros and cons of organizing namespaces by geographical region, data sensitivity levels, business unit, and application ID.</p>\n\n<p>Please keep in mind the following assumptions:</p>\n\n<ul>\n<li>All human authentication happens at the root level</li>\n<li>All applications authenticate in one sub-namespace</li>\n<li>Applications are not expected to require cross-namespace access</li>\n</ul>\n\n<h3>Geographical region</h3>\n<img src=\"https://www.datocms-assets.com/2885/1727193182-region-namespaces-vault-edited.png\" alt=\"Region\" /><p>Organizing your namespaces by geographical region involves creating separate namespaces for each region, such as <em>International</em>, <em>EU</em>, <em>US</em>, <em>APAC</em>, and <em>on-premises</em>.</p>\n\n<p><strong>Pros</strong>\n* Strong enforcement of data localization\n* Clear communication between developers and the platform team about where data is being hosted or managed\n* Customization of rate limits, policies, etc. by region\n* Settings in a namespace will affect a whole cluster and not just that namespace inside a cluster</p>\n\n<p><strong>Cons</strong>\n* The onboarding process and ongoing configuration management require strict oversight\n* Cross-charging can be more challenging, as it needs to be processed per mount\n* Changes will affect all tenants (teams and apps) in a namespace/cluster</p>\n\n<h3>Data sensitivity</h3>\n<img src=\"https://www.datocms-assets.com/2885/1727193229-vault-namespaces-by-data-sensitivity-edited.png\" alt=\"Vault\" /><p>Organizing your namespaces is by data sensitivity levels involves creating separate namespaces for each level of data sensitivity, such as <em><a href=\"https://www.spirion.com/data-classification#:%7E:text=Data%20classification%20categories,PHI%2C%20and%20credit%20card%20information\">Private, Internal, and Confidential</a></em>. </p>\n\n<p><strong>Pros</strong>\n* Aligns with common regulatory data-sensitivity classifications\n* Can leverage replication path filters to link data sensitivity classification with geographical localization\n* Allows for easier <a href=\"https://developer.hashicorp.com/vault/docs/enterprise/mfa\">enforcement of MFA per namespace path</a>\n* Simplifies the process of limiting or disabling human access based on the level of sensitive data they should or shouldn't have access to</p>\n\n<p><strong>Cons</strong>\n* Demands tight management during onboarding and configuration\n* Cross-charging remains complex, requiring processing per mount\n* Changes can affect multiple tenants</p>\n\n<h3>Business unit</h3>\n<img src=\"https://www.datocms-assets.com/2885/1727193257-vault-namespaces-by-business-unit-edited.png\" alt=\"Vault\" /><p>Organizing your namespaces by business unit involves creating separate namespaces for each business unit, such as BU1, BU2, and BU3. </p>\n\n<p>To define what constitutes a business unit, one strategy is to count four or five levels down the org chart, starting with the CEO, and then make those teams the business units. Many other strategies could work. When adopting this structure, be mindful of mount table limits and potential future mergers and acquisitions that may lead to an increase in namespaces.</p>\n\n<p>One common criticism of this approach is the fleeting nature of business unit names. However, this issue can be mitigated by treating namespace IDs as unique identifiers for each business unit, while associating metadata values such as the unit’s name, description, and cost code with the corresponding namespace. This way, even if business unit names change or are reorganized, the underlying namespace structure remains intact.</p>\n\n<p><strong>Pros</strong>\n* Clearer cross-charging\n* Data residency issues can be addressed per business unit needs\n* Simpler to set up a self-service onboarding process because issues or outages with one team’s namespace will not affect other teams.</p>\n\n<p><strong>Cons</strong> \n* It’s not trivial to decide how big business unit namespaces should be, taking into account namespace and mount limits\n* Business unit names and organizational structure can change, which can confuse teams and introduce technical debt\n* Relying on a namespace ID instead of a name requires some documentation overhead for developers to understand the Vault path</p>\n\n<h3>Application ID</h3>\n<img src=\"https://www.datocms-assets.com/2885/1727193346-vault-namespaces-by-app-edited.png\" alt=\"Vault\" /><p>Assigning a unique namespace to each application (e.g., App ID 1, App ID 2, App ID 3) is also a popular choice. However, this approach requires several considerations to be scalable.</p>\n\n<p><strong>Pros</strong>\n* Clearly defines cross-charging and responsibility for each application\n* Prevents accidental access between applications due to ACL policy errors\n* Changes affect only a very small number of services/applications</p>\n\n<p><strong>Cons</strong>\n* Due to namespace and mount limits, managing a large number of App IDs may require sharding across multiple clusters\n* Managing a large number of namespaces across multiple IaC pipelines can be complex</p>\n\n<h2>What’s next?</h2>\n\n<p>Carefully considering these factors and selecting the most suitable structure for your needs can help you optimize your Vault usage for efficiency, security, and scalability. No matter what approach you choose, however, there are some key considerations to take into account:</p>\n\n<h3>Moving to a new structure</h3>\n\n<p>When moving to a new structure, you have two options:</p>\n\n<ol>\n<li>Re-mount it all with <a href=\"https://developer.hashicorp.com/vault/docs/concepts/mount-migration\">the mount migration API</a>.</li>\n<li>Set up a whole new structure, migrate applications to the new paths, and decommission the previous structure.</li>\n</ol>\n\n<p>Either way, the migration operations will generate new clients because entities are namespaced <a href=\"https://developer.hashicorp.com/vault/docs/concepts/mount-migration#cleanup-operations\">and cannot be moved</a>, so please reach out to your account team for help planning this work and mitigate its impact.</p>\n\n<h3>Addressing the limits</h3>\n\n<p>There is an <a href=\"https://developer.hashicorp.com/vault/docs/internals/limits#namespace-limits\">estimated default limit of 7,000 namespaces and approximately 14,000 mounts</a>. These limits depend on the storage backend used, which is why it's crucial to monitor the number of mount points and size of each mount table using the <a href=\"https://developer.hashicorp.com/vault/docs/internals/telemetry/metrics/core-system#vault-core-mount_table-num_entries\">vault.core.mount<em>table.num</em>entries</a> and <a href=\"https://developer.hashicorp.com/vault/docs/internals/telemetry/metrics/core-system#vault-core-mount_table-size\">vault.core.mount_table.size</a> telemetry metrics.</p>\n\n<p>If your Vault cluster is deployed with a raft/integrated storage backend, it’s possible to <a href=\"https://developer.hashicorp.com/vault/docs/configuration/storage/raft#max_mount_and_namespace_table_entry_size\">change the table entry size for mounts and namespaces</a>. However, before changing this, please read the <a href=\"https://developer.hashicorp.com/vault/docs/enterprise/namespaces/namespace-limits\">Running Vault Enterprise with many namespaces</a> guide to understand the performance considerations.</p>\n\n<p>As explained earlier, creating  “empty” placeholder namespaces or mounts will negatively impact the management of these limits.</p>\n\n<h2>How to test different options</h2>\n\n<p>To experiment with different namespace approaches, start a development Vault cluster in the <a href=\"https://www.hashicorp.com/cloud\">HashiCorp Cloud Platform (HCP)</a> or reach out to your account team for a non-production license to use Vault Enterprise locally. This will let you test and optimize your strategies before implementing them in production environments.</p>\n\n<p>For more in-depth information, check out the <a href=\"https://developer.hashicorp.com/vault/docs/enterprise/namespaces\">namespaces documentation</a> on the HashiCorp Developer website.</p>\n\n<p><em>Special thanks to Russ Parsloe, Lucy Davinhart, and Guy Barros\nfor their contributions to this blog post!</em></p>\n","author":"Ricardo Oliveira","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"86224d1167f72c09aac79da371e83fe56179b2f1a51b49fb6ffd1f45602f22b7","category":"Tech"}