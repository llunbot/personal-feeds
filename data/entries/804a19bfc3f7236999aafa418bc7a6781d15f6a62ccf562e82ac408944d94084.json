{"title":"HCP Terraform adds run queue visibility and new ephemeral workspace features","link":"https://www.hashicorp.com/blog/hcp-terraform-adds-run-queue-visibility-and-new-ephemeral-workspace-features","date":1726675200000,"content":"<p>In the past few months, the HashiCorp Terraform team launched a slew of improvements to help platform teams simplify and streamline their IT operations so they can increase developer velocity and cut costs for organizations. The new HCP Terraform improvements include:</p>\n\n<ul>\n<li>Queue visibility for HCP Terraform (GA)</li>\n<li>Project-scoped ephemeral workspaces for HCP Terraform (GA)</li>\n<li>Ephemeral workspace management with the Terraform provider for HCP Terraform and Terraform Enterprise (GA)</li>\n</ul>\n\n<h3>Run queue visibility</h3>\n\n<p>In the past, when Terraform runs queued up, it could be challenging for the platform engineers to identify which runs across various workspaces were causing bottlenecks. Run queue visibility for HCP Terraform (available for Terraform Enterprise soon) provides platform teams the tools and visibility to see the activity of all runs in the organization so platform engineers can easily and quickly figure out which runs are running or queued at any point in time and take remedial actions when necessary.</p>\n\n<p>This feature shows an org-level view of runs across workspaces, agent pools, and run operation types, with the ability to filter by different dimensions. So when making high-priority infrastructure changes, platform engineers can easily determine where their changes are in the run queue and quickly find out if the platform is being unresponsive and causing stuck runs.</p>\n<img src=\"https://www.datocms-assets.com/2885/1726598465-run-queue-blog.png\" alt=\"The\" /><h3>Project-scoped ephemeral workspaces</h3>\n\n<p>Platform teams need to support self-service provisioning for developers, but temporary sandboxes and development environments drive up cloud costs when left running past their intended life. Ephemeral workspaces enable automatic destruction of resources, however, they have to be configured on every workspace. Applying auto-destroy settings to all current and new workspaces in a project required manual effort or custom API scripting.</p>\n<p>With the new project-scoped auto-destroy settings for HCP Terraform, project admins can set a default inactivity timeframe for the workspaces in a project. All new and existing workspace created via self-service workflows in the project will inherit this setting as their default auto-destroy configuration while allowing individual workspace owners to override for fine-grained control. This ensures that temporary resources are cleaned up to reduce cloud costs and manual configuration burden.</p>\n\n<p>Learn more on the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/projects/managing#automatically-destroy-inactive-workspaces\">managing projects documentation page</a>.</p>\n\n<h3>Manage ephemeral workspaces with the Terraform TFE provider</h3>\n\n<p>We recommend platform teams use the <a href=\"https://registry.terraform.io/providers/hashicorp/tfe/latest\">Terraform TFE provider</a> to manage their HCP Terraform and Terraform Enterprise resources. With the latest TFE provider, you can configure the auto-destroy time-to-live settings on workspaces.</p>\n\n<p>The following Terraform example configures the <code>website-main-dev</code> workspace to automatically destroy its resources after seven days of inactivity. This saves your team money by ensuring that resources in development environments are cleaned up when unused.</p>\n<pre><code>resource \"tfe_workspace\" \"app-dev\" {\n  name        = \"website-main-dev\"\n  tag_names   = [\"dev\", \"app\"]\n  description = \"Temporary web resources for dev team.\"\n\n  auto_destroy_activity_duration = \"7d\"\n}</code></pre><p>With version 0.57 of the <a href=\"https://registry.terraform.io/providers/hashicorp/tfe/latest\">provider for HCP Terraform and Terraform Enterprise</a>, ephemeral workspace settings can now be managed via the organizationâ€™s existing, provider-driven workspace management practices. Admins can define a workspace's auto-destroy settings using the <code>auto_destroy_activity_duration</code> or <code>auto_destroy_at</code> attributes of the <a href=\"https://registry.terraform.io/providers/hashicorp/tfe/latest/docs/resources/workspace\"><code>tfe_workspace</code> resource</a>. Now, teams can more easily self-manage and save costs at scale by cleaning up their workspace resources.</p>\n\n<h2>Get started with HCP Terraform</h2>\n\n<p>These HCP Terraform and Terraform Enterprise enhancements represent a continued effort to help customers maximize their infrastructure investments and accelerate application delivery by optimizing their infrastructure lifecycle management.</p>\n\n<p>To learn more about these features, visit our <a href=\"https://developer.hashicorp.com/terraform\">Terraform guides and documentation on HashiCorp Developer</a>. If you are new to Terraform, <a href=\"https://app.terraform.io/public/signup/account\">sign up for HCP Terraform</a> and get started for free today.</p>\n","author":"Yushuo Huang","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"804a19bfc3f7236999aafa418bc7a6781d15f6a62ccf562e82ac408944d94084","category":"Tech"}