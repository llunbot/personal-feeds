{"title":"Beyond CSS Media Queries","link":"https://smashingmagazine.com/2024/05/beyond-css-media-queries/","date":1715871600000,"content":"<p>Media queries have been around almost as long as CSS itself — and with no flex, no grid, no responsive units, and no math functions, media queries were <strong>the most pragmatic choice</strong> available to make a somewhat responsive website.</p>\n<p>In the early 2010s, with the proliferation of mobile devices and the timely publication of <a href=\"https://alistapart.com/article/responsive-web-design/\">Ethan Marcotte’s classic article “Responsive Web Design”</a>, media queries became much needed for crafting layouts that could morph across screens and devices. Even when the CSS Flexbox and Grid specifications rolled out, media queries for resizing never left.</p>\n<p><a href=\"https://chromestatus.com/features\">While data on the actual usage of media queries is elusive</a>, the fact that they have <em>grown over time</em> with additional features that go well beyond the viewport and into things like user preferences continues to make them a <strong>bellwether ingredient for responsive design</strong>.</p>\n<p>Today, there are more options and tools in CSS for establishing layouts that allow page elements to adapt to many different conditions besides the size of the viewport. Some are more widely used — Flexbox and Grid for certain — but also things like responsive length units and, most notably, <a href=\"https://www.smashingmagazine.com/2021/05/complete-guide-css-container-queries/\">container queries</a>, a concept we will come back to in a bit.</p>\n<p>But media queries are still often the <em>de facto</em> tool that developers reach for. Maybe it’s muscle memory, inconsistent browser support, or that we’re stuck in our ways, but adoption of the modern approaches we have for responsive interfaces seems slow to take off.</p>\n<p>To be clear, <strong>I am all for media queries</strong>. They play a significant role in the work we do above and beyond watching the viewport size to make better and more accessible user experiences based on a user’s OS preferences, the type of input device they’re using, and more.</p>\n<p>But should media queries continue to be the gold standard for responsive layouts? As always, it depends, but</p>\n<p>It is undeniable that media queries have evolved toward accessibility solutions, making space for other CSS features to take responsibility for responsiveness.</p>\nThe Problem With Media Queries\n<p>Media queries seemed like a great solution for most responsive-related problems, but as the web has grown towards bigger and more complex layouts, <strong>the limits of media queries are more prevalent than ever</strong>.</p>\n<h3>Problem #1: They Are Viewport-Focused</h3>\n<p>When writing media query breakpoints where we want the layout to adapt, we only have access to the viewport’s properties, like <code>width</code> or <code>orientation</code>. Sometimes, all we need is to tweak a font size, and the viewport is our best bud for that, but most times, <strong>context is important</strong>.</p>\n<p>Components on a page share space with others and are positioned <em>relative</em> to each other according to normal document flow. If all we have access to is the viewport width, knowing exactly where to establish a particular breakpoint becomes a task of compromises where some components will respond well to the adapted layout while others will need additional adjustments at that specific breakpoint.</p>\n<p>So, there we are, resizing our browser and looking for the correct breakpoint where our content becomes too squished.</p>\n<p>The following example probably has the worst CSS you will see in a while, but it helps to understand one of the problems with media queries.</p>\n<p><img src=\"https://files.smashing.media/articles/beyond-css-media-queries/cart-desktop.png\" /></p>\n<p>That same layout in mobile simply does not work. Tables have their own set of responsive challenges as it is, and while there is <a href=\"https://css-tricks.com/responsive-data-table-roundup/\">no shortage of solutions</a>, we may be able to consider another layout using modern techniques that are way less engineered.</p>\n<p><img src=\"https://files.smashing.media/articles/beyond-css-media-queries/cart-mobile.png\" /></p>\n<p>We are doing much more than simply changing the width or height of elements! Border colors, element visibility, and flex directions need to be changed, and it can only be done through a media query, right? Well, even in cases where we have to completely switch a layout depending on the viewport size, we can better achieve it with <em>container queries</em>.</p>\n<p>Again, Problem #1 of media queries is that they only consider the viewport size when making decisions and are completely ignorant of an element’s surrounding context.</p>\n<p>That may not be a big concern if all we’re talking about is a series of elements that are allowed to take up the full page width because the full page width is very much related to the viewport size, making media queries a perfectly fine choice for making adjustments.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/ExzVjPj\">Responsive Cards Using Media Queries [forked]</a> by <a href=\"https://codepen.io/monknow\">Monknow</a>.</p>\n<p>But say we want to display those same elements as part of a multi-column layout where they are included in a narrow column as an <code>&lt;aside&gt;</code> next to a larger column containing a <code>&lt;main&gt;</code> element. Now we’re in trouble.</p>\n<p>A more traditional solution is to write a series of media queries depending on where the element is used and where its content breaks. But media queries completely miss the relationship between the <code>&lt;main&gt;</code> and <code>&lt;aside&gt;</code> elements, which is a big deal since the size of one influences the size of the other according to normal document flow.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/gOJapPo\">Responsive Cards Using Media Queries Inside Container [forked]</a> by <a href=\"https://codepen.io/monknow\">Monknow</a>.</p>\n<p>The <code>.cards</code> element is in the context of the <code>&lt;aside&gt;</code> element and is squished as a result of being in a narrow column. What would be great is to change the layout of each <code>.card</code> component when the <code>.cards</code> element that contains them reaches a certain size rather than when the viewport is a certain size.</p>\n<p>That’s where <strong>container queries</strong> come into play, allowing us to conditionally apply styles based on an element’s size. We register an element as a “container,” which, in our current example, is the unordered list containing the series of <code>.card</code> components. We’re essentially giving the parent selector a great deal of power to influence the current layout.</p>\n<pre><code>.cards {\n  container-name: cards;\n}\n</code></pre>\n\n<p>Container queries monitor an element by its size, and we need to tell the browser exactly how to interpret that size by giving <code>.cards</code> a <code>container-type</code>, which can be the container’s <code>size</code> (i.e., in the block and inline directions) or its <code>inline-size</code> (i.e., the total length in the inline direction). There’s a <code>normal</code> value that removes sizing considerations but allows the element to be queried by its styles.</p>\n<pre><code>.cards {\n  container-name: cards;\n  container-type: inline-size;\n}\n</code></pre>\n\n<p>We can simplify things down a bit using the <code>container</code> shorthand property.</p>\n<pre><code>.cards {\n  container: cards / inline-size;\n}\n</code></pre>\n\n<p>Now, we can adjust the layout of the <code>.card</code> components when the <code>.cards</code> container is a certain inline size. Container queries use the same syntax as media queries but use the <code>@container</code> at-rule instead of <code>@media</code>.</p>\n<pre><code>.cards {\n  container: cards / inline-size;\n}\n\n@container cards (width &lt; 700px) {\n  .cards li {\n    flex-flow: column;\n  }\n}\n</code></pre>\n\n<p>Now, each <code>.card</code> is a flexible container that flows in the <code>column</code> direction when the width of the <code>.cards</code> container is less than <code>700px</code>. Any wider than that, we have the same to lay them out in a <code>row</code> direction instead.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/VwOvLap\">Responsive Cards Using Container Queries [forked]</a> by <a href=\"https://codepen.io/monknow\">Monknow</a>.</p>\n<p><strong>Style queries</strong> are a cousin to container queries in the sense that we can query the container’s styles and conditionally apply style changes to its children, say changing a child element’s <code>color</code> to white when the container’s <code>background-color</code> is set to a dark color. We’re still in the early days, and support for style queries and <a href=\"https://caniuse.com/css-container-queries-style\">browser support is still evolving</a>.</p>\n<p>I hope this gives you a sense of how amazing it is that we have this <strong>context-aware way of establishing responsive layouts</strong>. Containers are a completely new idea in CSS (although we’ve used the term synonymously with “parent element” for ages) that is novel and elegant.</p>\nSo, Are Media Queries Useless?\n<p><em>NO!</em> While media queries have been the go-to solution for responsive design, their limitations are glaringly obvious now that we have more robust tools in CSS that are designed to solve those limits.</p>\n<p>That doesn’t make media queries obsolete — merely a different tool that’s part of a larger toolset for building responsive interfaces. Besides, media queries still address vital accessibility concerns thanks to their ability to recognize a user’s visual and motion preferences — among other settings — at the operating system level.</p>\n<p>So, yes, <em>keep using media queries!</em> But maybe reach for them sparingly since CSS has a lot more to offer us.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"f1eb5b094ea8f05f4a37364ceb65b8b49047e72a2ffe9a5bf57247101c4a79cb","category":"Tech"}