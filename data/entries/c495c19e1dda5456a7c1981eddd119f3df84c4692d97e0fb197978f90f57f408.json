{"title":"การใช้งาน EventPublisher ใน Spring Boot app","link":"https://www.somkiat.cc/note-event-publisher-spring-boot-app/","date":1689585689000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/07/spring-boot-event-150x150.png\" alt loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/07/spring-boot-event-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2023/07/spring-boot-event-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/07/spring-boot-event.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/07/spring-boot-event.png\" alt width=\"586\" height=\"324\" /></a></figure>\n\n\n\n<p><strong>คำถาม ในการพัฒนาระบบงานด้วย Spring Boot</strong></p>\n\n\n\n<p>ถ้าเราต้องการแยกการทำงานต่าง ๆ ใน process เดียวกัน<br />โดยไม่ต้องการ messaging server เป็นตัวกลาง<br />จะต้องทำอย่างไรบ้าง</p>\n\n\n\n<span></span>\n\n\n\n<p>คำตอบง่าย ๆ คือ <br />หนึ่งในวิธีการที่ใช้งานคือ EventPublisher ใน Spring framework ได้เลย</p>\n\n\n\n<p><strong>โดยขั้นตอนการใช้งาน จะมี 3 ขั้นตอนดังนี้</strong></p>\n\n\n\n<p><strong>ขั้นตอนที่ 1</strong> ทำการสร้าง class EventPublisher เอาไว้ส่งหรือสร้าง event</p>\n\n\n\n[gist id=\"6d6a807104c4208a635da12b43ecce26\" file=\"EventPublisher.java\"]\n\n\n\n<p><strong>ขั้นตอนที่ 2</strong> ทำการส่ง message/event </p>\n\n\n\n[gist id=\"6d6a807104c4208a635da12b43ecce26\" file=\"MyService.java\"]\n\n\n\n<p><strong>ขั้นตอนที่ 3</strong> ทำการรับ event ที่ส่งมาผ่าน EventListener</p>\n\n\n\n[gist id=\"6d6a807104c4208a635da12b43ecce26\" file=\"EventService.java\"]\n\n\n\n<p>เพียงเท่านี้ก็สามารถใช้งานได้แล้ว</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"c495c19e1dda5456a7c1981eddd119f3df84c4692d97e0fb197978f90f57f408","category":"Thai"}