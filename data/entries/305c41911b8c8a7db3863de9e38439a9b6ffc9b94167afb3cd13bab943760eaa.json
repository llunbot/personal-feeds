{"title":"AWS Fargate Enables Faster Container Startup using Seekable OCI","link":"https://aws.amazon.com/blogs/aws/aws-fargate-enables-faster-container-startup-using-seekable-oci/","date":1689622154000,"content":"<p>While developing with containers is becoming an increasingly popular way for deploying and scaling applications, there are still areas where improvements can be made. One of the main issues with scaling containerized applications is the long startup time, especially during scale up when newer instances need to be added. This issue can have a negative impact on the customer experience, for example when a website needs to scale out to serve additional traffic.</p> \n<p>A <a href=\"https://www.usenix.org/conference/fast16/technical-sessions/presentation/harter\">research paper</a> shows that container image downloads account for 76 percent of container startup time, but on average only 6.4 percent of the data is needed for the container to start doing useful work. Starting and scaling out containerized applications requires downloading container images from a remote container registry. This may introduce a non-trivial latency, as the entire image must be downloaded and unpacked before the applications can be started.</p> \n<p>One solution to this problem is lazy loading (also known as asynchronous loading) container images. This approach downloads data from the container registry in parallel with the application startup, such as <a href=\"https://github.com/containerd/stargz-snapshotter\">stargz-snapshotter</a>, a project that aims to improve the overall container start time.</p> \n<p>Last year, we <a href=\"https://aws.amazon.com/about-aws/whats-new/2022/09/introducing-seekable-oci-lazy-loading-container-images/\">introduced Seekable OCI (SOCI)</a>, a technology open sourced by Amazon Web Services (AWS) that enables container runtimes to implement lazy loading the container image to start applications faster without modifying the container images. As part of that effort, we open sourced <a href=\"https://github.com/awslabs/soci-snapshotter/tree/main\">SOCI Snapshotter</a>, a snapshotter plugin that enables lazy loading with SOCI in containerd.</p> \n<p><span><strong>AWS Fargate Support for SOCI</strong></span><br /> Today, I’m excited to share that AWS Fargate now supports Seekable OCI (SOCI), which helps applications deploy and scale out faster by enabling containers to start without waiting to download the entire container image. At launch, this new capability is available for <a href=\"https://aws.amazon.com/ecs/\">Amazon Elastic Container Service (Amazon ECS)</a> applications running on <a href=\"https://aws.amazon.com/fargate/\">AWS Fargate</a>.</p> \n<p>Here’s a quick look to show how AWS Fargate support for SOCI works:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/14/soci-quicklook-rev.gif\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/14/soci-quicklook-rev.gif\" alt width=\"920\" height=\"517\" /></a></p> \n<p>SOCI works by creating an index (SOCI index) of the files within an existing container image. This index is a key enabler to launching containers faster, providing the capability to extract an individual file from a container image without having to download the entire image. Your applications no longer need to wait to complete pulling and unpacking a container image before your applications start running. This allows you to deploy and scale out applications more quickly and reduce the rollout time for application updates.</p> \n<p>A SOCI index is generated and stored separately from the container images. This means that your container images don’t need to be converted to use SOCI, therefore not breaking secure hash algorithm (SHA)-based security, such as container image signing. The index is then stored in the registry alongside the container image. At release, AWS Fargate support for SOCI works with <a href=\"https://aws.amazon.com/ecr/\">Amazon Elastic Container Registry (Amazon ECR)</a>.</p> \n<p>When you use Amazon ECS with AWS Fargate to run your SOCI-indexed containerized images, AWS Fargate automatically detects if a SOCI index for the image exists and starts the container without waiting for the entire image to be pulled. This also means that AWS Fargate will still continue to run container images that don’t have SOCI indexes.</p> \n<p><span><strong>Let’s Get Started</strong></span><br /> There are two ways to create SOCI indexes for container images.</p> \n<ul> \n <li><strong>Use AWS SOCI Index Builder</strong> – <a href=\"https://aws-ia.github.io/cfn-ecr-aws-soci-index-builder/\">AWS SOCI Index Builder</a> is a serverless solution for indexing container images in the AWS Cloud. This <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> stack deploys an <a href=\"https://aws.amazon.com/eventbridge\">Amazon EventBridge</a> rule to identify Amazon ECR action events and invoke an <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> function to match the defined filter. Then, another <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> function generates and pushes SOCI indexes to repositories in the Amazon ECR registry.</li> \n <li><strong>Create SOCI indexes manually</strong> – This approach provides more flexibility on in how the SOCI indexes are created, including for existing container images in Amazon ECR repositories. To create SOCI indexes, you can use the <code>soci</code> CLI provided by the <a href=\"https://github.com/awslabs/soci-snapshotter/tree/main\">soci-snapshotter</a> project.</li> \n</ul> \n<p>The <a href=\"https://aws-ia.github.io/cfn-ecr-aws-soci-index-builder/\">AWS SOCI Index Builder</a> provides you with an automated process to get started and build SOCI indexes for your container images. The <code>soci</code>CLI provides you with more flexibility around index generation and the ability to natively integrate index generation in your CI/CD pipelines.</p> \n<p>In this article, I manually generate SOCI indexes using the <code>soci</code> CLI from the <code>soci-snapshotter</code> project.</p> \n<p><strong>Create a Repository and Push Container Images<br /> </strong>First, I create an Amazon ECR repository called <code>pytorch-soci</code>for my container image using AWS CLI.</p> \n<pre><code>$ aws ecr create-repository --region us-east-1 --repository-name pytorch-soci</code></pre> \n<p>I keep the Amazon ECR URI output and define it as a variable to make it easier for me to refer to the repository in the next step.</p> \n<pre><code>$ ECRSOCIURI=xyz.dkr.ecr.us-east-1.amazonaws.com/pytorch-soci:latest</code></pre> \n<p>For the sample application, I use a <a href=\"https://docs.aws.amazon.com/deep-learning-containers/latest/devguide/deep-learning-containers-ecs-tutorials-training.html#deep-learning-containers-ecs-tutorials-training-pytorch\">PyTorch training (CPU-based)</a> container image from <a href=\"https://aws.amazon.com/machine-learning/containers/\">AWS Deep Learning Containers</a>. I use the <a href=\"https://github.com/containerd/nerdctl\"><code>nerdctl</code></a> CLI to pull the container image because, by default, the Docker Engine stores the container image in the Docker Engine image store, not the containerd image store.</p> \n<pre><code>$ SAMPLE_IMAGE=\"763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-training:1.5.1-cpu-py36-ubuntu16.04\" \n$ aws ecr get-login-password --region us-east-1 | sudo nerdctl login --username AWS --password-stdin xyz.dkr.ecr.ap-southeast-1.amazonaws.com\n$ sudo nerdctl pull --platform linux/amd64 $SAMPLE_IMAGE</code></pre> \n<p>Then, I tag the container image for the repository that I created in the previous step.</p> \n<pre><code>$ sudo nerdctl tag $SAMPLE_IMAGE $ECRSOCIURI</code></pre> \n<p>Next, I need to push the container image into the ECR repository.</p> \n<pre><code>$ sudo nerdctl push $ECRSOCIURI</code></pre> \n<p>At this point, my container image is already in my Amazon ECR repository.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/08/soci-13-repo.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/08/soci-13-repo-1024x529.png\" alt width=\"1024\" height=\"529\" /></a></p> \n<p><strong>Create SOCI Indexes<br /> </strong>Next, I need to create SOCI index.</p> \n<p>A SOCI index is an artifact that enables lazy loading of container images. A SOCI index consists of 1) a SOCI index manifest and 2) a set of zTOCs. The following image illustrates the components in a SOCI index manifest, and how it refers to a container image manifest.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/13/soci-index.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/13/soci-index.png\" alt width=\"743\" height=\"657\" /></a></p> \n<p>The SOCI index manifest contains the list of zTOCs and a reference to the image for which the manifest was generated. A zTOC, or table of contents for compressed data, consists of two parts:</p> \n<ol> \n <li>TOC, a table of contents containing file metadata and the corresponding offset in the decompressed TAR archive.</li> \n <li>zInfo, a collection of checkpoints representing the state of the compression engine at various points in the layer.</li> \n</ol> \n<p>To learn more about the concept and term, please visit <code>soci-snapshotter</code> <a href=\"https://github.com/awslabs/soci-snapshotter/blob/main/docs/glossary.md\">Terminology</a> page.</p> \n<p>Before I can create SOCI indexes, I need to install the <code>soci</code>CLI. To learn more about how to install the <code>soci</code>, visit <a href=\"https://github.com/awslabs/soci-snapshotter/blob/main/docs/getting-started.md\">Getting Started with soci-snapshotter</a>.</p> \n<p>To create SOCI indexes, I use the <code>soci create</code> command.</p> \n<pre><code>$ sudo soci create $ECRSOCIURI\nlayer sha256:4c6ec688ebe374ea7d89ce967576d221a177ebd2c02ca9f053197f954102e30b -&gt; ztoc skipped\nlayer sha256:ab09082b308205f9bf973c4b887132374f34ec64b923deef7e2f7ea1a34c1dad -&gt; ztoc skipped\nlayer sha256:cd413555f0d1643e96fe0d4da7f5ed5e8dc9c6004b0731a0a810acab381d8c61 -&gt; ztoc skipped\nlayer sha256:eee85b8a173b8fde0e319d42ae4adb7990ed2a0ce97ca5563cf85f529879a301 -&gt; ztoc skipped\nlayer sha256:3a1b659108d7aaa52a58355c7f5704fcd6ab1b348ec9b61da925f3c3affa7efc -&gt; ztoc skipped\nlayer sha256:d8f520dcac6d926130409c7b3a8f77aea639642ba1347359aaf81a8b43ce1f99 -&gt; ztoc skipped\nlayer sha256:d75d26599d366ecd2aa1bfa72926948ce821815f89604b6a0a49cfca100570a0 -&gt; ztoc skipped\nlayer sha256:a429d26ed72a85a6588f4b2af0049ae75761dac1bb8ba8017b8830878fb51124 -&gt; ztoc skipped\nlayer sha256:5bebf55933a382e053394e285accaecb1dec9e215a5c7da0b9962a2d09a579bc -&gt; ztoc skipped\nlayer sha256:5dfa26c6b9c9d1ccbcb1eaa65befa376805d9324174ac580ca76fdedc3575f54 -&gt; ztoc skipped\nlayer sha256:0ba7bf18aa406cb7dc372ac732de222b04d1c824ff1705d8900831c3d1361ff5 -&gt; ztoc skipped\nlayer sha256:4007a89234b4f56c03e6831dc220550d2e5fba935d9f5f5bcea64857ac4f4888 -&gt; ztoc sha256:0b4d78c856b7e9e3d507ac6ba64e2e2468997639608ef43c088637f379bb47e4\nlayer sha256:089632f60d8cfe243c5bc355a77401c9a8d2f415d730f00f6f91d44bb96c251b -&gt; ztoc sha256:f6a16d3d07326fe3bddbdb1aab5fbd4e924ec357b4292a6933158cc7cc33605b\nlayer sha256:f18dd99041c3095ade3d5013a61a00eeab8b878ba9be8545c2eabfbca3f3a7f3 -&gt; ztoc sha256:95d7966c964dabb54cb110a1a8373d7b88cfc479336d473f6ba0f275afa629dd\nlayer sha256:69e1edcfbd217582677d4636de8be2a25a24775469d677664c8714ed64f557c3 -&gt; ztoc sha256:ac0e18bd39d398917942c4b87ac75b90240df1e5cb13999869158877b400b865\n</code></pre> \n<p>From the above output, I can see that <code>soci</code>CLI created zTOCs for four layers, which and this means only these four layers will be lazily pulled and the other container image layers will be downloaded in full before the container image starts. This is because there is less of a launch time impact in lazy loading very small container image layers. However, you can configure this behavior using the <code>--min-layer-size</code> flag when you run <code>soci create</code>.</p> \n<p><strong>Verify and Push SOCI Indexes<br /> </strong>The <code>soci</code> CLI also provides several commands that can help you to review the SOCI Indexes that have been generated.<strong><br /> </strong></p> \n<p>To see a list of all index manifests, I can run the following command.</p> \n<pre><code>$ sudo soci index list\n\nDIGEST                                                                     SIZE    IMAGE REF                                                                                   PLATFORM       MEDIA TYPE                                    CREATED\nsha256:ea5c3489622d4e97d4ad5e300c8482c3d30b2be44a12c68779776014b15c5822    1931    xyz.dkr.ecr.us-east-1.amazonaws.com/pytorch-soci:latest                                     linux/amd64    application/vnd.oci.image.manifest.v1+json    10m4s ago\nsha256:ea5c3489622d4e97d4ad5e300c8482c3d30b2be44a12c68779776014b15c5822    1931    763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-training:1.5.1-cpu-py36-ubuntu16.04    linux/amd64    application/vnd.oci.image.manifest.v1+json    10m4s ago\n</code></pre> \n<p>While optional, if I need to see the list of zTOC, I can use the following command.</p> \n<pre><code>$ sudo soci ztoc list\nDIGEST                                                                     SIZE        LAYER DIGEST\nsha256:0b4d78c856b7e9e3d507ac6ba64e2e2468997639608ef43c088637f379bb47e4    2038072     sha256:4007a89234b4f56c03e6831dc220550d2e5fba935d9f5f5bcea64857ac4f4888\nsha256:95d7966c964dabb54cb110a1a8373d7b88cfc479336d473f6ba0f275afa629dd    11442416    sha256:f18dd99041c3095ade3d5013a61a00eeab8b878ba9be8545c2eabfbca3f3a7f3\nsha256:ac0e18bd39d398917942c4b87ac75b90240df1e5cb13999869158877b400b865    36277264    sha256:69e1edcfbd217582677d4636de8be2a25a24775469d677664c8714ed64f557c3\nsha256:f6a16d3d07326fe3bddbdb1aab5fbd4e924ec357b4292a6933158cc7cc33605b    10152696    sha256:089632f60d8cfe243c5bc355a77401c9a8d2f415d730f00f6f91d44bb96c251b\n</code></pre> \n<p>This series of zTOCs contains all of the information that SOCI needs to find a given file in a layer. To review the zTOC for each layer, I can use one of the digest sums from the preceding output and use the following command.</p> \n<pre><code>$ sudo soci ztoc info sha256:0b4d78c856b7e9e3d507ac6ba64e2e2468997639608ef43c088637f379bb47e4\n{\n  \"version\": \"0.9\",\n  \"build_tool\": \"AWS SOCI CLI v0.1\",\n  \"size\": 2038072,\n  \"span_size\": 4194304,\n  \"num_spans\": 33,\n  \"num_files\": 5552,\n  \"num_multi_span_files\": 26,\n  \"files\": [\n    {\n      \"filename\": \"bin/\",\n      \"offset\": 512,\n      \"size\": 0,\n      \"type\": \"dir\",\n      \"start_span\": 0,\n      \"end_span\": 0\n    },\n    {\n      \"filename\": \"bin/bash\",\n      \"offset\": 1024,\n      \"size\": 1037528,\n      \"type\": \"reg\",\n      \"start_span\": 0,\n      \"end_span\": 0\n    }\n\n---Trimmed for brevity---\n</code></pre> \n<p>Now, I need to use the following command to push all SOCI-related artifacts into the Amazon ECR.</p> \n<pre><code>$ PASSWORD=$(aws ecr get-login-password --region us-east-1)\n$ sudo soci push --user AWS:$PASSWORD $ECRSOCIURI</code></pre> \n<p>If I go to my Amazon ECR repository, I can verify the index is created. Here, I can see that two additional objects are listed alongside my container image: a <strong>SOCI Index</strong> and an <strong>Image index</strong>. The image index allows AWS Fargate to look up SOCI indexes associated with my container image.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/08/soci-14-indexes-in-ecr.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/08/soci-14-indexes-in-ecr-1024x700.png\" alt width=\"1024\" height=\"700\" /></a></p> \n<p><strong>Understanding SOCI Performance<br /> </strong>The main objective of SOCI is to minimize the required time to start containerized applications. To measure the performance of AWS Fargate lazy loading container images using SOCI, I need to understand how long it takes for my container images to start with SOCI and without SOCI.</p> \n<p>To understand the duration needed for each container image to start, I can use metrics available from the <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html\"><code>DescribeTasks</code></a> API on Amazon ECS. The first metric is <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Task.html#ECS-Type-Task-createdAt\"><code>createdAt</code></a>, the timestamp for the time when the task was created and entered the <code>PENDING</code> state. The second metric is <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Task.html#ECS-Type-Task-startedAt\"><code>startedAt</code></a>, the time when the task transitioned from the <code>PENDING</code> state to the <code>RUNNING</code> state.</p> \n<p>For this, I have created another Amazon ECR repository using the same container image but without generating a SOCI index, called <code>pytorch-without-soci</code>. If I compare these container images, I have two additional objects in <code>pytorch-soci</code>(an image index and a SOCI index) that don’t exist in <code>pytorch-without-soci</code>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/08/soci-15-comparison.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/08/soci-15-comparison-1024x441.png\" alt width=\"1024\" height=\"441\" /></a></p> \n<p><strong>Deploy and Run Applications<br /> </strong>To run the applications, I have created an Amazon ECS cluster called <code>demo-pytorch-soci-cluster</code>, a VPC and the required ECS task execution role. If you’re new to Amazon ECS, you can follow <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/getting-started.html\">Getting started with Amazon ECS</a> to be more familiar with how to deploy and run your containerized applications.</p> \n<p>Now, let’s deploy and run both the container images with <code>FARGATE</code> as the launch type. I deﬁne five tasks for each <code>pytorch-soci</code>and <code>pytorch-without-soci</code>.</p> \n<pre><code>$ aws ecs \\ \n    --region us-east-1 \\ \n    run-task \\ \n    --count 5 \\ \n    --launch-type FARGATE \\ \n    --task-definition arn:aws:ecs:us-east-1:XYZ:task-definition/pytorch-soci \\ \n    --cluster socidemo \n\n$ aws ecs \\ \n    --region us-east-1 \\ \n    run-task \\ \n    --count 5 \\ \n    --launch-type FARGATE \\ \n    --task-definition arn:aws:ecs:us-east-1:XYZ:task-definition/pytorch-without-soci \\ \n    --cluster socidemo</code></pre> \n<p>After a few minutes, there are 10 running tasks on my ECS cluster.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/04/soci-6-rev-1.jpg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/04/soci-6-rev-1.jpg\" alt width=\"1000\" height=\"933\" /></a></p> \n<p>After verifying that all my tasks are running, I run the following script to get two metrics: <code>createdAt</code> and <code>startedAt</code>.</p> \n<pre><code>#!/bin/bash\nCLUSTER=&lt;CLUSTER_NAME&gt;\nTASKDEF=&lt;TASK_DEFINITION&gt;\nREGION=\"us-east-1\"\nTASKS=$(aws ecs list-tasks \\\n    --cluster $CLUSTER \\\n    --family $TASKDEF \\\n    --region $REGION \\\n    --query 'taskArns[*]' \\\n    --output text)\n\naws ecs describe-tasks \\\n    --tasks $TASKS \\\n    --region $REGION \\\n    --cluster $CLUSTER \\\n    --query \"tasks[] | reverse(sort_by(@, &amp;createdAt)) | [].[{startedAt: startedAt, createdAt: createdAt, taskArn: taskArn}]\" \\\n    --output table\n</code></pre> \n<p>Running the above command for the container image without SOCI indexes — <code>pytorch-without-soci</code>— produces following output:</p> \n<pre><code>-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                                                                                   DescribeTasks                                                                                   |\n+----------------------------------+-----------------------------------+------------------------------------------------------------------------------------------------------------+\n|             createdAt            |             startedAt             |                                                  taskArn                                                   |\n+----------------------------------+-----------------------------------+------------------------------------------------------------------------------------------------------------+\n|  2023-07-07T17:43:59.233000+00:00|  2023-07-07T17:46:09.856000+00:00 |  arn:aws:ecs:ap-southeast-1:xyz:task/demo-pytorch-soci-cluster/dcdf19b6e66444aeb3bc607a3114fae0   |\n|  2023-07-07T17:43:59.233000+00:00|  2023-07-07T17:46:09.459000+00:00 |  arn:aws:ecs:ap-southeast-1:xyz:task/demo-pytorch-soci-cluster/9178b75c98ee4c4e8d9c681ddb26f2ca   |\n|  2023-07-07T17:43:59.233000+00:00|  2023-07-07T17:46:21.645000+00:00 |  arn:aws:ecs:ap-southeast-1:xyz:task/demo-pytorch-soci-cluster/7da51e036c414cbab7690409ce08cc99   |\n|  2023-07-07T17:43:59.233000+00:00|  2023-07-07T17:46:00.606000+00:00 |  arn:aws:ecs:ap-southeast-1:xyz:task/demo-pytorch-soci-cluster/5ee8f48194874e6dbba75a5ef753cad2   |\n|  2023-07-07T17:43:59.233000+00:00|  2023-07-07T17:46:02.461000+00:00 |  arn:aws:ecs:ap-southeast-1:xyz:task/demo-pytorch-soci-cluster/58531a9e94ed44deb5377fa997caec36   |\n+----------------------------------+-----------------------------------+------------------------------------------------------------------------------------------------------------+\n</code></pre> \n<p>From the average aggregated delta time (between <code>startedAt</code> and <code>createdAt</code>) for each task, the <code>pytorch-without-soci</code> (without SOCI indexes) successfully ran after 129 seconds.</p> \n<p>Next, I’m running same command but for <code>pytorch-soci</code>which comes with SOCI indexes.</p> \n<pre><code>-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                                                                                   DescribeTasks                                                                                   |\n+----------------------------------+-----------------------------------+------------------------------------------------------------------------------------------------------------+\n|             createdAt            |             startedAt             |                                                  taskArn                                                   |\n+----------------------------------+-----------------------------------+------------------------------------------------------------------------------------------------------------+\n|  2023-07-07T17:43:53.318000+00:00|  2023-07-07T17:44:51.076000+00:00 |  arn:aws:ecs:ap-southeast-1:xyz:task/demo-pytorch-soci-cluster/c57d8cff6033494b97f6fd0e1b797b8f   |\n|  2023-07-07T17:43:53.318000+00:00|  2023-07-07T17:44:52.212000+00:00 |  arn:aws:ecs:ap-southeast-1:xyz:task/demo-pytorch-soci-cluster/6d168f9e99324a59bd6e28de36289456   |\n|  2023-07-07T17:43:53.318000+00:00|  2023-07-07T17:45:05.443000+00:00 |  arn:aws:ecs:ap-southeast-1:xyz:task/demo-pytorch-soci-cluster/4bdc43b4c1f84f8d9d40dbd1a41645da   |\n|  2023-07-07T17:43:53.318000+00:00|  2023-07-07T17:44:50.618000+00:00 |  arn:aws:ecs:ap-southeast-1:xyz:task/demo-pytorch-soci-cluster/43ea53ea84154d5aa90f8fdd7414c6df   |\n|  2023-07-07T17:43:53.318000+00:00|  2023-07-07T17:44:50.777000+00:00 |  arn:aws:ecs:ap-southeast-1:xyz:task/demo-pytorch-soci-cluster/0731bea30d42449e9006a5d8902756d5   |\n+----------------------------------+-----------------------------------+------------------------------------------------------------------------------------------------------------+</code></pre> \n<p>Here, I see my container image with SOCI-enabled — <code>pytorch-soci</code> — was started 60 seconds after being created.</p> \n<p>This means that running my sample application with SOCI indexes on AWS Fargate is approximately 50 percent faster compared to running without SOCI indexes.</p> \n<p>It’s recommended to benchmark the startup and scaling-out time of your application with and without SOCI. This helps you to have a better understanding of how your application behaves and if your applications benefit from AWS Fargate support for SOCI.</p> \n<p><span><strong>Customer Voices</strong></span><br /> During the private preview period, we heard lots of feedback from our customers about AWS Fargate support for SOCI. Here’s what our customers say:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/07/Autodesk_Logo@2x-2.9396df1d739f5a3b99ce8985231b0a48f7767c05-300x200.png\" alt width=\"300\" height=\"200\" /></p> \n<p><strong><a href=\"https://www.autodesk.com/\">Autodesk</a></strong> provides critical design, make, and operate software solutions across the architecture, engineering, construction, manufacturing, media, and entertainment industries. “SOCI has given us a 50% improvement in startup performance for our time-sensitive simulation workloads running on Amazon ECS with AWS Fargate. This allows our application to scale out faster, enabling us to quickly serve increased user demand and save on costs by reducing idle compute capacity. The AWS Partner Solution for creating the SOCI index is easy to configure and deploy.” – Boaz Brudner, Head of Innovyze SaaS Engineering, AI and Architecture, Autodesk.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/13/soci-flywire-logo-300x100.png\" alt width=\"300\" height=\"100\" /></p> \n<p><strong><a href=\"https://www.flywire.com/\">Flywire</a></strong> is a global payments enablement and software company, on a mission to deliver the world’s most important and complex payments. “We run multi-step deployment pipelines on Amazon ECS with AWS Fargate which can take several minutes to complete. With SOCI, the total pipeline duration is reduced by over 50% without making any changes to our applications, or the deployment process. This allowed us to drastically reduce the rollout time for our application updates. For some of our larger images of over 750MB, SOCI improved the task startup time by more than 60%.”, Samuel Burgos, Sr. Cloud Security Engineer, Flywire.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/07/13/soci-virtuoso-1-300x118.png\" alt width=\"300\" height=\"118\" /></p> \n<p><strong><a href=\"https://www.virtuoso.qa/\">Virtuoso</a></strong> is a leading software corporation that makes functional UI and end-to-end testing software. “SOCI has helped us reduce the lag between demand and availability of compute. We have very bursty workloads which our customers expect to start as fast as possible. SOCI helps our ECS tasks spin-up 40% faster, allowing us to quickly scale our application and reduce the pool of idle compute capacity, enabling us to deliver value more efficiently. Setting up SOCI was really easy. We opted to use the quick-start AWS Partner’s solution with which we could leave our build and deployment pipelines untouched.”, Mathew Hall, Head of Site Reliability Engineering, Virtuoso.</p> \n<p><span><strong>Things to Know<br /> </strong></span><strong>Availability</strong> — AWS Fargate support for SOCI is available in all AWS Regions where Amazon ECS, AWS Fargate, and Amazon ECR are available.</p> \n<p><strong>Pricing</strong> — AWS Fargate support for SOCI is available at no additional cost and you will only be charged for storing the SOCI indexes in Amazon ECR.</p> \n<p><strong>Get Started</strong> — Learn more about benefits and how to get started on the <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/userguide/container-considerations.html#fargate-tasks-soci-images\">AWS Fargate Support for SOCI</a> page.</p> \n<p>Happy building.<br /> — <a href=\"https://www.linkedin.com/in/donnieprakoso\">Donnie</a></p>","author":"Donnie Prakoso","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"305c41911b8c8a7db3863de9e38439a9b6ffc9b94167afb3cd13bab943760eaa","category":"Tech"}