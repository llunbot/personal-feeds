{"title":"สรุปการแบ่งปันเรื่อง การใช้งาน Postman","link":"https://www.somkiat.cc/sharing-postman-in-the-right-way-2024/","date":1711555364000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/03/postman-right-way-01-150x150.png\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/03/postman-right-way-01-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2024/03/postman-right-way-01-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/03/postman-right-way-01.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/03/postman-right-way-01.png\" width=\"528\" height=\"330\" /></a></figure>\n\n\n\n<p>วันนี้มีโอกาสไปแบ่งปันประสบการณ์การใช้งานโปรแกรม <strong><a href=\"https://www.postman.com/\" target=\"_blank\">Postman</a></strong><br />ใช้สำหรับการทดสอบระบบงานพวก REST API ผ่าน HTTP protocol<br />โดยใช้ชื่อว่า <strong>Postman in the Right Way ใน 1 วัน</strong><br />เป็นคำแนะนำสำหรับการใช้งานที่คิดว่า น่าจะมีประโยชน์<br />มาจากประสบการณ์ใช้งานที่พอมีมาบ้าง</p>\n\n\n\n<p><strong><em>มีเป้าหมายว่า เครื่องมือถูกสร้างมาเพื่อลดงาน มิใช่เพิ่มงาน !!</em></strong></p>\n\n\n\n<p>สิ่งที่แบ่งปันประกอบไปด้วยเรื่องต่าง ๆ ดังนี้</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เริ่มด้วยขั้นตอนการพัฒนาระบบ API เช่น REST API  เป็นดังนี้</strong></p>\n\n\n\n<ul>\n<li>ทำการออกแบบ API Specification ในรูปแบบของเอกสารต่าง ๆ เช่น spreadsheeet เป็นต้น</li>\n\n\n\n<li>ทำการประชุมเพื่ออธิบาย</li>\n\n\n\n<li>ทำการพัฒนา API</li>\n\n\n\n<li>ทำการ generate API document จากการพัฒนา เช่น <a href=\"https://swagger.io/\">Swagger หรือ OpenAPI</a> ออกมา โดยเอกสารตัวนี้ใช้ทำอะไร ใครใช้บ้าง !!</li>\n\n\n\n<li>ทำการทดสอบ API ด้วยเครื่องมือต่าง ๆ เช่น Postman เป็นต้น </li>\n\n\n\n<li>มีการแนะนำ <a href=\"https://www.somkiat.cc/try-bruno-for-rest-api-testing/\" target=\"_blank\">Bruno</a> ให้ด้วย เผื่อจะสนใจ</li>\n</ul>\n\n\n\n<p><em><strong>คำถามที่น่าสนใจคือ มีเอกสารเรื่องเดียวกันกี่ชุด กี่ที่ กี่คนดูแล<br />เมื่อมีการแก้ไขในส่วนใดส่วนหนึ่งแล้ว<br />เอกสารทุก ๆ ตัวที่สร้างขึ้นมา ถูกแก้ไข หรือ เปลี่ยนแปลงตามไหม ?<br />ถ้าไม่ นั่นคือ มีปัญหาแน่นอน !!</strong></em></p>\n\n\n\n<p><strong>หนึ่งแนวทางในการแก้ไขปัญหา ที่แนะนำคือ ทำใน Postman กันไปเลย</strong></p>\n\n\n\n<p>มาดูขั้นตอนการใช้งาน Postman กันดู</p>\n\n\n\n<ul>\n<li>ทำการออกแบบใน Postman ไปเลย สร้าง workspace -&gt; collection -&gt; request ต่าง ๆ ไป</li>\n\n\n\n<li>ทำการสร้าง folder ในแต่ละ collection มากเกินไปไหม ?</li>\n\n\n\n<li>ในแต่ละ request ทำการสร้าง response แต่ละแบบด้วยการเพิ่ม example เข้ามา</li>\n\n\n\n<li>ในแต่ละ collection และ request สามารถเขียน API documentation ได้เลย ในรูปแบบ Markdown นั่นเอง</li>\n\n\n\n<li>ต่อมาในแต่ละ request สามารถเขียน test case ที่ต้องการตรวจสอบได้เลย</li>\n\n\n\n<li>อีกทั้งเมื่อทำการออกแบบเรียนร้อยแล้ว สามารถสร้าง Mock Server ขึ้นมาจาก collection ที่ทำการออกแบบได้เลย</li>\n\n\n\n<li>ดังนั้น เราจะได้ทั้ง API specification, API documentation, Test case และ Mock Server หลังการคุย หรือ ประชุมกันเรียบร้อย โดยที่ยังไม่ได้ทำการเขียน code ใด ๆ เลย</li>\n</ul>\n\n\n\n<p><strong>จากนั้นเราสามารถทำการ convert จาก Postman's collection ไปยังเอกสารต่าง ๆ ได้อีกด้วย</strong></p>\n\n\n\n<p>ยกตัวอย่างเช่น</p>\n\n\n\n<ul>\n<li>ไปเป็น Swagger หรือ OpenAPI ได้เลย มีคำแนะนำเกี่ยวกับ <a href=\"https://www.asyncapi.com/en\" target=\"_blank\">AsyncAPI</a> ด้วย</li>\n\n\n\n<li>ไปเป็น Apache JMeter และ K6 ได้เลย สำหรับการทำ performance testing ต่อไป</li>\n</ul>\n\n\n\n<p><strong>ต่อมาทำการแนะนำความสามารถต่าง ๆ ในการทดสอบด้วย Postman</strong></p>\n\n\n\n<p>ยกตัวอย่างเช่น</p>\n\n\n\n<ul>\n<li>การเขียน Test case ของแต่ละ request ซึ่งมีทั้ง snippet code และ PostBot ให้ใช้งาน</li>\n\n\n\n<li>ในการเขียน test case จะเน้นในเรื่องของการตรวจสอบ response ในรูปแบบ JSON ด้วย <a href=\"https://json-schema.org/\" target=\"_blank\">JSON Schema</a></li>\n\n\n\n<li>จากนั้นเราสามารถ generate data test จาก JSON Schema ได้อีกด้วย</li>\n\n\n\n<li>ต่อมาสิ่งที่แนะนำเพิ่มเติมคือการเขียน script ใน pre-request script ด้วย สำหรับช่วยในการ reuse การทำงานในการทดสอบ ที่มักจะเกิดจากการ duplicate request ขึ้นมา</li>\n\n\n\n<li>การใช้งาน environment ใน Postman ทั้ง Global, collection และ request นั้น ๆ</li>\n\n\n\n<li>การใช้งาน data ในการทดสอบของ collection ด้วย CSV และ JSON</li>\n\n\n\n<li>แนะนำ performance testing ใน Postman ที่เพิ่มเข้ามาอีกด้วย สามารถกำหนดรูปแบบของการสร้าง Virtual user ได้ 4 แบบคือ Fixed, Ramp up, Spike และ Peak</li>\n</ul>\n\n\n\n<p><strong>ทำการปรับเปลี่ยนจาก manual test มาเป็น automated test ด้วย <a href=\"https://www.npmjs.com/package/newman\" target=\"_blank\">newman</a></strong></p>\n\n\n\n<ul>\n<li>ทำการติดตั้ง</li>\n\n\n\n<li>ทำการ run ด้วย option ต่าง ๆ ทั้ง folder, environment และ report เป็นต้น</li>\n\n\n\n<li>การทำงานบน pipeline ของ CI/CD</li>\n</ul>\n\n\n\n<p></p>\n\n\n\n<p>จากการแบ่งปันครั้งนี้ น่าจะพอทำให้เห็นว่า<br />เครื่องมือที่ใช้งานนั้น ช่วยลดงาน หรือ เพิ่มงาน !!!<br />ไว้เจอกันในการแบ่งปันรอบหน้าครับ<br />ลองปรับไปใช้งาน หรือ แก้ไขปัญหากันดู</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"0c4a2d96895849e1281959453798ac9e33849c74d2ac122d037037fda39116d5","category":"Thai"}