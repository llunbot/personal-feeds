{"title":"A Few Interesting Ways To Use CSS Shadows For More Than Depth","link":"https://smashingmagazine.com/2023/08/interesting-ways-use-css-shadows/","date":1692802800000,"content":"<p>The world of post-modern web design is one where the light doesn’t cast many shadows. That doesn’t mean CSS shadows are going away. On the contrary, they’ve become more adaptive. Shadows are an incredibly useful design element. We know they add depth to an otherwise two-dimensional web design, but did you know we can stack, animate, and manipulate them in ways that go beyond that?</p>\n<p>I’ve been experimenting with shadows. In this article, I’m going to share several “tricks” I’ve discovered along the way and how they can be used to create interesting effects that have little to do with their primary role of adding depth. We’ll look at an effect that works by stacking layers of shadows that transition on hover. After that, I will show you how to make a shadow of a shadow. Lastly, we’ll play with shadows on text as an alternative to color.</p>\n<p>Ready for some fun? Let’s start with an interesting hover effect.</p>\nThe Introspective Shadow Hover Effect\n<p>Most of us are familiar with the <code>inset</code> keyword. It’s an optional value of the CSS <code>box-shadow</code> property.</p>\n<p><strong>When <code>inset</code> is specified, the shadow is cast inside the element, directed inward</strong>. It’s commonly used to make it look as if an element has been stamped into the surface of the web page. We are going to push that shadow further, both metaphorically and literally, to create an overlay hover effect for image transitions.</p>\n<p>Just as we can <strong>control the shadow’s blur radius</strong> — how far the shadow spreads outward — we can choose to apply no blur at all to the shadow. We can combine that with the fact that inset shadows are <strong>painted over an element’s background</strong> (unlike default shadows that are cast beneath the element) to create what I call a “veil” that sits on top of an element.</p>\n<p>Let’s start with a single <code>div</code> in the HTML:</p>\n<pre><code>&lt;div class=\"item\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>There’s nothing to see yet. So, let’s add some dimensions, a background color, and a border radius to make a green circle.</p>\n<pre><code>.item {\n  width: 250px;\n  height: 250px;\n  background: green;\n  border-radius: 50%;\n}\n</code></pre>\n\n<p>This is nothing fancy so far. I merely want to demonstrate that we can essentially cover the green background with a red inset <code>box-shadow</code>:</p>\n<pre><code>.item {\n  width: 250px;\n  height: 250px;\n  background: green;\n  border-radius: 50%;\n  box-shadow: inset 250px 250px 0 red;\n}\n</code></pre>\n\n<p>Now we have a red circle with a green background beneath it. We can remove the red inset shadow on hover to reveal the green background:</p>\n<pre><code>.item:hover {\n  box-shadow: none;\n}\n</code></pre>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/qBLdjKR\">Inward Shadow Pt. 1 [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>.  </p>\n<p>Since shadows can be layered and are supported by CSS transitions, let’s incorporate that for a more fluid design. First, I’m going to update the HTML a bit by adding a <code>span</code> inside the <code>.item</code>:</p>\n<pre><code>    &lt;div class=\"item\"&gt;\n      &lt;span&gt;The New York Times&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;!-- more items --&gt;\n</code></pre>\n\n<p>For the CSS, it’s the same idea as before. We want a circle with an inset shadow and a background:</p>\n<pre><code>.item {\n  width: 300px;\n  height: 300px;\n  background-image: url('nytimes.svg');\n  border-radius: 50%;\n  box-shadow: inset -300px -300px 0 black,\n}\n</code></pre>\n\n<p>The difference so far is that I am using a <code>background-image</code> instead of a <code>background-color</code>. They are absolutely interchangeable for the hover effect we’re working on.</p>\n<p>Next, I’m going to do two things. First, I’m going to stack more inset shadows inside the <code>.item</code>. Then I’m changing the text color to white, but only for a moment so the background image shows all the way through.</p>\n<pre><code>.item {\n  width: 300px;\n  height: 300px;\n  background-image: url('nytimes.svg');\n  border-radius: 50%;\n  box-shadow:\n    inset -300px -300px 0 black,\n    inset 300px -300px 0 green,\n    inset -300px 300px 0 blue,\n    inset 300px 300px 0 yellow,\n    0 0 20px silver; /* standard outset shadow */\n  color: white;\n  }\n</code></pre>\n\n<p>Even after we add those four extra shadows, we still are left with only a black circle that says “The New York Times” on it in white. The trick is to remove those shadows on hover, change the color of the text to <code>transparent</code>, and reveal the logo beneath our stack of inset shadows.</p>\n<pre><code>.item:hover {\n  box-shadow:\n    inset 0 0 0 transparent,\n    inset 0 0 0 transparent,\n    inset 0 0 0 transparent,\n    inset 0 0 0 transparent,\n    0 0 20px silver; /* retain the outset shadow */\n  color: transparent;\n}\n</code></pre>\n\n<p>That works! But perhaps we should add a little transition in there to smooth it out:</p>\n<pre><code>.item {\n  width: 300px;\n  height: 300px;\n  background-image: url('nytimes.svg');\n  border-radius: 50%;\n  box-shadow:\n    inset -300px -300px 0 black,\n    inset 300px -300px 0 green,\n    inset -300px 300px 0 blue,\n    inset 300px 300px 0 yellow,\n    0 0 20px silver; /* standard outset shadow */\n  color: white;\n  transition:\n    box-shadow ease-in-out .6s,\n    color ease-in-out .5s;\n  }\n\n.item:hover {\n  box-shadow:\n    inset 0 0 0 transparent,\n    inset 0 0 0 transparent,\n    inset 0 0 0 transparent,\n    inset 0 0 0 transparent,\n    0 0 20px silver; /* keeping the outset shadow */\n  color: transparent;\n}\n</code></pre>\n\n<p>The only other thing I think that’s worth calling out is that the outward shadow in the stack is not removed when the <code>.item</code> is hovered. I only want to remove the inset shadows.</p>\n<p>Here’s the <a href=\"https://codepen.io/rpsthecoder/pen/KKrMZjZ?editors=1100\">final result</a>:</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/abPOwRm\">Inward Shadow Pt. 2 [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>. </p>\n<p>I used CSS variables throughout so you can change the colors of the shadows and the size of the element.</p>\nCasting A Shadow Of A Shadow\n<p>If we learned anything from that last example, it’s that shadows are visually interesting: they can bend, fade, intersect, and transition. But what about a shadow casting another shadow? Can we create a <strong>shadow of an element’s shadow</strong>?</p>\n<p>This is not the same as stacking layers of shadows as we did earlier. Rather, we will be making a <strong>silhouette of a shadow</strong>. And because we have a second way to add shadows to elements with the CSS <code>drop-shadow()</code> filter, we can do exactly that.</p>\n<p><a href=\"https://css-tricks.com/breaking-css-box-shadow-vs-drop-shadow/\">A <code>drop-shadow()</code> is a little different</a> than a <code>box-shadow</code>. Where a <code>box-shadow</code> casts a shadow along the physical edges of the element’s bounding box, a <code>drop-shadow()</code> ignores the box and casts a shadow along the element’s shape.</p>\n<p>When <code>drop-shadow()</code> is given to an element with a <code>box-shadow</code>, the shadow from the <code>box-shadow</code>  will cast a shadow of its own. We can combine these to make interesting effects, like a Venn diagram shape.</p>\n<pre><code>.item {\n  box-shadow: 0 0 20px black ;\n  filter: drop-shadow(-30px 0 0 blue);\n}\n</code></pre>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/ZEVGymY\">Shadow of a Shadow Pt. 1 [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>. </p>\n<p>This simple combination of box and drop shadows can lead to interesting designs, like shadows that cast shadows. Let’s start with some HTML that includes the same <code>.item</code> element we used in the last section. This time, we’ll place two child elements inside it, another <code>div</code> and an <code>img</code>:</p>\n<pre><code>&lt;div class=\"item\"&gt;\n  &lt;div class=\"background\"&gt;&lt;/div&gt;\n  &lt;img src=\"image.jpeg\" /&gt;\n&lt;/div&gt;\n\n&lt;!-- more items --&gt;\n</code></pre>\n\n<p>The <code>.item</code> is merely serving as a container this time. The real work happens on the <code>.background</code> child element. The image is purely there for decoration. We’re going to set a <code>box-shadow</code> on the <code>.background</code> element, then add a stack of three <code>drop-shadow()</code> layers to it:</p>\n<pre><code>/* third circle in the following demo */\n.item &gt; .background {\n    box-shadow: 0 0 40px rgb(255 0 0 / .5);\n    filter:\n      drop-shadow(-20px 0 0 rgb(255 0 0 / .5))\n      drop-shadow(20px 0 0 rgb(255 0 0 / .5))\n      drop-shadow(20px 0 0 rgb(255 0 0 / .5));\n}\n</code></pre>\n\n<p>We can also use transitions with these effects (as in the middle circle below).</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/VwqLWqM\">Shadow of a Shadow Pt. 2 [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>. </p>\nThe Textual Shadow\n<p>The last effect we’re going to look at involves the CSS <code>text-shadow</code> property. It’s actually less of a complicated “trick” than it is a demonstration of using and showing just the shadow of a text element for color purposes.</p>\n<p>Specifically, I’m talking about transparent text with a shadow on it:</p>\n<pre><code>/* second column in the below demo */\np {\n  color: transparent;\n  text-shadow: 1px 1px 0 black;\n}\n</code></pre>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/yLGNXZB\">Textual Shadow Pt. 2 [forked]</a> by <a href=\"https://codepen.io/rpsthecoder\">Preethi Sam</a>. </p>\n<p>Notice the emoji? Instead of the full-color deal, we normally get, this emoji is more like an icon filled with a solid color. This is one way to make a quick and dirty icon system without drawing them or working with files.</p>\n<p>We could have also pulled this off with <code>background-clip: text</code> to clip around the shape of the emoji or apply a <code>drop-shadow()</code>. However, that affects the background, limiting where it can be used. Plus, I like the idea of using <code>text-shadow</code> with text elements since that’s what it’s used for, and emoji are part of the text.</p>\n<p>You might think there’s a “gotcha” with underlines. For example, <code>text-shadow</code> ignores the text decoration of links.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/YzdXQBY\">Text Shadow No Likey Link Underlines [forked]</a> by <a href=\"https://codepen.io/geoffgraham\">Geoff Graham</a>.</p>\n<p>No big deal. If you need to support underlines, we can reach for the CSS <code>text-decoration</code> and <code>text-underline-offset</code> properties:</p>\n<pre><code>p {\n  color: transparent;\n  text-shadow: 1px 1px 0 black;\n  text-decoration-line: underline;\n  text-decoration color: black;\n  text-underline-offset: 3px;\n}\n</code></pre>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/abPOwMB\">Shadow-Only Link With Underline [forked]</a> by <a href=\"https://codepen.io/geoffgraham\">Geoff Graham</a>.</p>\nConclusion\n<p>That’s a look at three interesting ways to use CSS shadows as more than that thing you use to add depth. We looked at one way that uses inset shadows to hide the contents of an element’s background for a neat hover effect. Then there was the idea of combining <code>box-shadow</code> and <code>drop-shadow()</code> to cast a shadow of another shadow. We capped things off with a quick way to manipulate text and emoji with <code>text-shadow</code>.</p>\n<p>I hope these experiments give you the inspiration to do some CSS shadow experiments of your own. Shadows and gradients are perhaps the two most important CSS features for “drawing” with CSS, like many of the examples you’ll see on Lynn Fisher’s <a href=\"https://a.singlediv.com\">A Single Div project</a>. Shadows have incredible browser support, so the options are plentiful as far as what we can do with them.</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/05/lesser-known-underused-css-features-2022/\">Lesser-Known And Underused CSS Features In 2022</a>,” Adrian Bece</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/08/fluid-sizing-multiple-media-queries/\">Fluid Sizing Instead Of Multiple Media Queries?</a>,” Ruslan Yevych</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/03/css-generators/\">CSS Generators</a>,” Iris Lješnjanin</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/01/creating-high-contrast-design-system-css-custom-properties/\">Creating A High-Contrast Design System With CSS Custom Properties</a>,” Brecht De Ruyte</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"a26a25aa9201c2f94702d980a543dbdca9efd7bb806640344c0595d7d629b6ac","category":"Tech"}