{"title":"New Amazon S3 Tables: Storage optimized for analytics workloads","link":"https://aws.amazon.com/blogs/aws/new-amazon-s3-tables-storage-optimized-for-analytics-workloads/","date":1733244251000,"content":"<p><a href=\"https://aws.amazon.com/s3/features/tables/\">Amazon S3 Tables</a> give you storage that is optimized for tabular data such as daily purchase transactions, streaming sensor data, and ad impressions in Apache Iceberg format, for easy queries using popular query engines like <a href=\"https://aws.amazon.com/athena\">Amazon Athena</a>, <a href=\"https://aws.amazon.com/emr\">Amazon EMR</a>, and <a href=\"https://spark.apache.org/\">Apache Spark</a>. When compared to self-managed table storage, you can expect up to 3x faster query performance and up to 10x more transactions per second, along with the operational efficiency that is part-and-parcel when you use a fully managed service.</p> \n<p>Iceberg has become the most popular way to manage Parquet files, with thousands of AWS customers using Iceberg to query across often billions of files containing petabytes or even exabytes of data.</p> \n<p><span><strong>Table Buckets, Tables, and Namespaces</strong></span><br /> <img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/18/s3_table_bucket_ai_1.png\" width=\"450\" height=\"450\" />Table buckets are the third type of S3 bucket, taking their place alongside the existing <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingBucket.html#general-purpose-buckets-overview\">general purpose</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-overview.html\">directory buckets</a>. You can think of a table bucket as an analytics warehouse that can store Iceberg tables with various schemas. Additionally, S3 Tables deliver the same durability, availability, scalability, and performance characteristics as S3 itself, and automatically optimize your storage to maximize query performance and to minimize cost.</p> \n<p>Each table bucket resides in a specific AWS Region and has a name that must be unique within the AWS account with respect to the region. Buckets are referenced by ARN and also have a resource policy. Finally, each bucket uses namespaces to logically group the tables in the bucket.</p> \n<p>Tables are structured datasets stored in a table bucket. Like table buckets, they have ARNs and resource policies, and exist within one of the bucket’s namespaces. Tables are fully managed, with automatic, configurable continuous maintenance including compaction, management of aged snapshots, and removal of unreferenced files. Each table has an S3 API endpoint for storage operations.</p> \n<p>Namespaces can be referenced from access policies in order to simplify access management.</p> \n<p><span><strong>Buckets and Tables from the Command Line</strong></span><br /> Ok, let’s dive right in, create a bucket, and put a table or two inside. I’ll use the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a>, but <a href=\"https://console.aws.amazon.com\">AWS Management Console</a> and API support is also available. For conciseness, I will pipe the output of the more verbose commands through <a href=\"https://jqlang.github.io/jq/\"><code>jq</code></a> and show you only the most relevant values.</p> \n<p>The first step is to create a table bucket:</p> \n<div> \n <pre><code>$ aws s3tables create-table-bucket --name jbarr-table-bucket-2 | jq .arn\n\"arn:aws:s3tables:us-east-2:123456789012:bucket/jbarr-table-bucket-2\"</code></pre> \n</div> \n<p>For convenience, I create an environment variable with the ARN of the table bucket:</p> \n<div> \n <pre><code>$ export ARN=\"arn:aws:s3tables:us-east-2:123456789012:bucket/jbarr-table-bucket-2\"</code></pre> \n</div> \n<p>And then I list my table buckets:</p> \n<div> \n <pre><code>$ aws s3tables list-table-buckets | jq .tableBuckets[].arn\n\"arn:aws:s3tables:us-east-2:123456789012:bucket/jbarr-table-bucket-1\"\n\"arn:aws:s3tables:us-east-2:123456789012:bucket/jbarr-table-bucket-2\"</code></pre> \n</div> \n<p>I can access and populate the table in many different ways. For testing purposes I installed Apache Spark, then invoked the Spark shell with command-line arguments to use the <strong>Amazon S3 Tables Catalog for Apache Iceberg</strong> package and to set <code>mytablebucket</code> to the ARN of my table.</p> \n<p>I create a namespace (<code>mydata</code>) that I will use to group my tables:</p> \n<div> \n <pre><code>scala&gt; spark.sql(\"\"\"CREATE NAMESPACE IF NOT EXISTS mytablebucket.mydata\"\"\")</code></pre> \n</div> \n<p>Then I create a simple Iceberg table in the namespace:</p> \n<div> \n <pre><code>spark.sql(\"\"\"CREATE TABLE IF NOT EXISTS mytablebucket.mydata.table1\n (id INT,\n  name STRING,\n  value INT)\n  USING iceberg\n  \"\"\")</code></pre> \n</div> \n<p>I use some<code>s3tables</code> commands to check my work:</p> \n<div> \n <pre><code>$ aws s3tables list-namespaces --table-bucket-arn $ARN | jq .namespaces[].namespace[] \n\"mydata\"\n$\n$ aws s3tables list-tables --table-bucket-arn $ARN | jq .tables[].name\n\"table1\"</code></pre> \n</div> \n<p>Then I return to the Spark shell and add a few rows of data to my table:</p> \n<div> \n <pre><code>spark.sql(\"\"\"INSERT INTO mytablebucket.mydata.table1\n  VALUES\n  (1, 'Jeff', 100),\n  (2, 'Carmen', 200),\n  (3, 'Stephen', 300),\n  (4, 'Andy', 400),\n  (5, 'Tina', 500),\n  (6, 'Bianca', 600),\n  (7, 'Grace', 700)\n  \"\"\")</code></pre> \n</div> \n<p><span><strong>Buckets and Tables from the Console</strong></span><br /> I can also create and work on table buckets using the S3 Console. I click <strong>Table buckets</strong> to get started:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/18/tb_menu_1.png\" width=\"280\" height=\"385\" /></p> \n<p>Before creating my first bucket I click <strong>Enable integration</strong> so that I can access my table buckets from <a href=\"https://aws.amazon.com/athena\">Amazon Athena</a>, <a href=\"https://aws.amazon.com/redshift/\">Amazon Redshift</a>, <a href=\"https://aws.amazon.com/emr\">Amazon EMR</a>, and other AWS query engines (I can do this later if I don’t do it now):</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/18/tb_no_buckets_enable_1.png\" width=\"894\" height=\"411\" /></p> \n<p>I read the fine print and click <strong>Enable integration</strong> to create the specified IAM role and an entry in the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/catalog-and-crawler.html\">AWS Glue Data Catalog</a>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/18/tb_confirm_enable_int_1.png\" width=\"894\" height=\"435\" /></p> \n<p>After a few seconds the integration is enabled and I click <strong>Create table bucket</strong> to move ahead:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/18/tb_buckets_stop_here_1.png\" width=\"894\" height=\"524\" /></p> \n<p>I enter a name (<strong>jbarr-table-bucket-3</strong>) and click <strong>Create table bucket</strong>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/18/tb_bucket_make_me_1.png\" width=\"894\" height=\"531\" /></p> \n<p>From here I can create and use tables as I showed you earlier in the CLI section.</p> \n<p><span><strong>Table Maintenance</strong></span><br /> Table buckets take care of some important maintenance duties that would be your responsibility if you were creating and managing your own Iceberg tables. To relieve you of these duties so that you can spend more time on your table, the following maintenance operations are performed automatically:</p> \n<p><strong>Compaction</strong> – This process combines multiple small table objects into a larger object to improve query performance, in pursuit of a target file size that can be configured to be between 64 MiB and 512 MiB. The new object is rewritten as a new snapshot.</p> \n<p><strong>Snapshot Management</strong> – This process expires and ultimately removes table snapshots, with configuration options for the minimum number of snapshots to retain and the maximum age of a snapshot to retain. Expired snapshots are marked as non-current, then later deleted after a specified number of days.</p> \n<p><strong>Unreferenced File Removal</strong> – This process removes and deletes objects that are not referenced by any table snapshots.</p> \n<p><span><strong>Things to Know</strong></span><br /> Here are a couple of important things that you should know about table buckets and tables:</p> \n<p><strong>AWS Integration</strong> – S3 Tables integration with <a href=\"https://docs.aws.amazon.com/glue/latest/dg/catalog-and-crawler.html\">AWS Glue Data Catalog</a> is in preview, allowing you to query and visualize data using AWS Analytics services such as <a href=\"https://aws.amazon.com/athena\">Amazon Athena</a>, <a href=\"https://aws.amazon.com/redshift/\">Amazon Redshift</a>, <a href=\"https://aws.amazon.com/emr\">Amazon EMR</a>, and <a href=\"https://quicksight.aws\">Amazon QuickSight</a>.</p> \n<p><strong>S3 API Support</strong> – Table buckets support relevant S3 API functions including <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html\"><code>GetObject</code></a>, <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_HeadObject.html\"><code>HeadObject</code></a>, <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html\"><code>PutObject</code></a>, and the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/mpuoverview.html\">multi-part upload</a> operations.</p> \n<p><strong>Security</strong> – All objects stored in table buckets are automatically encrypted. Table buckets are configured to enforce <a href=\"https://aws.amazon.com/s3/features/block-public-access/\">Block Public Access</a>.</p> \n<p><strong>Pricing</strong> – You pay for storage, requests, an object monitoring fee, and and fees for compaction. See the <a href=\"https://aws.amazon.com/s3/pricing/\">S3 Pricing</a> page for more info.</p> \n<p><strong>Regions</strong> – You can use this new feature in the US East (Ohio, N. Virginia) and US West (Oregon) AWS Regions.</p> \n<p>— <a href=\"https://twitter.com/jeffbarr\">Jeff</a>;</p>","author":"Jeff Barr","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"d0e45a8c738e4d4be7b3378e97a8a46bd88fff513e8817cb44e7a92317c30f3c","category":"Tech"}