{"title":"Customize models in Amazon Bedrock with your own data using fine-tuning and continued pre-training","link":"https://aws.amazon.com/blogs/aws/customize-models-in-amazon-bedrock-with-your-own-data-using-fine-tuning-and-continued-pre-training/","date":1701190896000,"content":"<p>Today, I’m excited to share that you can now privately and securely customize foundation models (FMs) with your own data in <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a> to build applications that are specific to your domain, organization, and use case. With custom models, you can create unique user experiences that reflect your company’s style, voice, and services.</p> \n<p>With <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/fine-tuning.html\">fine-tuning</a>, you can increase model accuracy by providing your own task-specific labeled training dataset and further specialize your FMs. With <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/custom-models.html\">continued pre-training</a>, you can train models using your own unlabeled data in a secure and managed environment with customer managed keys. Continued pre-training helps models become more domain-specific by accumulating more robust knowledge and adaptability—beyond their original training.</p> \n<p>Let me give you a quick tour of both model customization options. You can create fine-tuning and continued pre-training jobs using the <a href=\"https://console.aws.amazon.com/bedrock/\">Amazon Bedrock console</a> or APIs. In the console, navigate to <strong>Amazon Bedrock</strong>, then select <strong>Custom models.</strong></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/28/2023-bedrock-custom-models-05.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/28/2023-bedrock-custom-models-05.png\" alt=\"Amazon Bedrock - Custom Models\" width=\"1190\" height=\"1178\" /></a></p> \n<p><strong><u>Fine-tune Meta Llama 2, Cohere Command Light, and Amazon Titan FMs<br /> </u></strong>Amazon Bedrock now supports fine-tuning for <a href=\"https://aws.amazon.com/bedrock/llama-2/\">Meta Llama 2</a>, <a href=\"https://aws.amazon.com/bedrock/cohere-command/\">Cohere Command Light</a>, as well as <a href=\"https://aws.amazon.com/bedrock/titan/\">Amazon Titan models</a>. To create a fine-tuning job in the console, choose<strong> Customize model</strong>, then choose <strong>Create Fine-tuning job</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/24/2023-bedrock-custom-models-04.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/24/2023-bedrock-custom-models-04.png\" alt=\"Amazon Bedrock - Custom Models\" width=\"1200\" height=\"668\" /></a></p> \n<p>Here’s a quick demo using the <a href=\"https://aws.amazon.com/sdk-for-python/\">AWS SDK for Python (Boto3)</a>. Let’s fine-tune Cohere Command Light to summarize dialogs. For demo purposes, I’m using the public <a href=\"https://huggingface.co/datasets/knkarthick/dialogsum\">dialogsum</a> dataset, but this could be your own company-specific data.</p> \n<p>To prepare for fine-tuning on Amazon Bedrock, I converted the dataset into <a href=\"https://jsonlines.org/\">JSON Lines</a> format and uploaded it to <a href=\"https://aws.amazon.com/s3/\">Amazon S3</a>. Each JSON line needs to have both a prompt and a completion field. You can specify up to 10,000 training data records, but you may already see model performance improvements with a few hundred examples.</p> \n<pre><code>{\"completion\": \"Mr. Smith's getting a check-up, and Doctor Haw...\", \"prompt\": Summarize the following conversation.\\n\\n#Pers...\"}\n{\"completion\": \"Mrs Parker takes Ricky for his vaccines. Dr. P...\", \"prompt\": \"Summarize the following conversation.\\n\\n#Pers...\"}\n{\"completion\": \"#Person1#'s looking for a set of keys and asks...\", \"prompt\": \"Summarize the following conversation.\\n\\n#Pers...\"} </code></pre> \n<p>I redacted the prompt and completion fields for brevity.</p> \n<p>You can list available foundation models that support fine-tuning with the following command:</p> \n<pre><code>import boto3 \nbedrock = boto3.client(service_name=\"bedrock\")\nbedrock_runtime = boto3.client(service_name=\"bedrock-runtime\")\n\nfor model in bedrock.list_foundation_models(\n    byCustomizationType=\"FINE_TUNING\")[\"modelSummaries\"]:\n    for key, value in model.items():\n        print(key, \":\", value)\n    print(\"-----\\n\")</code></pre> \n<p>Next, I create a model customization job. I specify the Cohere Command Light model ID that supports fine-tuning, set customization type to <code>FINE_TUNING</code>, and point to the Amazon S3 location of the training data. If needed, you can also adjust the hyperparameters for fine-tuning.</p> \n<pre><code># Select the foundation model you want to customize\nbase_model_id = \"cohere.command-light-text-v14:7:4k\"\n\nbedrock.create_model_customization_job(\n    customizationType=\"FINE_TUNING\",\n    jobName=job_name,\n    customModelName=model_name,\n    roleArn=role,\n    baseModelIdentifier=base_model_id,\n    hyperParameters = {\n        \"epochCount\": \"1\",\n        \"batchSize\": \"8\",\n        \"learningRate\": \"0.00001\",\n    },\n    trainingDataConfig={\"s3Uri\": \"s3://path/to/train-summarization.jsonl\"},\n    outputDataConfig={\"s3Uri\": \"s3://path/to/output\"},\n)\n\n# Check for the job status\nstatus = bedrock.get_model_customization_job(jobIdentifier=job_name)[\"status\"]\n</code></pre> \n<p>Once the job is complete, you receive a unique model ID for your custom model. Your fine-tuned model is stored securely by Amazon Bedrock. To test and deploy your model, you need to purchase <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/prov-throughput.html\">Provisioned Throughput</a>.</p> \n<p>Let’s see the results. I select one example from the dataset and ask the base model before fine-tuning, as well as the custom model after fine-tuning, to summarize the following dialog:</p> \n<pre><code>prompt = \"\"\"Summarize the following conversation.\\\\n\\\\n\n#Person1#: Hello. My name is John Sandals, and I've got a reservation.\\\\n\n#Person2#: May I see some identification, sir, please?\\\\n\n#Person1#: Sure. Here you are.\\\\n\n#Person2#: Thank you so much. Have you got a credit card, Mr. Sandals?\\\\n\n#Person1#: I sure do. How about American Express?\\\\n\n#Person2#: Unfortunately, at the present time we take only MasterCard or VISA.\\\\n\n#Person1#: No American Express? Okay, here's my VISA.\\\\n\n#Person2#: Thank you, sir. You'll be in room 507, nonsmoking, with a queen-size bed. Do you approve, sir?\\\\n\n#Person1#: Yeah, that'll be fine.\\\\n\n#Person2#: That's great. This is your key, sir. If you need anything at all, anytime, just dial zero.\\\\n\\\\n\nSummary: \"\"\"\n</code></pre> \n<p>Use the Amazon Bedrock InvokeModel API to query the models.</p> \n<pre><code>body = {\n    \"prompt\": prompt,\n    \"temperature\": 0.5,\n    \"p\": 0.9,\n    \"max_tokens\": 512,\n}\n\nresponse = bedrock_runtime.invoke_model(\n\t# Use on-demand inference model ID for response before fine-tuning\n    # modelId=\"cohere.command-light-text-v14\",\n\t# Use ARN of your deployed custom model for response after fine-tuning\n\tmodelId=provisioned_custom_model_arn,\n    modelId=base_model_id, \n    body=json.dumps(body)\n)\n</code></pre> \n<p>Here’s the base model response before fine-tuning:</p> \n<blockquote>\n <p>#Person2# helps John Sandals with his reservation. John gives his credit card information and #Person2# confirms that they take only MasterCard and VISA. John will be in room 507 and #Person2# will be his host if he needs anything.</p>\n</blockquote> \n<p>Here’s the response after fine-tuning, shorter and more to the point:</p> \n<blockquote>\n <p>John Sandals has a reservation and checks in at a hotel. #Person2# takes his credit card and gives him a key.</p>\n</blockquote> \n<p><strong><u>Continued pre-training for Amazon Titan Text (preview)<br /> </u></strong>Continued pre-training on Amazon Bedrock is available today in public preview for Amazon Titan Text models, including Titan Text Express and Titan Text Lite. To create a continued pre-training job in the console, choose <strong>Customize model</strong>, then choose <strong>Create Continued Pre-training job</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/20/2023-bedrock-custom-models-03.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/20/2023-bedrock-custom-models-03.png\" alt=\"Amazon Bedrock - Custom Models\" width=\"1243\" height=\"668\" /></a></p> \n<p>Here’s a quick demo again using boto3. Let’s assume you work at an investment company and want to continue pre-training the model with financial and analyst reports to make it more knowledgeable about financial industry terminology. For demo purposes, I selected a collection of Amazon shareholder letters as my training data.</p> \n<p>To prepare for continued pre-training, I converted the dataset into JSON Lines format again and uploaded it to Amazon S3. Because I’m working with unlabeled data, each JSON line only needs to have the prompt field. You can specify up to 100,000 training data records and usually see positive effects after providing at least 1 billion tokens.</p> \n<pre><code>{\"input\": \"Dear shareholders: As I sit down to...\"}\n{\"input\": \"Over the last several months, we to...\"}\n{\"input\": \"work came from optimizing the conne...\"}\n{\"input\": \"of the Amazon shopping experience f...\"}\n</code></pre> \n<p>I redacted the input fields for brevity.</p> \n<p>Then, create a model customization job with customization type <code>CONTINUED_PRE_TRAINING</code> that points to the data. If needed, you can also adjust the hyperparameters for continued pre-training.</p> \n<pre><code># Select the foundation model you want to customize\nbase_model_id = \"amazon.titan-text-express-v1\"\n\nbedrock.create_model_customization_job(\n    customizationType=\"CONTINUED_PRE_TRAINING\",\n    jobName=job_name,\n    customModelName=model_name,\n    roleArn=role,\n    baseModelIdentifier=base_model_id,\n    hyperParameters = {\n        \"epochCount\": \"10\",\n        \"batchSize\": \"8\",\n        \"learningRate\": \"0.00001\",\n    },\n    trainingDataConfig={\"s3Uri\": \"s3://path/to/train-continued-pretraining.jsonl\"},\n    outputDataConfig={\"s3Uri\": \"s3://path/to/output\"},\n)\n</code></pre> \n<p>Once the job is complete, you receive another unique model ID. Your customized model is securely stored again by Amazon Bedrock. As with fine-tuning, you need to purchase Provisioned Throughput to test and deploy your model.</p> \n<p><strong><u>Things to know</u></strong><br /> Here are a couple of important things to know:</p> \n<p><strong>Data privacy and network security – </strong>With Amazon Bedrock, you are in control of your data, and all your inputs and customizations remain private to your AWS account. Your data, such as prompts, completions, custom models, and data used for fine-tuning or continued pre-training, is not used for service improvement and is never shared with third-party model providers. Your data remains in the AWS Region where the API call is processed. All data is encrypted in transit and at rest. You can use <a href=\"https://aws.amazon.com/privatelink/\">AWS PrivateLink</a> to create a private connection between your VPC and Amazon Bedrock.</p> \n<p><strong>Billing – </strong>Amazon Bedrock charges for model customization, storage, and inference. Model customization is charged per tokens processed. This is the number of tokens in the training dataset multiplied by the number of training epochs. An epoch is one full pass through the training data during customization. Model storage is charged per month, per model. Inference is charged hourly per model unit using provisioned throughput. For detailed pricing information, see <a href=\"https://aws.amazon.com/bedrock/pricing\">Amazon Bedrock Pricing</a>.</p> \n<p><strong>Custom models and provisioned throughput</strong> – Amazon Bedrock allows you to run inference on custom models by purchasing provisioned throughput. This guarantees a consistent level of throughput in exchange for a term commitment. You specify the number of model units needed to meet your application’s performance needs. For evaluating custom models initially, you can purchase provisioned throughput hourly with no long-term commitment. With no commitment, a quota of one model unit is available per provisioned throughput. You can create up to two provisioned throughputs per account.</p> \n<p><b><u>Availability<br /> </u></b>Fine-tuning support on Meta Llama 2, Cohere Command Light, and Amazon Titan Text FMs is available today in AWS Regions US East (N. Virginia) and US West (Oregon). Continued pre-training is available today in public preview in AWS Regions US East (N. Virginia) and US West (Oregon). To learn more, visit the <a href=\"https://aws.amazon.com/bedrock/developer-experience/\">Amazon Bedrock Developer Experience</a> web page and check out the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/custom-models.html\">User Guide.</a></p> \n<p><a href=\"https://console.aws.amazon.com/bedrock/home\">Customize FMs with Amazon Bedrock today!</a></p> \n<p>— <a href=\"https://www.linkedin.com/in/antje-barth/\" target=\"_blank\">Antje</a></p>","author":"Antje Barth","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"8274bf1fa277a7c2142b2ae9cbf7d44b33075ac4f999618cd48fd1951c0a14bb","category":"Tech"}