{"title":"Terraform AWS Cloud Control API provider now generally available","link":"https://www.hashicorp.com/blog/terraform-aws-cloud-control-api-provider-now-generally-available","date":1717084800000,"content":"<p>The AWS Cloud Control (AWSCC) provider, built around the AWS Cloud Control API and designed to bring new services to HashiCorp Terraform faster, is now generally available. The 1.0 release of the AWSCC provider represents another step forward in our effort to offer launch day support of AWS services. Initially launched in 2021 as a <a href=\"https://www.hashicorp.com/blog/managing-resources-with-the-terraform-aws-cloud-control-provider\">tech preview</a>, the <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest\">Terraform AWS Cloud Control provider</a> is automatically generated based on the Cloud Control API published by AWS, which means the latest features and services on AWS can be supported right away. The AWSCC provider gives developers access with several new AWS services such as: <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest/docs/resources/billingconductor_pricing_rule\">AWS Billing Conductor</a>, <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest/docs/resources/chatbot_slack_channel_configuration\">AWS Chatbot</a>,<a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest/docs/resources/personalize_dataset\"> Amazon Personalize</a>, <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest/docs/resources/qbusiness_index\">Amazon Q Business</a>, and more.</p>\n\n<p>Terraform users managing infrastructure on Amazon Web Services can typically use this provider alongside the existing <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest\">AWS provider</a>. Given its ability to automatically support new features and services, this AWSCC provider will increase the resource coverage and significantly reduce the time it takes to support new capabilities. AWS and HashiCorp will continue to deliver high-quality, consistent releases to both the AWS and AWSCC providers.</p>\n\n<p>Important new features in the AWS Cloud Control provider include:</p>\n\n<ul>\n<li>Sample configurations</li>\n<li>Enhanced schema-level documentation </li>\n</ul>\n\n<p>Let’s run through what's new.</p>\n\n<h2>Introducing AWS Cloud Control API</h2>\n\n<p><a href=\"https://aws.amazon.com/cloudcontrolapi/\">AWS Cloud Control API</a> is a set of common APIs that make it easy for developers and partners to manage the lifecycle of AWS and third-party services. Cloud Control API provides five operations for developers to create, read, update, delete, and list (CRUDL) their cloud infrastructure resources. This unified set of API actions, as well as common input parameters and error types across AWS services, makes it possible for developers to immediately integrate their workflows with brand new AWS services. Any resource type published to the <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry.html\">CloudFormation Public Registry</a> exposes a standard JSON schema that can be acted upon by this interface.</p>\n\n<p>AWS Cloud Control API makes it easier to build solutions to integrate with new and existing AWS services, while HashiCorp’s foundational technologies solve the core challenges around infrastructure so that teams can focus on business-critical tasks. Integrating Terraform with AWS Cloud Control API means developers can use new AWS features and services as soon as they are available in Cloud Control API, typically on the day of launch.</p>\n\n<h2>AWS Cloud Control provider enhancements</h2>\n\n<p>During its technical preview, we’ve added several significant user experience enhancements to the AWSCC provider, including sample configurations and enhanced schema-level documentation. These documentation enhancements help practitioners use the provider more easily and efficiently, as they include full context about each of the attributes within the resource. The improved documentation will also reduce errors and the time required for practitioners to provision a resource, as all of the information about how to use the attribute is contained within the resource’s reference page in the Terraform Registry. These enhancements bring the AWSCC provider closer to the user experience of the standard AWS provider.</p>\n\n<h3>Sample configurations</h3>\n\n<p>While the AWSCC provider was in technical preview, the biggest feature request we received from customers was for sample configurations to use as a starting point when working with a new resource. Without a sample configuration, practitioners had to start with a completely blank slate to determine the required attributes for their use case and the values for each attribute.</p>\n\n<p>As a result of this feedback, over 270 resources (with more being added weekly) now have sample configurations. The sample configuration for a given resource shows the structure and expected values for each attribute. Customers can now start with the sample configuration, copy code, and begin building their resources. Here’s an example of a sample configuration to connect the <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest/docs/resources/supportapp_slack_channel_configuration\">AWS Support App to a Slack channel</a>:</p>\n<pre><code>resource \"aws_iam_role\" \"example\" {\n  name = \"AWSSupportSlackAppTFRole\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"supportapp.amazonaws.com\"\n        }\n        Action = \"sts:AssumeRole\"\n      }\n    ]\n  })\n\n  managed_policy_arns = [\n    \"arn:aws:iam::aws:policy/AWSSupportAppFullAccess\"\n  ]\n}\n\nresource \"awscc_supportapp_slack_channel_configuration\" \"example\" {\n  team_id                              = \"TXXXXXXXXX\"\n  channel_id                           = \"C0XXXXXXXX\"\n  channel_name                         = \"tftemplatechannel1\"\n  notify_on_create_or_reopen_case      = true\n  notify_on_add_correspondence_to_case = false\n  notify_on_resolve_case               = true\n  notify_on_case_severity              = \"high\"\n  channel_role_arn                     = aws_iam_role.example.arn\n}</code></pre><h3>Attribute-level documentation</h3>\n\n<p>More than 75 resources have now been enhanced with attribute-level documentation, and we expect to similarly enhance hundreds more resources in the coming months. For more information, see this <a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest/docs/resources/kms_key\">example of a resource with enhanced documentation</a>.</p>\n\n<p>Customers can now provision resources with this new provider as easily as with their existing implementation of the standard AWS provider. Here is an example of provisioning AWS Chatbot using the AWSCC provider:</p>\n<pre><code>resource \"awscc_chatbot_slack_channel_configuration\" \"example\" {\n  configuration_name = \"example-slack-channel-config\"\n  iam_role_arn       = awscc_iam_role.example.arn\n  slack_channel_id   = var.channel_id\n  slack_workspace_id = var.workspace_id\n}\n\nresource \"awscc_iam_role\" \"example\" {\n  role_name = \"ChatBot-Channel-Role\"\n  assume_role_policy_document = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Sid    = \"\"\n        Principal = {\n          Service = \"chatbot.amazonaws.com\"\n        }\n      },\n    ]\n  })\n  managed_policy_arns = [\"arn:aws:iam::aws:policy/AWSResourceExplorerReadOnlyAccess\"]\n}</code></pre><h2>Better together: Using both the AWS and AWSCC provider</h2>\n\n<p>The AWSCC provider is a great complementary provider to add to your existing Terraform configurations using the standard AWS provider. The AWS provider, which just celebrated its 10-year anniversary and has recorded more than 2.8 billion downloads, offers the best user experience and performance for over 1,300 resource types across nearly 200 services. The AWSCC provider builds on this by offering access to the latest AWS services generated from the Cloud Control API published by AWS. Using the AWSCC and AWS providers together equips developers with a large catalog of resources across established and new AWS services. </p>\n\n<p>Practitioners can easily add the AWSCC provider to their existing Terraform configurations alongside the standard AWS provider. Simply add the second provider block to the configuration to access the extensive catalog of resources available in the AWSCC provider. Below is an example of using both the AWSCC and AWS providers in tandem:</p>\n<pre><code>terraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 5.0\"\n    }\n\n    awscc = {\n      source  = \"hashicorp/awscc\"\n      version = \"~&gt; 1.0\"\n  }\n}\n\nprovider \"aws\" {\n  region = var.region\n}\n\nprovider \"awscc\" {\n  region = var.region\n}\n\n# Use the AWS provider to provision an S3 bucket\nresource \"aws_s3_bucket\" \"example\" {\n  bucket_prefix = \"example\"\n}\n\n# Use the AWSCC provider to provision an Amazon Personalize dataset\nresource \"awscc_personalize_dataset\" \"interactions\" {\n  ...\n\n  dataset_import_job = {\n    data_source = {\n      data_location = aws_s3_bucket.interactions_import.bucket\n    }\n  }\n}</code></pre><h2>AWS and HashiCorp</h2>\n\n<p>The Terraform AWS Cloud Control provider gives developers near-launch day support for new AWS services and features. It provides practitioners with an extensive catalog of resources as well as access to resources not available in the standard AWS provider.</p>\n\n<p>For more details about the general availability of the AWSCC provider, please review the documentation and tutorials:</p>\n\n<ul>\n<li><a href=\"https://registry.terraform.io/providers/hashicorp/awscc/latest/docs\">AWS Cloud Control Provider documentation</a></li>\n<li><a href=\"https://developer.hashicorp.com/terraform/tutorials/aws-get-started\">Getting started with Terraform on AWS</a> tutorial<a href=\"https://developer.hashicorp.com/terraform/tutorials/aws-get-started\"> </a></li>\n<li><a href=\"https://developer.hashicorp.com/terraform/tutorials/aws/aws-cloud-control\">Manage new AWS resources with the Cloud Control provider tutorial </a></li>\n</ul>\n\n<p>We are thankful to our partners and community members for their valuable contributions to the HashiCorp Terraform ecosystem.</p>\n","author":"Aurora Chun","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"9401930fdd930dfbbd4f8adaf3c94e2ba07de185042185daf90f755ed1ba3f75","category":"Tech"}