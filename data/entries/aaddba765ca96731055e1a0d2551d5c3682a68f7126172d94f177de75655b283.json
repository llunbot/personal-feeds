{"title":"Amazon Titan Image Generator v2 is now available in Amazon Bedrock","link":"https://aws.amazon.com/blogs/aws/amazon-titan-image-generator-v2-is-now-available-in-amazon-bedrock/","date":1722970988000,"content":"<p>Today, we are announcing the general availability of the <a href=\"https://aws.amazon.com/bedrock/titan/\">Amazon Titan Image Generator v2 model</a> with new capabilities in <a href=\"https://aws.amazon.com/bedrock\">Amazon Bedrock</a>. With Amazon Titan Image Generator v2, you can guide image creation using reference images, edit existing visuals, remove backgrounds, generate image variations, and securely customize the model to maintain brand style and subject consistency. This powerful tool streamlines workflows, boosts productivity, and brings creative visions to life.</p> \n<p>Amazon Titan Image Generator v2 brings a number of new features in addition to all features of Amazon Titan Image Generator v1, including:</p> \n<ul> \n <li><strong>Image conditioning</strong> – Provide a reference image along with a text prompt, resulting in outputs that follow the layout and structure of the user-supplied reference.</li> \n <li><strong>Image guidance with color palette</strong> – Control precisely the color palette of generated images by providing a list of hex codes along with the text prompt.</li> \n <li><strong>Background removal</strong> – Automatically remove background from images containing multiple objects.</li> \n <li><strong>Subject consistency</strong> – Fine-tune the model to preserve a specific subject (for example, a particular dog, shoe, or handbag) in the generated images.</li> \n</ul> \n<p><strong><u>New features in Amazon Titan Image Generator v2</u></strong><br /> Before getting started, if you are new to using Amazon Titan models, go to the <a href=\"https://console.aws.amazon.com/bedrock/\">Amazon Bedrock console</a> and choose <strong>Model access </strong>on the bottom left pane. To access the latest Amazon Titan models from <strong>Amazon</strong>, request access separately for <strong>Amazon Titan Image Generator G1 v2</strong>.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/01/2024-image-generator-v2-model-access.jpg\" width=\"2288\" height=\"1112\" /></p> \n<p>Here are details of the Amazon Titan Image Generator v2 in Amazon Bedrock:</p> \n<p><strong>Image conditioning</strong><br /> You can use the image conditioning feature to shape your creations with precision and intention. By providing a reference image (that is, a conditioning image), you can instruct the model to focus on specific visual characteristics, such as edges, object outlines, and structural elements, or segmentation maps that define distinct regions and objects within the reference image.</p> \n<p>We support two types of image conditioning: Canny edge and segmentation.</p> \n<ul> \n <li>The Canny edge algorithm is used to extract the prominent edges within the reference image, creating a map that the Amazon Titan Image Generator can then use to guide the generation process. You can “draw” the foundations of your desired image, and the model will then fill in the details, textures, and final aesthetic based on your guidance.</li> \n <li>Segmentation provides an even more granular level of control. By supplying the reference image, you can define specific areas or objects within the image and instruct the Amazon Titan Image Generator to generate content that aligns with those defined regions. You can precisely control the placement and rendering of characters, objects, and other key elements.</li> \n</ul> \n<p>Here are generation examples that use image conditioning.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/01/2024-image-generator-v2-1-color-conditioning.jpg\" width=\"1952\" height=\"1178\" /></p> \n<p>To use the image conditioning feature, you can use <a href=\"https://docs.aws.amazon.com/bedrock/latest/APIReference/welcome.html\">Amazon Bedrock API</a>, <a href=\"https://aws.amazon.com/sdk-for-python/\">AWS SDK</a>, or <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a> and choose <code>CANNY_EDGE</code> or <code>SEGMENTATION</code> for <code>controlMode</code> of <code>textToImageParams</code> with your reference image.<strong><br /> </strong></p> \n<pre><code>\t\"taskType\": \"TEXT_IMAGE\",\n\t\"textToImageParams\": {\n \t\t\"text\": \"a cartoon deer in a fairy world.\",\n        \"conditionImage\": input_image, # Optional\n        \"controlMode\": \"CANNY_EDGE\" # Optional: CANNY_EDGE | SEGMENTATION\n        \"controlStrength\": 0.7 # Optional: weight given to the condition image. Default: 0.7\n     }</code></pre> \n<p>The following a Python code example using <a href=\"https://aws.amazon.com/sdk-for-python/\">AWS SDK for Python (Boto3)</a> shows how to invoke Amazon Titan Image Generator v2 on Amazon Bedrock to use image conditioning.</p> \n<pre><code>import base64\nimport io\nimport json\nimport logging\nimport boto3\nfrom PIL import Image\nfrom botocore.exceptions import ClientError\n\ndef main():\n    \"\"\"\n    Entrypoint for Amazon Titan Image Generator V2 example.\n    \"\"\"\n    try:\n        logging.basicConfig(level=logging.INFO,\n                            format=\"%(levelname)s: %(message)s\")\n\n        model_id = 'amazon.titan-image-generator-v2:0'\n\n        # Read image from file and encode it as base64 string.\n        with open(\"/path/to/image\", \"rb\") as image_file:\n            input_image = base64.b64encode(image_file.read()).decode('utf8')\n\n        body = json.dumps({\n            \"taskType\": \"TEXT_IMAGE\",\n            \"textToImageParams\": {\n                \"text\": \"a cartoon deer in a fairy world\",\n                \"conditionImage\": input_image,\n                \"controlMode\": \"CANNY_EDGE\",\n                \"controlStrength\": 0.7\n            },\n            \"imageGenerationConfig\": {\n                \"numberOfImages\": 1,\n                \"height\": 512,\n                \"width\": 512,\n                \"cfgScale\": 8.0\n            }\n        })\n\n        image_bytes = generate_image(model_id=model_id,\n                                     body=body)\n        image = Image.open(io.BytesIO(image_bytes))\n        image.show()\n\n    except ClientError as err:\n        message = err.response[\"Error\"][\"Message\"]\n        logger.error(\"A client error occurred: %s\", message)\n        print(\"A client error occured: \" +\n              format(message))\n    except ImageError as err:\n        logger.error(err.message)\n        print(err.message)\n\n    else:\n        print(\n            f\"Finished generating image with Amazon Titan Image Generator V2 model {model_id}.\")\n\ndef generate_image(model_id, body):\n    \"\"\"\n    Generate an image using Amazon Titan Image Generator V2 model on demand.\n    Args:\n        model_id (str): The model ID to use.\n        body (str) : The request body to use.\n    Returns:\n        image_bytes (bytes): The image generated by the model.\n    \"\"\"\n\n    logger.info(\n        \"Generating image with Amazon Titan Image Generator V2 model %s\", model_id)\n\n    bedrock = boto3.client(service_name='bedrock-runtime')\n\n    accept = \"application/json\"\n    content_type = \"application/json\"\n\n    response = bedrock.invoke_model(\n        body=body, modelId=model_id, accept=accept, contentType=content_type\n    )\n    response_body = json.loads(response.get(\"body\").read())\n\n    base64_image = response_body.get(\"images\")[0]\n    base64_bytes = base64_image.encode('ascii')\n    image_bytes = base64.b64decode(base64_bytes)\n\n    finish_reason = response_body.get(\"error\")\n\n    if finish_reason is not None:\n        raise ImageError(f\"Image generation error. Error is {finish_reason}\")\n\n    logger.info(\n        \"Successfully generated image with Amazon Titan Image Generator V2 model %s\", model_id)\n\n    return image_bytes\n\t\nclass ImageError(Exception):\n    \"Custom exception for errors returned by Amazon Titan Image Generator V2\"\n\n    def __init__(self, message):\n        self.message = message\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    main()</code></pre> \n<p><strong>Color conditioning</strong><br /> Most designers want to generate images adhering to color branding guidelines so they seek control over color palette in the generated images.</p> \n<p>With the Amazon Titan Image Generator v2, you can generate color-conditioned images based on a color palette—a list of hex colors provided as part of the inputs adhering to color branding guidelines. You can also provide a reference image as input (optional) to generate an image with provided hex colors while inheriting style from the reference image.</p> \n<p>In this example, the prompt describes:<br /> <code>a jar of salad dressing in a rustic kitchen surrounded by fresh vegetables with studio lighting</code></p> \n<p>The generated image reflects both the content of the text prompt and the specified color scheme to align with the brand’s color guidelines.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/01/2024-image-generator-v2-2-color-palatte.jpg\" width=\"2118\" height=\"771\" /></p> \n<p>To use color conditioning feature, you can set <code>taskType</code> to <code>COLOR_GUIDED_GENERATION</code> with your prompt and hex codes.</p> \n<pre><code>       \"taskType\": \"COLOR_GUIDED_GENERATION\",\n       \"colorGuidedGenerationParams\": {\n             \"text\": \"a jar of salad dressing in a rustic kitchen surrounded by fresh vegetables with studio lighting\",                         \n\t         \"colors\": ['#ff8080', '#ffb280', '#ffe680', '#e5ff80'], # Optional: list of color hex codes \n             \"referenceImage\": input_image, #Optional\n        }</code></pre> \n<p><strong>Background removal</strong><br /> Whether you’re looking to composite an image onto a solid color backdrop or layer it over another scene, the ability to cleanly and accurately remove the background is an essential tool in the creative workflow. You can instantly remove the background from your images with a single step. Amazon Titan Image Generator v2 can intelligently detect and segment multiple foreground objects, ensuring that even complex scenes with overlapping elements are cleanly isolated.</p> \n<p>The example shows an image of an iguana sitting on a tree in a forest. The model was able to identify the iguana as the main object and remove the forest background, replacing it with a transparent background. This lets the iguana stand out clearly without the distracting forest around it.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/01/2024-image-generator-v2-3-background-removal.jpg\" width=\"1270\" height=\"386\" /></p> \n<p>To use background removal feature, you can set <code>taskType</code> to <code>BACKGROUND_REMOVAL</code> with your input image.</p> \n<pre><code>    \"taskType\": \"BACKGROUND_REMOVAL\",\n    \"backgroundRemovalParams\": {\n \t\t\"image\": input_image,\n    }</code></pre> \n<p><strong>Subject consistency with fine-tuning</strong><br /> You can now seamlessly incorporate specific subjects into visually captivating scenes. Whether it’s a brand’s product, a company logo, or a beloved family pet, you can fine-tune the Amazon Titan model using reference images to learn the unique characteristics of the chosen subject.</p> \n<p>Once the model is fine-tuned, you can simply provide a text prompt, and the Amazon Titan Generator will generate images that maintain a consistent depiction of the subject, placing it naturally within diverse, imaginative contexts. This opens up a world of possibilities for marketing, advertising, and visual storytelling.</p> \n<p>For example, you could use an image with the caption <code>Ron the dog</code> during fine-tuning, give the prompt as <code>Ron the dog wearing a superhero cape</code> during inference with the fine-tuned model, and get a unique image in response.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/08/01/2024-image-generator-v2-4-subject-consistency-.jpg\" width=\"1424\" height=\"602\" /></p> \n<p>To learn, visit <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-titan-image.html\">model inference parameters and code examples for Amazon Titan Image Generator</a> in the AWS documentation.</p> \n<p><strong><u>Now available</u></strong><br /> The Amazon Titan Generator v2 model is available today in Amazon Bedrock in the US East (N. Virginia) and US West (Oregon) Regions. Check the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/models-regions.html\">full Region list</a> for future updates. To learn more, check out the <a href=\"https://aws.amazon.com/bedrock/titan\">Amazon Titan product page</a> and the <a href=\"https://aws.amazon.com/bedrock/pricing/\">Amazon Bedrock pricing</a> page.</p> \n<p>Give Amazon Titan Image Generator v2 a try in <a href=\"https://console.aws.amazon.com/bedrock\">Amazon Bedrock</a> today, and send feedback to <a href=\"https://repost.aws/tags/TAQeKlaPaNRQ2tWB6P7KrMag/amazon-bedrock\">AWS re:Post for Amazon Bedrock</a> or through your usual AWS Support contacts.</p> \n<p>Visit our <a href=\"https://community.aws/generative-ai?trk=e8665609-785f-4bbe-86e8-750a3d3e9e61&amp;sc_channel=el\">community.aws site</a> to find deep-dive technical content and to discover how our Builder communities are using Amazon Bedrock in their solutions.</p> \n<p>— <a href=\"https://twitter.com/channyun\">Channy</a></p>","author":"Channy Yun (윤석찬)","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"aaddba765ca96731055e1a0d2551d5c3682a68f7126172d94f177de75655b283","category":"Tech"}