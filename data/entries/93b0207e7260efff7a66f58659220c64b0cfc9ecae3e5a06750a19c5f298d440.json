{"title":"Predictable plugin loading in Packer 1.11","link":"https://www.hashicorp.com/blog/predictable-plugin-loading-in-packer-1-11","date":1710259200000,"content":"<p>In HashiCorp Packer 1.11, now available as an <a href=\"https://releases.hashicorp.com/packer/1.11.0-alpha/\">alpha release</a>, we are introducing a predictable approach to plugin loading. With this change, Packer will no longer load plugin binaries installed outside of its plugin directory, nor will Packer load plugin binaries without their respective <em>SHA256SUM</em> file. To aid this transition, Packer 1.11 includes tooling updates to simplify the plugin loading process.</p>\n\n<h2>What's changing in Packer 1.11?</h2>\n\n<p>The Packer team has been consistently working on reducing the pain points around plugin usage introduced by the required plugins in Packer 1.7. In user interviews, community forum posts, and various GitHub issues, we continue to hear about difficulties installing plugins into the correct directories and plugin developers facing challenges with the tooling to test their locally built binaries due to the various plugin loading options in Packer. </p>\n\n<p>As it stands today, plugins following one of the two naming conventions, <code>packer-plugin-happycloud</code> or <code>packer-plugin-happycloud_v0.0.1_x5.0_darwin_arm64</code>, placed within one of the known directories will get automatically loaded by Packer. The discovery and loading of a plugin within a known directory is a feature that has been in place since the early days of Packer. But in Packer 1.7, with the introduction of <code>required_plugins</code> and <code>packer init</code>, the flexibility of automatic plugin discovery could be confusing to some. </p>\n\n<h3>Local plugin installation tools</h3>\n\n<p>In Packer 1.10 we introduced the ability to install a locally sourced plugin using <code>packer plugins install --path</code>, which made the use of locally installed plugins compatible with <code>required_plugins</code> and <code>packer init</code>. In Packer 1.10.2, we extended this behavior to support development plugin binaries — binaries that report \"dev\" as part of their plugin version. </p>\n\n<p>The Packer team decided on \"dev\" prereleases over \"alpha\", \"beta\", and \"rc\" for plugins to minimize the level of complexity around version pinning used for <code>required_plugins</code> and <code>packer init</code>.</p>\n\n<h3>Using development binaries with Packer</h3>\n\n<p>Plugins required through <code>required_plugins</code> have a version constraint that dictates the version of a plugin needed for executing a build. These constraints do not include development versions because installation through commands like <code>packer init</code> is unsupported.</p>\n\n<p>However, development plugins are now evaluated at runtime provided their version matches the constraints specified. For example:</p>\n<pre><code>amazon = {\n  source = \"github.com/hashicorp/amazon\"\n  version = \"&gt;= 1.1.0\"\n}</code></pre><p>Given the specified version constraint above, only versions greater than or equal to 1.1.0 will be considered.</p>\n\n<p>If you have a development binary (i.e. a manually built plugin binary) installed, Packer will use it if:</p>\n\n<ol>\n<li><p>It is the highest compatible version installed.</p></li>\n<li><p>There is no final plugin version with the same version number installed alongside it.</p></li>\n</ol>\n\n<p>So assuming the following hierarchy:</p>\n<pre><code>/Users/dev/.packer.d/plugins\n└─ github.com\n   └─ hashicorp\n    \t└── amazon\n          ├── packer-plugin-amazon_v1.1.0_x5.0_darwin_arm64\n          ├── packer-plugin-amazon_v1.1.0_x5.0_darwin_arm64_SHA256SUM\n          ├── packer-plugin-amazon_v1.1.1-dev_x5.0_darwin_arm64\n          └── packer-plugin-amazon_v1.1.1-dev_x5.0_darwin_arm64_SHA256SUM</code></pre><p>Version 1.1.1-dev of the Amazon plugin will match the specified version constraint and be used for executing the Packer build.</p>\n\n<p>If, however, a 1.1.1 release version of the plugin is available, it will take precedence over the development binary:</p>\n<pre><code>/Users/dev/.packer.d/plugins\n└─ github.com\n   └─ hashicorp\n    \t└── amazon\n          ├── packer-plugin-amazon_v1.1.1-dev_x5.0_darwin_arm64\n          ├── packer-plugin-amazon_v1.1.1-dev_x5.0_darwin_arm64_SHA256SUM\n          ├── packer-plugin-amazon_v1.1.1_x5.0_darwin_arm64\n          └── packer-plugin-amazon_v1.1.1_x5.0_darwin_arm64_SHA256SUM</code></pre><p>Here, version 1.1.1 of the plugin will match the specified version constraint and be used for executing the Packer build.</p>\n\n<h3>Dropping support for legacy single-component plugins</h3>\n\n<p>In Packer 1.11.0, we removed Packer's ability to load single-component plugins. These are legacy plugins following the previously deprecated naming convention of <code>packer-builder-happycloud</code> or <code>packer-provisioner-happycloud-shell</code> in favor of supporting only multi-component Packer plugins like the <a href=\"https://developer.hashicorp.com/packer/intergrations\">Docker plugin for Packer</a>.</p>\n\n<h3>Stricter plugin loading</h3>\n\n<p>In Packer 1.11, we are dropping support for loading plugin binaries following the naming convention of <code>packer-plugin-name</code>. Packer will now load only plugins stored under <a href=\"https://developer.hashicorp.com/packer/docs/configure#packer-s-plugin-directory\">PACKER<em>PLUGIN</em>PATH</a> using the expected namespaced directory and CHECKSUM files. This change drops support for loading plugin binaries in Packer's executable directory or a template's current working directory:</p>\n<pre><code>/Users/dev/.packer.d/plugins\n└── github.com\n    └── hashicorp\n        └── happycloud\n            ├── packer-plugin-happycloud_v0.0.1_x5.0_darwin_arm64\n            └── packer-plugin-happycloud_v0.0.1_x5.0_darwin_arm64_SHA256SUM</code></pre><h2>What does this mean for Packer users?</h2>\n\n<p>As Packer users, if your templates leverage the <code>required_plugins</code> Packer block and you're installing plugins via <code>packer init</code>, your workflows will continue working as they do today. If, however, you use plugins that live outside of Packer's known plugin directory or manually manage Packer plugin directories, you may need to change your plugin management workflow.</p>\n\n<p>Packer will no longer support the loading of plugin binaries installed alongside the Packer binary or in the current working directory. Instead of manually placing a downloaded binary into the executable or current working directory, we encourage you to run the command \n<code>packer plugins install –path &amp;lt;path-to-downloaded-extracted-binary&gt; github.com/hashicorp/happycloud</code> to install the binary into a Packer compatible path. </p>\n\n<p>Running the install command with the --path option will generate the associated SHA256SUM file for validating the locally installed plugin. If you prefer to manage the installation manually, you can do so but you will be required to manually construct the namespaced sub-directories and SHA256SUM file.</p>\n\n<p>This may sound like a lot of work for installing a binary, but it provides a consistent manner for installing plugins, ensures Packer will load the correct binary at runtime, and makes all plugins compatible with <code>required_plugins</code> and <code>packer init</code>. </p>\n\n<p>HCL (HashiCorp Configuration Language) users can safely pin plugin versions and use dev prereleases without having to change any template, as the use of development binaries with <code>required_plugins</code> now works out the box.</p>\n\n<h3>Installing development binaries in Packer</h3>\n\n<p>The changes mentioned in this blog post give plugin developers and users who have to build their own versions of trusted plugins the ability to use these binaries without conflicting with the Packer plugin pinning mechanism. Practitioners’ use of manually built plugin binaries, what HashiCorp calls “development binaries”, is a common practice given the open source nature of Packer plugins. In Packer 1.11, we've updated the plugin tooling to treat development binaries as first-class citizens in Packer. </p>\n\n<p>A full explanation of how to build development binaries has been documented within the Packer <a href=\"https://github.com/hashicorp/packer-plugin-scaffolding?tab=readme-ov-file#build-from-source\">plugin scaffolding repository</a>. Below is a general overview of the new workflow for using development binaries.</p>\n\n<p>As an example, to build a custom version of the Docker plugin and install it so Packer will be able to use it, you may follow these steps: </p>\n\n<ol>\n<li>Clone the plugin's GitHub repository.</li>\n<li>In the plugin directory root, run <code>go build</code> to build the plugin as a development binary.</li>\n<li>Use the <code>packer plugins install</code> command to install the development binary. </li>\n<li>Run a Packer build with the newly installed plugin.</li>\n</ol>\n<pre><code>~&gt; git clone https://github.com/hashicorp/packer-plugin-docker.git\n~&gt; cd packer-plugin-docker\n\n~&gt; go build -ldflags=\"-X github.com/hashicorp/packer-plugin-docker/version.VersionPrerelease=dev\" -o packer-plugin-docker-dev\n\n# Lets validate its a development prerelease\n~&gt; ./packer-plugin-docker-dev describe\n{\"version\":\"1.0.10-dev\",\"sdk_version\":\"0.5.2\",\"api_version\":\"x5.0\",\"builders\":[\"-packer-default-plugin-name-\"],\"post_processors\":[\"import\",\"push\",\"save\",\"tag\"],\"provisioners\":[],\"datasources\":[]}\n\n# Lets install the development binary\n~&gt; packer plugins install --path packer-plugin-docker-dev github.com/hashicorp/docker\nSuccessfully installed plugin github.com/hashicorp/docker from $HOME/Development/packer-plugin-docker/packer-plugin-docker-dev to ~/github.com/hashicorp/docker/packer-plugin-docker_v1.0.10-dev_x5.0_darwin_arm64</code></pre><p>Note: For convenience, the Makefile within the Packer plugin scaffolding repository has been updated to automate the installation of building and installing development binaries via <code>make dev</code>.</p>\n\n<h2>Next steps</h2>\n\n<p>We invite you to test the Packer 1.11 alpha release, which is available on <a href=\"https://releases.hashicorp.com/packer/\">HashiCorp Releases</a>. Please let us know how the new plugin loading experience works for you. </p>\n\n<p>If you encounter any issues or have any suggestions on how we can improve the loading experience, feel free to start a discussion on the Packer <a href=\"https://github.com/hashicorp/packer/issues\">GitHub issue tracker</a> or <a href=\"https://discuss.hashicorp.com/c/packer/23\">community forum</a>.</p>\n","author":"Wilken Rivera","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"93b0207e7260efff7a66f58659220c64b0cfc9ecae3e5a06750a19c5f298d440","category":"Tech"}