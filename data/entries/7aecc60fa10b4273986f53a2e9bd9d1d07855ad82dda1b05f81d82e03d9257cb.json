{"title":"Announcing the removal of bundled plugins in HashiCorp Packer","link":"https://www.hashicorp.com/blog/announcing-the-removal-of-bundled-plugins-in-hashicorp-packer","date":1695146400000,"content":"<p>Since the beginning of the project, HashiCorp Packer has supported extending its capabilities through plugins. These plugins are built alongside community contributors and partners to help Packer support building images for many cloud providers and hypervisors. \nIn the past, to help Packer users get up and running quickly, popular plugins were bundled into the main Packer binary. This had advantages, notably that users did not have to install plugins separately in order to use them.</p>\n\n<p>However, as the plugin system grew, bundling all plugins introduced maintenance issues: </p>\n\n<ul>\n<li>It prevented releasing plugins separately from Packer. Every time someone fixed a bug, they had to open a pull request on Packer, get it approved and merged, then wait until a new release of Packer in order to benefit from this change.</li>\n<li>It made Packer heavier. Bundling the code for the plugins, and their dependencies, had a negative impact on the final binary's size, and therefore the memory usage of Packer itself.</li>\n<li>This workflow made it harder for community-backed plugins to gain traction. </li>\n</ul>\n\n<p>Separating the plugins from Packer allows anyone in the community to implement the components they want, independently from Packer, and make them available to other Packer practitioners.</p>\n\n<p>Because of these advantages, Packer 1.7 started separating plugins from Packer core into multi-component plugin binaries that could be installed manually or through Packer itself, with subcommands like <code>packer init</code> or <code>packer plugins</code>.</p>\n\n<h2>Bundled plugins</h2>\n\n<p>The separation of plugins from Packer core, if done in a break-once manner, would have caused grief among the community, as Packer would have stopped delivering those plugins and forced users to manage their plugins manually from that point on. So we continued bundling in a subset of plugins and kept them as up-to-date as possible with Packer's release cycle, which differs from the plugins’ cycle. While this solution helped to avoid breaking everyone's configurations, it’s now time to move away from bundled plugins.</p>\n\n<p>Packer users may have noticed that version 1.9 shipped with no community plugins bundled into Packer, leaving only plugins officially supported by HashiCorp as part of the bundled plugins in Packer. With the next minor release of Packer — version 1.10 — we aim to complete this transition away from the bundled plugins, and remove the following plugins from Packer:</p>\n\n<ul>\n<li><a href=\"https://github.com/hashicorp/packer-plugin-amazon\">packer-plugin-amazon</a></li>\n<li><a href=\"https://github.com/hashicorp/packer-plugin-ansible\">packer-plugin-ansible</a></li>\n<li><a href=\"https://github.com/hashicorp/packer-plugin-azure\">packer-plugin-azure</a></li>\n<li><a href=\"https://github.com/hashicorp/packer-plugin-docker\">packer-plugin-docker</a></li>\n<li><a href=\"https://github.com/hashicorp/packer-plugin-googlecompute\">packer-plugin-googlecompute</a></li>\n<li><a href=\"https://github.com/hashicorp/packer-plugin-qemu\">packer-plugin-qemu</a></li>\n<li><a href=\"https://github.com/hashicorp/packer-plugin-vagrant\">packer-plugin-vagrant</a></li>\n<li><a href=\"https://github.com/hashicorp/packer-plugin-vmware\">packer-plugin-vmware</a></li>\n<li><a href=\"https://github.com/hashicorp/packer-plugin-vsphere\">packer-plugin-vsphere</a></li>\n</ul>\n\n<p>Once removed, these plugins will have to be managed through local installations.</p>\n\n<p>We understand that some plugins may be critical to existing user workflows, so we are sharing our plans for the removal of bundled plugins to assist users in navigating the change. Users already managing external plugins via  <code>packer init</code> or <code>packer plugins install</code> will not be affected by these changes.</p>\n\n<h2>Managing plugin installation</h2>\n\n<p>Along with the creation of multi-component plugins starting in Packer version 1.7, tooling was added to Packer for managing the installation of external plugins. In recent versions of Packer, we have focused on the tooling to simplify the managing of external plugins for all users regardless of their template.</p>\n\n<p>The commands <code>packer init</code> and <code>packer plugins install</code> will become the standard way to manage local installations of plugins, so users always benefit from the version that best fits their build workflow.</p>\n\n<h3>packer init</h3>\n\n<p>This command is the preferred way to install plugins for HCL2 templates, as it works in tandem with information linked to your templates directly. In HCL2 templates, you can define which plugins your template relies on, through the <code>required_plugins</code> block. For each plugin defined in this block, you can set a version constraint, which is then leveraged by <code>packer init</code> to get the version of the plugins most appropriate to build your template.</p>\n\n<p>The <code>required_plugins</code> block effectively lets you pin a specific version of the plugin to run your builds on. This way, if a release causes a problem for your builds, you can circumvent the new problem with this construct while a fix is found and a new version is released.</p>\n\n<p>For more information on <code>packer init</code>, and the <code>required_plugins</code> block, please refer to our <a href=\"https://developer.hashicorp.com/packer/docs/commands/init\">init command documentation on developer.hashicorp.com</a>.</p>\n\n<h3>packer plugins</h3>\n\n<p>This command is not limited to HCL2 and does not require any changes to existing templates. Users of the legacy JSON templates can rely on this command to manage their plugin installations. With <code>packer plugins install</code>, you will be able to install any version of a plugin on demand; but you will have to invoke the command for each individual plugin you may wish to install.</p>\n\n<p>As with <code>packer init</code>, you can find more information on the command in our <a href=\"https://developer.hashicorp.com/packer/docs/commands/plugins\">plugins documentation on developer.hashicorp.com</a>.</p>\n\n<h2>Next steps</h2>\n\n<p>Starting with Packer 1.9.2 (released July 19, 2023), templates relying on the usage of bundled plugins will trigger a warning in Packer's standard output indicating your template's reliance on a bundled plugin, along with steps you can take to resolve the warning. The bundled plugins listed above will be officially removed from Packer in 1.10, tentatively scheduled for November 2023.</p>\n","author":"Wilken Rivera","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"7aecc60fa10b4273986f53a2e9bd9d1d07855ad82dda1b05f81d82e03d9257cb","category":"Tech"}