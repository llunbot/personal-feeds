{"title":"การใช้งาน Testcontainers ใน Spring Boot 3.1","link":"https://www.somkiat.cc/testcontainers-in-spring-boot-3-1/","date":1685077505000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/springboot-testcontainer-150x150.jpeg\" alt srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/05/springboot-testcontainer-150x150.jpeg 150w, https://www.somkiat.cc/wp-content/uploads/2023/05/springboot-testcontainer-75x75.jpeg 75w\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/springboot-testcontainer.jpeg\" alt width=\"552\" height=\"238\" /></figure>\n\n\n\n<p>หลังจากที่ <strong><a href=\"https://docs.spring.io/spring-boot/docs/3.1.0/reference/html/features.html#features.testing.testcontainers\">Spring Boot 3.1 ปล่อยออกมานั้น</a></strong><br />มีเรื่องที่น่าสนใจคือ การทำงานร่วมกับ <a href=\"https://www.testcontainers.org/\" target=\"_blank\">Testcontainers</a><br />โดยมีความสามารถดังนี้</p>\n\n\n\n<ul><li>แน่นอนว่า ในการทดสอบ สามารถใช้งานได้เลย</li><li>อีกตัวที่น่าสนใจคือ สามารถ Run ใน test mode ได้ ช่วยให้นักพัฒนาง่ายขึ้น</li></ul>\n\n\n\n<p>มาดูกันว่าเป็นอย่างไร ?</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>ก่อนใช้งานบนเครื่องต้องมี</strong></p>\n\n\n\n<ul><li>Docker</li><li>JDK 17</li></ul>\n\n\n\n<p>จากนั้นทำ<a href=\"https://start.spring.io/\" target=\"_blank\">การสร้าง project</a> ดังรูป</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/Screenshot-2566-05-26-at-11.55.55-1024x485.png\" alt width=\"557\" height=\"263\" /></figure>\n\n\n\n<p><strong>เรื่องแรกใช้ Testcontainers ใน Test case</strong></p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/05/Screenshot-2566-05-26-at-11.49.25.png\" alt width=\"552\" height=\"236\" /></figure>\n\n\n\n<p>โดยในการทดสอบนั้น สามารถทำการจำลองหรือสร้าง MongoDB<br />ผ่าน Testcontainers ได้เลย<br />จากนั้นก็ทำการ start test case กันได้เลย<br />ซึ่งทำงานร่วมกับ SpringBootTest ได้ปกติ<br />ตัวอย่าง code ดังรูป</p>\n\n\n\n[gist id=\"c203fe120a3672e80c99703401dbad59\" file=\"TestCase.java\"]\n\n\n\n<p>ในการทดสอบจะทำการสร้าง container ใน Docker ขึ้นมา<br />เมื่อทดสอบเสร็จแล้ว จะทำการลบ container ให้อัตโนมัติ</p>\n\n\n\n[gist id=\"c203fe120a3672e80c99703401dbad59\" file=\"1.txt\"]\n\n\n\n<p><strong>เรื่องที่สอง ใช้ Testcontainers ในการ run test mode </strong></p>\n\n\n\n<p>ในการพัฒนาปกติ จะทำการ start project ผ่าน IDE หรือ command line ก็ได้<br />เช่น</p>\n\n\n\n[code]\n// Apache Maven\n$mvnw spring-boot:run\n\n// Gradle\n$gradlew bootRun\n[code]\n\n\n\n<p><strong>ส่วนใน Spring Boot 3.1 และ Testcontainers ได้เพิ่ม task ใหม่เข้ามาคือ</strong></p>\n\n\n\n[code]\n// Apache Maven\n$mvnw spring-boot:test-run\n\n// Gradle\n$gradlew bootTestRun\n[code]\n\n\n\n<p>แต่ใน Test นั้นจะต้องเพิ่ม class TestApplication เข้ามา<br />เพื่อทำการ custom Main class ของการทดสอบนั่นเอง<br />รวมทั้ง configuration ของ Testcontainers สำหรับ MongoDB<br />ยกตัวอย่างเช่น</p>\n\n\n\n[gist id=\"c203fe120a3672e80c99703401dbad59\" file=\"TestApplication.java\"]\n\n\n\n<p>เพียงเท่านี้ก็สามารถใช้งาน Testcontainers ใน Spring Boot 3.1 กันแบบง่าย ๆ ได้แล้ว</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"ea45fe5b06ff9b86ec947c07f89ebaa05d26a3116882eba386b1fb9e0189a250","category":"Thai"}