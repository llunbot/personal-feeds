{"title":"Answering Common Questions About Interpreting Page Speed Reports","link":"https://smashingmagazine.com/2023/10/answering-questions-interpreting-page-speed-reports/","date":1698768000000,"content":"<p>This article is a sponsored by <a href=\"https://www.debugbear.com/?utm_campaign=sm-1\">DebugBear</a></p>\n<p>Running a performance check on your site isn’t too terribly difficult. It may even be something you do regularly with Lighthouse in Chrome DevTools, where testing is freely available and produces a very attractive-looking report.</p>\n<p><img src=\"https://files.smashing.media/articles/answering-questions-interpreting-page-speed-reports/1-lighthouse-report-smashing-magazine.png\" /></p>\n<p>Lighthouse is only one performance auditing tool out of many. The convenience of having it tucked into Chrome DevTools is what makes it an easy go-to for many developers.</p>\n<p>But do you know <em>how</em> Lighthouse calculates performance metrics like First Contentful Paint (FCP), Total Blocking Time (TBT), and Cumulative Layout Shift (CLS)? There’s a <a href=\"https://googlechrome.github.io/lighthouse/scorecalc/#FCP=620&amp;SI=730&amp;FMP=635&amp;TTI=635&amp;FCI=6500&amp;LCP=980&amp;TBT=0&amp;CLS=0.01&amp;device=desktop&amp;version=10\">handy calculator</a> linked up in the report summary that lets you adjust performance values to see how they impact the overall score. Still, there’s nothing in there to tell us about the data Lighthouse is using to evaluate metrics. The <a href=\"https://developer.chrome.com/docs/lighthouse/performance/performance-scoring/\">linked-up explainer</a> provides more details, from how scores are weighted to why scores may fluctuate between test runs.</p>\n<p>Why do we need Lighthouse at all when Google also offers similar reports in <a href=\"https://pagespeed.web.dev\">PageSpeed Insights</a> (PSI)? The truth is that the two tools were fairly distinct until <a href=\"https://developers.google.com/speed/docs/insights/release_notes#november-2018\">PSI was updated in 2018</a> to use Lighthouse reporting.</p>\n<p><img src=\"https://files.smashing.media/articles/answering-questions-interpreting-page-speed-reports/2-psi-report-smashing-magazine-performance.png\" /></p>\n<p>Did you notice that the Performance score in Lighthouse is different from that PSI screenshot? How can one report result in a near-perfect score while the other appears to find more reasons to lower the score? Shouldn’t they be the same if both reports rely on the same underlying tooling to generate scores?</p>\n<p>That’s what this article is about. <strong>Different tools make different assumptions using different data</strong>, whether we are talking about Lighthouse, PageSpeed Insights, or commercial services like <a href=\"https://www.debugbear.com/?utm_campaign=sm-2\">DebugBear</a>. That’s what accounts for different results. But there are more specific reasons for the divergence.</p>\n<p>Let’s dig into those by answering a set of common questions that pop up during performance audits.</p>\nWhat Does It Mean When PageSpeed Insights Says It Uses “Real-User Experience Data”?\n<p>This is a great question because it provides a lot of context for why it’s possible to get varying results from different performance auditing tools. In fact, when we say “real user data,” we’re really referring to two different types of data. And when discussing the two types of data, we’re actually talking about what is called <strong>real-user monitoring</strong>, or RUM for short.</p>\n<h3>Type 1: Chrome User Experience Report (CrUX)</h3>\n<p>What PSI means by “real-user experience data” is that it evaluates the performance data used to measure the core web vitals from your tests against the core web vitals data of actual real-life users. That real-life data is pulled from the <a href=\"https://developer.chrome.com/docs/crux/\">Chrome User Experience (CrUX) report</a>, a set of anonymized data collected from Chrome users — at least <a href=\"https://developer.chrome.com/docs/crux/methodology/#user-eligibility\">those who have consented to share data</a>.</p>\n<p>CrUX data is important because it is how web core vitals are measured, which, in turn, <a href=\"https://www.debugbear.com/docs/core-web-vitals-ranking-factor?utm_campaign=sm-2\">are a ranking factor for Google’s search results</a>. <strong>Google focuses on the 75th percentile of users</strong> in the CrUX data when reporting core web vitals metrics. This way, the data represents a vast majority of users while minimizing the possibility of outlier experiences.</p>\n<p>But it comes with caveats. For example, the data is pretty slow to update, refreshing every 28 days, meaning it is not the same as real-time monitoring. At the same time, if you plan on using the data yourself, you may find yourself limited to reporting within that floating 28-day range unless you make use of the <a href=\"https://developer.chrome.com/docs/crux/history-api/\">CrUX History API</a> or <a href=\"https://developer.chrome.com/docs/crux/bigquery/\">BigQuery</a> to produce historical results you can measure against. CrUX is what fuels PSI and Google Search Console, but it is also available in other tools you may already use.</p>\n<p>Barry Pollard, a web performance developer advocate for Chrome, <a href=\"https://www.smashingmagazine.com/2021/04/complete-guide-measure-core-web-vitals/\">wrote an excellent primer on the CrUX Report for Smashing Magazine</a>.</p>\n<h3>Type 2: Full Real-User Monitoring (RUM)</h3>\n<p>If CrUX offers one flavor of real-user data, then we can consider “full real-user data” to be another flavor that provides even more in the way individual experiences, such as specific network requests made by the page. This data is distinct from CrUX because it’s collected directly by the website owner by installing an analytics snippet on their website.</p>\n<p>Unlike CrUX data, full RUM pulls data from other users using other browsers in addition to Chrome and does so on a continual basis. That means there’s no waiting 28 days for a fresh set of data to see the impact of any changes made to a site.</p>\n<p>You can see how you might wind up with different results in performance tests simply by the type of real-user monitoring (RUM) that is in use. Both types are useful, but </p>\n<p>You might find that CrUX-based results are excellent for more of a current high-level view of performance than they are an accurate reflection of the users on your site because of that 28-day waiting period, which is where full RUM shines with more immediate results and a greater depth of information.</p>\nDoes Lighthouse Use RUM Data, Too?\n<p>It does not! It uses synthetic data, or what we commonly call <strong>lab data</strong>. And, just like RUM, we can explain the concept of lab data by breaking it up into two different types.</p>\n<h3>Type 1: Observed Data</h3>\n<p>Observed data is performance as the browser sees it. So, instead monitoring real information collected from real users, <strong>observed data</strong> is more like defining the test conditions ourselves. For example, we could add throttling to the test environment to enforce an artificial condition where the test opens the page on a slower connection. You might think of it like racing a car in virtual reality, where the conditions are decided in advance, rather than racing on a live track where conditions may vary.</p>\n<p><img src=\"https://files.smashing.media/articles/answering-questions-interpreting-page-speed-reports/3-chrome-devtools-performance-testing-conditions.png\" /></p>\n<h3>Type 2: Simulated Data</h3>\n<p>While we called that last type of data “observed data,” that is not an official industry term or anything. It’s more of a necessary label to help distinguish it from <strong>simulated data</strong>, which describes how Lighthouse (and many other tools that include Lighthouse in its feature set, such as PSI) <a href=\"https://www.debugbear.com/blog/simulated-throttling?utm_campaign=sm-2\">applies throttling to a test environment and the results it produces</a>.</p>\n<p>The reason for the distinction is that <a href=\"https://www.debugbear.com/blog/network-throttling-methods?utm_campaign=sm-2\">there are different ways to throttle a network</a> for testing. Simulated throttling <a href=\"https://www.debugbear.com/blog/simulated-throttling#what-is-simulated-throttling?utm_campaign=sm-2\">starts by collecting data on a fast internet connection</a>, then <strong>estimates how quickly the page would have loaded on a different connection</strong>. The result is a much <em>faster</em> test than it would be to apply throttling before collecting information. Lighthouse can often grab the results and calculate its estimates faster than the time it would take to gather the information and parse it on an artificially slower connection.</p>\n<h3>Simulated And Observed Data In Lighthouse</h3>\n<p>Simulated data is the data that Lighthouse uses by default for performance reporting. It’s also what PageSpeed Insights uses since it is powered by Lighthouse under the hood, although PageSpeed Insights also relies on real-user experience data from the CrUX report.</p>\n<p>However, it is also possible to collect observed data with Lighthouse. This data is more reliable since it doesn’t depend on an incomplete simulation of Chrome internals and the network stack. The accuracy of observed data depends on how the test environment is set up. If <a href=\"https://www.debugbear.com/blog/packet-level-throttling?utm_campaign=sm-2\">throttling is applied at the operating system level</a>, then the metrics match what a real user with those network conditions would experience. <a href=\"https://www.debugbear.com/blog/chrome-devtools-network-throttling#how-exactly-does-devtools-network-throttling-work?utm_campaign=sm-2\">DevTools throttling</a> is easier to set up, but doesn’t accurately reflect how server connections work on the network.</p>\n<h3>Limitations Of Lab Data</h3>\n<p>Lab data is fundamentally limited by the fact that it only looks at a single experience in a pre-defined environment. This environment often doesn’t even match the average real user on the website, who may have a faster network connection or a slower CPU. Continuous real-user monitoring can actually tell you how users are experiencing your website and whether it’s fast enough.</p>\n<p>So why use lab data at all? </p>\n<p>The biggest advantage of lab data is that it produces much more in-depth data than real user monitoring.</p>\n<p>Google CrUX data only reports metric values with no debug data telling you how to improve your metrics. In contrast, lab reports contain a lot of analysis and recommendations on how to improve your page speed.</p>\nWhy Is My Lighthouse LCP Score <em>Worse</em> Than The Real User Data?\n<p>It’s a little easier to explain different scores now that we’re familiar with the different types of data used by performance auditing tools. We now know that Google reports on the 75th percentile of real users when reporting web core vitals, which includes LCP.</p>\n<blockquote>“By using the 75th percentile, we know that most visits to the site (3 of 4) experienced the target level of performance or better. Additionally, the 75th percentile value is less likely to be affected by outliers. Returning to our example, for a site with 100 visits, 25 of those visits would need to report large outlier samples for the value at the 75th percentile to be affected by outliers. While 25 of 100 samples being outliers is possible, it is much less likely than for the 95th percentile case.”<br /><br />— <a href=\"https://web.dev/articles/defining-core-web-vitals-thresholds\">Brian McQuade</a></blockquote>\n\n<p>On the flip side, simulated data from Lighthouse neither reports on real users nor accounts for outlier experiences in the same way that CrUX does. <strong>So, if we were to set heavy throttling on the CPU or network of a test environment in Lighthouse, we’re actually embracing outlier experiences that CrUX might otherwise toss out.</strong> Because Lighthouse applies heavy throttling by default, the result is that we get a worse LCP score in Lighthouse than we do PSI simply because Lighthouse’s data effectively looks at a slow outlier experience.</p>\nWhy Is My Lighthouse CLS Score <em>Better</em> Than The Real User Data?\n<p>Just so we’re on the same page, Cumulative Layout Shift (CLS) measures the <a href=\"https://web.dev/user-centric-performance-metrics/#types-of-metrics\">“visible stability” of a page layout</a>. If you’ve ever visited a page, scrolled down it a bit before the page has fully loaded, and then noticed that your place on the page shifts when the page load is complete, then you know exactly what CLS is and how it feels.</p>\n<p>The nuance here has to do with page interactions. We know that real users are capable of interacting with a page even before it has fully loaded. This is a big deal when measuring CLS because layout shifts often occur lower on the page after a user has scrolled down the page. CrUX data is ideal here because it’s based on real users who would do such a thing and bear the worst effects of CLS.</p>\n<p>Lighthouse’s simulated data, meanwhile, does no such thing. It waits patiently for the full page load and never interacts with parts of the page. It doesn’t scroll, click, tap, hover, or interact in any way.</p>\n<p>This is why you’re more likely to receive a lower CLS score in a PSI report than you’d get in Lighthouse. It’s not that PSI likes you less, but that the real users in its report are a better reflection of how users interact with a page and are more likely to experience CLS than simulated lab data.</p>\nWhy Is Interaction to Next Paint Missing In My Lighthouse Report?\n<p>This is another case where it’s helpful to know the different types of data used in different tools and how that data interacts — or not — with the page. That’s because the Interaction to Next Paint (INP) metric is <em>all about interactions</em>. It’s right there in the name!</p>\n<p>The fact that Lighthouse’s simulated lab data does not interact with the page is a dealbreaker for an INP report. INP is a measure of the latency for all interactions on a given page, where the highest latency — or close to it — informs the final score. For example, if a user clicks on an accordion panel and it takes longer for the content in the panel to render than any other interaction on the page, that is what gets used to evaluate INP.</p>\n<p>So, when INP <a href=\"https://web.dev/inp/\">becomes an official core web vitals metric in March 2024</a>, and you notice that it’s not showing up in your Lighthouse report, you’ll know exactly why it isn’t there.</p>\n<p><strong>Note</strong>: <em>It is possible to script user flows with Lighthouse, including in DevTools. But that probably goes too deep for this article.</em></p>\nWhy Is My Time To First Byte Score <em>Worse</em> For Real Users?\n<p>The Time to First Byte (TTFB) is what immediately comes to mind for many of us when thinking about page speed performance. We’re talking about the time between establishing a server connection and receiving the first byte of data to render a page.</p>\n<p><img src=\"https://files.smashing.media/articles/answering-questions-interpreting-page-speed-reports/4-ttfb-page-speed-performance.png\" /></p>\n<p>TTFB identifies how fast or slow a web server is to respond to requests. What makes it special in the context of core web vitals — even though it is not considered a core web vital itself — is that it <em>precedes</em> all other metrics. The web server needs to establish a connection in order to receive the first byte of data and render everything else that core web vitals metrics measure. TTFB is essentially an <strong>indication of how fast users can navigate</strong>, and core web vitals can’t happen without it.</p>\n<p>You might already see where this is going. When we start talking about server connections, there are going to be differences between the way that RUM data observes the TTFB versus how lab data approaches it. As a result, we’re bound to get different scores based on which performance tools we’re using and in which environment they are. As such, TTFB is more of a “rough guide,” as <a href=\"https://web.dev/ttfb/\">Jeremy Wagner and Barry Pollard explain</a>:</p>\n<blockquote>“Websites vary in how they deliver content. A low TTFB is crucial for getting markup out to the client as soon as possible. However, if a website delivers the initial markup quickly, but that markup then requires JavaScript to populate it with meaningful content […], then achieving the lowest possible TTFB is especially important so that the client-rendering of markup can occur sooner. […] This is why the TTFB thresholds are a “rough guide” and will need to be weighed against how your site delivers its core content.”<br /><br />— <a href=\"https://web.dev/ttfb/\">Jeremy Wagner and Barry Pollard</a></blockquote>\n\n<p>So, if your TTFB score comes in higher when using a tool that relies on RUM data than the score you receive from Lighthouse’s lab data, it’s probably because of caches being hit when testing a particular page. Or perhaps the real user is coming in from a shortened URL that redirects them before connecting to the server. It’s even possible that a real user is connecting from a place that is really far from your web server, which takes a little extra time, particularly if you’re not using a CDN or running edge functions. It really depends on both the user and how you serve data.</p>\nWhy Do Different Tools Report Different Core Web Vitals? What Values Are Correct?\n<p>This article has already introduced some of the nuances involved when collecting web vitals data. Different tools and data sources often report different metric values. So which ones can you trust?</p>\n<p>When working with lab data, I suggest preferring observed data over simulated data. But you’ll see differences even between tools that all deliver high-quality data. That’s because no two tests are the same, with different test locations, CPU speeds, or Chrome versions. There’s no one right value. Instead, you can use the lab data to identify optimizations and see how your website changes over time when tested in a consistent environment.</p>\n<p>Ultimately, what you want to look at is how real users experience your website. From an SEO standpoint, the 28-day Google CrUX data is the gold standard. However, it won’t be accurate if you’ve rolled out performance improvements over the last few weeks. Google also doesn’t report CrUX data for some high-traffic pages because the visitors may not be logged in to their Google profile.</p>\n<p>Installing a custom RUM solution on your website can solve that issue, but the numbers won’t match CrUX exactly. That’s because visitors using browsers other than Chrome are now included, as are users with Chrome analytics reporting disabled.</p>\n<p>Finally, while Google focuses on the fastest 75% of experiences, that doesn’t mean the 75th percentile is the correct number to look at. Even with good core web vitals, 25% of visitors may still have a slow experience on your website.</p>\nWrapping Up\n<p>This has been a close look at how different performance tools audit and report on performance metrics, such as core web vitals. Different tools rely on different types of data that are capable of producing different results when measuring different performance metrics.</p>\n<p>So, if you find yourself with a CLS score in Lighthouse that is far lower than what you get in PSI or DebugBear, go with the Lighthouse report because it makes you look better to the big boss. Just kidding! That difference is a big clue that the data between the two tools is uneven, and you can use that information to help diagnose and fix performance issues.</p>\n<p><img src=\"https://files.smashing.media/articles/answering-questions-interpreting-page-speed-reports/5-debugbear-lcp.png\" /></p>\n<p>Are you looking for a tool to track lab data, Google CrUX data, and full real-user monitoring data? <a href=\"https://www.debugbear.com/?utm_campaign=sm-2\">DebugBear</a> helps you keep track of all three types of data in one place and optimize your page speed where it counts.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"222c3552c2cae839614ec180807fffd51ad72d78c5277fd2a486597cf2d44a8b","category":"Tech"}