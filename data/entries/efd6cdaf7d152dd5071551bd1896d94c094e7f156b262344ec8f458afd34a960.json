{"title":"Mutual authentication for Application Load Balancer reliably verifies certificate-based client identities","link":"https://aws.amazon.com/blogs/aws/mutual-authentication-for-application-load-balancer-to-reliably-verify-certificate-based-client-identities/","date":1701028537000,"content":"<p>Today, we are announcing support for mutually authenticating clients that present X509 certificates to <a href=\"https://aws.amazon.com/elasticloadbalancing/application-load-balancer\">Application Load Balancer</a>. With this new feature, you can now offload client authentication to the load balancer, ensuring only trusted clients communicate with their backend applications. This new capability is built on <a href=\"https://aws.amazon.com/blogs/security/introducing-s2n-a-new-open-source-tls-implementation/\">S2N</a>, AWS’s open source Transport Layer Security (TLS) implementation that provides strong encryption and protections against zero-day vulnerabilities, which developers can trust.</p> \n<p><a href=\"https://en.wikipedia.org/wiki/Mutual_authentication\">Mutual authentication</a> (mTLS) is commonly used for business-to-business (B2B) applications such as online banking, automobile, or gaming devices to authenticate devices using digital certificates. Companies typically use it with a private certificate authority (CA) to authenticate their clients before granting access to data and services.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/16/2023-mTLS-on-ALB-1-diagram.png\" width=\"1424\" height=\"572\" /></p> \n<p>Customers have implemented mutual authentication using self-created or third-party solutions that require additional time and management overhead. These customers spend their engineering resources to build the functionality into their backend, update their code to keep up with the latest security patches, and invest heavily in infrastructure to create and rotate certificates.</p> \n<p>With mutual authentication on Application Load Balancer, you have a fully managed, scalable, and cost-effective solution that enables you to use your developer resources to focus on other critical projects. Your ALB will authenticate clients with revocation checks and pass client certificate information to the target, which can be used for authorization by applications.</p> \n<p><strong><u>Getting started with mutual authentication on ALB</u></strong><br /> To enable mutual authentication on ALB, choose <strong>Create Application Load Balancer </strong>by the <a href=\"https://console.aws.amazon.com/ec2/home?#CreateALBWizard:\">ALB wizard on Amazon EC2 console</a>. When you select <code>HTTPS</code> in the <strong>Listeners and routing section</strong>, you can see more settings such as security policy, default server certificate, and a new client certificate handling option to support mutual authentication.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/16/2023-mTLS-on-ALB-2-setup.png\" width=\"2036\" height=\"2490\" /></p> \n<p>With <strong>Mutual authentication (mTLS)</strong> enabled, you can configure how listeners handle requests that present client certificates. This includes how your Application Load Balancer authenticates certificates and the amount of certificate metadata that is sent to your backend targets.</p> \n<p>Mutual authentication has two options. The <strong>Passthrough</strong> option sends all the client certificate chains received from the client to your backend application using HTTP headers. The mTLS-enabled Application Load Balancer gets the client certificate in the handshake, establishes a TLS connection, and then sends whatever it gets in HTTPS headers to the target application. The application will need to verify the client certificate chain to authenticate the client.</p> \n<p>With the <strong>Verify with trust store</strong> option, Application Load Balancer and client verify each other’s identity and establish a TLS connection to encrypt communication between them. We introduce a new trust store feature, and you can upload any CA bundle with roots and/or intermediate certificates generated by <a href=\"https://aws.amazon.com/private-ca/\">AWS Private Certificate Authority</a> or any other third party CA as the source of trust to validate your client certificates.</p> \n<p>It requires selecting an existing trust store or creating a new one. Trust stores contain your CAs, trusted certificates, and, optionally, certificate revocation lists (CRLs). The load balancer uses a trust store to perform mutual authentication with clients.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/16/2023-mTLS-on-ALB-3-advanced.png\" width=\"1978\" height=\"996\" /></p> \n<p>To use this option and create a new trust store, choose <strong>Trust Stores</strong> in the left menu of the Amazon EC2 console and choose <strong>Create trust store</strong>.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/16/2023-mTLS-on-ALB-4-trust-stores.png\" width=\"2250\" height=\"622\" /></p> \n<p>You can choose a CA certificate bundle in PEM format and, optionally, CRLs from your <a href=\"https://aws.amazon.com/s3\">Amazon Simple Storage Service</a> (Amazon S3) bucket. A CA certificate bundle is a group of CA certificates (root or intermediate) used by a trust store. CRLs can be used when a CA revokes client certificates that have been compromised, and you need to reject those revoked certificates. You can replace a CA bundle, and add or remove CRLs from the trust store after creation.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/16/2023-mTLS-on-ALB-5-create-trust-store.png\" width=\"2050\" height=\"1500\" /></p> \n<p>You can use the <a href=\"https://aws.amazon.com/cli\">AWS Command Line Interface (AWS CLI)</a> with new APIs such as <code>create-trust-store</code> to upload CA information, configure the <code>mutual-authentication-mode</code> on the Application Load Balancer listener, and send user certificate information to targets.</p> \n<pre><code>$ aws elbv2 create-trust-store --name my-tls-name \\\n    --ca-certificates-bundle-s3-bucket channy-certs \\\n    --ca-certificates-bundle-s3-key Certificates.pem \\\n    --ca-certificates-bundle-s3-object-version &lt;version&gt;\n&gt;&gt; arn:aws:elasticloadbalancing:root:file1\n$ aws elbv2 create-listener --load balancer-arn &lt;value&gt; \\\n    --protocol HTTPS \\\n    --port 443 \\\n    --mutual-authentication Mode=verify,\n      TrustStoreArn=&lt;arn:aws:elasticloadbalancing:root:file1&gt;</code></pre> \n<p>If you already have your own private CA, such as AWS Private CA, third-party CA, or self-signed CA, you can upload their CA bundle or CRLs to the Application Load Balancer trust store to enable mutual authentication.</p> \n<p>To test the mutual authentication on Application Load Balancer, <a href=\"https://aws.amazon.com/blogs/compute/introducing-mutual-tls-authentication-for-amazon-api-gateway/\">follow the step-by-step instructions</a> to make a self-signed CA bundle and client certificate using OpenSSL, upload them to the Amazon S3 bucket, and use them with an ELB trust store.</p> \n<p>You can use <code>curl</code> with the <code>--key</code> and <code>--cert</code> parameters to send the client certificate as part of the request:</p> \n<pre><code>$ curl --key my_client.key --cert my_client.pem https://api.yourdomain.com</code></pre> \n<p>Mutual authentication can fail if a client presents an invalid or expired certificate, fails to present a certificate, cannot find a trust chain, or if any links in the trust chain have expired, or the certificate is on the revocation list.</p> \n<p>Application Load Balancer will close the connections whenever it fails to authenticate a client and will record <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-connection-logs.html\">new connection logs</a> that capture detailed information about requests sent to your load balancer. Each log contains information such as the client’s IP address, handshake latency, TLS cipher used, and client certificate details. You can use these connection logs to analyze request patterns and troubleshoot issues.</p> \n<p>To learn more, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/mutual-authentication.html\">Mutual authentication on Application Load Balancer</a> in the AWS documentation.</p> \n<p><strong><u>Now available</u></strong><br /> Mutual authentication on Application Load Balancer is now available in all commercial AWS Regions where Application Load Balancer is available, except China. With no upfront costs or commitments required, you only pay for what you use. To learn more, see the <a href=\"https://aws.amazon.com/elasticloadbalancing/pricing/\">Elastic Load Balancing pricing</a> page.</p> \n<p>Give it a try now and send feedback to <a href=\"https://repost.aws/tags/TAO-wqN9fYRoyrpdULLa5y7g/amazon-ec-2\">AWS re:Post for Amazon EC2</a> or through your usual AWS Support contacts.</p> \n<p><span><strong>Learn more:</strong> </span><br /> <a href=\"https://aws.amazon.com/elasticloadbalancing/application-load-balancer/\">Application Load Balancer</a> product page</p> \n<p>— <a href=\"https://twitter.com/channyun\">Channy</a></p>","author":"Channy Yun","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"efd6cdaf7d152dd5071551bd1896d94c094e7f156b262344ec8f458afd34a960","category":"Tech"}