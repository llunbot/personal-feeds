{"title":"แนะนำการใช้งาน Distributed Tracing ใน Spring Boot 3.2","link":"https://www.somkiat.cc/distributed-tracing-in-spring-boot-3-2/","date":1702440466000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/12/spring-boot-tracing-150x150.png\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/12/spring-boot-tracing-150x150.png 150w, https://www.somkiat.cc/wp-content/uploads/2023/12/spring-boot-tracing-75x75.png 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/12/spring-boot-tracing.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/12/spring-boot-tracing-1024x634.png\" width=\"603\" height=\"373\" /></a></figure>\n\n\n\n<p>จากการเปลี่ยนแปลงสิ่งต่าง ๆ ใน Spring Boot 3.2 นั้น<br />หนึ่งสิ่งที่น่าสนใจคือ Distributed Tracing<br />โดยเป็นการเปลี่ยนแปลงจาก Spring Boot 2.x แบบหน้ามือหลังมือ<br />ไม่สามารถใช้งานร่วมกันได้<br />จึงทำการสรุปการใช้งานไว้นิดหน่อย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เรื่องแรก คือ dependency ที่ใช้งานใน project</strong></p>\n\n\n\n<p>ซึ่งจะใช้งาน dependency ต่าง ๆ ดังนี้</p>\n\n\n\n<ul>\n<li>Spring Boot Actuator ใช้งานปกติ</li>\n\n\n\n<li>Micro meter กับ OpenTelemetry สำหรับการแปลงข้อมูล tracing ให้อยู่ในรูปแบบของ OpenTelemetry</li>\n\n\n\n<li>Exporter สำหรับจัดเก็บข้อมูล tracing โดยในตัวอย่างเลือกใช้งาน Zipkin</li>\n\n\n\n<li>การสร้าง custom span ใน code ของ project จะใช้แนวคิดของ AOP (Aspect Oriented Programming) มาใช้งาน</li>\n</ul>\n\n\n\n<p>ถ้าสร้างเป็น Apache Maven project ในไฟล์ pom.xml เป็นดังนี้</p>\n\n\n\n[gist id=\"e18c58b4fa79f52c800ccc5a0a35e900\" file=\"pom.xml\"]\n\n\n\n<p><strong>เรื่องที่ 2 การ config เพื่อใช้งานในไฟล์ application.properties</strong></p>\n\n\n\n[gist id=\"e18c58b4fa79f52c800ccc5a0a35e900\" file=\"application.properties\"]\n\n\n\n<p><strong>เรื่องที่ 3 สร้าง custom span ใน code</strong></p>\n\n\n\n<p>เริ่มด้วยการสร้าง configuration สำหรับการสร้าง span ด้วย code ใน Spring Boot</p>\n\n\n\n[gist id=\"e18c58b4fa79f52c800ccc5a0a35e900\" file=\"ObserveConfiguration.java\"]\n\n\n\n<p>จากนั้นทำการสร้าง span ด้วยการใช้ @Observered ได้เลย</p>\n\n\n\n[gist id=\"e18c58b4fa79f52c800ccc5a0a35e900\" file=\"Demo.java\"]\n\n\n\n<p>เพียงเท่านี้ก็สามารถใช้งาน Distributed tracing ใน Spring Boot 3.2 แบบง่าย ๆ ได้แล้ว</p>\n\n\n\n<p></p>\n\n\n\n<p><strong>Reference Websites</strong></p>\n\n\n\n<ul>\n<li><a href=\"https://spring.io/blog/2022/10/12/observability-with-spring-boot-3\" target=\"_blank\">https://spring.io/blog/2022/10/12/observability-with-spring-boot-3</a></li>\n\n\n\n<li><a href=\"https://www.baeldung.com/spring-boot-3-observability\" target=\"_blank\">https://www.baeldung.com/spring-boot-3-observability</a></li>\n</ul>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"381479175d82bbbd628e4ac4dd200bd0c11d3594de505f34d457298332b0455b","category":"Thai"}