{"title":"AWS and AWSCC Terraform providers: Better together","link":"https://www.hashicorp.com/blog/aws-and-awscc-terraform-providers-better-together","date":1745510400000,"content":"<p><a href=\"https://www.hashicorp.com/en/blog/products/terraform\">Terraform</a> has two AWS providers: AWS and AWSCC — one handwritten, the other automatically generated. But why the difference? In this post, we’ll dive into: </p>\n\n<ul>\n<li>The reasoning behind these approaches</li>\n<li>How each provider interacts with AWS APIs</li>\n<li>How they complement rather than compete with each other</li>\n</ul>\n\n<p>We’ll also share best practices for using them together and migrating resources from one provider to the other, without recreating them.</p>\n\n<h2>AWS provider</h2>\n\n<p>The <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs\">Terraform AWS provider</a> was the first official Terraform provider for AWS integrations and is built on the AWS SDK. The provider celebrated its 10 year anniversary in 2024, and has surpassed three billion downloads. It includes resources for various AWS services, each making API calls to its respective service. For example, when Terraform creates an Amazon S3 bucket, the AWS provider calls the S3 <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html\">CreateBucket</a> API.</p>\n<img src=\"https://www.datocms-assets.com/2885/1745506749-aws-provider.png\" alt=\"AWS\" /><p>It’s good to note that all resources in the AWS provider, such as the <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket\"><code>aws_s3_bucket</code></a> resource, are handwritten in Go. While this ensures rigorous test coverage, it also makes supporting all AWS resources — and especially day-one support for new services — a challenge due to the prioritization and manual effort involved.</p>\n\n<h2>AWS Cloud Control API</h2>\n\n<p>AWS offers the <a href=\"https://aws.amazon.com/cloudcontrolapi/\">Cloud Control API</a>, a service that enables programmatic access to AWS features and services, often on the day they launch. The Cloud Control API remains up-to-date with the latest AWS resources, enabling developers to integrate their own solutions with Cloud Control API just once and then automatically access the new AWS services and features, without assuming additional integration work. In addition, it provides developers with a standardized set of CRUDL APIs for managing services in an intuitive and descriptive way.</p>\n\n<h2>AWSCC provider</h2>\n\n<p>This consistency in the Cloud Control API enabled AWS and HashiCorp to develop the AWSCC provider which is <a href=\"https://www.hashicorp.com/en/blog/terraform-aws-cloud-control-api-provider-now-generally-available\">generally available as of May 2024</a>. Its uniform interface allows new resources to be automatically generated based on codified rules as soon as new resource schemas are released. Similar to the AWS provider, the AWSCC provider also interacts with AWS APIs. However, the difference is that the AWSCC only interacts with the AWS Cloud Control API when it creates resources. </p>\n<img src=\"https://www.datocms-assets.com/2885/1745506793-awscc-provider.png\" alt=\"AWSCC\" /><p>Each resource interacts with the same Cloud Control API, supporting all or part of the five CRUDL operations: Create, Read, Update, Delete, and List. This also brings the added benefit of reducing the number of interface endpoints required to deploy infrastructure, especially in an <a href=\"https://developer.hashicorp.com/terraform/enterprise/registry/airgapped-providers\">air-gapped environment</a>.The Cloud Control API provides an integrated <a href=\"https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/vpc-interface-endpoints.html\">interface endpoint</a>.</p>\n\n<p>In addition, since the AWSCC is automatically generated when new compatible services are supported by the Cloud Control API, it often provides launch-day support for new AWS services or features. While we aim to add similar support in the AWS provider, the AWSCC provider is more likely to support them first due to its generation process.</p>\n\n<h2>Better together: Using both the AWS and AWSCC provider</h2>\n\n<p>The AWSCC provider is a great complementary provider to add to your existing Terraform configurations using the standard AWS provider. The AWS provider offers the best user experience and performance for over 1,300 resource types across nearly 200 services. The AWSCC provider builds on this by offering access to the latest AWS services generated from the Cloud Control API published by AWS. Using the AWSCC and AWS providers together equips developers with a large catalog of resources across established and new AWS services.</p>\n\n<h2>Using the AWSCC provider</h2>\n\n<p>To deploy a simple VPC using the AWSCC provider, you can use the configuration example below. The developer experience is very similar to using the standard AWS provider — the main difference is that resource and data source names follow a slightly different naming convention.</p>\n<pre><code>provider \"awscc\" {\n  region = \"us-east-1\"\n}\n\nresource \"awscc_ec2_vpc\" \"this\" {\n  cidr_block = \"10.0.0.0/16\"\n}</code></pre><h2>Using the AWSCC provider with the AWS provider</h2>\n\n<p>In the example below, the AWS provider is used to create a simple VPC, while the AWSCC provider creates a subnet within that VPC.</p>\n<pre><code>provider \"aws\" {\n  region = \"us-east-1\"\n}\n\nprovider \"awscc\" {\n  region = \"us-east-1\"\n}\n\nresource \"awscc_ec2_vpc\" \"this\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n\nresource \"aws_subnet\" \"this\" {\n  vpc_id      = awscc_ec2_vpc.this.id\n  cidr_block = \"10.0.1.0/24\"\n}</code></pre><h2>Migrating a resource from AWSCC to the AWS provider</h2>\n\n<p>Use the following code as a starting point. This creates a VPC using the AWSCC provider and a subnet using the AWS provider. Run <code>terraform init</code> and <code>terraform apply --auto-approve</code></p>\n<pre><code>provider \"aws\" {\n  region = \"us-east-1\"\n}\n\nprovider \"awscc\" {\n  region = \"us-east-1\"\n}\n\nresource \"awscc_ec2_vpc\" \"this\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n\nresource \"aws_subnet\" \"this\" {\n  vpc_id     = awscc_ec2_vpc.this.id\n  cidr_block = \"10.0.1.0/24\"\n}</code></pre><p>To migrate the VPC from using the AWSCC provider to the AWS provider, replace the code above with the code below, then replace <code>vpc-exampleID</code> with the VPC ID from the previous step. Then run <code>terraform apply --auto-approve</code>. Note that in a live environment, you should test all the steps in a dev environment and review Terraform plans with <code>terraform plan</code> before approving any Terraform run.</p>\n<pre><code>provider \"aws\" {\n  region = \"us-east-1\"\n}\n\nprovider \"awscc\" {\n  region = \"us-east-1\"\n}\n\nimport {\n  to = aws_vpc.this\n  id = \"vpc-exampleID\"\n}\n\nremoved {\n  from = awscc_ec2_vpc.this\n\n  lifecycle {\n    destroy = false\n  }\n}\n\nresource \"aws_vpc\" \"this\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n\nresource \"aws_subnet\" \"this\" {\n  vpc_id     = aws_vpc.this.id\n  cidr_block = \"10.0.1.0/24\"\n}</code></pre><p>Here are the changes that were made in the code above:</p>\n\n<p>1. Refactor <code>awscc_ec2_vpc</code> to <code>aws_vpc</code> and point the <code>vpc_id</code> argument of <code>aws_subnet</code> to <code>aws_vpc</code>. There are no further changes to the arguments for the VPC since both the AWSCC and AWS resource for VPC use the same <code>cidr_block</code> argument.</p>\n<pre><code>resource \"aws_vpc\" \"this\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n\nresource \"aws_subnet\" \"this\" {\n  vpc_id     = aws_vpc.this.id\n  cidr_block = \"10.0.1.0/24\"\n}</code></pre><p>2. Add an <code>import</code> block to import <code>aws_vpc</code>.</p>\n<pre><code>import {\n  to = aws_vpc.this\n  id = \"vpc-exampleID\"\n}</code></pre><p>3. Add a <code>removed</code> block to remove <code>awscc_ec2_vpc</code> from state.</p>\n<pre><code>removed {\n  from = awscc_ec2_vpc.this\n\n  lifecycle {\n    destroy = false\n  }\n}</code></pre><h2>Migrating a resource from AWS to the AWSCC provider</h2>\n\n<p>Use the following code as a starting point. This creates a VPC using the AWSCC provider and a subnet using the AWS provider. Run <code>terraform init</code> and <code>terraform apply --auto-approve</code></p>\n<pre><code>provider \"aws\" {\n  region = \"us-east-1\"\n}\n\nprovider \"awscc\" {\n  region = \"us-east-1\"\n}\n\nresource \"awscc_ec2_vpc\" \"this\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n\nresource \"aws_subnet\" \"this\" {\n  vpc_id     = awscc_ec2_vpc.this.id\n  cidr_block = \"10.0.1.0/24\"\n}</code></pre><p>To migrate the subnet from using the AWS provider to the AWSCC provider, replace the code above with the code below, and replace the <code>subnet-exampleID</code> with the ID of the subnet created in the previous step. Then run <code>terraform apply --auto-approve</code>. Note that in a live environment, you should test all the steps in a dev environment and review Terraform plans with <code>terraform plan</code> before approving any Terraform run.</p>\n<pre><code>provider \"aws\" {\n  region = \"us-east-1\"\n}\n\nprovider \"awscc\" {\n  region = \"us-east-1\"\n}\n\nimport {\n  to = awscc_ec2_subnet.this\n  id = \"subnet-exampleID\"\n}\n\nremoved {\n  from = aws_subnet.this\n\n  lifecycle {\n    destroy = false\n  }\n}\n\nresource \"awscc_ec2_vpc\" \"this\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n\nresource \"awscc_ec2_subnet\" \"this\" {\n  vpc_id     = awscc_ec2_vpc.this.id\n  cidr_block = \"10.0.1.0/24\"\n}</code></pre><p>Here are the changes that were made in the code above:</p>\n\n<p>1. Refactor <code>aws_subnet</code> to <code>awscc_ec2_subnet</code>. There are no further changes to the arguments for the VPC since both the AWSCC and AWS resource for the subnet use the same <code>vpc_id</code> and  <code>cidr_block</code> argument.</p>\n<pre><code>resource \"awscc_ec2_vpc\" \"this\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n\nresource \"awscc_ec2_subnet\" \"this\" {\n  vpc_id     = awscc_ec2_vpc.this.id\n  cidr_block = \"10.0.1.0/24\"\n}</code></pre><p>2. Add an <code>import</code> block to import <code>awscc_ec2_subnet</code>.</p>\n<pre><code>import {\n  to = awscc_ec2_subnet.this\n  id = \"subnet-exampleID\"\n}</code></pre><p>3. Add a <code>removed</code> block to remove <code>aws_subnet</code> from state.</p>\n<pre><code>removed {\n  from = aws_subnet.this\n\n  lifecycle {\n    destroy = false\n  }\n}</code></pre><h2>Learn more</h2>\n\n<p>For more resources on how to use the AWS and AWSCC providers providers together, refer to this <a href=\"https://catalog.workshops.aws/manage-cloud-resources-with-terraform/en-US\">AWS Workshop for managing cloud resources with Terraform</a>. If you would like to see more examples of migrating state between providers and a few gotchas encountered, refer to this <a href=\"https://www.youtube.com/watch?v=LdAglxXbFH8\">HashiTalk on migrating state between providers</a>.</p>\n","author":"Glenn Chia Jin Wee","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"0d07333792a83455b2684a7a56828d688299725c2d14286e37976b5461b22733","category":"Tech"}