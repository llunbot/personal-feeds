{"title":"Kubernetes secrets management with HCP Vault Secrets","link":"https://www.hashicorp.com/blog/kubernetes-secrets-management-with-hcp-vault-secrets","date":1712678400000,"content":"<p>Most Kubernetes resources and workloads reference the <a href=\"https://kubernetes.io/docs/concepts/configuration/secret/\">Kubernetes Secret</a> object for credentials, API tokens, certificates, and other confidential data. Kubernetes stores secrets unencrypted by default and requires role-based access control (RBAC) rules to ensure least-privilege access. However, it does not offer a straightforward method for tracking the lifecycle and distribution of the secret. Rather than store secrets in Kubernetes, you can use a centralized secrets management solution like <a href=\"https://developer.hashicorp.com/hcp/docs/vault-secrets\">HashiCorp Cloud Platform (HCP) Vault Secrets</a> to audit and manage secrets.</p>\n\n<p>This post demonstrates how to use the <a href=\"https://developer.hashicorp.com/vault/docs/platform/k8s/vso\">Vault Secrets Operator (VSO)</a> to retrieve dynamic secrets from HCP Vault Secrets and write them to a Kubernetes Secret for other workloads and resources to reference. HCP Vault Secrets stores a set of secrets and supports the management and audit of their lifecycle and distribution. The <a href=\"https://github.com/joatmon08/hashicorp-stack-demoapp\">demo app repository</a> for this tutorial uses <a href=\"https://developer.hashicorp.com/terraform/tutorials\">HashiCorp Terraform</a> to write the secrets into HCP Vault Secrets, deploy the Vault Secrets Operator to the Kubernetes cluster, and deploy the custom resources to synchronize a secret for <a href=\"https://argo-cd.readthedocs.io/en/stable/\">Argo CD</a> to create a private repository. This workflow minimizes the need to refactor applications to access a secrets manager directly by using native Kubernetes Secrets.</p>\n<h2>Store secrets in HCP Vault Secrets</h2>\n\n<p>HCP Vault Secrets enables you to manage the lifecycle of credentials and track their usage. For example, a GitOps tool like Argo CD requires credentials to access a private repository on GitHub. These credentials may include a private key, username and password, or token to allow Argo CD to read from a repository. If you <a href=\"https://docs.github.com/en/apps/creating-github-apps/about-creating-github-apps/about-creating-github-apps#about-github-apps\">set up the GitHub App</a>, you need to store the application identifier and private key for Argo CD to use. Storing the credentials in HCP Vault Secrets and installing the Vault Secrets Operator ensures the credentials get synchronized with a Kubernetes Secret, which Argo CD will reference.</p>\n<img src=\"https://www.datocms-assets.com/2885/1712676065-hvs_workflow.png\" alt=\"Workflow\" /><p>The configuration example below uses the <a href=\"https://registry.terraform.io/providers/hashicorp/hcp/latest/docs/resources/vault_secrets_secret\">HCP provider for Terraform</a> to store the GitHub App’s private key, application identifier, and application installation identifier in a HCP Vault Secrets application named <code>argocd</code>:</p>\n<pre><code>resource \"hcp_vault_secrets_app\" \"argocd\" {\n app_name    = \"argocd\"\n description = \"Secrets related to running Argo CD on Kubernetes\"\n}\n\nresource \"hcp_vault_secrets_secret\" \"argocd_github_app_id\" {\n app_name     = hcp_vault_secrets_app.argocd.app_name\n secret_name  = \"githubAppID\"\n secret_value = var.argocd_github_app.id\n}\n\nresource \"hcp_vault_secrets_secret\" \"argocd_github_app_installation_id\" {\n app_name     = hcp_vault_secrets_app.argocd.app_name\n secret_name  = \"githubAppInstallationID\"\n secret_value = var.argocd_github_app.installation_id\n}\n\nresource \"hcp_vault_secrets_secret\" \"argocd_github_app_private_key\" {\n app_name     = hcp_vault_secrets_app.argocd.app_name\n secret_name  = \"githubAppPrivateKey\"\n secret_value = base64decode(var.argocd_github_app.private_key)\n}\n\nresource \"hcp_vault_secrets_secret\" \"argocd_github_url\" {\n app_name     = hcp_vault_secrets_app.argocd.app_name\n secret_name  = \"url\"\n secret_value = var.argocd_github_app.url\n}</code></pre><p>After applying the Terraform configuration, you can access the secrets in HCP Vault Secrets under the <code>argocd</code> application. You then need to synchronize these secrets from the <code>argocd</code> HCP Vault Secrets application into Kubernetes for Argo CD to reference. </p>\n<img src=\"https://www.datocms-assets.com/2885/1712676170-hvs_secrets.png\" alt=\"Argo\" /><h2>Install Vault Secrets Operator</h2>\n\n<p><a href=\"https://developer.hashicorp.com/vault/tutorials/kubernetes/vault-secrets-operator\">Vault Secrets Operator</a> helps synchronize secrets from HCP Vault Secrets or Vault into Kubernetes Secrets. The Operator handles the creation of custom resources that define the authentication to, and retrieval of, secrets <a href=\"https://developer.hashicorp.com/vault/docs/platform/k8s/vso/sources/hvs\">from HCP Vault Secrets</a>.</p>\n\n<p>Here’s how to install Vault Secrets Operator using its Helm chart:</p>\n<pre><code>$ helm repo add hashicorp https://helm.releases.hashicorp.com</code></pre><pre><code>$ helm install -n vault-secrets-operator --create-namespace \\\n  vault-secrets-operator hashicorp/vault-secrets-operator</code></pre><p>The operator’s Helm chart includes a set of custom resource definitions for authenticating to HCP Vault Secrets.</p>\n\n<h2>Authenticate to HCP Vault Secrets from Kubernetes</h2>\n\n<p>The Vault Secrets Operator needs a service principal to authenticate to HCP Vault Secrets. You can use Terraform to create a separate service principal with the viewer role (read-only access) that gives the operator read access to the secret:</p>\n<pre><code>resource \"hcp_service_principal\" \"argocd\" {\n name = \"argocd\"\n}\n\nresource \"hcp_service_principal_key\" \"argocd\" {\n service_principal = hcp_service_principal.argocd.resource_name\n}\n\nresource \"hcp_project_iam_binding\" \"argocd\" {\n project_id   = var.hcp_project_id\n principal_id = hcp_service_principal.argocd.resource_id\n role         = \"roles/viewer\"\n}</code></pre><p>Save the HCP principal’s client ID and key to a Kubernetes Secret in the <code>argocd</code> namespace:</p>\n<pre><code>apiVersion: v1\ndata:\n  clientID: REDACTED\n  clientSecret: REDACTED\nkind: Secret\nmetadata:\n  name: hvs-service-principal\n  namespace: argocd\ntype: Opaque</code></pre><p>The Vault Secrets Operator refers to the <code>HCPAuth</code> resource to authenticate to an HCP project with the read-only service principal you created in the <code>argocd</code> namespace:</p>\n<pre><code>apiVersion: secrets.hashicorp.com/v1beta1\nkind: HCPAuth\nmetadata:\n  name: default\n  namespace: argocd\nspec:\n  method: servicePrincipal\n  organizationID: HCP_ORG_ID\n  projectID: HCP_PROJECT_ID\n  servicePrincipal:\n    secretRef: hvs-service-principal</code></pre><p>After deploying the <code>HCPAuth</code> resource to the cluster, you can now define a resource to synchronize secrets from HCP Vault Secrets to Kubernetes.</p>\n\n<h2>Sync secrets from HCP Vault Secrets</h2>\n\n<p>Use the <a href=\"https://github.com/hashicorp/vault-secrets-operator/blob/main/chart/crds/secrets.hashicorp.com_hcpvaultsecretsapps.yaml\"><code>HCPVaultSecretsApp</code></a> resource to define the secrets VSO synchronizes from Vault to Kubernetes. You can define a destination Kubernetes Secret for the credentials and each key in HCP Vault Secrets will map to a key in the secret. If the name of the HCP Vault Secrets key does not match the required Kubernetes secret key you need for a workload, you can configure transformations for each key in the secret. VSO will also refresh the secret on an interval defined in the <code>refreshAfter</code> attribute. </p>\n\n<p>For example, Argo CD creates private repositories by scanning for Kubernetes Secrets with the <code>argocd.argoproj.io/secret-type</code> label. The <code>HCPVaultSecretsApp</code> resource for this tutorial’s GitHub repository includes that label in the destination. It also reads each secret from HCP Vault Secrets and maps it to the keys required by Argo CD, such as <code>githubAppID</code> and <code>githubAppPrivateKey</code>. The repository secret for Argo CD also requires the <code>type</code> key, which is set to <code>git</code>.</p>\n<pre><code>apiVersion: secrets.hashicorp.com/v1beta1\nkind: HCPVaultSecretsApp\nmetadata:\n  name: github-creds\n  namespace: argocd\nspec:\n  appName: argocd\n  destination:\n    create: true\n    labels:\n      argocd.argoproj.io/secret-type: repo-creds\n      hvs: \"true\"\n    name: github-creds\n    overwrite: false\n    transformation:\n      templates:\n        githubAppID:\n          name: githubAppID\n          text: '{{- get .Secrets \"githubAppID\" -}}'\n        githubAppInstallationID:\n          name: githubAppInstallationID\n          text: '{{- get .Secrets \"githubAppInstallationID\" -}}'\n        githubAppPrivateKey:\n          name: githubAppPrivateKey\n          text: '{{- get .Secrets \"githubAppPrivateKey\" -}}'\n        type:\n          name: type\n          text: git\n        url:\n          name: url\n          text: '{{- get .Secrets \"url\" -}}'\n  hcpAuthRef: default\n  refreshAfter: 1h</code></pre><p>While the key names in HCP Vault Secrets do match the required keys for Argo CD, you add the transformations to demonstrate the value of re-mapping secrets and adding required fields, such as the <code>type</code>. In general, use the <code>transformation</code> field to create a Kubernetes Secret that conforms to the expected schema of any resource that uses it.</p>\n\n<p>Once you apply the resource, VSO creates a Kubernetes Secret named <code>github-creds</code> with the fields and values defined in the transformation.</p>\n<pre><code>$ kubectl get secrets -n argocd github-creds -o yaml</code></pre><pre><code>apiVersion: v1\ndata:\n  _raw: REDACTED\n  githubAppID: ODU4OTMx\n  githubAppInstallationID: NDg2Mzg5OTI=\n  githubAppPrivateKey: REDACTED\n  type: Z2l0\n  url: REDACTED\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/component: secret-sync\n    app.kubernetes.io/managed-by: hashicorp-vso\n    app.kubernetes.io/name: vault-secrets-operator\n    argocd.argoproj.io/secret-type: repo-creds\n    hvs: \"true\"\n  name: github-creds\n  namespace: argocd\n  ownerReferences:\n  - apiVersion: secrets.hashicorp.com/v1beta1\n    kind: HCPVaultSecretsApp\n    name: github-creds\n    uid: 729d7860-0065-4802-b892-dffbe15bbffb\ntype: Opaque</code></pre><p>Argo CD recognizes the secret because of the <code>argocd.argoproj.io/secret-type: repo-creds</code>label. It creates a repository resource linked to the repository URL and GitHub App.</p>\n<img src=\"https://www.datocms-assets.com/2885/1712676194-argocd_repository.png\" alt=\"Repositories\" /><p>To verify any changes or review access to the secret, you can use the activity logs for the application in HCP Vault Secrets. The activity logs in HCP Vault Secrets indicate that the <code>argocd</code> service principal used by VSO has listed secrets under the <code>argocd</code> application.</p>\n<img src=\"https://www.datocms-assets.com/2885/1712676182-hvs_activity_logs.png\" alt=\"Activity\" /><p>If you create a new GitHub App and update the secrets in HCP Vault Secrets, VSO updates the <code>github-creds</code> secret with the new application IDs and private keys the next time it refreshes the secret. Argo CD updates the repository resource to use the new secrets without disrupting the repository connection. If you need to make changes to many GitHub Apps or credentials, you can update them all in HCP Vault Secrets without searching through Kubernetes namespaces and clusters.</p>\n\n<h2>Learn more</h2>\n\n<p>If you currently store credentials in Kubernetes Secrets, you can copy them to HCP Vault Secrets and create resources to synchronize them into your Kubernetes cluster. This process avoids significant refactoring of Kubernetes workloads and lets you manage and track the secret lifecycles in a central location. While the example demonstrates how to synchronize secrets for Argo CD, you can use this pattern for other Kubernetes workloads and resources.</p>\n\n<p>To get started, you can:</p>\n\n<ul>\n<li><a href=\"https://portal.cloud.hashicorp.com/sign-up\">Sign up for HCP</a> to start using HCP Vault Secrets. </li>\n<li>Review our <a href=\"https://developer.hashicorp.com/hcp/docs/vault-secrets\">documentation</a> to learn more about HCP Vault Secrets and check out our tutorials on using <a href=\"https://developer.hashicorp.com/vault/tutorials/hcp-vault-secrets-get-started/kubernetes-vso\">HCP Vault Secrets with Kubernetes</a>. </li>\n<li>Find a complete list of available sources for secrets syncing in the <a href=\"https://developer.hashicorp.com/vault/docs/platform/k8s/vso/sources\">Vault Secrets Operator documentation</a>.</li>\n<li>Learn how to <a href=\"https://www.hashicorp.com/blog/use-vault-to-manage-api-tokens-for-the-terraform-cloud-operator\">use Vault to manage API tokens for the Terraform Cloud Operator</a>.</li>\n</ul>\n","author":"Rosemary Wang","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"72fd8ab72f3edb2a385bc474cb9bdb7f0c09d5b1f7fb0f3f46391df152d06419","category":"Tech"}