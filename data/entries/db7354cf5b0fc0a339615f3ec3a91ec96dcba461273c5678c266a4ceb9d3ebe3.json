{"title":"บันทึกการแบ่งปันในเรื่อง Full-Stack Automation Software Testing ที่ Skooldio","link":"https://www.somkiat.cc/sharing-full-stack-automation-software-testing-at-skooldio/","date":1731642566000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/11/testing-2024-150x150.jpg\" alt=\"\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/11/testing-2024-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2024/11/testing-2024-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/11/testing-2024.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/11/testing-2024.jpg\" alt=\"\" width=\"593\" height=\"347\" /></a></figure>\n\n\n\n<p>หลังจากการแบ่งปันความรู้และประสบการณ์ที่พอรู้มาบ้าง<br />ใน <strong><a href=\"https://www.skooldio.com/workshops/fullstack-automation-software-testing\" target=\"_blank\">course Full-Stack Automation Software Testing รุ่น 3 ที่ Skooldio</a></strong><br />ซึ่งในครั้งนี้น่าได้แบ่งปันเรื่องที่ตัวผมเองสนใจ<br />ทั้งเรื่องของ Contract testing ด้วย <a href=\"https://docs.pact.io/\" target=\"_blank\">Pact</a><br />ทั้งเรื่องของ Service component testing<br />ทั้งเรื่องของ Internal vs External testing technique <br />และการจัดการ dependency ต่าง ๆ ของระบบที่ต้องการทดสอบ <br />เช่น database และ external system เป็นต้น</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เทคนิคที่แนะนำเกี่ยวกับการจัดการ dependency ของระบบที่ต้องการทดสอบ</strong></p>\n\n\n\n<p>มีทั้งแบบ internal คือ จัดการใน code ของ test case<br />และ external คือ การจัดการอยู่ข้างนอก code<br />ยกตัวอย่างเช่น</p>\n\n\n\n<p><strong>การจัดการ database และ external system มีเทคนิค และ เครื่องมือดังนี้</strong></p>\n\n\n\n<ul>\n<li>ใช้งาน mock library ของแต่ละ programming และ framework ไปเลย เช่น jest, mockito เป็นต้น</li>\n\n\n\n<li>ใช้งาน container เข้ามาช่วย เช่น <a href=\"https://testcontainers.com/\" target=\"_blank\">Test container</a> สามารถจัดการใน code ของ test case ได้เลย แต่ต้องมี docker ในเรื่องก่อน</li>\n\n\n\n<li>จัดการ external system เช่น HTTP REST API ด้วย library ใน code ต่าง ๆ ได้ เช่น Nock,  MSW, Gock และ WireMock เป็นต้น หรือใช้งาน Mock API Server ข้างนอกได้ เช่น Postman Mock Server, Stubby </li>\n\n\n\n<li>ในส่วนของ Frontend ก็จัดการ request ต่าง ๆ ที่ออกจาก web browser ด้วยพวก Network routing ด้วย Playwright และ Cypress แบบง่าย ๆ</li>\n</ul>\n\n\n\n<p>เป้าหมายของเครื่องมือ และ เทคนิคต่าง ๆ เหล่านี้<br />ใช้งานเพิ่มช่วยควบคุม dependency ต่าง ๆ ให้ทำงานตามที่เราต้องการ<br />ทั้ง success case, failure case และ edge case ต่าง ๆ<br />เพื่อช่วยให้สามารถ run test case ซ้ำ ๆ มีความเสถียร และ น่าเชื่อถือมากยิ่งขึ้น<br />เมื่อผลการทดสอบผ่านตามที่ต้องการแล้ว<br />ถึงจะทำ integration test และ end-to-end test ต่อไป<br />ก่อนที่จะทำการส่งมอบระบบงานไปยังผู้ใช้งานนั่นเอง</p>\n\n\n\n<p><em>ปล. ในครั้งนี้มีตัวอย่างของการนำ BDD มาใช้งาน  ซึ่งเป็นคำถามในการแบ่งปัน<br />โดยในยกตัวอย่างการใช้งาน Cucumber และ Robot framework<br />ที่สนับสนุน Gherkin style ของ feature file มาอีกด้วย</em></p>\n\n\n\n<p><br /></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"db7354cf5b0fc0a339615f3ec3a91ec96dcba461273c5678c266a4ceb9d3ebe3","category":"Thai"}