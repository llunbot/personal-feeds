{"title":"Managing Credentials in Terraform Cloud & Enterprise","link":"https://www.hashicorp.com/blog/managing-credentials-in-terraform-cloud-and-enterprise","date":1631905200000,"content":"<p>There are several ways to manage credentials or other secret types in Terraform Cloud and Terraform Enterprise, either natively, or with purpose-built secrets management utilities like HashiCorp Vault, so this is a somewhat opinionated article that lists what I believe are currently the best options. Please note this is not a replacement for some other best practices, such as keeping your Terraform CLI and code up to date.</p>\n<p>The described patterns follow some common principles. Credentials should be:</p>\n<ul>\n<li>As unique as possible per workspace</li>\n<li>Easy to rotate</li>\n<li>As dynamic as possible</li>\n<li>Protected with RBAC</li>\n</ul>\n<p>There are also some nuances between Terraform Cloud and Terraform Enterprise that I will call out in each section.</p>\n<p>In terms of security, both <em>Cloud</em> and <em>Enterprise</em> products encrypt their sensitive variables using the Vault Transit secrets engine and do not allow any external API call to decrypt these values. For more details please see the <a href=\"https://www.terraform.io/docs/cloud/architectural-details/data-security.html\">Data Security page</a>.</p>\n<p>If you still have questions by the end of this blog post, try <a href=\"https://www.hashicorp.com/community/office-hours\">attending one of our community office hours</a> or <a href=\"https://www.hashicorp.com/go/1-1-technical-office-hours\">booking a 1:1 technical session</a>.</p>\n<h2><a href=\"#managing-credentials-using-only-terraform-workspaces\">»</a><a></a>Managing Credentials Using Only Terraform Workspaces</h2>\n<p>Using only Terraform workspaces, your cloud vendor's Terraform provider, and the <a href=\"https://registry.terraform.io/providers/hashicorp/tfe/latest/docs\">Terraform Cloud/Enterprise provider</a>, you can set up a “Credentials” workspace that is able to generate new credentials and rotate the ones used by other workspaces. To avoid the <a href=\"https://www.hashicorp.com/resources/secret-zero-mitigating-the-risk-of-secret-introduction-with-vault\">secret zero</a> problem, when setting up the credentials workspaces, you can make use of the Terraform Agents pattern described in the next section.</p>\n<p><em>Note: In Terraform Cloud all workspaces live in the same Organization.</em></p><img src=\"https://www.datocms-assets.com/2885/1631903169-tfe-credentials-with-tf-workspaces.png\" /><p><strong>Pros</strong></p>\n<ul>\n<li>There’s a separation between development environments.</li>\n<li>It’s possible to use different types of secrets.</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>Requires a 3rd party API trigger to force a re-deployment of all “Credentials” workspaces.</li>\n<li>Complex RBAC setup that does not exist in the free tier.</li>\n<li>Secrets are stored in the “Credentials” workspace state.</li>\n<li>“Credentials” workspaces require a Terraform Cloud/Enterprise User or Team token to access other workspaces that reside in another Organization.</li>\n</ul>\n<h2><a href=\"#managing-credentials-using-only-terraform-agents\">»</a><a></a>Managing Credentials Using Only Terraform Agents</h2>\n<p>Both Terraform Cloud Business tier and Terraform Enterprise support running your code using external agents. This feature is called <a href=\"https://www.terraform.io/docs/cloud/agents/index.html\">Terraform Agents</a>. Any cloud provider declared in your Terraform code is able to take advantage of the credentials set in the Terraform Agent environment, which means the credentials do not need to be set at the workspace level.</p>\n<p>HashiCorp Solutions Engineer <a href=\"https://github.com/assareh\">Andy Assareh</a> has <a href=\"https://github.com/assareh/tfc-agent\">a repo</a> and <a href=\"https://www.youtube.com/watch?v=218BMVVDjyM\">a recording</a> to help walk you through this pattern.</p><img src=\"https://www.datocms-assets.com/2885/1631903157-tfe-credentials-with-tf-agents.png\" /><p><strong>Pros</strong></p>\n<ul>\n<li>There’s a separation between development environments.</li>\n<li>No credentials are set in project workspaces.</li>\n<li>No credentials are stored in the workspace state.</li>\n<li>One of the least complex patterns.</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>Only addresses cloud access credentials, not other kinds of secrets.</li>\n<li>Requires Terraform Cloud Business tier.</li>\n<li>Careful RBAC is required to ensure developers are not able to change <a href=\"https://www.terraform.io/docs/cloud/api/agents.html\">Agent Pools</a> in the workspace.</li>\n<li>Difficult to scale and audit when using multiple accounts.</li>\n<li>In Terraform Cloud Business tier, there are some limits on the number of Agents and Agent Pools an Organization can have.</li>\n<li>Difficult to have a 1:1 mapping between workspace and Agent.</li>\n</ul>\n<h2><a href=\"#managing-credentials-using-vault\">»</a><a></a>Managing Credentials Using Vault</h2>\n<p>It’s no secret <a href=\"https://www.vaultproject.io/\">HashiCorp Vault</a> is able to generate dynamic credentials for all major cloud vendors, databases, etc. For those who know about Vault, this integration with Terraform is the first solution they ask about, since <a href=\"https://www.hashicorp.com/products/vault/secrets-management\">secrets management</a> is Vault’s primary use case.  Here are a few patterns to make that integration work.</p>\n<h3><a href=\"#direct-integration-with-a-vault-plugin\">»</a><a></a>Direct Integration with a Vault Plugin</h3>\n<p>There isn’t much to explain in this workflow. Most of the complexity is in setting up Vault authentication and some Terraform template code.</p><img src=\"https://www.datocms-assets.com/2885/1631903188-tfe-vault-direct-integration.png\" /><p><strong>Pros</strong></p>\n<ul>\n<li>Dynamic credentials are used to access Vault using the workspace identity, meaning there are no hardcoded credentials.</li>\n<li>Different credentials for each environment/workspace.</li>\n<li>Different credentials for planning and applying. For example, <a href=\"https://www.terraform.io/docs/cloud/run/index.html#speculative-plans\">speculative plans</a> can have read-only credentials because Vault can create <a href=\"https://github.com/gitrgoliveira/vault-plugin-auth-tfe#vault-clients--identity\">different entities depending on the run status</a>.</li>\n<li>Cloud credentials retrieved from Vault are ephemeral.</li>\n<li>Support for multiple types of Vault secrets.</li>\n<li>Low complexity Terraform code.</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>Need to install a 3rd party plugin. <a href=\"https://github.com/gitrgoliveira/vault-plugin-auth-tfe\">More details are in the plugin repo</a>.</li>\n<li>Because we are using the Vault provider, secrets will be present in the state file.</li>\n<li>Requires Terraform code changes to use the <a href=\"https://registry.terraform.io/providers/hashicorp/vault/latest/docs\">Vault provider</a>.</li>\n<li>Increase in complexity to set up Vault correctly.</li>\n</ul>\n<h2><a href=\"#integration-with-ci-cd\">»</a><a></a>Integration with CI/CD</h2>\n<p>At the heart of this integration pattern, is the ability to confidently authenticate to Vault with an identity that is unique and combines workflow, repository, and branch/environment.</p>\n<p>This is not the case with all CI/CD implementations, so I’m only mentioning two implementations where I know it’s possible.</p>\n<p>Vault tokens should be very short-lived and linked to an entity, to restrict access in case any token gets leaked and allow for better auditing. <em>Avoid storing Vault tokens as secrets!</em></p>\n<p>Regarding the workflow, the CI/CD runner will need to authenticate to Vault and retrieve:</p>\n<ul>\n<li>A <a href=\"https://www.vaultproject.io/docs/secrets/terraform\">dynamic TFE/TFC user token</a></li>\n<li>A <a href=\"https://learn.hashicorp.com/tutorials/vault/getting-started-dynamic-secrets\">dynamic cloud access credential</a></li>\n<li>Any other secret to be used by the workspace</li>\n</ul>\n<p><strong>Pros</strong></p>\n<ul>\n<li>It’s possible to have 0 hardcoded or long-lived credentials, using only identities.</li>\n<li>There’s a separation between development environments.</li>\n<li>Different credentials for different branches.</li>\n<li>Terraform Enterprise and Terraform Cloud credentials are not stored in Terraform state or the CI/CD platform.</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>Requires a CI/CD system able to assign an identity that combines a unique run id, workflow/pipeline, repository, and commit id.</li>\n<li>May lead to secret sprawl.</li>\n<li>Increase in pipeline complexity.</li>\n</ul>\n<p><em>These pros and cons apply to the two subsections below.</em></p>\n<h3><a href=\"#gitlab-ci-cd-integration\">»</a><a></a>GitLab CI/CD Integration</h3>\n<p>GitLab runners are able to <a href=\"https://docs.gitlab.com/ee/ci/secrets/index.html\">authenticate to Vault</a> using the JWT auth backend, where you can configure separate roles for staging, dev, or production.</p>\n<p>Once authentication has been solved, GitLab CI/CD will be able to retrieve the necessary secrets and interact with the Terraform Cloud/Terraform Enterprise API. <a href=\"https://gitlab.com/-/snippets/2169718\">Here’s an example</a>.</p>\n<p>For private repositories, you’ll need to have GitLab Premium.</p><img src=\"https://www.datocms-assets.com/2885/1631903180-tfe-gitlab-cicd-integration.png\" /><h3><a href=\"#github-actions-integration\">»</a><a></a>GitHub Actions Integration</h3>\n<p>For GitHub Actions to authenticate to Vault there are two options:</p>\n<ul>\n<li>Set an AppRole as an <a href=\"https://colinwilson.uk/2021/01/03/environment-specific-secrets-in-github-workflows/\">Environment Secret</a> in your repo and use the <a href=\"https://github.com/marketplace/actions/vault-secrets#vault-github-action\">Vault GitHub Action</a></li>\n<li>Use the <a href=\"https://github.com/Mongey/vault-plugin-auth-github-actions\">community Vault Auth plugin for GitHub Actions</a></li>\n</ul>\n<p>If you use AppRole, please make sure you also have a cron job set up to <a href=\"https://registry.terraform.io/providers/integrations/github/latest/docs/resources/actions_environment_secret\">rotate the environment secrets</a>, and use the “Repository Environments” to distinguish between production and non-production.</p>\n<p>If you use the custom Vault GitHub Action authentication backend, right now it’s not possible to distinguish which branch is being executed.</p>\n<h2><a href=\"#pick-the-solution-that-s-right-for-you\">»</a><a></a>Pick the Solution that's Right For You</h2>\n<p>There is no right answer or one-size-fits-all solution to managing your credentials and secrets within Terraform Cloud and Terraform Enterprise. This is highly dependent on your current requirements, environment, tools, etc, so it’s up to you to select the pattern that is best for you and your team, taking into account the pros and cons of each solution.</p>\n<p>Please bear in mind that all of these solutions require you to plan and execute an efficient team/application onboarding process to be successful. To learn more about onboarding applications into Vault check out our other blog post <a href=\"https://www.hashicorp.com/blog/onboarding-applications-to-vault-using-terraform-a-practical-guide\">Onboarding Applications to Vault Using Terraform: A Practical Guide</a> or <a href=\"https://www.hashicorp.com/go/1-1-technical-office-hours\">book a 1:1 session with one of our experts.</a></p>","author":"Ricardo Oliveira","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"97795d3b7617bfacafa5bff919847c9b0f2152847f9743cae729b3cdd2d7fbc2","category":"Tech"}