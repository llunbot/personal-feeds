{"title":"How Smashing Magazine Uses TinaCMS To Manage An Editorial Workflow","link":"https://smashingmagazine.com/2023/09/smashing-magazine-tinacms-manage-editorial-workflow/","date":1695060000000,"content":"<p>Smashing Magazine is drastically different today than it was just a few years ago, and you may not have even noticed. That’s how it often is with back-end development — the complete architecture changes, yet the front end you see is still very much the same.</p>\n<p>You may recall this site was powered by WordPress up until 2019 <a href=\"https://www.smashingmagazine.com/2020/01/migration-from-wordpress-to-jamstack/\">when the team migrated our large archive</a> of articles, guides, and tutorials to a Jamstack setup. The change was less of a mission than it was an experiment that stuck around. Sure, WordPress is still an incredibly viable CMS, especially for a site like Smashing Magazine that focuses on long-form content. But after seeing a blazing 6× improvement in page speed performance, Jamstack was something we couldn’t dismiss because the faster experience was a clear win for readers like you.</p>\n<p>What we may not have expected was how the migration from WordPress to Jamstack would <strong>improve our developer experience</strong> in the process. We knew for sure that users benefitted from the change, but it wound up making our lives easier as well, as it opened up even more possibilities for what we can accomplish on the site — a real win-win outcome!</p>\n<p>It took work to get to where we are today. We went from authoring in WordPress to authoring in Markdown files, so it’s not like we started reaping benefits right away. It is only now that <strong>we have integrated</strong> <a href=\"https://tina.io/\"><strong>TinaCMS</strong></a> <strong>to our stack</strong> that our entire team is reaping the full benefits of our Jamstack architecture.</p>\n<p>That’s really what I want to share in this article: a peek behind Smashing Magazine’s curtains at <strong>how we manage content</strong>. TinaCMS is not WordPress, so it has influenced the way we work. We think it’s pretty cool because TinaCMS is all about the developer experience in a CMS context, so, of course, the inner developers in us have nerded out over the sorts of things that we are now able to do.</p>\nTina Who?\n<p><a href=\"https://tina.io/\">TinaCMS</a> is not a household name in the CMS space. I’d say that’s likely by design, as its niche is clearly in the developer community rather than a “low-code” offering like WordPress or a completely “no-code” solution like Squarespace. TinaCMS has a clear audience, and the team here at Smashing Magazine just so happens to fit that profile in spades. Not everyone on the team is a developer, but most, if not all, of us are comfortable working in Git and the command line.</p>\n<p>TinaCMS can be broadly characterized in two ways: an <strong>open-source Git-based CMS</strong> that <strong>supports Markdown files</strong>. In fact, TinaCMS saves content to Markdown, MDX, YML, and JSON, allowing a team like us to query data on top of our static assets. It also creates a GraphQL API for that content, allowing a team like us to query data from our files. And since it’s all connected to a GitHub repo, we own and control <em>everything</em>. That’s an enticing value proposition for a company whose business <strong>is</strong> content. A self-hosted WordPress instance is similar in that regard, but having all of our content in a centralized repo that contains hard files makes “owning” our content more tangible than it is to store it in an SQL database on some server.</p>\n<p>That’s a bit about TinaCMS. It’s designed for Jamstack the same way that you might think of Sanity, Storyblok, or Netlify CMS, but it goes further than what we’ve seen, offering everything from a <a href=\"https://tina.io/docs/graphql/overview/\">content API</a> (in GraphQL) and <a href=\"https://tina.io/docs/contextual-editing/overview/\">visual editing</a> to an <a href=\"https://tina.io/docs/forestry/local-workflow/\">integrated local development workflow</a> that serves us quite well here at Smashing Magazine.</p>\nThe Current Writing Process\n<p>Before we look at TinaCMS’s UI and specific features, I think it’s worth sharing how content is written before it’s published on the site. It’s far from perfect and still a work in progress, but it will give you an idea of how we work and why TinaCMS fits our needs.</p>\n<p>There are two paths we follow for writing articles: write in a <strong>Markdown file</strong> connected to a GitHub repo, or write in a <strong>collaborative space</strong>, like Dropbox Paper or Google Docs. The path we take is whichever one a contributing author is most comfortable using because both have pros and cons.</p>\n<p>To be honest, the process is pretty much the same, no matter which path we use. The author writes something, and an editor on the team reads and edits it. Dropbox Paper exports to Markdown, so it’s really a matter of whether the author prefers a GUI or a code editor for writing. Dropbox Paper might be a <em>little</em> more work because it requires the extra step of exporting content and then cleaning up the file (because export is never perfect).</p>\n<p>Once an article reaches its final draft, it is given additional formatting for things like pull quotes and related articles before it is committed to a pull request that, when merged, triggers the site to rebuild itself and deploy the changes.</p>\nThe New Writing Process\n<p>Our new writing process abstracts the old process of having to work in either Markdown or a third-party service. Instead, we get to write directly in the TinaCMS editor, preview our work, hit Publish, and <strong><em>voilà</em></strong>, an article is born.</p>\n<p>Tina’s light touch is a big reason why it works for our team. Not everyone is forced to use TinaCMS. For example, Vitaly prefers to write Markdown in his code editor on a local Git branch. No problem. That article can be viewed in TinaCMS once he pushes it to GitHub.</p>\n<p>You’re unimpressed, right? If so, that’s good because it’s the ease of this new process that we love so much. There’s nothing inherently impressive about our new process because it sports features we were already using in WordPress before the transition took place. What’s impressive is not the features but that <strong>the features are available in our Jamstack architecture</strong>.</p>\n<p>That’s the third “win” for our team in all of this:</p>\n<ol>\n<li>The site’s faster performance is a win for you, </li>\n<li>Owning hard files of our content is a win for us, and </li>\n<li>The fact that we get to write, edit, and collaborate in a CMS that supports the new architecture is a win for us and authors alike.</li>\n</ol>\n<p>It’s truly unique that TinaCMS offers the sorts of features we love about WordPress and has ported them into a Jamstack experience. Other CMSs designed for the Jamstack might offer one or two of the features we wanted, but TinaCMS covers them all. I’ll give you a look at those specific features.</p>\nThe Editing UI\n<p>First off, I think it’s pretty cool that we are essentially creating Markdown files in a CMS editor.</p>\n<p>It looks like (classic) WordPress, smells like (classic) WordPress, but produces hard files that get committed directly to our repo.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-magazine-tinacms-manage-editorial-workflow/tina-editor.png\" /></p>\n<p>Like many full-fledged CMSs, Tina supports <a href=\"https://tina.io/docs/extending-tina/custom-field-components/\">custom fields</a>. That way, we have an easy way to ensure we’re inputting all the correct content in the correct places. Those fields are mapped in the content API, allowing us to query them to populate the front end. It’s true visual editing in the Jamstack.</p>\nBranch Switching &amp; Live Previews\n<p>This is a killer feature because it doesn’t require us to deploy anything to generate a preview of an article that we can share with authors for a final editing pass before publishing the article.</p>\n<p>How does that work? It’s clever, really. Notice the button in the screenshot indicates we’re on the master branch of our repo. That’s right: we’re <strong>fully integrated with GitHub</strong> to the extent that we can switch branches. Tina’s <a href=\"https://tina.io/docs/drafts/editorial-workflow/#preview-links\">preview button</a> integrates with branch deployments offered by services like Netlify, Vercel, and others. For us, that means we can work on a branch and click preview to visit the Netlify preview for that branch. That’s how we’re able to work on an article without it winding up in front of hundreds of thousands of readers.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-magazine-tinacms-manage-editorial-workflow/tina-branch-selector.png\" /></p>\nWorking Locally\n<p>Another neat thing? We can actually log into the Smashing Magazine admin and choose whether we want to <a href=\"https://tina.io/docs/forestry/overview/#improved-local-workflow\">work locally</a> or directly in production.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-magazine-tinacms-manage-editorial-workflow/tina-editing-mode.png\" /></p>\n<p>As long as we have a local version of the site running, we can work in a sandboxed environment that prevents us from publishing accidental changes. Plus, it’s a nice — and safe — way to collaborate with others on the team to get an article prepped in advance of a live preview.</p>\n<p>From there, we create a new branch and write to it before putting the content through the editing process, getting a live preview ready, and then merging the branch. That triggers a fresh site build, and everything gets deployed for your reading pleasure.</p>\n<p>It’s also worth mentioning that TinaCMS automatically protects the repo’s main branch to prevent us (or, most likely, yours truly) from accidentally writing to it.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-magazine-tinacms-manage-editorial-workflow/tina-protected-branch.png\" /></p>\nThe Media Manager\n<p>What’s a CMS without a <a href=\"https://tina.io/docs/reference/media/overview/\">media manager</a>?! </p>\n<p>It’s funny, but having a flexible option in a Jamstack-based CMS is harder to find than you might think.</p>\n<p>Tina can commit media assets to your repository, but for a site of our scale, that would make our repository unmanageable. Instead, we use Tina’s DigitalOcean Spaces integration. Again, we like the idea of owning all of our content, and integrating it with our media storage solution is important.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-magazine-tinacms-manage-editorial-workflow/tina-media-folders.png\" /></p>\n<p>Uploading a file, like an image, places it on our DigitalOcean Spaces account. Once the site re-builds itself, the images are optimized and sent off to Cloudinary, which <a href=\"https://www.smashingmagazine.com/2021/11/transforming-optimizing-images-videos-wordpress-website/\">converts the image into several different formats and sizes</a>, serving the most optimal version for the reader based on their device, location, network connection, or whatever.</p>\n<p><img src=\"https://files.smashing.media/articles/smashing-magazine-tinacms-manage-editorial-workflow/tina-media-file.png\" /></p>\nThe Editorial Workflow\n<p>All of the features I’ve been writing about are part of the TinaCMS <a href=\"https://tina.io/editorial-workflow/\">“Editor Workflow”</a> that is <a href=\"https://tina.io/blog/Introducing-Editorial-Workflow-Features-for-your-Team/\">new as of July 10</a> — a mere couple of weeks before I started drafting this article. That’s how fresh all of this is for us, and TinaCMS, for that matter. You might expect a brand-new set of robust features to be a little bumpy at first, but it’s incredibly smooth.</p>\n<p>I think a video from the TinaCMS site does a better job illustrating the flow from writing to review, from review to approval, and subsequent post-publish updates.</p>\n<p>The Editor Workflow is available but currently implemented as a plugin for <a href=\"https://tina.io/pricing/\">Business plans and up</a> rather than having it baked right into TinaCMS. Coming from the WordPress world, I love the concept of keeping the CMS light and extending it with specific functionalities, if needed.</p>\nHope You Enjoyed The Tour\n<p>Well, that’s a look at how the sausage is made here at Smashing Magazine. I personally enjoy seeing how things work at different organizations because no two projects are ever identical. What ends up in a stack and how work happens is largely based on specific needs that are unique to a certain team.</p>\n<p>What works for us might seem crazy to you — or awesome. I don’t know. But we’re excited about it because it accommodates how we work and has already delivered a number of big wins for everyone.</p>\n<p>TinaCMS is in active development, too, so it is very possible we may see new features and functionality that we decide to adopt. For example, there’s now a <a href=\"https://tina.io/docs/self-hosted/overview/\">self-hosted version of the CMS</a>. And looking at <a href=\"https://tina.io/roadmap/\">the roadmap</a>, we also have more things to look forward to in the next three months.</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2020/01/migration-from-wordpress-to-jamstack/\">How Smashing Magazine Manages Content: Migration From WordPress To JAMstack</a>,” Sarah Drasner</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/01/smashingmag-performance-case-study/\">How We Improved SmashingMag Performance</a>,” Vitaly Friedman</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/12/core-web-vitals-case-study-smashing-magazine/\">Improving Core Web Vitals, A Smashing Magazine Case Study</a>,” Barry Pollard</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/03/floating-labels-performance-lighthouse/\">Gone Floating Labels And Green Lighthouse Scores</a>,” Vitaly Friedman</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"97432ade590a41c2b1c884100b59f456386ad714c40f280983b32b1c1bda1030","category":"Tech"}