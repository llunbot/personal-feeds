{"title":"WebKit Features in Safari 17.2","link":"https://webkit.org/blog/14787/webkit-features-in-safari-17-2/","date":1702317605000,"content":"<p>Web technology is constantly moving forward, with both big new features and small subtle adjustments. Nowadays, web developers expect web browsers to update multiple times a year, instead of the once or twice a year typical of the late 2000s — or the once every two-to-five years typical before then. Over the last several years, you’ve let us know that you want our updates to ship more often. In response, we changed the way Safari is numbered just over two years ago.</p>\n<p>A new version of Safari shipped 17 times in the last 28 months — version 15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 17.0, 17.1, and now, today’s Safari 17.2. This makes it possible to spread out the arrival of new web technology more widely across the year, and get it into the hands of your users that much sooner.</p>\n<p>With 39 features and 169 fixes, today’s release is Safari’s biggest December release of web technology ever. Let’s take a look at what’s inside.</p>\n<h2><a name=\"html\"></a>HTML</h2>\n<h3><a name=\"exclusive-accordions\"></a>Exclusive accordions</h3>\n<p>Safari 17.2 now supports the <code>name</code> attribute on the <code>&lt;details&gt;</code> element — which moves some commonly-used functionality from needing JavaScript to being baked into HTML. If you use the <code>name</code> attribute to give a series of <code>details</code> elements the same name, then only one in the series will be open at a time.</p>\n<pre><code><span>&lt;<span>details</span> <span>name</span>=<span>\"foobar\"</span> <span>open</span>&gt;</span>\n  <span>&lt;<span>summary</span>&gt;</span>Item 1<span>&lt;/<span>summary</span>&gt;</span>\n  <span>&lt;<span>p</span>&gt;</span>Since this first item has an open attribute, it’s open by default.<span>&lt;/<span>p</span>&gt;</span> \n<span>&lt;/<span>details</span>&gt;</span>\n<span>&lt;<span>details</span> <span>name</span>=<span>\"foobar\"</span>&gt;</span>\n   <span>&lt;<span>summary</span>&gt;</span>Item 2<span>&lt;/<span>summary</span>&gt;</span>\n  <span>&lt;<span>p</span>&gt;</span>When you clicked this item, any other open item will automatically close.<span>&lt;/<span>p</span>&gt;</span>\n<span>&lt;/<span>details</span>&gt;</span>\n<span>&lt;<span>details</span> <span>name</span>=<span>\"foobar\"</span>&gt;</span>\n   <span>&lt;<span>summary</span>&gt;</span>Item 3<span>&lt;/<span>summary</span>&gt;</span>\n  <span>&lt;<span>p</span>&gt;</span>Now, developers don’t have to write any JavaScript to get this behavior.<span>&lt;/<span>p</span>&gt;</span> \n<span>&lt;/<span>details</span>&gt;</span>\n</code></pre>\n<p>Any time a user clicks to open a second item, the first item automatically closes. This <em>can</em> make for a better user experience, although do make sure it’s right for your project. Think about users who might want or need to compare one item to another. Consider whether to not it will be annoying to have to tap over and over on each bit of content in order to read each one. This pattern can be frustrating when used inappropriately — even inaccessible.</p>\n<p>Here’s an example to compare the difference. Try it in a <a href=\"https://caniuse.com/mdn-html_elements_details_name\">browser with support</a>.</p>\n<p></p>\n<p>\n</p><h3><a name=\"one-time-codes\"></a>One time codes</h3>\n<p>Previously supported in Safari through other technology, the ability to have input fields that suggest received one-time codes is now available in WKWebView for iOS 17.2 and iPadOS 17.2.</p>\n<pre><code><span>&lt;<span>label</span> <span>for</span>=<span>\"onetimecode\"</span>&gt;</span>Enter code:<span>&lt;/<span>label</span>&gt;</span>\n<span>&lt;<span>input</span> <span>name</span>=<span>\"onetimecode\"</span> <span>id</span>=<span>\"onetimecode\"</span> <span>type</span>=<span>\"text\"</span> <span>autocomplete</span>=<span>\"one-time-code\"</span> /&gt;</span>\n</code></pre>\n<h2><a name=\"css\"></a>CSS</h2>\n<h3><a name=\"nesting\"></a>Nesting</h3>\n<p>Support for CSS Nesting shipped in <a href=\"https://webkit.org/blog/14154/webkit-features-in-safari-16-5/\">Safari 16.5</a>, with one caveat. You could not nest element selectors without using an <code>&amp;</code> (or another technique) to make sure every nested line started with a symbol. Starting in Safari 17.2, that restriction is no longer necessary. You can now write:</p>\n<pre><code><span>article</span> {\n  <span>h1</span> { \n    <span>font-size</span>: <span>1.8</span><span>rem</span>;\n  }\n  <span>p</span> {\n    <span>font-size</span>: <span>1.2</span><span>rem</span>;  \n  }\n}\n</code></pre>\n<p>If you would like to continue to use the <code>&amp;</code>, you may. Any code already written with an <code>&amp;</code> will keep working long into the future. In fact, <code>&amp;</code> continues to be an important tool for other nesting techniques. Learn more in <a href=\"https://webkit.org/blog/14571/css-nesting-and-the-cascade/\">CSS Nesting and the Cascade</a>.</p>\n<h3><a name=\"new-units\"></a>New units</h3>\n<p>If you’ve ever written CSS, you’ve most certainly used the <code>em</code> and <code>rem</code> units for sizing typography and layout. That’s where <code>1em</code> is equal to the computed value of <code>font-size</code> on the current element, and <code>1rem</code> is equal to the “root em”, the font size set on the root <code>&lt;html&gt;</code> element. Having both <code>em</code> and <code>rem</code> gives us a lot of flexibility and power in defining consistent sizing across wide portions of the page. Similarly the <code>lh</code> unit shipped with <code>rlh</code>, for line height and root line height.</p>\n<p>Safari 17.2 extends the flexibility and power of root units by adding support for <code>rcap</code>, <code>rex</code>, <code>ric</code>, and <code>rch</code>. These units are the equal to the <code>cap</code>, <code>ex</code>, <code>ic</code>, and <code>ch</code> size set on the root <code>&lt;html&gt;</code> element.</p>\n<p>What are <code>cap</code>, <code>ex</code>, <code>ic</code>, and <code>ch</code>? Powerful units that refer to different measurements of the glyphs in a font.</p>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/diagram-of-CSS-units.png\" alt=\"Diagram showing cap unit measuring from top to bottom of a capital letter A. The ex unit measures the height of a lowercase letter a. The ch unit is either the height or width of a 0. And the ic unit is either the height or width of the Chinese character for water.\" width=\"3168\" height=\"906\" srcset=\"https://webkit.org/wp-content/uploads/diagram-of-CSS-units.png 3168w, https://webkit.org/wp-content/uploads/diagram-of-CSS-units-300x86.png 300w, https://webkit.org/wp-content/uploads/diagram-of-CSS-units-1024x293.png 1024w, https://webkit.org/wp-content/uploads/diagram-of-CSS-units-768x220.png 768w, https://webkit.org/wp-content/uploads/diagram-of-CSS-units-1536x439.png 1536w, https://webkit.org/wp-content/uploads/diagram-of-CSS-units-2048x586.png 2048w\" /> </figure>\n<p>CSS <code>cap</code> is the newest of these units, also now added to WebKit in Safari 17.2. The measurement of <code>1cap</code> is equal to the cap-height of the first available font.</p>\n<p>The <code>ex</code> unit refers to the x-height of the font. The <code>ch</code> unit is equal to the inline size of the zero character in a font — where inline size is the width in a horizontal <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode\">writing mode</a>, or height in a vertical writing mode. The <code>ic</code> unit stands for “ideographic character” in CJK scripts (for Chinese, Japanese, Korean, and related writing systems). Like <code>ch</code>, the <code>ic</code> unit measures the inline size, in this case where <code>1ic</code> is equivalent to the width or height of one character. (Since typically all ideographic characters in a CJK font take up the same amount of space, it doesn’t matter which character is measured.)</p>\n<p>Safari 17.2 also adds all the typed OM factory functions for font and root font relative units, which can be used to construct CSS typed values from JavaScript.</p>\n<h3><a name=\"motion-path-and-shapes\"></a>Motion Path and Shapes</h3>\n<p>WebKit first shipped support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Motion_Path\">CSS Motion Path</a> in Safari 16.0, providing web developers the ability to animate objects along a custom path of any shape.</p>\n<p>With a rocky start and repeated renaming of properties, support for the <code>offset-*</code> properties was still painfully uneven cross browsers by the end of 2022. <a href=\"https://wpt.fyi/interop-2023\">Interop 2023</a> chose Motion Path as a focus area, pulling the attention of the three major browser engines towards improving implementations. This attention also resulted in many changes to the <a href=\"https://drafts.fxtf.org/motion-1/\">CSS Motion Path</a> specification. Safari 17.2 lands the last of the updates to WebKit needed to match the revised web standard.</p>\n<p>Safari 17.2 adds support for:</p>\n<ul>\n<li><code>offset-position</code> support for <code>circle()</code> and <code>ellipse()</code></li>\n<li><code>offset-position: normal</code> </li>\n<li><code>coord-box</code> and <code>&lt;position&gt;</code> parameters inside <code>ray()</code></li>\n<li><code>rect()</code> and <code>xywh()</code> shapes</li>\n</ul>\n<p>The <code>rect()</code> and <code>xywh()</code> shapes also work with <code>clip-path</code> and <code>shape-outside</code>. If you remember, for years we’ve been able to define a shape for clipping or moving content around or along. These <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape\">shapes</a> have included circle, ellipse, polygon and path. Now, both the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/rect\"><code>rect()</code></a> and  <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/xywh\"><code>xywh()</code></a> shapes allow for quick ways to define a rectangle. The <code>rect()</code> function uses four lengths to define the position of the top, right, bottom, and left edges of a rectangle, respectively, as insets from the top and left edges of the reference box. While <code>xywh()</code> takes its inspiration from the <code>viewBox</code> attribute in SVG, and defines the rectangle via offsets from the top and left edge of the reference box, with a specified width and height.</p>\n<p>Additionally, for increased usefulness, the size of <code>offset-path</code> shapes are now calculated relative to the containing block instead of the element itself, and take into account the <code>border-radius</code> of the containing block as well.</p>\n<h3><a name=\"animation\"></a>Animation</h3>\n<p>Safari 17.2 adds support for the <code>linear()</code> function in CSS animations and transitions. It lets you define an easing function that interpolates linearly between a set of points. For example, <code>linear(0, 0.25, 1)</code> produces an easing function that moves linearly from 0, to 0.25, then to 1.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/linear-easing.png\" alt=\"Graph of linear easing, showing a straight line moving up to the right, hitting a point, and turning to a steeper angle, also straight.\" width=\"3036\" height=\"2684\" srcset=\"https://webkit.org/wp-content/uploads/linear-easing.png 3036w, https://webkit.org/wp-content/uploads/linear-easing-300x265.png 300w, https://webkit.org/wp-content/uploads/linear-easing-1024x905.png 1024w, https://webkit.org/wp-content/uploads/linear-easing-768x679.png 768w, https://webkit.org/wp-content/uploads/linear-easing-1536x1358.png 1536w, https://webkit.org/wp-content/uploads/linear-easing-2048x1811.png 2048w\" /><figcaption>Diagram of linear easing between multiple points, from the <a href=\"https://drafts.csswg.org/css-easing-2/#linear-easing-function-examples\">CSS Easing Functions Level 2</a> web standard.</figcaption></figure>\n<h3><a name=\"math-functions\"></a>Math functions</h3>\n<p>Safari 17.2 also adds support for mixing percentage and length arguments in the CSS Math functions <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/rem\"><code>rem(</code></a><code>)</code>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mod\"><code>mod()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/round\"><code>round()</code></a>.</p>\n<p>CSS Math functions originally shipped in Safari 15.4. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/round\"><code>round()</code></a> function returns a rounded number based on a selected rounding strategy. And the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/rem\"><code>rem()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mod\"><code>mod()</code></a>  functions returns a remainder or modulus left over when the first parameter is divided by the second parameter, similar to the JavaScript remainder operator.</p>\n<p>Being able to mix percentage-based measurements with other kinds of lengths means, for example, you can set a width to 50% rounded up to the nearest 100px. Or in <a href=\"https://codepen.io/jensimmons/pen/LYqMJYb?editors=1100\">this demo</a>, rounding 100% down to the nearest 8ric.</p>\n<pre><code><span>body</span> {\n  <span>--rounding-interval</span>: <span>8</span><span>ric</span>;\n}\n<span>aside</span> {\n  <span>width</span>: <span>round</span>(<span>down</span>, <span>100%</span>, <span>var</span>(<span>--rounding-interval</span>));\n}\n</code></pre>\n<p><a href=\"https://codepen.io/jensimmons/pen/LYqMJYb?editors=1100\">Try it out</a>, resizing the window to see the effect. The box is fluid, but jumps from 80ric to 88ric to 96ric wide, and so on, skipping over the sizes in-between.</p>\n<h3><a name=\"counters\"></a>Counters</h3>\n<p>In September, <a href=\"https://webkit.org/blog/14445/webkit-features-in-safari-17-0/#:~:text=Counter%20styles\">Safari 17.0</a> improved WebKit’s support for CSS Counters by providing the ability to style counters through <code>@counter-style</code>. Now, in Safari 17.2, WebKit adds support for the <code>counter-set</code> property, providing the ability to change the number in the count without creating a new counter. (That’s what <code>counter-reset</code> does, create a new counter scope.)</p>\n<p>Safari 17.2 also adds basic support for the <a href=\"https://drafts.csswg.org/css-lists/#list-item-counter\"><code>list-item</code></a> value to the <code>counter-set</code>, <code>counter-reset</code> and <code>counter-increment</code> properties, allowing manipulation of the automatic numbering provided by <code>display: list-item</code>. While <code>list-item</code> has been available inside both <code>counter()</code> and <code>counters()</code> for some time, now you can override the value through <code>counter-set: list-item X</code> and <code>counter-increment: list-item X</code> (where “X” is a number of your choosing), instead of just reading the value.</p>\n<p>Learn more about CSS Counters in <a href=\"https://developer.apple.com/videos/play/wwdc2023/10121?time=1729\"><em>What’s New in CSS</em></a> from WWDC23.</p>\n<h3><a name=\"mask-border\"></a>Mask border</h3>\n<p>For years, <code>-webkit-mask-box-image</code> has provided a way to apply a mask to the edges of an element, through its border. This idea was originally implemented by WebKit, and ended up in the Chromium-based browsers as well. Now in Safari 17.2, we are proud to be the first browser to unprefix this property, and officially make it <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border\"><code>mask-border</code></a>.</p>\n<p>The <code>mask-border</code> property is a shorthand for six properties:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-mode\"><code>mask-border-mode</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-outset\"><code>mask-border-outset</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-repeat\"><code>mask-border-repeat</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-slice\"><code>mask-border-slice</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-source\"><code>mask-border-source</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-width\"><code>mask-border-width</code></a></li>\n</ul>\n<p>Use mask border to create complex custom border edges, and mask the edge of the box in a unique fashion.</p>\n<p>\n</p><p>The values for <code>mask-border</code> work the same fashion as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/border-image\"><code>border-image</code></a>.</p>\n<h3><a name=\"custom-highlights\"></a>Custom Highlights</h3>\n<p>Safari 17.2 adds support for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Custom_Highlight_API\">Custom Highlights API</a>. There are pseudo-elements for styling certain kinds of UA-provided highlights, like <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::selection\"><code>::selection</code></a>. Now you can create your own highlights for any arbitrary <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Range\"><code>Range</code></a> objects in JS, and style them with the new CSS <code>::highlight()</code> pseudo-element, allowing for custom highlighting of Web content without altering the markup or DOM.</p>\n<p>\n</p><p>The highlight pseudo-elements support text decorations like underlining and shadows as well as color and background-color changes.</p>\n<h2><a name=\"images-and-video\"></a>Images and video</h2>\n<h3><a name=\"responsive-images\"></a>Responsive images</h3>\n<p>Safari 17.2 adds support for <a href=\"https://html.spec.whatwg.org/multipage/semantics.html#attr-link-imagesrcset\">preloading responsive images</a>. This code asks the browser to assess which size image is the appropriate one to use from the list of options, and to preload that one image.</p>\n<pre><code><span>&lt;<span>head</span>&gt;</span>\n  <span>&lt;<span>title</span>&gt;</span>Your page title<span>&lt;/<span>title</span>&gt;</span>\n  <span>&lt;!-- other items --&gt;</span>\n  <span>&lt;<span>link</span> <span>rel</span>=<span>\"preload\"</span> \n        <span>as</span>=<span>\"image\"</span> \n        <span>imagesrcset</span>=<span>\"flowers-small.jpg 400w, \n                     flowers-medium.jpg 800w, \n                     flowers-large.jpg 1200w,\n                     flowers-extralarge.jpg 1500w\"</span> \n        <span>imagesizes</span>=<span>\"50vw\"</span>&gt;</span>\n<span>&lt;/<span>head</span>&gt;</span>\n</code></pre>\n<p>The <code>imagesrcset</code> and <code>imagesizes</code> attributes work just like the <code>srcset</code> and <code>sizes</code> attributes from familiar <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">responsive image</a> techniques.</p>\n<h3><a name=\"image-orientation\"></a>Image Orientation</h3>\n<p>When rendering an image on a web page, Safari uses the EXIF metadata in the image file, when available, to determine the image’s correct orientation. This process ensures that images are displayed as intended by their creators.</p>\n<p>In earlier versions, this automatic orientation behavior was represented by the term <code>\"none\"</code> in the <code>ImageBitmapOptions</code>’s <code>imageOrientation</code> property. In Safari 17.2, to better reflect the actual functionality, this keyword is changed to <code>\"from-image\"</code>. The previous term, <code>\"none\"</code>, is now considered deprecated. It’s important to note that this change is a renaming for clarity and does not introduce new functionality.</p>\n<p>Additionally, there is an <a href=\"https://github.com/whatwg/html/issues/8085\">ongoing discussion</a> about <a href=\"https://github.com/whatwg/html/issues/8085\">reintroducing <code>\"none\"</code></a> with a literal interpretation in future updates to HTML. However, this <a href=\"https://github.com/whatwg/html/issues/8085\">proposal</a> is still under consideration, mainly due to potential issues with backward compatibility.</p>\n<h3><a name=\"svg\"></a>SVG</h3>\n<p>Safari 17.2 adds support for SVG <code>&lt;image crossorigin&gt;</code>, enabling read back when CORS-equipped cross-origin images are drawn on <code>canvas</code>.</p>\n<p>Safari 17.2 also adds support for the missing default value <code>translate</code> for <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateTransform\"><code>animateTransform</code></a>.</p>\n<h3><a name=\"webcodecs\"></a>WebCodecs</h3>\n<p>Safari 17.2 adds support for H264 L1T2 to WebCodecs. WebKit originally shipped support for video <a href=\"https://developer.mozilla.org/docs/Web/API/WebCodecs_API\">WebCodecs</a> in Safari 16.4. It gives web developers complete control over how media is processed by providing low-level access to the individual frames of a video stream. It’s especially useful for applications that do video editing, video conferencing, or other real-time processing of video. By adding WebCodecs support for H264 L1T2 in Safari 17.2, developers now have more flexibility in which formats they want to offer to their users.</p>\n<h3><a name=\"media-element\"></a>Media element</h3>\n<p>Previous only available as <code>webkitPreservesPitch</code>, Safari 17.2 adds support for the unprefixed version of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/preservesPitch\"><code>HTMLMediaElement.preservesPitch</code></a>. This property determines whether or not the browser should adjust the pitch of the audio to compensate for changes to the playback rate made in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate\"><code>HTMLMediaElement.playbackRate</code></a>.</p>\n<p>And Safari 17.2 also adds support for automatic text track selection for <code>'metadata'</code> tracks.</p>\n<h2><a name=\"javascript\"></a>JavaScript</h2>\n<h3><a name=\"import-attributes\"></a>Import attributes</h3>\n<p>Safari 17.2 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"><code>import</code> attributes</a>. It provides a way to add type information to module <code>import</code> statements, enabling you to import JSON modules like this:</p>\n<pre><code><span>import</span> <span>json</span> <span>from</span> <span>\"./foobar.json\"</span> <span>with</span> { <span>type</span><span>:</span> <span>\"json\"</span> };\n<span>import</span>(<span>\"foobar.json\"</span>, { <span>with</span><span>:</span> { <span>type</span><span>:</span> <span>\"json\"</span> } });\n</code></pre>\n<h3><a name=\"number-format\"></a>Number Format</h3>\n<p>Safari 17.2 adds support for <code>Intl.NumberFormat</code>’s FormatApproximately operation. The <code>formatRange()</code> method of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> instances formats a range of numbers according to the locale and formatting options of this <code>Intl.NumberFormat</code> object. For example, a format range such as <code>formatRange(3, 5)</code> for the USD currency will be rendered as “$3.00 – $5.00”. If the two numbers are very close to each other, the FormatApproximately feature will add a tilde sign in front of the number, so that <code>formatRange(2.9, 3.1)</code> will be represented as “~$3”, aka approximatively 3 USD.</p>\n<h2><a name=\"web-api\"></a>Web API</h2>\n<h3><a name=\"fetch-priority\"></a>Fetch Priority</h3>\n<p>Safari 17.2 adds support for Fetch Priority. It allows developers to set the priority of a resource (e.g., an image, script, or linked resource such as a style sheet) in relation to other resources. This can be done via the <code>fetchpriority</code> HTML attribute or as an option passed via the Fetch API.  The supported values are “high”, “low”, or “auto” (default). For example:</p>\n<pre><code><span>&lt;<span>header</span>&gt;</span>\n  <span>&lt;!-- Prioritize this! --&gt;</span>\n  <span>&lt;<span>img</span> <span>fetchpriority</span>=<span>\"high\"</span> <span>alt</span>=<span>\"I'm really important!\"</span> <span>src</span>=<span>\"logo.png\"</span>&gt;</span>\n<span>&lt;/<span>header</span>&gt;</span>\n<span>&lt;<span>main</span>&gt;</span>...<span>&lt;/<span>main</span>&gt;</span>\n<span>&lt;<span>footer</span>&gt;</span>\n  <span>&lt;!-- it's ok if this image loads later, it's below the fold --&gt;</span>\n  <span>&lt;<span>img</span> <span>fetchpriority</span>=<span>\"low\"</span> <span>alt</span>=<span>\"I'm not very important\"</span> <span>src</span>=<span>\"social.png\"</span>&gt;</span>\n<span>&lt;/<span>footer</span>&gt;</span>\n</code></pre>\n<p>And via the Fetch API, you can do:</p>\n<pre><code><span>async</span> <span>function</span> <span>fetchHighPriorityData</span>(){\n  <span>const</span> <span>response</span> <span>=</span> <span>await</span> <span>fetch</span>(<span>\"important/data.json\"</span>, { <span>priority</span><span>:</span> <span>\"high\"</span> });\n  <span>// process the high priority response data...\n</span>}\n<span>fetchHighPriorityData</span>();\n</code></pre>\n<h3><a name=\"forms-validation\"></a>Forms validation</h3>\n<p>Safari 17.2 adds support for the <code>title</code> pattern attribute for validation errors. When set, it shows the value of the <code>title</code> attribute when a validation error occurs.  This is active only if you submit the form or call <code>reportValidity</code> on the event of your choice.</p>\n<pre><code><span>&lt;<span>form</span> <span>action</span>=<span>\"/login\"</span> <span>id</span>=<span>\"form\"</span>&gt;</span>\n  <span>&lt;<span>input</span> \n    <span>type</span>=<span>\"text\"</span> \n    <span>name</span>=<span>\"username\"</span>\n    <span>placeholder</span>=<span>\"Username\"</span>\n    <span>pattern</span>=<span>\"[a-z]{1,10}\"</span>\n    <span>title</span>=<span>\"Must be shorter than 10 characters and lowercase only\"</span>&gt;</span>\n<span>&lt;/<span>form</span>&gt;</span>\n</code></pre>\n<pre><code><span>const</span> <span>form</span> <span>=</span> <span>document</span>.<span>getElementById</span>(<span>\"form\"</span>);\n<span>form</span>.<span>addEventListener</span>(<span>\"keypress\"</span>, () <span>=</span><span>&gt;</span> <span>form</span>.<span>reportValidity</span>());\n</code></pre>\n<figure>\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/safari-17-2-form-validation.png\" alt=\"Password input field with error message in a bubble above, reading &quot;Match the requested format: Must be shorter than 10 characters and lowercase only&quot;.\" width=\"1134\" height=\"638\" srcset=\"https://webkit.org/wp-content/uploads/safari-17-2-form-validation.png 1134w, https://webkit.org/wp-content/uploads/safari-17-2-form-validation-300x169.png 300w, https://webkit.org/wp-content/uploads/safari-17-2-form-validation-1024x576.png 1024w, https://webkit.org/wp-content/uploads/safari-17-2-form-validation-768x432.png 768w\" />\n\n</figure>\n<h3><a name=\"canvas\"></a>Canvas</h3>\n<p>Safari 17.2 adds support for <code>CanvasRenderingContext2D.prototype.reset()</code>, which resets the canvas context to its default state (i.e., it clears it to transparent black along with setting everything back related to the canvas to its default state).</p>\n<h3><a name=\"dom-events\"></a>DOM Events</h3>\n<p>Safari 17.2 adds support for sending certain mouse events to disabled form controls.  Disabled form controls now receive <code>mouseenter</code>, <code>mouseleave</code>, <code>mousemove</code>, <code>mouseover</code>, and <code>mousewheel</code> events. A disabled form controls continue to not receive <code>click</code>, <code>mouseup</code>, and <code>mousedown</code> events.</p>\n<h2><a name=\"web-apps\"></a>Web Apps</h2>\n<h3><a name=\"login-cookies\"></a>Login cookies</h3>\n<p>When we brought web apps to Mac, we designed the experience of “Add to Dock” so that macOS copies the website’s current cookies over to the new web app. That way, if someone is logged into their account in the browser, they will remain logged in within the web app. They don’t have to log in again.</p>\n<p>Now, that same behavior works on iOS 17.2 and iPadOS 17.2. Whether a user is in Safari, Safari View Controller, or another browser on iPhone or iPad, when they tap “Add to Home Screen” and create a web app, the cookies are copied over, including the information about login state. This will only work if the authentication state is stored within cookies. No other kind of local storage is copied over.</p>\n<p>After a user adds a web app to the Home Screen or Dock, no other website data is shared, which is great for privacy.</p>\n<h3><a name=\"web-app-icons\"></a>Web App icons</h3>\n<p>On macOS, users expect app icons to look sharp at a variety of sizes, ranging from 16x16px to 1024x1024px. With Safari 17.2 on macOS Sonoma, we have improved how web app icons are loaded, resolving many common issues such as icons appearing blurry with jagged edges, lacking padding, or failing to load. If you supply multiple size variants for the preferred icon kind, all sizes are saved on macOS, allowing the most appropriate size to be displayed based on context. For example, the largest size variant is shown in Finder’s Gallery view and Quick Look, a medium sized variant is shown in the Dock and Launchpad, while a smaller sized variant is shown in Spotlight.</p>\n<p>To provide the best user experience on macOS, supply at least one opaque, full-bleed <code>maskable</code> square icon in the web app manifest, either as SVG (any size) or high resolution bitmap (1024×1024). If the web app manifest doesn’t specify any high resolution full-bleed icon, Safari may fall back to the <code>apple-touch-icon</code> if it improves the user experience. If you specify <code>apple-touch-icon</code> through link elements on the webpage, do not omit these link elements based on user agent detection. When you only supply a transparent icon with custom shape, Safari automatically adjusts spacing between your icon and the standard system background on macOS to avoid tangents.</p>\n<h3><a name=\"user-options\"></a>User options</h3>\n<p>Now, in a web app on Mac, you can enable the status bar by going to View &gt; Show Status Bar. Once you do so, anytime you hover over a link, the URL will appear in the bottom left of the web app window.</p>\n<p>Also new to web apps on Mac, a user can just click a button to easily change which web page is loaded by default in new web app windows. Navigate to the page, open Settings, and click “Set to Current Page”.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/web-app-settings-light.png\" alt=\"Settings panel for a web app. Showing the button to &quot;Set to Current Page&quot;.\" width=\"1772\" height=\"884\" srcset=\"https://webkit.org/wp-content/uploads/web-app-settings-light.png 1772w, https://webkit.org/wp-content/uploads/web-app-settings-light-300x150.png 300w, https://webkit.org/wp-content/uploads/web-app-settings-light-1024x511.png 1024w, https://webkit.org/wp-content/uploads/web-app-settings-light-768x383.png 768w, https://webkit.org/wp-content/uploads/web-app-settings-light-1536x766.png 1536w\" /></figure>\n<h2><a name=\"webgl\"></a>WebGL</h2>\n<p>Safari 17.2 adds support for two new <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions\">WebGL extensions</a>, <code>EXT_blend_func_extended</code> and <code>WEBGL_clip_cull_distance</code>.</p>\n<h2><a name=\"privacy\"></a>Privacy</h2>\n<p>Safari 17.2 adds blob partitioning. Blobs are now partitioned by top-level site to prevent them from being a possible cross-site tracking vector.</p>\n<h2><a name=\"web-inspector\"></a>Web Inspector</h2>\n<h3><a name=\"color-palette-with-color-variables\"></a>Color Palette with color variables</h3>\n<p>Many sites today use CSS Custom Properties to define a set of variables for colors used on the site. But it can be hard to remember what the variable names are, and annoying to have to go look them up.</p>\n<figure><img loading=\"lazy\" srcset=\"https://webkit.org/wp-content/uploads/color-light.png 2x\" src=\"https://webkit.org/wp-content/uploads/color-light.png\" alt=\"Color picker showing four rows of boxes at the bottom — each box holding a different color that's been defined in a CSS variable by the web developer.\" width=\"327\" height=\"398\" /></figure>\n<p>The Color Picker, shown whenever you click on an inline color swatch in the Styles sidebar panel, now provides a color palette with all the applicable color variables for the selected element. This makes it easy to see at a glance all of the predefined colors intended to be reused. Click on any of the color swatches from the “Variables” color palette use the corresponding color variable.</p>\n<h3><a name=\"animation\"></a>Animation</h3>\n<p>The progression of a CSS animation or transition is controlled by a timing function, which defines aspects like acceleration, deceleration or smoothness of playback. Web Inspector shows an inline swatch next to <code>animation-timing-function</code> and <code>transition-timing-function</code> CSS properties Styles sidebar panel. Clicking on the swatch triggers a specialized editor which offers a preview of the effect of the given timing function value as well as input controls for adjusting specific parameters.</p>\n<p>Web Inspector already provides previews and editing of timing function values like <code>cubic-bezier()</code>, <code>linear</code> , <code>ease-in</code> , <code>ease-out</code>  and <code>ease-in-out</code> . With the introduction of the <code>steps()</code> timing function in Safari, there’s now a specialized preview and editor for it in Web Inspector.</p>\n<figure><img loading=\"lazy\" srcset=\"https://webkit.org/wp-content/uploads/timing-light.png 2x\" src=\"https://webkit.org/wp-content/uploads/timing-light.png\" alt=\"Screenshot of animation timing function steps editor, in Web Inspector. A dropdown box that shows the shape of the timing function — it looks like a set of steps in a staircase.\" width=\"327\" height=\"339\" /></figure>\n<p>A CSS declaration like <code>animation-timing-function: steps(5)</code> tells the browser to split the animation time in five segments of equal length and play it in discrete steps instead of a smooth progression, an effect similar to stop motion animation. The specialized editor for the <code>steps()</code> timing function shows the effect preview as a step-like illustration and provides controls to adjust the number of steps and the step position.</p>\n<h2><a name=\"fixes-for-interop-2023-and-more\"></a>Fixes for Interop 2023 and more</h2>\n<p>WebKit for Safari 17.2 also includes a lot of bug fixes and feature polish. Many of these fixes are part of our contribution to improving the <a href=\"https://webkit.org/blog/13706/interop-2023/#focus-areas\">26 focus areas of Interop 2023</a>.</p>\n<p>The Interop Project is an ongoing collaboration between Apple, Bocoup, Igalia, Google, Microsoft, and Mozilla to focus on a specific set of web technologies and get them to work exactly the same in every browser.  At the beginning of 2023, less than 49% the selected automated tests were passing in the released versions all three major browser engines. Now over 93% of them pass in the preview versions.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Interop-score-Dec-11.png\" alt=\"Current Interop 2023 scores: Chrome, 99%. Firefox, 95%. Safari 97%.\" width=\"1032\" height=\"1202\" srcset=\"https://webkit.org/wp-content/uploads/Interop-score-Dec-11.png 1032w, https://webkit.org/wp-content/uploads/Interop-score-Dec-11-258x300.png 258w, https://webkit.org/wp-content/uploads/Interop-score-Dec-11-879x1024.png 879w, https://webkit.org/wp-content/uploads/Interop-score-Dec-11-768x895.png 768w\" /><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Interop-graph-2.png\" alt=\"Graph of Interop 2023 scores, starting at 59-81% and going up across the year to 93-99%.\" width=\"1032\" height=\"946\" srcset=\"https://webkit.org/wp-content/uploads/Interop-graph-2.png 1032w, https://webkit.org/wp-content/uploads/Interop-graph-2-300x275.png 300w, https://webkit.org/wp-content/uploads/Interop-graph-2-1024x939.png 1024w, https://webkit.org/wp-content/uploads/Interop-graph-2-768x704.png 768w\" /></figure>\n<p>This fall, as part of Interop 2023, <code>subgrid</code> and CSS Masking shipped in Chrome, while <code>:has()</code> and <code>@property</code> shipped in Firefox. Since our last release, Safari greatly improved our implementation of Pointer and Mouse events, added support for more codecs to Web Codecs, re-engineered CSS Motion Path, and dedicated a significant portion of our WebKit engineering work to fixing dozens of remaining test failures scattered across the <a href=\"https://webkit.org/blog/13706/interop-2023/#focus-areas\">focus areas</a>.</p>\n<p>You can learn more about the accomplishments of Interop 2023 by studying the <a href=\"https://wpt.fyi/interop-2023?feature=interop-2023-webcomponents&amp;stable\">Interop dashboard</a>.</p>\n<h3><a name=\"resolved-issues\"></a>Resolved Issues</h3>\n<h4><a name=\"accessibility\"></a>Accessibility</h4>\n<ul>\n<li>Fixed parsing the ARIA <code>role</code> attribute to ignore leading and trailing whitespace, including line breaks. (113923520)</li>\n<li>Fixed form landmarks being incorrectly exposed when they are missing a label. (115462091)</li>\n<li>Fixed non-group and non-tree-item children of <code>role=\"treeitem\"</code> elements becoming stale after dynamic changes. (115936550)</li>\n<li>Fixed Play Animation and Pause Animation animated image context menu items sometimes not appearing after setting toggle. (117215059)</li>\n<li>Fixed VoiceOver not announcing button labels if the button is in a shadow root. (118118138)</li>\n</ul>\n<h4><a name=\"apple-pay\"></a>Apple Pay</h4>\n<ul>\n<li>Deprecated <code>enabled</code> in favor of <code>available</code> in <code>shippingContactEditingMode</code>. (113159800)</li>\n</ul>\n<h4><a name=\"autofill\"></a>AutoFill</h4>\n<ul>\n<li>Fixed clipping the “Strong Password” button after selecting “Suggest New Password”. (113701243)</li>\n</ul>\n<h4><a name=\"css\"></a>CSS</h4>\n<ul>\n<li>Fixed the <code>font-family</code> descriptor for <code>@font-palette-values</code> to accept multiple values. (105975619)</li>\n<li>Fixed <code>:has(:scope)</code> matching. (106524140)</li>\n<li>Fixed container selection for container units in pseudo-elements. (106739553)</li>\n<li>Fixed container query with font units to invalidate when the font changes. (106739736)</li>\n<li>Fixed <code>:nth-child()</code> invalidation when not in subject position. (106740353)</li>\n<li>Fixed <code>:has(:host)</code> invalidation. (106768205)</li>\n<li>Fixed <code>:has(:nth-child())</code> invalidation and related. (106768224)</li>\n<li>Fixed invalidating scope-breaking <code>:has(:is(...))</code> selectors. (106768250)</li>\n<li>Fixed handling dynamic updates to viewport units when used in <code>@property</code> initial value. (108287215)</li>\n<li>Fixed baseline aligned flex items to also be aligned using their fallback alignment. (109496710)</li>\n<li>Fixed: Changed to allow an empty <code>font-family</code> name in <code>@font-face</code> and <code>@font-palette-values</code>. (109613703)</li>\n<li>Fixed the <code>&lt;basic-shape&gt;</code> implementation for <code>offset-path</code>. (110565070)</li>\n<li>Fixed <code>:user-invalid</code> and <code>:user-valid</code> interactions with form reset and submission. (110677832)</li>\n<li>Fixed <code>&lt;coord-box&gt;</code> implementation for <code>offset-path</code>. (110938788)</li>\n<li>Fixed <code>&lt;position&gt;</code> to never serialize to a single value. (111750372)</li>\n<li>Fixed <code>NaN</code> numeric representation to be <code>0</code> not <code>Infinity</code>. (111984451)</li>\n<li>Fixed serializing CSS math function root nodes. (111984509)</li>\n<li>Fixed <code>min()</code> and <code>max()</code> with one argument to always collapse to <code>calc()</code>. (111986569)</li>\n<li>Fixed animation using <code>padding-block</code> or <code>padding-inline</code> not overriding the set padding style. (112023856)</li>\n<li>Fixed <code>color-mix()</code> to respect <code>:visited</code> style to resolve “currentcolor”. (112419198)</li>\n<li>Fixed serialization to always serialize implicit <code>&amp;</code> and an implicit nested rule. (112900363)</li>\n<li>Fixed <code>&lt;hr&gt;</code> <code>width</code> attribute set to <code>0</code> or <code>0px</code> to correctly compute to <code>0px</code>. (113087533)</li>\n<li>Fixed <code>mod()</code> evaluation. (113213059)</li>\n<li>Fixed <code>round()</code> evaluation when the number is a multiple of the step. (113233588)</li>\n<li>Fixed computation of the <code>from-font</code> value for <code>font-size-adjust</code>. (113328110)</li>\n<li>Fixed the serialization of percentages in <code>color-mix()</code>. (113399146)</li>\n<li>Fixed <code>border-image</code> to fall back to the <code>border</code> property if the image is invalid. (113646392)</li>\n<li>Fixed <code>&lt;family-name&gt;</code> to forbid generic families. (113746537)</li>\n<li>Fixed the check for in-progress layout when setting a containing block rect for <code>ray()</code> used with <code>motion-path</code>. (113780201)</li>\n<li>Fixed animating a <code>rotate</code> property when the <code>scale</code> property is also used. (113999490)</li>\n<li>Fixed <code>&lt;resolution&gt;</code> to not accept negative resolutions for <code>@property</code>. (114235642)</li>\n<li>Fixed <code>currentcolor</code> to correctly inherit computed <code>:visited</code> style. (114254856)</li>\n<li>Fixed nested subgrids from contributing to the calculation of the enclosing track size. (114271839)</li>\n<li>Fixed <code>container-name</code> to use scoped names. (114284428)</li>\n<li>Fixed container unit resolution to check if the selected container is eligible. (114291153)</li>\n<li>Fixed the <code>scripting</code> media query to never match <code>initial-only</code>. (114340361)</li>\n<li>Fixed form submission to also affect <code>:user-invalid</code> and <code>:user-valid</code> state. (114580382)</li>\n<li>Fixed the container for the <code>::part</code> pseudo-element to be selected from the originating element tree. (114626579)</li>\n<li>Fixed serialization of <code>infinity</code> and <code>-infinity</code> in colors. (114808320)</li>\n<li>Fixed <code>lab</code>, <code>lch</code>, <code>oklab</code>, <code>oklch</code> components to be clamped to appropriate ranges. (114808444)</li>\n<li>Fixed <code>color-mix()</code> to not serialize to legacy color syntax. (114949008)</li>\n<li>Fixed resolving the size of a replaced element by using its intrinsic size as the width. (115007278)</li>\n<li>Fixed basic shapes to use an offset motion path. (115068196)</li>\n<li>Fixed grid to not always put first and last baseline aligned items into different alignment contexts. (115083708)</li>\n<li>Fixed determining non-orthogonal grid item’s columnAxisPosition by considering fallback alignment for first/last baseline. (115136343)</li>\n<li>Fixed <code>:has(~ :is(.x ~ .y))</code> to consider all siblings of the <code>:has</code> scope when invalidating. (115205991)</li>\n<li>Fixed invalidating <code>:default</code> pseudo-class changes on input elements. (115236525)</li>\n<li>Fixed <code>calc(clamp(1px, 1em, 1vh))</code> to collapse to <code>clamp(1px, 1em, 1vh)</code>. (115240159)</li>\n<li>Fixed offset path inset shapes with a <code>border-radius</code>. (115316728)</li>\n<li>Fixed determing baseline for grid by considering the first and last baseline-aligned grid items. (115441833)</li>\n<li>Fixed the serialization of the computed style of <code>grid-area</code>. (115521493)</li>\n<li>Fixed not serializing <code>at &lt;position&gt;</code> in <code>circle()</code> or <code>ellipse()</code> if unspecified. (115866108)</li>\n<li>Fixed serialization of <code>shape-outside</code>. (115938310)</li>\n<li>Fixed serialization issues with <code>clip-path</code> and <code>offset-path</code>. (115953688)</li>\n<li>Fixed <code>getComputedStyle()</code> to return a resolved value for <code>font-size-adjust: from-font</code>. (116151111)</li>\n<li>Fixed non-orthogonal subgrid margin, border, and padding to be considered for self-align baseline items in the same alignment context. (116206243)</li>\n<li>Fixed subgrids to have their row-start margins resolved after column sizing in the outer grid. (116369419)</li>\n<li>Fixed accumulating the sum of non-orthogonal nested subgrids margin, border, and padding for first baseline alignment in the column axis. (116443747)</li>\n<li>Fixed CSS grid support for last baseline alignment in the column axis for subgrid items with non-orthogonal ancestors. (116484865)</li>\n<li>Fixed validating <code>@property</code> at parse-time. (116803886)</li>\n<li>Fixed computing the definite free space of grid rows when the grid has an <code>aspect-ratio</code> and definite logical width. (117138268)</li>\n<li>Fixed the continuity of transform animations through singular transforms. (117209302)</li>\n<li>Fixed <code>@supports selector(:popover-open)</code> to reflect disabled state. (117226626)</li>\n<li>Fixed CSS grid to synthesize the central baseline of grid items in the column axis. (117424263)</li>\n<li>Fixed serialization for CSS highlight pseudo-elements. (117864974)</li>\n</ul>\n<h4><a name=\"dom\"></a>DOM</h4>\n<ul>\n<li>Fixed handling tasks scheduled for web pages in the back-forward cache. (116349535)</li>\n<li>Removed the non-standard <code>incremental</code> attribute and <code>search</code> event. (48937114)</li>\n</ul>\n<h4><a name=\"fonts\"></a>Fonts</h4>\n<ul>\n<li>Fixed COLRv0 font rendering. (115721319)</li>\n</ul>\n<h4><a name=\"html\"></a>HTML</h4>\n<ul>\n<li>Fixed <code>&lt;input type=\"number\"&gt;</code> not returning the correct value when a decimal is entered. (107187010)</li>\n<li>Fixed alert sounds in web apps being replayed when the system play/pause key is pressed. Playing short-duration <code>&lt;audio&gt;</code> sources no longer registers the page as the system’s Now Playing application. (114667001)</li>\n<li>Fixed dynamic handling of <code>&lt;base&gt;</code> elements. (114756660)</li>\n<li>Fixed URL encoding of <code>&lt;base&gt;</code> elements. (114861187)</li>\n<li>Fixed URL encoding of SVG <code>&lt;image&gt;</code> elements. (114873373)</li>\n<li>Fixed empty value attributes to not be ignored on image input types. (114887143)</li>\n<li>Fixed <code>[dir=auto]</code> invalidation with password fields. (115887776)</li>\n</ul>\n<h4><a name=\"http\"></a>HTTP</h4>\n<ul>\n<li>Fixed COOP header breaking back and forward behavior when client-side redirects are involved. (104659192)</li>\n</ul>\n<h4><a name=\"javascript\"></a>JavaScript</h4>\n<ul>\n<li>Fixed an edge case in the semantics of <code>for</code> loops. (44730906)</li>\n<li>Fixed: Optimized <code>Array#splice</code> to skip result array creation if it is not used at all. (113367762)</li>\n<li>Fixed: Updated <code>Intl.DateTimeFormat</code>‘s to obtain options only once, matching spec changes. (113789192)</li>\n<li>Fixed: Increased <code>minimumFractionDigits</code> and <code>maximumFractionDigits</code> limit from 20 to 100. (113869343)</li>\n<li>Fixed rounding to nearest in optimizing JITs. (114208146)</li>\n<li>Fixed global and eval code to throw a TypeError if a function declaration attempts to shadow a non-configurable, non-writable global property. (114215396)</li>\n<li>Fixed <code>Intl.NumberFormat</code> and <code>Intl.PluralRules</code> <code>roundingIncrement</code> to match specification changes. (114219889)</li>\n</ul>\n<h4><a name=\"loading\"></a>Loading</h4>\n<ul>\n<li>Fixed navigation to about scheme URLs without opaque paths. (116238322)</li>\n</ul>\n<h4><a name=\"media\"></a>Media</h4>\n<ul>\n<li>Fixed an issue where Safari would briefly change <code>document.visibilityState</code> to <code>hidden</code> when entering fullscreen. (104984915)</li>\n<li>Fixed <code>canplay</code> event to fire for video elements where the first sample’s presentation time is slightly greater than 0. (105169372)</li>\n<li>Fixed <code>RTCRtpSender maxFramerate</code> encoding parameter having no effect. (112397603)</li>\n<li>Fixed handling <code>NaN</code> in audio delay curves. (114881060)</li>\n<li>Fixed WebCodecs hardware encoders losing a frame. (115252749)</li>\n<li>Fixed audio elements with event listeners not getting garbage collected. (116346717) (FB13224538)</li>\n<li>Fixed the close algorithms for audio and video WebCodec decoders and encoders to match specification changes. (116346725)</li>\n<li>Fixed picture-in-picture when the <code>srcObject</code> is a video stream. (116465668)</li>\n<li>Fixed constraints on the maximum width or height causing blurry <code>getDisplayMedia</code> video. (116810370)</li>\n<li>Fixed <code>object-fit: fill</code> to work for a video element using a canvas stream <code>srcObject</code>. (116832514)</li>\n<li>Fixed the limit for the number of real-time audio threads. (116864442)</li>\n</ul>\n<h4><a name=\"networking\"></a>Networking</h4>\n<ul>\n<li>Fixed an issue causing embedded videos in iWork documents to fail. (116493190)</li>\n</ul>\n<h4><a name=\"rendering\"></a>Rendering</h4>\n<ul>\n<li>Fixed the scrollbar not updating on CSS color-scheme change. (99567600)</li>\n<li>Fixed ignoring <code>calc()</code> values on <code>&lt;colgroup&gt;</code> elements. (106692191)</li>\n<li>Fixed out-of-flow boxes not showing. (112733052) (FB12722063)</li>\n<li>Fixed out-of-flow <code>&lt;br&gt;</code> to not trigger a line break. (113208050)</li>\n<li>Fixed ancestor subgrids’ gutters to add to the extra layer of margin for descendant subgrids. (114271857)</li>\n<li>Fixed a bug where swapping to Safari from another app (or tab) would flash black. (116530284)</li>\n</ul>\n<h4><a name=\"safari\"></a>Safari</h4>\n<ul>\n<li>Fixed website notifications delivered through APNS to appear with the domain name and Safari icon, matching the appearance of website notifications delivered through Web Push. (116612341)</li>\n</ul>\n<h4><a name=\"safari-extensions\"></a>Safari Extensions</h4>\n<ul>\n<li>Fixed an issue where dynamic declarativeNetRequest rules would not override static rules. (107044339) (FB12074742)</li>\n<li>Fixed behavior of <code>domains</code>, <code>requestDomains</code>, <code>excludedDomains</code>, and <code>excludedRequestDomains</code> declarativeNetRequest values to match subdomains by default. (117592996)</li>\n</ul>\n<h4><a name=\"scrolling\"></a>Scrolling</h4>\n<ul>\n<li>Fixed clicking and dragging the overlay scrollbar that overlaps a composited, positioned descendant of a container with <code>overflow: scroll</code>. (89598421)</li>\n<li>Fixed scrolling on nested <code>pointer-events: auto</code> inside <code>pointer-events: none</code>. (110954175)</li>\n<li>Fixed a bug that caused some complicated websites to freeze when scrolling. (113318934)</li>\n</ul>\n<h4><a name=\"service-workers\"></a>Service Workers</h4>\n<ul>\n<li>Fixed a cache miss bug in DOMCache that triggered service worker fetch errors. (115740959) (FB13188943)</li>\n</ul>\n<h4><a name=\"svg\"></a>SVG</h4>\n<ul>\n<li>Fixed the motion path anchor point used for SVG when the <code>transform-box</code> is not the <code>view-box</code>. (108285569)</li>\n<li>Fixed <code>paint-order</code> property to inherit. (114030037)</li>\n<li>Fixed the SVG mask to work as a mask-resource for the CSS <code>mask-image</code>. (114465545)</li>\n<li>Fixed repainting an SVG element with a CSS reference filter when the filter changes. (117047658)</li>\n</ul>\n<h4><a name=\"text\"></a>Text</h4>\n<ul>\n<li>Fixed font fallback to ignore generic families for Private-Use Area Unicode codepoints. (115901340) (FB13197885)</li>\n</ul>\n<h4><a name=\"web-animations\"></a>Web Animations</h4>\n<ul>\n<li>Fixed <code>color-scheme</code> to support discrete animation. (94615599)</li>\n</ul>\n<h4><a name=\"web-api\"></a>Web API</h4>\n<ul>\n<li>Fixed <code>createPattern</code> to return null for a zero height image. (104285727)</li>\n<li>Fixed: Aligned <code>&lt;script type language&gt;</code> with the HTML Standard. (109600797)</li>\n<li>Fixed returning opaque origin for <code>blob:</code> URL containing inner non-http(s): URL. (109781193)</li>\n<li>Fixed: Changed navigable target names to <code>_blank</code> if they have dangling markup. (110134016)</li>\n<li>Fixed incorrect tab stop if the tab-size is a <code>&lt;length&gt;</code> and the distance to the next tab stop is less than <code>0.5ch</code>. (112043546)</li>\n<li>Fixed <code>URL</code>, <code>pathname</code>, and <code>search</code> setter incorrectly stripping trailing spaces. (112433299)</li>\n<li>Fixed custom highlight text decoration to respect priority. (112494779)</li>\n<li>Fixed handling focusability for plugin elements which have browsing context. (112821601)</li>\n<li>Fixed: Converted embed hidden into a proper boolean attribute. (113051256)</li>\n<li>Fixed edge cases in parsing options. (113826514)</li>\n<li>Fixed <code>&lt;a&gt;</code> and <code>&lt;area&gt;</code> origin getters to return an empty string for non-parsable URLs. (114078288)</li>\n<li>Fixed <code>&lt;a&gt;</code> and <code>&lt;area&gt;</code> protocol setters for non-parsable URLs. (114371380)</li>\n<li>Fixed URL’s protocol setter to forbid change a special URL to a non-special URL. (114624048)</li>\n<li>Fixed Worker and SharedWorker to fire an Event instead of an ErrorEvent for a parsing error. (114694487)</li>\n<li>Fixed <code>adoptedStyleSheets.length</code> to be settable and improved <code>ObservableArray</code> alignment with the specification. (114822538)</li>\n<li>Fixed a bug that could cause incorrect equality checks between DOM Document objects. (114857465)</li>\n<li>Fixed checking for <code>NaN</code> when creating a DelayNode for WebAudio. (115008784)</li>\n<li>Fixed <code>element.querySelector(\":has(:scope *)\")</code> to never match. (115158183)</li>\n<li>Fixed mutation events for child nodes. (115527098)</li>\n<li>Fixed mouse event handling such that if a drag operation is initiated from a canceled <code>mousedown</code> event, all subsequent mouse events are sent to the originating frame until the drag operation ends with a corresponding <code>mouseup</code> event. (116668701)</li>\n<li>Fixed light dismiss for a popover element within a complex shadow DOM breaks light dismiss calculation. (117214343)</li>\n</ul>\n<h4><a name=\"web-apps\"></a>Web Apps</h4>\n<ul>\n<li>Fixed an issue where page zoom is reset to 100% after quit and relaunch. (110298546) (FB12233006)</li>\n<li>Fixed a bug where <code>theme-color</code> is not applied to the title bar in web apps. (112980819)</li>\n<li>Fixed an issue where sign in pages sometimes unexpectely open in Safari instead of the web app. (113520837)</li>\n<li>Fixed an issue where clicking on notifications after 30 seconds from delivery fail to open the web app. (113757950)</li>\n<li>Fixed an issue that repeatedly asks for camera access after relaunching a web app. (114110664)</li>\n<li>Fixed remembering window size for a webpage added to the Dock. (114534506)</li>\n<li>Fixed an issue where a blank window remains on screen after starting a download. (115457207)</li>\n<li>Fixed an issue where some login pages unexpectedly open in Safari. (115527738) (FB13171758)</li>\n<li>Fixed a bug where the <code>scope</code> member in the web app manifest is not respected. (116261588)</li>\n<li>Fixed an issue where AutoFill settings in Safari do not take effect in web apps. (117671220)</li>\n<li>Fixed an issue where option+clicking a link failed to start a download. (117809013)</li>\n<li>Fixed an issue where JavaScript-based redirection to an external website causes a blank window to appear or the current window to disappear. (117809066)</li>\n<li>Fixed an issue where web app usage is not reflected in Screen Time. (117809075)</li>\n<li>Fixed an issue that prevents Ignore Screen Time Limits from working in web apps. (117809075)</li>\n</ul>\n<h4><a name=\"web-assembly\"></a>Web Assembly</h4>\n<ul>\n<li>Fixed WebAssembly SIMD vectors that can get corrupted when using <code>v128.any_true</code>. (111050621)</li>\n</ul>\n<h4><a name=\"web-inspector\"></a>Web Inspector</h4>\n<ul>\n<li>Fixed: Moved the details sidebar to the bottom when Web Inspector is too narrow. (63567675) (FB7711657)</li>\n<li>Fixed objects logged to the console with multiple private fields that use the same name. (109215331)</li>\n<li>Fixed broken search functionality. (113714342)</li>\n</ul>\n<h4><a name=\"webdriver\"></a>WebDriver</h4>\n<ul>\n<li>Fixed dispatched mouse events always having <code>buttons</code> property set to zero. (116049187)</li>\n</ul>\n<h4><a name=\"webgl\"></a>WebGL</h4>\n<ul>\n<li>Fixed a bug where multi-level textures would lose levels in WebGL. (116362216)</li>\n</ul>\n<h4><a name=\"webrtc\"></a>WebRTC</h4>\n<ul>\n<li>Fixed long delays switching audio input in video conferencing applications. (102724364)</li>\n<li>Fixed video quality when using TransformStream with Simulcast. (110395571)</li>\n<li>Fixed WebRTC UDP traffic to use interfaces already used by TCP traffic. (111000448)</li>\n<li>Fixed RTCDataChannel to use BinaryType to align with specifications. (114559008)</li>\n</ul>\n<h2><a name=\"updating-to-safari-17-2\"></a>Updating to Safari 17.2</h2>\n<p>Safari 17.2 is available for <a href=\"https://www.apple.com/ios/ios-17/\">iOS 17</a>, <a href=\"https://www.apple.com/ipados/ipados-17/\">iPadOS 17</a>, <a href=\"https://www.apple.com/macos/sonoma-preview/\">macOS Sonoma</a>, macOS Ventura and macOS Monterey.</p>\n<p>If you are running macOS Ventura or macOS Monterey, you can update Safari by itself by going to Software Update, and clicking “More info”. On macOS Ventura, that’s  &gt; System Settings &gt; General &gt; Software Update &gt; More info. To get the latest version of Safari on your iPhone or iPad, go to Settings &gt; General &gt; Software Update, and tap to update.</p>\n<h2><a name=\"feedback\"></a>Feedback</h2>\n<p>We love hearing from you. To share your thoughts on Safari 17.2, find us on Mastodon at <a href=\"https://front-end.social/@jensimmons\">@jensimmons@front-end.social</a> and <a href=\"https://mastodon.social/@jondavis\">@jondavis@mastodon.social</a>. Or send a reply on X to <a href=\"https://twitter.com/webkit\">@webkit</a>. If you run into any issues, we welcome your <a href=\"https://feedbackassistant.apple.com/\">feedback</a> on Safari UI, or your <a href=\"https://bugs.webkit.org/\">WebKit bug report</a> about web technologies or Web Inspector. Filing issues really does make a difference.</p>\n<p>Download the latest <a href=\"https://developer.apple.com/safari/download/\">Safari Technology Preview</a> to stay at the forefront of the web platform and to use the latest Web Inspector features.</p>\n<p>You can also find this information in the <a href=\"https://developer.apple.com/documentation/safari-release-notes/\">Safari 17.2 release notes</a>.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"0957490f846c5c8e3d843f09239fbb74b0580ad25b0092bce581596d56ef48c9","category":"Tech"}