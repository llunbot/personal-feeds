{"title":"Shines, Perspective, And Rotations: Fancy CSS 3D Effects For Images","link":"https://smashingmagazine.com/2023/07/shines-perspective-rotations-css-3d-effects-images/","date":1688727600000,"content":"<p>We all agree that 3D effects are cool, right? I think so, especially when they are combined with subtle animations. In this article, we will explore a few CSS tricks to create stunning 3D effects!</p>\n<p><em>“Why do we need another article about CSS 3D effects… aren’t there already a million of those?”</em> Yes, but this one is a bit special because we are going to work with the smallest amount of HTML possible. In fact, this is the only markup we will use to craft some pretty amazing CSS effects for images:</p>\n<pre><code>&lt;img src=\"\" alt=\"\"&gt;\n</code></pre>\n\n<p>That’s it! All we need is an <code>&lt;img&gt;</code> tag. Everything else will be done in CSS.</p>\n<p>Here’s how it’s going to work. We are going to explore three different effects that are not linked to each other but might borrow a little from one another. You don’t need to read the entire article in one sitting. Actually, I suggest reading one section at a time, taking time to understand the concepts and what the underlying code is doing before moving on to another effect.</p>\n<h3>Table Of Contents</h3>\n<ul>\n<li><a href=\"#css-3d-shine\">CSS 3D Shine</a></li>\n<li><a href=\"#css-3d-parallax\">CSS 3D Parallax</a></li>\n<li><a href=\"#css-3d-rotation\">CSS 3D Rotation</a></li>\n</ul>\nCSS 3D Shine\n<p>For the first effect, we are going to add a shine animation to the image, as well as a slight rotation when hovered.</p>\n<p><img src=\"https://files.smashing.media/articles/shines-perspective-rotations-css-3d-effects-images/css-image-effects-masking.png\" /></p>\n<p>The green box illustrates the gradient where the blue lines define the color stops we used. Initially, it’s placed at <code>100% 100%</code>, and on hover, we slide it to <code>0 0</code>. The slide effect will move the diagonal part of the gradient (the opaque part) along the image to create the shine effect.</p>\n<p>Here is the full demo again. I’m even including a second variation for you to tear apart and investigate how it works.</p>\n<p><img src=\"https://files.smashing.media/articles/shines-perspective-rotations-css-3d-effects-images/css-image-effects-clipping.png\" /></p>\n<p>The <code>clip-path</code> defines the clipped area, and we need that area to remain fixed. That’s why we added a translation on hover to move the image in the opposite direction of the <code>clip-path</code>.</p>\n<p><img src=\"https://files.smashing.media/articles/shines-perspective-rotations-css-3d-effects-images/css-image-effects-outline.png\" /></p>\n<p>Here’s how that works. First, we add some padding to the top and the bottom of the image and apply an <code>outline</code> that is semi-transparent black.</p>\n<p>Second, we apply a negative <code>outline-offset</code> so that the <code>outline</code> covers the image on the left and right sides but leaves the top and bottom alone:</p>\n<pre><code>img {\n  --d: 18px;  /* depth */\n\n  padding-block: var(--d);\n  outline: var(--d) solid #0008;\n  outline-offset: calc(-1 * var(--d));\n}\n</code></pre>\n\n<p>Notice that I have created a variable, <code>--d</code>, that controls the thickness of the <code>outline</code>. This is what gives the image depth.</p>\n<p>The last step is to add the <code>clip-path</code>. We need a polygon with eight points for that.</p>\n<p><img src=\"https://files.smashing.media/articles/shines-perspective-rotations-css-3d-effects-images/css-image-effects-polygon.png\" /></p>\n<p>The red points are fixed, and the green points are ones that we will animate to reveal the depth. I know it’s far from a 3D box, but this next visual, where we add the rotation, gives a better illustration.</p>\n<p><img src=\"https://files.smashing.media/articles/shines-perspective-rotations-css-3d-effects-images/css-image-effects-3d-box-hover.png\" /></p>\n<p>Initially, the image is rotated with some perspective. The green points on the right are aligned with the red ones. Thus, we hide the <code>outline</code> on that side to keep it visible only on the left side. We have our 3D box with the depth on the left.</p>\n<p>On hover, we move the green points on the left while rotating the image. Halfway through the animation, all the green points are aligned with the red ones, and the rotation angle is equal to <code>0deg</code>, hiding the <code>outline</code> and giving the image a flat appearance.</p>\n<p>Then, we continue the rotation, and the green points on the right move while the left ones remain in place. We get the same 3D effect but with the depth on the right side.</p>\n<p>Bear with me because the next block of code is going to look really confusing at first. That’s due to a few new variables and the eight-point polygon we’re drawing on the <code>clip-path</code> property.</p>\n<pre><code>@property --_l {\n  syntax: \"&lt;flength&gt;\";\n  initial-value: 0px;\n  inherits: true;\n}\n@property --_r {\n  syntax: \"&lt;length&gt;\";\n  initial-value: 0px;\n  inherits: true;\n}\n\nimg {\n  --d: 18px;  /* depth */\n  --a: 20deg; /* angle */\n  --x: 10px;\n\n  --_d: calc(100% - var(--d));\n  --_l: 0px;\n  --_r: 0px;\n\n  clip-path: polygon(\n    /* The two green points on the left */\n    var(--_l) calc(var(--_d) - var(--x)),\n    var(--_l) calc(var(--d)  + var(--x)),\n\n    /* The two red points on the top */\n    var(--d) var(--d),var(--_d) var(--d),\n\n    /* The two green points on the right */\n    calc(var(--_d) + var(--_r)) calc(var(--d)  + var(--x)),\n    calc(var(--_d) + var(--_r)) calc(var(--_d) - var(--x)),\n\n    /* The two red points on the bottom */\n    var(--_d) var(--_d),var(--d) var(--_d)\n\n    );\n  transition: transform .3s, --_r .15s, --_l .15s .15s;\n}\n\n/* Update the points of the polygon on hover */\nimg:hover{\n  --_l: var(--d);\n  --_r: var(--d);\n  --_i: -1;\n  transition-delay: 0s, .15s, 0s;\n}\n</code></pre>\n\n<p>I’ve used comments to help explain what the code is doing. Notice I am using the variables <code>--_l</code> and <code>--_r</code> to define the position of the green points. I animate those variables from <code>0</code> to the depth (<code>--d</code>) value. The <code>@property</code> declarations at the top allow us to animate the variables by specifying the type of values they are (<code>&lt;length&gt;</code>).</p>\n<p><strong>Note</strong>: <em>Not all browsers currently support <code>@property</code>. So, I’ve added a fallback in the demo with a slightly different animation.</em></p>\n<p>After the polygon is drawn on the <code>clip-path</code> property, the next thing the code does is apply a <code>transition</code> that handles the rotation. The full rotation lasts <code>.3s</code>, so the green points need to transition at half that duration (<code>.15s</code>). On hover, the polygon points on the left move immediately (<code>0s</code>) while the right points move at half the duration (courtesy of a <code>.15s</code> delay). When we leave the hovered state, we use different delays because we need the right points to move immediately (<code>0s</code>) while the left points move at half the duration.</p>\n<p>What’s up with that <code>--x</code> variable, right? If you check the first image that I provided to illustrate the <code>clip-path</code> points, you will notice that the green points are slightly shifted from the top and bottom edges, which is logical to simulate the 3D effect. The <code>--x</code> variable controls how much shifting takes place, but the math behind it is a bit complex and not easy to express in CSS. So, we update it manually based on each case until we get a value that feels right.</p>\n<p>That gives us our final result!</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/yLRRBKj\">3D images with hover effect</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\nWrapping Up\n<p>I hope you enjoyed — and perhaps were even challenged by — this exploration of CSS 3D image effects. We worked with a whole bunch of advanced CSS features, including masks, clipping, gradients, transitions, and calculations, to make some pretty incredible hover effects for images that you certainly don’t see every day.</p>\n<p>And we did it in a way that only needed one line of HTML. No <code>div</code>s. No classes or IDs. No pseudo-elements. Just a single <code>&lt;img&gt;</code> tag is all we need. Yes, it’s true that more markup may have made the CSS less complex, but the fact that it relies on a plain HTML element means the CSS can be used more broadly. CSS is powerful enough to do all of this on a single element!</p>\n<p>I’ve written extensively about advanced CSS styles for images. If you’re looking for more ideas and inspiration, I encourage you to check out the following articles I’ve published:</p>\n<ul>\n<li>“<a href=\"https://verpex.com/blog/website-tips/css-tricks-to-make-your-image-look-stunning\">CSS Effects For Stunning Images</a>” (Verpex)</li>\n<li>“<a href=\"https://css-tricks.com/fancy-image-decorations-single-element-magic/\">Fancy Image Decorations: Single Element Magic</a>” (CSS-Tricks)</li>\n<li>“<a href=\"https://css-tricks.com/fancy-image-decorations-masks-and-advanced-hover-effects/\">Fancy Image Decorations: Masks and Advanced Hover Effects</a>” (CSS-Tricks)</li>\n<li>“<a href=\"https://css-tricks.com/fancy-image-decorations-outlines-and-complex-animations/\">Fancy Image Decorations: Outlines and Complex Animations</a>” (CSS-Tricks)</li>\n<li>“<a href=\"https://www.sitepoint.com/css-image-reveal-animation/\">How to Add a CSS Reveal Animation to Your Images</a>” (SitePoint)</li>\n</ul>\n<p>I also run a site called <a href=\"https://css-tip.com/\">CSS Tip</a> that explores even more fancy effects — subscribe to <a href=\"https://css-tip.com/feed/feed.xml\">the RSS feed</a> to keep up with the experiments I do over there!</p>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/10/advanced-animations-css/\">How To Create Advanced Animations With CSS</a>,” Yosra Emad</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/11/3d-css-flippy-snaps-react-greensock/\">3D CSS Flippy Snaps With React And GreenSock</a>,” Jhey Tompkins</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/04/easing-functions-css-animations-transitions/\">Understanding Easing Functions For CSS Animations And Transitions</a>,” Adrian Bece</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/02/responsive-image-effects-css-gradients-aspect-ratio/\">Create Responsive Image Effects With CSS Gradients And aspect-ratio</a>,” Stephanie Eckles</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"f6919530e6951a372bab33411df796f6a2826d81fddd9217b6239a41d0e5e39c","category":"Tech"}