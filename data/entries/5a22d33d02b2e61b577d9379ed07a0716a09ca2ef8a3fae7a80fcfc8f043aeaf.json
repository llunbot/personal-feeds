{"title":"Knowledge Bases now delivers fully managed RAG experience in Amazon Bedrock","link":"https://aws.amazon.com/blogs/aws/knowledge-bases-now-delivers-fully-managed-rag-experience-in-amazon-bedrock/","date":1701190871000,"content":"<p>Back in September, we <a href=\"https://aws.amazon.com/blogs/aws/preview-connect-foundation-models-to-your-company-data-sources-with-agents-for-amazon-bedrock/\">introduced Knowledge Bases for Amazon Bedrock</a> in preview. Starting today, <a href=\"https://aws.amazon.com/bedrock/knowledge-bases/\">Knowledge Bases for Amazon Bedrock</a> is generally available.</p> \n<p>With a knowledge base, you can securely connect foundation models (FMs) in <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a> to your company data for Retrieval Augmented Generation (RAG). Access to additional data helps the model generate more relevant, context-specific, and accurate responses without continuously retraining the FM. All information retrieved from knowledge bases comes with source attribution to improve transparency and minimize hallucinations. If you’re curious how this works, check out my <a href=\"https://aws.amazon.com/blogs/aws/preview-connect-foundation-models-to-your-company-data-sources-with-agents-for-amazon-bedrock/\">previous post</a> that includes a primer on RAG.</p> \n<p>With today’s launch, Knowledge Bases gives you a fully managed RAG experience and the easiest way to get started with RAG in Amazon Bedrock. Knowledge Bases now manages the initial vector store setup, handles the embedding and querying, and provides source attribution and short-term memory needed for production RAG applications. If needed, you can also customize the RAG workflows to meet specific use case requirements or integrate RAG with other generative artificial intelligence (AI) tools and applications.</p> \n<p><strong><u>Fully managed RAG experience<br /> </u></strong>Knowledge Bases for Amazon Bedrock manages the end-to-end RAG workflow for you. You specify the location of your data, select an embedding model to convert the data into vector embeddings, and have Amazon Bedrock create a vector store in your account to store the vector data. When you select this option (available only in the console), Amazon Bedrock creates a vector index in Amazon OpenSearch Serverless in your account, removing the need to manage anything yourself.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/2023-kb-01.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/21/2023-kb-01.png\" alt=\"Knowledge bases for Amazon Bedrock\" width=\"1432\" height=\"865\" /></a></p> \n<p>Vector embeddings include the numeric representations of text data within your documents. Each embedding aims to capture the semantic or contextual meaning of the data. Amazon Bedrock takes care of creating, storing, managing, and updating your embeddings in the vector store, and it ensures your data is always in sync with your vector store.</p> \n<p>Amazon Bedrock now also supports two new APIs for RAG that handle the embedding and querying and provide the source attribution and short-term memory needed for production RAG applications.</p> \n<p>With the new <code>RetrieveAndGenerate</code> API, you can directly retrieve relevant information from your knowledge bases and have Amazon Bedrock generate a response from the results by specifying a FM in your API call. Let me show you how this works.</p> \n<p><strong>Use the RetrieveAndGenerate API<br /> </strong>To give it a try, navigate to the <a href=\"https://console.aws.amazon.com/bedrock/home\">Amazon Bedrock console</a>, create and select a knowledge base, then select <strong>Test knowledge base</strong>. For this demo, I created a knowledge base that has access to a PDF of <a href=\"https://www.oreilly.com/library/view/generative-ai-on/9781098159214/\">Generative AI on AWS</a>. I choose <strong>Select Model</strong> to specify a FM.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/2023-kb-07-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/2023-kb-07-1.png\" alt=\"Knowledge Bases for Amazon Bedrock\" width=\"1635\" height=\"388\" /></a></p> \n<p>Then, I ask, “What is Amazon Bedrock?”</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/2023-kb-05.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/2023-kb-05.png\" alt=\"Knowledge Bases for Amazon Bedrock\" width=\"1656\" height=\"865\" /></a></p> \n<p>Behind the scenes, Amazon Bedrock converts the queries into embeddings, queries the knowledge base, and then augments the FM prompt with the search results as context information and returns the FM-generated response to my question. For multi-turn conversations, Knowledge Bases manages the short-term memory of the conversation to provide more contextual results.</p> \n<p>Here’s a quick demo of how to use the APIs with the <a href=\"https://aws.amazon.com/sdk-for-python/\">AWS SDK for Python (Boto3)</a>.</p> \n<pre><code>def retrieveAndGenerate(input, kbId):\n    return bedrock_agent_runtime.retrieve_and_generate(\n        input={\n            'text': input\n        },\n        retrieveAndGenerateConfiguration={\n            'type': 'KNOWLEDGE_BASE',\n            'knowledgeBaseConfiguration': {\n                'knowledgeBaseId': kbId,\n                'modelArn': 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-instant-v1'\n                }\n            }\n        )\n\nresponse = retrieveAndGenerate(\"What is Amazon Bedrock?\", \"AES9P3MT9T\")[\"output\"][\"text\"]</code></pre> \n<p>The output of the <code>RetrieveAndGenerate</code> API includes the generated response, the source attribution, and the retrieved text chunks. In my demo, the API response looks like this (with some of the output redacted for brevity):</p> \n<div> \n <pre><code>\n{ ... \n    'output': {'text': 'Amazon Bedrock is a managed service from AWS that ...'}, \n    'citations': \n        [{'generatedResponsePart': \n             {'textResponsePart': \n                 {'text': 'Amazon Bedrock is ...', 'span': {'start': 0, 'end': 241}}\n             }, \n\t      'retrievedReferences': \n\t\t\t[{'content':\n                 {'text': 'All AWS-managed service API activity...'}, \n\t\t\t\t 'location': {'type': 'S3', 's3Location': {'uri': 's3://data-generative-ai-on-aws/gaia.pdf'}}}, \n\t\t     {'content': \n\t\t\t      {'text': 'Changing a portion of the image using ...'}, \n\t\t\t\t  'location': {'type': 'S3', 's3Location': {'uri': 's3://data-generative-ai-on-aws/gaia.pdf'}}}, ...]\n        ...}]\n}\n</code></pre> \n <p>The generated response looks like this:</p> \n <blockquote>\n  <p>Amazon Bedrock is a managed service that offers a serverless experience for generative AI through a simple API. It provides access to foundation models from Amazon and third parties for tasks like text generation, image generation, and building conversational agents. Data processed through Amazon Bedrock remains private and encrypted.</p>\n </blockquote> \n <p><strong><u>Customize RAG workflows<br /> </u></strong>If you want to process the retrieved text chunks further, see the relevance scores of the retrievals, or develop your own orchestration for text generation, you can use the new <code>Retrieve</code> API. This API converts user queries into embeddings, searches the knowledge base, and returns the relevant results, giving you more control to build custom workflows on top of the semantic search results.</p> \n <p><strong>Use the Retrieve API<br /> </strong>In the Amazon Bedrock console, I toggle the switch to disable <strong>Generate responses</strong>.</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/2023-kb-08.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/2023-kb-08.png\" alt=\"Knowledge Bases for Amazon Bedrock\" width=\"1656\" height=\"407\" /></a></p> \n <p>Then, I ask again, “What is Amazon Bedrock?” This time, the output shows me the retrieval results with links to the source documents where the text chunks came from.</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/2023-kb-09.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/2023-kb-09.png\" alt=\"Knowledge Bases for Amazon Bedrock\" width=\"1642\" height=\"1172\" /></a></p> \n <p>Here’s how to use the <code>Retrieve</code> API with boto3.</p> \n <pre><code>import boto3\n\nbedrock_agent_runtime = boto3.client(\n    service_name = \"bedrock-agent-runtime\"\n)\n\ndef retrieve(query, kbId, numberOfResults=5):\n    return bedrock_agent_runtime.retrieve(\n        retrievalQuery= {\n            'text': query\n        },\n        knowledgeBaseId=kbId,\n        retrievalConfiguration= {\n            'vectorSearchConfiguration': {\n                'numberOfResults': numberOfResults\n            }\n        }\n    )\n\nresponse = retrieve(\"What is Amazon Bedrock?\", \"AES9P3MT9T\")[\"retrievalResults\"]</code></pre> \n <p>The output of the <code>Retrieve</code> API includes the retrieved text chunks, the location type and URI of the source data, and the scores of the retrievals. The score helps to determine chunks that match more closely with the query.</p> \n <p>In my demo, the API response looks like this (with some of the output redacted for brevity):</p> \n <div> \n  <pre><code>[{'content': {'text': 'Changing a portion of the image using ...'},\n  'location': {'type': 'S3',\n   's3Location': {'uri': 's3://data-generative-ai-on-aws/gaia.pdf'}},\n  'score': 0.7329834},\n {'content': {'text': 'back to the user in natural language. For ...'},\n  'location': {'type': 'S3',\n   's3Location': {'uri': 's3://data-generative-ai-on-aws/gaia.pdf'}},\n  'score': 0.7331088},\n...]\n\t\t \n</code></pre> \n </div> \n <p>To further customize your RAG workflows, you can define a custom chunking strategy and select a custom vector store.</p> \n <p><strong>Custom chunking strategy –</strong> To enable effective retrieval from your data, a common practice is to first split the documents into manageable chunks. This enhances the model’s capacity to comprehend and process information more effectively, leading to improved relevant retrievals and generation of coherent responses. Knowledge Bases for Amazon Bedrock manages the chunking of your documents.</p> \n <p>When you configure the data source for your knowledge base, you can now define a chunking strategy. Default chunking splits data into chunks of up to 200 tokens and is optimized for question-answer tasks. Use default chunking when you are not sure of the optimal chunk size for your data.</p> \n <p>You also have the option to specify a custom chunk size and overlap with fixed-size chunking. Use fixed-size chunking if you know the optimal chunk size and overlap for your data (based on file attributes, accuracy testing, and so on). An overlap between chunks in the recommended range of 0–20 percent can help improve accuracy. Higher overlap can lead to decreased relevancy scores.</p> \n <p>If you select to create one embedding per document, Knowledge Bases keeps each file as a single chunk. Use this option if you don’t want Amazon Bedrock to chunk your data, for example, if you want to chunk your data offline using an algorithm that is specific to your use case. Common use cases include code documentation.</p> \n <p><strong>Custom vector store – </strong>You can also select a custom vector store. The available vector database options include <a href=\"https://aws.amazon.com/opensearch-service/serverless-vector-engine/\">vector engine for Amazon OpenSearch Serverless</a>, <a href=\"https://www.pinecone.io/\">Pinecone</a>, and <a href=\"https://redis.com/\">Redis Enterprise Cloud</a>. To use a custom vector store, you must create a new, empty vector database from the list of supported options and provide the vector database index name as well as index field and metadata field mappings. This vector database will need to be for exclusive use with Amazon Bedrock.</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/2023-kb-04.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/23/2023-kb-04.png\" alt=\"Knowledge Bases for Amazon Bedrock\" width=\"1458\" height=\"1075\" /></a></p> \n <p><strong><u>Integrate RAG with other generative AI tools and applications<br /> </u></strong>If you want to build an AI assistant that can perform multistep tasks and access company data sources to generate more relevant and context-aware responses, you can integrate Knowledge Bases with <a href=\"https://aws.amazon.com/bedrock/agents/\">Agents for Amazon Bedrock</a>. You can also use the Knowledge Bases retrieval plugin for <a href=\"https://python.langchain.com/docs/integrations/retrievers\">LangChain</a> to integrate RAG workflows into your generative AI applications.</p> \n <div> \n  <p><b><u>Availability<br /> </u></b>Knowledge bases for Amazon Bedrock is available today in AWS Regions US East (N. Virginia) and US West (Oregon).</p> \n  <p><span><strong>Learn more</strong></span></p> \n  <ul> \n   <li><a href=\"https://aws.amazon.com/bedrock/knowledge-bases/\">Knowledge Bases for Amazon Bedrock</a></li> \n   <li><a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base.html\">Knowledge Bases User Guide</a></li> \n   <li><a href=\"https://console.aws.amazon.com/bedrock/home\"> Amazon Bedrock in the console</a></li> \n  </ul> \n  <p>— <a href=\"https://www.linkedin.com/in/antje-barth/\" target=\"_blank\">Antje</a></p> \n </div> \n</div>","author":"Antje Barth","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"5a22d33d02b2e61b577d9379ed07a0716a09ca2ef8a3fae7a80fcfc8f043aeaf","category":"Tech"}