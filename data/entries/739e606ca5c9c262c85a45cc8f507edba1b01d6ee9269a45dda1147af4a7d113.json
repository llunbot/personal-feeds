{"title":"AWS Transform for .NET, the first agentic AI service for modernizing .NET applications at scale","link":"https://aws.amazon.com/blogs/aws/aws-transform-for-net-the-first-agentic-ai-service-for-modernizing-net-applications-at-scale/","date":1747327273000,"content":"<p>I started my career as a .NET developer and have seen .NET evolve over the last couple of decades. Like many of you, I also developed multiple enterprise applications in .NET Framework that ran only on Windows. I fondly remember building my first enterprise application with .NET Framework. Although it served us well, the technology landscape has significantly shifted. Now that there is an open source and cross-platform version of .NET that can run on Linux, these legacy enterprise applications built on .NET Framework need to be ported and modernized.</p> \n<p>The benefits of porting to Linux are compelling: applications cost 40 percent less to operate because they save on Windows licensing costs, run 1.5–2 times faster with improved performance, and handle growing workloads with 50 percent better scalability. Having helped port several applications, I can say the effort is worth the rewards.</p> \n<p>However, porting .NET Framework applications to cross-platform .NET is a labor-intensive and error-prone process. You have to perform multiple steps, such as analyzing the codebase, detecting incompatibilities, implementing fixes while porting the code, and then validating the changes. For enterprises, the challenge becomes even more complex because they might have hundreds of .NET Framework applications in their portfolio.</p> \n<p>At re:Invent 2024, we previewed this capability as <a href=\"https://aws.amazon.com/about-aws/whats-new/2024/12/amazon-q-developer-transformation-net-porting-preview/\">Amazon Q Developer transformation capabilities</a> for .NET to help port your .NET applications at scale. The experience is available as a <a href=\"https://aws.amazon.com/blogs/aws/announcing-amazon-q-developer-transformation-capabilities-for-net-mainframe-and-vmware-workloads-preview/\">unified web experience</a> for at-scale transformation and <a href=\"https://aws.amazon.com/blogs/aws/announcing-amazon-q-developer-transformation-capabilities-for-net-preview/\">within your integrated development environment (IDE)</a> for individual project and solution porting.</p> \n<p>Now that we’ve incorporated your valuable feedback and suggestions, we’re excited to announce today the general availability of <a href=\"https://aws.amazon.com/transform/net\">AWS Transform for .NET</a>. We’ve also added new capabilities to support projects with private NuGet packages, port model-view-controller (MVC) Razor views to ASP .NET Core Razor views, and execute the ported unit tests.</p> \n<p>I’ll expand on the key new capabilities in a moment, but let’s first take a quick look at the two porting experiences of AWS Transform for .NET.</p> \n<p><span><strong>Large-scale porting experience for .NET applications</strong></span><br /> Enterprise digital transformation is typically driven by central teams responsible for modernizing hundreds of applications across multiple business units. Different teams have ownership of different applications and their respective repositories. Success requires close coordination between these teams and the application owners and developers across business units. To accelerate this modernization at scale, AWS Transform for .NET provides a web experience that enables teams to connect directly to source code repositories and efficiently transform multiple applications across the organization. For select applications requiring dedicated developer attention, the same agent capabilities are available to developers as an extension for Visual Studio IDE.</p> \n<p>Let’s start by looking at how the web experience of AWS Transform for .NET helps port hundreds of .NET applications at scale.</p> \n<p><span><strong>Web experience of AWS Transform for .NET</strong></span><br /> To get started with the web experience of AWS Transform, I onboard using the steps outlined in the <a href=\"https://docs.aws.amazon.com/transform/latest/userguide/dotnet-quick-start.html\">documentation</a>, sign in using my credentials, and create a job for .NET modernization.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/12/CreateJob.gif\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/12/CreateJob.gif\" alt=\"Create a new job for .NET Transformation\" width=\"1280\" height=\"720\" /></a></p> \n<p>AWS Transform for .NET creates a job plan, which is a sequence of steps that the agent will execute to assess, discover, analyze, and transform applications at scale. It then waits for me to <a href=\"https://docs.aws.amazon.com/transform/latest/userguide/dotnet-creating-repo-connector.html\">set up a connector</a> to connect to my source code repositories.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/15/connectrepo.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/15/connectrepo.png\" alt=\"Setup connector to connect to source code repository \" width=\"1904\" height=\"543\" /></a></p> \n<p>After the connector is in place, AWS Transform begins discovering repositories in my account. It conducts an assessment focused on three key areas: repository dependencies, required private packages and third-party libraries, and supported project types within your repositories.</p> \n<p>Based on this assessment, it generates a recommended transformation plan. The plan orders repositories according to their last modification dates, dependency relationships, private package requirements, and the presence of supported project types.</p> \n<p>AWS Transform for .NET then prepares for the transformation process by requesting specific inputs, such as the target branch destination, target .NET version, and the repositories to be transformed.</p> \n<p>To select the repositories to transform, I have two options: use the recommended plan or customize the transformation plan by selecting repositories manually. For selecting repositories manually, I can use the UI or download the repository mapping and upload the customized list.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/15/SelectRepos1-1.gif\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/15/SelectRepos1-1.gif\" alt=\"select the repositories to transform \" width=\"1870\" height=\"762\" /></a></p> \n<p>AWS Transform for .NET automatically ports the application code, builds the ported code, executes unit tests, and commits the ported code to a new branch in my repository. It provides a comprehensive transformation summary, including modified files, test outcomes, and suggested fixes for any remaining work.</p> \n<p>While the web experience helps accelerate large-scale porting, some applications may require developer attention. For these cases, the same agent capabilities are available in the Visual Studio IDE.</p> \n<p><span><strong>Visual Studio IDE experience of AWS Transform for .NET</strong></span><br /> Now, let’s explore how AWS Transform for .NET works within Visual Studio.</p> \n<p>To get started, I install the latest version of <a href=\"https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.AWSToolkitforVisualStudio2022\">AWS Toolkit extension for Visual Studio</a> and set up the <a href=\"https://docs.aws.amazon.com/transform/latest/userguide/dotnet-ide-vs.html#transform-dotnet-prerequisites\">prerequisites</a>.</p> \n<p>I open a .NET Framework solution, and in the <strong>Solution Explorer</strong>, I see the context menu item <strong>Port project with AWS Transform</strong> for an individual project.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/15/VSExten2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/15/VSExten2.png\" alt=\"Context menu for Port project with AWS Transform in Visual Studio\" width=\"946\" height=\"840\" /></a></p> \n<p>I provide the required inputs, such as the target .NET version and the approval for the agents to autonomously transform code, execute unit tests, generate a transformation summary, and validate Linux-readiness.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/13/trans-summary.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/13/trans-summary.png\" alt=\"Transformation summary after the project is transformed in Visual Studio\" width=\"1345\" height=\"625\" /></a></p> \n<p>I can review the code changes made by the agents locally and continue updating my codebase.</p> \n<p>Let’s now explore some of the key new capabilities added to AWS Transform for .NET.</p> \n<p><span><strong>Support for projects with private NuGet package dependencies </strong></span><br /> During preview, only projects with public NuGet package dependencies were supported. With general availability, we now support projects with private NuGet package dependencies. This has been one of the most requested features during the preview.</p> \n<p>The feature I really love is that AWS Transform can detect cross-repository dependencies. If it finds the source code of my private NuGet package, it automatically transforms that as well. However, if it can’t locate the source code, in the web experience, it provides me the flexibility to upload the required NuGet packages.</p> \n<p>AWS Transform displays the missing package dependencies that need to be resolved. There are two ways to do this: I can either <a href=\"https://docs.aws.amazon.com/transform/latest/userguide/dotnet-resolving-dependencies.html#upload-missing-packages\">use the provided PowerShell script </a>to create and upload packages, or I can build the application locally and upload the NuGet packages from the packages folder in the solution directory.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/15/nugetupload.gif\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/15/nugetupload.gif\" alt=\"Upload packages to resolve missing dependencies \" width=\"1866\" height=\"780\" /></a></p> \n<p>After I upload the missing NuGet packages, AWS Transform is able to resolve the dependencies. It’s best to provide both the .NET Framework and cross platform .NET versions of the NuGet packages. If the cross platform .NET version is not available, then at a minimum the .NET Framework version is required for AWS Transform to add it as an assembly reference and proceed for transformation.</p> \n<p><span><strong>Unit test execution</strong></span><br /> During preview, we supported porting unit tests from .NET Framework to cross-platform .NET. With general availability, we’ve also added support for executing unit tests after the transformation is complete.</p> \n<p>After the transformation is complete and the unit tests are executed, I can see the results in the dashboard and view the status of the tests at each individual test project level.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/15/UnitTests1.gif\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/15/UnitTests1.gif\" alt=\"Dashboard after successful transformation in web showing exectuted unit tests \" width=\"1880\" height=\"800\" /></a></p> \n<p><span><strong>Transformation visibility and summary</strong></span><br /> After the transformation is complete, I can download a detailed report in JSON format that gives me a list of transformed repositories, details about each repository, and the status of the transformation actions performed for each project within a repository. I can view the natural language transformation summary at the project level to understand AWS Transform output with project-level granularity. The summary provides me with an overview of updates along with key technical changes to the codebase.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/15/trans-sum.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/15/trans-sum.png\" alt=\"detailed report of transformed project highlighting transformation summary of one of the project\" width=\"1380\" height=\"709\" /></a></p> \n<p><span><strong>Other new features</strong></span><br /> Let’s have a quick look at other new features we’ve added with general availability:</p> \n<ul> \n <li><strong>Support for porting UI layer</strong> – During preview, you could only port the business logic layers of MVC applications using AWS Transform, and you had to port the UI layer manually. With general availability, you can now use AWS Transform to port MVC Razor views to ASP.NET Core Razor views.</li> \n <li><strong>Expanded connector support</strong> – During preview, you could connect only to GitHub repositories. Now with general availability, you can connect to GitHub, GitLab, and Bitbucket repositories.</li> \n <li><strong>Cross repository dependency</strong> – When you select a repository for transformation, dependent repositories are automatically selected for transformation.</li> \n <li><strong>Download assessment report</strong> – You can download a detailed assessment report of the identified repositories in your account and private NuGet packages referenced in these repositories.</li> \n <li><strong>Email notifications with deep links</strong> – You’ll receive email notifications when a job’s status changes to completed or stopped. These notifications include deep links to the transformed code branches for review and continued transformation in your IDE.</li> \n</ul> \n<p><span><strong>Things to know</strong></span><br /> Some additional things to know are:</p> \n<ul> \n <li><strong>Regions</strong> – AWS Transform for .NET is generally available today in the Europe (Frankfurt) and US East (N. Virginia) <a href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#region\">Regions</a>.</li> \n <li><strong>Pricing</strong> – Currently, there is <a href=\"https://aws.amazon.com/transform/pricing/\">no additional charge</a> for AWS Transform. Any resources you create or continue to use in your AWS account using the output of AWS Transform will be billed according to their standard pricing. For limits and quotas, refer to the <a href=\"https://docs.aws.amazon.com/transform/latest/userguide/load-balancer-limits.html\">documentation</a>.</li> \n <li><strong>.NET versions supported</strong> – AWS Transform for .NET supports transforming applications written using .NET Framework versions 3.5+, .NET Core 3.1, and .NET 5+, and the cross-platform .NET version, .NET 8.</li> \n <li><strong>Application types supported</strong> – AWS Transform for .NET supports porting C# code projects of the following types: console application, class library, unit tests, WebAPI, Windows Communication Foundation (WCF) service, MVC, and single-page application (SPA).</li> \n <li><strong>Getting started</strong> – To get started, visit AWS Transform for .NET <a href=\"https://docs.aws.amazon.com/transform/latest/userguide/dotnet.html\">User Guide</a>.</li> \n <li><strong>Webinar</strong> – Join the webinar <a href=\"https://pages.awscloud.com/NAMER-field-OE-AWS-Transform-NET-2025-reg-event.html\">Accelerate .NET Modernization with Agentic AI</a> to experience AWS Transform for .NET through a live demonstration.</li> \n</ul> \n<p>– <a href=\"https://www.linkedin.com/in/kprasadrao/\">Prasad</a></p> \n<hr /> \n<p>How is the News Blog doing? Take this <a href=\"https://amazonmr.au1.qualtrics.com/jfe/form/SV_eyD5tC5xNGCdCmi\">1 minute survey</a>!</p> \n<p><em>(This <a href=\"https://amazonmr.au1.qualtrics.com/jfe/form/SV_eyD5tC5xNGCdCmi\">survey</a> is hosted by an external company. AWS handles your information as described in the <a href=\"https://aws.amazon.com/privacy/?trk=4b29643c-e00f-4ab6-ab9c-b1fb47aa1708&amp;sc_channel=blog\">AWS Privacy Notice</a>. AWS will own the data gathered via this survey and will not share the information collected with survey respondents.)</em></p>","author":"Prasad Rao","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"739e606ca5c9c262c85a45cc8f507edba1b01d6ee9269a45dda1147af4a7d113","category":"Tech"}