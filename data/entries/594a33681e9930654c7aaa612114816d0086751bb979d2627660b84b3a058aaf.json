{"title":"Consul 1.16 enhances service mesh reliability, user experience, and security","link":"https://www.hashicorp.com/blog/consul-1-16-enhances-service-mesh-reliability-user-experience-and-security","date":1688140800000,"content":"<p>We're excited to announce that HashiCorp Consul 1.16 is now generally available. Consul uses service identities and traditional networking practices to help organizations securely discover and connect services across any runtime or platform. </p>\n\n<p>Organizations constantly aim to improve their application's scale, resilience, performance, and security while ensuring quick deployment and troubleshooting. The latest Consul releases further these goals by enhancing enterprise readiness, simplifying the user experience, speeding app deployments, and bolstering application security in the mesh. </p>\n\n<p>Consul 1.16 adds new features for reliability, scalability, security, service mesh UX, extensibility, and service discovery.</p>\n\n<h2>Reliability and scale</h2>\n\n<p>Consul 1.16 debuts several new reliability and scalability features for Consul Enterprise:</p>\n\n<h3>Sameness groups (Consul Enterprise - beta)</h3>\n\n<p>When implementing service failover between Consul clusters under common administration, operators often need to seamlessly handle failover between active-standby clusters. <a href=\"https://developer.hashicorp.com/consul/docs/connect/cluster-peering\">Peered clusters</a> and <a href=\"https://www.hashicorp.com/blog/achieving-multi-tenancy-with-consul-administrative-partitions\">administrative partitions</a> within Consul are typically treated as separate autonomous meshes, which can sometimes create complexity in achieving uniform service failover.</p>\n\n<p>To address this, we’ve introduced sameness groups to logically group Consul peers and partitions that share common administration. This logical grouping enables efficient service failover between clusters, ensuring high availability and resiliency for services deployed across multiple regions and Consul clusters. </p>\n<img src=\"https://www.datocms-assets.com/2885/1686608864-sameness-groups-example-edited.png\" alt=\"Examples\" /><p>By enabling sameness groups, organizations can ensure that even in the event of issues in one cluster or region, the failover mechanism redirects traffic to an active standby cluster, maintaining uninterrupted service delivery. This capability significantly enhances the reliability and resilience of services in distributed environments. Refer to the <a href=\"https://developer.hashicorp.com/consul/docs/v1.16.x/connect/cluster-peering/usage/create-sameness-groups\">sameness groups overview documentation</a> for more information.</p>\n\n<h3>Enhanced control plane protection (Enterprise)</h3>\n\n<p>In <a href=\"https://www.hashicorp.com/blog/consul-1-15-adds-envoy-extensions-and-enhances-access-logging\">Consul 1.15</a>, remote procedure call (<a href=\"https://developer.hashicorp.com/consul/docs/install/glossary#rpc\">RPC</a>) rate limits were applied globally, allowing any client to potentially overwhelm the available query capacity. This could lead to resource exhaustion and service disruptions. </p>\n\n<p>To mitigate this, Consul now supports applying rate limits on a per-IP basis. This means that requests from each client are individually controlled and limited based on their source IP address. Operators can set different limits depending on the resource being accessed, providing more precise control over resource utilization.</p>\n\n<p>With per-IP rate limits, operators can allocate server resources to support normal traffic patterns without worrying about being overwhelmed by a single client or experiencing service disruptions. It provides a tailored approach to resource allocation, allowing for better management of system resources.</p>\n\n<p>Refer to the <a href=\"https://developer.hashicorp.com/consul/docs/v1.16.x/agent/limits\">traffic rate limiting overview documentation</a> for more information.</p>\n\n<h2>Security</h2>\n\n<p>Consul 1.16 adds a number of new security features:</p>\n\n<h3>FIPS 140-2 compliant Consul Enterprise</h3>\n\n<p>Consul Enterprise now offers FIPS 140-2 compliant builds that meet the security needs of federal agencies protecting sensitive, unclassified information with approved cryptographic measures. These builds use a certified cryptographic module and include specific safeguards to comply with FIPS 140-2 Level 1 requirements, enabling compliant Consul deployments.</p>\n\n<p>Refer to the <a href=\"https://developer.hashicorp.com/consul/docs/v1.16.x/enterprise/fips\">Consul Enterprise FIPS documentation</a> for more information.</p>\n\n<h3>JWT auth for service-to-service traffic</h3>\n\n<p>Consul’s service intentions can now authorize connections based on claims in JSON Web Tokens (JWT), in addition to service identity. Operators can configure one or more JWT providers to authenticate tokens and authorize connections to services and specific HTTP paths based on claims embedded in JWT. By offloading JWT validation and authorization to the service mesh, organizations have a uniform method to validate and authorize communication between services in a diverse service-oriented architecture.</p>\n\n<p>Refer to the <a href=\"https://developer.hashicorp.com/consul/docs/v1.16.x/connect/intentions/jwt-authorization\">JWT authorization with service intentions documentation</a> for more information.</p>\n\n<h2>Service mesh UX</h2>\n\n<p>Consul 1.16 adds several user experience improvements for transparent proxies, external mTLS connections, and simplified API Gateway installation:</p>\n\n<h3>Transparent proxy for failover and virtual services</h3>\n\n<p>Consul has enhanced <a href=\"https://developer.hashicorp.com/consul/docs/connect/transparent-proxy\">transparent proxy mode</a> to support failover between service instances deployed across clusters and the ability to route to virtual services. Prior to this enhancement, there were operational complexities when it came to supporting cross-cluster failover.</p>\n\n<p>With the new transparent proxy enhancements, Consul now provides a seamless solution for failover between services across clusters. This means that if one service becomes unavailable, Consul will automatically route the traffic to a backup service, helping to ensure continuity and reliability. </p>\n\n<p>Additionally, transparent proxy also extends its functionality to handle virtual services, which are services defined using the <code>ServiceResolver</code> config entry. Previously, explicit configuration was required for services to communicate with upstream services. With this update, virtual services can now be addressed efficiently using KubeDNS within a datacenter and Consul DNS between datacenters. This enables consistent and reliable communication between services, regardless of their location.</p>\n\n<p>Refer to the documentation below for additional information: </p>\n\n<ul>\n<li><a href=\"https://developer.hashicorp.com/consul/docs/v1.16.x/k8s/connect/onboarding-tproxy-mode\">Onboard services while in transparent proxy mode</a></li>\n<li><a href=\"https://developer.hashicorp.com/consul/docs/v1.16.x/k8s/l7-traffic/route-to-virtual-services\">Route traffic to virtual services</a></li>\n<li><a href=\"https://developer.hashicorp.com/consul/docs/v1.16.x/k8s/l7-traffic/failover-tproxy\">Configure failover services while in transparent proxy mode</a></li>\n</ul>\n\n<h3>Permissive mTLS</h3>\n\n<p>In brownfield environments, migrating services to a service mesh can be challenging because the mesh requires all communication to be secured with mutual TLS (mTLS). This can pose a problem as downstream applications that haven't been migrated yet will experience connectivity issues to upstream applications that have been onboarded to the mesh.</p>\n\n<p>To address this challenge, Consul 1.16 introduces the permissive mTLS feature. With permissive mTLS, an upstream service can be configured to accept both mTLS traffic from mesh-enabled services and non-Consul mTLS traffic from external downstream applications. This means that services within the mesh can communicate securely with each other using mTLS, while maintaining connectivity with applications outside the mesh that haven't undergone migration. This approach allows for a gradual onboarding of services to the service mesh without disrupting the existing connectivity and functionality of downstream applications.</p>\n\n<p>Refer to the <a href=\"https://developer.hashicorp.com/consul/docs/v1.16.x/k8s/connect/onboarding-tproxy-mode\">Onboard services while in transparent proxy mode documentation</a> for more information on how to use permissive mTLS to onboard services to Consul.</p>\n<img src=\"https://www.datocms-assets.com/2885/1686608646-mtls-doc-explaination.png\" alt=\"Mutual\" /><h3>Simplified API Gateway installation for Consul on Kubernetes</h3>\n\n<p>API Gateway is now built into Consul on Kubernetes. Previously, the API Gateway for Kubernetes was a separately released software package compatible with specific versions of Consul and the Consul Helm chart. Now, users don’t need to manage the version of API Gateway they install because it is just another feature in Consul and Consul for Kubernetes. This simplifies installation and configuration for Consul on Kubernetes.</p>\n\n<h2>Extensibility</h2>\n\n<p>Consul 1.16 includes several extensions for Envoy:</p>\n\n<h3>External AuthZ Envoy extension</h3>\n\n<p>The external AuthZ Envoy extension enhances Consul's capabilities by enabling configuration of Envoy external authorization filters for TCP and HTTP listeners. This extension allows you to augment Consul’s <a href=\"https://developer.hashicorp.com/consul/docs/connect/intentions\">service intentions</a> with custom authorization solutions for the data-plane traffic within your service mesh. By configuring the external authorization service through Consul config entries, requests between services can be authorized based on the policies embedded in an external auth service such as Open Policy Agent (OPA). This feature helps organizations maintain better control over access and security leveraging a wider variety of tools, so that requests adhere to your organization’s specified policies and regulations.</p>\n\n<p>Refer to the <a href=\"https://developer.hashicorp.com/consul/docs/v1.16.x/connect/proxies/envoy-extensions/usage/ext-authz\">Delegate authorization to an external service documentation</a> for more information on how to use this extension. </p>\n\n<h3>Property override Envoy extension</h3>\n\n<p>The property override extension allows operators to modify small configuration settings in Envoy that are not directly exposed in Consul configuration entries. With this extension, users can easily fine-tune their Envoy configuration by defining configuration entries in Consul. They can dynamically adjust the properties without manually writing large portions of  Envoy configuration files with <a href=\"https://developer.hashicorp.com/consul/docs/connect/proxies/envoy#escape-hatch-overrides\">escape hatches</a>.</p>\n\n<p>This extension simplifies the configuration management process by providing a reliable, straightforward way to make small configuration changes to Envoy. It also provides better compatibility and reliability during Consul and Envoy version upgrades, because the extension is designed to work seamlessly with the evolving Consul and Envoy ecosystem.</p>\n\n<p>Overall, the Envoy property override extension in Consul improves the flexibility and manageability of Envoy configuration, enabling users to easily make fine-grained adjustments while maintaining compatibility and stability in their service mesh environment.</p>\n\n<p>Refer to the <a href=\"https://developer.hashicorp.com/consul/docs/v1.16.x/connect/proxies/envoy-extensions/usage/property-override\">Configure Envoy proxy properties documentation</a> for more information on how to use this extension.</p>\n\n<h3>Wasm Envoy extension</h3>\n\n<p>The WebAssembly (Wasm) extension lets operators easily configure and run custom Wasm plugins on TCP and HTTP listeners in Envoy. Wasm plugins can be enabled on a per-service basis using the <code>service-defaults</code>configuration entry, or on a mesh-wide basis using the <code>proxy-defaults</code> configuration entry. By supporting Wasm, Consul enables users to enhance their service mesh architecture, enabling innovative use cases and customization. Wasm simplifies integration, reduces complexities, and improves the overall functionality and flexibility of the service mesh.</p>\n\n<p>Refer to the <a href=\"http://developer.hashicorp.com/consul/docs/v1.16.x/connect/proxies/envoy-extensions/usage/wasm\">Run WebAssembly plug-ins in Envoy proxy</a> documentation for more information on how to use this extension. </p>\n\n<h2>Service discovery</h2>\n\n<p>Consul 1.16 also enhances service discovery:</p>\n\n<h3>Catalog sync support for health checks and ingress</h3>\n\n<p>Catalog sync for Consul now supports health checks and ingress resources, enhancing the functionality and benefits of the Consul catalog. With this update, Kubernetes pod health status is seamlessly synchronized with service instances, enabling more accurate traffic routing decisions. Additionally, ingress resource metadata is registered with services, allowing for easy discovery of services based on ingress routing rules. This provides a more comprehensive view of Kubernetes resources, empowering efficient and reliable service discovery within Kubernetes environments.</p>\n\n<h2>Next steps for Consul</h2>\n\n<p>Our goal with Consul is to enable a consistent, enterprise-ready control plane to discover and securely connect any application. We are excited for users to try these new Consul updates and further expand their service mesh implementations. Consul 1.16 includes enhanced scalability, reliability, and security for service networking. With improved failover, security measures, user experience, and extensibility, Consul empowers organizations to build resilient and efficient applications in distributed environments.</p>\n\n<ul>\n<li>Learn more in the <a href=\"https://developer.hashicorp.com/consul/docs\">Consul documentation</a>.</li>\n<li>Get started with Consul 1.16 by installing the latest Helm chart, provided in our <a href=\"https://developer.hashicorp.com/consul/tutorials/get-started-kubernetes/kubernetes-gs-deploy\">Consul Kubernetes documentation</a>.</li>\n<li>Try Consul Enterprise by starting a <a href=\"https://www.hashicorp.com/products/consul/trial\">free trial</a>.</li>\n</ul>\n\n<p><em>This post was originally published on June 13 for the beta release. The sameness groups feature remains in beta.</em></p>\n","author":"Ashher Syed","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"594a33681e9930654c7aaa612114816d0086751bb979d2627660b84b3a058aaf","category":"Tech"}