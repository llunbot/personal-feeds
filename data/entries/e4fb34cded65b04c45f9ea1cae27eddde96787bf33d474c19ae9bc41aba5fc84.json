{"title":"Software Developer ได้เรียนรู้อะไรจากเหตุการณ์จาก CrowdStrike บ้าง ?","link":"https://www.somkiat.cc/software-developer-learn-from-bsod/","date":1721894982000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/bsod-01-150x150.jpg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/07/bsod-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2024/07/bsod-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/07/bsod-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/bsod-01-1024x768.jpg\" width=\"533\" height=\"400\" /></a></figure>\n\n\n\n<p>จากเหตุการณ์ <a href=\"https://www.crowdstrike.com/falcon-content-update-remediation-and-guidance-hub/\" target=\"_blank\">BSOD (Blue Screen of Death)</a> ใน Windows OS นั้น<br />ที่เกิดจากการ rollout ของ CrowdStrike<br />ซึ่งส่งผลกรพทบต่อบริษัทต่าง ๆ จำนวนมาก<br />ในมุมมองของ Software Developer นั้นได้เรียนรู้อะไรจากเหตุการณ์นี้บ้าง ?</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เรื่องแรกที่สำคัญมาก ๆ คือ แนวทางในการทดสอบ</strong></p>\n\n\n\n<p>ควรต้องจำลอง environment การทดสอบให้คล้ายหรือเหมือนจริงให้ได้มากที่สุด<br /> test case ให้ครอบคลุมในส่วนต่าง ๆ <br />แต่ใช้ชีวิตจริงเป็นอย่างไร ตรงนี้น่าจะต้องทำการปรับปรุงให้ดียิ่งขึ้น<br />ที่สำคัญเรื่องของ strategy ของการทดสอบก็สำคัญ<br />โดยต้องสร้างสมดุลระหว่าง คุณภาพที่สูง กับความเร็วในการส่งมอบ เช่น</p>\n\n\n\n<ul>\n<li>Unit test</li>\n\n\n\n<li>Integration test</li>\n\n\n\n<li>Component test</li>\n\n\n\n<li>Contract test</li>\n\n\n\n<li>End-to-end test</li>\n</ul>\n\n\n\n<p>ต้องกำหนดให้ชัดเจน และ ต้องลงมือทำให้เป็นปกติ<br />มันไม่ใช่เรื่องใหม่แต่อย่างใด !!<br />แต่มักจะละเลย<br />เรามีเวลามากพอในการแก้ไขปัญหา แต่ไม่มีเวลาทำให้มันดี</p>\n\n\n\n<p><strong><em>มีคำพูดที่น่าสนใจคือ Quality is not important util the software is important</em></strong></p>\n\n\n\n<p><strong>เรื่องต่อมาคือ เรื่องของการ rollout</strong></p>\n\n\n\n<p>เป็นเรื่องของ deployment strategy ที่น่าสนใจ เพื่อลดปัญหาลงไปบน production<br />เช่น</p>\n\n\n\n<ul>\n<li>Big bang</li>\n\n\n\n<li>Blue-green deployment</li>\n\n\n\n<li>Canary release</li>\n\n\n\n<li>Stage rollout เช่น canary (nightly), dev, beta และ stable เป็นต้น</li>\n</ul>\n\n\n\n<p>จะเห็นได้ว่าปัญหาดังกล่าวมาจากการ rollout แบบ Big bang<br />ที่สำคัญเรื่องการทดสอบก็ไม่ค่อยดีด้วย จึงทำให้เกิดปัญหาอันยิ่งใหญ่<br />มีคำพูดที่ตลกร้ายคือ ระบบปกติมา 365 วัน แต่มีปัญหาวันเดียว คนจะจดจำ 1 วันนั้นเสมอ !!<br />ที่สำคัญคือ ผลกระทบจากปัญหานั่นเอง ว่ามันร้ายแรงอย่างไรต่อธุรกิจ</p>\n\n\n\n<p>ดังนั้นในการ rollout ควรจะค่อย ๆ ปล่อยออกมาเช่น</p>\n\n\n\n<ul>\n<li>เริ่มจากการ Eat Your Own Dog Food ก่อน นั่นคือ rollout ใช้ภายในองค์กรก่อนว่ามีปัญหาอะไรหรือไม่</li>\n\n\n\n<li>จากนั้นค่อย rollout แบบ canary release ไป เช่น 10%, 30%, 50% และ 100% ในที่สุด หรือจะแบ่งตามกลุ่มผู้ใช้งานก็ได้ ในแต่ละขั้นตอนก็ monitor ดูว่ามีปัญหาเกิดขึ้นหรือไม่</li>\n</ul>\n\n\n\n<p><strong>เรื่องสุดท้าย เมื่อเกิดข้อผิดพลาดขึ้นแล้ว ไม่ใช่มานั่งหาว่าใครผิด</strong></p>\n\n\n\n<p>สิ่งที่ควรต้องทำคือ การแก้ไขที่รวดเร็ว<br />จากนั้นจำการสรุปปัญหา หาแนวทางการแก้ไขและป้องกันไม่ให้เกิดซ้ำขึ้นอีก<br />ทุกความผิดพลาด สร้างความรู้ใหม่ ๆ ขึ้นมาเสมอ<br />อยู่ที่ว่าจะเรียนรู้จากมันหรือไม่ หรือเพียงให้มันผ่าน ๆ ไป</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"e4fb34cded65b04c45f9ea1cae27eddde96787bf33d474c19ae9bc41aba5fc84","category":"Thai"}