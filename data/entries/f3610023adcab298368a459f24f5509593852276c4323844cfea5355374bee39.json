{"title":"Amazon Inspector enhances container security by mapping Amazon ECR images to running containers","link":"https://aws.amazon.com/blogs/aws/amazon-inspector-enhances-container-security-by-mapping-amazon-ecr-images-to-running-containers/","date":1747677022000,"content":"<p>When running container workloads, you need to understand how software vulnerabilities create security risks for your resources. Until now, you could identify vulnerabilities in your <a href=\"https://aws.amazon.com/ecr/?trk=fccf147c-636d-45bf-bf0a-7ab087d5691a&amp;sc_channel=el\">Amazon Elastic Container Registry (Amazon ECR)</a> images, but couldn’t determine if these images were active in containers or track their usage. With no visibility if these images were being used on running clusters, you had limited ability to prioritize fixes based on actual deployment and usage patterns.</p> \n<p>Starting today, <a href=\"https://aws.amazon.com/inspector/?trk=fccf147c-636d-45bf-bf0a-7ab087d5691a&amp;sc_channel=el\">Amazon Inspector</a> offers two new features that enhance vulnerability management, giving you a more comprehensive view of your container images. First, Amazon Inspector now maps Amazon ECR images to running containers, enabling security teams to prioritize vulnerabilities based on containers currently running in your environment. With these new capabilities, you can analyze vulnerabilities in your Amazon ECR images and prioritize findings based on whether they are currently running and when they last ran in your container environment. Additionally, you can see the cluster <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html\">Amazon Resource Name (ARN)</a>, number EKS pods or ECS tasks where an image is deployed, helping you prioritize fixes based on usage and severity.</p> \n<p>Second, we’re extending vulnerability scanning support to minimal base images including scratch, distroless, and Chainguard images, and extending support for additional ecosystems including <a href=\"https://go.dev/doc/toolchain\">Go toolchain</a>, <a href=\"https://www.oracle.com/java/technologies/\">Oracle JDK &amp; JRE</a>, <a href=\"https://aws.amazon.com/corretto/\">Amazon Corretto</a>, <a href=\"https://tomcat.apache.org/\">Apache Tomcat</a>, <a href=\"https://httpd.apache.org/\">Apache httpd</a>, <a href=\"https://wordpress.org/\">WordPress</a> (core, themes, plugins), and <a href=\"https://pptr.dev/\">Puppeteer</a>, helping teams maintain robust security even in highly optimized container environments.</p> \n<p>Through continual monitoring and tracking of images running on containers, Amazon Inspector helps teams identify which container images are actively running in their environment and where they’re deployed, detecting Amazon ECR images running on containers in <a href=\"https://aws.amazon.com/ecs/?trk=fccf147c-636d-45bf-bf0a-7ab087d5691a&amp;sc_channel=el\">Amazon Elastic Container Service (Amazon ECS)</a> and <a href=\"https://aws.amazon.com/eks/?trk=fccf147c-636d-45bf-bf0a-7ab087d5691a&amp;sc_channel=el\">Amazon Elastic Kubernetes Service (Amazon EKS)</a>, and any associated vulnerabilities. This solution supports teams managing Amazon ECR images across single <a href=\"https://docs.aws.amazon.com/accounts/latest/reference/accounts-welcome.html\">AWS accounts</a>, cross-account scenarios, and <a href=\"https://aws.amazon.com/organizations/\">AWS Organizations</a> with delegated administrator capabilities, enabling centralized vulnerability management based on container images running patterns.</p> \n<p><span><strong>Let’s see it in action</strong></span><br /> <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html\">Amazon ECR image scanning</a> helps identify vulnerabilities in your container images through <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning-enhanced.html\">enhanced scanning</a>, which integrates with Amazon Inspector to provide automated, continual scanning of your repositories. To use this new feature you have to enable enhanced scanning through the <a href=\"https://console.aws.amazon.com/ecr/repositories\">Amazon ECR console</a>, you can do it by following the steps in the <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning-enhanced-enabling.html\">Configuring enhanced scanning for images in Amazon ECR documentation page.</a> I already have Amazon ECR enhanced scanning, so I don’t have to do any action.</p> \n<p>In the <a href=\"https://console.aws.amazon.com/inspector/v2/home\">Amazon Inspector console</a>, I navigate to <strong>General settings </strong>and select <strong>ECR scanning settings</strong> from the navigation panel. Here, I can configure the new <strong>Image re-scan mode</strong> settings by choosing between <strong>Last in-use date</strong> and <strong>Last pull date</strong>. I leave it as it is by default with <strong>Last in-use</strong> <strong>date</strong> and set the <strong>Image last in use date</strong> to 14 days. These settings make it so that Inspector monitors my images based on when they were running in the last 14 days in my Amazon ECS or Amazon EKS environments. After applying these settings, Amazon Inspector starts tracking information about images running on containers and incorporating it into vulnerability findings, helping me focus on images actively running in containers in my environment.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/16/Screenshot-03.png\" alt=\"\" width=\"2084\" height=\"1252\" /></p> \n<p>After it’s configured, I can view information about images running on containers in the <strong>Details</strong> menu, where I can see last in-use and pull dates, along with EKS pods or ECS tasks count.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/19/Screenshot-2025-05-19-at-9.30.05 AM-1024x697.png\" alt=\"\" width=\"1024\" height=\"697\" /></p> \n<p>When selecting the number of <strong>Deployed ECS Tasks/EKS Pods</strong>, I can see the cluster ARN, last use dates, and Type for each image.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/19/Screenshot-2025-05-19-at-9.51.03 AM-1024x247.png\" alt=\"\" width=\"1024\" height=\"247\" /></p> \n<p>For cross-account visibility demonstration, I have a repository with EKS pods deployed in two accounts. In the <strong>Resources coverage</strong> menu, I navigate to <strong>Container repositories</strong>, select my repository name and choose the <strong>Image tag</strong>. As before, I can see the number of deployed EKS pods/ECS tasks.</p> \n<p>When I select the number of deployed EKS pods/ECS tasks, I can see that it is running in a different account.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/19/account_2-1024x210.jpg\" alt=\"\" width=\"1024\" height=\"210\" /></p> \n<p>In the <a href=\"https://docs.aws.amazon.com/inspector/latest/user/findings-understanding.html\">Findings</a> menu, I can review any vulnerabilities, and by selecting one, I can find the <strong>Last in use</strong> date and <strong>Deployed ECS Tasks/EKS Pods </strong>involved in the vulnerability under <strong>Resource affected</strong> data, helping me prioritize remediation based on actual usage.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/19/Screenshot-2025-05-19-at-10.13.58 AM-1024x476.png\" alt=\"\" width=\"1024\" height=\"476\" /></p> \n<p>In the <strong>All Findings</strong> menu, you can now search for vulnerabilities within account management, using filters such as A<strong>ccount ID</strong>, <strong>Image in use count</strong> and <strong>Image last in use at</strong>.</p> \n<table> \n <thead> \n  <tr> \n   <th><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/17/Screenshot-2025-05-16-at-8.15.11 PM-1-1024x659.png\" alt=\"\" width=\"1024\" height=\"659\" /></th> \n   <th><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/17/Screenshot-2025-05-16-at-8.17.11 PM-1-1024x657.png\" alt=\"\" width=\"1024\" height=\"657\" /></th> \n  </tr> \n </thead> \n</table> \n<p><span><strong>Key features and considerations</strong></span><br /> <strong>Monitoring based on container image lifecycle – </strong>Amazon Inspector now determines image activity based on: image push date ranging duration 14, 30, 60, 90, or 180 days or lifetime, image pull date from 14, 30, 60, 90, or 180 days, stopped duration from never to 14, 30, 60, 90, or 180 days and status of image running on the container. This flexibility lets organizations tailor their monitoring strategy based on actual container image usage rather than only repository events. For Amazon EKS and Amazon ECS workloads, last in use, push and pull duration are set to 14 days, which is now the default for new customers.</p> \n<p><strong>Image runtime-aware finding details –</strong> To help prioritize remediation efforts, each finding in Amazon Inspector now includes the lastInUseAt date and InUseCount, indicating when an image was last running on the containers and the number of deployed EKS pods/ ECS tasks currently using it. Amazon Inspector monitors both Amazon ECR last pull date data and images running on Amazon ECS tasks or Amazon EKS pods container data for all accounts, updating this information at least once daily. Amazon Inspector integrates these details into all findings reports and seamlessly works with <a href=\"https://aws.amazon.com/eventbridge/\">Amazon EventBridge</a>. You can filter findings based on the lastInUseAt field using rolling window or fixed range options, and you can filter images based on their last running date within the last 14, 30, 60, or 90 days.</p> \n<p><strong>Comprehensive security coverage</strong> – Amazon Inspector now provides unified vulnerability assessments for both traditional Linux distributions and minimal base images including scratch, distroless, and Chainguard images through a single service. This extended coverage eliminates the need for multiple scanning solutions while maintaining robust security practices across your entire container ecosystem, from traditional distributions to highly optimized container environments. The service streamlines security operations by providing comprehensive vulnerability management through a centralized platform, enabling efficient assessment of all container types.</p> \n<p><strong>Enhanced cross-account visibility –</strong> Security management across single accounts, cross-account setups, and AWS Organizations is now supported through delegated administrator capabilities. Amazon Inspector shares images running on container information within the same organization, which is particularly valuable for accounts maintaining golden image repositories. Amazon Inspector provides all ARNs for Amazon EKS and Amazon ECS clusters where images are running, if the resource belongs to the account with an API, providing comprehensive visibility across multiple AWS accounts. The system updates deployed EKS pods or ECS tasks information at least one time daily and automatically maintains accuracy as accounts join or leave the organization.</p> \n<p><strong>Availability and pricing – </strong>The new container mapping capabilities are available now in all <a href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#region\">AWS Regions</a> where <a href=\"https://docs.aws.amazon.com/inspector/latest/user/inspector_regions.html\">Amazon Inspector is offered</a> at no additional cost. To get started, visit the <a href=\"https://docs.aws.amazon.com/inspector/latest/user/what-is-inspector.html\">AWS Inspector documentation</a>. For pricing details and Regional availability, refer to the <a href=\"https://aws.amazon.com/inspector/pricing/\">AWS Inspector pricing page</a>.</p> \n<p>PS: Writing a blog post at AWS is always a team effort, even when you see only one name under the post title. In this case, I want to thank <a href=\"https://www.linkedin.com/in/niralidesai/\">Nirali Desai</a>, for her generous help with technical guidance, and expertise, which made this overview possible and comprehensive.</p> \n<p>— <a href=\"https://www.linkedin.com/in/lizfue/\">Eli</a></p> \n<hr /> \n<p>How is the News Blog doing? Take this <a href=\"https://amazonmr.au1.qualtrics.com/jfe/form/SV_eyD5tC5xNGCdCmi\">1 minute survey</a>!</p> \n<p><em>(This <a href=\"https://amazonmr.au1.qualtrics.com/jfe/form/SV_eyD5tC5xNGCdCmi\">survey</a> is hosted by an external company. AWS handles your information as described in the <a href=\"https://aws.amazon.com/privacy/\">AWS Privacy Notice</a>. AWS will own the data gathered via this survey and will not share the information collected with survey respondents.)</em></p>","author":"Elizabeth Fuentes","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"f3610023adcab298368a459f24f5509593852276c4323844cfea5355374bee39","category":"Tech"}