{"title":"New for AWS CloudFormation – Quickly Retry Stack Operations from the Point of Failure","link":"https://aws.amazon.com/blogs/aws/new-for-aws-cloudformation-quickly-retry-stack-operations-from-the-point-of-failure/","date":1630352811000,"content":"<p>One of the great advantages of cloud computing is that you have access to programmable infrastructure. This allows you to manage your <a href=\"https://docs.aws.amazon.com/whitepapers/latest/introduction-devops-aws/infrastructure-as-code.html\">infrastructure as code</a> and apply the same practices of application code development to infrastructure provisioning.</p> \n<p><a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> gives you an easy way to model a collection of related AWS and third-party resources, provision them quickly and consistently, and manage them throughout their lifecycles. A CloudFormation <strong>template</strong> describes your desired resources and their dependencies so you can launch and configure them together as a <strong>stack</strong>. You can use a template to create, update, and delete an entire stack as a single unit instead of managing resources individually.</p> \n<p>When you create or update a stack, your action might fail for different reasons. For example, there can be errors in the template, in the parameters of the template, or issues outside the template, such as <a href=\"https://aws.amazon.com/iam/\">AWS Identity and Access Management (IAM)</a> permission errors. When such an error occurs, CloudFormation rolls back the stack to the previous stable condition. For a stack creation, that means deleting all resources created up to the point of the error. For a stack update, it means restoring the previous configuration.</p> \n<p>This rollback to the previous state is great for production environments, but doesn’t make it easy to understand the reason for the error. Depending on the complexity of your template and the number of resources involved, you might spend lots of time waiting for all the resources to roll back before you can update the template with the right configuration and retry the operation.</p> \n<p>Today, I am happy to share that now CloudFormation allows you to <strong>disable</strong> the automatic rollback, <strong>keep</strong> the resources successfully created or updated before the error occurs, and <strong>retry</strong> stack operations from the point of failure. In this way, you can quickly iterate to fix and remediate errors and greatly reduce the time required to test a CloudFormation template in a development environment. You can apply this new capability when you create a stack, when you update a stack, and when you execute a <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-changesets.html\">change set</a>. Let’s see how this works in practice.</p> \n<p><span><strong>Quickly Iterate to Fix and Remediate a CloudFormation Stack<br /> </strong></span>For one of my applications, I need to set up an <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> bucket, an <a href=\"https://aws.amazon.com/sqs/\">Amazon Simple Queue Service (SQS)</a> queue, and an <a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a> table that is streaming item-level changes to an <a href=\"https://aws.amazon.com/kinesis/\">Amazon Kinesis</a> data stream. For this setup, I write down the first version of the CloudFormation template.</p> \n<pre><code>AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: A sample template to fix &amp; remediate\nParameters:\n  ShardCountParameter:\n    Type: Number\n    Description: The number of shards for the Kinesis stream\nResources:\n  MyBucket:\n    Type: AWS::S3::Bucket\n  MyQueue:\n    Type: AWS::SQS::Queue\n  MyStream:\n    Type: AWS::Kinesis::Stream\n    Properties:\n      ShardCount: !Ref ShardCountParameter\n  MyTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: \"ArtistId\"\n          AttributeType: \"S\"\n        - AttributeName: \"Concert\"\n          AttributeType: \"S\"\n        - AttributeName: \"TicketSales\"\n          AttributeType: \"S\"\n      KeySchema:\n        - AttributeName: \"ArtistId\"\n          KeyType: \"HASH\"\n        - AttributeName: \"Concert\"\n          KeyType: \"RANGE\"\n      KinesisStreamSpecification:\n        StreamArn: !GetAtt MyStream.Arn\nOutputs:\n  BucketName:\n    Value: !Ref MyBucket\n    Description: The name of my S3 bucket\n  QueueName:\n    Value: !GetAtt MyQueue.QueueName\n    Description: The name of my SQS queue\n  StreamName:\n    Value: !Ref MyStream\n    Description: The name of my Kinesis stream\n  TableName:\n    Value: !Ref MyTable\n    Description: The name of my DynamoDB table</code></pre> \n<p>Now, I want to create a stack from this template. On the <a href=\"https://console.aws.amazon.com/cloudformation/home\">CloudFormation console</a>, I choose <strong>Create stack</strong>. Then, I upload the template file and choose <strong>Next</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-create-stack.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-create-stack-1024x659.png\" /></a></p> \n<p>I enter a name for the stack. Then, I fill the stack parameters. My template file has one parameter (<code>ShardCountParameter</code>) used to configure the <a href=\"https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html\">number of shards</a> for the Kinesis data stream. I know that the number of shards should be greater or equal to one, but by mistake, I enter zero and choose <strong>Next</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-name-parameters.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-name-parameters-1024x499.png\" /></a></p> \n<p>To create, modify, or delete resources in the stack, I use an <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\">IAM role</a>. In this way, I have a clear boundary for the permissions that CloudFormation can use for stack operations. Also, I can use the same role to automate the deployment of the stack later in a standardized and reproducible environment.</p> \n<p>In <strong>Permissions</strong>, I select the IAM role to use for the stack operations.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-permissions.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-permissions-1024x325.png\" /></a></p> \n<p>Now it’s time to use the new feature! In the <strong>Stack failure options</strong>, I select <strong>Preserve successfully provisioned resources</strong> to keep, in case of errors, the resources that have already been created. Failed resources are always rolled back to the last known stable state.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-stack-failure-options.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-stack-failure-options-1024x273.png\" /></a></p> \n<p>I leave all other options at their defaults and choose <strong>Next</strong>. Then, I review my configurations and choose <strong>Create stack</strong>.</p> \n<p>The creation of the stack is in progress for a few seconds, and then it fails because of an error. In the <strong>Events</strong> tab, I look at the timeline of the events. The start of the creation of the stack is at the bottom. The most recent event is at the top. Properties validation for the stream resource failed because the number of shards (<code>ShardCount</code>) is below the minimum. For this reason, the stack is now in the <code>CREATE_FAILED</code> status.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-errors-parameter.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-errors-parameter-1024x605.png\" /></a></p> \n<p>Because I chose to preserve the provisioned resources, all resources created before the error are still there. In the <strong>Resources</strong> tab, the S3 bucket and the SQS queue are in the <code>CREATE_COMPLETE</code> status, while the Kinesis data stream is in the <code>CREATE_FAILED</code> status. The creation of the DynamoDB table depends on the Kinesis data stream to be available because the table uses the data stream in one of its properties (<code>KinesisStreamSpecification</code>). As a consequence of that, the table creation has not started yet, and the table is not in the list.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-preserved-resources.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-preserved-resources-1024x408.png\" /></a></p> \n<p>The rollback is now paused, and I have a few new options:</p> \n<p><strong>Retry</strong> – To retry the stack operation without any change. This option is useful if a resource failed to provision due to an issue outside the template. I can fix the issue and then retry from the point of failure.</p> \n<p><strong>Update</strong> – To update the template or the parameters before retrying the stack creation. The stack update starts from where the last operation was interrupted by an error.</p> \n<p><strong>Rollback</strong> – To roll back to the last known stable state. This is similar to default CloudFormation behavior.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-stack-paused-options.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-stack-paused-options-1024x204.png\" /></a></p> \n<p><span><strong>Fixing Issues in the Parameters<br /> </strong></span>I quickly realize the mistake I made while entering the parameter for the number of shards, so I choose <strong>Update</strong>.</p> \n<p>I don’t need to change the template to fix this error. In <strong>Parameters</strong>, I fix the previous error and enter the correct amount for the number of shards: one shard.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-update-stack-parameters.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-update-stack-parameters-1024x308.png\" /></a></p> \n<p>I leave all other options at their current values and choose <strong>Next</strong>.</p> \n<p>In <strong>Change set preview</strong>, I see that the update will try to modify the Kinesis stream (currently in the <code>CREATE_FAILED</code> status) and add the DynamoDB table. I review the other configurations and choose <strong>Update stack</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-change-set-preview-1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-change-set-preview-1-1024x389.png\" /></a></p> \n<p>Now the update is in progress. Did I solve all the issues? Not yet. After some time, the update fails.</p> \n<p><span><strong>Fixing Issues Outside the Template<br /> </strong></span>The Kinesis stream has been created, but the IAM role assumed by CloudFormation doesn’t have permissions to create the DynamoDB table.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-errors-permissions.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-errors-permissions-1024x488.png\" /></a></p> \n<p>In the <a href=\"https://console.aws.amazon.com/iam/home\">IAM console</a>, I add additional permissions to the role used by the stack operations to be able to create the DynamoDB table.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-iam-permissions.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-iam-permissions-1024x315.png\" /></a></p> \n<p>Back to the <a href=\"https://console.aws.amazon.com/cloudformation/home\">CloudFormation console</a>, I choose the <strong>Retry</strong> option. With the new permissions, the creation of the DynamoDB table starts, but after some time, there is another error.</p> \n<p><span><strong>Fixing Issues in the Template<br /> </strong></span>This time there is an error in my template where I define the DynamoDB table. In the <code>AttributeDefinitions</code> section, there is an attribute (<code>TicketSales</code>) that is not used in the schema.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-errors-template.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-errors-template-1024x185.png\" /></a></p> \n<p>With DynamoDB, attributes defined in the template should be used either for the primary key or for an index. I update the template and remove the <code>TicketSales</code> attribute definition.</p> \n<p>Because I am editing the template, I take the opportunity to also add <code>MinValue</code> and <code>MaxValue</code> properties to the number of shards parameter (<code>ShardCountParameter</code>). In this way, CloudFormation can check that the value is in the correct range before starting the deployment, and I can avoid further mistakes.</p> \n<p>I select the <strong>Update</strong> option. I choose to update the current template, and I upload the new template file. I confirm the current values for the parameters. Then, I leave all other options to their current values and choose <strong>Update stack</strong>.</p> \n<p>This time, the creation of the stack is successful, and the status is <code>UPDATE_COMPLETE</code>. I can see all resources in the <strong>Resources</strong> tab and their description (based on the <code>Outputs</code> section of the template) in the <strong>Outputs</strong> tab.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-outputs.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-outputs-1024x354.png\" /></a></p> \n<p>Here’s the final version of the template:</p> \n<pre><code>AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: A sample template to fix &amp; remediate\nParameters:\n  ShardCountParameter:\n    Type: Number\n    MinValue: 1\n    MaxValue: 10\n    Description: The number of shards for the Kinesis stream\nResources:\n  MyBucket:\n    Type: AWS::S3::Bucket\n  MyQueue:\n    Type: AWS::SQS::Queue\n  MyStream:\n    Type: AWS::Kinesis::Stream\n    Properties:\n      ShardCount: !Ref ShardCountParameter\n  MyTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: \"ArtistId\"\n          AttributeType: \"S\"\n        - AttributeName: \"Concert\"\n          AttributeType: \"S\"\n      KeySchema:\n        - AttributeName: \"ArtistId\"\n          KeyType: \"HASH\"\n        - AttributeName: \"Concert\"\n          KeyType: \"RANGE\"\n      KinesisStreamSpecification:\n        StreamArn: !GetAtt MyStream.Arn\nOutputs:\n  BucketName:\n    Value: !Ref MyBucket\n    Description: The name of my S3 bucket\n  QueueName:\n    Value: !GetAtt MyQueue.QueueName\n    Description: The name of my SQS queue\n  StreamName:\n    Value: !Ref MyStream\n    Description: The name of my Kinesis stream\n  TableName:\n    Value: !Ref MyTable\n    Description: The name of my DynamoDB table</code></pre> \n<p>This was a simple example, but the new capability to retry stack operations from the point of failure already saved me lots of time. It allowed me to fix and remediate issues quickly, reducing the feedback loop and increasing the number of iterations that I can do in the same amount of time. In addition to using this for debugging, it is also great for incremental interactive development of templates. With more sophisticated applications, the time saved will be huge!</p> \n<p><span><strong>Fix and Remediate a CloudFormation Stack Using the AWS CLI<br /> </strong></span>I can preserve successfully provisioned resources with the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (CLI)</a> by specifying the <code>--disable-rollback</code> option when I create a stack, update a stack, or execute a change set. For example:</p> \n<div> \n <pre><code>aws cloudformation create-stack --stack-name my-stack \\\n    --template-body file://my-template.yaml -–disable-rollback\naws cloudformation update-stack --stack-name my-stack \\\n    --template-body file://my-template.yaml --disable-rollback\naws cloudformation execute-change-set --stack-name my-stack --change-set-name my-change-set \\\n    --template-body file://my-template.yaml --disable-rollback</code></pre> \n</div> \n<p>For an existing stack, I can see if the <code>DisableRollback</code> property is enabled with the describe stack command:</p> \n<div> \n <pre><code>aws cloudformation describe-stacks --stack-name my-stack</code></pre> \n</div> \n<p>I can now update stacks in the <code>CREATE_FAILED</code> or <code>UPDATE_FAILED</code> status. To manually roll back a stack that is in the <code>CREATE_FAILED</code> or <code>UPDATE_FAILED</code> status, I can use the new rollback stack command:</p> \n<div> \n <pre><code>aws cloudformation rollback-stack --stack-name my-stack</code></pre> \n</div> \n<p><span><strong>Availability and Pricing<br /> </strong></span>The capability for <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> to retry stack operations from the point of failure is available at no additional charge in the following <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/#Regions\">AWS Regions</a>: US East (N. Virginia, Ohio), US West (Oregon, N. California), AWS GovCloud (US-East, US-West), Canada (Central), Europe (Frankfurt, Ireland, London, Milan, Paris, Stockholm), Asia Pacific (Hong Kong, Mumbai, Osaka, Seoul, Singapore, Sydney, Tokyo), Middle East (Bahrain), Africa (Cape Town), and South America (São Paulo).</p> \n<p>Do you prefer to define your cloud application resources using familiar programming languages such as JavaScript, TypeScript, Python, Java, C#, and Go? Good news! The <a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit (AWS CDK)</a> team is planning to add support for the new capabilities described in this post in the next couple of weeks.</p> \n<p><strong><a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stack-failure-options.html\">Spend less time to fix and remediate your CloudFormation stacks with the new capability to retry stack operations from the point of failure.</a></strong></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"f38bc506c0b9c41835489841e912f1c72c61c42ee3427d13e7e51a24b2b0ee37","category":"Tech"}