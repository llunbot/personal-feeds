{"title":"Building Components For Consumption, Not Complexity (Part 1)","link":"https://smashingmagazine.com/2023/12/building-components-consumption-not-complexity-part1/","date":1702328400000,"content":"<p>Design systems are on the tip of every designer’s tongue, but the narrative in the industry mainly focuses on <em>why</em> you need a design system and its importance rather than the reality of <em>endless maintenance</em> and internal politics. The truth is that design teams spend years creating these systems only to find out that few people adhere to the guidelines or stay within the “guardrails.” </p>\n<p>I’ve been fortunate with Figma to host and run workshops at various conferences across Europe that center on one very specific aspect of product design: components.</p>\n<p>I love components! They are the start, the end, the hair-tearing-out middle, the “building blocks,” and the foundation — the <em>everything</em> within every great product design organization. </p>\n<p>The reason they are so important to me is because, firstly, who doesn’t like efficiency? Second, and more importantly, they are proven to increase the time-to-delivery from design to engineering, and here comes a buzzword — they offer a route to return on investment (ROI) within design teams. This is becoming increasingly important in a tough hiring market. So what’s not to love?</p>\n<p><strong>Note</strong>: <em>You may be interested in watching <a href=\"https://www.youtube.com/watch?v=lEccln75Q7U\">Matt Gottschalk’s talk</a> from Figma’s Config 2023 conference, which was dedicated to the topic of ROI within small design teams. The talk explored how small design teams can use design systems and design operations to help designers have the right environment for them to deliver better, more impactful results.</em></p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/24-adobe.png\" /></p>\n<p>Like in most things, a solution to this is <strong>education</strong> and <strong>communication</strong>. If you aren’t comfortable with modifications on styles, you may want to set up your components in such a way as to indicate this. For example, using emojis in layers is the quickest way to say, “Hey, please don’t edit this!” or “You can edit this!”.</p>\n<p>Or, consider shipping out components that are named for intention. Would separating components entirely (components named for intention) work better? An <em>Input/Error</em>, rather than a customizable <em>Input</em>?</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/1-component-names.png\" /></p>\n<p>When considering the <strong>emoji name</strong> approach, here’s a set that I’ve relied on in the past:</p>\n<ol>\n<li>Components<ul>\n<li>🚨 Deprecated</li>\n<li>🟠 Not ready</li>\n</ul>\n</li>\n<li>Component instances<ul>\n<li>🔐️ Not editable</li>\n<li>✍️ Overwritten name</li>\n</ul>\n</li>\n<li>Layers<ul>\n<li>✍️ Editable</li>\n<li>🚨 Important</li>\n</ul>\n</li>\n<li>Component properties<ul>\n<li>◈ Type</li>\n<li>✍️ Edit text</li>\n<li>🔁️ Swap instance</li>\n<li>🔘 Toggle</li>\n<li>←️ Left</li>\n<li>→️ Right</li>\n<li>🖱 Interaction</li>\n<li>📈 Data</li>\n<li>↔️ Size</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/2-layer-names.png\" /></p>\n<h3>Flexible: Responsive Design</h3>\n<p>Ahh, our old friend, responsive design (<a href=\"https://alistapart.com/article/responsive-web-design/\">RWD</a>)!</p>\n<blockquote>“The control which designers know in the print medium, and often desire in the web medium, is simply a function of the limitation of the printed page. We should embrace the fact that the web doesn’t have the same constraints and design for this flexibility. But first, we must accept the ebb and flow of things.”<br /><br />— John Allsopp, “<a href=\"http://www.alistapart.com/articles/dao/\">A Dao of Web Design</a>”</blockquote>\n\n<p>As it stands, there is no native solution within Figma to create fully responsive components. What I mean by “fully responsive” is that layout directions and contents change according to their breakpoint. </p>\n<p>Here’s an example:</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/3-cards.png\" /></p>\n<p><strong>Note</strong>: <em>It is technically possible to achieve this example now with auto layout wrapping and min/max widths on your elements, but this does not mean that you can build fully responsive components. Instead, you will likely end up in a <a href=\"https://css-tricks.com/magic-numbers-in-css/\">magic numbers</a> soup with a lengthy list of variables for your min and max widths!</em></p>\n<p>With this limitation in mind, we may want to reconsider goals around responsive design within our component libraries. This may take the form of adapting their structure by introducing… more components! Do we want to be able to ship <em>one component</em> that changes from mobile all the way up to the desktop, or would it be easier to use, find, and customize <em>separate components</em> for each distinct breakpoint?</p>\n<blockquote>“Despite the fun sounding name, <strong>magic numbers</strong> are a bad thing. It is an old school term for ‘unnamed numerical constant,’ as in, just some numbers put into the code that are probably vital to things working correctly but are very difficult for anyone not intimately familiar with the code to understand what they are for. Magic numbers in CSS refer to values which ‘work’ under some circumstances but are frail and prone to break when those circumstances change.”<br /><br />— Chris Coyier, “<a href=\"https://css-tricks.com/magic-numbers-in-css/\">Magic Numbers in CSS</a>”</blockquote>\n\n<p>Never be hesitant to create more components if there is a likelihood that adoption will increase.</p>\n<p>Then, what does this look like within Figma? We have a few options, but first, we need to ask ourselves a few questions:</p>\n<ol>\n<li>Does the team design for various screen sizes/dimensions? E.g., mobile and desktop web.</li>\n<li>Does the development team build for a specific platform/screen size(s)? E.g., an iOS team.</li>\n<li>Do you build apps aligning with native style guides? E.g., <a href=\"https://m3.material.io/\">Material</a> <a href=\"https://m3.material.io/\">D</a><a href=\"https://m3.material.io/\">esign</a>.</li>\n</ol>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/4-questions.png\" /></p>\n<p>The answers to these questions will help us determine how we should structure our components and, more importantly, what our library structures will look like.</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/5-simple-system.png\" /></p>\n<p>If the answer to questions <strong>1.</strong> (Design for various screen sizes/dimensions?) and <strong>2.</strong> (build for a specific platform/screen sizes?) is “No,” and to <strong>3.</strong> (Build apps aligning with native style guides?) is “Yes,” to me, this means that we should split out components into separate component library files. We don’t want to enter into a world where an iOS component is accidentally added to a web design and pushed to production! This becomes increasingly common if we share component naming conventions across different platforms.</p>\n<p>If the answer to question <strong>3.</strong> (“Do we build native apps, using their design guidelines?”) is “Yes,” this definitely requires a separate component library for the platform-specific styles or components. You may want to investigate an option where you have a global set of styles and components used on every platform and then a more localized set for when designing on your native platforms.</p>\n<p>The example below, with an example mapping of library files for an iOS design project, is inspired by my Figma community file (“Simple design system structure”), which I created to help you set up your design system more easily across different platforms.</p>\n<p><strong>→</strong> Get “<a href=\"https://www.figma.com/community/file/1158765244991590065/simple-design-system-structure\"><strong>Simple design system structure</strong></a>” [FigJam file / <a href=\"https://www.figma.com/@disco_lu\">Luis Ouriach</a>, <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC-BY</a> license]</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/6-simple-system.png\" /></p>\n<p>If you are designing across multiple platforms in a device-agnostic manner, you can bring components a lot closer together! If you aren’t currently working with an agnostic codebase, it might be worth checking <a href=\"https://github.com/BuilderIO/mitosis\">Mitosis</a> (<em>“Write components once, run everywhere”</em>).</p>\n<p>A common challenge among development teams is using the same language; while one sub-team may be using <a href=\"https://vuejs.org/\">Vue</a>, another perhaps is using <a href=\"https://react.dev/\">React</a>, causing redundant work and forcing you to create shared components twice. In “<a href=\"https://blog.logrocket.com/creating-reusable-components-mitosis-builder-io/\">Create reusable components with Mitosis and Builder.io</a>,” Alex Merced explores in detail <strong>Mitosis</strong>, a free tool developed under the <a href=\"https://github.com/BuilderIO/mitosis/blob/main/LICENSE\">MIT license</a>. Mitosis can compile code to standard JavaScript code in addition to frameworks and libraries such as Angular, React, and Vue, allowing you to create reusable components with more ease and speed.</p>\n\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/25-simple-system.png\" /></p>\n<h3>Using A Variant</h3>\n<p>This may look like a variant set, with a specific property for device/size/platform added. For example,</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/7-variants.png\" /></p>\n<p>As you can imagine, as those components increase in complexity (with different states added, for example), this can become unwieldy. Combining them into the same variant is useful for a smaller system, but across larger teams, I would recommend splitting them up.</p>\n<h3>Using Sections</h3>\n<p>You could consider grouping your components into different sections for each platform/device breakpoint. The approach would be the following:</p>\n<ol>\n<li>Use pages within Figma libraries to organize components.</li>\n<li>Within the pages, group each breakpoint into a section. This is titled by the breakpoint.</li>\n<li>Name the component by its semantic, discoverable name.</li>\n</ol>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/8-sections.png\" /></p>\n<p>There is a caveat here! I’m sure you’re wondering: “But couldn’t variables handle these breakpoints, removing the need for different components?” The answer, as always, is that it’s down to your <em>specific implementation</em> and adoption of the system.</p>\n<p>If your designer and developer colleagues are comfortable working within the variable workflow, you may be able to consolidate them! If not, we may be better served with many components.</p>\n<p>Additionally, the split-component approach allows you to handle components in a structurally different manner across these different sizes — something that is not currently possible with variants.</p>\n<h3>Auto Layout</h3>\n<p>Regardless of how we organize the components, responsiveness can be pushed very far with the use of <a href=\"https://help.figma.com/hc/en-us/articles/5731482952599-Using-auto-layout\">auto layout at every level</a> of our screens. Although it can be intimidating at first, the auto layout makes components work similarly to how they would be structured in HTML and CSS, moving design and engineering teams closer together.</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/10-input.png\" /></p>\n<p>Let’s take a simple example: a generic input field. In your main component, you’re likely to have a text label within it with the text, e.g., “Label.” Generics are useful! It means that we can swap this content to be specific to our needs at an instance level.</p>\n<p>Now, let’s say you insert this component into your design and swap that “Label” content for a label that reads “Email address.” This is our override; so far, so good.</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/11-input.png\" /></p>\n<p>However, if you then decide to change your main component <em>structurally</em>, you put that label at risk of losing its overrides. As an example of a structural change, your original “Placeholder” now becomes a “Label” above the input field. Instinctively, this may mean creating a new text element for the label. But! Should you try this, you are losing the mapping between your original text element and the new one.</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/12-input.png\" /></p>\n<p>This could potentially break your existing signed-off designs. Even though this seems like it <em>could</em> work — layer names are a great way to preserve overrides — they are separate elements, and Figma won’t know how to transfer that override to the new element.</p>\n<p>At this point, <a href=\"https://www.youtube.com/watch?v=EA0NbEOrpuo\">introducing component properties</a> can save us from this trouble. I’d recommend adding a text component property to all of your text layers in order to try to prevent any loss of data across the design files in which we are using the component.</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/13-input.png\" /></p>\n<p>As I showed before, I find adding a writing emoji (✍️) to the property name is a nice way to keep our component properties panel as scannable as possible.</p>\n<h3>Content Specificity</h3>\n<p>A decision then needs to be made about how <strong>specific</strong> the default content is within the component.</p>\n<p>And this is where we should ask ourselves a question: do we need to change this content frequently? If the answer is <strong>yes</strong>, abstracting specific textual values from components means that they can be interpreted more widely. It’s a little bit of reverse psychology, but a text layer reading “[placeholder]” would prompt a designer to change it to their local use case.</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/14-input.png\" /></p>\n<p>If the answer is <strong>no</strong>, we will bake the fixed value we want into the component. Going back to our input field example, we might set the default label value to be “Email address” instead of “placeholder.” Or, we could create an entirely new email address component! (This is a call we’d need to make based on anticipated/recorded usage of the component.)</p>\n<h3>Imagery / Media</h3>\n<p>When setting up a content system within Figma, a few different questions immediately pop up:</p>\n<ol>\n<li>How do you use specific media for specific components?</li>\n<li>How do you fix aspect ratios for media?</li>\n</ol>\n<p>Within Figma, an image is essentially a fill within a shape rather than its own content type, and this impacts how we manage that media. There are two ways to do this:</p>\n<ol>\n<li>Using styles.</li>\n<li>Using component sets (variants).</li>\n</ol>\n<p>Before we look at styles and components, though, let’s take a look at the format that all assets within Figma could take.</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/15-media.png\" /></p>\n<p>Practically, I would advise setting up your media assets as their <em>own library</em> within Figma, potentially even setting up <em>a few</em> libraries if you work across various products/brands with different approaches to media. </p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/16-libraries.png\" /></p>\n<p>For example, the imagery your product team uses within design files and marketing materials is likely to be very different, so we would look to set these up as different Figma libraries. A designer using those assets would toggle “on” the library they need to create an asset for a specific intention, keeping the right media in the right place.</p>\n<p>Because this media is the same as any other style or component within Figma, we can use slash naming conventions to group types of media within the names. </p>\n<p><strong>Domain examples:</strong></p>\n<ul>\n<li>Company website,</li>\n<li>Product,</li>\n<li>Marketing,</li>\n<li>Sub brand/s.</li>\n</ul>\n<p><strong>Media types:</strong></p>\n<ul>\n<li>Logo,</li>\n<li>Icon,</li>\n<li>Illustration,</li>\n<li>Image,</li>\n<li>Video.</li>\n</ul>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/17-media.png\" /></p>\n<p>Example names, using the format:</p>\n<ul>\n<li><code>Figma.com/Logo/Figma</code>,</li>\n<li><code>Figma.com/Icon/Variable</code>,</li>\n<li><code>Figma.com/Illustration/Components</code>,</li>\n<li><code>Figma.com/Image/Office</code>,</li>\n<li><code>Designsystems.com/Logo/Stripe</code>,</li>\n<li><code>Designsystems.com/Icon/Hamburger</code>,</li>\n<li><code>Designsystems.com/Illustration/Orbs</code>,</li>\n<li><code>Designsystems.com/Image/Modular grid</code>.</li>\n</ul>\n<p>These are split into:</p>\n<ul>\n<li>Library: <code>Figma.com</code> or <code>Designsystems.com</code>,</li>\n<li>Media type: <code>Illustration</code> or <code>Logo</code>,</li>\n<li>Media name: e.g., <code>Component libraries</code>, <code>Iconography</code>.</li>\n</ul>\n<p>Although I’m using images for the examples here, it works with video assets, too! This means we can move in the direction of effectively using Figma like a mini DAM (<a href=\"https://www.ibm.com/topics/digital-asset-management\">digital asset manager</a>) and iterate fast on designs using brand-approved media assets, rather than relying on dummy content.</p>\n<blockquote>“A digital asset management solution is a software solution that provides a systematic approach to efficiently storing, organizing, managing, retrieving, and distributing an organization’s digital assets. DAM functionality helps many organizations create a centralized place where they can access their media assets.”<br /><br />— IBM, “<a href=\"https://www.ibm.com/topics/digital-asset-management\">What is digital asset management?</a>”</blockquote>\n\n<h4>Using Fill Styles</h4>\n<p>Fill styles aren’t just for color! We can use them for images, videos, and even illustrations if we want to. It’s worth bearing in mind that because of the flexible nature of fills, you may want to consider working within fixed sizes or aspect ratios to ensure cropping is kept to a minimum.</p>\n<p>Figma’s redline “snapping” feature lets us know when the original asset’s aspect ratio is being respected as we resize. It’s a pretty cool trick!</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/19-aspect.png\" /></p>\n<p>You can get the above example from Figma’s community:</p>\n<p><strong>→</strong> “<a href=\"https://www.figma.com/community/file/1110928859206538912/fixed-aspect-ratio-images-with-variants\"><strong>Fixed aspect ratio images with variants</strong></a>” [Figma file / <a href=\"https://www.figma.com/@disco_lu\">Luis Ouriach</a>, <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC-BY</a> license]</p>\n<p>For this world, though, I would advise <em>against</em> trying to hack Figma into setting up fully responsive images. Instead, I’d recommend working with a <strong>predefined fixed set</strong> of sizes in a component set. This may sound like a limitation, but I strongly believe that the more time we spend inside Figma, the further we get from the production environment. “Can we test this in the actual product?” is a question we should be asking ourselves frequently.</p>\n<p>Practically, this looks like creating a component set where we set the fixed sizes along one dimension and the aspect ratio along the other. Creating a matrix like this means we can use the Component Properties panel to toggle between sizes and aspect ratios, preserving the media inside the component.</p>\n<p>This can be used in tandem with a separate set of components specifically for images. If we combine this with Figma’s “nested instances” feature within variant components, we can “surface” all the preferred images from our component set within every instance at the aspect ratios needed!</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/20-animals.png\" /></p>\n<h3>Arrangement</h3>\n<p>This is the hardest thing to predict when we think through the usability of customizable components. The simplest example here is our old enemy: the form. Instinctively, we may create a complete form in a component library and publish it to the team. This makes sense!</p>\n<p>The issue is that when a designer working on a particular project requires a rearrangement of that structure, we are kind of in trouble.</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/21-arrangement.png\" /></p>\n<p>This problem extends to almost all component groups that require manipulation. Tables, menus, lists, forms, navigation… we will hit this wall frequently. This is where I’d like to introduce the concept of <strong>fixed</strong> vs <strong>flexible</strong> content within components, which should help to address the future problems of a world where we put the DRY (<a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">don’t repeat yourself</a>) principles at risk.</p>\n<p>As design system maintainers, we naturally want to keep components as composable as possible. How can this <em>one</em> component be used in lots of different ways without requiring us to ship an <em>infinite number</em> of variations? This is the central theme of the DRY principle but can be challenging in design tools because of the lack of component order management within the main components.</p>\n<p>As a result, we often end up in a world where we build, maintain, and ship endless variations of the same component in an attempt to keep up with <a href=\"https://bradfrost.com/blog/post/design-system-components-recipes-and-snowflakes/\">snowflake</a> <a href=\"https://bradfrost.com/blog/post/design-system-components-recipes-and-snowflakes/\">implementations</a> of our core component.</p>\n<blockquote>“‘When should we make something a component?’ is a question I’ve been fielding for years. My strong answer: right from the start. Creating things with a component-based mindset right out the gate saves countless hours — everything is a component!”<br /><br />— Brad Frost, “<a href=\"https://bradfrost.com/blog/post/design-system-components-recipes-and-snowflakes/\">Design system components, recipes, and snowflakes</a>”</blockquote>\n\n<p>For example, the form we spoke about before could be one for:</p>\n<ul>\n<li>Logging in;</li>\n<li>Registering;</li>\n<li>Signing up to the newsletter;</li>\n<li>Adding billing information.</li>\n</ul>\n<p>These are all clearly forms that require different data points and functionality from an engineering perspective, but they will most likely share common design foundations, e.g., padding, margins, headings, labels, and input field designs. The question then becomes, “How can we reduce repetition whilst also encouraging combinatorial design?”</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/22-arrangement.png\" /></p>\n<p>A concept that has been long-used in the developer world and loosely agreed upon in the design community is termed “<a href=\"https://vuejs.org/guide/components/slots.html\">component slots</a>.” This approach allows the design system maintainers to ship component containers with agreed properties — sizing, padding, and styles — whilst allowing for a flexible arrangement of components <em>inside</em> it.</p>\n<p>Taking our previous form examples, we can then abstract the content — login form, register form, newsletter form, and billing information form — and provide a much simpler shell component from the library. The designers using this shell (let’s call it a “form/wrapper”) will then build their forms <em>locally</em> and replace the slot component inside the shell with this new custom main component.</p>\n<p>This is best explained visually:</p>\n<p><img src=\"https://files.smashing.media/articles/building-components-consumption-not-complexity-part1/23-frequency.png\" /></p>\n<p>Does this custom component need to live in multiple files? If yes, we move it to the next level up, either team-level libraries or global, if working on a smaller system. If not, we can comfortably keep that component local to the specific Figma file on a page (I like to call it “❖ Components”).</p>\n<p><strong>Important</strong>: For this premise to really work, we must employ auto layout at <strong>every level</strong>, with no exceptions!</p>\nConclusion\n<p>That was a lot to process (over five thousand words, actually), and I think it‘s time for us to stop staring at the computer screen and take a little break before walking through the next set of principles.</p>\n<p>Go grab a drink or take some rest, then meet me in Part 2, where you will learn even more about the <strong>adoptable</strong>, <strong>indexable</strong>, <strong>logical</strong>, and <strong>specific</strong> components.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"2e797f60b6fc6ebeb8642c3cf3b3ca1898258119bb7f85d0721da39617a0f171","category":"Tech"}