{"title":"Amazon Simple Queue Service (SQS) – 15 Years and Still Queueing!","link":"https://aws.amazon.com/blogs/aws/amazon-sqs-15-years-and-still-queueing/","date":1626181026000,"content":"<p>Time sure does fly! I <a href=\"https://aws.amazon.com/blogs/aws/amazon_simple_q/\">wrote about the production launch</a> of <a href=\"https://aws.amazon.com/sqs/\">Amazon Simple Queue Service (SQS)</a> back in 2006, with no inkling that I would still be blogging fifteen years later, or that this service would still be growing rapidly while remaining fundamental to the architecture of so many different types of web-scale applications.</p> \n<p>The first beta of SQS was <a href=\"https://aws.amazon.com/about-aws/whats-new/2004/11/03/introducing-the-amazon-simple-queue-service/\">announced</a> with little fanfare in late 2004. Even though we have added many features since that beta, the original description (“a reliable, highly scalable hosted queue for buffering messages between distributed application components”) still applies. Our customers think of SQS as an infinite buffer in the cloud and use<a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-create-queue.html\"> SQS queues</a> to implement the connections between the functional parts of their <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-basic-architecture.html\">application architecture</a>.</p> \n<p>Over the years, we have worked hard to keep the SQS interface simple and easy to use, even though there’s a lot of complexity inside. In order to make SQS scalable, durable, and reliable, messages are stored in a fleet that consists of thousands of servers in each AWS Region. Within a region, we save three copies of each message, taking care to distribute the messages across storage nodes and Availability Zones. In addition to this built-in redundant storage, SQS is self-healing and resilient to host failures &amp; network interruptions. Even though SQS is now 15 years old, we continue to improve our scaling and load management applications so that you can always count on SQS to handle your mission-critical workloads.</p> \n<p>SQS runs at an incredible scale. For example:</p> \n<p><strong>Amazon Product Fulfillment</strong> – During Prime Day 2021, traffic to SQS set a new record, peaking at 47.7 million messages per second.</p> \n<p><strong>Rapid7</strong> – Amazon customer <a href=\"https://www.rapid7.com/\">Rapid7</a> makes extensive use of SQS. According to <a href=\"https://www.linkedin.com/in/jeffrey-myers-06a10520/\">Jeff Myers</a> (Platform Software Architect):</p> \n<p><em>Amazon SQS provides us with a simple to use, highly performant, and highly scalable messaging service without any management headaches. It is a crucial component of our architecture that has allowed us to scale to handle 10s of billions of messages per day.</em></p> \n<p>You can visit the <a href=\"https://aws.amazon.com/sqs/\">Amazon SQS home page</a> to read about other high-scale use cases from NASA, BMW Group, Capital One, and other AWS customers.</p> \n<p><span><strong>Serverless Office Hours</strong></span><br /> Be sure to join us today (June 13th) for Serverless Office Hours at Noon PT on <a href=\"https://www.twitch.tv/aws\">Twitch.tv</a>. Rumor has it that there will be cake!</p> \n<p><a href=\"https://www.twitch.tv/aws\"><img src=\"https://media.amazonwebservices.com/blog/2021/serverless_office_hours_2.jpg\" /></a></p> \n<p><span><strong>Back in Time</strong></span><br /> Here’s a quick recap of some of the major SQS milestones:</p> \n<p><strong>2006</strong> – <a href=\"https://aws.amazon.com/blogs/aws/amazon_simple_q/\">Production launch</a>. An unlimited number of queues per account and items per queue, with each item up to 8 KB in length. Pay as you go pricing based on messages sent and data transferred.</p> \n<p><strong>2007</strong> – <a href=\"https://aws.amazon.com/blogs/aws/new_simple_queu/\">Additional functions</a> including control of the visibility timeout and access to the approximate number of queued messages.</p> \n<p><strong>2009</strong> – <a href=\"https://aws.amazon.com/blogs/aws/powerful-new-sqs-features/\">SQS in Europe</a>, and additional control over queue access via <code><a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_AddPermission.html\">AddPermission</a></code> and <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_RemovePermission.html\"><code>RemovePermission</code></a>. This launch also marked the debut of what we then called the Access Policy Language, which has evolved into today’s IAM Policies.</p> \n<p><strong>2010</strong> – <a href=\"https://aws.amazon.com/blogs/aws/new-free-tier-and-increased-limits-for-amazon-simple-queue-service/\">A new free tier</a> (100K requests/month then, since expanded to 1 million requests/month), configurable maximum message length (up to 64 KB), and configurable message retention time.</p> \n<p><strong>2011</strong> – <a href=\"https://aws.amazon.com/blogs/aws/additional-cloudwatch-metrics-for-amazon-sqs-and-amazon-sns/\">Additional CloudWatch Metric</a>s for each SQS queue. <a href=\"https://aws.amazon.com/blogs/aws/amazon-simple-queue-service-batch-operations-delay-queue-and-message-timers/\">Later that year</a> we added batch operations (<code><a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessageBatch.html\">SendMessageBatch</a></code> and <code><a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessageBatch.html\">DeleteMessageBatch</a></code>), delay queues, and message timers.</p> \n<p><strong>2012</strong> – <a href=\"https://aws.amazon.com/blogs/aws/amazon-sqs-long-polling-batching/\">Support for long polling</a>, along with SDK support for request batching and client-side buffering.</p> \n<p><strong>2013</strong> – <a href=\"https://aws.amazon.com/blogs/aws/larger-payloads-256-kb-for-amazon-sqs-and-sns/\">Support for even larger payloads</a> (256 KB) and a <a href=\"https://aws.amazon.com/about-aws/whats-new/2013/02/28/amazon-sqs-sns-announce-lower-prices-and-expanded-free-tiers/\">50% price reduction</a>.</p> \n<p><strong>2014</strong> – Support for <a href=\"https://aws.amazon.com/blogs/aws/amazon-sqs-new-dead-letter-queue/\">dead letter queues</a>, to accept messages that have become stuck due to a timeout or to a processing error within your code.</p> \n<p><strong>2015</strong> – Support for <a href=\"https://aws.amazon.com/about-aws/whats-new/2015/10/now-send-payloads-up-to-2gb-with-amazon-sqs/\">extended payloads</a> (up to 2 GB) using the <a href=\"https://github.com/awslabs/amazon-sqs-java-extended-client-lib\">Extended Client Library</a>.</p> \n<p><strong>2016</strong> – Support for <a href=\"https://aws.amazon.com/blogs/aws/new-for-amazon-simple-queue-service-fifo-queues-with-exactly-once-delivery-deduplication/\">FIFO queues</a> with exactly-once processing and deduplication and another price reduction.</p> \n<p><strong>2017</strong> – Support for <a href=\"https://aws.amazon.com/blogs/aws/new-server-side-encryption-for-amazon-simple-queue-service-sqs/\">server-side encryption</a> of messages and <a href=\"https://aws.amazon.com/blogs/aws/introducing-cost-allocation-tags-for-amazon-sqs/\">cost allocation tags</a>.</p> \n<p><strong>2018</strong> – Support for <a href=\"https://aws.amazon.com/about-aws/whats-new/2018/12/amazon-sqs-vpc-endpoints-aws-privatelink/\">Amazon VPC Endpoints using AWS PrivateLink</a> and the ability to <a href=\"https://aws.amazon.com/about-aws/whats-new/2018/04/aws-lambda-now-supports-amazon-sqs-as-event-source/\">invoke Lambda functions</a>.</p> \n<p><strong>2019</strong> – Support for <a href=\"https://aws.amazon.com/about-aws/whats-new/2019/08/amazon-sqs-now-supports-tag-on-create/\">Tag-on-Create</a> and <a href=\"https://aws.amazon.com/about-aws/whats-new/2019/08/aws-x-ray-now-supports-amazon-sqs/\">X-Ray tracing</a>.</p> \n<p><strong>2020</strong> – Support for <a href=\"https://aws.amazon.com/about-aws/whats-new/2020/01/amazon-sqs-now-supports-1-minute-cloudwatch-metrics-in-all-commercial-regions/\">1-minute metrics</a> for more fine-grained queue monitoring, a <a href=\"https://aws.amazon.com/about-aws/whats-new/2020/07/amazon-sqs-now-supports-new-console-experience/\">new console experience</a>, and result pagination for the <code><a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ListQueues.html\">ListQueues</a></code> and <code><a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ListDeadLetterSourceQueues.html\">ListDeadLetterSourceQueues</a></code> functions.</p> \n<p><strong>2021</strong> – <a href=\"https://aws.amazon.com/about-aws/whats-new/2021/01/amazon-sqs-announces-tiered-pricing/\">Tiered pricing</a> so that you save money as your usage grows, and a <a href=\"https://aws.amazon.com/about-aws/whats-new/2021/05/amazon-sqs-now-supports-a-high-throughput-mode-for-fifo-queues/\">High Throughput mode for FIFO queues</a>.</p> \n<p>Today, SQS remains simple, scalable, <a href=\"https://aws.amazon.com/sqs/pricing/\">cost-effective</a>, and highly reliable.</p> \n<p><span><strong>From the AWS Heroes</strong></span><br /> We asked some of the AWS Heroes to reflect on the success of SQS and to share some of their success stories. Here’s what we learned:</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/eric-hammond/?did=dh_card&amp;trk=dh_card\"><strong>Eric Hammond</strong></a> (Serverless Hero) uses AWS Lambda Dead Letter Queues. They put alarms on the queues and send internal emails as alerts when problems need to be investigated.</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/tom-mclaughlin/?did=dh_card&amp;trk=dh_card\"><strong>Tom McLaughlin</strong></a> (Serverless Hero) has been using SQS since 2015. He said “My favorite use case is anytime someone wants a queue and I don’t want to manage a queuing platform. Which is always.”</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/ken-collins/?did=dh_card&amp;trk=dh_card\"><strong>Ken Collins</strong></a> (Serverless Hero) was not entirely sure how long he had been using SQS, and offered a range of 2 to 8 years! He uses it to power the <a href=\"https://github.com/customink/lambdakiq\">Lambdakiq</a> gem, which implements <a href=\"https://lamby.custominktech.com/docs/activejob_and_lambda\">ActiveJob on SQS &amp; Lambda</a>.</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/kyuhyun-byun/?did=dh_card&amp;trk=dh_card\"><strong>Kyuhyun Byun</strong></a> (Serverless Hero) has been using SQS to power a push system that must sustain massive amounts of traffic, and tells us “Thanks to SQS, I don’t consider building a queuing system anymore.”</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/prashanth-hn/?did=dh_card&amp;trk=dh_card\"><strong>Prashanth HN</strong></a> (Serverless Hero) has been using SQS since 2017, and considers himself “late to the party.” He used SQS as part of his first serverless application, and finds that it is ideal for connecting services with differing throughput.</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/ben-kehoe/?did=dh_card&amp;trk=dh_card\"><strong>Ben Kehoe</strong></a> (Serverless Hero) told us that “I first saw the power of SQS when a colleague showed me how to retain state in a fleet of EC2 Spot instances by storing the state in SQS when an instance was getting shut down, and having new instances check the queue for state on startup.”</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/jeremy-daly/?did=dh_card&amp;trk=dh_card\"><strong>Jeremy Daly</strong></a> (Serverless Hero) started using SQS in 2010 as a lightweight queue that fed a facial recognition process on user-supplied images. Today, he often uses it as a buffer to throttle requests to downstream services that are not yet serverless.</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/casey-lee/?did=dh_card&amp;trk=dh_card\"><strong>Casey Lee</strong></a> (Container Hero) also started to use SQS in 2010 as a replacement for ActiveMQ between loosely coupled Java services. Casey implements auto scaling based on queue depth, and has found it to be an accurate way to handle the load.</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/vlad-ionescu/?did=dh_card&amp;trk=dh_card\"><strong>Vlad Ionecsu</strong></a> (Container Hero) began his AWS journey with SQS back in 2014. Vlad found that the API was very easy to understand, and used SQS to power his thesis project.</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/sheen-brisals/?did=dh_card&amp;trk=dh_card\"><strong>Sheen Brisals</strong></a> (Serverless Hero) started to use SQS in 2018 while building a proof-of-concept that also used Lambda and S3. Sheen appreciates the ability to adjust the characteristics of each queue to create a good match for the message processing functions, and also makes use of both high and low priority queues.</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/gojko-adzic/?did=dh_card&amp;trk=dh_card\"><strong>Gojko Adzic</strong></a> (Serverless Hero) began to use SQS in 2013 as a task dispatch for exporters in <a href=\"https://www.mindmup.com/\">MindMup</a>. This online mind-mapping application allows large groups of users to collaborate, and requires strict ordering of updates to each document. Gojko used FIFO queues to allow them to process messages for different documents in parallel, with sequential order within each document.</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/sebastian-mueller/?did=dh_card&amp;trk=dh_card\"><strong>Sebastian Müller</strong></a> (Serverless Hero) started to use SQS in 2016 by building a notification center for website-builder <a href=\"https://www.jimdo.com/\">jimdo.com</a> . The center ensures that customers are kept aware of events (orders, support messages, and contact requests) on a timely basis.</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/luca-bianchi/?did=dh_card&amp;trk=dh_card\"><strong>Luca Bianchi</strong></a> (Serverless Hero) first used SQS in 2012. He decoupled a pair of microservices running on <a href=\"https://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a>, and also created a fan-out processing system for a gamification platform. Today, his favorite SQS use case stores inference jobs and makes them available to a worker process running on <a href=\"https://aws.amazon.com/sagemaker/\">Amazon SageMaker</a>.</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/peter-hanssens/?did=dh_card&amp;trk=dh_card\"><strong>Peter Hanssens</strong></a> (Serverless Hero) uses SQS to offload tasks that do not need to be processed immediately. Several years ago, while assisting some data scientists, he created an event-driven batch-processing system that used a Lambda function to check a queue every 5 minutes and fire up EC2 instances to build models, while keeping strict control over the maximum number of running instances.</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/serkan-ozal/?did=dh_card&amp;trk=dh_card\"><strong>Serkan Ozal</strong></a> (Serverless Hero) has been using SQS since 2013 or so. He focuses on asynchronous message processing and counts on the ability of SQS to handle a huge number of events. He also makes uses of the message visibility feature so that he can re-process messages if necessary.</p> \n<p><a href=\"https://aws.amazon.com/developer/community/heroes/matthieu-napoli/?did=dh_card&amp;trk=dh_card\"><strong>Matthieu Napoli</strong></a> (Serverless Hero) has been using SQS for about five years, starting out with EC2, and as a replacement for other queues. As he says, “Paired with Lambda, it gives massive parallelism out of the box without having to think too much about it. Plus the built-in failure handling makes it very robust.”</p> \n<p>As you can see, there are a multitude of use cases for SQS.</p> \n<p><span><strong>SQS Resources</strong></span><br /> If you are not already using SQS, then it is time to get in the queue and get started. Here are some resources to help you find your way:</p> \n<ul> \n <li><a href=\"https://aws.amazon.com/sqs/\">Amazon Simple Queue Service (SQS)</a> home page &amp; <a href=\"https://aws.amazon.com/sqs/pricing/\">pricing</a> page.</li> \n <li>Tutorial – <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-getting-started.html\">Getting Started with Amazon SQS</a>.</li> \n <li>AWS Architecture Blog – <a href=\"https://aws.amazon.com/blogs/architecture/category/messaging/amazon-simple-queue-service-sqs/\">SQS Category</a>.</li> \n <li>Video: <a href=\"https://www.youtube.com/watch?v=XrX7rb6M3jw&amp;t=1s\">Introducing Amazon SQS FIFO Queues</a>.</li> \n <li>Video: <a href=\"https://www.youtube.com/watch?v=JJQrVBRzlPg\">AWS SQS to Lambda Tutorial in NodeJS</a>.</li> \n</ul> \n<p>Happy queueing!</p> \n<p>— <a href=\"https://twitter.com/jeffbarr\">Jeff</a>;</p> \n<p> </p> \n<p> </p> \n<p> </p>","author":"Jeff Barr","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"a4453b3fbb50f6a5a050ec2c4d89ecfd66066aa12de450c0dd4eac9ce39bd127","category":"Tech"}