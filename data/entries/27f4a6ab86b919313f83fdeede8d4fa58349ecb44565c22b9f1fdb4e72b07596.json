{"title":"Running Duplicate Batch Jobs in HashiCorp Nomad","link":"https://www.hashicorp.com/blog/running-duplicate-batch-jobs-in-hashicorp-nomad","date":1626883200000,"content":"<p>By default, <a href=\"https://www.nomadproject.io/\">HashiCorp Nomad</a> prevents duplicate batch jobs from executing. This is by design because duplicate job submissions could result in unnecessary work. From Nomad’s perspective, an unchanged job qualifies as a duplicate batch job.</p>\n<p>However, there are times when a duplicate batch job or an unchanged job may be the correct approach. One example is a batch job that executes a calculation and outputs the results. In this scenario, it is likely that there is no need to change the Nomad job specification definition. Running the command <code>nomad run</code> for the specific job would be the desired behavior. But, due to Nomad’s default behavior, this would result in the batch job placement failing.</p>\n<p>To get around this default behavior, you can use a couple of techniques to inject variation in ways that don't require you to alter the job’s content. This blog presents two approaches to injecting variability into your Nomad batch job template without having to modify the template in the future.</p>\n<h2><a href=\"#use-a-uuid-as-an-ever-changing-value\">»</a><a></a>Use a UUID as an Ever-Changing Value</h2>\n<p>The <code>meta</code> block of a Nomad job specification allows for user-defined arbitrary key-value pairs. By using HCL2 functions and the <code>meta</code> block, you can inject variation into a batch job without having to alter the job specification template. You can use the UUID function to inject variation and thus ensure the job is unique every time you run the command <code>nomad run</code>.</p>\n<p>To see how it works, create a file called <code>uuid.nomad</code> and copy the content below into it. This batch job runs the <code>Hello World</code> Docker example. Note how the <code>meta</code> block is setting a key-value pair and using the <code>uuidv4()</code> function:</p><pre><code>job \"uuid.nomad\" {\n datacenters = [\"dc1\"]\n type = \"batch\"\n\n meta {\n  run_uuid = \"${uuidv4()}\"\n }\n\n group \"uuid\" {\n  task \"hello-world\" {\n   driver = \"docker\"\n\n   config {\n    image = \"hello-world:latest\"\n   }\n  }\n }\n}\n</code></pre><p>Start a local Nomad server by issuing the command <code>nomad agent -dev</code>:</p><pre><code>nomad agent -dev\n==&gt; No configuration files loaded\n==&gt; Starting Nomad agent...\n==&gt; Nomad agent configuration:\n...\nclient: node registration complete</code></pre><p>Ensure the Nomad server is up and running. Then navigate to the directory where you created the file <code>uuid.nomad</code> and issue the command <code>nomad run uuid.nomad</code>. This will submit the batch job to Nomad:</p><pre><code>$ nomad run uuid.nomad\n==&gt; Monitoring evaluation \"44c8a150\"\n  Evaluation triggered by job \"uuid.nomad\"\n==&gt; Monitoring evaluation \"44c8a150\"\n  Allocation \"4fb444d4\" created: node \"fd14a894\", group \"uuid\"\n  Evaluation status changed: \"pending\" -&gt; \"complete\"\n==&gt; Evaluation \"44c8a150\" finished with status \"complete\"</code></pre><p>Check the status of the job allocation by using the <code>nomad alloc status</code> command:</p><pre><code>$ nomad alloc status 4fb444d4\nID         = 4fb444d4-3c5c-51d7-3820-c3752796aad7\nEval ID       = 44c8a150\nName        = uuid.nomad.uuid[0]\nNode ID       = fd14a894\nNode Name      = myDeskTop\nJob ID       = uuid.nomad\nJob Version     = 0\nClient Status    = complete\nClient Description = All tasks have completed\nDesired Status   = run\nDesired Description = \nCreated       = 2m30s ago\nModified      = 2m27s ago\n\nTask \"hello-world\" is \"dead\"\nTask Resources\nCPU    Memory    Disk   Addresses\n0/100 MHz 0 B/300 MiB 300 MiB\n\nTask Events:\nStarted At   = 2021-05-28T19:47:41Z\nFinished At  = 2021-05-28T19:47:41Z\nTotal Restarts = 0\nLast Restart  = N/A\n\nRecent Events:\nTime            Type    Description\n2021-05-28T12:47:41-07:00 Terminated Exit Code: 0\n2021-05-28T12:47:41-07:00 Started   Task started by client\n2021-05-28T12:47:38-07:00 Driver   Downloading image\n2021-05-28T12:47:38-07:00 Task Setup Building Task Directory\n2021-05-28T12:47:38-07:00 Received  Task received by client</code></pre><p>The output indicates a successful job with an exit code <code>0</code>. Submit the job again though the command <code>nomad run uuid.nomad</code>:</p><pre><code>nomad run uuid.nomad\n==&gt; Monitoring evaluation \"fd2e5e6d\"\n  Evaluation triggered by job \"uuid.nomad\"\n  Allocation \"9528b83d\" created: node \"fd14a894\", group \"uuid\"\n  Evaluation status changed: \"pending\" -&gt; \"complete\"\n==&gt; Evaluation \"fd2e5e6d\" finished with status \"complete\"</code></pre><p>The job ran again and bypassed the default behavior due to having a different <code>uuid</code> value. You can verify that the job ran twice through the Nomad UI by looking at the jobs overview, as shown here:</p><img src=\"https://www.datocms-assets.com/2885/1626880627-nomadui-overview.png\" /><p>You can see in the Recent Allocations view that the two jobs ran successfully.</p>\n<h2><a href=\"#use-an-hcl2-variable\">»</a><a></a>Use an HCL2 Variable</h2>\n<p>You can achieve the same behavior of injecting variability by utilizing the <code>meta</code> block in a job specification and a variable.</p>\n<p>Start by creating a file named <code>variable.nomad</code> and copy the content below into the file. This batch does the exact same thing as the <code>uuid.nomad</code> file, except this code snippet is using variables:</p><pre><code>job \"variable.nomad\" {\n datacenters = [\"dc1\"]\n type = \"batch\"\n\n meta {\n  run_index = \"${floor(var.run_index)}\"\n }\n\n group \"variable\" {\n  task \"hello-world\" {\n   driver = \"docker\"\n\n   config {\n    image = \"hello-world:latest\"\n   }\n  }\n }\n}\n\nvariable \"run_index\" {\n type = number\n description = \"An integer that, when changed from the current value, causes the job to restart.\"\n validation {\n  condition = var.run_index == floor(var.run_index)\n  error_message = \"The run_index must be an integer.\"\n }\n}</code></pre><p>Go ahead and submit the batch job by running the command <code>nomad run -var run_index=1 variable.nomad</code>:</p><pre><code>$ nomad run -var run_index=1 variable.nomad\n==&gt; Monitoring evaluation \"387bfe35\"\n  Evaluation triggered by job \"variable.nomad\"\n  Allocation \"de54c080\" created: node \"185068cf\", group \"variable\"\n==&gt; Monitoring evaluation \"387bfe35\"\n  Evaluation status changed: \"pending\" -&gt; \"complete\"\n==&gt; Evaluation \"387bfe35\" finished with status \"complete\"</code></pre><p>Check the status of the job with the <code>nomad alloc status</code> command:</p><pre><code>$ nomad alloc status de54\nID         = de54c080-e3f3-cef3-1d9e-b1a4d956106c\nEval ID       = 387bfe35\nName        = variable.nomad.variable[0]\nNode ID       = 185068cf\nNode Name      = myDeskTop\nJob ID       = variable.nomad\nJob Version     = 0\nClient Status    = complete\nClient Description = All tasks have completed\nDesired Status   = run\nDesired Description = \nCreated       = 26s ago\nModified      = 24s ago\n\nTask \"hello-world\" is \"dead\"\nTask Resources\nCPU    Memory    Disk   Addresses\n0/100 MHz 0 B/300 MiB 300 MiB\n\nTask Events:\nStarted At   = 2021-05-28T20:50:48Z\nFinished At  = 2021-05-28T20:50:48Z\nTotal Restarts = 0\nLast Restart  = N/A\n\nRecent Events:\nTime            Type    Description\n2021-05-28T13:50:48-07:00 Terminated Exit Code: 0\n2021-05-28T13:50:48-07:00 Started   Task started by client\n2021-05-28T13:50:46-07:00 Driver   Downloading image\n2021-05-28T13:50:46-07:00 Task Setup Building Task Directory\n2021-05-28T13:50:46-07:00 Received  Task received by client</code></pre><p>The output reveals that the job completed successfully. If you were to submit the job again through the command <code>nomad run -var run_index=1 variable.nomad</code>, the job allocation would have failed as the index value provided is the same as the previously submitted batch job. The screenshot below was taken after three submissions of the same batch job were submitted:</p><img src=\"https://www.datocms-assets.com/2885/1626880810-nomaduioverviewevaluations.png\" /><p>Three evaluations were conducted but only one batch job was allocated, the first one:</p><img src=\"https://www.datocms-assets.com/2885/1626880857-nomad-allocations-variable1.png\" /><p>In order for Nomad to accept the job, you need to provide a unique value. Go ahead and change the index to a value of 2 and issue the command <code>nomad run -var run_index=2 variable.nomad</code>:</p><pre><code>$ nomad run -var run_index=2 variable.nomad\n==&gt; Monitoring evaluation \"522bce96\"\n  Evaluation triggered by job \"variable.nomad\"\n  Allocation \"298d7cf7\" created: node \"185068cf\", group \"variable\"\n  Evaluation status changed: \"pending\" -&gt; \"complete\"\n==&gt; Evaluation \"522bce96\" finished with status \"complete\"</code></pre><p>This submission is accepted because it contains a unique value, an index value of 2. You can confirm the allocation was successful by visiting the Nomad UI or by running the command <code>nomad alloc status</code>:</p><img src=\"https://www.datocms-assets.com/2885/1626880925-nomad-allocations-variable2.png\" /><h2><a href=\"#next-steps\">»</a><a></a>Next Steps</h2>\n<p>This post shared two approaches to injecting variability into your Nomad batch job template without having to modify the template in the future. There are many more Nomad tutorials available on the <a href=\"https://learn.hashicorp.com/nomad\">HashiCorp Learn Platform</a>, where you can expand your Nomad knowledge and skills. Here are a few tutorials worth checking out this summer that will help you power up your Nomad skills.</p>\n<ul>\n<li><a href=\"https://learn.hashicorp.com/tutorials/nomad/job-spec-parameterized?in=nomad/job-specifications\">Parameterized Jobs on Nomad</a></li>\n<li><a href=\"https://learn.hashicorp.com/tutorials/nomad/horizontal-cluster-scaling?in=nomad/autoscaler\">Horizontal Cluster Autoscaling</a></li>\n<li><a href=\"https://learn.hashicorp.com/tutorials/nomad/access-control?in=nomad/access-control\">Nomad ACL System Fundamentals</a></li>\n<li><a href=\"https://learn.hashicorp.com/tutorials/nomad/job-update-strategies?in=nomad/job-updates\">Nomad Job Update Strategies</a></li>\n</ul>","author":"Karl Cardenas","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"27f4a6ab86b919313f83fdeede8d4fa58349ecb44565c22b9f1fdb4e72b07596","category":"Tech"}