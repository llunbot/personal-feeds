{"title":"มาทำการ review Distributed Monolith กันหน่อย","link":"https://www.somkiat.cc/review-distributed-monolith/","date":1743520514000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2025/04/distributed-monolith-01-150x150.jpg\" alt=\"\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2025/04/distributed-monolith-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2025/04/distributed-monolith-01-75x75.jpg 75w\" /></p>\n<p>จากการแบ่งปันเรื่องของ Software Architecture และ Microservices นั้น<br />มีตัวอย่างจากการทำ workshop ออกมาเป็นดังรูป<br />คำถามที่น่าสนใจคือ มันดีไหม ?<br />แน่นอนว่าตอบไม่ได้ แต่เราต้องขอข้อมูลส่วนอื่น ๆ  เพิ่มเติม<br />ทั้ง functional  และ non-functional requirement ของระบบงาน<br />ตลอดจนข้อจำกัดต่าง ๆ</p>\n\n\n\n<span></span>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/04/distributed-monolith-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/04/distributed-monolith-01-1024x668.jpg\" alt=\"\" width=\"655\" height=\"426\" /></a></figure>\n\n\n\n<p>แต่สิ่งที่เราจะมา review กัน มองในมุมของ plan for failure และ coupling ของแต่ละ service<br />ซึ่งอาจจะก่อให้เกิดปัญหาตามก็ได้ ดังนี้</p>\n\n\n\n<ul>\n<li>ในการ deploy ไม่สามารถแยก deploy ได้ ต้องมีการเรียงลำดับการ deploy เสมอ</li>\n\n\n\n<li>การเรียกไปยัง service อื่น ๆ  แบบ synchronous หรือ request/response ถ้าจัดการไม่ดี อาจจะทำให้มีปัญหาได้ เช่น บาง service ช้า หรือ มีปัญหา อาจจะทำการ service ที่เรียกใช้งานมีปัญหาไปเรื่อย ๆ หรือปัญหาไฟลามทุ่งได้ (cascasing failure) ดังนั้นอาจจะต้องมองเรื่องของ timeout/retry/circute breaker หรือไม่ ?</li>\n\n\n\n<li>มีการเรียก service ไปมา อาจจะทำให้เป็นวงกลมได้อีก (circular dependency) จะทำให้เกิดปัญหาในการเพิ่มหรือแก้ไขหรือไม่ ?</li>\n\n\n\n<li>เมื่อมีการเปลี่ยนแปลง service หนึ่ง ทั้ง logic และ โครงสร้างของข้อมูล อาจจะทำให้ service ต่าง ๆ ที่เรียกใช้งานมีปัญหาได้</li>\n\n\n\n<li>เมื่อต้องการแก้ไขสัก 1 feature แต่ต้องไปแก้ไขหลาย ๆ  service หรือ ต้องมีการทำงานร่วมกันของหลาย ๆ ทีม มันคือ overhead ของการทำงานร่วมกัน (communication and collaboration) มันคือปัญหาของการแบ่ง service หรือไม่ ?</li>\n\n\n\n<li>การจัดการเรื่องความถูกต้องของข้อมูล จะทำอย่างไร ? จัดการ transaction อย่างไร ? จัดการปัญหาเรื่อง duplication data อย่างไร ?</li>\n\n\n\n<li>มีแนวทางในการทดสอบอย่างไร ?</li>\n\n\n\n<li>จัดการเรื่อง operation อย่างไร ? ทั้งการ deploy, monitoging, observability (metric, trace, log), scaling, security อย่างไร ? เมื่อเกิดปัญหาสามารถเข้าถึงจุดเกิดเหตุได้รวดเร็ว และ MTTR ดีขึ้นไหม (Mean-Time-To-Recover)</li>\n</ul>\n\n\n\n<p>แต่สุดท้ายกลับมาที่ความต้องการของระบบงาน<br />ว่ามีความต้องการอย่างไร ?<br />เพื่อเลือกวิธีการให้เหมาะสม</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"b88b71d6481279a97b5fb6431d32c61531965502a39874629b87e56fd7849806","category":"Thai"}