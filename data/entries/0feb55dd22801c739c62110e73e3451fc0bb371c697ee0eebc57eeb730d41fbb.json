{"title":"Why Optimizing Your Lighthouse Score Is Not Enough For A Fast Website","link":"https://smashingmagazine.com/2024/11/why-optimizing-lighthouse-score-not-enough-fast-website/","date":1730800800000,"content":"<p>This article is a sponsored by <a href=\"https://www.debugbear.com/?utm_campaign=sm-6\">DebugBear</a></p>\n<p>We’ve all had that moment. You’re optimizing the performance of some website, scrutinizing every millisecond it takes for the current page to load. You’ve fired up Google Lighthouse from Chrome’s DevTools because everyone and their uncle uses it to evaluate performance.</p>\n<p><img src=\"https://files.smashing.media/articles/why-optimizing-lighthouse-score-not-enough-fast-website/1-google-lighthouse.png\" /></p>\n<p>After running your 151st report and completing all of the recommended improvements, you experience nirvana: <strong>a perfect 100% performance score!</strong></p>\n<p><img src=\"https://files.smashing.media/articles/why-optimizing-lighthouse-score-not-enough-fast-website/2-devtools-performance-score.png\" /></p>\n<p>Time to pat yourself on the back for a job well done. Maybe you can use this to get that pay raise you’ve been wanting! Except, don’t — at least not using Google Lighthouse as your sole proof. I know a perfect score produces all kinds of good feelings. That’s what we’re aiming for, after all!</p>\n<p>Google Lighthouse is merely <em>one</em> tool in a complete performance toolkit. What it’s not is a complete picture of how your website performs in the real world. Sure, we can glean plenty of insights about a site’s performance and even spot issues that ought to be addressed to speed things up. But again, it’s <em>an incomplete picture</em>.</p>\nWhat Google Lighthouse Is Great At\n<p>I hear other developers boasting about perfect Lighthouse scores and see the screenshots published all over socials. Hey, I just did that myself in the introduction of this article!</p>\n<p>Lighthouse might be the most widely used web performance reporting tool. I’d wager its ubiquity is due to convenience more than the quality of its reports.</p>\n<p>Open DevTools, click the Lighthouse tab, and generate the report! There are even many ways we can configure Lighthouse to measure performance in simulated situations, such as slow internet connection speeds or creating separate reports for mobile and desktop. It’s a very powerful tool for something that comes baked into a free browser. It’s also <a href=\"https://developers.google.com/speed/docs/insights/v5/about\">baked right into Google’s PageSpeed Insights tool</a>!</p>\n<p>And it’s fast. Run a report in Lighthouse, and you’ll get something back in about 10-15 seconds. Try running reports with other tools, and you’ll find yourself refilling your coffee, hitting the bathroom, and maybe checking your email (in varying order) while waiting for the results. There’s a good reason for that, but all I want to call out is that Google Lighthouse is <em>lightning</em> fast as far as performance reporting goes.</p>\n<p><strong>To recap:</strong> Lighthouse is great at many things!</p>\n<ul>\n<li>It’s convenient to access,</li>\n<li>It provides a good deal of configuration for different levels of troubleshooting,</li>\n<li>And it spits out reports in record time.</li>\n</ul>\n<p>And what about that bright and lovely animated green score — who doesn’t love that?!</p>\n<p>OK, that’s the rosy side of Lighthouse reports. It’s only fair to highlight its limitations as well. This isn’t to dissuade you or anyone else from using Lighthouse, but more of a heads-up that your score may not perfectly reflect reality — or even match the scores you’d get in other tools, including Google’s own <a href=\"https://pagespeed.web.dev\">PageSpeed Insights</a>.</p>\nIt Doesn’t Match “Real” Users\n<p>Not all data is created equal in capital Web Performance. It’s important to know this because data represents assumptions that reporting tools make when evaluating performance metrics.</p>\n<p>The data Lighthouse relies on for its reporting is called <strong>simulated data</strong>. You might already have a solid guess at what that means: it’s <em>synthetic</em> data. Now, before kicking simulated data in the knees for not being “real” data, know that it’s the reason Lighthouse is super fast.</p>\n<p>You know how there’s a setting to “throttle” the internet connection speed? That simulates different conditions that either slow down or speed up the connection speed, something that you configure directly in Lighthouse. By default, Lighthouse collects data on a fast connection, but we can configure it to something slower to gain insights on slow page loads. But beware! <strong>Lighthouse then estimates how quickly the page would have loaded on a different connection</strong>.</p>\n<p><a href=\"https://www.debugbear.com\">DebugBear</a> founder <a href=\"https://www.mattzeunert.com\">Matt Zeunert</a> outlines <a href=\"https://calendar.perfplanet.com/2021/how-does-lighthouse-simulated-throttling-work/\">how data runs in a simulated throttling environment</a>, explaining how Lighthouse uses “optimistic” and “pessimistic” averages for making conclusions:</p>\n<blockquote>“[Simulated throttling] reduces variability between tests. But if there’s a single slow render-blocking request that shares an origin with several fast responses, then Lighthouse will underestimate page load time.<br /><br />Lighthouse averages optimistic and pessimistic estimates when it’s unsure exactly which nodes block rendering. In practice, metrics may be closer to either one of these, depending on which dependency graph is more correct.”</blockquote>\n\n<p>And again, the environment is a configuration, not reality. It’s unlikely that your throttled conditions match the connection speeds of an average real user on the website, as they may have a faster network connection or run on a slower CPU. What Lighthouse provides is more like <strong>“on-demand” testing</strong> that’s immediately available.</p>\n<p>That makes simulated data great for running tests quickly and under certain artificially sweetened conditions. However, it sacrifices accuracy by making assumptions about the connection speeds of site visitors and averages things in a way that divorces it from reality.</p>\n<p>While simulated throttling is the default in Lighthouse, it also supports <a href=\"https://www.debugbear.com/blog/packet-level-throttling?utm_campaign=sm-6\">more realistic throttling methods</a>. Running those tests will take more time but give you more accurate data. The easiest way to run Lighthouse with more realistic settings is using an online tool like the <a href=\"https://www.debugbear.com/test/website-speed?utm_campaign=sm-6\">DebugBear website speed test</a> or <a href=\"https://www.webpagetest.org/\">WebPageTest</a>.</p>\nIt Doesn’t Impact Core Web Vitals Scores\n<p>These <a href=\"https://www.debugbear.com/docs/metrics/core-web-vitals?utm_campaign=sm-6\">Core Web Vitals</a> everyone talks about are Google’s standard metrics for measuring performance. They go beyond simple “Your page loaded in X seconds” reports by looking at a slew of more pertinent details that are diagnostic of how the page loads, resources that might be blocking other resources, slow user interactions, and how much the page shifts around from loading resources and content. Zeunert has <a href=\"https://www.smashingmagazine.com/2024/04/monitor-optimize-google-core-web-vitals/\">another great post here on Smashing Magazine</a> that discusses each metric in detail.</p>\n<p>The main point here is that the simulated data Lighthouse produces may (and often does) differ from performance metrics from other tools. <a href=\"https://www.smashingmagazine.com/2023/10/answering-questions-interpreting-page-speed-reports/\">I spent a good deal explaining this in another article.</a> The gist of it is that <strong>Lighthouse scores do not impact Core Web Vitals data</strong>. The reason for that is Core Web Vitals relies on data about real users pulled from the monthly-updated <a href=\"https://developer.chrome.com/docs/crux\">Chrome User Experience (CrUX) report</a>. While CrUX data may be limited by how recently the data was pulled, it is a more accurate reflection of user behaviors and browsing conditions than the simulated data in Lighthouse.</p>\n<p>The ultimate point I’m getting at is that Lighthouse is simply ineffective at measuring Core Web Vitals performance metrics. Here’s how I explain it in my bespoke article:</p>\n<blockquote>“[Synthetic] data is fundamentally limited by the fact that <strong>it only looks at a single experience in a pre-defined environment</strong>. This environment often doesn’t even match the average real user on the website, who may have a faster network connection or a slower CPU.”</blockquote>\n\n<p>I emphasized the important part. In real life, users are likely to have more than one experience on a particular page. It’s not as though you navigate to a site, let it load, sit there, and then close the page; you’re more likely to do something on that page. And for a Core Web Vital metric that looks for slow paint in response to user input — namely, <a href=\"https://www.smashingmagazine.com/2023/12/preparing-interaction-next-paint-web-core-vital/\">Interaction to Next Paint (INP)</a> — there’s no way for Lighthouse to measure that at all!</p>\n<p>It’s the same deal for a metric like Cumulative Layout Shift (CLS) that <a href=\"https://web.dev/articles/user-centric-performance-metrics#types-of-metrics\">measures the</a> <a href=\"https://www.smashingmagazine.com/2023/10/answering-questions-interpreting-page-speed-reports/#why-is-my-lighthouse-cls-score-better-than-the-real-user-data\">“visible stability” of a page layout</a> because layout shifts often happen lower on the page <em>after</em> a user has scrolled down. If Lighthouse relied on CrUX data (which it doesn’t), then it would be able to make assumptions based on real users who interact with the page and can experience CLS. Instead, Lighthouse waits patiently for the full page load and never interacts with parts of the page, thus having no way of knowing anything about CLS.</p>\nBut It’s Still a “Good Start”\n<p>That’s what I want you to walk away with at the end of the day. A Lighthouse report is incredibly good at producing reports quickly, thanks to the simulated data it uses. In that sense, I’d say that Lighthouse is a handy “gut check” and maybe even a first step to identifying opportunities to optimize performance.</p>\n<p>But a complete picture, it’s not. For that, what we’d want is a tool that leans on <strong>real user data</strong>. Tools that integrate CrUX data are pretty good there. But again, that data is pulled every month (<a href=\"https://developer.chrome.com/docs/crux/methodology/tools\">28 days to be exact</a>) so it may not reflect the most recent user behaviors and interactions, although it is updated daily on a rolling basis and it is indeed possible to <a href=\"https://developer.chrome.com/docs/crux/history-api\">query historical records</a> for larger sample sizes.</p>\n<p>Even better is using a tool that monitors users in real-time.</p>\n<p>Data pulled directly from the site of origin is truly the gold standard data we want because it comes from the source of truth. That makes tools that integrate with your site the best way to gain insights and diagnose issues because they tell you exactly how your visitors are experiencing your site.</p>\n<p>I’ve written about <a href=\"https://www.smashingmagazine.com/2024/02/reporting-core-web-vitals-performance-api/\">using the Performance API in JavaScript</a> to evaluate custom and Core Web Vitals metrics, so it’s possible to roll that on your own. But there are plenty of existing services out there that do this for you, complete with visualizations, historical records, and true <strong>real-time user monitoring</strong> (often abbreviated as RUM). What services? Well, <a href=\"https://www.debugbear.com/?utm_campaing=sm-6\">DebugBear is a great place to start</a>. I cited Matt Zeunert earlier, and DebugBear is his product.</p>\n<p>So, if what you want is a complete picture of your site’s performance, go ahead and start with Lighthouse. But don’t stop there because you’re only seeing part of the picture. You’ll want to augment your findings and <a href=\"https://www.debugbear.com/blog/synthetic-vs-rum/?utm_campaing=sm-6\">diagnose performance with real-user monitoring</a> for the most complete, accurate picture.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"0feb55dd22801c739c62110e73e3451fc0bb371c697ee0eebc57eeb730d41fbb","category":"Tech"}