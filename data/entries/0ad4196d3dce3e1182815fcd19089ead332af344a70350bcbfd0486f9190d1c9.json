{"title":"Announcing Interop 2025","link":"https://webkit.org/blog/16458/announcing-interop-2025/","date":1739385040000,"content":"<p>Exciting news for web developers, designers, and browser enthusiasts alike — Interop 2025 is here, continuing the mission of improving cross-browser interoperability. For the fourth year in a row, we are pleased to collaborate with <a href=\"https://www.bocoup.com/blog/interop-2025\">Bocoup</a>, <a href=\"https://www.igalia.com/2025/interop-2025-launches.html\">Igalia</a>, <a href=\"https://web.dev/blog/interop-2025\">Google</a>, <a href=\"https://blogs.windows.com/msedgedev/2025/02/13/microsoft-edge-and-interop-2025/\">Microsoft</a>, and <a href=\"https://hacks.mozilla.org/2025/02/interop-2025/\">Mozilla</a> to smooth out inconsistencies between browsers. The result? A more reliable, user-friendly web experience for everyone.</p>\n<p>The WebKit team is proud to have ended Interop 2024 with 98% of tests passing in Safari 18.2 and 99% passing in Safari Technology Preview. In fact, it’s very exciting to see all four participating preview browsers reach 99.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Interop-2024-stable-end.png\" alt=\"Scores from Interop 2024 dashboard — Chrome, 98; Edge, 97; Firefox, 99; Safari 98\" width=\"1826\" height=\"782\" srcset=\"https://webkit.org/wp-content/uploads/Interop-2024-stable-end.png 1826w, https://webkit.org/wp-content/uploads/Interop-2024-stable-end-300x128.png 300w, https://webkit.org/wp-content/uploads/Interop-2024-stable-end-1024x439.png 1024w, https://webkit.org/wp-content/uploads/Interop-2024-stable-end-768x329.png 768w, https://webkit.org/wp-content/uploads/Interop-2024-stable-end-1536x658.png 1536w\" /><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Interop-2024-experimental-end.png\" alt=\"Scores from Interop 2024 dashboard — Chrome Canary, 99; Edge Dev, 99; Firefox Nightly, 99; Safari Technology Preview 99\" width=\"1826\" height=\"782\" srcset=\"https://webkit.org/wp-content/uploads/Interop-2024-experimental-end.png 1826w, https://webkit.org/wp-content/uploads/Interop-2024-experimental-end-300x128.png 300w, https://webkit.org/wp-content/uploads/Interop-2024-experimental-end-1024x439.png 1024w, https://webkit.org/wp-content/uploads/Interop-2024-experimental-end-768x329.png 768w, https://webkit.org/wp-content/uploads/Interop-2024-experimental-end-1536x658.png 1536w\" /></figure>\n<p>Overall interoperability reached 97% for <a href=\"https://wpt.fyi/interop-2024\">Interop 2024</a> — the highest test pass-rate ever! This means long-time features like Accessibility, Custom Properties, <code>font-size-adjust</code>, IndexDB, URLs, scrollbar styling, Text Direction now work the same way in every browser. And new features like CSS Nesting, Declarative Shadow DOM, <code>popover</code>, Relative Color Syntax, and <code>text-wrap: balance</code> are starting their lives with excellent interoperability.</p>\n<h2><a name=\"introducing-interop-2025\"></a>Introducing Interop  2025</h2>\n<p>Standards are most impactful when they’re broadly supported and Interop 2025 will continue to push the web forward by promoting consistent adoption of standards that let developers build cutting-edge websites. Safari has already implemented many of the standards included in Interop 2025, including View Transitions in <a href=\"https://webkit.org/blog/15865/webkit-features-in-safari-18-0/\">Safari 18.0</a> and <a href=\"https://webkit.org/blog/16301/webkit-features-in-safari-18-2/\">Safari 18.2</a>, and the <code>@scope</code> rule shipped in <a href=\"https://webkit.org/blog/15063/webkit-features-in-safari-17-4/\">Safari 17.4</a>. We’re excited that these technologies are being included as focus areas in Interop 2025, ensuring they get implemented across all browsers with strong interoperability.</p>\n<p>We will also be focused on adding support for the following features over the course of the year: Anchor positioning, Navigation API, URLPattern, <code>scrollend</code> events, Core Web Vitals, two Wasm features, two new Storage Access API methods, and removing Mutation Events. Together, these eight areas make up over 40% of the overall score. We believe these are features you are asking for and care about and are excited to work on them. Increasing support over the course of the year is what the Interop Project is all about, and year after year our ending scores prove our commitment to leadership in providing the latest and most important web standards.</p>\n<p>This year’s Interop 2025 runs automated tests for 19 focus areas:</p>\n<ul>\n<li><a href=\"#anchor-positioning\">Anchor Positioning</a></li>\n<li><a href=\"#backdrop-filter\"><code>backdrop-filter</code></a></li>\n<li><a href=\"#core-web-vitals\">Core Web Vitals</a></li>\n<li><a href=\"#details-element\"><code>&lt;details&gt;</code> element</a></li>\n<li><a href=\"#layout-flexbox-grid\">Layout</a></li>\n<li><a href=\"#modules-json-and-import-attributes\">Modules</a></li>\n<li><a href=\"#navigation-api\">Navigation API</a></li>\n<li><a href=\"#pointer-and-mouse-events\">Pointer and Mouse events</a></li>\n<li><a href=\"#remove-mutation-events\">Remove Mutation events</a></li>\n<li><a href=\"#scope\"><code>@scope</code></a></li>\n<li><a href=\"#scrollend-event\"><code>scrollend</code> event</a></li>\n<li><a href=\"#storage-access-api\">Storage Access API</a></li>\n<li><a href=\"#text-decoration\"><code>text-decoration</code></a></li>\n<li><a href=\"#urlpattern\">URLPattern</a></li>\n<li><a href=\"#view-transitions\">View Transitions</a></li>\n<li><a href=\"#webassembly\">WebAssembly</a></li>\n<li><a href=\"#web-compat\">Web Compat</a></li>\n<li><a href=\"#webrtc\">WebRTC</a></li>\n<li><a href=\"#writing-modes\">Writing Modes</a></li>\n</ul>\n<h3><a name=\"investigations\"></a>Investigations</h3>\n<p>In addition to the focus areas, the Interop Project includes several investigation areas. These are projects where teams gather to assess the current state of testing infrastructure and sort through issues that are blocking progress. For instance, two years ago accessibility could not be an Interop focus area, because there just wasn’t enough test coverage in the WPT test suite. So Apple led a project to <a href=\"https://webkit.org/blog/15400/improving-web-accessibility-with-web-platform-tests/\">create over 1,100 subtests</a>. Accessibility then became a focus area for Interop 2024, where it reached almost perfect interoperability.</p>\n<p>There are five investigations for Interop 2025. We are especially excited about another Accessibility investigation to create even more accessibility tests. A new WebVTT investigation will look to improve the text tracks that are synchronized to videos, used most often for closed captioning. And a new Privacy investigation will dive into what privacy-related standardized features need tests, develop automated tests or document manual tests, and improve interoperability of privacy protections.</p>\n<h2><a name=\"focus-areas-for-2025\"></a>Focus Areas for 2025</h2>\n<p>Interop 2025 contains a lot, with nineteen focus areas. Just two areas are being carried over from Interop 2024. The other seventeen are brand new.</p>\n<h4><a name=\"anchor-positioning\"></a>Anchor Positioning</h4>\n<p>Have you ever wanted to position one element relative to another element’s position and size, rather than relying solely on the element’s own dimensions or static placement within the page? That’s what <a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_anchor_positioning\">Anchor Positioning</a> is all about. This CSS feature allows elements like tooltips or dropdowns to be anchored to specific parts of other elements. Whether it’s a tooltip that follows a button or a callout that stays in place even when the page scrolls, this feature makes complex layouts simpler and more predictable.</p>\n<p>Anchor Positioning is currently a work-in-progress in WebKit, available in Safari Technology Preview behind a feature flag. You can test it by <a href=\"https://developer.apple.com/documentation/safari-developer-tools/feature-flag-settings\">turning on support</a>. Once the implementation is close to complete, it will be marked as <code>preview</code>, turning it on by default in Safari Technology Preview, where the tests in the Anchor Positioning focus area will begin to pass.</p>\n<h4><a name=\"backdrop-filter\"></a>Backdrop-filter</h4>\n<p>Next up,<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter\"><code>backdrop-filter</code></a> lets you apply graphical effects like blur or color shifts to the background area behind an element. Imagine a frosted glass effect on a page where the content behind an overlay is blurred without affecting the content itself. This can add depth to designs and make interfaces feel modern and sleek. This year, the goal is to ensure this property works smoothly across all browsers, making those stunning effects a reliable part of your CSS toolkit.</p>\n<figure>\n<p></p><figcaption>See what’s possible with backdrop filter in <a href=\"https://codepen.io/jensimmons/pen/OJYJzNz/ba0c7add12490a3ffad879a0eb25f9d3?editors=1100\">this demo</a>. Use the dropdown to switch filters.</figcaption></figure>\n<p></p>\n<p><a href=\"https://webkit.org/blog/15865/webkit-features-in-safari-18-0/#:~:text=Backdrop%20Filter\">In Safari 18.0</a>, we updated our implementation to the latest spec, but there’s more work to do to reach full interoperability.</p>\n<h4><a name=\"core-web-vitals\"></a>Core Web Vitals</h4>\n<p>The performance of your website is key to providing a fantastic user experience, and we know it’s top-of-mind as you write code. We’ve heard your requests for cross-browser support of the popular <a href=\"https://web.dev/explore/learn-core-web-vitals\">Core Web Vitals</a>, and we are excited to have them on the agenda for 2025. The focus areas includes:</p>\n<ul>\n<li>Largest Contentful Paint (LCP)</li>\n<li>Interaction to Next Paint (INP)</li>\n</ul>\n<p>Having these metrics available in all browsers allows you to track how quickly and smoothly users can interact with a page, no matter which platform they are on.</p>\n<h4><a name=\"details-element\"></a>&lt;details&gt; Element</h4>\n<p>This simple but powerful HTML element lets you create expandable content sections — think of those collapsible menus or FAQs. In 2025, the goal is to enhance support for the  <a href=\"https://developer.mozilla.org/docs/Web/HTML/Element/details\"><code>&lt;details&gt;</code></a> and<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary\"><code>&lt;summary&gt;</code></a> elements, and improve their interaction with other features of the Web platform. This means:</p>\n<ul>\n<li>improving how pseudo-elements like <a href=\"https://developer.mozilla.org/docs/Web/CSS/::marker\"><code>::marker</code></a> and <code>::details-content</code> work</li>\n<li>adding better interactivity with <code>content-visibility</code></li>\n<li>making the find-in-page search interact with the element more intuitively</li>\n</ul>\n<p>It’s all about improving user interaction with these controls.</p>\n<p>This focus area also includes the <code>hidden=until-found</code> HTML attribute, which can be used on any element. This causes the content in the element with this attribute to be hidden until a fragment link to the content is activated or find in page reaches the content — then the content is revealed.</p>\n<h4><a name=\"layout-flexbox-grid\"></a>Layout: Flexbox &amp; Grid</h4>\n<p>The Layout focus area is being carried over from Interop 2024 to ensure even more interoperability for Flexbox, Grid, Subgrid. These layout systems have been a game-changer for web design.</p>\n<h4><a name=\"modules-json-and-import-attributes\"></a>Modules: JSON and Import Attributes</h4>\n<p>Modern JavaScript is all about modularity, and in 2025, Modules are getting a little extra love. This includes allowing you to <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import\">import</a> JSON files directly into your scripts. And refining <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import/with\">import attributes</a> (like <code>type:\"json\"</code>) to ensure they work seamlessly, reducing the need for custom parsing logic.</p>\n<h4><a name=\"navigation-api\"></a>Navigation API</h4>\n<p>The <a href=\"https://developer.mozilla.org/docs/Web/API/Navigation_API\">Navigation API</a> is a powerful tool for managing meaningful user state within web applications, making it easier for developers to control, intercept, and modify browser navigation events. This API is designed to enhance the way websites and web apps manage navigation, enabling more control over how users move between pages or states within a single page application.</p>\n<p>The team at <a href=\"https://www.igalia.com/\">Igalia</a> has been hard at work implementing Navigation API in WebKit. You can test it in Safari Technology Preview by <a href=\"https://developer.apple.com/documentation/safari-developer-tools/feature-flag-settings\">turning on the feature flag</a>. Once it’s enabled in Safari Technology Preview by default, the tests in the Navigation API focus area will begin to pass.</p>\n<h4><a name=\"pointer-and-mouse-events\"></a>Pointer and Mouse Events</h4>\n<p>Handling user input with <a href=\"https://developer.mozilla.org/docs/Web/API/Pointer_events\">pointer</a> and <a href=\"https://developer.mozilla.org/docs/Web/API/MouseEvent\">mouse events</a> is essential for building interactive web experiences. While pointer events provide a unified model for all input types (mouse, touch, stylus), there are still some differences in how these events are handled across browsers.</p>\n<p>Last year, Safari made a solid 47% improvement to Pointer and Mouse Events, rising from passing 41% of the WPT automated tests included in Interop 2024 to passing 88% — but we’re not stopping there. Interop 2025 adds even more tests to this focus area, encouraging all browsers to keep making progress towards interoperability.</p>\n<h4><a name=\"remove-mutation-events\"></a>Remove Mutation Events</h4>\n<p>Those old, deprecated <a href=\"https://developer.mozilla.org/docs/Web/API/MutationEvent\">mutation events</a> (like <code>DOMNodeInserted</code>) were handy back in the day but have long since been replaced by the more efficient  <a href=\"https://developer.mozilla.org/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a> API. In 2025, the goal is to fully phase out support for mutation events in favor of the newer, better approach. This will improve performance and reduce potential issues for developers relying on DOM mutation tracking.</p>\n<h4><a name=\"scope\"></a>@scope</h4>\n<p>For developers working with complex CSS rules, <a href=\"https://developer.mozilla.org/docs/Web/CSS/@scope\"><code>@scope</code></a> offers the ability to apply a set of styles within a specific subtree of the DOM. Think of it as a more efficient way to apply styles to certain areas of your page, avoiding global overrides. This year, the focus is on ensuring that <code>@scope</code> works consistently and correctly across all browsers.</p>\n<pre><code><span>&lt;<span>article</span> <span>id</span>=<span>\"my-component\"</span>&gt;</span>\n  <span>&lt;<span>style</span>&gt;</span>\n    @scope {\n      h1 { font-size: 4rem; }\n    }\n  <span>&lt;/<span>style</span>&gt;</span>\n  <span>&lt;<span>h1</span>&gt;</span>This is 4rem text.<span>&lt;/<span>h1</span>&gt;</span>\n<span>&lt;/<span>article</span>&gt;</span>\n\n<span>&lt;<span>h1</span>&gt;</span>This will not be styled by the CSS above.<span>&lt;/<span>h1</span>&gt;</span>\n</code></pre>\n<p>We shipped support for CSS Scoping in <a href=\"https://webkit.org/blog/15063/webkit-features-in-safari-17-4/#:~:text=CSS%20Scoping\">Safari 17.4</a>.</p>\n<h4><a name=\"scrollend-event\"></a>scrollend Event</h4>\n<p>The <a href=\"https://developer.mozilla.org/docs/Web/API/Document/scrollend_event\"><code>scrollend</code></a> event fires when a user finishes scrolling a document or an element. It’s a helpful tool for triggering actions or animations only after a scroll has completed, improving performance.</p>\n<p>This feature is not in Safari yet. We are happy for it to be part of Interop 2025 to ensure both Firefox and Safari implement support.</p>\n<h4><a name=\"storage-access-api\"></a>Storage Access API</h4>\n<p>Keeping user data private is one of our core values. It shapes how we approach the web. We were pleased to <a href=\"https://webkit.org/blog/8124/introducing-storage-access-api/\">introduce the Storage Access API</a> in 2018 to provide a way for embedded cross-site content to authenticate users who are already logged in to their first-party services, while maintaining user privacy by not using third-party cookies.</p>\n<p>Over the last seven years, the Storage Access API has continued to evolve as other browsers implemented support. Interop 2025 brings focus to the latest changes to the web standard — specifically two methods:</p>\n<ul>\n<li>the <code>document.requestStorageAccess()</code> method, which allows iframe content to request storing and reading cookies and other site data</li>\n<li>the  <code>document.hasStorageAccess()</code> method, which checks if such access is granted</li>\n</ul>\n<p>We look forward to implementing these two methods in Safari, and gaining stronger interoperability for Storage Access API across browsers — providing tools for you to create elegant experiences while maintaining user privacy.</p>\n<h4><a name=\"text-decoration\"></a>Text Decoration</h4>\n<p>Text decoration is a great example of the power of the Interop Project. The ability to underline text on the web has existed since HTML 1.1 with the original <a href=\"https://datatracker.ietf.org/doc/html/draft-ietf-iiir-html-00#:~:text=Underline\"><code>&lt;u&gt;</code> element</a>. Today you can use CSS to create underlines, strikethroughs and overlines, and adjust how they look. However, small differences across browsers leave traps that developers can fall into, writing code that you might well expect will work everywhere, but just doesn’t. This focus area will ensure interoperability for:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration\"><code>text-decoration</code></a> shorthand</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style\"><code>text-decoration-style</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color\"><code>text-decoration-color</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line\"><code>text-decoration-line</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-skip-ink\"><code>text-decoration-skip-ink</code></a> </li>\n</ul>\n<h4><a name=\"urlpattern\"></a>URLPattern</h4>\n<p>With the <a href=\"https://developer.mozilla.org/docs/Web/API/URL_Pattern_API\"><code>URLPattern</code></a> API, you can define and match patterns against URLs or URL components. This makes handling URL routing and parsing easier, especially for modern web applications.</p>\n<h4><a name=\"view-transitions\"></a>View Transitions</h4>\n<p><a href=\"https://developer.mozilla.org/docs/Web/API/View_Transition_API\">View Transitions</a> are all about animating the change between different states of a page or the content on the page. It’s great for creating smooth, dynamic user experiences where elements transition between states (like navigating between pages or opening and closing a modal). While View Transitions is a powerful and complex API, Interop 2025 focuses on:</p>\n<ul>\n<li>Same-document View Transitions </li>\n<li>View Transitions Classes</li>\n</ul>\n<p>We shipped support for same-document View transitions in <a href=\"https://webkit.org/blog/15865/webkit-features-in-safari-18-0/#css\">Safari 18.0</a> and support for View Transition classes in <a href=\"https://webkit.org/blog/16301/webkit-features-in-safari-18-2/\">Safari 18.2</a>.</p>\n<h4><a name=\"webassembly\"></a>WebAssembly</h4>\n<p>WebAssembly enables developers to deploy code written in a number of programming languages at near-native speed in the browser. With that in mind, one of the core weaknesses of Wasm today is interaction with the DOM. To that end, Interop 2025 focuses on enhancing:</p>\n<ul>\n<li>integration of Resizable Buffers </li>\n<li>improving JS string built-ins to make working with WebAssembly even smoother and more efficient</li>\n</ul>\n<h4><a name=\"web-compat\"></a>Web Compat</h4>\n<p>Web compatibility refers to whether a website works as intended in a particular browser. The tests in this focus area were selected based on evidence that differences between browsers have caused real-world problems for web developers or end users. This year, the work focuses on web compatibility issues with:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/appearance\"><code>appearance</code></a> </li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/zoom\"><code>zoom</code></a> </li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-position\"><code>list-style-position</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior\"><code>overscroll-behavior</code></a></li>\n<li>Error events when a worker is blocked via CSP</li>\n<li><a href=\"https://developer.mozilla.org/docs/Web/API/PerformanceObserver/observe\"><code>PerformanceObserver</code></a></li>\n<li><a href=\"https://developer.mozilla.org/docs/Web/API/Document/caretPositionFromPoint\"><code>caretPositionFromPoint()</code></a> (available behind a <a href=\"https://developer.apple.com/documentation/safari-developer-tools/feature-flag-settings\">feature flag</a>)</li>\n</ul>\n<h4><a name=\"webrtc\"></a>WebRTC</h4>\n<p><a href=\"https://developer.mozilla.org/docs/Web/API/WebRTC_API\">WebRTC</a> (Web Real-Time Communication) enables direct peer-to-peer communication between web browsers, mobile apps, and devices. It allows for real-time audio, video, and data sharing directly within the browser, without the need for external plugins or software. WebRTC is especially useful for video conferencing tools and live-streaming applications. This year, Interop 2025 focuses on:</p>\n<ul>\n<li><code>RTCRtpScriptTransform</code>, which allows scripts to modify the media stream, and which is commonly used to implement end-to-end encryption in WebRTC applications.</li>\n<li>Make <code>RTCDataChannels</code> transferable to workers to enable off-main-thread processing of data.</li>\n</ul>\n<h4><a name=\"writing-modes\"></a>Writing Modes</h4>\n<p>CSS Writing Modes define the layout direction of text for different languages and designs. At its core, <a href=\"https://developer.mozilla.org/docs/Web/CSS/writing-mode\"><code>writing-mode</code></a> switches the inline direction between horizontal and vertical. Writing modes have been <a href=\"https://caniuse.com/css-writing-mode\">supported in browsers</a> for years, but Interop 2025 includes two newer aspects:</p>\n<ul>\n<li><code>writing-mode: sideways-lr</code> and <code>sideways-rl</code> allow for text that’s normally laid out horizontally to be instead displayed vertically as a graph design effect. Using <code>sideways-rl</code> instead of <code>vertical-rl</code> ensures punctuation and other direction-neutral characters are typeset correctly, while using <code>sideways-lr</code> instead of <code>vertical-lr</code> creates an entirely different result</li>\n<li><a href=\"https://developer.mozilla.org/docs/Web/CSS/overflow-inline\"><code>overflow-inline</code></a> and <a href=\"https://developer.mozilla.org/docs/Web/CSS/overflow-block\"><code>overflow-block</code></a> provide a logical replacement for <code>overflow-x</code> and <code>overflow-y</code> </li>\n</ul>\n<h2><a name=\"investigation-efforts-look-ahead\"></a>Investigation Efforts Look Ahead</h2>\n<p>The Interop Focus Areas improve interoperability through automated testing of specific, high-priority features, but not everything the Interop Project wants to help improve can be tested across browsers using automated tests. When this happens, Investigation projects are launched to see what kind of work can be done to improve interoperability, often including by improving the testing infrastructure and writing more tests. Here are the Interop 2025 Investigations:</p>\n<h4><a name=\"accessibility-testing\"></a>Accessibility Testing</h4>\n<p>Continuing from last year, the Accessibility Testing investigation aims to broaden the testing surface of accessibility features of the web platform. This will ensure that accessibility features are reliable and consistent, helping developers create more inclusive web experiences.</p>\n<h4><a name=\"gaming-testing\"></a>Gaming Testing</h4>\n<p>With excitement about gaming on the web, the Gaming investigation focuses on improving the automated test coverage of the Gamepad API.</p>\n<h4><a name=\"mobile-testing\"></a>Mobile Testing</h4>\n<p>The advent of mobile devices brought the web to billions of people. Continuing from 2024, the Mobile Testing Investigation is finishing the creation the infrastructure necessary so WPT tests can run correctly on mobile devices. This will open up the possibilities for mobile-specific Interop Focus Areas, as well as other testing and interoperability efforts in the future.</p>\n<h4><a name=\"privacy-testing\"></a>Privacy Testing</h4>\n<p>Privacy is more important than ever, but the web doesn’t yet have a good automated test suite for testing privacy protections across browsers. This Privacy investigation will set out to fix that by identifying possibilities for tests of existing web standards, writing tests, and documenting what else is needed.</p>\n<h4><a name=\"webvtt\"></a>WebVTT</h4>\n<p>The WebVTT investigation will address the challenges in ensuring consistent behavior for captions and subtitles across browsers. By improving how WebVTT works with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track\"><code>&lt;track&gt;</code></a> element and enhancing the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\"><code>VTTCue</code></a> API, the team will ensure that captions are reliable, dynamic, and accessible across all web platforms.</p>\n<h3><a name=\"a-more-interoperable-web\"></a>A More Interoperable Web</h3>\n<p>Interop 2025 is all about making the web work better for everyone. Whether it’s ensuring that your CSS behaves the same across browsers or improving privacy with Storage Access API, this year’s focus areas are all about creating a more reliable, efficient, and seamless web. With continued collaboration from the browser community and the contributions of developers around the world, Interop 2025 will help ensure that the web remains a powerful, user-friendly platform for years to come. Get ready for smoother, more consistent experiences ahead!</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"0ad4196d3dce3e1182815fcd19089ead332af344a70350bcbfd0486f9190d1c9","category":"Tech"}