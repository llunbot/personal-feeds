{"title":"New – Self-Service Provisioning of Terraform Open-Source Configurations with AWS Service Catalog","link":"https://aws.amazon.com/blogs/aws/new-self-service-provisioning-of-terraform-open-source-configurations-with-aws-service-catalog/","date":1680564295000,"content":"<p>With <a href=\"https://aws.amazon.com/servicecatalog/\">AWS Service Catalog</a>, you can create, govern, and manage a catalog of infrastructure as code (IaC) templates that are approved for use on AWS. These IaC templates can include everything from virtual machine images, servers, software, and databases to complete multi-tier application architectures. You can control which IaC templates and versions are available, what is configured by each version, and who can access each template based on individual, group, department, or cost center. End users such as engineers, database administrators, and data scientists can then quickly discover and self-service provision approved AWS resources that they need to use to perform their daily job functions.</p> \n<p>When using Service Catalog, the first step is to create <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html#what-is_concepts-product\">products</a> based on your IaC templates. You can then collect products, together with configuration information, in a <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html#what-is_concepts-portfolio\">portfolio</a>.</p> \n<p>Starting today, you can define Service Catalog products and their resources using either <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> or <a href=\"https://www.terraform.io/\">Hashicorp Terraform</a> and choose the tool that better aligns with your processes and expertise. You can now integrate your existing Terraform configurations into Service Catalog to have them part of a centrally approved portfolio of products and share it with the AWS accounts used by your end users. In this way, you can prevent inconsistencies and mitigate the risk of noncompliance.</p> \n<p>When resources are deployed by Service Catalog, you can maintain least privilege access during provisioning and govern tagging on the deployed resources. End users of Service Catalog pick and choose what they need from the list of products and versions they have access to. Then, they can provision products in a single action regardless of the technology (CloudFormation or Terraform) used for the deployment.</p> \n<p>The Service Catalog hub-and-spoke model that enables organizations to govern at scale can now be extended to include Terraform configurations. With the Service Catalog hub and spoke model, you can centrally manage deployments using a management/user account relationship:</p> \n<ul> \n <li>One management account – Used to create Service Catalog products, organize them into portfolios, and share portfolios with user accounts</li> \n <li>Multiple user accounts (up to thousands) – A user account is any AWS account in which the end users of Service Catalog are provisioning resources.</li> \n</ul> \n<p>Let’s see how this works in practice.</p> \n<p><span><strong>Creating an AWS Service Catalog Product Using Terraform<br /> </strong></span>To get started, I install the <a href=\"https://github.com/aws-samples/service-catalog-engine-for-terraform-os/\">Terraform Reference Engine (provided by AWS on GitHub)</a> that configures the code and infrastructure required for the <a href=\"https://developer.hashicorp.com/terraform/intro/terraform-editions\">Terraform open-source</a> engine to work with AWS Service Catalog. I only need to do this once, in the management account for Service Catalog, and the setup takes just minutes. I use the automated installation script:</p> \n<pre><code>./deploy-tre.sh -r us-east-1</code></pre> \n<p>To keep things simple for this post, I create a product deploying a single EC2 instance using <a href=\"https://aws.amazon.com/ec2/graviton/\">AWS Graviton</a> processors and the <a href=\"https://aws.amazon.com/linux/amazon-linux-2023/\">Amazon Linux 2023</a> operating system. Here’s the content of my <code>main.tf</code> file:</p> \n<div> \n <pre><code>terraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 4.16\"\n    }\n  }\n\n  required_version = \"&gt;= 1.2.0\"\n}\n\nprovider \"aws\" {\n  region  = \"us-east-1\"\n}\n\nresource \"aws_instance\" \"app_server\" {\n  ami           = \"ami-00c39f71452c08778\"\n  instance_type = \"t4g.large\"\n\n  tags = {\n    Name = \"GravitonServerWithAmazonLinux2023\"\n  }\n}</code></pre> \n</div> \n<p>I sign in to the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a> in the management account for Service Catalog. In the <a href=\"https://console.aws.amazon.com/servicecatalog\">Service Catalog console</a>, I choose <strong>Product list</strong> in the <strong>Administration</strong> section of the navigation pane. There, I choose <strong>Create product</strong>.</p> \n<p>In <strong>Product details</strong>, I select <strong>Terraform open source</strong> as <strong>Product type</strong>. I enter a product name and description and the name of the owner.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/26/service-catalog-terraform-product-details.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/26/service-catalog-terraform-product-details-1024x933.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"933\" /></a></p> \n<p>In the <strong>Version details</strong>, I choose to <strong>Upload a template file</strong> (using a tar.gz archive). Optionally, I can specify the template using an S3 URL or an external code repository (on <a href=\"https://github.com/\">GitHub</a>, <a href=\"https://docs.github.com/en/enterprise-server@3.8/admin/all-releases\">GitHub Enterprise Server</a>, or <a href=\"https://bitbucket.org/product/\">Bitbucket</a>) using an <a href=\"https://aws.amazon.com/codestar/\">AWS CodeStar</a> provider.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/26/service-catalog-terraform-version-details.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/26/service-catalog-terraform-version-details-1024x916.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"916\" /></a></p> \n<p>I enter support details and custom tags. Note that tags can be used to categorize your resources and also to <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html\">check permissions to create a resource</a>. Then, I complete the creation of the product.</p> \n<p><span><strong>Adding an AWS Service Catalog Product Using Terraform to a Portfolio</strong></span><br /> Now that the Terraform product is ready, I add it to my portfolio. A portfolio can include both Terraform and CloudFormation products. I choose <strong>Portfolios</strong> from the <strong>Administrator</strong> section of the navigation pane. There, I search for my portfolio by name and open it. I choose <strong>Add product to portfolio</strong>. I search for the Terraform product by name and select it.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/26/service-catalog-terraform-add-product.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/26/service-catalog-terraform-add-product-1024x364.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"364\" /></a></p> \n<p>Terraform products require a <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/adminguide/constraints-launch.html\">launch constraint</a>. The launch constraint specifies the name of an <a href=\"https://aws.amazon.com/iam/\">AWS Identity and Access Management (IAM)</a> role that is used to deploy the product. I need to separately ensure that this role is created in every account with which the product is shared.</p> \n<p>The launch role is assumed by the Terraform open-source engine in the management account when an end user launches, updates, or terminates a product. The launch role also contains permissions to describe, create, and update a resource group for the provisioned product and tag the product resources. In this way, Service Catalog keeps the resource group up-to-date and tags the resources associated with the product.</p> \n<p>The launch role enables least privilege access for end users. With this feature, end users don’t need permission to directly provision the product’s underlying resources because your Terraform open-source engine assumes the launch role to provision those resources, such as an approved configuration of an <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instance.</p> \n<p>In the <strong>Launch constraint</strong> section, I choose <strong>Enter role name</strong> to use a role I created before for this product:</p> \n<ul> \n <li>The trust relationship of the role defines the entities that can assume the role. For this role, the trust relationship includes Service Catalog and the management account that contains the Terraform Reference Engine.</li> \n <li>For permissions, the role allows to provision, update, and terminate the resources required by my product and to manage resource groups and tags on those resources.</li> \n</ul> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/30/service-catalog-terraform-launch-contraint-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/30/service-catalog-terraform-launch-contraint-1-1024x675.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"675\" /></a></p> \n<p>I complete the addition of the product to my portfolio. Now the product is available to the end users who have access to this portfolio.</p> \n<p><span><strong>Launching an AWS Service Catalog Product Using Terraform<br /> </strong></span>End users see the list of products and versions they have access to and can deploy them in a single action. If you already use Service Catalog, the experience is the same as with CloudFormation products.</p> \n<p>I sign in to the AWS Console in the user account for Service Catalog. The portfolio I used before has been shared by the management account with this user account. In the <a href=\"https://console.aws.amazon.com/servicecatalog\">Service Catalog console</a>, I choose <strong>Products</strong> from the <strong>Provisioning</strong> group in the navigation pane. I search for the product by name and choose <strong>Launch product</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/26/service-catalog-terraform-launch-product-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/26/service-catalog-terraform-launch-product-1-1024x253.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"253\" /></a></p> \n<p>I let Service Catalog generate a unique name for the provisioned product and select the product version to deploy. Then, I launch the product.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/26/service-catalog-terraform-launch-product-version.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/26/service-catalog-terraform-launch-product-version-1010x1024.png\" alt=\"Console screenshot.\" width=\"1010\" height=\"1024\" /></a></p> \n<p>After a few minutes, the product has been deployed and is available. The deployment has been managed by the Terraform Reference Engine.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/27/service-catalog-terraform-provisioned-product-available-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/27/service-catalog-terraform-provisioned-product-available-1-1024x630.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"630\" /></a></p> \n<p>In the <strong>Associated tags</strong> tab, I see that Service Catalog automatically added information on the portfolio and the product.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/27/service-catalog-terraform-provisioned-product-tags-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/27/service-catalog-terraform-provisioned-product-tags-1-1024x327.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"327\" /></a></p> \n<p>In the <strong>Resources</strong> tab, I see the resources created by the provisioned product. As expected, it’s an EC2 instance, and I can follow the link to open the <a href=\"https://console.aws.amazon.com/ec2\">Amazon EC2 console</a> and get more information.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/27/service-catalog-terraform-provisioned-product-resources-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/03/27/service-catalog-terraform-provisioned-product-resources-1-1024x225.png\" alt=\"Console screenshot.\" width=\"1024\" height=\"225\" /></a></p> \n<p>End users such as engineers, database administrators, and data scientists can continue to use Service Catalog and launch the products they need without having to consider if they are provisioned using Terraform or CloudFormation.</p> \n<p><span><strong>Availability and Pricing</strong></span><br /> <a href=\"https://aws.amazon.com/servicecatalog/\">AWS Service Catalog</a> support for <a href=\"https://www.terraform.io/\">Terraform</a> open-source configurations is available today in all <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\">AWS Regions</a> where it is offered. There is no change in pricing when using Terraform. With Service Catalog, you pay for the API calls you make to the service, and you can start for free with the free tier. You also pay for the resources used and created by the Terraform Reference Engine. For more information, see <a href=\"https://aws.amazon.com/servicecatalog/pricing/\">Service Catalog Pricing</a>.</p> \n<p><a href=\"https://console.aws.amazon.com/servicecatalog/home?#products/new\"><strong>Enable self-service provisioning at scale for your Terraform open-source configurations.</strong></a></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"b316fc0a9c3a2895deae46a57115e7565bd9d368ac104cab00a39da53f7bf68a","category":"Tech"}