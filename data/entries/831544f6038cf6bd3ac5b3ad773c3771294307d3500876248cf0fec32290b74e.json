{"title":"Centrally managing root access for customers using AWS Organizations","link":"https://aws.amazon.com/blogs/aws/centrally-managing-root-access-for-customers-using-aws-organizations/","date":1731689804000,"content":"<p><a href=\"https://aws.amazon.com/iam/\">AWS Identity and Access Management (IAM)</a> is launching a new capability allowing security teams to <strong>centrally manage root access</strong> for member accounts in <a href=\"https://aws.amazon.com/organizations/\">AWS Organizations</a>. You can now easily manage root credentials and perform highly privileged actions.</p> \n<p><span><strong>Managing root user credentials at scale<br /> </strong></span>For a long time, <a href=\"https://aws.amazon.com/\">Amazon Web Services (AWS)</a> accounts were provisioned with highly privileged root user credentials, which had unrestricted access to the account. This root access, while powerful, also posed significant security risks. Each AWS account’s root user had to be secured by adding layers of protection like multi-factor authentication (MFA). Security teams were required to manage and secure these root credentials manually. The process involved rotating credentials periodically, storing them securely, and making sure that the credentials complied with security policies.</p> \n<p>As our customers expanded their AWS environments, this manual approach became cumbersome and prone to error. For example, large enterprises operating hundreds or thousands of member accounts struggled to secure root access consistently across all accounts. The manual intervention not only added operational overhead but also created a lag in account provisioning, preventing full automation and increasing security risks. Root access, if not properly secured, could lead to account takeovers and unauthorized access to sensitive resources.</p> \n<p>Furthermore, whenever specific root actions such as unlocking an <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> <a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/change-vpc-endpoint-s3-bucket-policy/\">bucket policy</a> or an <a href=\"https://aws.amazon.com/sqs/\">Amazon Simple Queue Service (Amazon SQS)</a> <a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/sqs-queue-access-issues-deny-policy\">resource policy</a> were required, security teams had to retrieve and use root credentials, which only increased the attack surface. Even with rigorous monitoring and strong security policies, maintaining long-term root credentials opened doors to potential mismanagement, compliance risks, and manual errors.</p> \n<p>Security teams began seeking a more automated, scalable solution. They needed a way to not only centralize the management of root credentials but also programmatically manage root access without needing long-term credentials in the first place.</p> \n<p><span><strong>Centrally manage root access<br /> </strong></span>With the new ability to centrally manage root access, we address the longstanding challenge of managing root credentials across multiple accounts. This new capability introduces two essential capabilities: the <strong>central management of root credentials</strong> and <strong>root sessions</strong>. Together, they offer security teams a secure, scalable, and compliant way to manage root access across AWS Organizations member accounts.</p> \n<p>Let’s first discuss the <strong>central</strong> <strong>management of root credentials</strong>. With this capability, you can now centrally manage and secure privileged root credentials across all accounts in AWS Organizations. Root credentials management allows you to:</p> \n<ul> \n <li><strong>Remove long-term root credentials </strong>– Security teams can now programmatically remove root user credentials from member accounts, confirming that no long-term privileged credentials are left vulnerable to misuse.</li> \n <li><strong>Prevent credential recovery </strong>– It not only removes the credentials but also prevents their recovery, safeguarding against any unintended or unauthorized root access in the future.</li> \n <li><strong>Provision secure-by-default accounts </strong>– Because you can now create member accounts without root credentials from the start, you no longer need to apply additional security measures like MFA after account provisioning. Accounts are secure by default, which drastically reduces security risks associated with long-term root access and helps simplify the entire provisioning process.</li> \n <li><strong>Help to stay compliant </strong>– Root credentials management allows security teams to demonstrate compliance by centrally discovering and monitoring the status of root credentials across all member accounts. This automated visibility confirms that no long-term root credentials exist, making it easier to meet security policies and regulatory requirements.</li> \n</ul> \n<p>But how can we make sure it remains possible to perform selected root actions on the accounts? This is the second capability we launch today: <strong>root sessions</strong>. It offers a secure alternative to maintaining long-term root access. Instead of manually accessing root credentials whenever privileged actions are required, security teams can now gain short-term, task-scoped root access to member accounts. This capability makes sure that actions such as unlocking S3 bucket policies or SQS queue policies can be performed securely without the need for long-term root credentials.</p> \n<p>Root sessions key benefits include:</p> \n<ul> \n <li><strong>Task-scoped root access </strong>– AWS enables short-term root access for specific actions, adhering to the best practices of least privilege. This limits the scope of what can be done and minimizes the duration of access, reducing potential risks.</li> \n <li><strong>Centralized management </strong>– You can now perform privileged root actions from a central account without needing to log in to each member account individually. This streamlines the process and reduces the operational burden on security teams, allowing them to focus on higher-level tasks.</li> \n <li><strong>Alignment with AWS best practices </strong>– By using short-term credentials, organizations align themselves with AWS security best practices, which emphasize the principle of least privilege and the use of short-term, temporary access where possible.</li> \n</ul> \n<p>This new capability does not grant full root access. It provides temporary credentials for performing one of these five specific actions. The first three actions are possible with central management of root user credentials. The last two come when enabling root sessions.</p> \n<ul> \n <li><strong>Auditing root user credentials –</strong> Read-only access to review root user information</li> \n <li><strong>Re-enabling account recovery –</strong> Reactivating account recovery without root credentials</li> \n <li><strong>Deleting root user credentials –</strong> Removing console passwords, access keys, signing certificates, and MFA devices</li> \n <li><strong>Unlocking an S3 bucket policy –</strong> Editing or deleting an S3 bucket policy that denies all principals</li> \n <li><strong>Unlocking an SQS queue policy –</strong> Editing or deleting an Amazon SQS resource policy that denies all principals</li> \n</ul> \n<p><span><strong>How to obtain root credentials on a member account<br /> </strong></span>In this demo, I show you how to prepare your management account, create a member account without root credentials, and obtain temporary root credentials to make one of the five authorized API call on the member account. I assume you have an organization already created.</p> \n<p>First, I create a member account.</p> \n<pre><code>aws organizations create-account    \\\n     --email stormacq+rootaccountdemo@amazon.com \\\n     --account-name 'Root User Demo account'\n{\n    \"CreateAccountStatus\": {\n        \"Id\": \"car-695abd4ee1ca4b85a34e5dcdcd1b944f\",\n        \"AccountName\": \"Root User Demo account\",\n        \"State\": \"IN_PROGRESS\",\n        \"RequestedTimestamp\": \"2024-09-04T20:04:09.960000+00:00\"\n    }\n}</code></pre> \n<p>Then, I enable the two new capabilities on my management account. Don’t worry, these commands don’t alter the behavior of the accounts in any way other than enabling use of the new capability.</p> \n<pre><code>➜  aws organizations enable-aws-service-access \\\n        --service-principal iam.amazonaws.com\n\n➜  aws iam enable-organizations-root-credentials-management\n{\n    \"OrganizationId\": \"o-rlrup7z3ao\",\n    \"EnabledFeatures\": [\n        \"RootCredentialsManagement\"\n    ]\n}\n\n➜  aws iam enable-organizations-root-sessions\n{\n    \"OrganizationId\": \"o-rlrup7z3ao\",\n    \"EnabledFeatures\": [\n        \"RootSessions\",\n        \"RootCredentialsManagement\"\n    ]\n}</code></pre> \n<p>Alternatively, I can also use the console on the management account. On the<strong> IAM page</strong>, under <strong>Access management</strong>, I select <strong>Account settings</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/12/Screenshot-2024-11-11-at-11.31.09.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/11/12/Screenshot-2024-11-11-at-11.31.09.png\" alt=\"Root Access Management\" width=\"800\" height=\"195\" /></a></p> \n<p>Now, I’m ready to make requests to obtain temporary root credentials. I have to pass one of the five managed IAM policies to scope down the credentials to a specific action.</p> \n<pre><code>➜  aws sts assume-root    \\\n       --region us-east-1 \\\n       --target-principal &lt;my member account id&gt; \\\n       --task-policy-arn arn=arn:aws:iam::aws:policy/root-task/S3UnlockBucketPolicy \n\n{\n    \"Credentials\": {\n        \"AccessKeyId\": \"AS....XIG\",\n        \"SecretAccessKey\": \"ao...QxG\",\n        \"SessionToken\": \"IQ...SS\",\n        \"Expiration\": \"2024-09-23T17:44:50+00:00\"\n    }\n}</code></pre> \n<p>Once I obtain the access key ID, the secret access key, and the session token, I use them as usual with the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a> or an <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a>.</p> \n<p>For example, I can pass these three values as environment variables.</p> \n<pre><code>$ export AWS_ACCESS_KEY_ID=ASIA356SJWJITG32xxx\n$ export AWS_SECRET_ACCESS_KEY=JFZzOAWWLocoq2of5Exxx\n$ export AWS_SESSION_TOKEN=IQoJb3JpZ2luX2VjEMb//////////wEaCXVxxxx\n</code></pre> \n<p>Now that I received the temporary credentials, I can make a restricted API call as root on the member account. First, I verify I now have root credentials. The <code>Arn</code> field confirms I’m working with the root user.</p> \n<pre><code>\n# Call get Caller Identity and observe I'm root in the member account\n$ aws sts get-caller-identity\n{\n   \"UserId\": \"012345678901\",\n   \"Account\": \"012345678901\",\n   \"Arn\": \"arn:aws:iam::012345678901:root\"\n}\n</code></pre> \n<p>Then, I use the <code>delete-bucket-policy</code> from S3 to remove an incorrect policy that has been applied to a bucket. The invalid policy removed all bucket access for everybody. Removing such policy requires root credentials.</p> \n<p><code>aws s3api delete-bucket-policy --bucket my_bucket_with_incorrect_policy</code></p> \n<p>When there is no output, it means the operation is successful. I can now apply a correct access policy to this bucket.</p> \n<p>Credentials are valid only for 15 minutes. <a href=\"https://gist.github.com/sebsto/6f7c9eaf500ac11756a86babde75ffc0\">I wrote a short shell script to automate the process</a> of getting the credentials as JSON, exporting the correct environment variables, and issuing the command I want to run as root.</p> \n<p><span><strong>Availability</strong><br /> </span>Central management of root access is available at no additional cost in all <a href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#region\">AWS Regions</a> except AWS GovCloud (US) and AWS China Regions, where there is no root user. Root sessions are available everywhere.</p> \n<p>You can start using it through the IAM console, AWS CLI or AWS SDK. For more information, visit <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user-access-management\">AWS account root user</a> in our documentation and follow best practices for securing your AWS accounts.</p> \n<p><a href=\"https://twitter.com/sebsto\">-- seb</a></p>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"831544f6038cf6bd3ac5b3ad773c3771294307d3500876248cf0fec32290b74e","category":"Tech"}