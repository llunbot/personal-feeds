{"title":"สรุปจากการอ่านหนังสือ Tidy First","link":"https://www.somkiat.cc/note-from-tidy-first-book/","date":1702801838000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2023/12/review-tidy-first-book-150x150.jpg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2023/12/review-tidy-first-book-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2023/12/review-tidy-first-book-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/12/review-tidy-first-book.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/12/review-tidy-first-book.jpg\" width=\"718\" height=\"432\" /></a></figure>\n\n\n\n<p>ช่วงวันหยุดทำการอ่านหนังสือ <strong><a href=\"https://www.amazon.com/Tidy-First-Personal-Exercise-Empirical/dp/1098151240\" target=\"_blank\">Tidy First ? (A personal Exercise in Empirical Software Design)</a></strong><br />ก่อนหน้านี้ติดตามอ่านจาก <a href=\"https://tidyfirst.substack.com/\" target=\"_blank\">SubStack::Tidy First ของคุณ Kent Beck</a><br />ในหนังสือเล่มนี้ทำการอธิบายถึงแนวปฏิบัติในการพัฒนา software ที่ดี<br />นั่นคือการลด code ที่ไม่ดี หรือ ผูกมัดกันมาก ๆ<br />ด้วยการจัดการและปรับปรุง code ให้ดียิ่งขึ้น (Refactoring หรือ Tidying) นั่นเอง<br />เพื่อช่วยทำให้ code อ่านง่ายขึ้น<br />ง่ายต่อการแก้ไข และ ลดผลกระทบต่างการเปลี่ยนแปลงลงไป</p>\n\n\n\n<span></span>\n\n\n\n<p>แทนที่จะทำการปรับปรุง code จำนวนมาก ๆ ในครั้งเดียว<br />ก็ให้ทำการปรับปรุง code บ่อย ๆ เล็ก ๆ ไปเรื่อย ๆ<br />ตามปัญหาที่พบเจอ<br />มันคือแนวทางการแบ่งปัญหาใหญ่ ออกมาเป็นปัญหาเล็ก ๆ<br />ซึ่งในหนังสือเล่มนี้จะมีอยู่ <strong>33 บท</strong> !!<br />เพื่อแนะนำการปรับปรุง code ของระบบให้ดีขึ้น</p>\n\n\n\n<p><strong>โดยแนวทางของหนังสือจะทำตามแนวคิด Software design ที่ดี ดังนี้</strong></p>\n\n\n\n<ul>\n<li>Coupling</li>\n\n\n\n<li>Cohesion</li>\n\n\n\n<li>Discounted cash flows</li>\n\n\n\n<li>Optionality</li>\n</ul>\n\n\n\n<p>เนื่องจาก cost ของ software นั้นมาจาก cost ของการเปลี่ยนแปลง<br />cost ของการเปลี่ยนแปลง มาจาก cost ของการเปลี่ยนแปลงขนาดใหญ่<br />cost ของการเปลี่ยนแปลงขนาดใหญ่ มาจาก coupling ของระบบที่สูง<br />ดังนั้น cost ของ software จะมาจาก cost ของ coupling นั่นเอง<br />จึงทำให้เรื่องของการ Decoupling/No coupling หรือ Loosely coupling จึงเป็นเรื่องที่สำคัญ</p>\n\n\n\n<p>การจัดการเมื่อพบหรือเจอปัญหา จึงเป็นสิ่งที่สำคัญ<br />ดังนั้นคำว่า later หรือ เดี๋ยวค่อยกลับมาทำ จึงเป็นเรื่องต้องห้าม<br />เจอปัญหาแล้วต้องทำการแก้ไขทันที<br />แต่ว่า เรารู้และเข้าใจรูปแบบของปัญหาเหล่านั้นหรือไม่<br />รวมทั้งแนวทาง และ ขั้นตอนการจัดการ<br />ในหนังสือเล่มนี้ทำการอธิบายไว้ได้อย่างน่าสนใจ</p>\n\n\n\n<p>ลองหามาอ่านกันดูครับ</p>\n\n\n\n<p><strong>ปิดท้ายด้วยความหมายของคำว่า Tidy First</strong></p>\n\n\n\n<ul>\n<li>ทำการจัดการ code ก่อนที่จะแก้ไข หรือ เพิ่ม</li>\n\n\n\n<li>การจัดการต้องมีประสิทธิภาพ และ ปลอดภัย</li>\n\n\n\n<li>การจัดการที่ดี ต้องรู้ว่าจะหยุดทำเมื่อไร ไม่ใช่ทำไปเรื่อย ๆ เพราะว่าทุกอย่างมีค่าใช้จ่ายเสมอ</li>\n\n\n\n<li>การเปลี่ยนแปลงทีละเล็กละน้อย</li>\n\n\n\n<li>ต้องเข้าใจพื้นฐานของ Software design ที่ดี เพื่อช่วยให้เกิดการจัดการที่ดีอย่างสม่ำเสมอ</li>\n</ul>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2023/12/software-engineering-coupling-and-cohesion.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2023/12/software-engineering-coupling-and-cohesion.png\" width=\"518\" height=\"259\" /></a></figure>\n\n\n\n<p><strong><em>ขอให้สนุกกับการอ่าน และ coding ครับ</em></strong></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"5c02178484da45deaa3cc299aa7f7b8e7411b3195d8125b2c1641d117535e30e","category":"Thai"}