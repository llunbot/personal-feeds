{"title":"The Things Users Would Appreciate In Mobile Apps","link":"https://smashingmagazine.com/2024/04/things-users-would-appreciate-mobile-apps/","date":1712318400000,"content":"<p>Remember the “mobile first” mantra? The idea was born out of the early days of responsive web design. Rather than design and build for the “desktop” up front, a “mobile-first” approach treats small screens as first-class citizens. There’s a reduced amount of real estate, certainly less than the number of pixels we get from the viewport of Firefox expanded fullscreen on a 27-inch studio monitor.</p>\n<p>The constraint is a challenge to make sure that <strong>whatever is sent to mobile devices is directly relevant to what users should need</strong>; nothing more, nothing less. Anything more additive to the UI can be reserved for wider screens where we’re allowed to stretch out and make more liberal use of space.</p>\n<div>\n<pre><code>/* A sample CSS snippet for a responsive main content */\n\n/* Base Styles */\n.main-content {\n  container: main / inline-size;\n}\n\n.gallery {\n  display: grid;\n  gap: 1rem;\n}\n\n/* Container is wider than or equal to 700px */\n@container main (width &gt;= 700px) {\n  .gallery {\n    grid-template-columns: 1fr 1fr;\n  }\n}\n\n/* Container is wider than or equal to 1200px */\n@container main (width &gt;= 1200px) {\n  .gallery {\n    grid-template-columns: repeat(4, 1fr);\n  }\n}\n</code></pre>\n</div>\n\n<p>Now, I’m not here to admonish anyone who isn’t using a mobile-first approach when designing and building web interfaces. If anything, the last five or so years <a href=\"https://www.youtube.com/watch?v=aHUtMbJw8iA\">have shown us just how unpredictable of a medium the web is</a>, including what sort of device is displaying our work all the way down to a user’s individual preferences.</p>\n<p>Even so, there are things that any designer and developer should consider when working with mobile interfaces. Now that we’re nearly 15 years into responsive web design as a practice and craft, users are beginning to form opinions about what to expect when trying to do certain things in a mobile interface. I know that I have expectations. I am sure you have them as well.</p>\n<p>I’ve been keeping track of the mobile interfaces I use and have started finding common patterns that <em>feel</em> mobile in nature but are more desktop-focused in practice. While keeping track of the mobile interfaces I use, I’ve found common patterns that are unsuitable for small screens and thus could use some updates. Here are some reworked features that are worth considering for mobile interfaces.</p>\nEconomically-Sized Forms\n<p>There are myriad problems that come up while completing mobile forms — e.g., small tap targets, lack of offline support, and incorrect virtual keyboards, to name a few — but it’s how a mobile form interacts with the device’s virtual keyboard that draws my ire the most. </p>\n<p>The keyboard obscures the form more times than not. You tap a form field, and the keyboard slides up, and — <em>poof!</em> — it’s as though half the form is chopped out of view. If you’re thinking, <em>Meh, all that means is a little extra scrolling</em>, consider that scrolling isn’t always a choice. If the page is a short one with only the form on it, it’s highly possible what you see on the screen is what you get.</p>\n<p><img src=\"https://files.smashing.media/articles/things-users-would-appreciate-mobile-apps/1-mobile-form-iphone-text-field.png\" /></p>\n<p>A more delightful user experience for mobile forms is to take a “less is more” approach. <strong>Display one form field at a time for an economical layout</strong> that allows the field and virtual keyboard to co-exist in harmony without any visual obstructions. Focusing the design on the top half of the viewport with room for navigation controls and microcopy creates a seamless flow from one form input to the next.</p>\n<p><img src=\"https://files.smashing.media/articles/things-users-would-appreciate-mobile-apps/2-whole-page-entering-email-details.jpg\" /></p>\nMore Room For Searching\n<p>Search presents a dichotomy: It is incredibly useful, yet is treated as an afterthought, likely tucked in the upper-right corner of a global header, out of view and often further buried by hiding the form input until the user clicks some icon, typically a magnifying glass. (It’s ironic we minimize the UI with a magnifying glass, isn’t it?)</p>\n<p><img src=\"https://files.smashing.media/articles/things-users-would-appreciate-mobile-apps/3-mobile-header-site.jpg\" /></p>\n<p>The problem with burying search in a mobile context is two-fold:</p>\n<ol>\n<li>The feature is less apparent, and</li>\n<li>The space to enter a search query, add any filters, and display results is minimized.</li>\n</ol>\n<p>That may very well be acceptable if the site has only a handful of pages to navigate. However, if the search allows a user to surface relevant content and freely move about an app, then you’re going to want to give it higher prominence.</p>\n<p>Any service-oriented mobile app can improve user experience by providing a search box that’s immediately recognizable and with enough breathing room for tapping a virtual keyboard.</p>\n<p><img src=\"https://files.smashing.media/articles/things-users-would-appreciate-mobile-apps/4-smashing-magazine-homepage-mobile.jpg\" /></p>\n<p>Some sites even have search forms that occupy the full screen without surrounding components, offering a “distraction-free” interface for typing queries.</p>\n<p><img src=\"https://files.smashing.media/articles/things-users-would-appreciate-mobile-apps/5-mobile-header-site-search-feature-expanded.jpg\" /></p>\nNo Drop-Downs, If Possible\n<p>The <code>&lt;select&gt;</code> element can negatively impact mobile UX in two glaring ways:</p>\n<ol>\n<li>An expanding <code>&lt;select&gt;</code> with so many options that it produces excessive scrolling.</li>\n<li>Scrolling excessively, particularly on long pages, produces an awkward situation where the page continues scrolling after already scrolling through the list of <code>&lt;option&gt;</code>s.</li>\n</ol>\n<p>I’ll come across these situations, stare at my phone, and ask:</p>\n<blockquote>Do I really need a <code>&lt;select&gt;</code> populated with one hundred years to submit my birthdate?</blockquote>\n\n<p>Seems like an awful lot of trouble to sort through one hundred years compared to manually typing in a four-digit value myself.</p>\n<p><img src=\"https://files.smashing.media/articles/things-users-would-appreciate-mobile-apps/6-mockup-mobile-form.jpg\" /></p>\n<p>A better pattern for making list selections, if absolutely needed, in a space-constrained mobile layout could be something closer to the ones used by iOS and Android devices by default. Sure, there’s scrolling involved, but within a confined space that leaves the rest of the UI alone.</p>\n<p><img src=\"https://files.smashing.media/articles/things-users-would-appreciate-mobile-apps/7-datepicker.jpg\" /></p>\nA Restrained Overview\n<p>A dashboard overview in a mobile app is something that displays key data to users right off the bat, surfacing common information that the user would otherwise have to seek out. There are great use cases for dashboards, many of which you likely interact with daily, like your banking app, a project management system, or even a page showing today’s baseball scores. The WordPress dashboard is a perfect example, showing site activity, security checks, traffic, and more.</p>\n<p><img src=\"https://files.smashing.media/articles/things-users-would-appreciate-mobile-apps/8-wordpress-administrative-dashboard.png\" /></p>\n<p>Dashboards are just fine. But the sensitive information they might contain is what worries me when I’m viewing a dashboard on a mobile device.</p>\n<p>Let’s say I’m having dinner with friends at a restaurant. We split the check. To pay my fair share, I take out my phone and log into my banking app, and… the home screen displays my bank balance in big, bold numbers to the friends sitting right next to me, one of whom is the gossipiest of the bunch. There goes a bit of my pride.</p>\n<p>That’s an extreme illustration because not all apps convey that level of sensitive information. But many do, and the care we put into protecting a user’s information from peeping eyeballs is only becoming more important as entire industries, like health care and education, lean more heavily into online experiences.</p>\n<p><strong>My advice</strong>: <em>Hide sensitive information until prompted by the user to display it.</em></p>\n<p>It’s generally a good practice to obscure sensitive information and have a liberal definition of what constitutes sensitive information.</p>\n<p><img src=\"https://files.smashing.media/articles/things-users-would-appreciate-mobile-apps/9-bank-app-mockup.jpg\" /></p>\nShortcuts Provided In The Login Flow\n<p>There’s a natural order to things, particularly when logging into a web app. We log in, see a welcome message, and are taken to a dashboard before we tap on some item that triggers some sort of action to perform. In other words, it takes a few steps and walking through a couple of doors to get to accomplish what we came to do.</p>\n<p>What if we put actions earlier in the login flow? As in, they are displayed right along with the login form. This is what we call a <strong>shortcut</strong>.</p>\n<p>Let’s take the same restaurant example from earlier, where I’m back at dinner and ready to pay. This time, however, I will open a different bank app. This one has shortcuts next to the login form, one of which is a “Scan to Pay” option. I tap it, log in, and am taken straight to the scanning feature that opens the camera on my device, completely bypassing any superfluous welcome messaging or dashboard. This spares the user both time and effort (and prevents sensitive information from leaking into view to boot).</p>\n<p><img src=\"https://files.smashing.media/articles/things-users-would-appreciate-mobile-apps/10-mobile-ux-bank-mockup.jpg\" /></p>\n<p>Mobile operating systems also provide options for shortcuts when long-pressing an app’s icon on the home screen, which also can be used to an app’s advantage.</p>\n<p><img src=\"https://files.smashing.media/articles/things-users-would-appreciate-mobile-apps/11-whatsapp-icon-open-contextual-menu.png\" /></p>\nThe Right Keyboard Configuration\n<p>All modern mobile operating systems are smart enough to tailor the virtual keyboard for specialized form inputs. A form field markup with <code>type=\"email\"</code>, for instance, triggers an onscreen keyboard that shows the “<code>@</code>\" key in the primary view, preventing users from having to tap <code>Shift</code> to reveal it in a subsequent view. The same is true with URLs, where a “<code>.com</code>” key surfaces for inputs with <code>type=\"url\"</code>.</p>\n<p><img src=\"https://files.smashing.media/articles/things-users-would-appreciate-mobile-apps/12-onscreen-keyboard-email-field.jpg\" /></p>\n<p>The right keyboard saves the effort of hunting down relevant special characters and numbers for specific fields. All we need to do is to use the right attributes and semantics for those fields, like, <code>type=email</code>, <code>type=url</code>, <code>type=tel</code>, and such.</p>\n<div>\n<pre><code>&lt;!-- Input Types for Virtual Keyboards --&gt;\n&lt;input type=\"text\"&gt;   &lt;!-- default --&gt;\n&lt;input type=\"tel\"&gt;    &lt;!-- numeric keyboard --&gt;\n&lt;input type=\"number\"&gt; &lt;!-- numeric keyboard --&gt;\n&lt;input type=\"email\"&gt;  &lt;!-- displays @ key --&gt;\n&lt;input type=\"url\"&gt;    &lt;!-- displays .com key --&gt;\n&lt;input type=\"search\"&gt; &lt;!-- displays search button --&gt;\n&lt;input type=\"date\"&gt;   &lt;!-- displays date picker or wheel controls --&gt;\n</code></pre>\n</div>\n\n\n\nBigger Fonts With Higher Contrast\n<p>This may have been one of the first things that came to your mind when reading the article title. That’s because small text is prevalent in mobile interfaces. It’s not wrong to scale text in response to smaller screens, but where you set the lower end of the range may be too small for many users, even those with great vision.</p>\n<p>The default size of body text is <code>16px</code> on the web. That’s thanks to user agent styling that’s consistent across all browsers, including those on mobile platforms. But what exactly is the ideal size for mobile? The answer is not entirely clear. For example, Apple’s <a href=\"https://developer.apple.com/design/human-interface-guidelines/typography\">Human Interface Guidelines</a> do not specify exact font sizes but rather focus on the use of Dynamic Text that adjusts the size of content to the user’s device-level preferences. Google’s Material Design guidelines are more concrete but are based on three scales: small, medium, and large. The following table shows the minimum font sizes for each scale based on the system’s <a href=\"https://m3.material.io/styles/typography/type-scale-tokens\">typography tokens</a>.</p>\n<table>\n    <thead>\n        <tr>\n            <th>Scale</th>\n            <th>Body Text (pt)</th>\n      <th>Body Text (px)</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Small</td>\n            <td><code>12pt</code></td>\n      <td><code>16px</code></td>\n        </tr>\n        <tr>\n            <td>Medium</td>\n            <td><code>14pt</code></td>\n      <td><code>18.66px</code></td>\n        </tr>\n        <tr>\n            <td>Large</td>\n            <td><code>16pt</code></td>\n      <td><code>21.33px</code></td>\n        </tr>\n    </tbody>\n</table>\n\n<p>The real standard we ought to be looking at is the current WCAG 2.2, and here’s <a href=\"https://www.w3.org/TR/WCAG22/#dfn-large-scale\">what it says</a> on the topic:</p>\n<blockquote>“When using text without specifying the font size, the smallest font size used on major browsers for unspecified text would be a reasonable size to assume for the font.”</blockquote>\n\n<p>So, bottom line is that the bottom end of a font’s scale matches the web’s default <code>16px</code> if we accept Android’s “Small” defaults. But even then, there are caveats because WCAG is more focused on <strong>contrast</strong> than <strong>size</strong>. Like, if the font in use is thin by default, WCAG suggests bumping up the font size to produce a higher contrast ratio between the text and the background it sits against.</p>\n<p>There are many, many articles that can give you summaries of various typographical guidelines and how to adhere to them for optimal font sizing. The best advice I’ve seen, however, is Eric Bailey rallying us to <a href=\"https://css-tricks.com/reader-mode-the-button-to-beat/\">“beat the “Reader Mode” button</a>. Eric is talking more specifically about preventing clutter in an interface, but the same holds for font sizing. If the text is tiny or thin, I’m going to bash that button on your site with no hesitation.</p>\n<p><img src=\"https://files.smashing.media/articles/things-users-would-appreciate-mobile-apps/13-kindle-reading-app-mobile-device.png\" /></p>\nWrapping Up\n<p>Everything we’ve covered here in this article is personal irritations I feel when interacting with different mobile interfaces. I’m sure you have your own set of annoyances, and if you do, I’d love to read them in the comments if you’re willing to share. And someone else is likely to have even more examples.</p>\n<p>The point is that we’re in some kind of <strong>“post-responsive” era of web design</strong>, one that looks beyond how elements stack in response to the viewport to consider user preferences, privacy, and providing optimal experiences at any breakpoint regardless of whatever device is used.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"c1972d82e0900c26aa45c6eaaa35213df4f25079e7f5ba6671b2cda0235a61c7","category":"Tech"}