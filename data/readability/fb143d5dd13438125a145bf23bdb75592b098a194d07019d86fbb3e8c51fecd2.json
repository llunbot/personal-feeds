{"title":"บันทึกการอ่านเรื่องวิธีการ scaling database  (RDBMS)","link":"https://www.somkiat.cc/note-scaling-database-rdbms/","date":1635433477000,"content":"<div id=\"readability-page-1\" class=\"page\"><div id=\"page\"><article><div id=\"content_box\"><header><div><p><time>October 28, 2021</time> <span><a href=\"https://www.somkiat.cc/category/architecture-2/\" rel=\"category tag\">Architecture</a></span></p></div></header><div><p>เห็นใน feed มาการ share บทความเรื่อง<br><strong><a href=\"https://levelup.gitconnected.com/how-to-design-a-system-to-scale-to-your-first-100-million-users-4450a2f9703d\" target=\"_blank\" rel=\"noreferrer noopener\">How to design a system to scale to your first 100 million users ?</a></strong><br>มีรายละเอียดเยอะมาก ๆ<br>หนึ่งในเรื่องที่สนใจคือ <strong>การ scaling database (RDBMS)</strong><br>เนื่องจากยังคงเป็นที่นิยมในการใช้งาน</p><p><strong>ตัวอย่างความนิยมของ Database model ต่าง ๆ จาก <a rel=\"noreferrer noopener\" href=\"https://db-engines.com/en/ranking\" target=\"_blank\">DB Engine Ranking 2021</a></strong></p><figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/10/Screen-Shot-2564-10-28-at-21.16.02-1024x386.png\" alt=\"\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/10/Screen-Shot-2564-10-28-at-21.16.02-1024x386.png 1024w, https://www.somkiat.cc/wp-content/uploads/2021/10/Screen-Shot-2564-10-28-at-21.16.02-300x113.png 300w, https://www.somkiat.cc/wp-content/uploads/2021/10/Screen-Shot-2564-10-28-at-21.16.02-768x289.png 768w, https://www.somkiat.cc/wp-content/uploads/2021/10/Screen-Shot-2564-10-28-at-21.16.02.png 1316w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></figure><p><strong>โดยวิธีการ scale RDBMS ที่แนะนำมาดังนี้</strong></p><ul><li>Replication</li><li>Federation</li><li>Sharding</li><li>Denomalization</li><li>SQL tuning</li></ul><p><strong>Replication</strong></p><p>เริ่มด้วย Master-Slave replication<br>ทำการ copy ข้อมูลจาก database หลักออกมา<br>โดย database server จะมี 2 กลุ่มคือ</p><ul><li><strong>Master</strong> สำหรับเปลี่ยนแปลงข้อมูล ทั้งเขียน แก้ไข และ ลบ</li><li><strong>Slave</strong> สำหรับการอ่านข้อมูล สามารถเพิ่มจำนวน server ได้</li></ul><div><p>เมื่อข้อมูลใน Master มีการเปลี่ยนแปลง<br>จากนั้นจะทำ update ข้อมูลไปยัง Slave ด้วย<br>จะเป็นทั้งแบบ sync และ async<br>แน่นอนว่าจะมีเวลาที่ข้อมูลจะไม่เท่ากัน หรือ lag time<br>ซึ่งต้องระวังไว้ด้วย</p><p><strong>ที่สำคัญถ้า Master ล่มลงไป จะส่งผลให้ไม่สามารถเปลี่ยนแปลงข้อมูลได้</strong><br>ส่วนการอ่านยังคงทำงานได้ เพราะว่าไปที่ Slave<br>แต่เราสามารถ promote Slave ไปเป็น Master ได้อีกด้วย<br>หรืออาจจะทำ Multi-master replication ได้อีกด้วย<br>จะเยอะไปไหน<br>ยิ่งทำยิ่งซับซ้อนนะ</p></div><p><strong>Federation</strong></p><p>เป็นการแบ่ง database ตาม feature หรือกลุ่มของการทำงาน<br>ไม่รวมข้อมูลใน database เดียวกับแบบเยอะ ๆ หรือ monolith<br>ทำให้สามารถจัดเตรียม database ให้เหมาะกับข้อมูลของ feature นั้น ๆ ได้ง่ายขึ้น<br>ลด single point of failure และ เพิ่มการทำงานให้ดีขึ้น<br>แต่ระวังการแบ่งผิดด้วยละ</p><p><strong>Sharding</strong></p><p>อีกชื่อหนึ่งคือ การ partition data ออกไป<br>ทำการแบ่งข้อมูลแยกออกไปตามที่ต้องการ เช่น</p><ul><li>ข้อมูลแยกตามการ hash function</li><li>ข้อมูลแยกตามทวีป ภาค ตามจังหวัด</li></ul><div><p>แต่ต้องดูด้วยว่า use case การใช้งานข้อมูลเป็นอย่างไร<br>มิเช่นนั้น อาจจะมีการใช้ข้อมูลที่แตกต่างกัน<br>ทำให้บาง databaseจะใช้งานหนักหรือน้อย<br>รวมทั้งระวังการ rebalance data ใหม่ด้วย</p><p><strong><em>จะสังเกตได้ว่าทั้ง Federation และ Sharding<br>เป็นวิธีการแบ่งข้อมูลขนาดใหญ่ ให้มีขนาดเล็กลง<br>และเหมาะสมต่อการใช้งานอีกด้วย<br>เพราะว่า ถ้าข้อมูลมีขนาดใหญ่มาก ๆ การ scale ก็ยากตามเช่นกัน</em></strong></p></div><p><strong>Denormalization</strong></p><p>เป็นแนวคิดตรงข้ามกับ Nomalization<br>ที่พยายามจะเก็บข้อมูลให้มีประสิทธิภาพมากที่สุด<br><strong>แต่ปัญหาตามมาคือ การดึงข้อมูลมาใช้งาน</strong><br>เพราะว่ามักจะพบว่ามีการ join ข้อมูลจาก table ต่าง ๆ มากมาย<br>ยิ่งข้อมูลมากขึ้น table มากขึ้น<br>การดึงข้อมูลจะใช้เวลาและ resource จำนวนมาก<br>ส่งผลให้ระบบไม่สามารถรองรับผู้ใช้งานจำนวนมากได้<br>ดังนั้นจึงเป็นที่มาของ <strong>Denormalization</strong></p><div><p><strong>ใช้สำหรับการออกแบบการเก็บข้อมูลเพื่อการอ่าน (Design for read)</strong><br>อีกอย่างถ้าข้อมูลมีจำนวนมาก ๆ<br>ควรต้องคัดข้อมูลให้เหลือเท่าที่จะใช้งานอีกด้วย<br>เพื่อลดเวลาและ resource ของการดึงข้อมูลอีกด้วย</p><p><strong><em>แต่ละวิธีการนั้น เราควรต้องรู้และเข้าใจก่อน<br>จากนั้นกลับมาดูว่า วิธีการใดเหมาะกับปัญหาหรืองานของเรา</em></strong></p></div></div><div><p><img alt=\"\" src=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=90&amp;d=mm&amp;r=g\" srcset=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=180&amp;d=mm&amp;r=g 2x\" height=\"90\" width=\"90\"></p><h4>Article by <a href=\"https://www.facebook.com/somkiatspns\">Somkiat Puisungnoen</a></h4><p>To be Craftmanship</p></div></div></article></div></div>","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"fb143d5dd13438125a145bf23bdb75592b098a194d07019d86fbb3e8c51fecd2","category":"Thai"}