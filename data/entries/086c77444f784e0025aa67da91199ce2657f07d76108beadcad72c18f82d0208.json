{"title":"Re-Creating The Pop-Out Hover Effect With Modern CSS (Part 1)","link":"https://smashingmagazine.com/2023/09/re-creating-pop-out-hover-effect-css-part1/","date":1695985200000,"content":"<p><a href=\"https://css-tricks.com/a-fancy-hover-effect-for-your-avatar/\">In a previous article</a> on CSS-Tricks, I demonstrated how to create a fancy hover effect where an avatar pops out of a circle on hover. The challenge was to make such an effect using only the <code>&lt;img&gt;</code> tag.</p>\n<p><img src=\"https://files.smashing.media/articles/re-creating-pop-out-hover-effect-css-part1/1-flower-css-mask.png\" /></p>\n<p>I know it might seem like this shape requires advanced trickery. But if we break it down a bit, all we’re really talking about is a series of small circles around a much larger circle.</p>\n<p><img src=\"https://files.smashing.media/articles/re-creating-pop-out-hover-effect-css-part1/2-flower-shape-circles.png\" /></p>\n<p>We are going to rely on <code>radial-gradient</code> and some math, specifically <strong>trigonometric functions</strong>. Bramus Van Damme provides an <a href=\"https://web.dev/css-trig-functions/\">excellent primer on trigonometric functions</a> over at web.dev. It’s very much worth your while to brush up on the concept with that article.</p>\n<p>We are going to define two variables to control the flower shape. <code>N</code> represents the <strong>number of the small circles</strong>, and <code>R</code> is the <strong>diameter of the small circles</strong> (Illustrated by the black arrow in the figure above). If we have the diameter, then we can calculate the radius by dividing <code>R</code> by 2. This is everything we need to create the shape!</p>\n<p>Here is what the code of a small circle looks like:</p>\n<pre><code>img {\n  --r: 50px;\n  mask:\n    radial-gradient(#000 70%, #0000 72%) no-repeat\n    {position} / var(--r) var(--r);\n}\n</code></pre>\n\n<p>All of the small circles can use the same radial gradient. The only difference between them is the position. Here comes the math:</p>\n<pre><code>(50% + 50% * cos(360deg * i/N)) (50% + 50% * sin(360deg * i/N))</code></pre>\n\n<p><code>N</code> is the number of circles, and <code>i</code> is the index of each circle. We could manually position each circle individually, but that’s a lot of work, and I believe in leveraging tools to help do some of the heavy lifting. So, I’m going to <strong>switch from CSS to Sass</strong> to use its ability to write loops and generate all of the circle positions in one fell swoop.</p>\n<pre><code>$n: 15; /* number of circles */\n\nimg {\n  --r: 50px; /* control the small circles radius */\n  $m: ();\n  @for $i from 1 through ($n) {\n    $m: append($m, \n         radial-gradient(#000 70%,#0000 72%) no-repeat\n          calc(50% + 50% * cos(360deg * #{$i / $n})) \n          calc(50% + 50% * sin(360deg * #{$i / $n})) /\n            var(--r) var(--r), \n        comma);\n   }\n  mask: $m;\n}\n</code></pre>\n\n<p>We’re essentially looping through the number of circles (<code>$n</code>) to define each one by chaining the radial gradient for each one as comma-separated values on the mask (<code>$m</code>) that is applied to the image element.</p>\n<p>We still need the large circle that the small circles are positioned around. So, in addition to the loop’s output via the <code>$m</code> variable, we chain the larger circle’s gradient on the same <code>mask</code> declaration:</p>\n<pre><code>img {\n  /* etc */\n  mask: $m, radial-gradient(#000 calc(72% - var(--r)/2),#0000 0);\n}\n</code></pre>\n\n<p>Finally, we define the size of the image element itself using the same variables. Calculating the image’s width also requires the use of trigonometric functions. Then, rather than doing the same thing for the height, we can make use of the relatively new <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio\"><code>aspect-ratio</code></a> property to get a nice 1:1 ratio:</p>\n<pre><code>img {\n  /* etc */\n  width: calc(var(--r) * (1 + 1/tan(180deg / #{$n})));\n  aspect-ratio: 1;\n}\n</code></pre>\n\n<p>Check it out. We have the shape we want and can easily control the size and number of circles with only two variables.</p>\n<p><img src=\"https://files.smashing.media/articles/re-creating-pop-out-hover-effect-css-part1/3-update-gradient-configuration.png\" /></p>\n<p>We’re basically reducing the distance of the small circles, making them closer to the center. Then, we reduce the size of the larger circle as well. This produces an effect that appears to change the roundness of the smaller circles on hover. </p>\n<p>The final trick is to scale the entire image element to make sure the size of the hovered shape is the same as the non-hovered shape. Scaling the image means that the avatar will get bigger and will pop out from the frame that we made smaller.</p>\n<p><img src=\"https://files.smashing.media/articles/re-creating-pop-out-hover-effect-css-part1/4-scaling-hovered-v-non-hovered-shape.png\" /></p>\n<div>\n<pre><code>$n: 15; /* number of circles */\n\n@property --i {\n  syntax: \"&lt;length&gt;\";\n  initial-value: 0px;\n  inherits: true;\n}\n\nimg {\n  /* CSS variables */\n  --r: 50px; /* controls the small circle radius and initial size */\n  --f: 1.7; /* controls the scale factor */\n  --c: #E4844A; /* controls the main color */\n\n  $m: ();\n  /* Sass loop */\n  @for $i from 1 through ($n) {\n    $m: append($m, \n      radial-gradient(var(--c) 70%, #0000 72%) no-repeat\n      calc(50% + (50% - var(--i, 0px)) * cos(360deg * #{$i/$n} + var(--a, 0deg))) \n      calc(50% + (50% - var(--i, 0px)) * sin(360deg * #{$i/$n} + var(--a, 0deg))) /\n      var(--r) var(--r), \n    comma);\n  }\n\n  mask: \n    linear-gradient(#000 0 0) top/100% 50% no-repeat,\n    radial-gradient(var(--c) calc(72% - var(--r)/2 - var(--i, 0px)), #0000 0),\n    $m;\n  background:\n    radial-gradient(var(--c) calc(72% - var(--r)/2 - var(--i, 0px)), #0000 0),\n    $m;\n  transition: --i .4s, scale .4s;\n}\n\nimg:hover {\n  --i: calc(var(--r)/var(--f));\n  scale: calc((1 + 1/tan(180deg/#{$n}))/(1 - 2/var(--f) + 1/tan(180deg/#{$n})));\n}\n</code></pre>\n</div>\n\n<p>Here’s what’s changed:</p>\n<ul>\n<li>The Sass loop that defines the position of the circle uses an equation of <code>50% - var(--i, 0px)</code> instead of a value of <code>50%</code>.</li>\n<li>The larger circle uses the same variable, <code>--i</code>, to set the color stop of the main color in the gradients that are applied to the <code>mask</code> and <code>background</code> properties.</li>\n<li>The <code>--i</code> variable is updated from <code>0px</code> to a positive value. This way, the small circles move position while the large circle becomes smaller in size.</li>\n<li>The <code>--i</code> variable is registered as a custom <code>@property</code> that allows us to interpolate its values on hover.</li>\n</ul>\n<p>You may have noticed that I didn’t mention anything about the <code>--f</code> variable that’s defined on the image element. Truthfully, there is no special logic to it. I could have defined any positive value for the variable <code>--i</code> on hover, but I wanted a value that depends on <code>--r</code>, so I came up with a formula <code>(var(--r) / var(--f))</code>, where <code>--f</code> allows controls the scale.</p>\n<p>Does the equation on the <code>scale</code> property on hover give you a little bit of panic? It sure looks complex, but I promise you it’s not. We divide the size of the initial shape (which is also the size of the element) by the size of the new shape to get the scale factor.</p>\n<ul>\n<li>The initial size: <code>calc(var(--r)*(1 + 1 / tan(180deg / #{$n})))</code></li>\n<li>The size of the new shape: <code>calc(var(--r) * (1 + 1 / tan(180deg / #{$n})) - 2 * var(--r) / var(--f))</code></li>\n</ul>\n<p>I am skipping a lot of math details to not make the article lengthy, but feel free to comment on the article if you want more detail on the formulas I am using. </p>\n<p>That’s all! We have a nice “pop out” effect on hover:</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/qBQzrwq\">Fancy Pop Out hover effect!</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\nWrapping Up\n<p>Does all of this seem a bit much? I see that and know this is a lot to throw at anyone in a single article. We’re working with some pretty new CSS features, so there’s definitely a learning curve with new syntaxes, not to mention some brushing up on math functions you probably haven’t seen in years.</p>\n<p>But we learned a lot of stuff! We used gradients with some math to create a fancy shape that we applied as a mask and background. We introduced <code>@property</code> to animate CSS variables and bring our shape to life. We also learned a nice trick using <code>animation-composition</code> to control the speed of the rotation.</p>\n<p>We still have a <a href=\"https://www.smashingmagazine.com/2023/10/re-creating-pop-out-hover-effect-modern-css-part2/\">second part of this article</a> where we will reuse the same CSS techniques to create a fancier hover effect.</p>\n<p>I’ll leave you with one last demo as a sign-off.</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/OJrLgeV\">Pop out hover effect featuring Lea and Una</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"086c77444f784e0025aa67da91199ce2657f07d76108beadcad72c18f82d0208","category":"Tech"}