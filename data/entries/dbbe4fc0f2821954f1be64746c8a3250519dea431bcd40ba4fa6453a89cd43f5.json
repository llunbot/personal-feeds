{"title":"Why a GameCube/Wii emulator may not be possible on the iOS App Store","link":"https://arstechnica.com/?p=2019070","date":1713802872000,"content":"<div>\n<figure>\n  <img src=\"https://cdn.arstechnica.net/wp-content/uploads/2024/04/dolphinios-800x211.png\" alt=\"Don't expect to see this on the iOS App Store any time soon.\" />\n      <p><a href=\"https://cdn.arstechnica.net/wp-content/uploads/2024/04/dolphinios.png\">Enlarge</a> <span>/</span> Don't expect to see this on the iOS App Store any time soon. (credit: <a href=\"https://oatmealdome.me/blog/dolphinios-release/\">OatmealDome</a>)</p>  </figure>\n\n\n\n\n\n\n<div><a name=\"page-1\"></a></div>\n<p>Last week's release of <a href=\"https://arstechnica.com/gaming/2024/04/a-touchscreen-of-nostalgia-delta-brings-classic-nintendo-consoles-to-ios/\">the Delta emulation suite</a> finally gave iOS users easy, no-sideloading-required access to classic Nintendo game emulation up through the Nintendo 64 era. When it comes to emulating Nintendo's subsequent home consoles on iOS, though, some technical restrictions imposed by Apple are making it difficult to get a functional emulator on the App Store.</p>\n<p>In <a href=\"https://oatmealdome.me/blog/why-dolphin-isnt-coming-to-the-app-store/\">a recent blog post</a>, DolphiniOS developer (and <a href=\"https://arstechnica.com/gaming/2018/08/hackers-discover-buried-vrmode-support-in-switch-firmware/\">longtime</a> <a href=\"https://arstechnica.com/gaming/2019/01/datamining-suggests-emulated-super-nes-games-could-be-coming-to-switch/\">Switch</a> <a href=\"https://arstechnica.com/gaming/2022/04/leaked-game-boy-emulators-for-switch-were-made-by-nintendo-experts-suggest/2/\">hacker</a>) OatmealDome explains how a Dolphin <a href=\"https://github.com/OatmealDome/dolphin-ios\">code fork</a>—which ports the popular GameCube and Wii emulator to Apple's smartphone OS—uses just-in-time (JIT) compilation to translate the PowerPC instructions from those retro consoles into ARM-compatible iOS code. But Apple's <a href=\"https://developer.apple.com/support/terms/apple-developer-program-license-agreement/\">App Store regulations</a> against apps that \"install executable code\" (Section 3.3.1B) generally <a href=\"https://github.com/LuaJIT/LuaJIT/issues/1072\">prevent JIT recompilation on iOS</a>, with very limited exceptions such as web browsers. That restriction <a href=\"https://softwareengineering.stackexchange.com/questions/429081/can-just-in-time-compilation-be-considered-a-secure-feature\">may have some valid security reasoning behind it</a>, but it can also get in the way for developers of tools like third-party browser engines (<a href=\"https://developer.apple.com/support/alternative-browser-engines/\">except recently in the EU</a>).</p>\n<p>While MacOS developers can make use of <a href=\"https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_security_cs_allow-jit\">an explicit entitlement to allow JIT recompilation</a> in an app, that exception doesn't apply to iOS developers. And while alternative App Stores and sideloaded apps (including DolphiniOS) have <a href=\"https://9to5mac.com/2020/11/06/ios-14-2-brings-jit-compilation-support-which-enables-emulation-apps-at-full-performance/\">discovered</a> various <a href=\"https://dolphinios.oatmealdome.me/beta\">ways</a> to enable JIT compilation on both jailbroken and stock iOS devices, these workarounds can get quite arcane and <a href=\"https://twitter.com/altstoreio/status/1354096048650809349\">occasionally break with new iOS releases</a>.</p></div><p><a href=\"https://arstechnica.com/?p=2019070#p3\">Read 5 remaining paragraphs</a> | <a href=\"https://arstechnica.com/?p=2019070&amp;comments=1\">Comments</a></p>","author":"Kyle Orland","siteTitle":"Ars Technica","siteHash":"5b0ddf6e8923e49262a7894cfd77962733e43fbcc565a103b48373820b310636","entryHash":"dbbe4fc0f2821954f1be64746c8a3250519dea431bcd40ba4fa6453a89cd43f5","category":"Tech"}