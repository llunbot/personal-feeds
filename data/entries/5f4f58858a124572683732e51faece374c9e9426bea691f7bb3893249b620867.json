{"title":"Generating Unique Random Numbers in JavaScript Using Sets","link":"https://smashingmagazine.com/2024/08/generating-unique-random-numbers-javascript-using-sets/","date":1724684400000,"content":"<p>JavaScript comes with a lot of built-in functions that allow you to carry out so many different operations. One of these built-in functions is the <code>Math.random()</code> method, which generates a random floating-point number that can then be manipulated into integers.</p>\n<p>However, if you wish to generate a series of unique random numbers and create more random effects in your code, you will need to come up with a custom solution for yourself because the <code>Math.random()</code> method on its own cannot do that for you.</p>\n<p>In this article, we’re going to be learning how to circumvent this issue and generate a series of unique random numbers using the <code>Set</code> object in JavaScript, which we can then use to create more randomized effects in our code.</p>\n<p><strong>Note</strong>: <em>This article assumes that you know how to generate random numbers in JavaScript, as well as how to work with sets and arrays.</em></p>\nGenerating a Unique Series of Random Numbers\n<p>One of the ways to generate a unique series of random numbers in JavaScript is by using <code>Set</code> objects. The reason why we’re making use of sets is because the elements of a set are unique. We can iteratively generate and insert random integers into sets until we get the number of integers we want.</p>\n<p>And since sets do not allow duplicate elements, they are going to serve as a filter to remove all of the duplicate numbers that are generated and inserted into them so that we get a set of unique integers.</p>\n<p>Here’s how we are going to approach the work:</p>\n<ol>\n<li>Create a <code>Set</code> object.</li>\n<li>Define how many random numbers to produce and what range of numbers to use.</li>\n<li>Generate each random number and immediately insert the numbers into the <code>Set</code> until the <code>Set</code> is filled with a certain number of them.</li>\n</ol>\n<p>The following is a quick example of how the code comes together:</p>\n<div>\n<pre><code>function generateRandomNumbers(count, min, max) {\n  // 1: Create a <code>Set</code> object\n  let uniqueNumbers = new Set();\n  while (uniqueNumbers.size &lt; count) {\n    // 2: Generate each random number\n    uniqueNumbers.add(Math.floor(Math.random() * (max - min + 1)) + min);\n  }\n  // 3: Immediately insert them numbers into the Set...\n  return Array.from(uniqueNumbers);\n}\n// ...set how many numbers to generate from a given range\nconsole.log(generateRandomNumbers(5, 5, 10));\n</code></pre>\n</div>\n\n<p>What the code does is create a new <code>Set</code> object and then generate and add the random numbers to the set until our desired number of integers has been included in the set. The reason why we’re returning an array is because they are easier to work with.</p>\n<p>One thing to note, however, is that the number of integers you want to generate (represented by <code>count</code> in the code) should be less than the upper limit of your range plus one (represented by <code>max + 1</code> in the code). Otherwise, the code will run forever. You can add an <code>if statement</code> to the code to ensure that this is always the case:</p>\n<div>\n<pre><code>function generateRandomNumbers(count, min, max) {\n  // if statement checks that <code>count</code> is less than <code>max + 1</code>\n  if (count &gt; max + 1) {\n    return \"count cannot be greater than the upper limit of range\";\n  } else {\n    let uniqueNumbers = new Set();\n    while (uniqueNumbers.size &lt; count) {\n      uniqueNumbers.add(Math.floor(Math.random() * (max - min + 1)) + min);\n    }\n    return Array.from(uniqueNumbers);\n  }\n}\nconsole.log(generateRandomNumbers(5, 5, 10));\n</code></pre>\n</div>\n\n\n\nUsing the Series of Unique Random Numbers as Array Indexes\n<p>It is one thing to generate a series of random numbers. It’s another thing to use them.</p>\n<p>Being able to use a series of random numbers with arrays unlocks so many possibilities: you can use them in shuffling playlists in a music app, randomly sampling data for analysis, or, as I did, <a href=\"https://github.com/jimavictor/remoji\">shuffling the tiles in a memory game</a>.</p>\n<p>Let’s take the code from the last example and work off of it to return random letters of the alphabet. First, we’ll construct an array of letters:</p>\n<div>\n<pre><code>const englishAlphabets = [\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', \n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n];\n\n// rest of code\n</code></pre>\n</div>\n\n<p>Then we <code>map</code> the letters in the range of numbers:</p>\n<div>\n<pre><code>const englishAlphabets = [\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', \n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n];\n\n// generateRandomNumbers()\n\nconst randomAlphabets = randomIndexes.map((index) =&gt; englishAlphabets[index]);\n</code></pre>\n</div>\n\n<p>In the original code, the <code>generateRandomNumbers()</code> function is logged to the console. This time, we’ll construct a new variable that calls the function so it can be consumed by <code>randomAlphabets</code>:</p>\n<div>\n<pre><code>const englishAlphabets = [\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', \n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n];\n\n// generateRandomNumbers()\n\nconst randomIndexes = generateRandomNumbers(5, 0, 25);\nconst randomAlphabets = randomIndexes.map((index) =&gt; englishAlphabets[index]);\n</code></pre>\n</div>\n\n<p>Now we can log the output to the console like we did before to see the results:</p>\n<div>\n<pre><code>const englishAlphabets = [\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', \n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n];\n\n// generateRandomNumbers()\n\nconst randomIndexes = generateRandomNumbers(5, 0, 25);\nconst randomAlphabets = randomIndexes.map((index) =&gt; englishAlphabets[index]);\nconsole.log(randomAlphabets);\n</code></pre>\n</div>\n\n<p>And, when we put the <code>generateRandomNumbers`</code>()` function definition back in, we get the final code:</p>\n<div>\n<pre><code>const englishAlphabets = [\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', \n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n];\nfunction generateRandomNumbers(count, min, max) {\n  if (count &gt; max + 1) {\n    return \"count cannot be greater than the upper limit of range\";\n  } else {\n    let uniqueNumbers = new Set();\n    while (uniqueNumbers.size &lt; count) {\n      uniqueNumbers.add(Math.floor(Math.random() * (max - min + 1)) + min);\n    }\n    return Array.from(uniqueNumbers);\n  }\n}\nconst randomIndexes = generateRandomNumbers(5, 0, 25);\nconst randomAlphabets = randomIndexes.map((index) =&gt; englishAlphabets[index]);\nconsole.log(randomAlphabets);\n</code></pre>\n</div>\n\n<p>So, in this example, we created a new array of alphabets by randomly selecting some letters in our <code>englishAlphabets</code> array.</p>\n<p>You can pass in a count argument of <code>englishAlphabets.length</code> to the <code>generateRandomNumbers</code> function if you desire to shuffle the elements in the <code>englishAlphabets</code> array instead. This is what I mean:</p>\n<pre><code>generateRandomNumbers(englishAlphabets.length, 0, 25);\n</code></pre>\n\n\n\nWrapping Up\n<p>In this article, we’ve discussed how to create randomization in JavaScript by covering how to generate a series of unique random numbers, how to use these random numbers as indexes for arrays, and also some practical applications of randomization.</p>\n<p>The best way to learn anything in software development is by consuming content and reinforcing whatever knowledge you’ve gotten from that content by practicing. So, don’t stop here. Run the examples in this tutorial (if you haven’t done so), play around with them, come up with your own unique solutions, and also don’t forget to share your good work. Ciao!</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"5f4f58858a124572683732e51faece374c9e9426bea691f7bb3893249b620867","category":"Tech"}