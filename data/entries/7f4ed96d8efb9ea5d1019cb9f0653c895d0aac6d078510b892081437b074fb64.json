{"title":"แนวทางการจัดการเรื่อง Backpressure ของระบบงาน","link":"https://www.somkiat.cc/backpressure-strategies/","date":1740119867000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2025/02/back-pressure-01-150x150.jpg\" alt=\"\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2025/02/back-pressure-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2025/02/back-pressure-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/02/back-pressure-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/02/back-pressure-01.jpg\" alt=\"\" width=\"586\" height=\"352\" /></a></figure>\n\n\n\n<p>ในการออกแบบและพัฒนาระบบงานนั้น<br />มักจะเจอปัญหาที่เรียกว่า <strong><a href=\"https://en.wikipedia.org/wiki/Back_pressure\" target=\"_blank\">Backpressure</a></strong> กันบ่อย ๆ<br />หรือเรามักจะเรียกว่า ปัญหาคอขวด ของระบบนั่นเอง<br />มันคือ สิ่งที่ขัดขวางการไหลของน้ำ ทำให้เกิดความดันย้อนกลับ (เหมือนกรดไหลย้อนไหมนะ)<br />พูดง่าย ๆ  คือ ท่อตัน หรือ หนักกว่านั้นคือ ไฟลามทุ่ง !!</p>\n\n\n\n<p><strong>คำถามที่ตามมาคือ เราจะจัดการปัญหานี้อย่างไร ?</strong><br />ซึ่งมีทั้งแบบ proactive และ reactive<br />หรือบางคนก็ ignore มันไปเลย เช่น ถ้ามีปัญหาก็ restart ไปไง ให้มันจบ ๆ<br />แต่ไม่น่าจะเป็นวิธีการที่ดีมากนัก<br />ดังนั้นมาเรียนรู้กันว่า มีวิธีการอย่างไรบ้าง ?</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>ถ้าระบบงานทำงานเป็นปกติ คงไม่ต้องทำอะไร</strong><br />แต่เมื่อเกิดปัญหาขึ้นมาแล้ว ก็ต้องจัดการกัน<br />หรือถ้าเราเรียนรู้มากเพียงพอ ก็สามารถออกแบบและสร้างระบบเพื่อป้องกันไว้ได้<br /></p>\n\n\n\n<p><strong>ยกตัวอย่างเช่น ถ้ามี traffic เยอะเกินไป</strong><br />เช่นมี bot ยิงเข้ามาเยอะ ๆ   เราอาจจะใส่ captcha เพื่อป้องกัน bot<br />หรือทำการกั้นด้วย firewall หรือพวก CDN ต่าง ๆ<br /></p>\n\n\n\n<p><strong>แต่ถ้ายังเข้ามาในระบบเยอะ ๆ  ก็มักจะทำการกำหนด Rate limit เข้ามา</strong><br />โดยมี algorithm ที่เลือกได้ เช่น token bucket, fixed windows เป็นต้น<br />หรือทำการกำหนดจำนวน request ที่รับได้ในช่วงนั้น ๆ<br /></p>\n\n\n\n<p><strong>ต่อมาอาจจะทำการกระจาย load traffic ไปยังที่ต่าง ๆ  </strong><br />เพื่อลดการ load เพียงที่เดียวก็ได้<br />มันคือเรื่อง load balance นั่นเอง<br />แต่ถ้าหลังบ้านยังมีปัญหา ก็แก้ไขเพัยงทางเข้า ส่วนในบ้านยังมีปัญหา<br /></p>\n\n\n\n<p><strong>ดังนั้นถ้า traffic เข้ามาเยอะภายในมากไป</strong><br />อาจจะต้องปรับเปลี่ยนการทำงาน<br />เช่น<br />การเขียน code จาก blocking มาเป็น non-blocking มากขึ้น<br />การติดต่อสื่อสารจาก synchronous มาเป็น asynchronous ไหม<br />ยกตัวอย่างเช่น</p>\n\n\n\n<ul>\n<li>batching process</li>\n\n\n\n<li>messaging queue</li>\n</ul>\n\n\n\n<p>เพื่อสร้าง buffer ให้กับระบบ แต่จำเป็นต้องทำการปรับเปลี่ยน user/business flow ด้วย<br />หรือจะนำแนวคิดของ circuite breaker เข้ามาช่วยก็น่าสนใจ<br /></p>\n\n\n\n<p><strong>บางครั้งเราอาจจะแยกส่วนการทำงานแบบ realtime process ออกจาก batch process</strong><br />หรือระบบที่ทำงานได้เร็ว ออกจาก ส่วนการทำงานที่ช้าก็ได้<br />เพื่อเครื่องทำงานให้ใหญ่ขึ้น หรือ จำนวนมากขึ้น !!<br /></p>\n\n\n\n<p>ไม่ว่าทางใด ความซับซ้อนก็จะสูงขึ้นแน่นอน<br />มันคือ trade-off ที่เราต้องเลือกเช่นกัน<br />เราเลือกทางไหน ?</p>\n\n\n\n<p><strong>โดยรวมแล้วนั้นสิ่งที่เราต้องคำนึงเรื่องปัญหานี้คือ</strong></p>\n\n\n\n<ul>\n<li>การควบคุม (<strong>control</strong>) การใช้งานจากฝั่งผู้ใช้งาน ว่าสามารถจัดการได้ไหม เช่นถ้าระบบที่เราจะใช้งานมีปัญหา เรายังจะเรียกใช้อยู่ไหม ? </li>\n\n\n\n<li>จัดการ <strong>buffer</strong> ให้ระบบ เพื่อใช้จำเก็บ request ต่าง ๆ ที่เข้ามา ซึ่งเวลาปกติอาจจะไม่จำเป็น แต่ถ้ามีปริมาณเยอะ ๆ จำเป็นต้องเปิดการใช้งาน</li>\n\n\n\n<li>บางครั้งอาจจะต้องทำการ <strong>drop</strong> request ต่าง ๆ ออกไปด้วย !!</li>\n</ul>\n\n\n\n<p>เราจัดการปัญหาเหล่านี้กันอย่างไรบ้าง ?</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"7f4ed96d8efb9ea5d1019cb9f0653c895d0aac6d078510b892081437b074fb64","category":"Thai"}