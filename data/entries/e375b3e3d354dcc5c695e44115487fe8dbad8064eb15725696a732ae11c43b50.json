{"title":"Nomad 1.7 improves Vault and Consul integrations, adds NUMA support","link":"https://www.hashicorp.com/blog/nomad-1-7-improves-vault-and-consul-integrations-adds-numa-support","date":1701975600000,"content":"<p><a href=\"https://www.nomadproject.io/\">HashiCorp Nomad</a> is a simple and flexible orchestrator used to deploy and manage containers and non-containerized applications across multiple cloud, on-premises, and edge environments. Today, we are excited to announce that Nomad 1.7 is now generally available.</p>\n\n<p>Here’s what’s new in Nomad:</p>\n\n<ul>\n<li>Improved workload identity</li>\n<li>HashiCorp Vault integration improvements</li>\n<li>HashiCorp Consul integration improvements</li>\n<li>Vault and Consul setup helpers</li>\n<li>Multi-cluster Vault and Consul (Enterprise)</li>\n<li>Non-uniform memory access (NUMA) support (Enterprise)</li>\n<li>Nomad actions</li>\n<li>ACL roles and tokens UI</li>\n<li>Distributed locks</li>\n<li>High-availability autoscaler</li>\n</ul>\n\n<h2>Improved workload identity</h2>\n\n<p>For several releases, Nomad has included <a href=\"https://developer.hashicorp.com/nomad/docs/concepts/workload-identity\">workload identity</a> tokens in tasks when users include <code><a href=\"https://developer.hashicorp.com/nomad/docs/job-specification/identity\">identity blocks</a></code> in their jobs.</p>\n<pre><code>identity {\n  name = \"aws\"\n  aud = [\"aws\"]\n  file = true\n  env = true\n  ttl = \"30m\"\n}\n</code></pre><p>For each block added to a task, Nomad will mint a signed JSON Web Token (JWT) that declares information about the identity of a task. This includes the job ID/name, the task name, the group name, the allocation ID, and custom audience values specified in the block.</p>\n\n<p>These JWTs can be accessed via a file or environment variables and will expire based on the time-to-live (TTL) defined in the job. Identity blocks also include a <code>changemode</code> attribute to define how to handle updated identity tokens after expiry.</p>\n\n<p>In previous versions of Nomad, this identity token was used for authentication within Nomad. In Nomad 1.7, these identity tokens can now be used by third parties to authenticate the identity of Nomad tasks. </p>\n\n<p>Nomad will act as an OIDC provider, allowing OIDC consumers to verify workload identity tokens against a public signing key. This means that other tools such as Vault and Consul and cloud providers such as AWS, Azure, and Google Cloud can all accept Nomad workload identity tokens, validate their authenticity, and return credentials granting specific permissions depending on task ID.</p>\n<img src=\"https://www.datocms-assets.com/2885/1698850409-wi.gif\" alt=\"Nomad\" /><p>See the following video, for a very quick example of this working in AWS:</p>\n<p>This enhancement for identity tokens allows for dynamic credentials to be minted for Nomad tasks. The result is improved security and simplified management of integrations with Nomad workloads. </p>\n\n<p>Using static credentials to authenticate Nomad tasks presents a security risk, even if you rotate your credentials regularly. Dynamic credentials improve your security posture by letting you provision new, temporary credentials for each workload and renew them at regular intervals. </p>\n\n<p>Nomad administrators and developers won’t have to manage as many static tokens in Vault or Nomad variables. They also won’t be tempted to hardcode tokens into Nomad jobspecs.</p>\n\n<p>Lastly, workload identity tokens greatly improve the simplicity and security of integrations with other HashiCorp products, closing key security gaps in your threat model.</p>\n\n<h2>Vault integration improvements</h2>\n\n<p>Nomad 1.7 introduces a new Vault integration process that makes it easier for users to set up and manage Vault. Nomad 1.7+ users will no longer have to manage Vault ACL tokens when submitting Nomad jobs or provisioning Nomad clients. Instead, Nomad will automatically manage Vault tokens for the user using workload identity based authorization.</p>\n\n<p>In previous versions of Nomad, users would submit Vault tokens with Nomad jobs:</p>\n\n<pre><code>$ nomad run -vault-token=&lt;REDACTED&gt; my-job.hcl\n</code></pre>\n\n<p>Now, just submit a job that works with Vault, and Nomad will automatically authenticate into Vault using identity-based policies instead of manually provided tokens. This is both more secure and easier to manage.</p>\n\n<pre><code>$ nomad run my-job.hcl\n</code></pre>\n\n<p>Additionally, Vault tokens are no longer required for setting up a Nomad server agent or Nomad client agent. In fact, Nomad servers don't have to communicate directly with Vault at all, reducing networking constraints.</p>\n\n<p>Nomad also now includes support for <a href=\"https://developer.hashicorp.com/vault/tutorials/policies/policy-templating\">templated policies</a> in Vault. Nomad information including task, group, job, and namespace can be interpolated into a Vault policy. This means that with just a single policy, you can potentially support every Nomad job. </p>\n\n<p>For instance, the following Vault policy snippet would give every Nomad job read access to a unique path based on its namespace and job name:</p>\n<pre><code>path \"secret/data/{{identity.entity.aliases.auth_jwt_X.metadata.nomad_namespace}}/{{identity.entity.aliases.auth_jwt_X.metadata.nomad_job_id}}/*\" {\n  capabilities = [\"read\"]\n}</code></pre><p>To learn about our revamped Vault integration process, see our <a href=\"https://developer.hashicorp.com/nomad/docs/integrations/vault-integration\">new Vault integration documentation</a> and read the “Vault and Consul setup helpers” section further down in this post.</p>\n\n<p>Lastly, users can configure their Nomad integration to use batch tokens instead of regular Vault tokens. Batch tokens reduce Vault load in large-scale deployments with numerous allocations. For more information, read our full explanation of <a href=\"https://developer.hashicorp.com/vault/tutorials/tokens/batch-tokens#service-tokens-vs-batch-tokens\">batch tokens vs service tokens</a>.</p>\n\n<p>Our legacy Vault integration, using explicitly defined Vault tokens, is deprecated in Nomad 1.7 and is slated for removal in Nomad 1.9.</p>\n\n<h2>Consul integration improvements</h2>\n\n<p>Nomad 1.7 also includes an improved integration with Consul based on workload identity tokens. Users of the new Consul integration will no longer have to provide Consul ACL tokens to Nomad when submitting jobs. This reduces the overall toil involved with setting up and maintaining Consul with Nomad.</p>\n\n<p>In previous versions of Nomad, users would submit Consul tokens with Nomad jobs:</p>\n\n<pre><code>$ nomad run -consul-token=&lt;REDACTED&gt; my_job.hcl\n</code></pre>\n\n<p>Now, once Nomad and Consul are initially configured, end users can submit a job without any manual token management:</p>\n\n<pre><code>$ nomad run my_job.hcl\n</code></pre>\n\n<p>If Nomad agents are relying on Consul for discovering other Nomad agents in a cluster, a Consul token can still be passed into the Nomad agent configuration, but it is only used for this purpose. As such, the Consul ACL tokens in Nomad agents can be more finely scoped for just these permissions.</p>\n\n<p>Overall, these changes will make it simpler for Nomad administrators and end users to integrate with Consul and reduce any overhead or security risk associated with static token management. To learn more, see our <a href=\"https://developer.hashicorp.com/nomad/docs/integrations/consul-integration\">new Consul integration documentation</a> and read the “Vault and Consul setup helpers” section further down in this post.</p>\n\n<p>Our legacy Consul integration — using explicitly defined Consul tokens for Consul service and key-value (KV) storage management — is deprecated in Nomad 1.7 and is slated for removal in Nomad 1.9.</p>\n\n<h2>Vault and Consul setup helpers</h2>\n\n<p>With the improved Vault and Consul integrations, the long-term overhead of using these tools goes down, but initial setup still involves writing authentication rules and ACL policies in Vault and Consul. In order to streamline this process, we’ve provided several methods to configure the integrations.</p>\n\n<p>For initial testing, learning, or development, Nomad 1.7 GA will include new <code>nomad setup</code> commands in the Nomad CLI. These commands are the simplest way to try out the new integrations, but provide the least customization.</p>\n\n<p>The Vault setup command will:</p>\n\n<ul>\n<li>Enable JWT authentication on Vault</li>\n<li>Optionally create a namespace for Nomad workloads</li>\n<li>Set up a templated policy for Nomad workloads to access specific paths</li>\n<li>Set up an auth role allowing Nomad-minted identity tokens to log in under the new policy</li>\n<li>Output Nomad agent configuration changes to properly integrate with Vault</li>\n</ul>\n\n<p>Just run one command:</p>\n\n<pre><code>$ nomad setup vault\n</code></pre>\n\n<p>Reload your Nomad agent with config supplied by the command, then run a Nomad job that uses Vault:</p>\n\n<pre><code>$ nomad run my-vault-enabled-job.nomad.hcl\n</code></pre>\n\n<p>The Consul setup command works similarly, setting up everything Consul needs for Nomad jobs to authenticate to Consul using workload identities for service and KV storage.</p>\n\n<p>For more declarative and production-ready setups, we are also providing Terraform modules for <a href=\"https://github.com/hashicorp-modules/terraform-vault-nomad-setup\">Vault integration setup</a> and <a href=\"https://github.com/hashicorp-modules/terraform-consul-nomad-setup\">Consul integration setup</a>. These modules allow further customization beyond what the built-in setup command provides.</p>\n\n<p>Lastly, users can customize their own setup manually by creating the necessary resources via the command line, via API, or via Terraform. See our <a href=\"https://developer.hashicorp.com/nomad/docs/integrations/vault-integration\">Vault integration</a> and <a href=\"https://developer.hashicorp.com/nomad/docs/integrations/consul-integration\">Consul integration documentation</a> for more information.</p>\n\n<h2>Multi-cluster Vault and Consul (Enterprise)</h2>\n\n<p>Nomad users on the Enterprise Platform Package can also integrate with multiple Vault clusters or Consul clusters using a single Nomad cluster. Previously, there was a one-to-one relationship between Nomad and these other tools.</p>\n\n<p>Nomad administrators can now define multiple integrations in the <a href=\"https://developer.hashicorp.com/nomad/docs/configuration/vault\"><code>vault</code></a> and <a href=\"https://developer.hashicorp.com/nomad/docs/configuration/consul\"><code>consul</code></a> portions of the Nomad agent configuration. Then, Nomad jobspec writers can pick which Consul or Vault cluster to use in their job. Nomad administrators can also set default clusters for each in <a href=\"https://developer.hashicorp.com/nomad/docs/other-specifications/namespace\">Nomad namespace configuration</a>, as well as deny access to certain clusters by namespace.</p>\n\n<p>Let’s take a look at using multiple Vault clusters as an example. First, in the Nomad agent config, add two named <a href=\"https://developer.hashicorp.com/nomad/docs/configuration/vault\"><code>vault</code> blocks</a>, one of which is the default cluster. Note, these blocks do not include Vault tokens since these are now unnecessary.</p>\n<pre><code>vault {\n  name = \"default\"\n  default_cluster = true\n  address = \"https://vault.company.internal:8200\"\n\n  # remaining configuration unchanged\n}\n\nvault {\n  name = \"financial\"\n  default_cluster = false\n  address = \"https://vault.company.internal:8201\"\n\n  # remaining configuration unchanged\n}</code></pre><p><a href=\"https://developer.hashicorp.com/nomad/docs/other-specifications/namespace\">Nomad namespace configuration</a> can now include information about which Vault cluster to use by default along with allow/deny lists.</p>\n<pre><code>name        = \"finance-team\"\ndescription = \"The namespace used by the finance team\"\n\nvault {\n  default = \"financial\"\n  # allowed = [\"financial\"]\n  denied = [\"default\"]\n}</code></pre><p>For namespaces with multiple Vaults, users can opt into non-default Vault clusters using the <a href=\"https://developer.hashicorp.com/nomad/docs/job-specification/vault#cluster\"><code>cluster</code> value</a> in the <code>vault</code> block.</p>\n<pre><code>job \"example\" {\n  datacenters = [\"*\"]\n\n  vault {\n    cluster = \"financial\"\n  }\n\n  …etc…\n}</code></pre><p>Multiple Consul clusters can be supported and configured in a similar manner. See our documentation on <a href=\"https://developer.hashicorp.com/nomad/docs/configuration/consul\">agent configuration</a>, <a href=\"https://developer.hashicorp.com/nomad/docs/other-specifications/namespace\">namespace configuration</a>, <a href=\"https://developer.hashicorp.com/nomad/docs/job-specification/group#cluster\">job group configuration</a>, and <a href=\"https://developer.hashicorp.com/nomad/docs/job-specification/service#cluster\">service configuration</a> for details.</p>\n\n<p>We believe these changes will enable Nomad to support a wider variety of architectures and deployments. Additionally, users who are in the process of rearchitecting their HashiCorp stack deployments or moving to HCP Consul or HCP Vault should be able to more iteratively modify their stacks.</p>\n\n<h2>Non-uniform memory access support (Enterprise)</h2>\n\n<p>Since Nomad 1.1, Nomad users have been able to dedicate whole CPU cores to specific tasks by using the <code>cores</code> attribute in the <code>resources</code> block. With Nomad Enterprise 1.7, you can now include non-uniform memory access (NUMA) information in these scheduling decisions.</p>\n<img src=\"https://www.datocms-assets.com/2885/1698850384-numa.gif\" alt=\"NUMA\" /><p>Previously, if multiple processes from a single Nomad task were put on cores in different NUMA nodes, inter-process communication might have to cross NUMA nodes and take a performance hit accessing memory in a different socket. Now, users can add a <code>numa</code> block alongside <code>cores</code> to tell the Nomad scheduler to either prefer or require cores in the same NUMA node.</p>\n<pre><code>resources {\n  cores = 8\n  numa {\n    affinity = \"require\"\n  }\n}</code></pre><p>If the <code>require</code> value is used, Nomad will reject any placement options that do not have the specified number of cores free on the same NUMA node. If <code>prefer</code> is used, Nomad will attempt to place cores together, but will not guarantee this placement.</p>\n\n<p>For multi-core, latency-sensitive workloads, NUMA-aware scheduling can greatly increase the performance of your Nomad tasks. For more information, see the <a href=\"https://developer.hashicorp.com/nomad/docs/v1.7.x/concepts/cpu\">Nomad CPU concepts documentation</a>.</p>\n\n<h2>Nomad actions</h2>\n\n<p>Nomad allows users to execute commands in the context of an allocation using the <code>nomad alloc exec</code> command. This can be helpful in one-off scenarios when you need to debug or run ad hoc commands within a container or alongside an application.</p>\n\n<p>Many Nomad users run the <code>exec</code> command to repeatedly do the same tasks. These users have to remember the commands they want to run and risk accidentally inputting the wrong command, sometimes in a highly privileged context. For these repeated tasks, Nomad actions now offers a simpler and safer user experience.</p>\n\n<p>Nomad actions allow job writers to define a named command that can later be executed within the context of an allocation. This makes it easy for job writers to codify, share, and execute repeated tasks in Nomad.</p>\n\n<p>Include the new <code>action</code> block in a jobspec’s task to define a command and arguments:</p>\n<pre><code>action \"migrate\" {\n  command = \"rake\"\n  args = [\"db:migrate\"]\n}\n\naction \"rollback\" {\n  command = \"rake\"\n  args = [\"db:rollback\"]\n}</code></pre><p>Then, once the job is up and running, any users with exec permissions can execute the action from the CLI, providing either an allocation ID or task and group names:</p>\n<pre><code>$ nomad action -alloc=a4nd1k -job=rails-app migrate\n\n$ nomad action -group=core -task=app -job=rails-app rollback</code></pre><p>They can execute actions from the UI as well:</p>\n<p>Users can run a predefined action on single allocations or allow Nomad to pick an allocation at random.</p>\n\n<h2>ACL roles and tokens UI</h2>\n\n<p>The Nomad UI now includes two new sections related to access control, roles, and tokens.</p>\n\n<p>ACL tokens have long been a part of Nomad, but until Nomad 1.7, Nomad administrators would have to manage tokens through the CLI or API. Now the Nomad UI includes pages to view, manage, and create ACL tokens. Users can list all existing tokens, disable tokens, and create new tokens from new dedicated pages.</p>\n<p><a href=\"https://developer.hashicorp.com/nomad/docs/concepts/acl#role\">ACL roles</a> were added in Nomad 1.4 as an easier way of managing ACL policies. A role is a named set of policies that can be attached to an ACL token. The Nomad UI now also includes an index and details page for ACL roles. Making it easier to create, manage, and delete ACL roles through one interface.</p>\n<h2>Distributed locks</h2>\n\n<p>Some Nomad workloads run with a single leader instance and one or many followers. One of the difficulties of dynamically running these workloads is synchronizing which instance of a workload should be the leader. Traditionally, Nomad users have relied on <a href=\"https://developer.hashicorp.com/consul/docs/dynamic-app-config/sessions\">Consul’s distributed locks</a> or a third party datastore to act as a source of truth for which application is a leader.</p>\n\n<p>Nomad 1.7 includes a built-in mechanism for distributed locks using <a href=\"https://developer.hashicorp.com/nomad/docs/concepts/variables\">Nomad variables</a>. Locks can be created and claimed using the API, the CLI, or with the Nomad API golang library. Let’s look at a quick example using the CLI and API.</p>\n\n<p>First, create a lock using the <code>nomad var lock</code> command. This will create a lock at a specific variable path, periodically renew the lock, and run a given script. In this case, the script will simply run for 30 seconds and log each second.</p>\n<pre><code>$ nomad var lock -verbose demo ./sleep-and-log.sh\nWriting to path \"demo\"\nUsing defaults for the lock\nAttempting to acquire lock\nVariable locked, ready to execute: ./sleep.sh\nstarting...\n1\n2\n3\n4\n…</code></pre><p>If you run the same command in another tab, it will recognize that the lock is currently taken by another process and it will wait until the original process finishes before running.</p>\n<pre><code>$ nomad var lock -verbose demo ./sleep-and-log.sh\nWriting to path \"demo\"\nUsing defaults for the lock\nAttempting to acquire lock</code></pre><p>This CLI command provides a simple way to coordinate locking behavior for simple scripts across any Nomad-connected machine.</p>\n\n<p>While the lock is in use, the Nomad variable will be marked with a “Lock” response.</p>\n<pre><code>$ nomad operator api /v1/var/demo | jq\n{\n  \"CreateIndex\": 50,\n  \"CreateTime\": 1698437371232685000,\n  \"Lock\": {\n\t\"TTL\": \"15s\",\n\t\"LockDelay\": \"15s\",\n\t\"ID\": \"a7e677f7-5a2c-9236-27d1-2aaafb333663\"\n  },\n  \"ModifyIndex\": 69,\n  \"ModifyTime\": 1698437877117772000,\n  \"Namespace\": \"default\",\n  \"Path\": \"demo\"\n}</code></pre><p>Apart from the CLI tool and API, the Nomad team is exploring adding distributed lock helpers directly into the Nomad jobspec to help enable leadership election. Feedback on this proposal is welcome on <a href=\"https://github.com/hashicorp/nomad/issues/18941\">this GitHub issue</a>.</p>\n\n<p>This behavior allows applications on Nomad to perform complex locking behavior and leadership coordination using Nomad as a source of truth. One such application now using this behavior is the Nomad Autoscaler.</p>\n\n<h2>High-availability autoscaler</h2>\n\n<p>The <a href=\"https://developer.hashicorp.com/nomad/tools/autoscaling\">Nomad Autoscaler</a> now includes a high-availability (HA) mode which allows multiple autoscaler instances to run in a cluster at once. A single instance will be elected leader while other follower instances stand by. If a leader instance fails, one of the follower instances will assume leadership and start making scaling decisions. The high-availability autoscaler ensures that a single node or allocation going down doesn’t affect critical autoscaling operations.</p>\n\n<p>In order to launch the autoscaler in HA mode, you must be using version 0.4+ of the Nomad Autoscaler, be on Nomad 1.7, and allow variable write access for the autoscaler job. See the <a href=\"https://developer.hashicorp.com/nomad/tools/autoscaling\">autoscaler documentation</a> to learn more.</p>\n\n<h2>More Nomad updates</h2>\n\n<p>Outside of these core improvements, new additions in Nomad 1.7 and in minor releases since Nomad 1.6 was released include:</p>\n\n<ul>\n<li>CSI volumes can now be expanded by changing the <a href=\"https://developer.hashicorp.com/nomad/docs/other-specifications/volume#capacity_min\"><code>capacity_min</code></a> value of a volume.</li>\n<li>Templates can be explicitly rerendered on task restart using the new <a href=\"https://developer.hashicorp.com/nomad/docs/job-specification/restart#render_templates\"><code>render_templates</code></a> field in the job <a href=\"https://developer.hashicorp.com/nomad/docs/job-specification/restart\"><code>restart</code></a> block.</li>\n<li>Added <a href=\"https://developer.hashicorp.com/nomad/docs/job-specification/periodic?ajs_aid=3d92270e-038c-4874-b2ae-c62c0d05d579&amp;product_intent=nomad#crons\"><code>crons</code> field</a> for multiple cron expressions in a periodic job.</li>\n<li>Support for <a href=\"https://developer.hashicorp.com/nomad/docs/job-specification/upstreams#destination_peer\"><code>destination_peer</code></a>, <a href=\"https://developer.hashicorp.com/nomad/docs/job-specification/upstreams#destination_type\"><code>destination_type</code></a>, <a href=\"https://developer.hashicorp.com/nomad/docs/job-specification/upstreams#local_bind_socket_path\"><code>local_bind_socker_path</code></a>, and <a href=\"https://developer.hashicorp.com/nomad/docs/job-specification/upstreams#local_bind_socket_mode\"><code>local_bind_socker_mode</code></a> added to Consul service mesh upstream config.</li>\n<li>New <a href=\"https://developer.hashicorp.com/nomad/docs/commands/operator/raft/transfer-leadership\"><code>transfer leadership</code> command</a> added to more easily switch raft leader nodes.</li>\n<li>Wildcards are now supported in the <code>-namespace</code> in <a href=\"https://developer.hashicorp.com/nomad/docs/commands/alloc\"><code>nomad alloc</code> commands</a>.</li>\n<li>Existing job information is <a href=\"https://github.com/hashicorp/nomad/issues/18553\">now available</a> in Sentinel policy checks in Nomad Enterprise.</li>\n<li>Added unofficial s390X builds to Nomad Enterprise releases.</li>\n<li>Added a <a href=\"https://github.com/hashicorp/nomad/pull/17964\">new Variable tab</a> to job details page in the Nomad UI.</li>\n<li>Added <a href=\"https://github.com/hashicorp/nomad/pull/16872\">support for Unix domain sockets</a> in the Nomad API package.</li>\n</ul>\n\n<h2>Community updates</h2>\n\n<p>If you’re familiar with Go or interested in learning/honing your Golang skills, we invite you to join the group of Nomad contributors helping to improve the product.</p>\n\n<p>Looking for a place to start? Head to the <a href=\"https://github.com/hashicorp/nomad/contribute\">Nomad contribute page</a> for a curated list of good first issues. If you’re a returning Nomad contributor looking for an interesting problem to tackle, take a glance at issues labeled “<a href=\"https://github.com/hashicorp/nomad/issues?q=is%3Aopen+is%3Aissue+label%3Ahelp-wanted\">help-wanted</a>” or “<a href=\"https://github.com/hashicorp/nomad/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\">good first issue</a>”. For help getting started, check out the <a href=\"https://github.com/hashicorp/nomad/tree/main/contributing\">Nomad contributing documentation</a> or comment directly on the issue with any questions you have. Community members can also contribute <a href=\"https://developer.hashicorp.com/nomad/integrations\">integrations to Nomad</a> or to the <a href=\"https://github.com/hashicorp/nomad-pack-community-registry\">Nomad Pack Community Registry</a>.</p>\n\n<p>We also encourage users to go to the official <a href=\"https://discuss.hashicorp.com/c/nomad/28\">Nomad Community Forums</a> or join us for <a href=\"https://www.hashicorp.com/community/office-hours\">community office hours</a> if they have Nomad questions or feedback. We also would like to recognize some of our community members for creating unofficial spaces for Nomad users to connect. Thank you to the communities on <a href=\"https://gitter.im/hashicorp-nomad/Lobby\">Gitter</a> and the <a href=\"https://discord.gg/dF28D6nvEh\">HashiCorp Community Discord</a>.</p>\n\n<h2>Getting started with Nomad 1.7</h2>\n\n<p>We encourage you to try out the new features in Nomad 1.7:</p>\n\n<ul>\n<li><a href=\"https://www.nomadproject.io/downloads\">Download Nomad 1.7</a> from the project website.</li>\n<li>Learn more about Nomad with <a href=\"https://learn.hashicorp.com/nomad\">tutorials on the HashiCorp Developer</a> site.</li>\n<li>Contribute to Nomad by submitting a pull request for a GitHub issue with the “<a href=\"https://github.com/hashicorp/nomad/issues?q=is%3Aopen+is%3Aissue+label%3Ahelp-wanted\">help wanted</a>” or “<a href=\"https://github.com/hashicorp/nomad/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\">good first issue</a>” label.</li>\n<li><a href=\"https://www.nomadproject.io/community\">Participate in our community</a> forums, office hours, and other events.</li>\n</ul>\n","author":"Mike Nomitch","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"e375b3e3d354dcc5c695e44115487fe8dbad8064eb15725696a732ae11c43b50","category":"Tech"}