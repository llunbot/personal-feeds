{"title":"Build secure AI applications on Azure with HashiCorp Terraform and Vault","link":"https://www.hashicorp.com/blog/build-secure-ai-applications-on-azure-with-hashicorp-terraform-and-vault","date":1706634000000,"content":"<p>HashiCorp and Microsoft have partnered to create <a href=\"https://developer.hashicorp.com/terraform/tutorials/modules/module\">Terraform modules</a> that follow Microsoft's <a href=\"https://learn.microsoft.com/en-us/azure/architecture/framework/\">Azure Well-Architected Framework</a> and best practices. In a previous blog post, we demonstrated how to <a href=\"https://www.hashicorp.com/blog/accelerating-ai-adoption-on-azure-with-terraform\">accelerate AI adoption on Azure with Terraform</a>. This post covers how to use a simple three-step process to build, secure, and enable OpenAI applications on Azure with HashiCorp Terraform and Vault. </p>\n\n<p>The code for this demo can be found on <a href=\"https://github.com/dawright22/azure-ai-demo.git\">GitHub</a>. You can leverage the Microsoft application outlined in this post and the Microsoft Azure Kubernetes Service (AKS) to integrate with OpenAI. You can also read more about how to <a href=\"https://learn.microsoft.com/en-gb/azure/aks/open-ai-quickstart?tabs=aoai\">deploy an application that uses OpenAI on AKS</a> on the Microsoft website.</p>\n<img src=\"https://www.datocms-assets.com/2885/1706630520-ai-arch-tf-vault-azure.png\" alt=\"This\" /><h2>Key considerations of AI</h2>\n\n<p>The rise in AI workloads is driving an expansion of cloud operations. <a href=\"https://www.gartner.com/en/newsroom/press-releases/11-13-2023-gartner-forecasts-worldwide-public-cloud-end-user-spending-to-reach-679-billion-in-20240#:%7E:text=Infrastructure%2Das%2Da%2Dservice,%25%20(see%20Table%201).\">Gartner predicts</a> that cloud infrastructure will grow 26.6% in 2024, as organizations deploying generative AI (GenAI) services look to the public cloud. To create a successful AI environment, orchestrating the seamless integration of artificial intelligence and operations demands a focus on security, efficiency, and cost control. </p>\n\n<h3>Security</h3>\n\n<p>Data integration, the bedrock of AI, not only requires the harmonious assimilation of diverse data sources but must also include a process to safeguard sensitive information. In this complex landscape, the deployment of p<a href=\"https://www.hashicorp.com/blog/what-is-public-key-infrastructure-pki\">ublic key infrastructure (PKI)</a> and <a href=\"https://www.hashicorp.com/resources/5-best-practices-for-secrets-management\">robust secrets management</a> becomes indispensable, adding cryptographic resilience to data transactions and ensuring the secure handling of sensitive information. For more information on the HashiCorp Vault solution, see our <a href=\"https://www.vaultproject.io/use-cases/automated-pki-infrastructure\">use-case page on Automated PKI infrastructure</a></p>\n\n<p>Machine learning models, pivotal in anomaly detection, predictive analytics, and root-cause analysis, not only provide operational efficiency but also serve as sentinels against potential security threats. Automation and orchestration, facilitated by tools like HashiCorp Terraform, extend beyond efficiency to become critical components in fortifying against security vulnerabilities. Scalability and performance, guided by resilient architectures and vigilant monitoring, ensure adaptability to evolving workloads without compromising on security protocols.</p>\n\n<h3>Efficiency and cost control</h3>\n\n<p>In response, platform teams are increasingly adopting infrastructure as code (IaC) to enhance efficiency and help control cloud costs. HashiCorp products underpin some of today’s largest AI workloads, using infrastructure as code to help eliminate idle resources and overprovisioning, and reduce infrastructure risk.</p>\n\n<h3>Automation with Terraform</h3>\n\n<p>This post delves into specific Terraform configurations tailored for application deployment within a containerized environment. The first step looks at using IaC principles to deploy infrastructure to efficiently scale AI workloads, reduce manual intervention, and foster a more agile and collaborative AI development lifecycle on the Azure platform. The second step focuses on how to build security and compliance into an AI workflow. The final step shows how to manage application deployment on the newly created resources. </p>\n\n<h2>Prerequisites</h2>\n\n<p>For this demo, you can use either Azure OpenAI service or OpenAI service:</p>\n\n<ul>\n<li>To use Azure OpenAI service, enable it on your Azure subscription using the <a href=\"https://aka.ms/oai/access\">Request Access to Azure OpenAI Service form</a>.</li>\n<li>To use OpenAI, sign up on the <a href=\"https://openai.com/\">OpenAI website</a>.</li>\n</ul>\n\n<h3>Step one: Build</h3>\n\n<p>First let's look at the <a href=\"https://registry.terraform.io/providers/hashicorp/helm/latest/docs\">Helm provider</a> block in <a href=\"https://github.com/dawright22/azure-ai-demo/blob/main/main.tf\">main.tf</a>:</p>\n<pre><code>provider \"helm\" {\n  kubernetes {\n  host                   = azurerm_kubernetes_cluster.tf-ai-demo.kube_config.0.host\n  username               = azurerm_kubernetes_cluster.tf-ai-demo.kube_config.0.username\n  password               = azurerm_kubernetes_cluster.tf-ai-demo.kube_config.0.password\n  client_certificate     = base64decode(azurerm_kubernetes_cluster.tf-ai-demo.kube_config.0.client_certificate)\n  client_key             = base64decode(azurerm_kubernetes_cluster.tf-ai-demo.kube_config.0.client_key)\n  cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.tf-ai-demo.kube_config.0.cluster_ca_certificate)\n  }\n}</code></pre><p>This code uses information from the AKS resource to populate the details in the <a href=\"https://helm.sh/\">Helm</a> provider, letting you deploy resources into AKS pods using native Helm charts. </p>\n\n<p>With this Helm chart method, you deploy multiple resources using Terraform in the <code>helm_release.tf</code> file. This file sets up HashiCorp Vault, cert-manager, and Traefik Labs’ ingress controller within the pods. The Vault configuration shows the Helm <code>set</code> functionality to customize the deployment:</p>\n<pre><code>resource \"helm_release\" \"vault\" {\n name       = \"vault\"\n chart      = \"hashicorp/vault\"\n\n set {\n   name = \"server.dev.enabled\"\n   value = \"true\"\n }\n set {\n   name = \"server.dev.devRootToken\"\n   value = \"AzureA!dem0\"\n }\n set {\n   name = \"ui.enabled\"\n   value = \"true\"\n }\n set {\n   name = \"ui.serviceType\"\n   value = \"LoadBalancer\"\n }\nset {\n name = \"ui.serviceNodePort\"\n value = \"null\"\n}\n set {\n   name = \"ui.externalPort\"\n   value = \"8200\"\n }\n}</code></pre><p>In this demo, the Vault server is customized to be in Dev Mode, have a defined root token, and enable external access to the pod via a load balancer using a specific port.</p>\n\n<p>At this stage you should have created a resource group with an AKS cluster and servicebus established. The containerized environment should look like this:</p>\n<img src=\"https://www.datocms-assets.com/2885/1706631335-ai-demo-base.png\" alt=\"Containerized\" /><p>If you want to log in to the Vault server at this stage, use the EXTERNAL-IP load balancer address with port 8200 (like this: <a href=\"http://%5BEXTERNAL_IP%5D:8200/\">http://[EXTERNAL_IP]:8200/</a>) and log in using AzureA!dem0.</p>\n\n<h3>Step two: Secure</h3>\n\n<p>Now that you have established a base infrastructure in the cloud and the microservices environment, you are ready to configure Vault resources to integrate PKI into your environment. This centers around the <code>pki_build.tf.second</code> file, which you need to rename to remove the <code>.second</code> extension and make it executable as a Terraform file. After performing a <code>terraform apply</code>, as you are adding to the current infrastructure, add the elements to set up Vault with a root certificate and issue this within the pod.</p>\n\n<p>To do this, use the <a href=\"https://registry.terraform.io/providers/hashicorp/vault/latest/docs\">Vault provider</a> and configure it to define a mount point for the PKI, a root certificate, role cert URL, issuer, and policy needed to build the PKI:</p>\n<pre><code>resource \"vault_mount\" \"pki\" {\n path        = \"pki\"\n type        = \"pki\"\n description = \"This is a PKI mount for the Azure AI demo.\"\n\n default_lease_ttl_seconds = 86400\n max_lease_ttl_seconds     = 315360000\n}\n\nresource \"vault_pki_secret_backend_root_cert\" \"root_2023\" {\n  backend     = vault_mount.pki.path\n  type        = \"internal\"\n  common_name = \"example.com\"\n  ttl         = 315360000\n  issuer_name = \"root-2023\"\n}</code></pre><p>Using the same Vault provider you can also configure Kubernetes authentication to create a role named <code>\"issuer\"</code> that binds the PKI policy with a Kubernetes service account named <code>issuer</code>:</p>\n<pre><code>resource \"vault_auth_backend\" \"kubernetes\" {\n  type = \"kubernetes\"\n}\nresource \"vault_kubernetes_auth_backend_config\" \"k8_auth_config\" {\n  backend           = vault_auth_backend.kubernetes.path\n  kubernetes_host   = azurerm_kubernetes_cluster.tf-ai-demo.kube_config.0.host\n}\n\nresource \"vault_kubernetes_auth_backend_role\" \"k8_role\" {\n  backend                          = vault_auth_backend.kubernetes.path\n  role_name                        = \"issuer\"\n  bound_service_account_names      = [\"issuer\"]\n  bound_service_account_namespaces = [\"default\",\"cert-manager\"]\n  token_policies                   = [\"default\", \"pki\"]\n  token_ttl                        = 60\n  token_max_ttl                    = 120\n}</code></pre><p>The role connects the Kubernetes service account, <code>issuer</code>, which is created in the default namespace with the PKI Vault policy. The tokens returned after authentication are valid for 60 minutes. The Kubernetes service account name, <code>issuer</code>, is created using the Kubernetes provider, discussed in step three, below.  These resources are used to configure the model to use HashiCorp Vault to manage the PKI certification process.</p>\n\n<p>The image below shows how HashiCorp Vault interacts with cert-manager to issue certificates to be used by the application:</p>\n<img src=\"https://www.datocms-assets.com/2885/1706631986-token-reviewer-api-k8s-vault.png\" alt=\"How\" /><h3>Step three: Enable</h3>\n\n<p>The final stage requires another <code>tf apply</code> as you are again adding to the environment. You now use  <code>app_build.tf.third</code> to build an application. To do this you need to rename <code>app_build.tf.third</code> to remove the <code>.third</code> extension and make it executable as a Terraform file. </p>\n\n<p>Interestingly,  the code in <code>app_build.tf</code> uses the <a href=\"https://registry.terraform.io/providers/hashicorp/kubernetes/latest\">Kubernetes provider resource </a><code>kubernetes_manifest</code>. The manifest values are the HCL (HashiCorp Configuration Language) representation of a Kubernetes YAML manifest. (We converted an existing manifest from YAML to HCL to get the code needed for this deployment. You can do this using Terraform’s built-in <a href=\"https://www.terraform.io/docs/configuration/functions/yamldecode.html\"><code>yamldecode()</code></a> function or the <a href=\"https://github.com/jrhouston/tfk8s\">HashiCorp tfk8s tool</a>.)</p>\n\n<p>The code below represents an example of a service manifest used to create a service on port 80 to allow access to the store-admin app that was converted using the tfk8s tool:</p>\n<pre><code>resource \"kubernetes_manifest\" \"service_tls_admin\" {\n manifest = {\n   \"apiVersion\" = \"v1\"\n   \"kind\" = \"Service\"\n   \"metadata\" = {\n     \"name\" = \"tls-admin\"\n     \"namespace\" = \"default\"\n   }\n   \"spec\" = {\n     \"clusterIP\" = \"10.0.160.208\"\n     \"clusterIPs\" = [\n       \"10.0.160.208\",\n     ]\n     \"internalTrafficPolicy\" = \"Cluster\"\n     \"ipFamilies\" = [\n       \"IPv4\",\n     ]\n     \"ipFamilyPolicy\" = \"SingleStack\"\n     \"ports\" = [\n       {\n         \"name\" = \"tls-admin\"\n         \"port\" = 80\n         \"protocol\" = \"TCP\"\n         \"targetPort\" = 8081\n       },\n     ]\n     \"selector\" = {\n       \"app\" = \"store-admin\"\n     }\n     \"sessionAffinity\" = \"None\"\n     \"type\" = \"ClusterIP\"\n   }\n }\n}</code></pre><h3>Putting it all together</h3>\n\n<p>Once you’ve deployed all the elements and applications, you use the certificate stored in a Kubernetes secret to apply the TLS configuration to inbound HTTPS traffic. In the example below, you associate <code>\"example-com-tls\"</code> — which includes the certificate created by Vault earlier — with the inbound <code>IngressRoute</code> deployment using the Terraform manifest:</p>\n<pre><code>resource \"kubernetes_manifest\" \"ingressroute_admin_ing\" {\n manifest = {\n   \"apiVersion\" = \"traefik.containo.us/v1alpha1\"\n   \"kind\" = \"IngressRoute\"\n   \"metadata\" = {\n     \"name\" = \"admin-ing\"\n     \"namespace\" = \"default\"\n   }\n   \"spec\" = {\n     \"entryPoints\" = [\n       \"websecure\",\n     ]\n     \"routes\" = [\n       {\n         \"kind\" = \"Rule\"\n         \"match\" = \"Host(`admin.example.com`)\"\n         \"services\" = [\n           {\n             \"name\" = \"tls-admin\"\n             \"port\" = 80\n           },\n         ]\n       },\n     ]\n     \"tls\" = {\n       \"secretName\" = \"example-com-tls\"\n     }\n   }\n }\n}</code></pre><p>To test access to the OpenAI store-admin site, you need a domain name. You use a <a href=\"https://en.wikipedia.org/wiki/Fully_qualified_domain_name\">FQDN</a> to access the site that you are going to protect using the generated certificate and HTTPS. </p>\n\n<p>To set this up, access your AKS cluster. The Kubernetes command-line client, <a href=\"https://kubernetes.io/docs/reference/kubectl/\">kubectl</a>, is already installed in your Azure Cloud Shell. You enter:</p>\n\n<pre><code>kubectl get svc\n</code></pre>\n\n<p>And should get the following output:</p>\n<pre><code>NAME                       TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)                      AGE\nhello                      LoadBalancer   10.0.23.77     20.53.189.251   443:31506/TCP                94s\nkubernetes                 ClusterIP      10.0.0.1                 443/TCP                      29h\nmakeline-service           ClusterIP      10.0.40.79               3001/TCP                     4h45m\nmongodb                    ClusterIP      10.0.52.32               27017/TCP                    4h45m\norder-service              ClusterIP      10.0.130.203             3000/TCP                     4h45m\nproduct-service            ClusterIP      10.0.59.127              3002/TCP                     4h45m\nrabbitmq                   ClusterIP      10.0.122.75              5672/TCP,15672/TCP           4h45m\nstore-admin                LoadBalancer   10.0.131.76    20.28.162.45    80:30683/TCP                 4h45m\nstore-front                LoadBalancer   10.0.214.72    20.28.162.47    80:32462/TCP                 4h45m\ntraefik                    LoadBalancer   10.0.176.139   20.92.218.96    80:32240/TCP,443:32703/TCP   29h\nvault                      ClusterIP      10.0.69.111              8200/TCP,8201/TCP            29h\nvault-agent-injector-svc   ClusterIP      10.0.31.52               443/TCP                      29h\nvault-internal             ClusterIP      None                     8200/TCP,8201/TCP            29h\nvault-ui                   LoadBalancer   10.0.110.159   20.92.217.182   8200:32186/TCP               29h</code></pre><p>Look for the <code>traefik</code> entry and note the EXTERNALl-IP (yours will be different than the one shown above). Then, on your local machine, create a localhost entry for <code>admin.example.com</code> to resolve to the address. For example on MacOS, you can use <code>sudo nano /etc/hosts</code>. If you need more help, search “create localhost” for your machine type.</p>\n<img src=\"https://www.datocms-assets.com/2885/1706632293-image4-host-database.png\" alt=\"Localhost\" /><p>Now you can enter <a href=\"https://admin.example.com\">https://admin.example.com</a> in your browser and examine the certificate.</p>\n\n<p>This certificate is built from a root certificate authority (CA) held in Vault (example.com) and is valid against this issuer (admin.example.com) to allow for secure access over HTTPS. To verify the right certificate is being issued, expand the detail on our browser and view the cert name and serial number:</p>\n<img src=\"https://www.datocms-assets.com/2885/1706632790-image1-ai-demo-example.png\" alt=\"cert\" /><p>You can then check this in Vault and see if the common name and serial numbers match.</p>\n<img src=\"https://www.datocms-assets.com/2885/1706632858-image6-certificate.png\" alt=\"View\" /><p>Terraform has configured all of the elements using the three-step approach shown in this post. To test the OpenAI application, follow <a href=\"https://learn.microsoft.com/en-gb/azure/aks/open-ai-quickstart?tabs=aoai#test-the-application\">Microsoft’s instructions</a>. Skip to Step 4 and use  <a href=\"https://admin.example.com\">https://admin.example.com</a> to access the <code>store-admin</code> and the original <code>store-front</code> load balancer address to access the <code>store-front</code>.</p>\n\n<h3>DevOps for AI app development</h3>\n\n<p>To learn more and keep up with the latest trends in DevOps for AI app development, check out this Microsoft Reactor session with HashiCorp Co-Founder and CTO Armon Dadgar: <a href=\"https://www.youtube.com/watch?v=Yj-EsoXFz58\">Using DevOps and copilot to simplify and accelerate development of AI apps</a>. It covers how developers can use <a href=\"https://github.com/features/copilot\">GitHub Copilot</a> with Terraform to create code modules for faster app development. You can get started by <a href=\"https://app.terraform.io/public/signup/account?_gl=1*y2k3f1*_ga*MTM4ODIxMDM5OC4xNjc3MjY1MzI4*_ga_P7S46ZYEKW*MTcwNjU1NDUwOC4yMTMuMS4xNzA2NTU1NDgyLjI0LjAuMA..&amp;ajs_aid=586a7e51-5cbc-4bc9-b0cd-190690d71f44&amp;product_intent=terraform&amp;utm_source=email&amp;utm_medium=email&amp;utm_offer=webinar&amp;utm_campaign=24Q4_AMER_VIRTUALPARTNERDAY2024%3AZEROTRUSTSECURITY_WEBINAR&amp;utm_content=DD\">signing up for a free Terraform Cloud account</a>.</p>\n","author":"David Wright","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"846a3660b815dfd8c3ff9a1286f8e3cc68ba012dcfdde4eb5befbabfdbf8ab12","category":"Tech"}