{"title":"สรุปการแบ่งปันเรื่อง JavaScript Testing (every day) จากงาน BKK.JS #19: Into the New Year","link":"https://www.somkiat.cc/sharing-javascript-testing-every-day/","date":1706349003000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/01/bkkjs-javascript-testing-150x150.jpg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/01/bkkjs-javascript-testing-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2024/01/bkkjs-javascript-testing-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/01/bkkjs-javascript-testing.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/01/bkkjs-javascript-testing.jpg\" width=\"579\" height=\"365\" /></a></figure>\n\n\n\n<p>มีโอกาสมา sharing เรื่อง JavaScript Testing 0-7 (every day) ในงาน <strong><a href=\"https://www.eventpop.me/e/16880\" target=\"_blank\">BKK.JS #19</a></strong><br />โดยการแบ่งปันครั้งนี้ใช้เวลา 30 นาที<br />มีเนื้อหาคร่าว ๆ ดังนี้</p>\n\n\n\n<span></span>\n\n\n\n<ul>\n<li>คำถามหลักคือ <strong>เราทดสอบไปทำไม ?</strong> เพื่อให้เข้าใจเกี่ยวกับความต้องการทั้งเชิง business และ technical</li>\n\n\n\n<li>ปัญหาของการส่งมอบ software ทั้งเรื่อง<strong>คุณภาพ</strong> และ ปริมาณที่ส่งมอบ เราสนใจอะไรบ้าง</li>\n\n\n\n<li>รูปแบบของการทดสอบระบบงาน เช่น ice-cream cone, pyramid testing, cupcake testing และ trophy testing เป็นต้น เพื่อให้เห็นแนวคิดและรูปแบบต่าง ๆ ที่น่าสนใจ</li>\n\n\n\n<li>การพัฒนาและส่งมอบแบบ incremental นั่นคือส่งแบบ feature-by-feature จากนั้นคำว่า <strong>เสร็จ</strong> คือ ต้อง coding เสร็จ และ ทดสอบเรียบร้อย</li>\n\n\n\n<li>แนวทางการทดสอบทั้งแบบ manual และ automation ว่ามีที่มาที่ไป และ trade-off อย่างไรบ้าง</li>\n</ul>\n\n\n\n<p><strong>จากนั้นเข้าสู่การทดสอบระบบงานด้วย JavaScript</strong></p>\n\n\n\n<p>โดยที่ JavaScript นั้นจะมีใช้งานทั้งฝั่ง frontend และ backend<br />ดังนั้นจะมี library ที่อาจจะเหมือน หรือ ต่างกันได้<br />ยกตัวอย่างเช่น</p>\n\n\n\n<ul>\n<li>Web browser testing ใช้งาน Playwright, Cypress และ Selenium เป็นต้น</li>\n\n\n\n<li>API testing หรือ Backend testing เช่น Playwright, Cypress, Postman และ SuperTest เป็นต้น</li>\n\n\n\n<li>ฝั่งของ frontend ทำการ mock api server หรือ backend ได้เลย เช่น Cypress, Playwright, Mock Service Worker และ Axios mock adapter เป็นต้น</li>\n\n\n\n<li>ฝั่งของ backend ทำการ mock api server และ database ได้เลย เช่น Docker, Nock และ Mock Service Worker เป็นต้น</li>\n</ul>\n\n\n\n<p><strong>จากนั้นแนะนำการทดสอบ 3 แบบ คือ</strong></p>\n\n\n\n<ul>\n<li>End-to-End testing</li>\n\n\n\n<li>Isolated testing</li>\n\n\n\n<li>Contract testing ด้วย PACT</li>\n</ul>\n\n\n\n<p>สุดท้ายแนะนำให้เรียนรู้จากความผิดพลาด<br />และเรียนรู็การสร้าง test case จาก Bug (Bug-Driven Development)</p>\n\n\n\n<p>Slide อยู่ที่ <a href=\"https://speakerdeck.com/up1/javascript-testing-every-day\" target=\"_blank\">JavaScript Testing Every Day</a></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"ad4d9a8d2e5d29802b3bc50f2a01ca1c4814df3dfb129d67dd679797689123f9","category":"Thai"}