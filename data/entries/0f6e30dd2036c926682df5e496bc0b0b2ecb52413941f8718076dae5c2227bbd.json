{"title":"Goodbye Microsoft SQL Server, Hello Babelfish","link":"https://aws.amazon.com/blogs/aws/goodbye-microsoft-sql-server-hello-babelfish/","date":1635454614000,"content":"<p>Many of our customers are telling us they want to move away from proprietary database vendors to avoid expensive costs and <a href=\"https://twitter.com/Werner/status/1158458860790779905\">burdensome licensing terms</a>. But migrating away from commercial and legacy databases can be time-consuming and resource-intensive. When migrating your databases, you can automate the migration of your database schema and data using the <a href=\"https://aws.amazon.com/dms/schema-conversion-tool/\">AWS Schema Conversion Tool</a> and <a href=\"https://aws.amazon.com/dms/\">AWS Database Migration Service</a>. But there is always more work to do to migrate the application itself, including rewriting application code that interacts with the database. Motivation is there, but costs and risks are often limiting factors.</p> \n<p>Today, we are making <a href=\"https://aws.amazon.com/rds/aurora/babelfish/\">Babelfish for Aurora PostgreSQL</a> available. <span>Babelfish</span> allows <a href=\"https://aws.amazon.com/rds/aurora/\">Amazon Aurora</a> PostgreSQL-Compatible Edition to understand the SQL Server wire protocol. It allows you to migrate your SQL Server applications to PostgreSQL cheaper, faster, and with less risks involved with such change.</p> \n<p>You can migrate your application in a fraction of the time that a traditional migration would require. You continue to use the existing queries and drivers your application uses today. Just point the application to an <a href=\"https://aws.amazon.com/rds/aurora/\">Amazon Aurora</a> PostgreSQL database with <span>Babelfish</span> activated. <span>Babelfish</span> adds the capability to <a href=\"https://aws.amazon.com/rds/aurora/\">Amazon Aurora</a> PostgreSQL to understand the SQL Server wire protocol <a href=\"https://en.wikipedia.org/wiki/Tabular_Data_Stream\">Tabular Data Stream (TDS)</a>, as well as extending PostgreSQL to understand commonly used <a href=\"https://en.wikipedia.org/wiki/Transact-SQL\">T-SQL</a> commands used by SQL Server. Support for T-SQL includes elements such as the SQL dialect, static cursors, data types, triggers, stored procedures, and functions. <span>Babelfish</span> reduces the risk associated with database migration projects by significantly reducing the number of changes required to the application. When adopting <span>Babelfish</span>, you save on licensing costs of using SQL Server. <a href=\"https://aws.amazon.com/rds/aurora/\">Amazon Aurora</a> provides the security, availability, and reliability of commercial databases at 1/10th the cost.</p> \n<p>SQL Server has evolved over more than 30 years, and we do not expect to support all functionalities right away. Instead, we focused on the most common T-SQL commands and returning the correct response or an error message. For example, the <code>MONEY</code> datatype has different characteristics in SQL Server (with four decimals precision) and PostgreSQL (with two decimals precision). Such a subtle difference might lead to rounding errors and have a significant impact on downstream processes, such as financial reporting. In this case, and many others, <span>Babelfish</span> ensures the semantics of SQL Server data types and T-SQL functionality are preserved: we created a <code>MONEY</code> datatype that behaves as SQL Server apps would expect. When you create a table with this datatype through the Babelfish connection, you get this compatible datatype and behaviors that a SQL Server app would expect.</p> \n<p><span><strong>Create a Babelfish Cluster Using the Console</strong></span><br /> To show you how <span>Babelfish</span> works, let’s first connect to the console and create a new <span>Amazon Aurora</span> PostgreSQL cluster. The procedure is no different than for the regular <a href=\"https://aws.amazon.com/rds/aurora/\">Amazon Aurora</a> database. In the <a href=\"https://aws.amazon.com/rds/\">RDS</a> launch wizard, I first make sure I select an Aurora version compatible with PostgreSQL 13.4, or more recent. The updated console has additional filters to help you select the versions that are compatible with <span>Babelfish</span>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/29/Standard-create-filter-on-Blog.jpg\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/29/Standard-create-filter-on-Blog.jpg\" /></a></p> \n<p>Then, lower on the page, I select the option <strong>Turn on Babelfish</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-27_12-47-09.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-27_12-47-09.png\" /></a></p> \n<p>Under <strong>Monitoring</strong> section, I also make sure I turn off <strong>Enable Enhanced monitoring</strong>. <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.Enabling.html\">This option requires additional IAM permissions and preparation</a> that are not relevant for this demo.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-28_10-29-38.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-28_10-29-38-1024x151.png\" /></a>After a couple of minutes, my cluster is created, it has two instances, one writer and one reader.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-28_14-49-27.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-28_14-49-27-1024x277.png\" /></a></p> \n<p><span><strong>Create a Babelfish Cluster Using the CLI</strong></span><br /> Alternatively, I may use the <span>CLI</span> to create a cluster. I first create a parameter group to activate <span>Babelfish</span> (the console does it automatically):</p> \n<pre><code>aws rds create-db-cluster-parameter-group             \\\n    --db-cluster-parameter-group-name myapp-babelfish \\\n    --db-parameter-group-family aurora-postgresql13   \\\n    --description \"babelfish APG 13\"\naws rds modify-db-cluster-parameter-group             \\\n    --db-cluster-parameter-group-name myapp-babelfish \\\n    --parameters \"ParameterName=rds.babelfish_status,ParameterValue=on,ApplyMethod=pending-reboot\" \\</code></pre> \n<p>Then I create the database cluster (when using the command below, adjust the security group id and the subnet group name) :</p> \n<pre><code>aws rds create-db-cluster \\\n    --db-cluster-identifier awsnewblog-cli-demo \\\n    --master-username postgres \\  \n    --master-user-password Passw0rd \\\n    --engine aurora-postgresql \\\n    --engine-version 13.4 \\\n    --vpc-security-group-ids sg-abcd1234 \\\n    --db-subnet-group-name default-vpc-1234abcd \\\n    --db-cluster-parameter-group-name myapp-babelfish\n{\n    \"DBCluster\": {\n        \"AllocatedStorage\": 1,\n        \"AvailabilityZones\": [\n            \"us-east-1c\",\n            \"us-east-1d\",\n            \"us-east-1a\"\n        ],\n        \"BackupRetentionPeriod\": 1,\n        \"DBClusterIdentifier\": \"awsnewblog-cli-demo\",\n        \"Status\": \"creating\",\n        ... &lt;redacted for brevity&gt; ...\n    }\n}</code></pre> \n<p>Once the cluster is created, I create an instance using</p> \n<pre><code>aws rds create-db-instance \\\n    --db-instance-identifier myapp-db1 \\\n    --db-instance-class db.r5.4xlarge \\\n    --db-subnet-group-name default-vpc-1234abcd \\\n    --db-cluster-identifier awsnewblog-cli-demo \\\n    --engine aurora-postgresql\n{\n    \"DBInstance\": {\n        \"DBInstanceIdentifier\": \"myapp-db1\",\n        \"DBInstanceClass\": \"db.r5.4xlarge\",\n        \"Engine\": \"aurora-postgresql\",\n        \"DBInstanceStatus\": \"creating\",\n        ... &lt;redacted for brevity&gt; ...</code></pre> \n<p><span><strong>Connect to the Babelfish Cluster<br /> </strong></span>Once the cluster and instances are ready, I connect to the writer instance to create the database itself. I may connect to the instance using <a href=\"https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15\">SQL Server Management Studio (SSMS)</a> or other SQL client such as <code>sqlcmd</code>. The Windows client must be able to connect to the <span>Babelfish</span> cluster, I made sure the RDS security group authorizes connections from the Windows host.</p> \n<p>Using SSMS on Windows, I select <strong>New Query</strong> in the toolbar, I enter the database DNS name as <strong>Server</strong> <strong>name.</strong> I select <strong>SQL Server Authentication</strong> and I enter the database <strong>Login</strong> and <strong>Password</strong>. I click on <strong>Connect.</strong></p> \n<p><em><strong>Important</strong></em>: Do not connect via the SSMS Object Explorer. Be sure to connect using the query editor via the <strong>New Query</strong> button. At this time, <span>Babelfish</span> supports the query editor, but not the Object Explorer.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-28_10-17-43.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-28_10-17-43-1024x569.png\" /></a></p> \n<p>Once connected, I check the version with <code>select @@version</code> statement and click the green <strong>Execute</strong> button in the toolbar. I can read the statement result on the bottom part of the screen.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-28_15-02-18-1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-28_15-02-18-1-1024x187.png\" /></a></p> \n<p>Finally, I create the database on the instance with the <code>create database demo</code> statement.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-28_10-32-55-1.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-28_10-32-55-1-1024x253.png\" /></a></p> \n<p>By default, <span>Babelfish</span> runs in single-db mode. Using this mode, you can have maximum one user database per instance. It allows to have a close mapping of schema names between SQL Server and PostgreSQL. Alternatively, you may turn on multi-db mode at cluster creation time. This allows you to create multiple user databases per instance. In PostgreSQL, user databases will be mapped to multiple schemas with the database name as a prefix.</p> \n<p><span><strong>Run an Application</strong></span><br /> For the purpose of this demo, I use a database schema provided by <a href=\"https://www.sqlservertutorial.net\">SQLServerTutorial.net</a> as part of their <a href=\"https://www.sqlservertutorial.net/load-sample-database/\">SQL Server Tutorial</a> to create a schema and populate it with data. The <a href=\"https://github.com/sebsto/babelfish-demo\">SQL script and application C# code I use in this demo</a> are available on my <a href=\"https://github.com/sebsto/babelfish-demo\">GitHub repository</a>. A big thanks to my colleague <a href=\"https://www.linkedin.com/in/anuja-malik-0b796544/\">Anuja</a> for providing me with a C# demo application.</p> \n<p>In SQL Server Management Studio, I open the <a href=\"https://github.com/sebsto/babelfish-demo/blob/main/sql/BikeStores%20Sample%20Database%20-%20create%20objects.sql\">create_objects.sql script</a> and I choose the green <strong>execute</strong> icon on the top toolbar. A confirmation message tells me the database schema is created.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-28_10-38-54.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/10/28/2021-10-28_10-38-54-1024x1017.png\" /></a></p> \n<p>I repeat the operation with the <a href=\"https://raw.githubusercontent.com/sebsto/babelfish-demo/main/sql/BikeStores%20Sample%20Database%20-%20load%20data.sql\">load_data.sql</a> script to load data in the newly created tables. Data loading takes a few minutes to run.</p> \n<p>Now the database is loaded, let’s open <a href=\"https://www.linkedin.com/in/anuja-malik-0b796544/\">Anuja</a>‘s <a href=\"https://github.com/sebsto/babelfish-demo/blob/main/src/app.cs\"> C# application developed to access a SQL Server database</a>. I modify two lines of code:</p> \n<ul> \n <li>line 12 : I type the DNS name of the <span>Babelfish</span> cluster I created earlier. Note that I use the DNS name of a “write” node from my cluster.</li> \n <li>line 15 : I type the password I entered when I created the database cluster.</li> \n</ul> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/2021-08-03_11-57-28.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/2021-08-03_11-57-28-1024x502.png\" /></a></p> \n<p>And that’s it! No other modification is required on this app. This code written to query and interact with SQL Server is just working “as-is” on Aurora PostgreSQL with <span>Babelfish</span>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/2021-08-03_14-48-13.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/2021-08-03_14-48-13-1024x570.png\" /></a></p> \n<p><span><strong>Open Source Transparency<br /> </strong></span>We decided to open-source the technology behind <span>Babelfish</span> to create <a href=\"https://www.babelfishpg.org/\">the Babelfish for PostgreSQL open source project</a>. It uses the permissive <a href=\"http://www.apache.org/licenses/LICENSE-2.0\">Apache 2.0</a> and <a href=\"https://www.postgresql.org/about/licence/\">PostgreSQL</a> licenses, meaning you can modify or tweak or distribute Babelfish in whatever fashion you see fit. <a href=\"https://www.babelfishpg.org/\">Over time, we are shifting Babelfish to fully open development on GitHub</a>, so there is transparency from the start. Now, anyone, whether you are an AWS customer or not, can use Babelfish to leave behind SQL Server and quickly, easily, and cost-effectively migrate your applications to open source PostgreSQL. We believe Babelfish is going to make PostgreSQL accessible to a much wider group of customers and developers than ever before, particularly those with large numbers of complex applications originally written for SQL Server.</p> \n<p><span><strong>Availability<br /> </strong></span><a href=\"https://aws.amazon.com/rds/aurora/babelfish/\">Babelfish for Aurora PostgreSQL</a> is available today in all publicly available AWS Regions at no additional cost. <a href=\"https://aws.amazon.com/rds/aurora/babelfish/\">Start your application migration today</a>.</p> \n<a href=\"https://twitter.com/sebsto\">-- seb</a> \n<p>PS : if you wonder where the name Babelfish comes from, just remember the answer is 42. (Or <a href=\"https://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy\">you can read this slightly longer answer</a>.)</p>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"0f6e30dd2036c926682df5e496bc0b0b2ecb52413941f8718076dae5c2227bbd","category":"Tech"}