{"title":"Cloudflare อัพเกรด PostgreSQL ขนาด 1.5TB เขียนไม่หยุดวันละ 10 ล้านครั้ง downtime 2 วินาที","link":"https://www.blognone.com/node/142846","date":1730259911000,"content":"<div><div><div><p>Cloudflare รายงานถึงการอัพเกรดฐานข้อมูลสำคัญของบริษัท คือฐานข้อมูล DNS ที่ทางบริษัทเป็น Authoritive DNS ขนาดใหญ่ที่สุดในโลก คิดเป็น 14.3% (ที่สองคือ GoDaddy 10.3%) ฐานข้อมูลนี้เก็บ zone file ที่ระบุไอพีต่างๆ โดยเปิดให้ใช้งานผ่านทาง DNS Records API และซิงก์ออกไปยังฐานข้อมูล key-value ทั่วโลกเพื่อให้คนทั่วไปมาคิวรีอีกครั้ง</p>\n<p>ฐานข้อมูลนี้เป็น PostgreSQL ที่ไม่ระบุเวอร์ชั่น เรียกว่า cfdb โดยก่อนหน้านี้บริการอื่นๆ ก็เคยอยู่บน PostgreSQL เหมือนกันแต่ย้ายออกไปแล้วก่อนหน้านี้ เหลือบริการ DNS ใช้งานเป็นหลักและมีตารางหลักเหลือเพียงสองตาราง คือ <code>cf_rec</code> และ <code>cf_archived_rec</code> แต่เพียงแค่สองตารางนี้ก็มีขนาด 1,700 ล้านแถว ขนาดบนดิสก์ 1.5TB และการใช้งานปกติ มีการเพิ่มข้อมูลวันละ 3-5 ล้านแถว, แก้ไข 1 ล้านแถว, และลบ 3-5 ล้านแถว</p>\n<p>แผนการอัพเกรดมีเงื่อนไขสำคัญคือข้อมูลต้องไม่หายเลย และ downtime ต้องสั้นมากๆ ยอมรับได้เพียงไม่กี่วินาทีเท่านั้น โดยการอัพเกรดครั้งนี้จะทำให้ทีมงานสามารถใช้ฟีเจอร์ของ PostgreSQL รุ่นล่าสุดได้ (ไม่ระบุว่าเป็น<a href=\"https://www.blognone.com/node/142260\">เวอร์ชั่น 17</a> ที่เพิ่งออกมาหรือไม่) เรียกชื่อฐานข้อมูลใหม่นี้ว่า dnsdb เพราะเหลือแต่ DNS ที่ใช้งานแล้ว</p>\n<p>ทีมงานลอง <a href=\"https://github.com/2ndQuadrant/pglogical\">pgLogical</a> เป็นตัวเลือกแรก แต่พบว่าไม่ตอบโจทย์เงื่อนไขหลายข้อ เช่น ต้องสามารถย้ายฐานข้อมูลกลับได้หากพบปัญหา, ต้องการทำ partition, ตารางอื่นๆ ใน cfdb เดิมต้องเข้าถึงข้อมูลใน dnsdb ได้ด้วย จึงอออกแบบแนวทางการย้ายฐานข้อมูลขึ้นมาใหม่ เพิ่มตารางพิเศษสำหรับติดตามกระบวนการย้ายฐานข้อมูลบน จากนั้นย้ายฐานข้อมูลเริ่มต้น โดยไม่ใช้ <code>pg_dump</code> เพราะไม่ต้องการให้กระทบงานบน production แต่อาศัยการสั่ง COPY บล็อคละ 1 ล้านแถวแล้วส่งไปยังฐานข้อมูลใหม่เลยโดยตรง จากนั้นรันสคริปต์ส่งข้อมูลที่กำลังแก้ไขเพื่อซิงก์ไปยังฐานข้อมูลปลายทาง ทุกๆ 3 วินาที รันอยู่หลายสัปดาห์เพื่อให้แน่ใจว่าฐานข้อมูลปลายทางตามทันจริง</p>\n<p>จังหวะสุดท้ายก่อนย้าย คือการสร้างตาราง <code>cf_migration_manager</code> เปิดให้ DNS Records API มาตรวจสอบว่ากำลังจะย้ายหรือยัง หรือหากย้ายแล้วพร้อมสำหรับเขียนข้อมูลใหม่หรือไม่ หากยังไม่พร้อมฝั่ง API จะอม request รอไว้ก่อน จากนั้นทีมงานปรับโปรเซสซิงก์ให้รันทุกๆ 0.5 วินาที เมื่อพร้อมแล้วสั่งล็อกฐานข้อมูลให้ API หยุดเขียน ย้ายข้อมูลที่เหลือทั้งหมด และเปิดให้เขียนฐานข้อมูลที่ dnsdb กระบวนการทั้งหมดนี้ใช้เวลาไม่ถึง 2 วินาท หลังจากย้าย DNS Records API เกิด latency สูงขึ้นประมาณ 7 นาทีแล้วก็กลับไปเป็นปกติ</p>\n<p>ที่มา - <a href=\"https://blog.cloudflare.com/migrating-billions-of-records-moving-our-active-dns-database-while-in-use/\">Cloudflare</a></p>\n<p><img alt=\"No Description\" src=\"https://www.blognone.com/sites/default/files/externals/dccc4d53666275c85c1d1cea8e3aef03.jpeg\" /></p>\n</div></div></div><div><div>Topics: </div><div><div><a href=\"/topics/cloudflare\">Cloudflare</a></div><div><a href=\"/topics/postgresql\">PostgreSQL</a></div><div><a href=\"/topics/database\">Database</a></div></div></div>","author":"lew","siteTitle":"Blognone","siteHash":"ededadcf18490b3937e7dd89ebe8c00dc129addbdf1ebe4aff1f458146693da0","entryHash":"5f8fbdfc18780db7561f6e7d0b3c28bcc7f4b49f61db9ffe28ce3118f7fafe0f","category":"Thai"}