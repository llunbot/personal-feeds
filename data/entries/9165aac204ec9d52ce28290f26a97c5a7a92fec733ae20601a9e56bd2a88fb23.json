{"title":"Terraform Cloud no-code provisioning adds module version upgrades in beta","link":"https://www.hashicorp.com/blog/terraform-cloud-no-code-provisioning-adds-module-version-upgrades-in-beta","date":1695916800000,"content":"<p>Earlier this year, we announced general availability of <a href=\"https://www.hashicorp.com/blog/terraform-cloud-no-code-provisioning-is-now-ga-with-new-features\">no-code provisioning</a> for HashiCorp Terraform Cloud Plus customers. This new deployment method gives organizations a self-service workflow in Terraform Cloud for application developers and others who need infrastructure but may not know Terraform or HashiCorp Configuration Language (HCL). No-code provisioning empowers cloud platform teams to set up their modules for push-button self-service, allowing stakeholders with infrastructure needs to provision those modules without having to manage Terraform configuration repos or write code.</p>\n\n<p>No-code provisioning provides a simpler, standardized way to provision with Terraform, bringing even more reusability and increasing provisioning velocity. However, the previous no-code provisioning release restricted users to the module version with which they originally provisioned their infrastructure — they could only change variable inputs. This limitation kept users from accessing changes delivered to subsequent versions of the module unless they destroyed the workspace and deployed a fresh one. </p>\n\n<h2>Introducing module version upgrades</h2>\n\n<p>Module version upgrades for no-code workspaces addresses this issue by significantly reducing the friction when updating the no-code modules in a Terraform Cloud workspace. Once an administrator or module owner updates the designated no-code ready version, a notification will appear in downstream workspaces that use the module, giving practitioners a seamless experience in receiving and applying upgrades to their workspaces. The simple module version upgrade process works like this:</p>\n\n<ol>\n<li>Users see a notification in their workspace alerting them to the newly available version. From there they can initiate a plan, noting any changes that will take effect with the new module version.</li>\n<li>If the plan looks good, the user can apply it. If not, any problems can be communicated back to the module author before it impacts the running infrastructure.</li>\n<li>Terraform Cloud updates the module version used in the workspace, and applies any necessary changes to the resources based on the plan.</li>\n</ol>\n<h2>Summary and resources</h2>\n\n<p>Self-service workflows like no-code provisioning are becoming essential to scaling infrastructure operations. Module version upgrades keep developers’ no-code workspaces up-to-date without them having to know Terraform or ask their platform team to update their infrastructure.</p>\n\n<p>To learn more about module version upgrades for no-code provisioning, please refer to <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/no-code-provisioning/provisioning#module-upgrades\">module upgrades</a> in the no-code provisioning documentation. You can get hands-on with the new feature in the updated <a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/no-code-provisioning\">no-code provisioning tutorial</a>.</p>\n\n<p>Get started for free on <a href=\"http://hashi.co/tf-cloud-bc\">Terraform Cloud</a> to provision and manage all of your infrastructure.</p>\n","author":"Aurora Chun","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"9165aac204ec9d52ce28290f26a97c5a7a92fec733ae20601a9e56bd2a88fb23","category":"Tech"}