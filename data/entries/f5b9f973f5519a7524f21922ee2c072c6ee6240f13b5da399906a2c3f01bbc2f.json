{"title":"New for Amazon SQS – Update the AWS SDK to reduce latency","link":"https://aws.amazon.com/blogs/aws/new-for-amazon-sqs-update-the-aws-sdk-to-reduce-latency/","date":1699568539000,"content":"<p>With <a href=\"https://aws.amazon.com/sqs/\">Amazon SQS</a>, you can send and receive messages between software components at any scale. It was one of the first AWS services I used and as a Solutions Architect, I helped many customers take advantage of asynchronous communications using message queues. In fact, Amazon SQS has been <a href=\"https://aws.amazon.com/blogs/aws/amazon_simple_q/\">generally available since July 2006</a> and, under the hood, has always used the same wire protocol based on XML that we call <a href=\"https://smithy.io/2.0/aws/protocols/aws-query-protocol.html\">AWS Query protocol</a>.</p> \n<p>Today, I am happy to announce that Amazon SQS now supports a JSON-based wire protocol for all APIs. The <a href=\"https://smithy.io/2.0/aws/protocols/aws-json-1_0-protocol.html\">AWS JSON protocol</a> avoids many of the shortcomings of AWS Query protocol.</p> \n<p>AWS JSON is more efficient than the previous XML-based protocol and can reduce both latency and client-side CPU usage when sending and receiving SQS messages. For example, for a request that sends a simple “hello world” message, the response body size using the old AWS Query protocol is about 400 bytes. The content length of the same <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html\">SendMessage</a> response using the new AWS JSON protocol is less than 1/3 of the previous size.</p> \n<p><span><strong>Using the New JSON-Based Protocol with Amazon SQS<br /> </strong></span>This is the nicest part of this launch! To benefit from the AWS JSON protocol, you just need to update the AWS SDK to the latest version. While building this new capability, the SQS team was careful so that no code changes are needed to use the new JSON-based wire protocol.</p> \n<p>For example, we ran a benchmark using the <a href=\"https://aws.amazon.com/sdk-for-java/\">AWS SDK for Java</a> to compare the old and new wire protocols. We expect similar results from the other <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a>. Based on AWS performance tests for a 5KB message payload, JSON protocol for Amazon SQS reduces end-to-end message processing latency by up to 23 percent and reduces application client side CPU and memory usage. These numbers depend on the actual implementation and can differ from what you’ll see for your own applications.</p> \n<p><span><strong>Availability and Pricing</strong></span><br /> <a href=\"https://aws.amazon.com/sqs/\">Amazon SQS</a> support for the new JSON protocol is available today in all <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\">AWS Regions</a> where SQS is offered. All generally available AWS SDKs now support AWS JSON for SQS APIs. To get the benefits of this optimization, you just need to update the AWS SDK to the latest version available.</p> \n<p>There is no change in pricing when using the AWS JSON protocol. For more information, see <a href=\"https://aws.amazon.com/sqs/pricing/\">Amazon SQS pricing</a>.</p> \n<p>If you’re interested in more details on how <a href=\"https://smithy.io/2.0/aws/protocols/index.html\">AWS protocols</a> work, you can have a look at <a href=\"https://smithy.io/\">Smithy</a>, the language we use at AWS for defining services and SDKs.</p> \n<p>After almost 17 years of being generally available, we’re improving and innovating around <a href=\"https://aws.amazon.com/blogs/aws/amazon-sqs-15-years-and-still-queueing/\">our oldest service</a>. Just a few months back, we introduced <a href=\"https://aws.amazon.com/about-aws/whats-new/2022/10/amazon-sqs-announces-server-side-encryption-ssq-managed-sse-sqs-default/\">server-side encryption with Amazon SQS-managed encryption keys (SSE-SQS) by default for newly created queues</a>, increased <a href=\"https://aws.amazon.com/about-aws/whats-new/2022/10/amazon-sqs-increased-throughput-quota-fifo-high-throughput-ht-mode-6000-transactions-per-second-tps/\">the default quota for high throughput mode for FIFO queues</a>, and announced support for <a href=\"https://aws.amazon.com/about-aws/whats-new/2022/11/amazon-sqs-attribute-based-access-control-abac-flexible-scalable-access-permissions/\">attribute-based access control (ABAC) using queue tags</a>. More recently, Amazon SQS added <a href=\"https://aws.amazon.com/blogs/aws/a-new-set-of-apis-for-amazon-sqs-dead-letter-queue-redrive/\">new APIs to manage dead-letter queue (DLQ) redrive programmatically</a>. At AWS, it’s always day 1!</p> \n<p><strong><a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-working-with-apis.html\">Update the AWS SDK to improve CPU and memory usage and reduce latency when using Amazon SQS.</a></strong></p> \n<p>— <a href=\"https://twitter.com/danilop\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"f5b9f973f5519a7524f21922ee2c072c6ee6240f13b5da399906a2c3f01bbc2f","category":"Tech"}