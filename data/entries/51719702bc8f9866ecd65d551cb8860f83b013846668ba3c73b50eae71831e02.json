{"title":"มัลแวร์สายมิจ เขียนด้วย Python ขโมยข้อมูลผ่านทาง Telegram API ในโค้ดมีภาษาเวียดนาม แต่พบจากในไทย","link":"https://www.blognone.com/node/140632","date":1719508933000,"content":"<div><div><div><p>คนที่ติดตามข่าวสารด้าน cybersecurity น่าจะพอทราบกันดีว่ากลุ่มแฮกเกอร์จากประเทศเวียดนามมีความถนัดและให้ความสนใจในการใช้มัลแวร์เพื่อขโมยข้อมูล (InfoStealer) โดยมุ่งเป้าไปที่ข้อมูลจากเว็บเบราว์เซอร์ เช่น username และ password ที่บันทึกเอาไว้, cookies, และ web data เป็นต้น</p>\n<p>ในครั้งนี้เราจะมาวิเคราะห์มัลแวร์สายมิจดังกล่าว โดยใช้ไฟล์จาก Any.Run ซึ่งถูกอัพโหลดจากประเทศไทย</p>\n<p>ไฟล์ที่เราจะใช้ในการเริ่มต้นการวิเคราะห์เป็นไฟล์ประเภท Batch Script ชื่อ ‘List of Event Organizers…bat’ ซึ่งถูกอัพโหลดขึ้นไปบนเว็บไซต์ Any.Run โดยมีต้นทางมาจากประเทศไทย สิ่งที่น่าสนใจอย่างหนึ่งคือ ไฟล์ batch ดังกล่าวถูกระบุว่าเป็นไฟล์ที่ไม่อันตราย (No threats detected)</p>\n<p><img alt=\"alt=&quot;ไฟล์ batch ที่เราจะใช้เป็นจุดเริ่มต้นในการวิเคราะห์ครั้งนี้&quot;\" src=\"https://www.blognone.com/sites/default/files/externals/385b5b181f52dc1cb213098e7a05deb6.png\" /><strong>ภาพที่ 1</strong> ไฟล์ batch ที่เราจะใช้เป็นจุดเริ่มต้นในการวิเคราะห์ครั้งนี้</p>\n<p>ถ้าเราเปิดไฟล์ batch ดังกล่าวโดยโปรแกรมสำหรับแก้ไขข้อความ เช่น Notepad++ จะพบว่ามีแต่ภาษาต่างชาติที่ดูหน้าตาไม่เหมือนโค้ดแต่อย่างใด แต่ถ้าเราเปิดไฟล์ด้วยโปรแกรม hex editor จะพบว่ามีตัวอักษรภาษาอังกฤษที่พอจะมีหน้าตาเหมือน batch command อยู่บ้าง สิ่งที่เกิดขึ้นคือผู้โจมตีใช้เทคนิคที่เรียกว่า Byte Order Mark (BOM) เพื่อ obfuscate ไฟล์ batch ดังกล่าวเอาไว้</p>\n<p><img alt=\"alt=&quot;(ซ้าย) เปิดไฟล์โดยใช้ Notepad (ขวา) เปิดไฟล์เดียวกันแต่ใช้ HxD&quot;\" src=\"https://www.blognone.com/sites/default/files/externals/885ab0ac8a978c7fc43818c86a44d392.png\" /><strong>ภาพที่ 2</strong> (ซ้าย) เปิดไฟล์โดยใช้ Notepad (ขวา) เปิดไฟล์เดียวกันแต่ใช้ HxD</p>\n<p>ถ้าเรา deobfuscate ไฟล์ batch ดังกล่าวได้ ก็จะพบว่าโค้ดภายในยังคงถูก obfuscate เอาไว้อีกชั้นด้วยเทคนิคการกำหนดและแทนที่ค่าตัวแปร ดังนั้นในขั้นนี้เราก็ยังคงไม่สามารถอ่านและทำความเข้าใจโค้ดในไฟล์ batch ได้อยู่ดี</p>\n<p><img alt=\"alt=&quot;โค้ดในไฟล์ batch หลังจาก deobfuscate แล้ว&quot;\" src=\"https://www.blognone.com/sites/default/files/externals/1292b71994ef981b66a9e9163968133b.png\" /><strong>ภาพที่ 3</strong> โค้ดในไฟล์ batch หลังจาก deobfuscate แล้ว</p>\n<p>ต่อมาถ้าเรา deobfuscate เทคนิคการกำหนดและแทนที่ค่าตัวแปรได้ เราก็จะพบว่าโค้ดที่แท้จริงถูกเอาไปซ่อนไว้ท่ามกลางคอมเม้นท์จำนวนมหาศาลเพื่อหวังตบตาเราอีกชั้นหนึ่ง</p>\n<p><img alt=\"alt=&quot;โค้ดที่แท้จริงซ่อนอยู่ท่ามกลางคอมเม้นท์&quot;\" src=\"https://www.blognone.com/sites/default/files/externals/f261a651918f3885ec8706a383d47d03.png\" /><strong>ภาพที่ 4</strong> โค้ดที่แท้จริงซ่อนอยู่ท่ามกลางคอมเม้นท์</p>\n<p>ทั้งนี้โค้ดในไฟล์ batch จะทำหน้าที่ในการดาวน์โหลดไฟล์อันตรายจาก GitHub ของผู้โจมตี จากนั้นจะเตรียมการจัดวางไฟล์ดังกล่าวเอาไว้ในโฟลเดอร์ต่าง ๆ โดยอาศัยการสั่งงานผ่าน Windows Commad Shell (CMD) และ PowerShell ซึ่งเป็นเทคนิคที่เรียกว่า Living Off The Land Binaries (LOLBins) โดยมีรายละเอียดการทำงานดังนี้</p>\n<ul>\n<li>ดาวน์โหลดไฟล์ชื่อ Document.zip จาก <strong>hxxps://github[.]com/s123s1/s/raw/main/Document.zip</strong> จากนั้นทำการ extract ไปเก็บไว้ในโฟลเดอร์ <em>%Public%\\Document</em> โดยไฟล์ที่ถูก extract มานั้น จะประกอบไปด้วยไฟล์ที่จำเป็นในการรัน Python รวมไปถึงไฟล์สคริปต์ชื่อ sim.py ที่เป็นตัวร้ายหลักในครั้งนี้</li>\n<li>ทำการ execute ไฟล์ sim.py โดยใช้ python.exe จากในโฟลเดอร์ที่เตรียมไว้ก่อนหน้านี้</li>\n<li>ดาวน์โหลดไฟล์ batch ชื่อ update1.bat จาก GitHub เดียวกัน แล้วจัดวางไฟล์เอาไว้ใน Startup Folder ซึ่งจะทำให้ไฟล์ batch ดังกล่าวถูกเรียกใช้งานทุกครั้งที่เครื่องคอมพิวเตอร์เริ่มต้นใช้งาน โดยไฟล์ batch ดังกล่าวจะทำหน้าที่ในการ execute ไฟล์สคริปต์ sim.py ทั้งนี้ไฟล์ update1.bat ก็ได้ถูก obfuscate เอาไว้ด้วยเทคนิค BOM เช่นเดียวกัน</li>\n</ul>\n<p><img alt=\"alt=&quot;ไฟล์ update1.bat และโค้ดที่แท้จริงหลังจากผ่านกระบวนการ deobfuscatge แล้ว&quot;\" src=\"https://www.blognone.com/sites/default/files/externals/3b56cb626a19a63fc1c883780f8c2d0d.png\" /><strong>ภาพที่ 5</strong> ไฟล์ update1.bat และโค้ดที่แท้จริงหลังจากผ่านกระบวนการ deobfuscatge แล้ว</p>\n<p><img alt=\"alt=&quot;รายละเอียดภายในโฟลเดอร์ *%Public%\\Document*&quot;\" src=\"https://www.blognone.com/sites/default/files/externals/33ef2d8e3601ff4810c6dd303a22d18f.png\" /><strong>ภาพที่ 6</strong> รายละเอียดภายในโฟลเดอร์ <em>%Public%\\Document</em></p>\n<p>คราวนี้ถึงเวลามาดูรายละเอียดการทำงานของไฟล์สคริปต์ sim.py ซึ่งเป็น มัลแวร์สายมิจ ที่เราให้ความสนใจในครั้งนี้กัน โดยต่อไปนี้เราจะเรียกแทนไฟล์ sim.py ว่า มัลแวร์สายมิจ เพื่อให้สะดวกขึ้น โดยภาพรวมการทำงานของมัลแวร์สายมิจนี้ค่อนข้างเข้าใจง่ายคือ ขโมยข้อมูลจากเบราว์เซอร์ ขโมยข้อมูลที่เกี่ยวกับระบบปฏิบัติการ แล้วส่งข้อมูลไปให้ผู้โจมตีผ่านช่องทาง Telegram API</p>\n<p><img alt=\"alt=&quot;บางส่วนของโค้ดภายในไฟล์ sim.py จะเห็นว่ามีความพยายามในการวางคอมเม้นท์ไว้ที่ด้านบนเหมือนเคย&quot;\" src=\"https://www.blognone.com/sites/default/files/externals/c0652d0b2b4c28d8188e4aa38e1e31d0.png\" /><strong>ภาพที่ 7</strong> บางส่วนของโค้ดภายในไฟล์ sim.py จะเห็นว่ามีความพยายามในการวางคอมเม้นท์ไว้ที่ด้านบนเหมือนเคย</p>\n<p>มัลแวร์สายมิจตัวนี้ ถูกสร้างมาให้มุ่งเป้าขโมยข้อมูลจากเบราว์เซอร์เจ้าดัง ๆ เกือบทั้งหมด ไม่ว่าจะเป็น Google Chrome, Mozilla Firefox, Microsoft Edge, Opera, Brave, และ Chromium โดยมีข้อมูลที่เป็นเป้าหมาย เช่น username และ password ที่บันทึกเอาไว้, ข้อมูล cookies, ข้อมูลกุญแจ Master Key ของ Chrome เป็นต้น นอกจากนี้มัลแวร์สายมิจยังสามารถขโมยข้อมูลที่เกี่ยวกับระบบปฏิบัติการได้อีกด้วย ยกตัวอย่างเช่น ชื่อเครื่องคอมพิวเตอร์, ชื่อ user ในระบบปฏิบัติการ, เวอร์ชันของระบบปฏิบัติการ, รายชื่อของโปรเซส, หมายเลขไอพี, และ ตำแหน่งทางภูมิศาสตร์ของหมายเลขไอพี</p>\n<p><img alt=\"alt=&quot;โค้ดในส่วนที่ใช้สำหรับเก็บรวบรวมข้อมูลเกี่ยวกับระบบปฏิบัติการจากเครื่องเหยื่อ&quot;\" src=\"https://www.blognone.com/sites/default/files/externals/14f56c13dc1d970f1eb40e58601214b3.png\" /><strong>ภาพที่ 8</strong> โค้ดในส่วนที่ใช้สำหรับเก็บรวบรวมข้อมูลเกี่ยวกับระบบปฏิบัติการจากเครื่องเหยื่อ</p>\n<p>ข้อมูลที่มัลแวร์สายมิจเก็บรวบรวมมาได้ในตอนแรก จะถูกเก็บเอาไว้ภายในโฟลเดอร์ <em>%TEMP%</em> โดยตั้งชื่อโฟลเดอร์ในรูปแบบ ‘CountryCode+IP+Date’ จากนั้นข้อมูลดังกล่าวจะถูกบีบอัดเป็นไฟล์ ZIP โดยใช้ชื่อไฟล์เหมือนกัน</p>\n<p><img alt=\"alt=&quot;ตัวอย่างของข้อมูลมัลแวร์เก็บรวบรวมเอาไว้ เพื่อเตรียมส่งออกไปให้ผู้โจมตีในภายหลัง&quot;\" src=\"https://www.blognone.com/sites/default/files/externals/aa1793d812fe4cda97df4d6ad081926f.png\" /><strong>ภาพที่ 9</strong> ตัวอย่างของข้อมูลมัลแวร์เก็บรวบรวมเอาไว้ เพื่อเตรียมส่งออกไปให้ผู้โจมตีในภายหลัง</p>\n<p>ไฟล์ ZIP รวมถึงข้อมูลอื่น ๆ จะถูกส่งไปยัง Command and Control (C2) ของผู้โจมตีผ่านช่องทาง Telegram API ที่ <strong>hxxps://api.telegram[.]org/bot6878187208:AAFjqOqPfUbezs5GaBB-x99QhDkXaXsWgpg/sendDocument</strong> พร้อมกับหมายเลข Bot ID คือ <strong>-4200000448</strong></p>\n<p><img alt=\"alt=&quot;ข้อมูล network traffic แสดงให้เห็นรายละเอียดภายใน POST request ขณะที่มัลแวร์กำลังส่งข้อมูลไปยัง Telegram C2 ของผู้โจมตี&quot;\" src=\"https://www.blognone.com/sites/default/files/externals/1822b8233991481ef82d80f50f6158dd.png\" /><strong>ภาพที่ 10</strong> ข้อมูล network traffic แสดงให้เห็นรายละเอียดภายใน POST request ขณะที่มัลแวร์กำลังส่งข้อมูลไปยัง Telegram C2 ของผู้โจมตี</p>\n<p>การวิเคราะห์การทำงานของ มัลแวร์สายมิจ ก็จบแต่เพียงเท่านี้ แต่เราจะยังคงไม่หยุดอยู่แค่ตรงนี้เพราะเราจะเริ่มขั้นตอนต่อไปคือ การรวบรวมข้อมูลที่เกี่ยวกับผู้โจมตี (Threat Actor Profiling)</p>\n<p>เราสามารถเริ่มต้นด้วยการเช็คค่า string ที่น่าสนใจจากภายในไฟล์ sim.py โดยสิ่งที่ค้นพบคือค่า string คำว่า ‘data lần thứ’ ซึ่งเป็นภาษาเวียดนาม ถูกนำมาใช้อยู่ภายในไฟล์ดังกล่าว ซึ่งก็พอจะทำให้เราคาดการณ์ได้ว่าผู้โจมตีน่าจะมีความเข้าใจในภาษาเวียดนามระดับหนึ่ง</p>\n<p><img alt=\"alt=&quot;ภาษาเวียดนามถูกพบใช้งานอยู่ภายในไฟล์ sim.py&quot;\" src=\"https://www.blognone.com/sites/default/files/externals/582137653b88738b0ae327f125a61e48.png\" /><strong>ภาพที่ 11</strong> ภาษาเวียดนามถูกพบใช้งานอยู่ภายในไฟล์ sim.py</p>\n<p>นอกจากนี้เรายังสามารถหาข้อมูลบัญชีผู้ใช้งาน Telegram ของผู้โจมตีได้ โดยเราจะใช้ค่า Bot Token และ Bot ID ที่พบจาก URL ก่อนหน้านี้ ไปทำการสืบหาข้อมูล Username, User ID และการตั้งค่าอื่น ๆ ของบอทกัน โดยใช้เครื่องมือชื่อ <a href=\"https://github.com/drego85/tosint\">tosint</a> ที่พัฒนาโดย <a href=\"https://github.com/drego85\">drego85</a> ซึ่งผลลัพธ์ที่ได้พบว่า username ที่ผู้โจมตีใช้คือ <strong>ThomasDante89</strong> โดยมี ID คือ <strong>7012036276</strong> และยังมีข้อมูลอื่น ๆ อีก เช่น Bot Name และ Bot User ID ตามที่เห็นได้จากภาพด้านล่างนี้</p>\n<p><img alt=\"alt=&quot;ผลลัพธ์จาก tosint&quot;\" src=\"https://www.blognone.com/sites/default/files/externals/8238f3675135f57dae1593fdb093ca30.png\" /></p>\n<p><strong>ภาพที่ 12</strong> ผลลัพธ์จาก tosint</p>\n<p>หากยังจำกันได้ ผู้โจมตีมีการใช้ GitHub เพื่อฝากไฟล์ที่เป็นอันตรายเอาไว้ โดยบัญชี GitHub ดังกล่าวมีชื่อว่า <strong>s123s1</strong> ทั้งนี้หากเราทำการตรวจสอบอย่างละเอียด จะพบว่ามีการเชื่อมโยงโดยตรงไปถึงบัญชี GitHub อื่น ๆ อีกจำนวน 2 รายการ ที่มีชื่อบัญชีคือ <strong>vtbg1</strong> และ <strong>zzhshsss</strong> ซึ่งบัญชี GitHub ทั้งหมดนี้มีรูปแบบการตั้งชื่อ repository และ ชื่อไฟล์ ที่คล้ายกัน แม้กระทั่งเนื้อหาภายในไฟล์ก็คล้ายกัน ยกตัวอย่างเช่น ไฟล์ batch จากทั้ง 3 GitHub นี้มีการใช้เทคนิค BOM เหมือนกันทั้งหมด อีกทั้งบัญชีเหล่านี้ถูกสร้างขึ้นมาในห้วงเวลาที่ไล่เลี่ยกัน ดังนั้นจึงยืนยันได้ว่าบัญชี GitHub เหล่านี้ถูกสร้างโดยผู้โจมตีเดียวกัน</p>\n<p>และเพื่อเป็นการตอบแทนในการทำงานหนักของผู้โจมตีท่านนี้ ผมได้ทำการ report ไปยัง GitHub เพื่อให้ทำการระงับบัญชีทั้งหมดแล้ว นอกจากนี้ผมยังได้เขียน Sigma rule ขึ้นมาเพื่อให้ผู้ที่สนใจนำไปใช้ในการตรวจจับ มัลแวร์สายมิจ นี้ได้ด้วยตัวเอง โดยท่านสามารถดูข้อมูลได้จากลิงค์ใน ‘ที่มา’</p>\n<p><img alt=\"alt=&quot;Timeline ความเคลื่อนไหวของบัญชี Github ทั้ง 3 รายการ&quot;\" src=\"https://www.blognone.com/sites/default/files/externals/a5692186c09b1321123f1120b38b9a93.png\" /><strong>ภาพที่ 13</strong> Timeline ความเคลื่อนไหวของบัญชี Github ทั้ง 3 รายการ</p>\n<p>เราเริ่มต้นการวิเคราะห์จากไฟล์ batch เพียงอันเดียว จนทราบว่ามัลแวร์ทำงานยังไง มีเป้าหมายอะไร มีศักยภาพแค่ไหน ขโมยและส่งข้อมูลไปให้ผู้โจมตียังไง เราสืบย้อนไปจนรู้ชื่อบัญชี Telegram ของผู้โจมตี เราตามต่อไปยังบัญชี Github และสืบจนบัญชี Github ของผู้โจมตีเพิ่มเติม จากนั้นก็ยื่นเรื่องเพื่อขอให้ระงับการใช้งาน และสร้าง detection rule ขึ้นมาเพื่อตรวจจับมัลแวร์ตัวนี้ ซึ่งทั้งหมดนี้คือตัวอย่างหนึ่งของกระบวนการใช้ข้อมูลที่ได้จากการวิเคราะห์มัลแวร์ (Malware Analysis) มาต่อยอดเพื่อหาข่าวกรองทางไซเบอร์ (Threat Intelligence) และนำมาสร้างข่าวกรองที่ใช้ประโยชน์ได้จริง (Actionable Threat Intelligence)</p>\n<p>ขอบคุณทุกท่านที่ทนอ่านจนจบ หวังว่าจะเป็นประโยชน์บ้างไม่มากก็น้อยครับ</p>\n<p>ที่มา - <a href=\"https://link.medium.com/mPcyr1XSLKb\">FatzQatz’s Medium Blog Post</a>, <a href=\"https://github.com/FatzQatz/Detection_Rule/blob/main/Sigma_Rule/202406_From%20GitHub%20to%20Telegram%20A%20Cyber%20Adventure%20with%20Python%20InfoStealer.yml\">Sigma Rule</a></p>\n</div></div></div><div><div>Topics: </div><div><div><a href=\"/topics/malware\">Malware</a></div><div><a href=\"/topics/cybersecurity\">Cybersecurity</a></div><div><a href=\"/topics/depth\">In-Depth</a></div></div></div>","author":"FatzQatz","siteTitle":"Blognone","siteHash":"ededadcf18490b3937e7dd89ebe8c00dc129addbdf1ebe4aff1f458146693da0","entryHash":"51719702bc8f9866ecd65d551cb8860f83b013846668ba3c73b50eae71831e02","category":"Thai"}