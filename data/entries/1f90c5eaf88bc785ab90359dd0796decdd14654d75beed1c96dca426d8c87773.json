{"title":"DevEx improvements in HashiCorp Sentinel","link":"https://www.hashicorp.com/blog/devex-improvements-in-hashicorp-sentinel","date":1680624000000,"content":"<p>Improving the developer experience for writing policies and configuration has been the focus of recent releases of HashiCorp Sentinel. This blog covers the most notable features of these releases including static imports, named functions, defined checks, and per-policy parameter values. If you are new to Sentinel, be sure to read our <a href=\"https://docs.hashicorp.com/sentinel\">Sentinel documentation</a> and try out the <a href=\"https://play.sentinelproject.io/\">Sentinel Playground</a>.</p>\n\n<h2>Improved configuration syntax</h2>\n\n<p>Previously, the terms \"import\" and \"plugin\" were often used interchangeably, and \"module\" had a different meaning. However, the way you accessed these different import types (standard import, plugin, or module) within policy was the same.</p>\n\n<p>Starting with Sentinel 0.19, we have improved the import configuration syntax, which makes it simpler to work with Sentinel. Our introduction of a standardized naming convention ensures consistent import configuration using the HCL syntax already employed by Terraform.</p>\n\n<p>We’ve also added support to the <code>import</code> block to allow overriding the default configuration for the standard imports and plugins that are used within a policy. The improved configuration syntax for Sentinel makes it easier to define different types of imports in a consistent and repeatable way. The new import configuration syntax for plugins and modules looks like this:</p>\n<pre><code>import \"plugin\" \"time\" {\n\tconfig = {\n\t\ttimezone = \"Australia/Brisbane\"\n\t}\n}\n\nimport \"module\" \"reporter\" {\n\tsource = \"./reporter.sentinel\"\n}</code></pre><h2>Support for static JSON data</h2>\n\n<p>Making the policy evaluation process more dynamic has several benefits, such as reducing the number of policies that need to be written and simplifying policy logic for easier contribution to policy libraries by teams. Importing arbitrary structured data into policies is a commonly requested feature from customers looking to enhance their policy-evaluation process.</p>\n\n<p>Starting with version 0.19 of Sentinel, a new static import feature has been added that allows structured data to be imported into policies. This feature currently supports JSON documents, which is a popular data format used in many programming languages. The Sentinel team plans to support more data formats in the future. The new import configuration syntax for static imports looks like this:</p>\n<pre><code>import \"static\" \"animals\" {\n    source = \"./animals.json\"\n    format = \"json\"\n}</code></pre><h2>Named functions</h2>\n\n<p>The introduction of named functions in Sentinel 0.20 has significant impact to the policy authoring experience. Named functions provide a way for the author to define a function that cannot be reassigned or reused. For instance, <a href=\"https://docs.hashicorp.com/sentinel/language/functions#anonymous-functions\">anonymous functions</a> can be re-assigned, causing policies to fail if an attempted call is made later. This provides some extra safety for policy authors to be certain that critical functions will not change after definition. Here is an example of a named function:</p>\n<pre><code>func sum(a, b) {\n\ta + b\n}</code></pre><h2>Simplified expressions for unknown values</h2>\n\n<p>Sentinel allows values to be <a href=\"https://docs.hashicorp.com/sentinel/language/undefined\">undefined</a>, however there has historically been no way for policy authors to determine if a value is undefined. Additionally, policy authors must use the <code><a href=\"https://docs.hashicorp.com/sentinel/language/undefined#else-expressions\">else expression</a></code> to recover from undefined values and provide an alternative value. As part of the Sentinel 0.21 release, there are now two new helpers to determine if a value has been defined. This drastically improves readability of policies, as seen in this example:</p>\n<pre><code>foo = undefined\n\n// using the else expression\nfoo else false is false // false\nfoo else true is true // true\n\n// the new defined expressions\nfoo is defined // false\nfoo is not defined // true</code></pre><h2>Per-policy parameter values</h2>\n\n<p>Parameters help facilitate policy reuse and allow values to be removed from the policy itself. Previously, parameter values could be supplied only once within a configuration, with that value being shared across policies. With the introduction of per-policy parameter values in Sentinel 0.21, parameter values can be supplied once per-policy, with the policy value taking precedence over a globally supplied value. Providing a parameter value to a single policy within configuration is shown here:</p>\n<pre><code>policy \"restrict-s3\" {\n\tsource = \"./deny-resource.sentinel\"\n\tparams = {\n\t\tresource_kind = \"aws_s3_bucket\"\n\t}\n}</code></pre><h2>Bringing it all together</h2>\n\n<p>The example below brings all of the above features together to showcase what they enable for policy authors. In this example, we are going to create a policy that utilizes exemptions to determine its result. Here are a few considerations:</p>\n\n<ul>\n<li>Make the policy reusable to allow for different inputs</li>\n<li>Use static data to manage exemptions</li>\n</ul>\n\n<p>First, let's create a modular policy for finding violations:</p>\n<pre><code>// main.sentinel\nimport \"helpers\" \t\t\t// our helpers module\nimport \"tfplan/v2\" as tfplan\t// tfplan import\n\nparam id\t\t\t// id of the policy\nparam resource_type\t// the type of resource\nparam valid_actions\t// allowed actions\nparam attr\t\t\t// the attribute to check\nparam allowed_value\t// the allowed value for the attribute\n\n// Filter resources by type\nall_resources = filter tfplan.resource_changes as _, rc {\n\t\trc.type is resource_type and\n\t\t\trc.mode is \"managed\" and\n\t\t\trc.change.actions in valid_actions\n}\n// Filter resources that violate a given condition\nviolations = filter all_resources as _, r {\n\t\tr.change.after[attr] != allowed_value\n}\n\nresult = rule when not helpers.exempt(id) {\n\tviolations is empty\n}\n\nmain = rule {\n\tresult\n}</code></pre><p>This policy is heavily parameterized, giving it greater reusability. It will filter all resources based on resource type and its action via the <code>resource_type</code> and <code>valid_actions</code> parameters. It will then find all violations through filtering the resources and asserting the provided attribute against the allowed value. The <code>result</code> rule is then evaluated based on the value returned from <code>helpers.exempt(id)</code>, ensuring that no violations are present.</p>\n\n<p>Now that we have a working policy, let's take a look at the <code>helpers</code> module for finding exemptions in static data:</p>\n<pre><code>// helpers.sentinel\nimport \"exemptions\"\t// static import\n\nfunc exempt(id) {\n\tif exemptions[id] is defined {\n\t\treturn exemptions[id]\n\t} else {\n\t\treturn false\n\t}\n}</code></pre><p>This simple module has a single named function, <code>exempt</code>, which returns the value of the id within the exemptions static import, or false if it isn't defined. Our exemption static data will look like this.</p>\n<pre><code>{\n\t\"ec2_instance_size\": false\n}</code></pre><p>Finally, our configuration will contain the following:</p>\n<pre><code>import \"module\" \"helpers\" {\n\tsource = \"./helpers.sentinel\"\n}\n\nimport \"static\" \"exemptions\" {\n\tsource = \"./exemptions.json\"\n\tformat = \"json\"\n}\n\npolicy \"ec2_instance_size\" {\n\tsource = \"./main.sentinel\"\n\tparams = {\n\t\tid = \"ec2_instance_size\",\n\t\tresource_type = \"aws_instance\",\n\t\tattr = \"instance_type\",\n\t\tallowed_value = \"t3.micro\",\n\t\tvalid_actions = [\n[\"no-op\"],\n[\"create\"],\n[\"update\"],\n\t\t]\n\t}\n}</code></pre><p>If we were to run this policy against valid HashiCorp Terraform plan data with no violations, we should expect an output similar to what’s shown here:</p>\n<pre><code>No module changes to install\n\nNo policy changes to install\n\nExecution trace. The information below will show the values of all\nthe rules evaluated. Note that some rules may be missing if\nshort-circuit logic was taken.\n\nNote that for collection types and long strings, output may be\ntruncated; re-run \"sentinel apply\" with the -json flag to see the\nfull contents of these values.\n\nPass - ec2_instance_size.sentinel\n\nec2_instance_size.sentinel:25:1 - Rule \"main\"\n  Value:\n\ttrue\n\nec2_instance_size.sentinel:21:1 - Rule \"result\"\n  Value:\n\ttrue</code></pre><h2>Get started</h2>\n\n<p>The <a href=\"https://docs.hashicorp.com/sentinel/changelog\">latest release of HashiCorp Sentinel</a> includes several new features that build on previous investments in the policy authoring workflow. You can start exploring these new capabilities now by downloading the latest version of the Sentinel CLI from the <a href=\"https://docs.hashicorp.com/sentinel/downloads/\">Sentinel download page</a>.</p>\n\n<p>For more information on the Sentinel language and specification, visit the <a href=\"https://docs.hashicorp.com/sentinel/\">Sentinel documentation page</a>. If you would like to engage with the community to discuss information related to Sentinel use cases and best practices, visit <a href=\"https://discuss.hashicorp.com/c/sentinel\">the HashiCorp Community Forum</a>.</p>\n\n<p>If you would like to experiment with Sentinel in a safe development environment, you can do so by visiting the <a href=\"https://play.sentinelproject.io\">Sentinel Playground</a>, which provides the ability to evaluate and share example Sentinel policies and mock data. You can also get hands-on with tutorials for Sentinel’s integrations with <a href=\"https://developer.hashicorp.com/terraform/tutorials/policy\">Terraform Cloud</a>, <a href=\"https://developer.hashicorp.com/vault/tutorials/policies/sentinel\">Vault Enterprise</a>, and <a href=\"https://developer.hashicorp.com/nomad/tutorials/governance-and-policy/sentinel\">Nomad Enterprise</a>.</p>\n","author":"Cameron Stitt","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"1f90c5eaf88bc785ab90359dd0796decdd14654d75beed1c96dca426d8c87773","category":"Tech"}