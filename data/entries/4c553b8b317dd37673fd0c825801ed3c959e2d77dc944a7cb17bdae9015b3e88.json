{"title":"สรุปเรื่องของ Fast local development สำหรับ Microservices จาก Lyft","link":"https://www.somkiat.cc/fast-local-development-for-microservices-from-lift/","date":1639034527000,"content":"<p><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/12/1-150x150.png\" /></p>\n<p>จากบทความเรื่อง <strong><a href=\"https://eng.lyft.com/scaling-productivity-on-microservices-at-lyft-part-2-optimizing-for-fast-local-development-9f27a98b47ee\" target=\"_blank\">Scaling productivity on microservices at Lyft (Part 2): Optimizing for fast local development</a></strong><br />ทำการอธิบายถึงการเพิ่ม productivity ของการพัฒนาระบบของ Lyft<br />ซึ่งมีโครงสร้างของระบบตามแนวคิด Microservicesว่าทำอย่างไร <br />จึงจะช่วยให้ developer experience ดีขึ้น<br />โดยสามารถทำงานได้บนเครื่อง local หรือเครื่องนักพัฒนาแต่ละคนให้ได้มากที่สุด<br />มาดูกันว่าทางทีมของ Lift ทำอย่างไรกันบ้าง ?</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เริ่มที่ขั้นตอนการพัฒนาจะประกอบด้วย 2 ส่วนคือ</strong></p>\n\n\n\n<ul><li><strong>Inner dev loop</strong> คือการแก้ไขและ run test บนเครื่อง local ของนักพัฒนา</li><li><strong>Outer dev loop</strong> คือ CI/CD process นั่นเอง ซึ่งอยู่ในอีกระบบหนึ่ง จะทำงานเมื่อตรวจสอบการเปลี่ยนแปลงใน version control ที่กำหนดไว้</li></ul>\n\n\n\n<p>แสดงดังรูป</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/12/1-1024x507.png\" /></figure>\n\n\n\n<p><strong>โดยสิ่งที่ขาดหายไปใน Inner Dev Loop คือ</strong><br />การทำให้เหมือนหรือคล้าย Outer Dev Loop นั่นคือ<br />การมีเรื่องของ CI/CD process นั่นเอง<br />ถ้าสามารถทำได้บนเครื่อง local ของนักพัฒนาก่อน<br />น่าจะช่วยลดเวลาของการตรวจสอบจากการเปลี่ยนแปลงต่าง ๆ ได้ดี</p>\n\n\n\n<p><strong>โดยการ run บน local นั้น ทางทีมไม่ได้ใช้งาน Container เช่น Docker</strong></p>\n\n\n\n<p>เพราะว่ามีปัญหามากมาย<br />รวมทั้งกินทรัพยากรมากอีกด้วย<br />ดังนั้นจึงทำการติดตั้งแบบปกติบนเครื่องไปเลย<br />โดยใช้เครื่องมือต่าง ๆ มาช่วยจัดการ environment หรือ virtual environment เช่น</p>\n\n\n\n<ul><li>Python จะใช้ <a href=\"https://github.com/Yelp/aactivator\" target=\"_blank\">AActivator</a></li><li>Node จะใช้ <a href=\"https://github.com/ekalinin/nodeenv\" target=\"_blank\">Nodeenv</a></li></ul>\n\n\n\n<p>ที่สำคัญจะ run เพียง service เดียวเท่านั้น <br />เพื่อลดการใช้ทรัพยากรรวมทั้งง่ายต่อการใช้งานและทำความเข้าใจ</p>\n\n\n\n<p><strong>ขั้นตอนของการ run service เป็นดังนี้</strong></p>\n\n\n\n<ul><li>ทำการตรวจสอบ environment ว่ามี software และ configuration ตามที่กำหนดไว้หรือไม่</li><li>ทำการสร้าง virtual environment ขึ้นมา</li><li>ทำการ start data store หรือ database ขึ้นมา</li><li>ทำการ start proxy app ขึ้นใช้สำหรับจัดการการเรียกข้อมูลจาก service อื่น ๆ ทำให้ง่ายต่อการ mock นั่นเอง</li><li>ทำการ initial ข้อมูลใน database จาก script ที่สร้างไว้</li><li>สุดก็ทำการ run server ขึ้นมา เพื่อทำการมดสอบหรือใช้งานต่อไป</li></ul>\n\n\n\n<p><strong>โดยที่ Proxy app แสดงการทำงานดังรูป</strong></p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/12/2-1024x467.png\" /></figure>\n\n\n\n<p>โดยรวมแล้วเป็นแนวคิดที่น่าสนใจ<br />น่าลองนำมาประยุกต์ใช้งานเหมือนกัน</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"4c553b8b317dd37673fd0c825801ed3c959e2d77dc944a7cb17bdae9015b3e88","category":"Thai"}