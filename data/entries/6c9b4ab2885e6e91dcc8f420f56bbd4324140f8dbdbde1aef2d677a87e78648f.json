{"title":"WaterBear: Building A Free Platform For Impactful Documentaries (Part 1)","link":"https://smashingmagazine.com/2023/09/waterbear-building-free-platform-impactful-documentaries-part1/","date":1695636000000,"content":"<p>A few months ago, I worked on what is probably the most remarkable and exciting project of my career so far. It’s a wonderful free platform that brings together inspiration and action called <a href=\"https://www.waterbear.com/\">WaterBear</a>, and I’m thrilled to tell you all about it in this two-part article series.</p>\n<p>I want to introduce you to the WaterBear project and cover the goals, technical stack, and team dynamics that went into it. As this is also my first time taking on the role of <strong>lead developer</strong> on a project, I’ll also share some important engineering management challenges I encountered and insights from this experience where I felt like I was learning on the fly. In the following article, I’ll focus on specific technical challenges that came up in the process, including front-end performance, accessibility, and SEO.</p>\n<p><img src=\"https://files.smashing.media/articles/waterbear-building-free-platform-impactful-documentaries-part1/1-waterbear-logo.png\" /></p>\n<p>Before we dive into the nitty-gritty, you might be wondering what makes WaterBear stand out among the plethora of competing services. Let’s find out!</p>\nAbout WaterBear\n<p><a href=\"https://www.waterbear.com\">WaterBear</a> is a free platform bringing together inspiration and action with <strong>award-winning high-production environmental documentaries</strong> covering various topics, from animals and climate change to people and communities. The WaterBear team produces their own original films and documentaries and hosts curated films and content from various high-profile partners, including award-winning filmmakers, large brands, and significant non-governmental organizations (NGOs), like Greenpeace, WWF, The Jane Goodall Institute, Ellen MacArthur Foundation, Nikon, and many others.</p>\n<p><img src=\"https://files.smashing.media/articles/waterbear-building-free-platform-impactful-documentaries-part1/2-waterbear-video-list-page.png\" /></p>\n<p>This is where the value proposition of other similar services would usually end — users binge-watching videos into perpetuity. WaterBear, however, takes a different, more mindful approach. Think back to an impactful movie or a documentary that moved you so much that it left you feeling like you <strong>needed to do something</strong> about the topic or issue you just learned about. But maybe you didn’t know where to begin or if it was even possible for you to make any difference.</p>\n<p>WaterBear actively <strong>invites and encourages users to participate</strong> in some meaningful way. We want people to be engaged in the issue by signing petitions, donating to a cause, spreading the word, volunteering, or simply changing their habits in a positive way. Essentially, WaterBear aims to <strong>turn passive viewers into active and mindful participants</strong> by offering impactful content with options to be informed on an issue and inspired to do something about it.</p>\n<p><img src=\"https://files.smashing.media/articles/waterbear-building-free-platform-impactful-documentaries-part1/3-call-to-action-banner.png\" /></p>\n<p>WaterBear and its <a href=\"https://www.thedrum.com/news/2023/08/14/why-brands-patagonia-and-nikon-are-using-ad-budgets-fund-climate-docs\">work have been regularly featured</a> in various publications, and the platform is highly praised and endorsed. And, hey, if you spot a familiar-looking <a href=\"https://en.wikipedia.org/wiki/Tardigrade\">tardigrade</a> while walking around London or somewhere else, make sure to snap a picture and share it with me!</p>\n<p><img src=\"https://files.smashing.media/articles/waterbear-building-free-platform-impactful-documentaries-part1/4-waterbear-advertisement.png\" /></p>\nDefining Project Objectives\n<p>For context, I am currently working at a software development company called <a href=\"https://q.agency/\">Q Agency</a> based in Zagreb, Croatia. We collaborated with WaterBear and its partner companies to build a <strong>revamped and redesigned version of the web and mobile app</strong> from the ground up using modern technologies.</p>\n<p>The WaterBear app was originally launched in December 2020, and the team learned a lot about the user experience by gathering feedback. This data was then used to create a fresh new design and outline some new features.</p>\n<p>While I am unable to share specific data from that research effort, I can tell you that it led us to the following <strong>main goals</strong>:</p>\n<ul>\n<li>Create a responsive web app and mobile app using a modern tech stack based on the design provided by the WaterBear team.</li>\n<li>Develop tools that will allow the WaterBear team to easily create and customize landing pages for promotional campaigns and videos.</li>\n<li>Identify potential performance bottlenecks and address them early on.</li>\n<li>Build dynamic, server-side generated sitemaps for improved SEO.</li>\n<li>Listen to user feedback to constantly iterate and implement new features.</li>\n</ul>\n<p><img src=\"https://files.smashing.media/articles/waterbear-building-free-platform-impactful-documentaries-part1/5-promotional-campaign-pages.png\" /></p>\nThe Technical Stack\n<p>Before my team started working with WaterBear, the majority of the tech stack and infrastructure was set in stone, so we only had to decide on the front-end and mobile technologies we would use to build it. We agreed to use the React-powered <a href=\"https://nextjs.org/\">Next.js framework</a> for the web app and <a href=\"https://flutter.dev/\">Flutter</a> for mobile apps (i.e., <a href=\"https://play.google.com/store/apps/details?id=com.waterbearnetwork.waterbear&amp;hl=en_US&amp;pli=1\">Android</a> and <a href=\"https://apps.apple.com/us/app/waterbear/id1461149595\">iOS</a>). The <strong>work was split between the two teams</strong>: the web app team and the mobile team.</p>\n<p>Next.js was our go-to choice because it allowed us to easily create <strong>dynamic server-side rendered sitemaps</strong> and use <strong>advanced optimizations for images and JavaScript bundle</strong> that provide options for improved performance. We’ll cover these topics in more detail in the next article. For now, let’s highlight the remaining integral parts of the project:</p>\n<ul>\n<li><a href=\"https://www.sanity.io/\"><strong>Sanity CMS</strong></a><br />An open-source headless content management system (CMS) that can be easily integrated with Next.js and other front-end frameworks.</li>\n<li><a href=\"https://firebase.google.com/docs/auth/\"><strong>Firebase Authentication</strong></a><br />A back-end service can authenticate users through social media accounts, as well as a standard email and password.</li>\n<li><a href=\"https://firebase.google.com/docs/firestore\"><strong>Cloud Firestore</strong></a><br />A flexible and scalable NoSQL cloud database for mobile and web. This was a logical choice for our database, as Firebase Authentication was required right from the start.</li>\n<li><a href=\"https://videojs.com/\"><strong>Video.js</strong></a><br />A versatile open-source video player with customizable UI and plugin support.</li>\n</ul>\n<p><img src=\"https://files.smashing.media/articles/waterbear-building-free-platform-impactful-documentaries-part1/6-web-app-mobile-app-interact-same-services.png\" /></p>\nStrategy And Communication\n<p>As the work began, we came across our first hurdle. As you can see from the previous diagram, both web and mobile apps had to interact with the same services (including the CMS, database, authentication, and so on), so we also had to <strong>ensure consistent behavior between them.</strong></p>\n<p>For example, we needed to ensure that our CMS queries yielded the same results to the extent that videos appeared in the same order on both the web and mobile apps and that duration filters and sorting worked consistently.</p>\n<p>We had to do the same with our <a href=\"https://firebase.google.com/docs/firestore/\">Cloud Firestore</a> instance to keep the database structure intact while being mindful to write the correct value types and read the correct fields so they are mapped to the structure. Each developer worked on their local instance using <a href=\"https://firebase.google.com/docs/emulator-suite\">Firebase Local Emulator Suite</a> to speed up development, so we had to ensure everything was in order when we were ready to switch to staging and production databases.</p>\n<p>It was important to <strong>establish a collaborative atmosphere</strong> between the two development teams from the start, even more so considering we were all working in a remote environment. We made sure to keep in touch either through quick video calls or Slack messages to share knowledge and queries that we’d be using.</p>\n<p>As for the database, we kept a detailed diagram of our database structure and value types in order to eliminate all doubt and ensure both apps interact with the database identically. This served as our single source of truth and was made readily available to the teams for reference at all stages of development.</p>\n<p><img src=\"https://files.smashing.media/articles/waterbear-building-free-platform-impactful-documentaries-part1/7-diagram-showing-portion-database-structure.jpg\" /></p>\n<p>These strategies proved surprisingly more useful than we expected, as they allowed us to quickly and safely switch from the emulator to the staging and production database without any hiccups. As a bonus, it resulted in fewer bugs that originated from the interplay between the web and mobile applications.</p>\n<p><strong>My takeaway from this experience</strong>: It’s vital to keep the communication channels open to collaborate, discuss challenges, and share knowledge about the integrations and features both of our teams had to implement. It’s also worthwhile investing some extra time and care into maintaining crucial project documentation and diagrams. Having information readily available in a convenient format can save time and clear any doubts during development. Not only that, this documentation can even end up being a great onboarding guide for new team members in the future.</p>\nWhat I Learned As A First-Time Lead Developer\n<p>As I’ve mentioned before, this was my first gig as a lead developer. Developers are usually <strong>thrust into this sort of role</strong> at some point in their careers. Other than that, there is usually little or no preparation or training for it — we have to <strong>learn quickly and adapt</strong> on the fly based on our own experiences as developers.</p>\n<p>The day-to-day development work on my team gets a bit managerial as a result. As a lead developer, I am responsible for the work the team does, supporting and mentoring individual team members, and advocating for the team’s priorities. I was also more directly involved with planning and communicating with clients and stakeholders. For me, it was a <strong>lot of added responsibility</strong> that could feel overwhelming at various times.</p>\n<p>I decided to approach the role thoughtfully by <strong>setting rules and guiding principles for myself,</strong> as opposed to putting the new responsibilities aside and focusing primarily on development work. What are those rules and principles? Let’s discuss them one at a time.</p>\n<h3>Leading By Example And Mentoring On The Fly</h3>\n<p>First, I wanted to ensure that my team was producing consistent code quality across the board, with a priority on <strong>performance, accessibility, SEO, and usability</strong>. I like to refer to these as <strong>The Four Pillars</strong> of quality development.</p>\n<p>In my own experience, <strong>it is easier to follow existing, well-established, and documented footsteps.</strong> That’s where The Four Pillars served a significant role on our team, as they were emphasized during our team check-ins, demos, and reviews. Moreover, I set these expectations through my own pull requests (PR) by asking the team to review my work along those principles. </p>\n<p>At the very start of the project, I asked my team to scaffold the project and complete basic integration tasks that could be completed by following existing documentation. Meanwhile, that allowed me to chart the path forward by working on a set of feature tasks that established the foundation of The Four Pillars, then asking my team to review PRs to set expectations for the quality I was pursuing for the project. This way, they had a good amount of hands-on experience abiding by the principles, and I was able to lead that by example. My team should expect the same level of quality from me that I expect of them.</p>\n<p>The other benefit of this approach is that it allowed me to <strong>mentor the team on the fly.</strong> I could share resources and documentation supporting my work in the PRs, and the team could grow their own knowledge and understanding by requesting changes to my work. In other words, I managed to seamlessly introduce the team to new concepts.</p>\n<p><strong>My takeaway from this experience:</strong> Use every opportunity to share your knowledge with the team, even if it’s on the fly! And support the team’s learning journey by setting good examples that are aligned with well-defined expectations.</p>\n<h3>Acting As The Tiebreaker</h3>\n<p>As part of my own introduction to the role of lead developer, I picked up Alex MacCaw’s book <a href=\"https://themanagershandbook.com/\"><em>The Manager’s Handbook</em></a>, and it helped me overcome another interesting situation that came up during the project: acting as a tiebreaker when making decisions.</p>\n<p>Early in the project, we had a meeting with the mobile team about our shared database architecture. Some team members proposed a somewhat radical approach to how to structure a very crucial part of our database. <strong>It didn’t sit well with me and other team members</strong> as it wasn’t documented or mentioned anywhere else and wasn’t the standard practice within the company. We would also have to commit to this approach, and it would have cost us a lot if we hit a roadblock and had to roll back our work. The only thing we had to go on was a basic small-scale proof of concept — far from what we needed to do the work — but the team members who came up with the idea were adamant about the proposal.</p>\n<p>It was my call to make, and it was this specific advice from <a href=\"https://themanagershandbook.com/\"><em>The Manager’s Handbook</em></a> that came in handy at just the right time:</p>\n<blockquote>“Don’t let people pressure you into decisions you don’t believe in. They’ll hold you responsible for them later, and they’ll be right. Decisions are your responsibility.”</blockquote>\n\n<p>I decided to step back a bit and <strong>outline the possible risks and rewards</strong> of the proposed approach. It sounds so simple, but it allowed me to gain a better grasp on the debate and formulate my own conclusion that it wasn’t worth journeying into the unknown.</p>\n<p>I made my final decision and explained my reasoning to the team at our next internal meeting. I made sure to <strong>give props</strong> to the team members who came up with the innovative idea because <strong>it’s important to maintain an inclusive atmosphere where everyone feels heard and free to explore new ideas.</strong> </p>\n<p>Rejecting or postponing an idea shouldn’t be viewed as a negative outcome but as a part of the bigger picture of building a high-quality product, which was, of course, our primary goal.</p>\n<h3>Learn To Say “No” And Offer A Compromise</h3>\n<p>What I didn’t mention in that last story is that I offered the team members who came up with the innovative database structure <strong>a compromise</strong> by suggesting they present that idea to their team lead and explore its potential in a dedicated test project.</p>\n<p>The same principle applies when communicating with clients and stakeholders. It’s common for clients to come up with ideas and suggestions in the middle of the project timeline, which comes with the territory of projects using an <a href=\"https://www.smashingmagazine.com/2023/05/impact-agile-methodologies-code-quality/\">Agile methodology</a>. However, you still want to avoid overcommitting and pushing the team to its limits, and especially prevent yourself from carrying the burden of all the extra work yourself.</p>\n<p>I’ve learned that a lead developer acts as an <strong>advocate for the team</strong>. That means <a href=\"https://hbr.org/2015/12/how-to-say-no-to-taking-on-more-work\">knowing when to say “no” to requests</a>, particularly those that could make your team’s work noticeably difficult or stressful. </p>\n<p>Saying “no” might seem cold or come across as a negative reaction because it effectively puts a lid on the discussion. However, you can always acknowledge the suggestion and offer a compromise that both parties can agree on.</p>\n<p>Here are some real examples of how I was able to <strong>say “no” to an idea while offering a compromise</strong>:</p>\n<ul>\n<li><strong>Decreasing the scope</strong><br />“We might not be able to do X, Y, and Z and finish them in time to meet our deadlines. That said, we only need X at this stage, and perhaps we can postpone Y and Z in the next phase.”</li>\n<li><strong>Postponing</strong><br />“We can’t spare the time for X at this stage, but it’s a great suggestion, and we should make note of it even though we need to postpone it.”</li>\n<li><strong>Switching priorities</strong><br />“If X is a high priority and should be done this sprint, can we postpone a lower priority task so that we’re able to dedicate enough time in this sprint to finish it in time?”</li>\n</ul>\n<p>Rebecca Knight shares some <a href=\"https://hbr.org/2015/12/how-to-say-no-to-taking-on-more-work\">great principles and practical examples</a> that have resonated with me when it comes to saying “no”:</p>\n<blockquote><strong>Do</strong><ul><li>Evaluate whether you have the desire and the bandwidth to help with the request and ask if priorities can be shifted or trade-offs made.</li><li>Show a willingness to pitch in by inquiring if there are small ways you can be helpful to the project.</li><li>Practice saying no out loud. Eventually, it will become easier.</li></ul><br /><strong>Don’t</strong><ul><li>Use a harsh or hesitant tone, and don’t be overly polite either. Instead, strive for a steady and clear no.</li><li>Hold back the real reason you’re saying no. To limit frustration, give reasons with good weight up front.</li><li>Distort your message or act tentatively because you’re trying to keep your colleague happy. Be honest and make sure your no is understood.</li></ul></blockquote>\n\n\n\nBe Considerate And Communicate Clearly\n<p>This goes hand-in-hand with all the previous points I’ve made, and you might think it goes without saying. However, I want to highlight the importance of embedding empathy and considerate behavior in a team.</p>\n<p><strong>Building and maintaining mutual trust within a team is crucial</strong>. Whenever we had internal meetings to discuss the tasks for a current sprint, I made sure to go over each feature, clear any doubts and blockers, and confirm whether anyone had any concerns about their assigned tasks. Someone might have little to no experience with the service they’re integrating, and they might feel unsure whether they’re able to complete the task. Or they could have a scheduled doctor appointment during the sprint that threatens to delay their work and requires your assistance.</p>\n<p>Team members should feel free to speak up and share their concerns, problems, and opinions <strong>without judgment and repercussions</strong>. This allows you to plan, adapt, and solve problems early on and ease any stress and frustration a team member might feel if their progress gets stalled.</p>\nComing Up Next\n<p>In this article, I discussed the details of <a href=\"https://www.waterbear.com/\">WaterBear</a>, a large project that provides a free platform for documentaries that aim to inform viewers about issues and inspire them to take action. I took on the project as a first-time lead developer at <a href=\"https://q.agency/\">Q Agency</a> and shared the challenges I faced throughout the project. In particular, I focused on what I learned about developing and fostering a productive and collaborative team environment and the specific approaches I took to set expectations, lead by example, and communicate with empathy and inclusiveness.</p>\n<p>We discussed the strategy around defining objectives and the technical stack used to build the project. I will go over that in much greater detail in the concluding article of this two-part series.</p>\n<p>Please check out WaterBear on the <a href=\"https://www.waterbear.com/\">web</a>, <a href=\"https://play.google.com/store/apps/details?id=com.waterbearnetwork.waterbear&amp;hl=en_US&amp;pli=1\">Android,</a> and <a href=\"https://apps.apple.com/us/app/waterbear/id1461149595\">iOS,</a> and share with us your favorite documentaries! I’d also love for you to check out this excellent post-launch interview with WaterBear CEO Sam Sutaria. He offers a bunch of additional insights on our work from the client’s perspective.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://themanagershandbook.com/\"><em>The Manager’s Handbook</em></a>, Alex MacCaw</li>\n<li>“<a href=\"https://hbr.org/2015/12/how-to-say-no-to-taking-on-more-work\">How to Say No to Taking on More Work</a>,” Rebecca Knight</li>\n</ul>\n<p><em>Many thanks to WaterBear and Q Agency for helping out with this article and making it possible. I really would not have done this without their support. I would also like to commend everyone who worked on the project for their outstanding work! You have taught me so much so far, and I am grateful for it.</em></p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"6c9b4ab2885e6e91dcc8f420f56bbd4324140f8dbdbde1aef2d677a87e78648f","category":"Tech"}