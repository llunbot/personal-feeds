{"title":"CSS Blurry Shimmer Effect","link":"https://smashingmagazine.com/2024/01/css-blurry-shimmer-effect/","date":1706194800000,"content":"<p>Imagine <code>box-shadow</code> but for a blur effect, where the backdrop of an element is blurred around that element, gradually decreasing the blur’s strength. I came up with the idea while trying to improve the contrast of a popup over a dark area where a <code>box-shadow</code> for the popup won’t make much sense, design-wise. I then thought, well, what other ways might create a good contrast effect? And so suddenly, the idea of a gradual blur effect around the object came to me.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/QWoMvge\">Faded Outer Box Backdrop Blur [forked]</a> by <a href=\"https://codepen.io/vsync\">Yair Even Or</a>.</p>\n<p>It would be awesome if we had a <code>box-blur</code> property or perhaps some sort of <code>blur</code> keyword we could set on <code>box-shadow</code> the way we do for <code>inset</code> shadows. Unfortunately, CSS has no such property. But because CSS is awesome and flexible, we can still get the effect by combining a few CSS features and hack it through.</p>\n<p>What I’m going to show you from here on out is the thought process I took to create the effect. Sometimes, I find it easier to know what’s coming up rather than meandering through a narrative of twists and turns. So, for those of you who are like me and want to jump straight into the process, this was my approach.</p>\nStart With The Markup\n<p>The effect is approached in a way that it is applied to the <code>::before</code> pseudo-element of some element, say some popup/dialog/popover/tooltip. Those are the common “targets” for this sort of effect. I think using a pseudo-element is a good approach here because it means we could technically scope the styles to the pseudo-element and re-purpose the effect on other elements without any HTML changes.</p>\n<pre><code>&lt;!-- This is literally it for this demo --&gt;\n&lt;div&gt;&lt;/div&gt;\n</code></pre>\n\n<p>You can give the element a class, whatever dimensions you like, insert content and other child elements within it, or use a completely different element. The HTML isn’t the main ingredient for the secret sauce we’re making.</p>\nPosition The Pseudo-Element\n<p>We want the <code>::before</code> pseudo-element to occupy the entire area of the <code>&lt;div&gt;</code> element we’re using for this specific demo. Not only do we want it to cover the entire area, but even <em>overflow</em> it because that establishes the visible area, which holds the blur effect, so it will extend outwards.</p>\n<div>\n<pre><code>::before {<br />  content: '';\n\n  /* Make sure the parent element is at least relatively positioned to contain the pseudo-element. */\n  position: absolute;\n\n  /* The blur size should be anything below <code>0</code> so it will extend to the outside. */\n  inset: -100px;\n\n  /* This layer is positioned between the parent element and page background. */\n  /* Make sure this value is one below the <code>z-index</code> of the parent element. */\n  z-index: -1;\n}\n</code></pre>\n</div>\n\n<p>The code comments spell out the key pieces. An empty string has to be set for the <code>content</code> property so the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::before#syntax\"><code>::before</code></a> will be rendered, then we take it out of the document flow by giving it absolute positioning. This allows us to <code>inset</code> the element’s position and is ultimately setting the blur effect directions as we would on the <code>box-shadow</code> property — only we’re using <code>inset</code> to control its size. We want a <em>negative</em> <code>inset</code> value, where the effect extends further the lower the value gets.</p>\n<p>Until now, we’ve set the foundation for the effect. There’s nothing really to see just yet. Now, the fun begins!</p>\nMasking With Transparent Gradients\n<p>Gradients are technically <em>images</em> — generated by the browser — which can be used as CSS masks to hide parts of an element to create various shapes. You may have seen a few related Smashing Magazine articles where CSS masking has been showcased, such as <a href=\"https://www.smashingmagazine.com/2023/09/revealing-images-css-mask-animations/\">this one by Temani Afif</a>.</p>\n<p>Transparency is the key thing when it comes to masking with gradients. Transparency allows us to gradually hide portions of an element in a way that creates the illusion of fading in or out.</p>\n<p>That’s perfect in this case because we want the effect to be stronger, closer to the object, and fade in intensity as it gets further away.</p>\n<p>We’ll use two gradients: one that goes horizontally and another that goes vertically. I chose this route because it mimics a rough rectangle shape that fades out towards the edges.</p>\n<p>As I said, transparency is key. Both gradients start <code>transparent</code>, then transition to <code>black</code> until just before the end, where they go back to <code>transparent</code> to fade things out. Remember, these gradients are <em>masks</em> rather than background images, so they are declared on the <code>mask</code> property, which controls which pixels should be rendered and their opacity.</p>\n<div>\n<pre><code>mask:\n  linear-gradient(to top, transparent 0%, black 25% 75%, transparent 100%),\n  linear-gradient(to left, transparent 0%, black 25% 75%, transparent 100%);\n</code></pre>\n</div>\n\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/qBvXmpP\">Basic Gradient Mask [forked]</a> by <a href=\"https://codepen.io/vsync\">Yair Even Or</a>.</p>\n<ul>\n<li>The vertical gradient (<strong><code>to top</code></strong>) creates a fade from transparent at the bottom to black in the middle, then back to transparent at the top.</li>\n<li>The horizontal gradient (<strong><code>to left</code></strong>) produces a fade from transparent on the right to black in the middle, then back to transparent on the left.</li>\n</ul>\n<p>This dual-gradient approach positions the black regions, so they merge, creating the rough baseline of a rectangular shape that will be refined in the next step. The <code>mask</code> property is best declared as first prefixed and then un-prefixed to cover more browsers’ support:</p>\n<div>\n<pre><code>-webkit-mask:\n  linear-gradient(to top, transparent 0%, black 25% 75%, transparent 100%),\n  linear-gradient(to left, transparent 0%, black 25% 75%, transparent 100%);\nmask:\n  linear-gradient(to top, transparent 0%, black 25% 75%, transparent 100%),\n  linear-gradient(to left, transparent 0%, black 25% 75%, transparent 100%);\n</code></pre>\n</div>\n\nRefining Using The <code>mask-composite</code> Property\n<p>The <strong><code>mask-composite</code></strong> property is part of the CSS Masking Module and enables pixel-wise control over the blending of masked content, allowing for intricate compositions.</p>\n<p>The <strong><code>source-in</code></strong> value of this property is very useful for the effect we are after because it tells the browser to only retain the overlapping areas of the mask, so only pixels that contain both (mentioned above) gradients will get rendered. This locks in a rectangle shape, which can then be applied on any DOM element that has none-to-moderately curved corners (<code>border-radius</code>).</p>\nGradually Blurring The Backdrop\n<p>Now that we have a mask to work with, all we need to do is use it. The <code>backdrop-filter</code> CSS property can blur anything that is rendered “behind” an element using the <code>blur()</code> function:</p>\n<pre><code>::before {\n  /* etc. */\n\n  backdrop-filter: blur(10px);\n}\n</code></pre>\n\n<p>The larger the value, the more intense the blur. I’m using <code>10px</code> arbitrarily. In fact, we can variablize this stuff later to make the implementation even more flexible and easily configurable.</p>\n<p>But wait! As it turns out, Safari requires a vendor-prefixed version of <code>backdrop-filter</code> to get it working there:</p>\n<div>\n<pre><code>::before {\n  /* etc. */\n\n  -webkit-backdrop-filter: blur(10px); /* Required for Safari */\n  backdrop-filter: blur(10px);\n}\n</code></pre>\n</div>\n\n<p><strong>Note</strong>: <em>It’s preferred to declare prefixed properties</em> <strong><em>before</em></strong> <em>the unprefixed variant so they serve as a fallback for browsers that don’t (yet) support them or their implementation is different.</em></p>\nA Touch of Synergistic Shadow\n<p>I think adding a slight semi-opaque black <code>box-shadow</code> that covers the blur area gives the effect a little extra depth. The only thing is that you’ll want to add it to the element itself rather than it’s <code>::before</code> pseudo:</p>\n<pre><code>div {\n  box-shadow: 0 0 40px #00000099;\n}\n</code></pre>\n\n<p>That’s totally optional, though.</p>\nBringing Everything Together\n<p>Here’s how the CSS comes out when we combine everything together.</p>\n<div>\n<pre><code>/* This can be set on the ::before pseudo of the element it is applied to. */\n::before {<br />  content: '';\n\n  /* This layer is positioned between some element and its background. */\n  position: absolute;\n\n  /* This should not affect the contents of the container. */\n  z-index: -1;\n\n  /* The blur size should be anything below <code>0</code> so it will extend to the outside. */\n  inset: -100px;\n\n  /* The blur effect */\n  -webkit-backdrop-filter: blur(10px); /* Required for safari */\n  backdrop-filter: blur(10px);\n\n  /* A mask fades the blur effect, so it gets weaker. */\n  /* towards the edges, further from the container box. */\n  /* (The fill color is irrelevant, so \"red\" is used as it's the shortest color name.) */\n  mask: \n    linear-gradient(\n      to top, \n      transparent 0%,\n      red 100px calc(100% - 100px),\n      transparent 100%), \n    linear-gradient(\n      to left,\n      transparent 0%,\n      red 100px calc(100% - 100px),\n      transparent 100%);\n\n  /* This merges the masks above so only the overlapping pixels are rendered. */\n  /* This creates the illusion of a fade-out mask. */\n  mask-composite: intersect;\n  -webkit-mask-composite: source-in; /* Required for Safari */\n}\n</code></pre>\n</div>\n\nThe Final Demo, One More Time\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/ZEPJKRO\">Faded Outer Box Backdrop Blur [forked]</a> by <a href=\"https://codepen.io/vsync\">Yair Even Or</a>.</p>\n<p>I’ve also prepared a <a href=\"https://codepen.io/vsync/pen/YzgGvRN?editors=1100\">simplified version</a> with minimal code and no CSS variables that’s easier to read and re-purpose.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"14629ae4d559ff210090060c2e015f4c51a373066e27250cce93b66469a73f87","category":"Tech"}