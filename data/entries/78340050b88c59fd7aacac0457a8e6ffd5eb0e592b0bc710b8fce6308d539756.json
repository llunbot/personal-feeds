{"title":"Amazon Aurora PostgreSQL Limitless Database is now generally available","link":"https://aws.amazon.com/blogs/aws/amazon-aurora-postgresql-limitless-database-is-now-generally-available/","date":1730394512000,"content":"<p>Today, we are announcing the general availability of <strong>Amazon Aurora PostgreSQL Limitless Database</strong>, a new serverless horizontal scaling (sharding) capability of <a href=\"https://aws.amazon.com/aurora/\">Amazon Aurora</a>. With Aurora PostgreSQL Limitless Database, you can scale beyond the existing Aurora limits for write throughput and storage by distributing a database workload over multiple Aurora writer instances while maintaining the ability to use it as a single database.</p> \n<p>When we <a href=\"https://aws.amazon.com/blogs/aws/join-the-preview-amazon-aurora-limitless-database/\">previewed Aurora PostgreSQL Limitless Database</a> at AWS re:Invent 2023, I explained that it uses a two-layer architecture consisting of multiple database nodes in a DB shard group – either routers or shards to scale based on the workload.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/29/2024-aurora-limitless-database-ga-1-architecture-1.png\" width=\"1410\" height=\"1094\" /></p> \n<ul> \n <li><strong>Routers </strong>– Nodes that accept SQL connections from clients, send SQL commands to shards, maintain system-wide consistency, and return results to clients.</li> \n <li><strong>Shards</strong> – Nodes that store a subset of tables and full copies of data, which accept queries from routers.</li> \n</ul> \n<p>There will be three types of tables that contain your data: sharded, reference, and standard.</p> \n<ul> \n <li><strong>Sharded tables</strong> – These tables are distributed across multiple shards. Data is split among the shards based on the values of designated columns in the table, called shard keys. They are useful for scaling the largest, most I/O-intensive tables in your application.</li> \n <li><strong>Reference tables</strong> – These tables copy data in full on every shard so that join queries can work faster by eliminating unnecessary data movement. They are commonly used for infrequently modified reference data, such as product catalogs and zip codes.</li> \n <li><strong>Standard tables</strong> – These tables are like regular Aurora PostgreSQL tables. Standard tables are all placed together on a single shard so join queries can work faster by eliminating unnecessary data movement. You can create sharded and reference tables from standard tables.</li> \n</ul> \n<p>Once you have created the DB shard group and your sharded and reference tables, you can load massive amounts of data into Aurora PostgreSQL Limitless Database and query data in those tables using standard PostgreSQL queries. To learn more, visit <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-architecture.html\">Limitless Database architecture</a> in the Amazon Aurora User Guide.</p> \n<p><strong><u>Getting started with Aurora PostgreSQL Limitless Database</u></strong><br /> You can get started in the <a href=\"https://console.aws.amazon.com/rds/home\">AWS Management Console</a> and <a href=\"https://aws.amazon.com/cli\">AWS Command Line Interface (AWS CLI)</a> to create a new DB cluster that uses Aurora PostgreSQL Limitless Database, add a DB shard group to the cluster, and query your data.</p> \n<p><strong>1. Create an Aurora PostgreSQL Limitless Database Cluster</strong><br /> Open the <a href=\"https://console.aws.amazon.com/rds\">Amazon Relational Database Service (Amazon RDS) console</a> and choose <strong>Create database</strong>. For <strong>Engine options</strong>, choose <strong>Aurora (PostgreSQL Compatible) </strong>and <strong>Aurora PostgreSQL with Limitless Database (Compatible with PostgreSQL 16.4)</strong>.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/29/2024-aurora-limitless-database-ga-2-create-cluster-3.jpg\" width=\"1690\" height=\"1740\" /></p> \n<p>For <strong>Aurora PostgreSQL Limitless Database</strong>, enter a name for your DB shard group and values for minimum and maximum capacity measured by Aurora Capacity Units (ACUs) across all routers and shards. The initial number of routers and shards in a DB shard group is determined by this maximum capacity. Aurora PostgreSQL Limitless Database scales a node up to a higher capacity when its current utilization is too low to handle the load. It scales the node down to a lower capacity when its current capacity is higher than needed.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/29/2024-aurora-limitless-database-ga-3-db-shard-group-4.png\" width=\"1668\" height=\"1278\" /></p> \n<p>For <strong>DB shard group deployment</strong>, choose whether to create standbys for the DB shard group: no compute redundancy, one compute standby in a different Availability Zone, or two compute standbys in two different Availability Zones.</p> \n<p>You can set the remaining DB settings to what you prefer and choose <strong>Create database</strong>. After the DB shard group is created, it is displayed on the <strong>Databases</strong> page.</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2024/10/23/2024-aurora-limitless-database-ga-4-my-cluster.png\" width=\"2192\" height=\"1280\" /></p> \n<p>You can connect, reboot, or delete a DB shard group, or you can change the capacity, split a shard, or add a router in the DB shard group. To learn more, visit <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-shard.html\">Working with DB shard groups</a> in the Amazon Aurora User Guide.</p> \n<p><strong>2. Create Aurora PostgreSQL Limitless Database tables</strong><br /> As shared previously, Aurora PostgreSQL Limitless Database has three table types: sharded, reference, and standard. You can convert standard tables to sharded or reference tables to distribute or replicate existing standard tables or create new sharded and reference tables.</p> \n<p>You can use variables to create sharded and reference tables by setting the table creation mode. The tables that you create will use this mode until you set a different mode. The following examples show how to use these variables to create sharded and reference tables.</p> \n<p>For example, create a sharded table named <code>items</code> with a shard key composed of the <code>item_id</code> and <code>item_cat</code> columns.</p> \n<pre><code>SET rds_aurora.limitless_create_table_mode='sharded';\nSET rds_aurora.limitless_create_table_shard_key='{\"item_id\", \"item_cat\"}';\nCREATE TABLE items(item_id int, item_cat varchar, val int, item text);</code></pre> \n<p>Now, create a sharded table named <code>item_description</code> with a shard key composed of the <code>item_id</code> and <code>item_cat</code> columns and collocate it with the <code>items</code> table.</p> \n<pre><code>SET rds_aurora.limitless_create_table_collocate_with='items';\nCREATE TABLE item_description(item_id int, item_cat varchar, color_id int, ...);</code></pre> \n<p>You can also create a reference table named <code>colors</code>.</p> \n<pre><code>SET rds_aurora.limitless_create_table_mode='reference';\nCREATE TABLE colors(color_id int primary key, color varchar);</code></pre> \n<p>You can find information about Limitless Database tables by using the <code>rds_aurora.limitless_tables</code> view, which contains information about tables and their types.</p> \n<pre><code>postgres_limitless=&gt; SELECT * FROM rds_aurora.limitless_tables;\n\n table_gid | local_oid | schema_name | table_name  | table_status | table_type  | distribution_key\n-----------+-----------+-------------+-------------+--------------+-------------+------------------\n         1 |     18797 | public      | items       | active       | sharded     | HASH (item_id, item_cat)\n         2 |     18641 | public      | colors      | active       | reference   | \n\n(2 rows)</code></pre> \n<p>You can convert standard tables into sharded or reference tables. During the conversion, data is moved from the standard table to the distributed table, then the source standard table is deleted. To learn more, visit <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-converting-standard.html\">Converting standard tables to limitless tables</a> in the Amazon Aurora User Guide.</p> \n<p><strong>3. Query Aurora PostgreSQL Limitless Database tables<br /> </strong>Aurora PostgreSQL Limitless Database is compatible with PostgreSQL syntax for queries. You can query your Limitless Database using <code>psql</code> or any other connection utility that works with PostgreSQL. Before querying tables, you can <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-load.html\">load data into Aurora Limitless Database tables</a> by using the <code>COPY</code> command or by using the <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-load.utility.html\">data loading utility</a>.</p> \n<p>To run queries, connect to the cluster endpoint, as shown in <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-shard.html#limitless-endpoint\">Connecting to your Aurora Limitless Database DB cluster</a>. All PostgreSQL <code>SELECT</code> queries are performed on the router to which the client sends the query and shards where the data is located.</p> \n<p>To achieve a high degree of parallel processing, Aurora PostgreSQL Limitless Database utilizes two querying methods: single-shard queries and distributed queries, which determines whether your query is single-shard or distributed and processes the query accordingly.</p> \n<ul> \n <li><strong>Single-shard query</strong> – A query where all the data needed for the query is on one shard. The entire operation can be performed on one shard, including any result set generated. When the query planner on the router encounters a query like this, the planner sends the entire SQL query to the corresponding shard.</li> \n <li><strong>Distributed query</strong> – A query run on a router and more than one shard. The query is received by one of the routers. The router creates and manages the distributed transaction, which is sent to the participating shards. The shards create a local transaction with the context provided by the router, and the query is run.</li> \n</ul> \n<p>For examples of single-shard queries, you use the following parameters to configure the output from the <code>EXPLAIN</code> command.</p> \n<pre><code>postgres_limitless=&gt; SET rds_aurora.limitless_explain_options = shard_plans, single_shard_optimization;\nSET\n\npostgres_limitless=&gt; EXPLAIN SELECT * FROM items WHERE item_id = 25;\n\n                     QUERY PLAN\n--------------------------------------------------------------\n Foreign Scan  (cost=100.00..101.00 rows=100 width=0)\n   Remote Plans from Shard postgres_s4:\n         Index Scan using items_ts00287_id_idx on items_ts00287 items_fs00003  (cost=0.14..8.16 rows=1 width=15)\n           Index Cond: (id = 25)\n Single Shard Optimized\n(5 rows) </code></pre> \n<p>To learn more about the EXPLAIN command, see <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">EXPLAIN</a> in the PostgreSQL documentation.</p> \n<p>For examples of distributed queries, you can insert new items named <code>Book</code> and <code>Pen</code> into the <code>items</code> table.</p> \n<pre><code>postgres_limitless=&gt; INSERT INTO items(item_name)VALUES ('Book'),('Pen')</code></pre> \n<p>This makes a distributed transaction on two shards. When the query runs, the router sets a snapshot time and passes the statement to the shards that own <code>Book</code> and <code>Pen</code>. The router coordinates an atomic commit across both shards, and returns the result to the client.</p> \n<p>You can use distributed query tracing, a tool to trace and correlate queries in PostgreSQL logs across Aurora PostgreSQL Limitless Database. To learn more, visit <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-query.html\">Querying Limitless Database</a> in the Amazon Aurora User Guide.</p> \n<p>Some SQL commands aren’t supported. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-reference.html\">Aurora Limitless Database reference</a> in the Amazon Aurora User Guide.</p> \n<p><strong><u>Things to know<br /> </u></strong>Here are a couple of things that you should know about this feature:</p> \n<ul> \n <li><strong>Compute </strong>– You can only have one DB shard group per DB cluster and set the maximum capacity of a DB shard group to 16–6144 ACUs. Contact us if you need more than 6144 ACUs. The initial number of routers and shards is determined by the maximum capacity that you set when you create a DB shard group. The number of routers and shards doesn’t change when you modify the maximum capacity of a DB shard group. To learn more, see <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-cluster.html#limitless-capacity-mapping\">the table of the number of routers and shards</a> in the Amazon Aurora User Guide.</li> \n <li><strong>Storage </strong>– Aurora PostgreSQL Limitless Database only supports the <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Overview.StorageReliability.html#aurora-storage-type\">Amazon Aurora I/O-Optimized</a> DB cluster storage configuration. Each shard has a maximum capacity of 128 TiB. Reference tables have a size limit of 32 TiB for the entire DB shard group. To reclaim storage space by cleaning up your data, you can use the <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-vacuum.html\">vacuuming utility</a> in PostgreSQL.</li> \n <li><strong>Monitoring </strong>– You can use <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-monitoring.cw.html\">Amazon CloudWatch</a>, <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-monitoring.cwl.html\">Amazon CloudWatch Logs</a>, or <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-monitoring.pi.html\">Performance Insights</a> to monitor Aurora PostgreSQL Limitless Database. There are also <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-monitoring-fns-views.html\">new statistics functions and views</a> and <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless-monitoring-waits.html\">wait events</a> for Aurora PostgreSQL Limitless Database that you can use for monitoring and diagnostics.</li> \n</ul> \n<p><strong><u>Now available<br /> </u></strong>Amazon Aurora PostgreSQL Limitless Database is available today with PostgreSQL 16.4 compatibility in the AWS US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Hong Kong), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), Europe (Frankfurt), Europe (Ireland), and Europe (Stockholm) Regions.</p> \n<p>Give Aurora PostgreSQL Limitless Database a try in the <a href=\"https://console.aws.amazon.com/rds/\">Amazon RDS console</a>. For more information, visit the <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/limitless.html\">Amazon Aurora User Guide</a> and send feedback to <a href=\"https://repost.aws/tags/TAxfQ-h0UrRZ69nv5Q_M-BRQ/aurora-postgresql\">AWS re:Post for Amazon Aurora</a> or through your usual AWS support contacts.</p> \n<p>— <a href=\"https://twitter.com/channyun\">Channy</a></p>","author":"Channy Yun (윤석찬)","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"78340050b88c59fd7aacac0457a8e6ffd5eb0e592b0bc710b8fce6308d539756","category":"Tech"}