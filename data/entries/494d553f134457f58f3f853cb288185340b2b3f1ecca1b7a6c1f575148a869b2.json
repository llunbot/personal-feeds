{"title":"Use Amazon CloudWatch to consolidate hybrid, multicloud, and on-premises metrics","link":"https://aws.amazon.com/blogs/aws/new-use-amazon-cloudwatch-to-consolidate-hybrid-multi-cloud-and-on-premises-metrics/","date":1701027729000,"content":"<p>You can now consolidate metrics from your <a href=\"https://aws.amazon.com/hybrid-multicloud/\">hybrid, multicloud</a>, and on-premises data sources using <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> and process them in a consistent, unified fashion. You can query, visualize, and alarm on any and all of the metrics, regardless of their source. In addition to giving you a unified view, this new feature will help you to identify trends and issues that span multiple parts and aspects of your infrastructure.</p> \n<p>When I first heard about this new feature, I thought, “Wait, I can do that with <code><a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricData.html\">PutMetricData</a></code>, what’s the big deal?” Quite a bit, as it turns out. <code>PutMetricData</code> stores the metrics in CloudWatch, but this cool new feature fetches them on demand, directly from the source.</p> \n<p>Instead of storing data, you select and configure connectors that pull data from <a href=\"https://aws.amazon.com/prometheus/\">Amazon Managed Service for Prometheus</a>, generic <a href=\"https://prometheus.io/\">Prometheus</a>, <a href=\"https://aws.amazon.com/opensearch-service/\">Amazon OpenSearch Service</a>, <a href=\"https://aws.amazon.com/rds/mysql/\">Amazon RDS for MySQL</a>, <a href=\"https://aws.amazon.com/rds/postgresql/\">Amazon RDS for PostgreSQL</a>, CSV files stored in <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>, and <a href=\"https://azure.microsoft.com/en-us/products/monitor/\">Microsoft Azure Monitor</a>. Each connector is a <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> function that is deployed from a <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> template. CloudWatch invokes the appropriate Lambda functions as needed and makes use of the returned metrics immediately — they are not buffered or kept around.</p> \n<p><span><strong>Creating and using connectors</strong></span><br /> To get started I open the CloudWatch Console, click All metrics, and activate the <strong>Multi source query</strong> tab, then I click <strong>Create and manage data sources</strong>:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/22/dx_msq_3.png\" width=\"781\" height=\"470\" /></p> \n<p>And then I do it again:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/22/dx_cmds_2.png\" width=\"785\" height=\"438\" /></p> \n<p>Then I choose a data source type:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/22/dx_connectors_2.png\" width=\"800\" height=\"1042\" /></p> \n<p>CloudWatch will then prompt me for the details that it needs to create and set up the connector for my data source. For example, if I select <strong>Amazon RDS – MySQL</strong>, I give my data source a name, choose the RDS database instance, and specify the connection info:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/22/dx_mysql_2.png\" width=\"800\" height=\"1057\" /></p> \n<p>When I click <strong>Create data source</strong>, a Lambda function, a Lambda Permission, an IAM role, a Secrets Manager Secret, a Log Group, and a <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> Stack will be created in my account:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/13/dx_resources_1.png\" width=\"800\" height=\"650\" /></p> \n<p>Then, when I am ready to reference the data source and make use of the metrics that it provides, I enter a SQL query that returns timestamps and values for the metric:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/22/dx_mysql_3.png\" width=\"700\" height=\"437\" /></p> \n<p><span><strong>Inside the Lambda function</strong></span><br /> The code for the <strong>Custom – getting started</strong> template is short, simple, and easy to understand. It implements handlers for two events:</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/11/13/dx_handler_1.png\" width=\"429\" height=\"172\" /><strong>DescribeGetMetricData</strong> – This handler returns a string that includes the name of the connector, default values for the arguments to the other handler, and a text description in <a href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a> format that is displayed in the custom data source query builder in the CloudWatch console.</p> \n<p><strong>GetMetricData</strong> – This handler returns a metric name, 1-dimensional array of timestamps and metric values, all for a time range that is provided as arguments to the handler.</p> \n<p>If you spend a few minutes examining this code you should be able to see how to write functions to connect to your own data sources.</p> \n<p><span><strong>Things to know</strong></span><br /> Here are a couple of things to keep in mind about this powerful new feature:</p> \n<p><strong>Regions</strong> – You can create and use data connectors in all commercial AWS Regions; a connector that is running in one region can connect to and retrieve data from services and endpoints in other regions and other AWS accounts.</p> \n<p><strong>Pricing</strong> – There is no extra charge for the connectors. You pay for the invocations of the Lambda functions and for any other AWS infrastructure that you create.</p> \n<p>— <a href=\"https://twitter.com/jeffbarr\">Jeff</a>;</p>","author":"Jeff Barr","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"494d553f134457f58f3f853cb288185340b2b3f1ecca1b7a6c1f575148a869b2","category":"Tech"}