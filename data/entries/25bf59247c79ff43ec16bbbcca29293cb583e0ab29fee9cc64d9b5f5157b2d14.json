{"title":"Open-Source Meets Design Tooling With Penpot","link":"https://smashingmagazine.com/2024/11/open-source-meets-design-tooling-penpot/","date":1731578400000,"content":"<p>This article is a sponsored by <a href=\"https://penpot.app/?utm_source=Article&amp;utm_medium=SmashingMag&amp;utm_id=Penpot2.0\">Penpot</a></p>\n<p>Penpot is a free, open-source design tool that allows true collaboration between designers and developers. Designers can create interactive prototypes and design systems at scale, while developers enjoy ready-to-use code and make their workflow easy and fast because it's built with web technologies, works in the browser, and has already passed <a href=\"https://github.com/penpot/penpot\">33K starts on GitHub</a>.</p>\n<p>The UI feels intuitive and makes it easy to get things done, even for someone who’s not a designer (guilty as charged!). You can get things done in the same way and with the same quality as with other more popular and closed-source tools like Figma.</p>\n<p><img src=\"https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/1-penpot.png\" /></p>\nWhy Open-Source Is Important\n<p>As someone who works with commercial open-source on my day-to-day, I strongly believe in it as a way to be closer to your users and unlock the next level of delivery. Being open-source creates a whole new level of accountability and flexibility for a tool.</p>\n<p>Developers are a different breed of user. When we hit a quirk or a gap in the UX, our first instinct is to play detective and figure out why that pattern stuck out as a sore thumb to what we’ve been doing. When the code is open-source, it’s not unusual for us to jump into the source and create an issue with a proposal on how to solve it already. At least, that’s the dream.</p>\n<p>On top of that, being open-source allows you and your team to <strong>self-host</strong>, giving you that extra layer of privacy and control, or at least a more cost-effective solution if you have the time and skills to DYI it all.</p>\n<p>When the cards are played right, and the team is able to afford the long-term benefits, commercial open-source is a win-win strategy.</p>\nIntroducing: Penpot Plugin System\n<p>Talking about the extensibility of open-source, Penpot has the <a href=\"https://penpot.app/penpothub?utm_source=SmashingMag&amp;utm_medium=Article&amp;utm_campaign=PluginsContest\">PenpotHub</a> the home for open-source <strong>templates</strong> and the newly released <strong>plugin</strong> gallery. So now, if there’s a functionality missing, you don’t need to jump into the code-base straightaway — you can create a plugin to achieve what you need. And you can even serve it from localhost!</p>\n<h3>Creating Penpot Plugins</h3>\n<p>When it comes to the plugins, creating one is extremely ergonomic. First, there are already set <a href=\"https://penpot.app/penpothub/libraries-templates?utm_source=SmashingMag&amp;utm_medium=Article&amp;utm_campaign=PluginsContest\">templates</a> for a few frameworks, and I created one for <a href=\"https://github.com/penpot/plugin-examples/pull/2\">SolidJS in this PR</a> — the power of open-source!</p>\n<p>When using <a href=\"https://vite.dev/\">Vite</a>, plugins are Single-Page Applications; if you have ever built a Hello World app with Vite, you have what it takes to create a plugin. On top of that, the Penpot team has a few packages that can give you a headstart in the process:</p>\n<pre><code>npm install @penpot/plugin-styles\n</code></pre>\n\n<p>That will allow you to import with a CSS loader or a CSS import from <code>@penpot/plugin-styles/styles.css</code>. The JavaScript API is available through the window object, but if your plugin is in TypeScript, you need to teach it:</p>\n<pre><code>npm add -D @penpot/plugin-types\n</code></pre>\n\n<p>With those types in your <code>node_modules</code>, you can pop-up the <code>tsconfig.json</code> and add the <code>types</code> to the <code>compilerOptions</code>.</p>\n<pre><code>{\n  \"compilerOptions\": {\n    \"types\": [\"@penpot/plugin-types\"]\n  }\n}\n</code></pre>\n\n<p>And there you are, now, the Language Service Provider in your editor and the TypeScript Compiler will accept that penpot is a valid namespace, and you’ll have auto-completion for the Penpot APIs throughout your entire project. For example, defining your plugin will look like the following:</p>\n<pre><code>penpot.ui.open(\"Your Plugin Name\", \"\", {\n  width: 500,\n  height: 600\n})\n</code></pre>\n\n<p>The last step is to define a plugin manifest in a <code>manifest.json</code> file and make sure it’s in the outpot directory from Vite. The manifest will indicate where each asset is and what permissions your plugin requires to work:</p>\n<div>\n<pre><code>{\n  \"name\": \"Your Plugin Name\",\n  \"description\": \"A Super plugin that will win Penpot Plugin Contest\",\n  \"code\": \"/plugin.js\",\n  \"icon\": \"/icon.png\",\n  \"permissions\": [\n    \"content:read\",\n    \"content:write\",\n    \"library:read\",\n    \"library:write\",\n    \"user:read\",\n    \"comment:read\",\n    \"comment:write\",\n    \"allow:downloads\"\n  ]\n}\n</code></pre>\n</div>\n\n<p>Once the initial setup is done, the communication between the Penpot API and the plugin interface is done with a bidirectional messaging system, not so different than what you’d do with a Web-Worker.</p>\n<p>So, to send a message from your plugin to the Penpot API, you can do the following:</p>\n<pre><code>penpot.ui.sendMessage(\"Hello from my Plugin\");\n</code></pre>\n\n<p>And to receive it back, you need to add an event listener to the <code>window</code> object (the top-level scope) of your plugin:</p>\n<div>\n<pre><code>window.addEventListener(\"message\", event =&gt; {\n  console.log(\"Received from Pendpot::: \", event.data);\n})\n</code></pre>\n</div>\n\n<p><strong>A quick performance tip</strong>: <em>If you’re creating a more complex plugin with different views and perhaps even routes, you need to have a cleanup logic. Most frameworks provide decent ergonomics to do that; for example, React does it via their return statements.</em></p>\n<div>\n<pre><code>useEffect(() =&gt; {\n  function handleMessage(e) {\n    console.log(\"Received from Pendpot::: \", event.data);\n  }\n  window.addEventListener('message', handleMessage);\n\n  return () =&gt; window.removeEventListener('message', handleMessage);\n}, []);\n</code></pre>\n</div>\n\n<p>And Solid has <code>onMount</code> and <code>onCleanup</code> helpers for it:</p>\n<pre><code>onMount(() =&gt; {\n  function handleMessage(e) {\n    console.log(\"Received from Penpot::: \", event.data);\n  }\n  window.addEventListener('message', handleMessage);\n})\n\nonCleanup(() =&gt; {\n  window.removeEventListener('message', handleMessage);\n})\n</code></pre>\n\n<p>Or with the <a href=\"https://primitives.solidjs.community/package/event-listener#createeventlistener\"><code>@solid-primitive/event-listener</code></a> helper library, so it will be automatically disposed:</p>\n<div>\n<pre><code>import { makeEventListener } from \"@solid-primitives/event-listener\";\n\nfunction Component() {\n\n  const clear = makeEventListener(window, \"message\", handleMessage);\n\n  // ...\n  return (&lt;span&gt;Hello!&lt;/span&gt;)\n}\n</code></pre>\n</div>\n\n<p>In the official documentation, there’s a <a href=\"https://help.penpot.app/plugins/create-a-plugin?utm_source=SmashingMag&amp;utm_medium=Article&amp;utm_campaign=PluginsContest\">step-by-step guide</a> that will walk you through the process of creating, testing, and publishing your plugin. It will even help you out.</p>\n<p>So, what are you waiting for?</p>\nPlugin Contest: Imagine, Build, Win\n<p>Well, maybe you’re waiting for a push of motivation. The <a href=\"https://penpot.app/?utm_source=SmashingMag&amp;utm_medium=Article&amp;utm_campaign=PluginsContest\">Penpot</a> team thought of that, which is why they’re starting a <a href=\"https://penpot.app/plugins-contest?utm_source=SmashingMag&amp;utm_medium=Article&amp;utm_campaign=PluginsContest\">Plugin Contest</a>!</p>\n<p>For this contest, they want a fully functional plugin; it must be open-source and include comprehensive documentation. Detailing its features, installation, and usage. The first prize is US$ 1000, and the criteria are innovation, functionality, usability, performance, and code quality. The contest will run from November 15th to December 15th.</p>\nFinal Thoughts\n<p>If you decide to build a plugin, I’d love to know what you’re building and what stack you chose. Please let me know in the comments below or on <a href=\"https://atila.io/bsky\">BlueSky</a>!</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"25bf59247c79ff43ec16bbbcca29293cb583e0ab29fee9cc64d9b5f5157b2d14","category":"Tech"}