{"title":"น่าสนใจสำหรับ RESTler: Stateful REST API Fuzzing","link":"https://www.somkiat.cc/rest-api-fuzzing-with-restler/","date":1627384538000,"content":"<p><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/07/1200x627_Restler_still_with_logo-1-150x150.png\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/07/1200x627_Restler_still_with_logo-1-1024x535.png\" /></figure>\n\n\n\n<p>อ่าน research paper ของ Microsoft <br />เรื่อง <strong><a href=\"https://www.microsoft.com/en-us/research/publication/restler-stateful-rest-api-fuzzing/\" target=\"_blank\">RESTler: Stateful REST API Fuzzing</a></strong><br />เป็นเครื่องมือสำหรับการทดสอบ REST API <br />แบบ Fuzz testing หรือ Fuzzing<br />คือรูปแบบหนึ่งของการทดสอบแบบ blackbox<br />โดยจะพยายามหา bug หรือ ข้อผิดพลาดจาก input ในรูปแบบต่าง ๆ อย่างอัตโนมัติ</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>โดยที่ Fuzzing จะมีอยู่ 3 รูปแบบ</strong></p>\n\n\n\n<ul><li><strong>Blackbox</strong> ทำการ random input จะ interface ของระบบที่จะทดสอบ แล้วดูพฤติกกรมการทำงาน</li><li><strong>Grammar-based</strong> ทำการสร้าง input ตามมุมมองของผู้ใช้งาน</li><li><strong>Whitebox</strong> ทำการสร้าง input แบบ dynamic ตามการทำงานภายในของระบบ เพื่อให้ครอบคลุมทุก ๆ เงื่อนไข (branch condition) ซึ่งเป็นรูปแบบที่ทดสอบในครอบคลุมมาก ๆ</li></ul>\n\n\n\n<p><strong>ทำไมต้องใช้ Fuzzing ด้วย เพื่อทดสอบ</strong></p>\n\n\n\n<ul><li>ช่วยหาข้อผิดพลาดในรูปแบบอื่น ๆ ที่การทดสอบแบบปกติ (static) มักจะหาไม่เจอ</li><li>ช่วยให้การทดสอบมีคุณภาพและน่าเชื่อถือมากยิ่งขึ้น</li></ul>\n\n\n\n<p><strong>สำหรับ Paper นี้จะทำการทดสอบ REST API</strong></p>\n\n\n\n<p>โดยทำการสร้างเครื่องมือชื่อว่า RESTler มาให้ใช้งาน<br />พัฒนาด้วยภาษา Python 3.8.2 และ .NET 5<br />หรือจะใช้งานผ่าน <a href=\"https://github.com/microsoft/restler-fuzzer/blob/main/docker/Dockerfile\" target=\"_blank\">Docker</a> ก็ได้<br /></p>\n\n\n\n<p><strong>การทำงานของ RESTler จะทำการวิเคราะห์จาก Open API Specification หรือ Swagger นั่นเอง</strong></p>\n\n\n\n<p>เพื่อทำการสร้างรูปแบบของ input <br />จากนั้นทำการส่ง input นั้น ๆ ไปยัง API<br />รวมทั้งยังทำการเรียนรู้จาก response ที่ได้มาจาก input ก่อนหน้า<br />ทำให้เป็นเครื่องมือที่เรียกว่า Stateful นั่นเอง<br />แสดงดังรูป</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/07/RESTler-arch.png\" /></figure>\n\n\n\n<p><strong>ลองดูจาก <a href=\"https://github.com/microsoft/restler-fuzzer/tree/main/demo_server\" target=\"_blank\">Demo project</a> ได้เลย</strong></p>\n\n\n\n<p>เริ่มด้วย start api server ก่อน<br />จากนั้นทำการ run RESTler ใน command line<br />แต่ระวังด้วยนะครับ เพราะว่า server อาจจะล่มได้เลย<br />เนื่องจากยิง request มาเยอะมาก ๆ</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/07/1_AZ8apBPUn_fgWplRCeFcIw-1024x426.png\" /></figure>\n\n\n\n<p><strong>Reference Websites</strong></p>\n\n\n\n<p><a href=\"https://www.microsoft.com/en-us/research/blog/restler-finds-security-and-reliability-bugs-through-automated-fuzzing/\">https://www.microsoft.com/en-us/research/blog/restler-finds-security-and-reliability-bugs-through-automated-fuzzing/</a></p>\n\n\n\n<p><a href=\"https://owasp.org/www-project-web-security-testing-guide/v41/6-Appendix/C-Fuzz_Vectors\">https://owasp.org/www-project-web-security-testing-guide/v41/6-Appendix/C-Fuzz_Vectors</a></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"9c4d74e5da23b60f56c3369dba2e68f3baa7a6cd12ee5aa25c5ee5c69b82d0cf","category":"Thai"}