{"title":"Learn these macOS Terminal shortcuts so you can spend less time typing","link":"https://www.macworld.com/article/174665/macos-terminal-typing-tips.html","date":1626507000000,"content":"\n<div>\n<section><div></div></section><p>Many people stay away from macOS’s Terminal because of the tedium of typing in long, precise commands. But you can save lots of time and type less by using the command history functions built into the Terminal shell. The shell keeps a record of the commands you run, and you can access this history with a few simple keystrokes to run commands again or edit them, so you don’t have to retype them.</p>\n\n\n\n<p>Terminal saves the command history in last-in, first-out order, which means that the first command in the history list is the last command issued. If you want to run a command that you’ve already typed—say you want to rerun the last command you just typed—all you have to do is press the up-arrow key, and the shell displays the last run command at the prompt.</p>\n\n\n\n<p>If you want to run a command you ran earlier, press the up-arrow key several times. As you do this, the shell cycles through your last commands, displaying each one at the prompt. If you decide that you don’t want to use a command in the history list, just press the down-arrow key until you get back to an empty prompt, and then enter a new command.</p>\n\n\n\n<h2>Rewriting history</h2>\n\n\n\n<p>Using the command history, you can rerun previous commands, but you can also <em>modify</em> commands and run them with different arguments. One of the simplest ways to do this is to use the <strong><code>!!</code></strong> command to run the previous command, appending new information to it. Let’s say you want to list the contents of a directory, like this:</p>\n\n\n\n<p><strong><code>ls ~/Library/Preferences/ByHost</code></strong></p>\n\n\n\n<p>After reading the list, you decide you want to save this list to a file. You can run the following:</p>\n\n\n\n<p><strong><code>!! &gt; list.txt</code></strong></p>\n\n\n\n<p>Terminal replaces the <strong>!!</strong> shortcut with the last command you ran, so <strong><code>!! &gt; list.txt</code> </strong>is the same as typing this command:</p>\n\n\n\n<p><strong><code>ls ~/Library/Preferences/ByHost &gt; list.txt</code></strong></p>\n\n\n\n<h2>Edit the commands</h2>\n\n\n\n<p>In addition to moving up and down the command history by pressing the up- and down-arrow keys, displaying each command at the prompt in Terminal, you can also edit the commands that appear or add arguments to them. This saves time when you need to run a command that is very similar but not exactly the same.</p>\n\n\n\n<p>Say you want to copy a file; you type a command like this:</p>\n\n\n\n<p><strong><code>cp /Users/kirk/Pictures/P101068.jpg /Users/Shared</code></strong></p>\n\n\n\n<p>Terminal says the file doesn’t exist, but you’re sure it does. When you go to the directory and check, you see that there is indeed a file with a similar name, but you left out a zero. Using the command history, you can press the up arrow to display the command again. Use the left arrow to move the cursor to the location where you need to add the zero, type <strong><code>0</code></strong> and then press enter. (You don’t need to move the cursor back to the end of the line.)</p>\n\n\n\n<p>You can use command editing to change commands and run them on different files. For example, if you have several files in your Pictures directory, you can use the up arrow to redisplay the previous command, change the file name, and run the command again on a different file.</p>\n\n\n\n<h2>Change arguments and options</h2>\n\n\n\n<p>Use the same trick to change a command’s arguments or options. In the previous example, I copied pictures into my Users/Shared directory. I could easily press the up arrow to redisplay the command and then alter the command to copy one of the files to a different location. There’s no need to retype the entire line.</p>\n\n\n\n<p>By the same token, say you list the files in a directory and then decide you want to use the <strong><code>-l</code></strong> option to display a long list. Press the up arrow to redisplay the command, and then move the cursor to the left to add <strong><code>-l</code></strong>. For example,<code> <strong>ls -l /etc/periodic</strong></code>. </p>\n\n\n\n<h2>Oops, I forgot sudo</h2>\n\n\n\n<p>There are many commands and areas of your computer you can’t access without root user privileges. If you have administrator rights for your computer, you can use the <strong><code>sudo</code></strong> command to prompt you for a password. </p>\n\n\n\n<p>But it’s annoying to type a long command only to have Terminal dourly reply “Permission denied.” If you forget to prefix a command with <strong><code>sudo</code></strong>, just type <strong><code>sudo !!</code></strong>. This command tells the shell to execute the previous command again, this time prefaced by <strong><code>sudo</code></strong>. Enter your password at the prompt and then press enter, and the command will run. There’s no need to type it all over again.</p>\n\n\n\n<p><em>Editor’s note: This article is an excerpt adapted from</em> <a href=\"https://www.amazon.com/dp/B003VIWZDS?tag=macworld05-20&amp;asc_refurl=https://www.macworld.com/feed\">The Mac OS X Command Line: Unix Under the Hood</a><em>, by Kirk McElhearn (2004; reprinted by permission of Sybex).</em></p>\n</div>","author":"Kirk McElhearn","siteTitle":"Macworld","siteHash":"37e84dd5a21fa961d6d6630e269546024dbb7741b2e2fadbe74f47383c70dfbb","entryHash":"b5953edbd024d90751670a872be2e87db867062e6426440ad639166377cd91a1","category":"Apple"}