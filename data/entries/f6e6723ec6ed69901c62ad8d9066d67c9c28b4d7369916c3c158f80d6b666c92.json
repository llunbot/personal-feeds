{"title":"มาลองใช้งาน Docker Build Check","link":"https://www.somkiat.cc/use-docker-build-check/","date":1722351243000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/docker-build-check-01-150x150.jpg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/07/docker-build-check-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2024/07/docker-build-check-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/07/docker-build-check-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/07/docker-build-check-01.jpg\" width=\"649\" height=\"370\" /></a></figure>\n\n\n\n<p>ทาง docker ได้ปล่อย Docker Desktop 4.33 ออกมา<br />พร้อมกับ <strong><a href=\"https://docs.docker.com/build/checks/\" target=\"_blank\">Docker </a><a href=\"https://www.docker.com/blog/introducing-docker-build-checks/\" target=\"_blank\">build</a><a href=\"https://docs.docker.com/build/checks/\" target=\"_blank\"> check</a></strong> ที่มีมาตั้งแต่ buildx version 1.50<br />ซึ่งช่วยทำการตรวจสอบ Dockerfile ให้เองแบบอัตโนมัติ<br />ตาม <a href=\"https://docs.docker.com/build/building/best-practices/\" target=\"_blank\">best practice</a> ของการเขียนนั่นเอง<br />ที่สำคัญสามารถนำไปใส่ใน pipeline ของการ build หรือใน CI/CD ได้อีกด้วย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>โดย Docker build check นั้น จะเตรียม <a href=\"https://docs.docker.com/reference/build-checks/\" target=\"_blank\">rule</a> ต่าง ๆ มาให้ เช่น</strong></p>\n\n\n\n<ul>\n<li>JSONArgsRecommended</li>\n\n\n\n<li>MaintainerDeprecated</li>\n\n\n\n<li>StageNameCasing</li>\n</ul>\n\n\n\n<p><strong>เพื่อช่วยป้องกันปัญหาที่อาจจะเกิดขึ้นจาก Dockerfile ทั้ง</strong></p>\n\n\n\n<ul>\n<li>การ maintain </li>\n\n\n\n<li>การ scan bug หรือปัญหาต่าง ๆ</li>\n\n\n\n<li>การดูแลเรื่อง performance</li>\n</ul>\n\n\n\n<p>แถมช่วยลดเวลาของการหาปัญหา และ แก้ไขลงไปอีกด้วย<br />เพื่อความเข้าใจมาลองใช้งานกันดู</p>\n\n\n\n<p><strong>เริ่มจาก Dockerfile แบบปกติ</strong> ใช้งานได้เลย</p>\n\n\n\n[gist id=\"f2151aaa203c36c3e2e91168050766d2\" file=\"Dockerfile\"]\n\n\n\n<p>ลองทำการ build ปกติผ่าน command line <br />จะทำการ scan และบอกว่ามีปัญหาตรงไหนบ้าง</p>\n\n\n\n[gist id=\"f2151aaa203c36c3e2e91168050766d2\" file=\"1.txt\"]\n\n\n\n<p>ถ้าต้องการให้แสดงบรรทัดหรือจุดที่มีปัญหา</p>\n\n\n\n[gist id=\"f2151aaa203c36c3e2e91168050766d2\" file=\"2.txt\"]\n\n\n\n<p>ทั้งสองแบบนั้น จะ return แค่ warning ออกมาเท่านั้น<br />แต่เมื่อนำขั้นตอนนี้ไปใส่ใน CI/CD จะได้ signal success เสมอ<br />ดังนั้นเราต้องเปลี่ยนนิดหน่อย เพื่อให้แจ้งหรือส่ง signal กลับมาว่า error<br />ด้วยการแก้ไขไฟล์ Dockerfile ดังนี้</p>\n\n\n\n[gist id=\"f2151aaa203c36c3e2e91168050766d2\" file=\"Dockerfile_check\"]\n\n\n\n<p>จากนั้นก็ run ใหม่อีกรอบ ได้ผลดังนี้</p>\n\n\n\n[gist id=\"f2151aaa203c36c3e2e91168050766d2\" file=\"3.txt\"]\n\n\n\n<p>ใช้งานง่ายมาก ๆ </p>\n\n\n\n<p>ปล. ลืมไปว่า ก็ผลใน Docker Desktop เพิ่มได้ด้วย<br />สำหรับใครที่ชอบแบบ UI นั่นเอง</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"f6e6723ec6ed69901c62ad8d9066d67c9c28b4d7369916c3c158f80d6b666c92","category":"Thai"}