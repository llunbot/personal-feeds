{"title":"รูปแบบของการออกแบบ Service ที่แปลก ๆ","link":"https://www.somkiat.cc/antipattern-architecture/","date":1709361967000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/03/fake-microservices-150x150.jpg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/03/fake-microservices-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2024/03/fake-microservices-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/03/fake-microservices.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/03/fake-microservices.jpg\" width=\"654\" height=\"365\" /></a></figure>\n\n\n\n<p>จากการแบ่งปันเรื่องของ Microservices ซึ่งเป็นหนึ่งแนวทางในการแก้ไขปัญหา<br />แต่สิ่งที่มักจะพบเจอ คือ ทำไปแล้วมีปัญหาหนักกว่าเก่า<br />แสดงว่า อาจจะไม่ได้นำมาเพื่อแก้ไขปัญหาหรือเปล่านะ<br />เมื่อกลับมาดูที่โครงสร้างของระบบงาน<br />บ่อยครั้งจะพบปัญหามากมาย จึงทำการสรุปรูปแบบของปัญหาไว้นิดหน่อย<br />อาจจะไม่ใช่ปัญหาก็ได้นะ</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เรื่องแรกคือ Sharing หรือ Reuse มากเกินไป ทำให้เกิดมะเร็ง service</strong></p>\n\n\n\n<p>รูปแบบที่เจอเยอะมาก ๆ <br />เนื่องจากเริ่มแรกน่าจะดี เพราะว่า มีการ reuse หรือ sharing หรือ common service<br />แต่เมื่อเวลาผ่านไป พบว่า service เหล่านี้จะใหญ่ขึ้น<br />มีการนำ logic ของคนใช้งานจากระบบต่าง ๆ เข้ามาด้วย<br />ทำให้สูญเสียความเป็นตัวเองไป<br />แก้ไขให้บางระบบ แล้วกระทบหลายระบบ<br />จนสุดท้ายก็ให้เกิดผลกระทบเยอะมาก ๆ</p>\n\n\n\n<p>ปัญหาเกิดจากเรื่องขอบเขตของหน้าที่รับผิดชอบของ service ไม่ชัดเจน<br />อาจจะมาจากคำว่า ขอเพิ่มอีกนิดหน่อยได้ไหม !!<br />หรืออาจจะบอกว่า เรามีเวลาไม่มาก ต้องรีบแล้ว<br />เลยทำ ๆ ให้เสร็จไปก่อน แล้วค่อยมาแก้ไขทีหลัง (Develop + Test + Deploy)<br />จะพบว่า ไม่มีการกลับมาแก้ไขเลย (Later === Never)</p>\n\n\n\n<p><strong>เรื่องที่สอง แยก service เยอะมาก ๆ ทำให้เกิด overhead ของการติดต่อสื่อสารระหว่าง service </strong></p>\n\n\n\n<p>เป็นเรื่องที่เจอเยอะมาก ๆ คือ แบ่งมากจนเกินไป<br />อะไรที่ต้องทำงานด้วสยกันเสมอ ก็ดันไปแยก (Low cohesion)<br />หรือ แยกไว้เผื่ออนาคต แต่ว่าปัจจุบันยังไม่รอดเลย<br />ทำให้เกิดปัญหาตามมามากมาย<br />เช่น response time สูงขึ้นมา, network ใช้งานเยอะเกินไป เป็นต้น<br />หนักกว่านั้น เมื่อบาง service มีปัญหาแล้ว<br />ทำให้ระบบโดยรวมมีปัญหาไปด้วยหมดเลย !! (Cascade failure)<br />แถมไม่เคยวางแผนเรื่องของการจัดการเมื่อเกิดปัญหาไว้อีกด้วย (Plan for failure)</p>\n\n\n\n<p>สิ่งที่น่าสนใจคือ</p>\n\n\n\n<p><strong><em>Decomposition != Decoupling นะ</em></strong></p>\n\n\n\n<p>เกิด Distributed monolith ไหมนะ ?</p>\n\n\n\n<p><strong>เรื่องที่สามคือ ข้อมูลกระจายหลายที่ เรื่องความถูกต้องก็ขาดหายไป</strong></p>\n\n\n\n<p>ต้องมาแก้ไขปัญหาเฉพาะหน้าเสมอ<br />เช่น ต้องมาแก้ไขข้อมูลในระบบต่าง ๆ ให้เท่ากันตลอด !!<br />เบื่อไหมนะ<br />ทำไปทำมา รวมกัน data เหมือนเดิมดีกว่า<br />มันยังไงกัน</p>\n\n\n\n<p><strong>เรื่องที่สี่ คือ ระบบ monitoring หรือ observability ของ service ที่ไม่ดี หรือ เพียงพอ</strong></p>\n\n\n\n<p>เมื่อเกิดปัญหาขึ้นมา เรารู้ปัญหาได้รวดเร็วไหม<br />หรือรู้ว่า น่าจะเกิดปัญหาในอนาคตอันใกล้<br />เมื่อมีปัญหาขึ้นมา เราสามารถเข้าไปถึงจุดเกิดเหตุได้เร็วหรือไม่ ?<br />ยิ่งเข้าถึงได้รวดเร็ว น่าจะแก้ไขได้เร็วขึ้น<br />ดีกว่านั้น ถ้าระบบมีปัญหาสามารถ recover กลับมาได้ง่าย<br />หรือปิด feature เหล่านั้นไปเลยจะดีกว่า ทำให้ปัญหาขยายวงกว้าง ?</p>\n\n\n\n<p>ดังนั้นเรื่อง observability สำคัญมาก ๆ</p>\n\n\n\n<ul>\n<li>Alert system</li>\n\n\n\n<li>Application metric</li>\n\n\n\n<li>Distributed tracing</li>\n\n\n\n<li>Centralized logging</li>\n\n\n\n<li>Exception tracking</li>\n</ul>\n\n\n\n<p>น่าสนใจว่า เราแก้ไขปัญหา หรือ สร้างปัญหาขึ้นมา<br />เรื่องนี้สำคัญมาก ๆ</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"d13903b8d76dd7be7948e6e91437af3e2145c21595f885428759b27a52c09fd3","category":"Thai"}