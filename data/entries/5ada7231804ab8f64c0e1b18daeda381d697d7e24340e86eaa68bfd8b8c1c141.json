{"title":"บันทึกการแบ่งปันเรื่อง การเขียน test","link":"https://www.somkiat.cc/developer-must-write-test/","date":1740992755000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2025/03/unit-test-01-150x150.jpg\" alt=\"\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2025/03/unit-test-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2025/03/unit-test-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/03/unit-test-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/03/unit-test-01.jpg\" alt=\"\" width=\"560\" height=\"305\" /></a></figure>\n\n\n\n<p>จากที่ได้แบ่งปันเรื่องการเขียน test เพื่อให้ได้ผลที่ดี<br />ว่าต้องทำอย่างไรบ้าง จึงทำการสรุปำว้นิดหน่อย<br />สิ่งหนึ่งที่เน้นย้ำคือ เราทดสอบเพื่อสร้างความมั่นใจของเราที่มีต่อระบบ<br />ไม่ได้ทำเพื่อใคร แต่เพื่อตัวเราเอง<br />เดินไปข้างหน้า โดยไม่ห่วงข้างหลัง<br />แล้วผลอื่น ๆ ที่ตามมา มันเป็นเพียงผลพลอยได้<br />ดังนั้น สำหรับใครก็ตามที่เขียน code ขึ้นมาได้<br />ก็น่าจะต้องสร้างความมั่นใจให้กับตัวเองด้วย<br />หนึ่งในวิธีการคือ การเขียน test นั่นเอง</p>\n\n\n\n<span></span>\n\n\n\n<p><em>อีกหนึ่งคำถามที่ต้องตอบให้ได้คือ<br />ถ้าตอนนี้เรากำลังเพิ่ม feature ใหม่เข้าไป<br />เรามั่นใจไหมว่า feature ก่อนหน้านี้ยังทำงานได้เช่นเดิม</em></p>\n\n\n\n<p></p>\n\n\n\n<p><strong>แนวทางที่ได้แบ่งปันไว้มีดังนี้</strong></p>\n\n\n\n<ul>\n<li>เริ่มจาก code ที่ testable หรือ สามารถทดสอบได้ง่าย นั่นคือ คิดก่อนว่าจะทดสอบอย่างไร ก่อนจะทดสอบหรือสร้าง</li>\n\n\n\n<li>เรื่องของ test strategy สำคัญมาก ๆ ต้องตอบให้ได้ หรือ ตกลงกันก่อน ว่าจะทดสอบแบบไหน อย่างไร มีขอบเขตอย่างไร ก็ลงมือ เช่น unit test, integration test, component test, contract test และ end-to-end test เป็นต้น</li>\n\n\n\n<li>ใน test case จะมีโครงสร้างมาตรฐาน โดยมักจะแนะนำ AAA (Arrange-Act-Assert)</li>\n\n\n\n<li>แต่ละ test case ควรที่จะเป็นอิสระแก่กัน ไม่ใช่ต้อง test แบบเรียงลำดับ เพื่อลดปัญหาของการทดสอบ ทั้ง flaky test, ไม่สามารถทำ parallel testing ได้ รวมทั้งเรื่องเวลาในการทดสอบที่อาจจะนานจนเกินไป ต้องตกลงกันให้ชัดเจน ว่าแนวทางไหนที่ส่งผลดีต่อการพัฒนาและส่งมอบระบบ</li>\n\n\n\n<li>แต่ละ test case ควรจัดการ external dependency  ให้ดี ๆ ทั้ง datetime, random value, database และ external system เป็นต้น เพราะว่า ถ้าจัดการไม่ดี การทดสอบซ้ำเป็นไปได้ยากมาก ๆ ไม่ใช่อะไรก็จะ mock กันอย่างเดียว !!</li>\n\n\n\n<li>ในการทดสอบควรต้องเข้าใจเรื่องของ data test ด้วย ควรให้ครบและครอบคลุม ทั้ง normal case, edge case และ invalid case อาจจะรวมไปถึง non-functional case ด้วย</li>\n\n\n\n<li>ชื่อของ test case ควรอ่านเข้าใจได้ง่าย มีความหมายชัดเจน ว่ากำหนดทดสอบเรื่องอะไร ด้วยเงื่อนไขอะไร ผลที่คาดหวังคืออะไร เพื่อให้ง่ายต่อการดูแลรักษาต่อไป ไม่ใช่ทำแล้วทิ้งนะ</li>\n\n\n\n<li>เมื่อเจอ bug ต่าง ๆ ทั้งจากการพัฒนา ทดสอบ หรือ บน production ก็ตาม ควรเขียน test case เพื่อ reproduce bug เหล่านั้น ก่อนทำการแก้ไข code ต่อไป มันคือ การเรียนรู็จากความผิดพลาด ไม่ใช่ผิดพลาดเรื่องเดิม ๆ ซ้ำ ๆ แต่เปลี่ยนแค่ data นะ !!</li>\n\n\n\n<li>ทุกครั้งที่ทำการ commit code ให้ลองทำการ run test ดูก่อนแบบอัตโนมัติดู เช่น run unit test เป็นต้น ถ้าไม่ผ่าน ก็ไม่ให้ทำการ commit เป็นต้น รวมทั้งยังเอา test ต่าง ๆ ไป run ใน pipline ของ CI/CD ด้วย</li>\n\n\n\n<li>Code/test coverage ไม่ได้บอกอะไรเลย เป็นเพียงผลพลอยได้จากการเขียน test เท่านั้น</li>\n</ul>\n\n\n\n<p>สุดท้ายเดี๋ยวนี้ เราให้ Generative AI เข้ามาช่วยเขียน test case ให้ได้อีกด้วย<br />ก็ช่วยเพิ่มทางเลือกในการเขียน test ให้สะดวกขึ้น<br />แต่ก็ยังจำเป็นที่ต้องตรวจสอบด้วยคนด้วยเสมอ (Trust but Verify)</p>\n\n\n\n<p></p>\n\n\n\n<p>ดังนั้น test case ต่าง ๆ ควรมีความน่าเชื่อถือ <br />ทำงานได้อย่างรวดเร็วตามที่หวัง หรือ เหมาะสมกับระบบนั้น ๆ<br />ครอบคุลมใน business logic/use case ต่าง ๆ ที่จำเป็น</p>\n\n\n\n<p><strong><em>คำถามสุดท้ายคือ <br />การทดสอบที่คุณสร้างขึ้นมานั้น ได้เพิ่มความเชื่อมั่นหรือไม่ ?<br />ผลการทำงานของระบบงาน มีปัญหาน้อยลงไหม ?</em></strong><br /></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"5ada7231804ab8f64c0e1b18daeda381d697d7e24340e86eaa68bfd8b8c1c141","category":"Thai"}