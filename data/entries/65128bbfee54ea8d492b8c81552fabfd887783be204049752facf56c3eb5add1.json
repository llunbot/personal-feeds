{"title":"How to use the Backstage HCP Consul plugin","link":"https://www.hashicorp.com/blog/how-to-use-the-backstage-hcp-consul-plugin","date":1704830400000,"content":"<p>To use <a href=\"https://backstage.io/\">Backstage</a>, the popular open platform for building developer portals, with <a href=\"https://developer.hashicorp.com/hcp/docs/consul/concepts/consul-central\">HashiCorp Cloud Platform (HCP) Consul Central</a> requires users to be aware of HCP and related components. This blog post guides you through the steps to install the HCP Consul frontend and backend plugin for Backstage: <code>plugin-hcp-consul</code> and <code>plugin-hcp-consul-backend</code>. </p>\n\n<h2>Background</h2>\n\n<p>HashiCorp Consul is an identity-based service networking solution offering service discovery, secure communication, and network automation across multiple cloud and runtime environments. <a href=\"https://developer.hashicorp.com/hcp/docs/consul/concepts/consul-central\">HashiCorp Cloud Platform (HCP) Consul Central</a> is a global management platform providing visibility of services and connectivity across datacenters enabling troubleshooting and configuration workflows. </p>\n\n<h2>Prerequisites</h2>\n\n<p>Before you begin, you will need:</p>\n\n<ul>\n<li><a href=\"https://github.com/backstage/backstage\">Backstage</a> <a href=\"https://backstage.io/blog/2020/04/30/how-to-quickly-set-up-backstage/\">set up</a> and running (version 1.18 or later)</li>\n<li><a href=\"https://nodejs.org/\">Node.js</a> (version 14 or later)</li>\n<li><a href=\"https://yarnpkg.com/\">Yarn</a></li>\n<li>A Dev Tier account on HCP. The plugin works only for the Consul clusters connected to HCP Consul. </li>\n<li>An HCP service principal key. Follow <a href=\"https://developer.hashicorp.com/hcp/docs/hcp/admin/iam/service-principals#generate-a-service-principal-key\">this tutorial</a> to generate the client ID and client secret. </li>\n</ul>\n<img src=\"https://www.datocms-assets.com/2885/1704831054-backstage-consul-edited.png\" alt=\"Workflow\" /><h2>Install the backend plugin</h2>\n\n<p>The backend plugin, <code>plugin-hcp-consul-backend</code>, facilitates communication between Backstage and HCP Consul. </p>\n\n<p>From your Backstage root directory, add the backend plugin Yarn package: </p>\n<pre><code>yarn add --cwd packages/backend @hashicorp/plugin-hcp-consul-backend</code></pre><p>Then, create an <code>hcp-consul-backend.ts</code> file inside <code>packages/backend/src/plugins/</code>:</p>\n<pre><code>import { createRouter } from '@hashicorp/plugin-hcp-consul-backend';\nimport { Router } from 'express';\nimport { PluginEnvironment } from '../types';\n \nexport default async function createPlugin(\n  env: PluginEnvironment,\n): Promise {\n  return await createRouter(env);\n}</code></pre><p>Next, modify your <code>packages/backend/src/index.ts</code> to import and configure the HCP Consul backend plugin:</p>\n<pre><code>...\n \n import { Config } from '@backstage/config';\n import app from './plugins/app';\n+ import consul from './plugins/hcp-consul-backend';\n ...\n \n async function main() {\n   ...\n \n   const authEnv = useHotMemoize(module, () =&gt; createEnv('auth'));\n+  const consulBackendEnv = useHotMemoize(module, () =&gt; createEnv('consul'));\n   ...\n \n   const apiRouter = Router();\n   apiRouter.use('/catalog', await catalog(catalogEnv));\n+  apiRouter.use('/hcp-consul-backend', await consul(consulBackendEnv));</code></pre><p>For this backend plugin to work, you must configure Consul in your <code>app-config.yaml</code> file. Here is an example Consul configuration:</p>\n<pre><code>consul:\n  clientID: abcdefabcdefabcdefabcdefabcdef\n  clientSecret: xyxy111xyxy111xyxy111xyxy111xyxy111xyxy111xyxy111\n  organizationID: ff14c2a2-a937-4240-bf11-9d23ca01761d\n projectID: f3945084-71ac-495c-84b3-371100d27279</code></pre><p>Finally, link the plugin to Backstage to start the HCP Consul backend plugin:</p>\n<pre><code>yarn backstage-cli --no-yarn --cwd ./plugins/hcp-consul-backend start</code></pre><p>You also need to verify backend connectivity. Ensure that the backend is successfully running and accessible by hitting an internal endpoint using <code>curl</code>, as shown here. Check <a href=\"https://developer.hashicorp.com/hcp/docs/consul/api#authenticate-to-hcp\">Authenticate to HCP</a> for getting the token:</p>\n<pre><code>curl -H \"Authorization: Bearer \" localhost:7007/api/hcp-consul-backend/2023-10-10/consul/project//clusters</code></pre><h2>Install the frontend plugin</h2>\n\n<p>The frontend plugin, <code>plugin-hcp-consul</code>, provides a user interface within Backstage for managing Consul configurations. </p>\n\n<p>From your Backstage root directory, add the frontend plugin Yarn package:</p>\n<pre><code>yarn add --cwd packages/app @hashicorp/plugin-hcp-consul</code></pre><p>Next, modify your <code>packages/app/src/App.tsx</code> to import and configure the HCP Consul frontend plugin. This example adds a cluster overview page to the <code>/hcp-consul</code> path:</p>\n<pre><code>import { HcpConsulPluginPage } from '@hashicorp/plugin-hcp-consul';\n\nconst routes = (\n  \n    ...\n    } /&gt;\n);</code></pre><p>By default, the frontend plugin uses the Consul configuration you defined in <code>app-config.yaml</code>. This includes the clientID, clientSecret, organizationID, and projectID. You can override the projectID on a component level using this snippet:</p>\n<pre><code></code></pre><p><strong>Optional:</strong> Add <code>EntityServiceInstancesTable</code> to display the HCP Consul service instances in the Backstage component. The following example code adds a <code>/hcp-consul-instances</code> tab to the EntityPage that displays all service instances of the service:</p>\n<pre><code>// In packages/app/src/components/catalog/EntityPage.tsx\n\nimport { EntityServiceInstancesTable, isHcpConsulServiceAvailable } from '@hashicorp/plugin-hcp-consul';\n\nconst serviceEntityPage = (\n    ...\n    \n      \n    \n)</code></pre><p>You need to provide annotations to the component:</p>\n\n<ol>\n<li> <code>consul.io/cluster_resource_name</code> annotation's value is the cluster resource name in HCP. It is required.</li>\n<li> <code>consul.io/name</code> annotation's value is the service name. It is required.</li>\n<li> <code>consul.io/namespace</code> is the namespace of the service. If omitted, it defaults to <code>default.</code></li>\n<li> <code>consul.io/partition</code> is the partition of the service. If omitted, it defaults to <code>default.</code></li>\n</ol>\n\n<p>Here is an example configuration (refer <a href=\"https://backstage.io/docs/features/software-catalog/descriptor-format/#overall-shape-of-an-entity\">to the Backstage documentation</a> for more details):</p>\n<pre><code>apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  annotations:\n    consul.io/cluster_resource_name: consul/project/f3945084-71ac-495c-84b3-371100d27279/cluster/consul-cluster\n    consul.io/name: frontend\n    consul.io/namespace: default\n    consul.io/partition: default</code></pre><img src=\"https://www.datocms-assets.com/2885/1704830047-frontend-service-backstage-consul.png\" alt=\"Service\" /><p>Finally, link the plugin to Backstage to start the HCP Consul frontend plugin:</p>\n<pre><code>yarn backstage-cli --no-yarn --cwd ./plugins/hcp-consul start</code></pre><p>You have successfully installed both the frontend and backend plugins for HCP Consul integration with Backstage.</p>\n\n<h2>Verify HCP Consul plugin for Backstage</h2>\n\n<p>Go to your HCP Consul plugin Backstage page. The URL path is <code>&lt;backstage-instance&gt;/hcp-consul</code>.</p>\n\n<p>Navigate to the following sections in the Backstage UI to explore the new Consul integration features:\nThe <strong>Overview</strong> page provides a high-level overview of the clusters and services, including the instances for your linked clusters. It also shows unhealthy services across the clusters. </p>\n<img src=\"https://www.datocms-assets.com/2885/1704830189-hcp-consul-overview.png\" alt=\"Overview\" /><p>The <strong>Clusters</strong> page lists the clusters. You can expand the individual clusters to check more details.</p>\n<img src=\"https://www.datocms-assets.com/2885/1704830160-hcp-consul-clusters.png\" alt=\"Clusters\" /><p>The <strong>Services</strong> page lists all services across clusters. You can expand a service to see the instance details:</p>\n<img src=\"https://www.datocms-assets.com/2885/1704830399-services-list.png\" alt=\"Services\" /><h2>Next steps</h2>\n\n<p>With the <code>plugin-hcp-consul</code> and <code>plugin-hcp-consul-backend</code> installed, you can start leveraging the benefits of HCP Consul within your Backstage environment. Explore the new features, manage configurations, and enhance your infrastructure orchestration capabilities. You are also welcome to contribute to the plugin — visit the <a href=\"https://github.com/hashicorp-forge/backstage-plugin-hcp-consul/blob/main/README.md#contributing\">plugin repo</a> for more details. </p>\n\n<p>For more detailed information, refer to the official READMEs:<a href=\"https://github.com/hashicorp-forge/backstage-plugin-hcp-consul/blob/main/README.md\"> plugin-hcp-consul README</a> and<a href=\"https://github.com/hashicorp-forge/backstage-plugin-hcp-consul/blob/main/plugins/hcp-consul-backend/README.md\"> plugin-hcp-consul-backend README</a>.</p>\n","author":"Tauhid Anjum","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"65128bbfee54ea8d492b8c81552fabfd887783be204049752facf56c3eb5add1","category":"Tech"}