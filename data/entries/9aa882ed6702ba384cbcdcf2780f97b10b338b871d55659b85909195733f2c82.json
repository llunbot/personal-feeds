{"title":"Now — AWS Step Functions Supports 200 AWS Services To Enable Easier Workflow Automation","link":"https://aws.amazon.com/blogs/aws/now-aws-step-functions-supports-200-aws-services-to-enable-easier-workflow-automation/","date":1633021547000,"content":"<p>Today <a href=\"https://aws.amazon.com/step-functions\">AWS Step Functions</a> expands the number of supported AWS services from 17 to over 200 and AWS API Actions from 46 to over 9,000 with its new capability AWS SDK Service Integrations.</p> \n<p>When developers build distributed architectures, one of the patterns they use is the workflow-based orchestration pattern. This pattern is helpful for workflow automation inside a service to perform distributed transactions. An example of a distributed transaction is all the tasks required to handle an order and keep track of the transaction status at all times.</p> \n<p><span>Step Functions</span> is a low-code visual workflow service used for workflow automation, to orchestrate services, and help you to apply this pattern. Developers use <span>Step Functions</span> with managed services such as <a href=\"https://aws.amazon.com/machine-learning/ai-services/\">Artificial Intelligence services</a>, <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>, and <a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a>.</p> \n<p><span><strong>Introducing <span>Step Functions</span> AWS SDK Service Integrations<br /> </strong></span>Until today, when developers were building workflows that integrate with AWS services, they had to choose from the <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/connect-supported-services.html\">46 supported services integrations</a> that <span>Step Functions</span> provided. If the service integration was not available, they had to code the integration in an <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> function. This is not ideal as it added more complexity and costs to the application.</p> \n<p>Now with <span>Step Functions</span> AWS SDK Service Integrations, developers can integrate their state machines directly to AWS service that has <a href=\"https://aws.amazon.com/tools/\">AWS SDK</a> support.</p> \n<p>You can create state machines that use AWS SDK Service Integrations with <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html\">Amazon States Language (ASL)</a>, <a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit (AWS CDK)</a>, or visually using <a href=\"https://aws.amazon.com/blogs/aws/new-aws-step-functions-workflow-studio-a-low-code-visual-tool-for-building-state-machines/\">AWS Step Function Workflow Studio</a>. To get started, create a new Task state. Then call AWS SDK services directly from the ASL in the resource field of a task state. To do this, use the following syntax.</p> \n<p><code>arn:aws:states:::aws-sdk:serviceName:apiAction.[serviceIntegrationPattern]</code></p> \n<p>Let me show you how to get started with a demo.</p> \n<p><span><strong>Demo<br /> </strong></span>In this demo, you are building an application that, when given a video file stored in S3, transcribes it and translates from English to Spanish.</p> \n<p>Let’s build this demo with <span>Step Functions</span>. The state machine, with the service integrations, integrates directly to <span>S3</span>, <a href=\"https://aws.amazon.com/transcribe/\">Amazon Transcribe</a>, and <a href=\"https://aws.amazon.com/translate/\">Amazon Translate</a>. The API for transcribing is asynchronous. To verify that the transcribing job is completed, you need a polling loop, which waits for it to be ready.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/08/07-statemachine.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/08/07-statemachine-750x1024.png\" /></a></p> \n<p><span><strong>Create the state machine<br /> </strong></span>To follow this demo along, you need to complete these prerequisites:</p> \n<ul> \n <li>An S3 bucket where you will put the original file that you want to process</li> \n <li>A video or audio file in English stored in that bucket</li> \n <li>An S3 bucket where you want the processing to happen</li> \n</ul> \n<p>I will show you how to do this demo using the <a href=\"https://console.aws.amazon.com\">AWS Management Console</a>. If you want to deploy this demo as infrastructure as code, deploy the <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> <a href=\"https://github.com/aws-samples/aws-stepfunctions-examples/blob/main/sam/demo-video-transcription\">template for this project.</a></p> \n<p>To get started with this demo, create a new standard state machine. Choose the option <strong>Write your workflow in code</strong> to build the state machine using ASL. Create a name for the state machine and create a new role.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/02/04-create-state-machine.gif\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/02/04-create-state-machine.gif\" /></a></p> \n<p><span><strong>Start a transcription job<br /> </strong></span>To get started working on the state machine definition, you can <strong>Edit</strong> the state machine.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/02/05-edit.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/02/05-edit-1024x463.png\" /></a></p> \n<p>The following piece of ASL code is a state machine with two tasks that are using the new AWS SDK Service Integrations capability. The first task is <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html\">copying the file</a> from one <span>S3</span> bucket to another, and the second task is <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/API_StartTranscriptionJob.html\">starting the transcription job</a> by directly calling <span>Amazon Transcribe</span>.</p> \n<p>For using this new capability from <span>Step Functions</span>, the state type needs to be a Task. You need to specify the service name and API action using this syntax: “arn:aws:states:::aws-sdk:serviceName:apiAction.&lt;serviceIntegrationPattern&gt;”. Use camelCase for apiAction names in the Resource field, such as “copyObject”, and use PascalCase for parameter names in the Parameters field, such as “CopySource”.</p> \n<p>For the parameters, find the name and required parameters in the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html\">AWS API documentation for this service</a> and API action.</p> \n<pre><code>{\n  \"Comment\": \"A State Machine that process a video file\",\n  \"StartAt\": \"GetSampleVideo\",\n  \"States\": {\n    \"GetSampleVideo\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::aws-sdk:s3:copyObject\",\n      \"Parameters\": {\n        \"Bucket.$\": \"$.S3BucketName\",\n        \"Key.$\": \"$.SampleDataInputKey\",\n        \"CopySource.$\": \"States.Format('{}/{}',$.SampleDataBucketName,$.SampleDataInputKey)\"\n      },\n      \"ResultPath\": null,\n      \"Next\": \"StartTranscriptionJob\"\n    },\n    \"StartTranscriptionJob\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::aws-sdk:transcribe:startTranscriptionJob\",\n      \"Parameters\": {\n        \"Media\": {\n          \"MediaFileUri.$\": \"States.Format('s3://{}/{}',$.S3BucketName,$.SampleDataInputKey)\"\n        },\n        \"TranscriptionJobName.$\": \"$$.Execution.Name\",\n        \"LanguageCode\": \"en-US\",\n        \"OutputBucketName.$\": \"$.S3BucketName\",\n        \"OutputKey\": \"transcribe.json\"\n      },\n      \"ResultPath\": \"$.transcription\",\n      \"End\": true\n    }\n  }\n}</code></pre> \n<p>In the previous piece of code, you can see an interesting use case of the <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html\">intrinsic functions</a> that ASL provides. You can construct a string using different parameters. Using intrinsic functions in combination with AWS SDK Service Integrations allows you to manipulate data without the needing a <span>Lambda</span> function. For example, this line:</p> \n<pre><code>\"MediaFileUri.$\": \"States.Format('s3://{}/{}',$.S3BucketName,$.SampleDataInputKey)\"</code></pre> \n<p><span><strong>Give permissions to the state machine<br /> </strong></span>If you start the execution of the state machine now, it will fail. This state machine doesn’t have permissions to access the S3 buckets or use <span>Amazon Transcribe</span>. <span>Step Functions</span> can’t autogenerate IAM policies for most AWS SDK Service Integrations, so you need to add those to the role manually.</p> \n<p>Add those permissions to the IAM role that was created for this state machine. You can find a quick link to the role in the state machine details. Attach the “AmazonTranscribeFullAccess” and the “AmazonS3FullAccess” policies to the role.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/02/02-role.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/02/02-role-1024x303.png\" /></a></p> \n<p><span><strong>Running the state machine for the first time<br /> </strong></span>Now that the permissions are in place, you can run this state machine. This state machine takes as an input the <span>S3</span> bucket name where the original video is uploaded, the name for the file and the name of the <span>S3</span> bucket where you want to store this file and do all the processing.</p> \n<p>For this to work, this file needs to be a video or audio file and it needs to be in English. When the transcription job is done, it saves the result in the bucket you specify in the input with the name transcribe.json.</p> \n<pre><code> {\n  \"SampleDataBucketName\": \"&lt;name of the bucket where the original file is&gt;\",\n  \"SampleDataInputKey\": \"&lt;name of the original file&gt;\",\n  \"S3BucketName\": \"&lt;name of the bucket where the processing will happen&gt;\"\n}</code></pre> \n<p>As StartTranscriptionJob is an asynchronous call, you won’t see the results right away. The state machine is only calling the API, and then it completes. You need to wait until the transcription job is ready and then see the results in the output bucket in the file transcribe.json.</p> \n<p><span><strong>Adding a polling loop<br /> </strong></span>Because you want to translate the text using your transcriptions results, your state machine needs to wait for the transcription job to complete. For building an API poller in a state machine, you can use a Task, Wait, and Choice state.</p> \n<ul> \n <li>Task state gets the job status. In your case, it is calling the service <span>Amazon Transcribe</span> and the API <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/API_GetTranscriptionJob.html\">getTranscriptionJob</a>.</li> \n <li>Wait state waits for 20 seconds, as the transcription job’s length depends on the size of the input file.</li> \n <li>Choice state moves to the right step based on the result of the job status. If the job is completed, it moves to the next step in the machine, and if not, it keeps on waiting.</li> \n</ul> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/08/08-polling0.jpg\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/08/08-polling0.jpg\" /></a></p> \n<p><strong>Wait state<br /> </strong>The first of the states you are going to add is the Wait state. This is a simple state that waits for 20 seconds.</p> \n<pre><code>\"Wait20Seconds\": {\n        \"Type\": \"Wait\",\n        \"Seconds\": 20,\n        \"Next\": \"CheckIfTranscriptionDone\"\n      },</code></pre> \n<p><strong>Task state<br /> </strong>The next state to add is the Task state, which calls the API getTranscriptionJob. For calling this API, you need to pass the transcription job name. This state returns the job status that is the input of the Choice state.</p> \n<pre><code>\"CheckIfTranscriptionDone\": {\n        \"Type\": \"Task\",\n        \"Resource\": \"arn:aws:states:::aws-sdk:transcribe:getTranscriptionJob\",\n        \"Parameters\": {\n          \"TranscriptionJobName.$\": \"$.transcription.TranscriptionJob.TranscriptionJobName\"\n        },\n        \"ResultPath\": \"$.transcription\",\n        \"Next\": \"IsTranscriptionDone?\"\n      },</code></pre> \n<p><strong>Choice state<br /> </strong>The Choice state has one rule that checks if the transcription job status is completed. If that rule is true, then it goes to the next state. If not, it goes to the Wait state.</p> \n<pre><code> \"IsTranscriptionDone?\": {\n        \"Type\": \"Choice\",\n        \"Choices\": [\n          {\n            \"Variable\": \"$.transcription.TranscriptionJob.TranscriptionJobStatus\",\n            \"StringEquals\": \"COMPLETED\",\n            \"Next\": \"GetTranscriptionText\"\n          }\n        ],\n        \"Default\": \"Wait20Seconds\"\n      },</code></pre> \n<p><span><strong>Getting the transcription text<br /> </strong></span>In this step you are extracting only the transcription text from the output file returned by the transcription job. You need only the transcribed text, as the result file has a lot of metadata that makes the file too long and confusing to translate.</p> \n<p>This is a step that you would generally do with a <span>Lambda</span> function. But you can do it directly from the state machine using ASL.</p> \n<p>First you need to create a state using AWS SDK Service Integration that <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html\">gets the result file from <span>S3</span></a>. Then use another ASL intrinsic function to convert the file text from a String to JSON.</p> \n<p>In the next state you can process the file as a JSON object. This state is a Pass state, which cleans the output from the previous state to get only the transcribed text.</p> \n<pre><code> \"GetTranscriptionText\": {\n        \"Type\": \"Task\",\n        \"Resource\": \"arn:aws:states:::aws-sdk:s3:getObject\",\n        \"Parameters\": {\n          \"Bucket.$\": \"$.S3BucketName\",\n          \"Key\": \"transcribe.json\"\n        },\n        \"ResultSelector\": {\n          \"filecontent.$\": \"States.StringToJson($.Body)\"\n        },\n        \"ResultPath\": \"$.transcription\",\n        \"Next\": \"PrepareTranscriptTest\"\n      },\n  \n      \"PrepareTranscriptTest\" : {\n        \"Type\": \"Pass\",\n        \"Parameters\": {\n          \"transcript.$\": \"$.transcription.filecontent.results.transcripts[0].transcript\"\n        },\n        \"Next\": \"TranslateText\"\n      },</code></pre> \n<p><span><strong>Translating the text<br /> </strong></span>After preparing the transcribed text, you can translate it. For that you will use <span>Amazon Translate</span> API <a href=\"https://docs.aws.amazon.com/translate/latest/dg/A.html#Translate-TranslateText-request-TerminologyNames\">translateText</a> directly from the state machine. This will be the last state for the state machine and it will return the translated text in the output of this state.</p> \n<pre><code>\"TranslateText\": {\n        \"Type\": \"Task\",\n        \"Resource\": \"arn:aws:states:::aws-sdk:translate:translateText\",\n        \"Parameters\": {\n          \"SourceLanguageCode\": \"en\",\n          \"TargetLanguageCode\": \"es\",\n          \"Text.$\": \"$.transcript\"\n         },\n         \"ResultPath\": \"$.translate\",\n        \"End\": true\n      }</code></pre> \n<p>Add the permissions to the state machine to call the Translate API, by attaching the managed policy “TranslateReadOnly”.</p> \n<p>Now with all these in place, you can run your state machine. When the state machine finishes running, you will see the translated text in the output of the last state.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/08/10-result.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/08/10-result-1024x390.png\" /></a></p> \n<p><span><strong>Important things to know<br /> </strong></span>Here are some things that will help you to use AWS SDK Service Integration:</p> \n<ul> \n <li>Call AWS SDK services directly from the ASL in the resource field of a task state. To do this, use the following syntax: arn:aws:states:::aws-sdk:serviceName:apiAction.[serviceIntegrationPattern]</li> \n <li>Use camelCase for apiAction names in the Resource field, such as “copyObject”, and use PascalCase for parameter names in the Parameters field, such as “CopySource”.</li> \n <li>Step Functions can’t autogenerate IAM policies for most AWS SDK Service Integrations, so you need to add those to the IAM role of the state machine manually.</li> \n <li>Take advantage of <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html\">ASL intrinsic functions</a>, as those allow you to manipulate the data and avoid using <span>Lambda</span> functions for simple transformations.</li> \n</ul> \n<p><span><strong>Get started today!</strong></span><br /> AWS SDK Service Integration is generally available in the following regions: <span>US East (N. Virginia)</span>, <span>US East (Ohio)</span>, <span>US West (Oregon)</span>, <span>Canada (Central)</span>, <span>Europe (Ireland)</span>, <span>Europe (Milan)</span>, <span>Africa (Cape Town)</span> and <span>Asia Pacific (Tokyo)</span>. It will be generally available in all other commercial regions where <span>Step Functions</span> is available in the coming days.</p> \n<p>Learn more about this new capability by <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/supported-services-awssdk.html\">reading its documentation</a>.</p> \n<p>— <a href=\"https://twitter.com/mavi888uy\">Marcia</a></p>","author":"Marcia Villalba","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"9aa882ed6702ba384cbcdcf2780f97b10b338b871d55659b85909195733f2c82","category":"Tech"}