{"title":"Go Big or Go Small? Building in Azure CAF with Terraform Cloud","link":"https://www.hashicorp.com/blog/go-big-or-go-small-building-in-azure-caf-with-terraform-cloud","date":1631214000000,"content":"<p>The Microsoft <a href=\"https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/landing-zone/terraform-landing-zone\">Cloud Adoption Framework (CAF) for Azure</a> provides guidance and best practices to adopt Microsoft Azure, and it gives users two paths to adopt by using either <em>enterprise scale</em> or <em>CAF</em> Terraform modules. Both approaches use an opinionated set of code to deliver their defined outcome for example setting up user accounts.</p>\n<p>In this article, we explore the two approaches and give some guidance on choosing the best approach for you to take, whether that is going big and building all the necessary components within one pattern or taking a smaller approach and establishing smaller pre-defined outcomes to build from. Then we’ll demo the “going small” approach using the CAF modules from the Terraform registry along with the CAF pattern to set up the elements for a networking foundation.</p>\n<h2><a href=\"#enterprise-scale-and-caf\">»</a><a></a>Enterprise Scale and CAF</h2>\n<p><em>View the <a href=\"https://www.datocms-assets.com/2885/1631049123-enterprise-scale-architecture.pdf\">full-size diagram here</a>.</em></p><img src=\"https://www.datocms-assets.com/2885/1631132310-caf-enterprise-scale-architecture.png\" /><p><em>Figure 1: Microsoft's Cloud Adoption Framework enterprise-scale landing zone architecture based on an Azure Virtual WAN network topology. The connectivity subscription uses a Virtual WAN hub.</em></p>\n<p>Enterprise scale tackles the big picture, whereas CAF modules take a smaller approach to build out the elements that you want to start with — both are valid approaches and both are customizable, enabling you to deliver your outcome while approaching the problem from different paths.</p><img src=\"https://www.datocms-assets.com/2885/1631138141-foundations-terraform-landing-zone.png\" /><p><em>Figure 2: Foundation landing zone using Terraform</em></p>\n<h3><a href=\"#go-big\">»</a><a></a>Go Big</h3>\n<p>The enterprise-scale architecture approach represents the strategic design path and target technical state for your Azure environment. The technical considerations and design recommendations of the enterprise-scale architecture might lead to different trade-offs based on your organization's scenario. Some variation is expected, but if you follow the core recommendations, the resulting target architecture will set your organization on a path to sustainable scale.</p>\n<h3><a href=\"#go-small\">»</a><a></a>Go Small</h3>\n<p>The CAF module allows you to create resources on Azure and is used to provision defined resources in an Azure subscription. It can deploy resources being directly invoked from the Terraform registry.</p>\n<p>The module was created so that users can leverage reusable code to pre-provision workloads through code, and the module is dedicated to the support of one or more workloads integrating components together, which is often an arduous task when done from scratch. Using the CAF module users can create their own configuration files to build complex workloads in the cloud, or migrate to Azure’s existing ones.</p>\n<h3><a href=\"#or-don-t-choose\">»</a><a></a>Or Don't Choose</h3>\n<p>The good news is that you don't have to choose between the two because you can use enterprise-scale to deploy your controls, guardrails (via Azure policies), and management groups and use the CAF module to deploy the workloads at high speed.</p>\n<h2><a href=\"#deploying-your-first-caf-module\">»</a><a></a>Deploying Your First CAF Module</h2>\n<p>As mentioned in the introduction, we’ll be going small and using the CAF modules. We will walk through setting up and using the CAF modules from the Terraform <a href=\"https://registry.terraform.io/modules/aztfmod/caf/azurerm/latest\">registry</a> and, as an example, use the CAF pattern that allows you to set up the necessary elements for a networking foundation. The environment has both public and private subnets where you can launch services and other resources based on this <a href=\"https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/considerations/networking-options\">guide</a>.</p>\n<h3><a href=\"#sign-up-for-terraform-cloud\">»</a><a></a>Sign Up for Terraform Cloud</h3>\n<p>This pattern uses Terraform Cloud. <a href=\"https://app.terraform.io/signup/account\">Sign up and log into Terraform Cloud here</a>. (There is a free tier available)</p>\n<p>When you sign up, you will receive an email asking you to confirm your email address. Confirm your email address before moving on. When you click the link to confirm your email address, the Terraform Cloud UI will ask which setup workflow you would like to use. Select \"Start from scratch\".</p><img src=\"https://www.datocms-assets.com/2885/1631138345-welcome-tfc.png\" /><h3><a href=\"#create-an-organization\">»</a><a></a>Create an Organization</h3>\n<p>The next screen will prompt you to create a new organization. Your organization is free, and the members you add will be able to collaborate on your workspaces and share private modules.</p>\n<p>Enter an organization name and email address. You can use the same email address that you used for your account.</p>\n<p><strong>Note</strong>: If you want to join an existing organization, give the organization's administrator the email address you used to create an account. They will be able to send you an invite.</p><img src=\"https://www.datocms-assets.com/2885/1631138170-figure4tfcaf.png\" /><p>Then click \"Create organization\". Terraform Cloud will prompt you to create a new workspace. The <a href=\"https://learn.hashicorp.com/tutorials/terraform/cloud-workspace-create\">Create a Workspace</a> tutorial will guide you through to creating a new workspace and connecting it to a version control repository.</p>\n<h3><a href=\"#create-a-workspace\">»</a><a></a>Create a Workspace</h3>\n<p>Once you have created a Terraform Cloud account and created or joined an organization, you can start managing version-controlled infrastructure with Terraform Cloud. You will need to create a version control system (VCS)-driven Terraform Cloud workspace by connecting the CAF repository to Terraform Cloud.</p>\n<h3><a href=\"#fork-the-caf-github-repository\">»</a><a></a>Fork the CAF GitHub Repository</h3>\n<p>Visit <a href=\"https://github.com/aztfmod\">aztfmod</a>/<a href=\"https://github.com/aztfmod/terraform-azurerm-caf\">terraform-azurerm-caf</a>, which contains the Terraform configuration for the CAF modules. Click the \"Fork\" button at the top right of the page to copy the repository to your GitHub account.</p>\n<h3><a href=\"#connect-terraform-cloud-to-github\">»</a><a></a>Connect Terraform Cloud to GitHub</h3>\n<p>Navigate to the \"Workspaces\" page from the main menu and click \"+ New workspace.\"</p><img src=\"https://www.datocms-assets.com/2885/1631138531-figure5tfcaf.png\" /><p>On the \"New Workspace\" page, select \"Version control workflow\" from the workflow options screen. On the \"Connect to VCS\" screen, press the \"GitHub\" button and then choose \"GitHub.com\" from the drop-down to continue.</p><img src=\"https://www.datocms-assets.com/2885/1631138569-figure6tfcaf.png\" /><p>A new window will open asking you to authorize Terraform Cloud to use your GitHub account. Click the green \"Authorize\" button to connect Terraform Cloud to your GitHub account.</p><img src=\"https://www.datocms-assets.com/2885/1631138648-figure7tfcaf.png\" /><p>You may be asked to install Terraform Cloud for your GitHub account or organization. If prompted, select your account or organization to install Terraform Cloud.</p><img src=\"https://www.datocms-assets.com/2885/1631201264-figure8tfcaf.png\" /><p>For information about installing Terraform Cloud on GitHub, refer to the <a href=\"https://www.terraform.io/docs/cloud/vcs/github-app.html#installing\">Terraform Documentation: Configuration-Free GitHub Usage</a>.</p>\n<h3><a href=\"#choose-a-repository\">»</a><a></a>Choose a Repository</h3>\n<p>Next, Terraform will display a list of your GitHub repositories. Choose the repository <a href=\"https://github.com/aztfmod\">aztfmod</a>/<a href=\"https://github.com/aztfmod/terraform-azurerm-caf\">terraform-azurerm-caf</a>. If you have many GitHub repositories, you may need to filter the list to find the correct one. You are going to deploy the standalone module from the example directory.</p>\n<h3><a href=\"#create-the-workspace\">»</a><a></a>Create the Workspace</h3>\n<p>On the next screen, click on  \"Advanced options\" and add “example”, and click the purple \"Create workspace\" button to create the workspace.</p>\n<p>It will take a few minutes for Terraform Cloud to connect to your GitHub repository. Once connected, Terraform Cloud will display a notification that your configuration was uploaded successfully.</p><img src=\"https://www.datocms-assets.com/2885/1631204920-figure9tcaf-edited.png\" /><img src=\"https://www.datocms-assets.com/2885/1631201386-figure10tcaf.png\" /><h3><a href=\"#workspace-complete\">»</a><a></a>Workspace Complete</h3>\n<p>Once the workspace is completed you should see something similar to the screenshot below.</p><img src=\"https://www.datocms-assets.com/2885/1631201462-figure11tcaf.png\" /><h3><a href=\"#configure-terraform-variables\">»</a><a></a>Configure Terraform Variables</h3>\n<p>Return to the Terraform Cloud UI and visit the \"Variables\" page for your workspace, where you will set your credentials. Terraform Cloud supports two types of variables: environment variables and Terraform variables.</p>\n<p>Either type can be marked as sensitive, which prevents them from being displayed in the Terraform Cloud web UI and makes them write-only. You will need to set up both to get this example working. First, you’ll set up the input variables.</p>\n<p>Examine the <a href=\"https://github.com/aztfmod/terraform-azurerm-caf\">terraform-azurerm-caf</a>/<a href=\"https://github.com/aztfmod/terraform-azurerm-caf/tree/master/examples\">examples</a>/standalone.md in that directory. It defines the input variables you need to set up and some defaults to use.</p><pre><code>variable \"virtual_machines\" {\n  default     = {}\n  description = \"Create a virtual machine from CAF module\"\n}\nvariable \"resource_groups\" {\n  default = {}\n}\nvariable \"vnets\" {\n  default = {}\n}\nvariable \"public_ip_addresses\" {\n  default = {}\n}\nvariable \"keyvaults\" {\n  default = {}\n}\nvariable \"global_settings\" {\n  default = {}\n}</code></pre><p>There's a way to do this easily if you are happy with the <code>example.auto.tfvars</code>. In the working directory you can directly copy from them.</p><pre><code>global_settings = {\n  default_region = \"region1\"\n  regions = {\n    region1 = \"southeastasia\"\n  }\n  resource_defaults = {\n    virtual_machines = {\n      # set the below to enable az managed boot diagostics for vms\n      # this will be override if a user managed storage account is defined for the vm\n      # use_azmanaged_storage_for_boot_diagnostics = true\n    }\n  }\n}\n\nresource_groups = {\n  vm_region1 = {\n    name = \"example-virtual-machine-rg1\"\n  }\n}</code></pre><p>After defining the global name, you can copy between the first curly brace  <code>{</code> to the trailing one <code>}</code> and using the HCL checkbox you can paste these into the value section per the example below.</p><img src=\"https://www.datocms-assets.com/2885/1631201631-figure12tcaf.png\" /><p>Then you need to set up the environment variables to allow Terraform Cloud to build into the Azure environment. The setup should resemble the screenshot below.</p><img src=\"https://www.datocms-assets.com/2885/1631201737-figure13tcaf.png\" /><h3><a href=\"#plan-infrastructure-changes\">»</a><a></a>Plan Infrastructure Changes</h3>\n<p>Now that you have set your variables, select \"Start new plan\" from the \"Actions\" drop down menu, choose the \"Plan (most common)\" option, and provide an optional explanation. Then select the purple \"Start plan\" button to start a plan. This may take a few minutes.</p><img src=\"https://www.datocms-assets.com/2885/1631201791-figure14tcaf.png\" /><p>When the plan completes you should see something similar to the screenshot below.</p><img src=\"https://www.datocms-assets.com/2885/1631201828-figure15tcaf.png\" /><h3><a href=\"#apply-planned-changes\">»</a><a></a>Apply Planned Changes</h3>\n<p>Once the plan is complete, click the \"Confirm &amp; Apply\" button, followed by the \"Confirm Plan\" button to apply the change. After a few minutes, your “apply” should complete. Terraform Cloud will display a confirmation.</p>\n<h2><a href=\"#wrapping-up\">»</a><a></a>Wrapping Up</h2>\n<p>You have now deployed a standalone environment drive out of Terraform Cloud. Remember that if you want to avoid unnecessary costs that you will need to delete the run too. ​​<a href=\"https://learn.hashicorp.com/tutorials/terraform/cloud-destroy?in=terraform/cloud-get-started\">To destroy the infrastructure</a> you provisioned in these tutorials, go to your workspace in the Terraform Cloud UI. Next, from the top menu, select \"Settings -&gt; Destruction and Deletion\".</p>\n<p>Hopefully you can see how easy it is to use Terraform Cloud to deploy an outcome on Azure. If you would like to know more about either CAF or Terraform, I’ve listed some useful resources:</p>\n<p><strong>Terraform</strong></p>\n<ul>\n<li><a href=\"https://www.hashicorp.com/products/terraform\">Terraform Use Cases</a></li>\n<li><a href=\"https://learn.hashicorp.com/terraform\">HashiCorp Learn Terraform Tutorials</a></li>\n<li><a href=\"https://www.hashicorp.com/resources/?product=Terraform\">Terraform Resources Library</a></li>\n<li><a href=\"https://www.terraform.io/docs/index.html\">Terraform Documentation</a></li>\n</ul>\n<p><strong>CAF</strong></p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/organize/cloud-platform\">Understand cloud platform functions - Cloud Adoption Framework</a>: Understand cloud platform functions, including the source, the scope, and the deliverable.</li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/organize/cloud-adoption\">Understand cloud adoption functions - Cloud Adoption Framework</a>: Understand how cloud adoption functions enable technical solutions so that you can staff your teams appropriately.</li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/get-started/org-alignment\">Get started: Align your organization - Cloud Adoption Framework</a>: Recommended steps for aligning your organization so that you're ready for successful cloud adoption.</li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/get-started/team/cloud-operations\">Get started: Build a cloud operations team - Cloud Adoption Framework</a>: This guide helps a cloud operations team understand scope, deliverables, and the functionality that the team is responsible for.</li>\n</ul>","author":"David Wright","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"ea1d937fff6c7278a7a54d448f5d83ddacd50fd50e6fa4222d9f67729f90b546","category":"Tech"}