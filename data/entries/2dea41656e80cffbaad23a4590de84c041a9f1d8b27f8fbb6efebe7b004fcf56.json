{"title":"How to use Media Source Extensions with AirPlay","link":"https://webkit.org/blog/15036/how-to-use-media-source-extensions-with-airplay/","date":1708108517000,"content":"<p>Media Source Extensions (MSE) is a popular way to provide streaming video on the web. It gives JavaScript control of the way bytes are sent to the browser for playback. At the 2023 Worldwide Developer conference, Apple <a href=\"https://developer.apple.com/videos/play/wwdc2023/10122/\">announced a new Managed Media Source API</a> that improves on MSE with efficient video streaming and longer battery life for iOS and other devices.</p>\n<p>However, MMS and MSE, by nature, are not compatible with AirPlay, which requires a unique playback URL. AirPlay allows you to start playback of your favorite videos on your phone, move them to your TV and then switch off that phone. An AirPlay-compatible URL can be of any format such as an mp4, mpeg-ts, or HTTP Live Streaming (HLS).</p>\n<p>This post will guide you through providing both sources and, in the process, build out a demo example.</p>\n<p><img width=\"3080\" height=\"1732\" src=\"https://webkit.org/wp-content/uploads/mse-airplay-1.png\" alt=\"WebKit MSE + AirPlay Demo\" srcset=\"https://webkit.org/wp-content/uploads/mse-airplay-1.png 3080w, https://webkit.org/wp-content/uploads/mse-airplay-1-300x169.png 300w, https://webkit.org/wp-content/uploads/mse-airplay-1-1024x576.png 1024w, https://webkit.org/wp-content/uploads/mse-airplay-1-768x432.png 768w, https://webkit.org/wp-content/uploads/mse-airplay-1-1536x864.png 1536w, https://webkit.org/wp-content/uploads/mse-airplay-1-2048x1152.png 2048w\" /></p>\n<p>Since MMS/MSE uses binary blobs appended to a SourceBuffer it won’t work with AirPlay. But, if you create an alternative source that can be served as an AirPlay-compatible URL, there is a way to get them to work together.</p>\n<p>When it comes to an AirPlay-compatible alternative, HLS is an option that offers a great deal of efficiency for users. There are numerous resources that can guide you in converting your video content to serve it with HLS. <a href=\"https://developer.apple.com/documentation/http-live-streaming/using-apple-s-http-live-streaming-hls-tools\">Apple offers a toolkit you can use</a> and there are many other options as well.</p>\n<pre><code><span>const</span> <span>airplayURL</span> <span>=</span> <span>'./video/demo.m3u8'</span>;\n<span>const</span> <span>videoURL</span> <span>=</span> <span>'./video/demo.mp4'</span>;\n<span>const</span> <span>mediaType</span> <span>=</span> <span>'video/mp4; codecs=\"avc1.640028\"'</span>;\n\n<span>// Create a video element\n</span><span>const</span> <span>video</span> <span>=</span> <span>document</span>.<span>createElement</span>(<span>'video'</span>);\n\n<span>// Set video element properties for the demo\n</span><span>video</span>.<span>controls</span> <span>=</span> <span>true</span>;\n<span>video</span>.<span>loop</span> <span>=</span> <span>true</span>;\n<span>video</span>.<span>muted</span> <span>=</span> <span>true</span>;\n<span>video</span>.<span>autoplay</span> <span>=</span> <span>true</span>;\n</code></pre>\n<p>In setting up the MediaSource, it’s easy to use feature detection to use Managed Media Source API to offer power-efficient streaming on browsers that support it and gracefully fallback to MSE where its not available:</p>\n<pre><code><span>// Feature detect MMS and fallback to MSE\n</span><span>const</span> <span>MediaSource</span> <span>=</span> <span>self</span>.<span>ManagedMediaSource</span> <span>|</span><span>|</span> <span>self</span>.<span>MediaSource</span>;\n<span>const</span> <span>source</span> <span>=</span> <span>new</span> <span>MediaSource</span>();\n</code></pre>\n<p>We also need a way to offer both our Media Source and AirPlay sources at the same time. The HTML <code>video</code> element’s ability to define multiple sources will do just that. It was originally intended to allow a user-agent to choose the best format of the video to be played and fallback should it not be supported.</p>\n<pre><code><span>&lt;<span>video</span>&gt;</span>\n  <span>&lt;<span>source</span> <span>src</span>=<span>\"format/video.m3u8\"</span> <span>type</span>=<span>\"application/x-mpegURL\"</span>&gt;</span>\n  <span>&lt;<span>source</span> <span>src</span>=<span>\"format/video.ogg\"</span> <span>type</span>=<span>\"video/ogg\"</span>&gt;</span>\n  <span>&lt;<span>source</span> <span>src</span>=<span>\"format/video.mp4\"</span> <span>type</span>=<span>\"video/mp4\"</span>&gt;</span>\n  <span>&lt;<span>source</span> <span>src</span>=<span>\"format/video.webm\"</span> <span>type</span>=<span>\"video/webm\"</span>&gt;</span>\n<span>&lt;/<span>video</span>&gt;</span>\n</code></pre>\n<p>The browser will look over the list of available formats from top to bottom. If no matches are found, or if decoding fails along the way, it will select the next element in the list.</p>\n<p>We can make use of this behavior, combining the ability for the user-agent to choose the best format and allowing AirPlay to select a playable source. You’ll create a URL from your Media Source and add it to a video element as the first source. This URL is local to the user-agent and can’t be shared, as it has no meaning outside the local context. Then you add the AirPlay-compatible URL as the second source.</p>\n<pre><code><span>// Add MSE/MMS streaming source\n</span><span>const</span> <span>videoSource1</span> <span>=</span> <span>document</span>.<span>createElement</span>(<span>'source'</span>);\n<span>videoSource1</span>.<span>type</span> <span>=</span> <span>'video/mp4'</span>;\n<span>videoSource1</span>.<span>src</span> <span>=</span> <span>URL</span>.<span>createObjectURL</span>(<span>source</span>); <span>// Create URL from MediaSource\n</span><span>video</span>.<span>appendChild</span>(<span>videoSource1</span>);\n\n<span>// Add AirPlay-compatible HLS source\n</span><span>const</span> <span>videoSource2</span> <span>=</span> <span>document</span>.<span>createElement</span>(<span>'source'</span>);\n<span>videoSource2</span>. <span>type</span> <span>=</span> <span>'application/x-mpegURL'</span>;\n<span>videoSource2</span>.<span>src</span> <span>=</span> <span>airplayURL</span>;\n<span>video</span>.<span>appendChild</span>(<span>videoSource2</span>);\n</code></pre>\n<p>Now when Safari detects that an alternative source is available in addition to the MediaSource URL object, it will display the familiar AirPlay icon to the video player control. Should the user select AirPlay, it will switch over from MSE to the AirPlay-compatible URL.</p>\n<p></p>\n<p>The streaming code for this demo is very basic and serves as an example of getting the bytes from the video to the browser.</p>\n<pre><code><span>document</span>.<span>onload</span> <span>=</span> <span>async</span> () <span>=</span><span>&gt;</span> {\n  <span>if</span> (<span>!</span><span>MediaSource</span>.<span>isTypeSupported</span>(<span>mediaType</span>)) {\n    <span>return</span> <span>console</span>.<span>log</span>(<span>'Media type is not supported.'</span>);\n  }\n\n  <span>await</span> <span>new</span> <span>Promise</span>((<span>resolve</span>) <span>=</span><span>&gt;</span> {\n    <span>source</span>.<span>addEventListener</span>(<span>\"sourceopen\"</span>, <span>resolve</span>, { <span>once</span><span>:</span> <span>true</span> });\n    <span>document</span>.<span>body</span>.<span>appendChild</span>(<span>video</span>);\n  });\n\n  <span>const</span> <span>sourceBuffer</span> <span>=</span> <span>source</span>.<span>addSourceBuffer</span>(<span>mediaType</span>);\n\n  <span>async</span> <span>function</span> <span>loadSegment</span>() {\n    <span>const</span> <span>response</span> <span>=</span> <span>await</span> <span>fetch</span>(<span>videoURL</span>);\n    <span>const</span> <span>buffer</span> <span>=</span> <span>await</span> <span>response</span>.<span>arrayBuffer</span>();\n    <span>await</span> <span>new</span> <span>Promise</span>((<span>resolve</span>) <span>=</span><span>&gt;</span> {\n      <span>sourceBuffer</span>.<span>addEventListener</span>(<span>\"updateend\"</span>, <span>resolve</span>, { <span>once</span><span>:</span> <span>true</span> });\n      <span>sourceBuffer</span>.<span>appendBuffer</span>(<span>buffer</span>);\n    });\n  }\n\n  <span>if</span> (<span>typeof</span>(<span>source</span>.<span>onstartstreaming</span>) <span>!</span><span>=</span><span>=</span> <span>'undefined'</span>) {\n    <span>source</span>.<span>onstartstreaming</span> <span>=</span> <span>async</span> () <span>=</span><span>&gt;</span> {\n      <span>loadSegment</span>();\n    };\n  } <span>else</span> <span>loadSegment</span>();\n});\n</code></pre>\n<h2>Feedback</h2>\n<p>Offering support for MMS/MSE and AirPlay is gives users the best of all worlds and the <code>video</code> element makes it easy to offer multiple sources. You can learn more about the <a href=\"https://github.com/w3c/media-source/issues/320\">Managed Media Source API proposal</a> at the W3C, and learn about <a href=\"https://developer.apple.com/documentation/http-live-streaming\">HTTP Live Streaming</a> from Apple’s documentation.</p>\n<p>We love to hearing from you. Send a tweet to <a href=\"https://twitter.com/webkit\">@webkit</a> to share your thoughts on this feature. Find us on Mastodon at <a href=\"https://front-end.social/@jensimmons\">@jensimmons@front-end.social</a> and <a href=\"https://mastodon.social/@jondavis\">@jondavis@mastodon.social</a>. If you run into any issues, we welcome your <a href=\"https://bugs.webkit.org/\">WebKit bug reports</a> on WebKit-powered features like this. Reporting issues and sharing your feedback makes an enormous difference.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"2dea41656e80cffbaad23a4590de84c041a9f1d8b27f8fbb6efebe7b004fcf56","category":"Tech"}