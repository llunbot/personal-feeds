{"title":"Deploy Consul on Kubernetes with Argo CD","link":"https://www.hashicorp.com/blog/deploy-consul-on-kubernetes-with-argo-cd","date":1695657600000,"content":"<p>A <a href=\"https://opengitops.dev/\">GitOps</a> tool like Argo CD can help centralize the automation, installation, and configuration of services onto multiple Kubernetes clusters. Rather than apply changes using a Kubernetes CLI or CI/CD, a GitOps workflow detects changes in version control and applies the changes automatically in the cluster. You can use a GitOps workflow to deploy and manage changes to a Consul cluster, while orchestrating the configuration of Consul service mesh for peering, network policy, and gateways. </p>\n\n<p>This approach to managing your Consul cluster and configuration has two benefits. First, a GitOps tool handles the order-of-operations and automation of cluster updates before configuration updates. Second, your Consul configuration uses version control as a source of truth that GitOps enforces across multiple Kubernetes clusters.</p>\n\n<p>This post demonstrates a GitOps workflow for deploying a Consul cluster, configuring its service mesh, and upgrading its server with Argo CD. Argo CD annotations for <a href=\"https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves/\">sync waves</a> and <a href=\"https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/\">resource hooks</a> enable orchestration of Consul cluster deployment followed by service mesh configuration with <a href=\"https://developer.hashicorp.com/consul/docs/k8s/crds\">Custom Resource Definitions (CRDs)</a>. Updating a Consul cluster on Kubernetes involves opening a pull request with changes to Helm chart values or CRDs and merging it. Argo CD synchronizes the configuration to match version control and handles the order of operations when applying the changes.</p>\n<img src=\"https://www.datocms-assets.com/2885/1695655396-app_of_apps.png\" alt=\"Argo\" /><p>The example in this post deploys a Consul server and configures defaults for peering and service mesh using mesh and proxy-defaults configuration entries. You can use Argo CD sync waves to additionally deploy applications that rely on Consul, such as Jaeger or other observability tools, with the <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/#app-of-apps-pattern\">App of Apps pattern</a>.</p>\n\n<h2>Define Consul Helm chart values</h2>\n\n<p>Argo CD supports <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/\">declarative setup</a> of many resources and the <a href=\"https://argo-cd.readthedocs.io/en/stable/user-guide/helm/\">installation of Helm charts</a>. Create a repository for Consul Helm chart values. Consul has a number of configuration options and components when running on Kubernetes. Placing these under version control ensures that you pin Consul versions and define its components in a controlled manner.</p>\n\n<p>In the repository, define values for the Consul Helm chart. As of Helm chart version 1.2.2, the values include a <code>global.argocd.enabled</code> attribute to configure Consul for Argo CD. The values use Consul version 1.16.0 as part of the initial deployment:</p>\n<pre><code>global:\n  name: consul\n  datacenter: dc1\n  image: hashicorp/consul:1.16.0\n\n  # omitted for clarity\n\n  argocd:\n    enabled: true\n\n# omitted for clarity\n\nserver:\n  replicas: 3\n  updatePartition: 0\n</code></pre><p>Make note of the repository storing the Consul Helm chart values, as you will use it to define a Consul application for Argo CD.</p>\n\n<h2>Define Consul configuration entries</h2>\n\n<p>ArgoCD also supports deployment of Kubernetes application manifests. You typically deploy global <a href=\"https://developer.hashicorp.com/consul/docs/connect/config-entries\">configuration entries</a> after the Consul server starts successfully. Using Argo CD, you automate the workflow of starting the Consul cluster and configuring defaults for the service mesh or gateways. For example, you can define the default proxy configuration using the <a href=\"https://developer.hashicorp.com/consul/docs/connect/config-entries/proxy-defaults\"><code>proxy-defaults configuration entry</code></a>. Using an Argo CD sync wave, you ensure that Argo CD applies the <code>proxy-defaults</code> configuration entry after the Consul server starts.</p>\n\n<p>To ensure Argo CD follows the order of operations, annotate CRDs for Consul configuration entries with a sync wave greater than 2. The Consul Helm chart includes <a href=\"https://github.com/search?q=repo%3Ahashicorp%2Fconsul-k8s+%22helm.sh%2Fhook-weight%22&amp;type=code\">annotations</a> for <code>helm.sh/hook-weight</code>, which Argo CD <a href=\"https://argo-cd.readthedocs.io/en/stable/user-guide/helm/#helm-hooks\">maps to sync waves</a>. A sync wave greater than 2 for Consul configuration entries ensures that Argo CD fully updates the Consul cluster before applying configuration entries:</p>\n<pre><code>apiVersion: consul.hashicorp.com/v1alpha1\nkind: ProxyDefaults\nmetadata:\n  name: global\n  annotations:\n    argocd.argoproj.io/sync-wave: \"3\"\nspec:\n  meshGateway:\n    mode: 'local'\n  config:\n    # omitted for clarity</code></pre><p>Store these CRDs in a repository, either the same one as the Helm chart values or a different one dedicated to Consul configuration. By defining a sync wave, you can orchestrate the deployment of different Consul configuration entries after their components start. </p>\n\n<h2>Create an Argo CD project for Consul</h2>\n\n<p>Consul requires several cluster-wide permissions. To isolate its management from other workloads, define an <a href=\"https://argo-cd.readthedocs.io/en/stable/user-guide/projects/\">Argo CD project</a> dedicated to Consul and its global configuration entries. Creating a project limits Consulâ€™s access to Kubernetes and limits the source repositories to the Consul Helm chart, Helm chart values, and configuration entries.</p>\n\n<p>Define a project named <code>consul</code> in the <code>consul-project.yaml</code> file:</p>\n<pre><code>apiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: consul\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  description: HashiCorp Consul\n  sourceRepos:\n  - 'https://helm.releases.hashicorp.com'\n  - 'https://github.com/joatmon08/consul-minikubes.git'\n\n  # Only permit applications to deploy to the consul namespace in the same cluster\n  destinations:\n  - namespace: consul\n    server: https://kubernetes.default.svc\n    name: in-cluster\n\n  clusterResourceWhitelist:\n  - group: ''\n    kind: Namespace\n  - group: 'rbac.authorization.k8s.io'\n    kind: ClusterRole\n  - group: 'rbac.authorization.k8s.io'\n    kind: ClusterRoleBinding\n  - group: 'apiextensions.k8s.io'\n    kind: CustomResourceDefinition\n  - group: 'admissionregistration.k8s.io'\n    kind: MutatingWebhookConfiguration\n\n  # Allow all namespaced-scoped resources to be created, except for ResourceQuota, LimitRange, NetworkPolicy\n  namespaceResourceBlacklist:\n  - group: ''\n    kind: ResourceQuota\n  - group: ''\n    kind: LimitRange\n  - group: ''\n    kind: NetworkPolicy\n\n  # Enables namespace orphaned resource monitoring.\n  orphanedResources:\n    warn: false\n\n  roles:\n  # A role which provides read-only access to all applications in the project\n  - name: read-only\n    description: Read-only privileges to consul\n    policies:\n    - p, proj:consul:read-only, applications, get, consul/*, allow\n    groups:\n    - consul\n</code></pre><p>Apply the project to your Kubernetes cluster:</p>\n\n<pre><code>$ kubectl apply -f consul-project.yaml\n</code></pre>\n\n<h2>Deploy Consul with Argo CD</h2>\n\n<p>Define an Argo CD application for Consul in the <code>consul-application.yaml</code> file. The application manifest has three tasks. First, Argo CD creates a namespace for Consul. Then, it synchronizes changes from the Helm chart and its input values using <code>syncPolicy.automated</code>. It also deploys <code>proxy-defaults</code> and <code>mesh</code> configuration entries to the Consul cluster. Note that the Argo CD application for Consul uses <a href=\"https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository\">multiple sources</a>.</p>\n<pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: consul\n  namespace: argocd\nspec:\n  # Automatically synchronize changes from sources, create Consul namespace\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n    - CreateNamespace=true\n\n  project: consul\n\n  sources:\n    # Deploy Consul Helm chart\n    - chart: consul\n      repoURL: https://helm.releases.hashicorp.com\n      targetRevision: 1.2.2\n      helm:\n        releaseName: consul\n        valueFiles:\n          - $values/argocd/consul-helm-values.yaml\n\n    # Use values from demo repository for Helm chart\n    - repoURL: 'https://github.com/joatmon08/consul-minikubes.git'\n      targetRevision: argocd\n      ref: values\n\n    # Use Consul CRDs to configure proxy-defaults and mesh\n    - repoURL: 'https://github.com/joatmon08/consul-minikubes.git'\n      path: argocd/consul-config\n      targetRevision: argocd\n\n  # Deploy to the consul namespace in same cluster\n  destination:\n    server: \"https://kubernetes.default.svc\"\n    namespace: consul\n</code></pre><p>This example initially uses Consul version to 1.16.0 and chart version to 1.2.2 to ensure that Argo CD enforces each version and their compatibility. To upgrade Consul, you can update the version in version control and Argo CD will roll out a new version of Consul or the chart.</p>\n\n<p>Apply the Consul application to your Kubernetes cluster:</p>\n\n<pre><code>$ kubectl apply -f consul-application.yaml\n</code></pre>\n\n<p>Argo CD deploys the Consul server and other components defined by the Helm chart before applying the <code>mesh</code> and <code>proxy-defaults</code> configuration entries.</p>\n<img src=\"https://www.datocms-assets.com/2885/1695656368-consul_application.png\" alt=\"Argo\" /><p>To examine these resources, <a href=\"https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_login/\">log into Argo CD</a>. Using the Argo CD CLI, get information about the Consul application:</p>\n<pre><code>$ argocd app get consul\n\nName:               argocd/consul\nProject:            consul\nServer:             https://kubernetes.default.svc\nNamespace:          consul\nURL:                https://localhost:8080/applications/consul\nRepo:               https://helm.releases.hashicorp.com\nTarget:             1.2.2\nPath:               \nHelm Values:        $values/argocd/consul-helm-values.yaml\nSyncWindow:         Sync Allowed\nSync Policy:        Automated (Prune)\nSync Status:        Synced to 1.2.2\nHealth Status:      Healthy\n\nGROUP                         KIND                          NAMESPACE  NAME                                      STATUS  HEALTH   HOOK  MESSAGE\n\n# omitted for clarity\n\n                              Service                       consul     consul-connect-injector                   Synced  Healthy        \n                              Service                       consul     consul-dns                                Synced  Healthy        \n                              Service                       consul     consul-mesh-gateway                       Synced  Healthy        \n                              Service                       consul     consul-server                             Synced  Healthy\n\n# omitted for clarity\n \napps                          StatefulSet                   consul     consul-server                             Synced  Healthy        \nconsul.hashicorp.com          Mesh                          consul     mesh                                      Synced                 \nconsul.hashicorp.com          ProxyDefaults                 consul     global                                    Synced            \n\n# omitted for clarity                           \n</code></pre><p>If you log into Consul and check the <code>proxy-defaults</code> configuration entry, you will find that Argo CD applied the <code>ProxyDefaults</code> CRD:</p>\n<pre><code>$ consul config read -kind proxy-defaults -name global\n\n{\n  \"Kind\": \"proxy-defaults\",\n  \"Name\": \"global\",\n  \"TransparentProxy\": {},\n  \"Config\": {\n    # omitted for clarity\n  },\n  \"MeshGateway\": {\n    \"Mode\": \"local\"\n  },\n  \"Expose\": {},\n  \"AccessLogs\": {},\n  \"Meta\": {\n    \"consul.hashicorp.com/source-datacenter\": \"dc1\",\n    \"external-source\": \"kubernetes\"\n  }\n}\n</code></pre><p>Use version control to commit any changes to the Consul Helm chart, its values, or Consul CRDs. Argo CD automatically synchronizes and applies the changes to these resources.</p>\n\n<h2>Upgrade Consul with Argo CD</h2>\n\n<p>As you run your Consul cluster, you may choose to <a href=\"https://developer.hashicorp.com/consul/docs/k8s/upgrade#upgrade-consul-servers\">upgrade your servers</a> or Helm chart to the next version. Before you commit the new versions to version control and Argo CD synchronizes configuration, make sure that you back up the persistent volume attached to the Consul servers. Before upgrading, review the <a href=\"https://developer.hashicorp.com/consul/docs/k8s/upgrade\">documentation for upgrading Consul on Kubernetes</a> and verify <a href=\"https://developer.hashicorp.com/consul/docs/upgrading\">upgrade instructions</a> for each version of Consul.</p>\n\n<p>Imagine you need to upgrade your Consul cluster from 1.16.0 to 1.16.2 to roll out a fix to snapshots. In the Helm chart values, update Consulâ€™s image to 1.16.2 and set <code>server.updatePartition</code> to equal the number of server replicas. This ensures that upgrades do not occur immediately and you can control the rollout:</p>\n<pre><code>global:\n  name: consul\n  datacenter: dc1\n  image: hashicorp/consul:1.16.2 # update Consul version\n\n  # omitted for clarity\n\nserver:\n  replicas: 3\n  updatePartition: 3 # number of servers to avoid updating</code></pre><p>Commit this to version control and wait for Argo CD to synchronize. Argo CD notices the differences in version control and the live configuration and identifies which components to update.</p>\n<img src=\"https://www.datocms-assets.com/2885/1695656591-consul_update_diff.png\" alt=\"Argo\" /><p>Argo CD will upgrade Consul components such as the injector and gateways first and avoid upgrading the servers because of the <code>server.updatePartition</code> attribute passed to the Consul Helm chart. Verify that services can still access each other and Consul remains healthy.</p>\n\n<p>Set <code>server.updatePartition</code> to 2 and commit this configuration to version control:</p>\n<pre><code>global:\n  name: consul\n  datacenter: dc1\n  image: hashicorp/consul:1.16.2 # update Consul version\n\n  # omitted for clarity\n\nserver:\n  replicas: 3\n  updatePartition: 2 # number of servers to avoid updating\n</code></pre><p>Argo CD passes this value to the Consul Helm chart and upgrades a single server to 1.16.2.</p>\n<img src=\"https://www.datocms-assets.com/2885/1695656672-consul_update_server.png\" alt=\"Argo\" /><p>Verify one server has upgraded to 1.16.2:</p>\n<pre><code>$ kubectl get pods -n consul \\\n  -l component=server \\\n  -o jsonpath='{range .items[*]}{\"\\n\"}{.metadata.name}{\":\\t\"}{range .spec.containers[*]}{.image}{\", \"}{end}{end}'\n\nconsul-server-0:        hashicorp/consul:1.16.0, \nconsul-server-1:        hashicorp/consul:1.16.0, \nconsul-server-2:        hashicorp/consul:1.16.2,</code></pre><p>Continue decrementing <code>server.updatePartition</code> and committing the new value to version control until the value reaches zero. This ensures a gradual rollout of the new Consul server version. While decrementing, verify that services can still access each other and Consul remains healthy:</p>\n<pre><code>$ kubectl get pods -n consul \\                        \n  -l component=server \\\n  -o jsonpath='{range .items[*]}{\"\\n\"}{.metadata.name}{\":\\t\"}{range .spec.containers[*]}{.image}{\", \"}{end}{end}'\n\nconsul-server-0:        hashicorp/consul:1.16.2, \nconsul-server-1:        hashicorp/consul:1.16.2, \nconsul-server-2:        hashicorp/consul:1.16.2,</code></pre><p>When you upgrade the Helm chart, you can verify changes on the Argo CD server. You need to disable auto-sync for the Consul application. Commit and push the Helm chart version update to version control. Argo CD recognizes the configuration as out of sync. If you examine the application details, you can verify the changes to Consul resources.</p>\n\n<p>Alternatively, you can define Consul as a single-source Argo CD application and run a local command for Argo CD to <a href=\"https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_sync/\">synchronize a dry run</a> and identify the changes.</p>\n\n<p>Once you verify the changes, update the Consul application for Argo CD with a target revision for the Helm release:</p>\n<pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: consul\n  namespace: argocd\nspec:\n  # omitted for clarity\n\n  sources:\n    # Deploy Consul Helm chart\n    - chart: consul\n      repoURL: https://helm.releases.hashicorp.com\n      targetRevision: 1.x.x # Update to latest Helm chart\n      helm:\n        releaseName: consul\n        valueFiles:\n          - $values/argocd/consul-helm-values.yaml\n\n    # omitted for clarity</code></pre><p>To preserve the state of the Consul servers, set <code>server.updatePartition</code> to 3. Commit the Helm values to version control. This ensures that Argo CD synchronizes changes to other components before the servers: </p>\n<pre><code>global:\n  name: consul\n  datacenter: dc1\n  image: hashicorp/consul:1.16.2\n\n  # omitted for clarity\n\nserver:\n  replicas: 3\n  updatePartition: 3  # number of servers to avoid updating</code></pre><p>Then, apply the Consul Argo CD application to your Kubernetes cluster:</p>\n\n<pre><code>$ kubectl apply -f consul-application.yaml\n</code></pre>\n\n<p>Decrement <code>server.updatePartition</code> and commit the Helm values to version control until it reaches zero. This applies gradual updates from the Helm chart to the Consul servers. Verify that services can still access each other and Consul remains healthy.</p>\n\n<h2>Next steps</h2>\n\n<p>A GitOps workflow allows you to deploy and manage changes to a Consul cluster while orchestrating the configuration of a Consul service mesh for peering, network policy, and gateways. By ensuring that version control remains the primary source of truth for Consul cluster and service mesh configuration, you can consistently deploy configuration across different Consul clusters, clouds, and environments and standardize management of Consul across multiple Kubernetes clusters. Automation with Argo CD hooks and sync waves help synchronize Consul resources on Kubernetes, coordinate changes to different  resources, and facilitate the upgrade of Consul servers and components. </p>\n\n<p>For a detailed set of configurations, check out my <a href=\"https://github.com/joatmon08/consul-minikubes/tree/argocd\">demo repository</a>. For more information about Argo CD, explore its <a href=\"https://argo-cd.readthedocs.io/en/stable/\">documentation</a>. To learn more about Consul on Kubernetes, check out our <a href=\"https://developer.hashicorp.com/consul/docs/k8s\">documentation</a> and this tutorial on how to <a href=\"https://developer.hashicorp.com/consul/docs/k8s/installation/install\">install Consul via Helm chart</a>. Additional instructions can be found in our <a href=\"https://developer.hashicorp.com/consul/docs/k8s/upgrade\">documentation on Upgrading Consul on Kubernetes components</a>.</p>\n\n<p><em>(Thank you to <a href=\"https://chernand.io/\">Christian Hernandez</a>, Head of Community Engineering at Akuity, for educating and clarifying Argo CD details for this post.)</em></p>\n","author":"Rosemary Wang","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"32ca9c423533dcd9a928a17e225d5e3f0d2caa92cd11b3b5a21510f6b576d305","category":"Tech"}