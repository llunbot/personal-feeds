{"title":"สรุปจากการอ่านบทความเรื่อง System tests have failed","link":"https://www.somkiat.cc/note-from-system-tests-have-failed/","date":1716271142000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2024/05/system-test-failed-150x150.jpg\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2024/05/system-test-failed-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2024/05/system-test-failed-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2024/05/system-test-failed.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2024/05/system-test-failed-1024x677.jpg\" width=\"490\" height=\"324\" /></a></figure>\n\n\n\n<p>จากบทความเรื่อง <strong><a href=\"https://world.hey.com/dhh/system-tests-have-failed-d90af718\" target=\"_blank\">System tests have failed</a></strong> ที่เขียนโดย DHH หรือ คุณ David Heinemeier Hansson<br />ทำการเขียนเรื่อง System test ของระบบ <a href=\"https://www.hey.com/\" target=\"_blank\">HEY.com</a><br />ซึ่งมีมากกว่า 300 ตัวพบว่า<br />ผลลัพธ์ที่ได้มันช่วยทดสอบระบบได้ดี มีความมั่นใจ<br />แต่เมื่อมีเยอะ ๆ แล้ว มันช้า พังง่าย (broken test)<br />ผลลัพธ์การทดสอบไม่ถูกต้อง (false negative เยอะ)<br />ดังนั้นการทดสอบด้วย System test เพียงอย่างเดียว ไม่น่าเป็นคำตอบที่ถูกต้อง<br />ดังนั้นเรามาดูในรายละเอียดกัน</p>\n\n\n\n<span></span>\n\n\n\n<p><em>ปัญหาการทดสอบนี้ ก็มีคำถามมาจาก <a href=\"https://www.skooldio.com/workshops/fullstack-automation-software-testing\" target=\"_blank\">course Fullstack Automation Software Testing ที่ Skooldio</a> เช่นกัน<br />จึงคิดว่าบทความนี้น่าจะตอบได้ดีทีเดียวครับ</em></p>\n\n\n\n<p><strong>ก่อนอื่นทำความรู้จักกับ <a href=\"https://guides.rubyonrails.org/5_1_release_notes.html#system-tests\" target=\"_blank\">System test</a> ของ RoR (Ruby on Rail) กันก่อน</strong></p>\n\n\n\n<p>เป็นการทดสอบที่เพิ่มเข้ามา ประกอบไปด้วย</p>\n\n\n\n<ul>\n<li><a href=\"https://teamcapybara.github.io/capybara/\" target=\"_blank\">Capybara</a></li>\n\n\n\n<li><a href=\"https://www.selenium.dev/\" target=\"_blank\">Selenium</a></li>\n\n\n\n<li>Run บน web browser แบบ headless</li>\n</ul>\n\n\n\n<p>เราอาจจะเรียกได้ว่าเป็น UI testing นั่นเอง หรือเป็นการทดสอบแบบ black box<br />เป็นการทดสอบในมุมมองของผู้ใช้งานทั่วไป<br />จึงทำให้เรามีความมั่นใจต่อการทดสอบสูงมาก ๆ<br />และที่สำคัญคือ ถ้ามีการเปลี่ยน logic หรือ business process ภายในแล้ว<br />จะไม่กระทบต่อการทดสอบมากนัก หรือ ไม่กระทบเลย<br />นั่นก็เป็นอีกหนึ่งข้อดีของ System test นั่นเอง</p>\n\n\n\n<p><strong>แต่เมื่อจำนวนการทดสอบเยอะมากขึ้น ความซับซ้อนสูงขึ้น</strong></p>\n\n\n\n<p>ปัญหาที่ตามมาคือ ความช้า และ พังง่าย<br />เพราะว่าในฝั่งของ UI ที่พัฒนาด้วยภาษา JavaScript มีปัญหาหลายเรื่อง<br />ทั้งเรื่องรูปแบบการทำงาน การ load ต่าง ๆ ว่าครบหรือพร้อมหรือไม่<br />ตรงนี้จากที่ใช้งานมา Selenium จะเจอปัญหาเหล่านี้เยอะมาก ๆ<br />ทำให้เป็นที่มาของ <a href=\"https://www.somkiat.cc/flakiness-testing-with-cypress/\" target=\"_blank\">Flaky test</a> มาอีก</p>\n\n\n\n<p><strong><em>จากประสบการณ์ที่ใช้งานของผมเอง<br />โดยที่เครื่องมือใหม่ ๆ ของการทดสอบเช่น Cypress และ Playwright มาช่วยลดปัญหานี้ลงไป</em></strong></p>\n\n\n\n<p><strong>จากเป้าหมายหรือหัวใจของ Automated testing คือ</strong></p>\n\n\n\n<p>Fast feedback จากการเปลี่ยนแปลงต่าง ๆ<br />แต่ผลที่ได้กลับตรงกันข้าม<br />ดังนั้นแนวทางนี้ไม่น่าจะถูกต้อง</p>\n\n\n\n<p><strong>จากบทความมีการพูดถึงว่า System test จะ work มาก ๆ สำหรับ Smoke test</strong><br />ดังนั้นก็ต้องเข้าใจก่อนว่ามันคืออะไรอีก<br />ตามหลักการแล้ว Smoke test มันคือชุดการทดสอบที่</p>\n\n\n\n<ul>\n<li>ทดสอบ function ที่สำคัญ ๆ ของระบบเป็นหลัก ไม่ใช่ทั้งหมดเหมือน regression test</li>\n\n\n\n<li>ใช้เวลาการทดสอบไม่นาน</li>\n\n\n\n<li>ใช้สำหรับหา critical issue สำหรับ version ใหม่ ๆ ที่ update เข้ามา</li>\n</ul>\n\n\n\n<p>ดังนั้น System test ไม่ได้เหมาะกับการทดสอบให้ครอบคลุมการทำงานภายใน<br />เพราะว่า มันคือ Black box testing<br />เนื่องจาก System test ที่ทำกันนั้น มีทั้ง Controller test, Domain test เป็นต้น<br />ตามโครงสร้างของ RoR project ที่เป็น MVC (Model-View-Controller)<br />ดังนั้นควรแยกออกไปทดสอบใน level อื่น ๆ บ้างจะดีกว่า<br />ส่งผลให้การทดสอบมีหลาย ๆ แบบ ทั้ง unit และ integration test เป็นต้น</p>\n\n\n\n<p><strong><em>ส่งผลทำให้การทดสอบเป็นไปตามเป้าหมาย คือ เร็ว และ น่าเชื่อถือ</em></strong></p>\n\n\n\n<p>แต่แน่นอนว่า การทดสอบยังไม่ครอบคลุม และ ความน่าเชื่อถือยังไม่มากนัก<br />นั่นหมายความว่า การทดสอบด้วยคนจริง ๆ ยังคงจำเป็นในขั้นตอนสุดท้ายอยู่ดี<br />เพราะว่ายังมีอีกหลายเรื่องที่ต้องใช้คน เช่นความรู้สึกต่อระบบเป็นต้น<br />แต่ก่อนจะให้คนทดสอบ เราก็ต้องมีความมั่นใจในระดับหนึ่งแล้วเสมอ</p>\n\n\n\n<p><strong>จะเห็นได้ว่า การทดสอบของระบบนั้นมีหลายรูปแบบ</strong></p>\n\n\n\n<p>ต่างมีข้อดีและข้อเสีย<br />ดังนั้นเราจำเป็นต้องกำหนดเป้าหมายร่วมกันว่าจะทดสอบแบบไหน<br />สนใจเรื่องความเร็วและน่าเชื่อถือหรือไม่<br />ต้องมีการ monitor performance อย่างต่อเนื่อง<br />จากนั้นนำ feedback เหล่านั้นมาปรับปรุงให้ดีขึ้นอย่างต่อเนื่อง</p>\n\n\n\n<p><strong>Reference Websites สำหรับคนแก่ !!</strong></p>\n\n\n\n<ul>\n<li><a href=\"https://dhh.dk/2014/tdd-is-dead-long-live-testing.html\" target=\"_blank\">TDD is dead. Long live testing</a></li>\n\n\n\n<li><a href=\"https://martinfowler.com/articles/is-tdd-dead/\" target=\"_blank\">Is TDD Dead?</a></li>\n\n\n\n<li><a href=\"https://blog.cleancoder.com/uncle-bob/2014/06/17/IsTddDeadFinalThoughts.html\" target=\"_blank\">Is TDD Dead? Final Thoughts about Teams</a></li>\n</ul>\n\n\n\n<p><br /></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"cb8a3a1914cae7c275ac18c6807f4ecfb5ed80c4692ceec7b239ffa2e3aa5dcf","category":"Thai"}