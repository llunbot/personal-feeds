{"title":"Build a Quick AKS Cluster the Easy Way with Terraform Cloud","link":"https://www.hashicorp.com/blog/build-a-quick-aks-cluster-the-easy-way-with-terraform-cloud","date":1638910800000,"content":"<p>HashiCorp Terraform Cloud is a managed service offering that eliminates the need for unnecessary tooling when using Terraform in production. A free and quick way to get started building, managing, and collaborating on infrastructure, Terraform Cloud allows for multiple workflows, allowing teams to run Terraform from their CLI, from the UI in their browser, or via a Git repository when merging pull requests into the main branch. And lately, Terraform Cloud has gotten even more accessible. You can now find public modules and providers to use and save them to your private registry so you can easily review the docs, point new collaborators to them, or even distribute them across your teams.</p>\n<p>Terraform Cloud works seamlessly with the <a href=\"https://registry.terraform.io\">Terraform Registry</a>, the primary source for publicly available Terraform providers and modules. The Terraform Registry offers a browsable and searchable interface for finding providers and modules that teams can use to reduce complexity within their infrastructure as code and automatically install dependencies.</p>\n<p>In this post, we're going to show how Terraform Cloud can drastically simplify a workflow by walking through an example using Terraform Cloud to launch a Kubernetes container on <a href=\"https://docs.microsoft.com/en-us/azure/aks/intro-kubernetes\">Microsoft Azure Kubernetes Service (AKS)</a> using pre-built providers and modules from the public Terraform Registry.</p>\n<p>If you want to follow along, you'll need:</p>\n<ul>\n<li>A <a href=\"https://app.terraform.io/signup/account\">Terraform Cloud account</a></li>\n<li>A VCS account (we'll be in GitHub)</li>\n<li>A Microsoft Azure account</li>\n</ul>\n<p><em>[Note: If you use Amazon Web Services (AWS), Google Cloud, VMWare, or another cloud provider, check out our <a href=\"https://learn.hashicorp.com/terraform\">Learn Guides</a> for more information on how to launch Kubernetes containers.]</em></p>\n<h2><a href=\"#step-one-getting-set-up-with-terraform-cloud\">»</a><a></a>Step One: Getting Set Up with Terraform Cloud</h2>\n<p>First, you'll need to log in to your Terraform Cloud account. If you don't have one yet, go here and sign-up: <a href=\"https://app.terraform.io/signup/account\">https://app.terraform.io/signup/account</a> or follow along with this quick <a href=\"https://learn.hashicorp.com/tutorials/terraform/cloud-sign-up?in=terraform/cloud-get-started\">guide</a>; we'll wait for you.</p>\n<h3><a href=\"#add-terraform-providers\">»</a><a></a>Add Terraform Providers</h3>\n<p>Once you're logged in, we'll start by setting up some basics. First, we need a Terraform provider. <a href=\"https://www.terraform.io/docs/language/providers/index.html\">Providers</a> are plugins that interact with the APIs of cloud, SaaS, and DevOps tools. They add a set of <a href=\"https://www.terraform.io/docs/language/resources/index.html\">resource types</a> or <a href=\"https://www.terraform.io/docs/language/data-sources/index.html\">data sources</a> that Terraform can manage. We need two Terraform providers to build our Kubernetes container in Azure. First, grab the AzureRM provider.</p>\n<p>To get the AzureRM provider and save it in your private registry, you need to:</p>\n<ol>\n<li>Navigate to and click on the Registry tab.</li>\n<li>Click the Search Public Registry button.</li>\n<li>In the search bar, type “azurerm”.</li>\n<li>Either click the Add button in the upper right-hand corner of the result, or click through to see the docs and other information about the provider and click the Add to Terraform Cloud button.</li>\n<li>Return to the Registry tab, where you should see the azurerm provider in your list.</li>\n</ol><p>Next, grab the Kubernetes provider the same way:</p>\n<ol>\n<li>Click the Search Public Registry button in the private Registry tab.</li>\n<li>In the search bar, type “kubernetes”.</li>\n<li>Either click the Add button in the upper right-hand corner of the result, or click through to see the docs and other information about the provider and click the Add to Terraform Cloud button.</li>\n<li>Return to the Registry tab, where you should see the kubernetes provider in your list.</li>\n</ol><h3><a href=\"#add-terraform-modules\">»</a><a></a>Add Terraform Modules</h3>\n<p>Now that we have our providers, we need modules to build out our infrastructure. <a href=\"https://www.terraform.io/docs/language/modules/syntax.html\">Terraform modules</a> are the preferred way to organize your Terraform configuration so it can be reused again and again. While you can always build your own modules, it’s faster to use ones already created by the Terraform community: in this case, azurerm/network and azure/aks.</p>\n<p>We use the same method for finding and selecting modules as we did for the providers:</p>\n<ol>\n<li>From the Registry tab, click the Search Public Registry button.</li>\n<li>Select the Modules tab below the search bar.</li>\n<li>In the search bar, type “network”, and scroll down to Azure/network.</li>\n<li>Either click the Add button in the upper right-hand corner of the result, or click through to see the docs and other information about the module and click the Add to Terraform Cloud button.</li>\n<li>Confirm that you want to add the module to your organization.</li>\n<li>Return to the Registry tab and click the Search Public Registry button.</li>\n<li>Select the Modules tab below the search bar.</li>\n<li>In the search bar, type “aks”.</li>\n<li>Either click the Add button in the upper right-hand corner of the result, or click through to see the docs and other information about the module and click the Add to Terraform Cloud button.</li>\n<li>Confirm that you want to add the module to your organization.</li>\n<li>Return to the Registry tab, where you should see the network and aks modules in your list.</li>\n</ol><h3><a href=\"#create-a-workspace\">»</a><a></a>Create a Workspace</h3>\n<p>Now, to complete the basic setup, we just need a <a href=\"https://www.terraform.io/docs/cloud/workspaces/index.html\">workspace</a>. From the Workspaces tab, click the New Workspace button. We're going to run this demo through our VCS, so you need to connect your VCS to Terraform Cloud. (Follow the in-app instructions, or you can find full instructions in our documentation: <a href=\"https://www.terraform.io/docs/cloud/vcs/index.html\">Connecting VCS Providers to Terraform Cloud</a>.) Finally, you need to name your workspace. For this demo, we’re using:  <code>my-other-house-is-a-datacenter</code>.</p>\n<p>Now we are ready to get started building some infrastructure!</p>\n<h2><a href=\"#step-two-writing-configuration\">»</a><a></a>Step Two: Writing Configuration</h2>\n<p>With our relevant providers and modules in hand, we're ready to create a Kubernetes container on Azure. At a high level, we're going to:</p>\n<ol>\n<li>Ensure we can authenticate</li>\n<li>Set up our configuration</li>\n<li>Deploy our configuration</li>\n</ol>\n<h3><a href=\"#authenticating-to-azure\">»</a><a></a>Authenticating to Azure</h3>\n<p>First, we need to set up our Azure credentials so that we can deploy our infrastructure. Terraform Cloud allows for these values to be set at a workspace level. We can allow our Terraform runs to authenticate by providing these Azure credentials via environment variables. (For more information on how to obtain these credentials, please refer to the<a href=\"https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret\"> Authenticating Using a Service Principal with a Client Secret</a> guide or any of the relevant guides in the Azure Provider documentation.)</p>\n<p>Then set the four required environment variables (ARM_SUBSCRIPTION_ID, ARM_TENANT_ID, ARM_CLIENT_ID, and ARM_CLIENT_SECRET) as shown below in the “variables” section of our Terraform Cloud configuration:</p><img src=\"https://www.datocms-assets.com/2885/1638821480-arm-env-variables-list-tfc.png\" /><h3><a href=\"#configuring-an-aks-cluster\">»</a><a></a>Configuring an AKS Cluster</h3>\n<p>Terraform knows how to authenticate in Azure, so we're ready to set up our configuration. First, create a <code>variables.tf</code> file to maintain all the values we will be using regularly within our Terraform configuration. The file includes:</p><pre><code>variable \"project_name\" {\n  type        = string\n  description = \"Globally used project name\"\n  default     = \"aks-in-action\"\n}\n\nvariable \"region\" {\n  type        = string\n  description = \"Azure Region that will be used\"\n  default     = \"West US\"\n}\n\nvariable \"cluster_version\" {\n  type        = string\n  description = \"The Kubernetes version for our clusters\"\n  default     = \"1.21.2\"\n}</code></pre><p>Next, since we’re using Azure, we need to create a resource group to associate all our resources. Make a file called <code>resource_groups.tf</code> and configure it like this:</p><pre><code>resource \"azurerm_resource_group\" \"project\" {\n  name     = var.project_name\n  location = var.region\n}</code></pre><p>Then create a file called <code>azure.tf</code> where we'll invoke our provider. You can copy the code below or go to the provider in your TFC private registry, click Use Provider, and copy the configuration from there:</p><pre><code>provider \"azurerm\" {\n  features {}\n}</code></pre><p>Now, use our first module to define a network within our Azure account. For this, create a <code>network.tf</code> file and either copy the code below or go to the network module in our private registry, click Use Provider, and then copy the configuration from there:</p><pre><code>module \"network\" {\n  source  = \"Azure/network/azurerm\"\n  version = \"3.5.0\"\n\n  resource_group_name = azurerm_resource_group.project.name\n  address_space       = \"11.0.0.0/16\"\n  subnet_prefixes     = [\"11.0.1.0/24\"]\n  subnet_names        = [\"subnet1\"]\n\n  depends_on = [\n    azurerm_resource_group.project\n  ]\n}</code></pre><p>Finally, we need to add an <code>aks.tf</code> file that instantiates the AKS module. Again, copy the config code below or find the module in your private registry and copy the configuration from there:</p><pre><code>module \"aks\" {\n  source  = \"Azure/aks/azurerm\"\n  version = \"4.13.0\"\n\n  kubernetes_version   = var.cluster_version\n  orchestrator_version = var.cluster_version\n  resource_group_name  = azurerm_resource_group.project.name\n  prefix               = var.project_name\n  agents_count         = 3\n  vnet_subnet_id       = module.network.vnet_subnets[0]\n  os_disk_size_gb      = 100\n\n  # see https://www.terraform.io/docs/language/meta-arguments/depends_on.html\n  depends_on = [\n    module.network\n  ]\n}</code></pre><p>All the configuration we need is now in place, and we can now deploy our AKS cluster.</p>\n<h3><a href=\"#deploying-an-aks-cluster\">»</a><a></a>Deploying an AKS Cluster</h3>\n<p>We're moments away from having an AKS cluster up and running.</p>\n<p>Terraform Cloud gives you the choice of a few different workflows for provisioning. You can:</p>\n<ol>\n<li>Employ a GitOps-style workflow where commits to <code>main</code> or another branch drive your infrastructure deployments. (See the <a href=\"https://www.terraform.io/docs/cloud/run/ui.html\">UI- and VCS-driven Run Workflow documentations</a> for information on how to set that up.)</li>\n<li>Run the following commands (in the order listed) locally via the CLI: <code>terraform init</code>, <code>terraform plan</code>, and <code>terraform apply</code> to apply your infrastructure.</li>\n<li>Manually trigger from the Terraform Cloud UI by clicking on the workspace you created, choosing Actions, Start New Plan, and then Apply.</li>\n</ol>\n<p>Once the deploy has run, we can watch the Terraform Cloud run in the UI and see instant feedback on where our cluster is at in its instantiation process:</p><img src=\"https://www.datocms-assets.com/2885/1638821491-run-in-tfc-ui-aks.png\" /><p>When the deployment has finished, Terraform displays the following message:</p>\n<pre><code>Apply complete! Resources: 8 added, 0 changed, 0 destroyed.\n</code></pre>\n<p>To confirm the creation of the AKS cluster in our <a href=\"https://portal.azure.com\">Azure cloud interface</a>, browse to the Kubernetes Services blade in the interface and click into our cluster for more details:</p><img src=\"https://www.datocms-assets.com/2885/1638821473-aks-in-action-aks.png\" /><p>That’s it. Now, if you’d like to keep this AKS cluster up and running, you can simply leave it be. If you’d like to not be billed for this, you can tear down the cluster by running <code>terraform destroy</code> and answering Yes to the prompt when asked, or via the Terraform Cloud UI according to the <a href=\"https://www.terraform.io/docs/cloud/run/ui.html\">UI- and VCS-driven Run Workflow instructions</a>.</p>\n<h2><a href=\"#conclusion\">»</a><a></a>Conclusion</h2>\n<p>The <a href=\"https://registry.terraform.io/\">Terraform Registry</a> has more than 7,000 modules and 1,600 providers to choose from. And now it's all available within Terraform Cloud.</p>\n<p>We've shown you just one option among many for building infrastructure. Check out our <a href=\"https://learn.hashicorp.com/\">HashiCorp Learn Guides</a> to see how to set up essential <a href=\"https://learn.hashicorp.com/collections/terraform/aws-get-started\">AWS</a>, <a href=\"https://learn.hashicorp.com/collections/terraform/docker-get-started\">Docker</a>, <a href=\"https://learn.hashicorp.com/collections/terraform/gcp-get-started\">GCP</a>, or <a href=\"https://learn.hashicorp.com/collections/terraform/oci-get-started\">OCI</a> infrastructure, and get in-depth information on many other Terraform topics. Show us what you've built by tweeting @hashicorp.</p>\n<p>Check out these links for more information on:</p>\n<ul>\n<li><a href=\"https://www.terraform.io/docs/cloud/index.html\">HashiCorp Terraform Cloud</a></li>\n<li><a href=\"https://www.terraform.io/docs/cloud/registry/index.html\">The Private Registry</a></li>\n<li><a href=\"https://learn.hashicorp.com/tutorials/terraform/module-private-registry-add?in=terraform/modules\">Adding Public Modules and Providers to Your Private Registry</a></li>\n<li><a href=\"https://learn.hashicorp.com/tutorials/terraform/module-private-registry?in=terraform/modules\">Sharing Modules in the Private Registry</a></li>\n</ul>","author":"Kerim Satirli","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"ace09dd4b59cd0e7e124b28d8670a455f44c417d64b3bc5747ca588ea0c0c0c8","category":"Tech"}