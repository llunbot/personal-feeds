{"title":"Fallacies of Distributed Computing เรื่องที่ 1 The network is reliable","link":"https://www.somkiat.cc/fallacies-of-distributed-computing-the-network-is-reliable/","date":1736092479000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2025/01/network-01-150x150.jpg\" alt=\"\" loading=\"lazy\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2025/01/network-01-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2025/01/network-01-75x75.jpg 75w\" /></p>\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/01/network-01.jpg\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/01/network-01-1024x642.jpg\" alt=\"\" width=\"618\" height=\"387\" /></a></figure>\n\n\n\n<p>จากเรื่อง <strong><a href=\"https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing\" target=\"_blank\">Fallacies of distributed computing</a></strong> นั้น<br />ซึ่งอธิบาย 8(7+1) ข้อ ของเรื่องเข้าใจผิดเกี่ยวกับระบบ Distributed<br />มาดูในข้อแรกกันคือ <a href=\"https://architecturenotes.co/p/fallacies-of-distributed-systems\" target=\"_blank\">The network is reliable</a> (ความน่าเชื่อถือ)<br />ว่าเป็นอย่างไร มีปัญหาอะไร และ วิธีการแก้ไขทำอย่างไรบ้าง ?<br />มาเริ่มกันเลย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>ระบบ network นั้นเกิดมาเพื่อพร้อมพังได้เสมอ</strong><br />ยิ่งระบบงานมีการแบ่งแยกการทำงานต่าง ๆ ออกมา<br />แล้วต้องติดต่อสื่อสารกัน เช่น</p>\n\n\n\n<ul>\n<li>Frontend</li>\n\n\n\n<li>Backend</li>\n\n\n\n<li>Service ต่าง ๆ</li>\n\n\n\n<li>Database</li>\n\n\n\n<li>Caching</li>\n</ul>\n\n\n\n<p><strong>ปัญหาที่สามารถเกิดขึ้นได้ประกอบไปด้วย</strong></p>\n\n\n\n<ul>\n<li>ปัญหาทางด้าน hardware</li>\n\n\n\n<li>ปัญหาทางด้าน software</li>\n\n\n\n<li>ปัญหาทางด้าน security</li>\n\n\n\n<li>ปัญหาของ environment ต่าง ๆ</li>\n\n\n\n<li>ปัญหาจากการโดนโจมตีระบบ</li>\n</ul>\n\n\n\n<figure><a href=\"https://www.somkiat.cc/wp-content/uploads/2025/01/network-02.png\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2025/01/network-02-1024x287.png\" alt=\"\" width=\"488\" height=\"137\" /></a></figure>\n\n\n\n<p>ดังนั้นในการออกแและพัฒนาระบบ รวมทั้งการทดสอบ<br />จำเป็นต้องวางแผนเพื่อรองรับมือปัญหาที่อาจจะเกิดขึ้น<br />เพื่อทำให้ระบบทำงานได้อย่างถูกต้อง และ มีความน่าเชื่อถือที่สูงขึ้น</p>\n\n\n\n<p><strong>ตัวอย่างของวิธีการแก้ไขหรือรับมือ เช่น</strong></p>\n\n\n\n<ul>\n<li>Timeout</li>\n\n\n\n<li>Retry พร้อมกับ indempotent</li>\n\n\n\n<li>Circuite breaker</li>\n\n\n\n<li>Rate limit</li>\n\n\n\n<li>ถ้าเป็นระบบ queue ก็ต้องจัดการเรื่อง acknowledge ระหว่าง producer และ consumer ให้ดี หรือต้องจัดการพวก Dead letter queue เพื่อการันตีว่า message ต่าง ๆ สามารถส่งและรับได้อย่างถูกต้อง</li>\n</ul>\n\n\n\n<p>ลองดูว่าระบบงานที่เราออกแบบได้วางแผนเรื่องเหล่านี้ไว้หรือไม่ ?</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"166431db7272ab632b7cff1b79ec045c9753d71b4c0f18d48e2d1b614dbdfa42","category":"Thai"}