{"title":"WebKit Features in Safari 18.0","link":"https://webkit.org/blog/15865/webkit-features-in-safari-18-0/","date":1726473634000,"content":"<p>Safari 18.0 is here. Along with iOS 18, iPadOS 18, macOS Sequoia and visionOS 2, today is the day another 53 web platform features, as well as 25 deprecations and 209 resolved issues land in WebKit, the rendering engine driving Safari.</p>\n<h2><a name=\"new-in-safari-18\"></a>New in Safari 18</h2>\n<h3><a name=\"distraction-control\"></a>Distraction Control</h3>\n\n<p></p>\n<p>Distraction Control lets you hide distracting items as you browse the web, such as sign-in banners, cookie preference popups, newsletter signup overlays, and more, in Safari for iOS 18, iPadOS 18 and macOS Sequoia.</p>\n<p>Activate Distraction Control by tapping the Page Menu <img src=\"https://webkit.org/wp-content/uploads/page-menu.png\" width=\"52\" height=\"61\" />, and choosing “Hide Distracting Items”. Then tap the element you want to disappear, and watch it fade away. You can easily un-hide items at any time by returning to the Page Menu, and tapping “Show Hidden Items”.</p>\n<h3><a name=\"viewer\"></a>Viewer</h3>\n<p>Whenever you are on a web page with a prominent video element, you can click on “Video Viewer” in the Page Menu <img src=\"https://webkit.org/wp-content/uploads/page-menu.png\" width=\"52\" height=\"61\" />. The video will enlarge to fill the whole window. If you switch tabs, close the window, or occlude the web page with another window, the video enters picture-in-picture.</p>\n<p>We always recommend using semantic HTML when creating a website, including <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a>,<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main\"><code>&lt;main&gt;</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article\"><code>&lt;article&gt;</code></a> and other elements that describe content. Doing so helps ensure both Safari Reader and Safari Viewer work best for the users of your website.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/viewer-light.jpg\" alt=\"Safari windows on a Mac, with a video playing, big, in one window. The website is faintly visible behind the large video.\" width=\"1200\" height=\"674\" srcset=\"https://webkit.org/wp-content/uploads/viewer-light.jpg 1200w, https://webkit.org/wp-content/uploads/viewer-light-300x169.jpg 300w, https://webkit.org/wp-content/uploads/viewer-light-1024x575.jpg 1024w, https://webkit.org/wp-content/uploads/viewer-light-768x431.jpg 768w\" /></figure>\n<h3><a name=\"iphone-mirroring-and-remote-inspection\"></a>iPhone Mirroring and remote inspection</h3>\n<p>With <a href=\"https://www.apple.com/macos/macos-sequoia/#:~:text=iPhone%20Mirroring\">iPhone Mirroring</a> on macOS Sequoia, you can use your iPhone from your Mac. Combine it with remote inspection from Safari, and now it’s easier than ever to test and debug websites on iOS using <a href=\"https://developer.apple.com/documentation/safari-developer-tools/web-inspector\">Web Inspector</a>.</p>\n<p>Get set up for remote inspection by first ensuring you have Safari’s developer tools <a href=\"https://developer.apple.com/documentation/safari-developer-tools/enabling-developer-features\">enabled</a> on your Mac (if you can see the Develop menu in Safari, you’ve already done this step). Next, enable Web Inspector on your iPhone at Settings &gt; Apps &gt; Safari &gt; Advanced &gt; Web Inspector. Then, you’ll need to connect the device to your Mac using a cable to grant permission. Once plugged in, your device will appear in the <a href=\"https://developer.apple.com/documentation/safari-developer-tools/develop-menu\">Develop menu</a> in Safari. Finally, to enable wireless debugging, go to Safari on macOS &gt; Develop &gt; [your device] &gt; Connect via Network.</p>\n<p>Now you can use Web Inspector to wirelessly debug websites running on iPhone anytime. And with iPhone Mirroring, you don’t even have to pull out your phone. Everything is on your Mac’s screen.</p>\n<p>Learn more about remote inspection by reading <a href=\"https://developer.apple.com/documentation/safari-developer-tools/inspecting-ios\">Inspecting iOS and iPadOS</a>, or by watching <a href=\"https://youtu.be/14b6kdneO8Q?si=zzrY_pHdnttiSJF0\">Rediscover Safari developer features</a> from WWDC. Learn more about iPhone Mirroring<sup><a href=\"#footnote\">1</a></sup> on <a href=\"https://www.apple.com/macos/macos-sequoia/#:~:text=iPhone%20Mirroring\">apple.com</a>.</p>\n<h2><a name=\"web-apps-for-mac\"></a>Web apps for Mac</h2>\n<p><a href=\"https://webkit.org/blog/14205/news-from-wwdc23-webkit-features-in-safari-17-beta/#web-apps\">Last year</a>, we added support for web apps in macOS Sonoma. You can add any website to your dock — whether or not it was built with a Manifest file, Service Worker, or other technology to customize the web app experience. Go to the site in Safari, then File &gt; Add to Dock… where you can customize the icon, change the name, and even adjust the URL. Then, just click on the web app icon in your Dock, and the website will open as a stand-alone app.</p>\n<p>This year brings two improvements to web apps on Mac.</p>\n<h3><a name=\"opening-links\"></a>Opening links</h3>\n<p>macOS Sequoia adds support for opening links directly in web apps. Now, when a user clicks a link, if it matches the <code>scope</code> of a web app, that link will open in the web app instead of their default web browser. For example, imagine you have added MDN Web Docs to your Dock. Then a colleague sends you a link to an MDN page in Messages, Mail, Slack, Discord, IRC, or any non-browser application on your Mac. Now when you click on that link, it will open in the MDN Web Docs web app instead of your default browser.</p>\n<p>Clicking a link within a browser will maintain the current behavior. This feature only affects links opened elsewhere. (When a user is in Safari, clicking on a link that matches the <code>scope</code> of a web app that is added to Dock, they will see an “Open in web app” banner, unless they have previously dismissed the banner.)</p>\n<p>By default, this behavior applies when the link matches the host of the web page used to create the web app. As a developer, you can refine this experience by defining the range of URLs that should open in the web app with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Manifest/scope\"><code>scope</code></a>  member in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Manifest\">web app manifest</a>.</p>\n<h3><a name=\"extension-support\"></a>Extension support</h3>\n<p>Now users can personalize web apps on Mac with Safari Web Extensions and Content Blockers. Navigate to the web app’s Settings menu to access all the installed Content Blockers and Web Extensions. Any enabled in Safari will be on by default in the web app. Each web app is uniquely customizable, just like Safari profiles.</p>\n<h2><a name=\"css\"></a>CSS</h2>\n<h3><a name=\"view-transitions\"></a>View Transitions</h3>\n<p>WebKit added support for the View Transitions API in Safari 18. It provides an optimized browser API to animate elements from one state to another. Safari supports the <a href=\"https://www.w3.org/TR/css-view-transitions-1/\">CSS View Transitions Module Level 1</a> specification that adds new CSS properties and pseudo-elements for defining transition animations, along with a new browser API to start transition animations and react to different transition states. It works by capturing the current (old) state of the page and applying an animated transition to the new state. By default, the browser applies a cross-fade between the states.</p>\n<p>Call the <code>document.startViewTransition()</code> method to initiate the capture. You can pass a callback function as the first argument to make DOM state changes between the old and new captures. The method returns a <a href=\"https://developer.mozilla.org/docs/Web/API/ViewTransition\">ViewTransition</a> object which contains promises that can be used to track when the view transition starts or ends.</p>\n<p>Once the states are captured, a pseudo-element tree is built which can be targeted with CSS, allowing you to modify the CSS animations used for the transitions. The animations out of the old page state and into the new page state can be modified via the <code>::view-transition-new(*)</code> and <code>::view-transition-old(*)</code> selectors. You can also ask the browser to independently track state changes for a specific element by naming it with the CSS <code>view-transition-name</code> property. You can then use the pseudo-elements to customize animations for it.</p>\n<pre><code><span>.page-view</span> {\n    <span>view-transition-name</span>: <span>page-view</span>;\n}\n::<span>view-transition-old</span>(<span>page-view</span>) {\n    <span>animation</span>: <span>500ms</span> <span>ease-in-out</span> <span>transition-out-animation</span>;\n}\n::<span>view-transition-new</span>(<span>page-view</span>) {\n    <span>animation</span>: <span>500ms</span> <span>ease-in-out</span> <span>transition-in-animation</span>;\n}\n</code></pre>\n<p>The <code>:active-view-transition</code> pseudo-class becomes active on the root element when a view transition is running.</p>\n<p>The example below demonstrates state management with tabbed navigation. Each tab view has a custom transition animation out and a subtly different animation in, while the tabs themselves rely on the default page transition.</p>\n<figure>\n<p></p><figcaption>See View Transitions in action in <a href=\"https://codepen.io/jensimmons/pen/rNgzxgP/1c18fa8d0f8d5eecb0a27a2ce35d271c\">this demo</a>.</figcaption></figure>\n<p></p>\n<h3><a name=\"style-queries\"></a>Style Queries</h3>\n<p>WebKit for Safari 18.0 adds support for Style Queries when testing CSS Custom Properties. Similar to how developers can use Sass mixins, Style Queries can be used to define a set of reusable styles that get applied as a group.</p>\n<p>Here, if the <code>--background</code> custom property is set to black, then certain styles will be applied — in this case to make the headline and paragraph text color white.</p>\n<pre><code><span>@container</span> <span>style</span>(<span>--background</span>: <span>black</span>) {\n  <span>h2</span>, <span>h3</span>, <span>p</span> {\n    <span>color</span>: <span>white</span>;\n  }\n}\n</code></pre>\n<p>Don’t forget to pay attention the HTML structure. By default, Style Queries reference the styles on the direct parent element. You can create a different reference through the use of Container Query names.</p>\n<h3><a name=\"currentcolor-and-system-color-keywords-in-relative-color-syntax\"></a>currentcolor and system color keywords in Relative Color Syntax</h3>\n<p>Support for Relative Color Syntax shipped in <a href=\"https://webkit.org/blog/13966/webkit-features-in-safari-16-4/\">Safari 16.4</a>. It lets you define colors in a more dynamic fashion, creating a new color from an existing color. The value <code>lch(from var(--color) calc(L / 2) C H)</code> for instance uses the <code>lch</code> color space to take the variable <code>--color</code> and calculate a new color that’s half its lightness, <code>calc(L / 2)</code>.</p>\n<p>Now in Safari 18.0, the first browser to ship support, you can reference the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentcolor_keyword\">currentcolor</a> or a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/system-color\">system color keyword</a> as you define the new color. For example, this code will set the background color to be the same color as the text color, only 4 times lighter, as calculated in the <code>oklch</code> color space.</p>\n<pre><code><span>section</span> { <span>background</span>: <span>oklch</span>(<span>from</span> <span>currentcolor</span> <span>calc</span>(<span>L</span> * <span>4</span>) <span>C</span> <span>H</span>); }\n</code></pre>\n<figure>\n<p></p><figcaption>See how `currentcolor` works with Relative Color Syntax in <a href=\"https://codepen.io/jensimmons/pen/yLWgrXr?editors=1100\">this demo</a>.</figcaption></figure>\n<p>Being able to reference <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/system-color\">system color keywords</a> opens up another world of options. System colors are like variables that represent the default colors established by the OS, browser, or user — defaults that change depending on whether the system is set to light mode, dark mode, high contrast mode, etc. For example, <code>canvas</code> represents the current default background color of the HTML page, while <code>fieldtext</code> matches the color of text inside form fields. Find the full list of system colors in <a href=\"https://drafts.csswg.org/css-color/#css-system-colors\">CSS Color level 4</a>.</p>\n<p>Relative Color Syntax lets you define dynamic connections between colors in your CSS, lessening the need to control color through variables in a tightly-regimented design system. Learn more about Relative Color Syntax by watching <a href=\"https://www.youtube.com/watch?v=uadAfE6cAoM&amp;t=623s\">this portion of <em>What’s new in CSS</em></a> from WWDC23.</p>\n<h3><a name=\"translucent-accent-colors\"></a>Translucent accent colors</h3>\n<p>Partially transparent colors in <code>accent-color</code> are now blended on top of the Canvas system color to match the latest updates to the web standard. This means that any of the many ways to define colors using an alpha channel will now work as expected when used to define an accent color for a form control.</p>\n<pre><code><span>.form-control</span> {\n    <span>accent-color</span>: <span>rgba</span>(<span>0</span>,<span>0</span>,<span>0</span>,<span>0.6</span>);\n}\n</code></pre>\n<h3><a name=\"animating-display\"></a>Animating display</h3>\n<p>WebKit for Safari 18.0 adds support for transition animation of the <code>display</code> property.</p>\n<p>Many developers are excited to use <code>@starting-style</code> along with <code>transition-behavior</code> and <code>display: none</code> interpolation. WebKit for <a href=\"https://webkit.org/blog/15063/webkit-features-in-safari-17-4/\">Safari 17.4</a> added general support for <code>transition-behavior</code>, including <code>transition-behavior: allow-discrete</code>. WebKit for <a href=\"https://webkit.org/blog/15383/webkit-features-in-safari-17-5/\">Safari 17.5</a> added support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@starting-style\"><code>@starting-style</code></a>, letting you define starting values for transitioning an element as it’s created (or re-created). Now in WebKit for Safari 18.0, you can use these features together to transition the <code>display</code> property.</p>\n<h3><a name=\"backdrop-filter\"></a>Backdrop Filter</h3>\n<p>Originally shipped in Safari 9.0, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter\">backdrop filter</a> provides a way to apply graphics effects to the content behind a particular element. You can apply <code>backdrop-filter</code> to a headline, for example, and everything behind the headline will be blurred, or have decreased saturation, or increased contrast. Any of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function\">filter functions</a> from SVG can be used —  <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/blur\"><code>blur()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/brightness\"><code>brightness()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/contrast\"><code>contrast()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/drop-shadow\"><code>drop-shadow()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/grayscale\"><code>grayscale()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/hue-rotate\"><code>hue-rotate()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/invert\"><code>invert()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/opacity\"><code>opacity()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/saturate\"><code>saturate()</code></a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/sepia\"><code>sepia()</code></a>.</p>\n<p>For many years, backdrop filter only worked in Safari. It was available when you prefixed the property with <code>-webkit-backdrop-filter</code>. Now, starting in Safari 18.0, you don’t need the prefix. We also improved our implementation, fixing bugs and boosting interoperability.</p>\n<figure>\n<p></p><figcaption>See what’s possible with backdrop filter in <a href=\"https://codepen.io/jensimmons/pen/OJYJzNz/ba0c7add12490a3ffad879a0eb25f9d3?editors=1100\">this demo</a>. Use the dropdown to switch filters.</figcaption></figure>\n<p>This demo shows eight different filters and what you might do with each one alone. You can, of course, combine filters to create even more interesting results. With backdrop filter <a href=\"https://caniuse.com/css-backdrop-filter\">supported</a> in Safari since 2015, Edge since 2018, Chrome since 2019, Samsung Internet since 2020, and Firefox since 2022, this is a great time to consider the kind of graphic design possibilities it enables.</p>\n<h3><a name=\"content-visibility\"></a>Content visibility</h3>\n<p>WebKit for Safari 18.0 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility\"><code>content-visibility</code></a>. This property controls whether or not an element renders its contents in a fashion that’s useful for making performance optimizations. It lets you communicate to the browser that certain portions of the page will likely be initially offscreen, and suggest they be omitted from layout and rendering. This can make the page load faster.</p>\n<h3><a name=\"and-more\"></a>And more</h3>\n<p>WebKit for Safari 18.0 adds parsing support for the <code>custom</code> value for the<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-contrast\"><code>prefers-contrast</code></a> media query. (It does not return “true” on Apple platforms, since there is no forced-colors mode in iOS, iPadOS, macOS or visionOS.)</p>\n<h2><a name=\"spatial-web\"></a>Spatial Web</h2>\n<h3><a name=\"webxr\"></a>WebXR</h3>\n<p>Safari 18.0 for visionOS 2 adds support for <code>immersive-vr</code> sessions with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Fundamentals\">WebXR</a>. Now you can create fully immersive experiences for people using Apple Vision Pro and deliver them through the web. WebXR scenes are displayed using hardware-accelerated graphics driven by <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API\">WebGL</a>.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/chess-garden.jpg\" alt=\"A beautiful garden rendered in created graphics. There's a tree with bright red leaves. A blue sky full of puffy white clouds. Bright green grass, with a path leading by plants and garden sculpture. It's a world created in WebXR.\" width=\"1920\" height=\"1078\" srcset=\"https://webkit.org/wp-content/uploads/chess-garden.jpg 1920w, https://webkit.org/wp-content/uploads/chess-garden-300x168.jpg 300w, https://webkit.org/wp-content/uploads/chess-garden-1024x575.jpg 1024w, https://webkit.org/wp-content/uploads/chess-garden-768x431.jpg 768w, https://webkit.org/wp-content/uploads/chess-garden-1536x862.jpg 1536w\" /><figcaption>Try out the <a href=\"https://webkit.org/demos/webxr-chess/\">Chess Garden demo</a> to see WebXR in action.</figcaption></figure>\n<p>Safari for visionOS 2 supports the new WebXR <a href=\"https://webkit.org/blog/15162/introducing-natural-input-for-webxr-in-apple-vision-pro/\"><code>transient-pointer</code></a> input mode. It lets you make the most of natural input on visionOS, and allow your users to interact with a look and a pinch.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/playing-chess.jpg\" alt=\"We are in a rendered 3d environment, in a garden. We look at a chess board, with a real human hand lifting a rendered chess piece to make the next move in the game. A floating panel has two buttons reading &quot;Leave garden&quot; and &quot;Reset game&quot;.\" width=\"1920\" height=\"1079\" srcset=\"https://webkit.org/wp-content/uploads/playing-chess.jpg 1920w, https://webkit.org/wp-content/uploads/playing-chess-300x169.jpg 300w, https://webkit.org/wp-content/uploads/playing-chess-1024x575.jpg 1024w, https://webkit.org/wp-content/uploads/playing-chess-768x432.jpg 768w, https://webkit.org/wp-content/uploads/playing-chess-1536x863.jpg 1536w\" /><figcaption>Use <code>transient-pointer</code> in your WebXR experience to support interactions like this, where players use their hands to pinch and drag as they move chess pieces around.</figcaption></figure>\n<p>If you want to animate a 3D model of the user’s hands, Safari for visionOS 2 also includes support for WebXR <a href=\"https://immersive-web.github.io/webxr-hand-input/\">hand tracking</a>. To ensure privacy, permission to allow hand tracking will be requested from users at the start of their WebXR session.</p>\n<p>Learn all about WebXR on visionOS 2 by watching <a href=\"https://www.youtube.com/watch?v=C3XDHjam-eI\"><em>Build immersive web experiences with WebXR</em></a> from WWDC. Learn more about <a href=\"https://webkit.org/blog/15162/introducing-natural-input-for-webxr-in-apple-vision-pro/\"><code>transient-pointer</code></a> input mode by reading <em><a href=\"https://webkit.org/blog/15162/introducing-natural-input-for-webxr-in-apple-vision-pro/\">Introducing natural input for WebXR in Apple Vision Pro</a></em>. And learn all about how to use Safari’s developer tools on Mac to inspect and debug in Apple Vision Pro by reading <em><a href=\"https://webkit.org/blog/15421/try-out-your-website-in-the-spatial-web/\">Try out your website in the spatial web</a></em>.</p>\n<h3><a name=\"spatial-photos-and-panoramas\"></a>Spatial photos and panoramas</h3>\n<p>One of the amazing experiences you can have on Apple Vision Pro is looking at spatial photos and panoramas. The web is a great place to share these photos with others.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/spatial-photo.png\" alt=\"A family blows out candles on a birthday cake in a photo — that's floating in a frame in midair, in a living room. This is a still from the WWDC23 Keynote that introduced Apple Vision Pro. It's an example of how spatial photos work.\" width=\"1178\" height=\"666\" srcset=\"https://webkit.org/wp-content/uploads/spatial-photo.png 1178w, https://webkit.org/wp-content/uploads/spatial-photo-300x170.png 300w, https://webkit.org/wp-content/uploads/spatial-photo-1024x579.png 1024w, https://webkit.org/wp-content/uploads/spatial-photo-768x434.png 768w\" /></figure>\n<p>When you open the Photos app in visionOS, you see your library of photos. When you tap an image, it appears alone in a floating frame in front of you. Spatial photos appear at just the right height and viewing angle to make it feel like you’ve gone back to a moment in time. A second tap of the UI breaks a spatial photo out of its frame, becoming even more immersive. Similarly, a panorama floats in a frame on first tap. Then on second tap of the UI, it expands to wrap all around you, creating a fully immersive experience.</p>\n<p>Now in Safari 18.0 for visionOS 2, you can use the JavaScript Fullscreen API to create a similar experience on the web. You can embed the photo in a web page, and provide the ability to tap. The photo will pop into a floating frame as the Safari window disappears. Then when the user taps on the spatial photo or panorama UI that visionOS provides, the photo will further expand to create a more immersive experience. When they exit the image, the Safari window will return.</p>\n<p>Let’s walk through how to support experiencing a spatial photo or panorama on the web using Fullscreen API. First, include the image on your web page using any of the techniques used for years. Here, we can embed a flattened panoramic photo into the web page using simple HTML.</p>\n<pre><code><span>&lt;<span>img</span> <span>src</span>=<span>\"panorama.jpeg\"</span> <span>class</span>=<span>\"go-fullscreen\"</span> <span>alt</span>=<span>\"[description]\"</span>&gt;</span>\n</code></pre>\n<p>Then using JavaScript, we’ll trigger <code>.requestFullscreen()</code> on tap. Perhaps like this.</p>\n<pre><code><span>document</span>.<span>querySelectorAll</span>(<span>'.go-fullscreen'</span>).<span>forEach</span>(<span>element</span> <span>=</span><span>&gt;</span> {\n    <span>element</span>.<span>addEventListener</span>(<span>'click'</span>, <span>async</span> () <span>=</span><span>&gt;</span> {\n        <span>await</span> <span>element</span>.<span>requestFullscreen</span>();\n    });\n});\n</code></pre>\n<p>You could, of course, create your own UI for the user to tap, rather than making the entire photo the tap target.</p>\n<p>Spatial images work just the same, although it’s likely we want to provide fallbacks for browsers that do not <a href=\"https://caniuse.com/heif\">support HEIC files</a>. We can do so with the <code>picture</code> element.</p>\n<pre><code><span>&lt;<span>picture</span>&gt;</span>\n    <span>&lt;<span>source</span> <span>srcset</span>=<span>\"spatial.heic\"</span> <span>type</span>=<span>\"image/heic\"</span>&gt;</span>\n    <span>&lt;<span>source</span> <span>srcset</span>=<span>\"fallback.avif\"</span> <span>type</span>=<span>\"image/avif\"</span>&gt;</span>\n    <span>&lt;<span>img</span> <span>src</span>=<span>\"fallback.jpg\"</span> <span>class</span>=<span>\"go-fullscreen\"</span> <span>alt</span>=<span>\"write descriptive text here\"</span> &gt;</span>\n<span>&lt;/<span>picture</span>&gt;</span>\n</code></pre>\n<p>Spatial images are stereoscopic, with both a left and right channel. In Safari, when the image is embedded in the web page, the browser will show the left channel. And there’s no need to worry about providing a fallback of any sort for Safari on macOS, iOS, or iPadOS — the stereoscopic HEIC file works great.</p>\n<p>This technique will also cause images to go fullscreen in any browser that supports Fullscreen API. Learn more about adding panorama and spatial photos to your websites by watching <a href=\"https://www.youtube.com/watch?v=5tjPBF2qoY4\"><em>Optimize for the spatial web</em></a> from WWDC.</p>\n<h3><a name=\"shaping-interaction-regions-on-visionos\"></a>Shaping interaction regions on visionOS</h3>\n<p>As a web developer, you’re very familiar with how link styling works on the web. For decades you’ve been able to use CSS to style <code>text-decoration</code>, <code>color</code> and more for <code>:link</code>, <code>:hover</code>, <code>:active</code>, and <code>:visited</code> states. You’ve also been able to adjust the size of the invisible tap target through use of padding.</p>\n<p>Apple Vision Pro adds a new dimension to how links work — tap targets are <em>visible</em> on visionOS. Anytime a user looks at an interactive element, it’s highlighted to let them know that it can be tapped. And you as a designer or developer can intentionally design how an interaction region looks. You may want to add padding, for instance, or even a rounded corner to the otherwise invisible box.</p>\n<p>Now in Safari in visionOS 2 , when you use CSS <code>clip-path</code>  to change the shape of tappable area of a link, the visible interaction region will change shape as well. Interactive UI elements built with SVG and <code>cursor: pointer</code> will also be highlighted with the proper shape. Learn more by watching <a href=\"https://www.youtube.com/watch?v=5tjPBF2qoY4\"><em>Optimize for the spatial web</em></a> from WWDC.</p>\n<h3><a name=\"video-on-visionos\"></a>Video on visionOS</h3>\n<p>Safari for visionOS 2 adds support for docking fullscreen videos into the current <a href=\"https://support.apple.com/guide/apple-vision-pro/use-environments-tanb58c3cfaf/visionos\">Environment</a>. Anytime a user is watching a video fullscreen, they can tap the mountain symbol to enter an immersive experience. Turning the Digital Crown adjusts the immersion.</p>\n<h2><a name=\"html\"></a>HTML</h2>\n<h3><a name=\"writing-suggestions\"></a>Writing Suggestions</h3>\n<p>At last year’s WWDC, Apple <a href=\"https://developer.apple.com/videos/play/wwdc2023/101/?time=1703\">unveiled</a> inline predictive text on iOS, iPadOS, macOS and more. It helps users input text faster by predicting what they might be typing and finishing the word, phrase or even a whole sentence when the user taps the space bar. Now, WebKit for Safari 18.0 on iOS, iPadOS, visionOS, macOS Sequoia and macOS Sonoma brings inline predictive text to the web.</p>\n<p>While inline predictive text makes for a fantastic, personalized user experience, there might be specific situations on the web where it’s better to not have predictions. WebKit for Safari 18.0 on iOS, iPadOS, visionOS, macOS Sequoia and macOS Sonoma gives web developers the opportunity to disable inline predictions through the <a href=\"https://html.spec.whatwg.org/#writing-suggestions\"><code>writingsuggestions</code></a> attribute. By default, writing suggestions is set to true. You can turn off the capability by including the <code>writingsuggestions=\"false\"</code> attribute on any type of text input field.</p>\n<figure>\n<p></p><figcaption>Try out the difference between having writing suggestions or not in <a href=\"https://codepen.io/jensimmons/pen/gOJLQzW??editors=1100\">this demo</a>. Be sure to use a browser and operating system that provide suggestions of what to write, and have support for <code>writingsuggestions</code>.</figcaption></figure>\n<h3><a name=\"switch\"></a>Switch</h3>\n<p>WebKit for Safari on iOS 18 adds haptic feedback for <code>&lt;input type=checkbox switch&gt;</code>. This means, now when a user taps a switch control on iPhone, a single tap is felt — just like how toggling a switch feels in Settings app on iOS. Try <a href=\"https://codepen.io/jensimmons/pen/GReLKWg\">this demo</a> to see what it’s like.</p>\n<h3><a name=\"date-and-time-inputs\"></a>Date and time inputs</h3>\n<p>WebKit for Safari 18.0 on macOS improves accessibility support for date and time input field types. Now <code>&lt;input type=\"date\"&gt;</code>, <code>&lt;input type=\"datetime-local\"&gt;</code>, and <code>&lt;input type=\"time\"&gt;</code> elements work properly with VoiceOver.</p>\n<h3><a name=\"aria\"></a>ARIA</h3>\n<p>Usually elements have the labels they need, but sometimes there is no text label for a particular button or UI. In this situation, ARIA can be used to provide an accessible label. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label\"><code>aria-label</code></a> attribute provides names of labels while <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-roledescription\"><code>aria-roledescription</code></a> provides the description for the role of an element.</p>\n<p>On very rare occasions, you may need to override <code>aria-label</code> or <code>aria-roledescription</code> to provide different names or descriptions specifically for braille. The <code>aria-braillelabel</code> and <code>aria-brailleroledescription</code> attributes provide such an ability. They exist to solve very specific needs, including educational contexts where the site needs to render the specific braille table dot pattern. If you do use braille-related ARIA attributes, be sure to test them using a braille reader. If in doubt, relying on the accessible name from content or <code>aria-label</code> / <code>aria-roledescription</code> is <a href=\"https://w3c.github.io/aria/#aria-braillelabel\">almost always the better user experience</a>. WebKit has supported these ARIA attributes for years.</p>\n<p>Now, WebKit for Safari 18.0 adds support for the <code>ariaBrailleLabel</code> and <code>ariaBrailleRoleDescription</code> element reflection properties. These make it possible to get and set the <code>aria-braillelabel</code> and <code>aria-brailleroledescription</code> ARIA attributes on DOM elements directly via JavaScript APIs, rather than by using <code>setAttribute</code> and <code>getAttribute</code>.</p>\n<h2><a name=\"javascript\"></a>JavaScript</h2>\n<p>WebKit for Safari 18.0 adds support for <a href=\"https://www.unicode.org/versions/Unicode15.1.0/\">Unicode 15.1.0</a> characters in RegExp. Unicode 15.1 added 627 characters, bringing the total of characters to 149,813. Now, these new characters can be used in regular expressions.</p>\n<p>WebKit for Safari 18.0 also adds support for the  <code>v</code> flag with <code>RegExp.prototype[Symbol.matchAll]</code>. providing more powerful ways to match Unicode characters, as specified in the ECMAScript 2024 standard.</p>\n<p>For example, you can now specify to only match on Latin characters, while avoiding matching on Cyrillic script characters.</p>\n<pre><code><span>const</span> <span>regex</span> <span>=</span> <span>/</span>\\<span>p</span>{<span>sc</span><span>=</span><span>Latin</span>}<span>/</span><span>v</span>;\n<span>console</span>.<span>log</span>(<span>regex</span>.<span>test</span>(<span>'A'</span>)); <span>// true, 'A' is a Latin script character\n</span><span>console</span>.<span>log</span>(<span>regex</span>.<span>test</span>(<span>'А'</span>)); <span>// false, 'А' is a Cyrillic script character\n</span></code></pre>\n<p>Or split a string matching on Emojis.</p>\n<pre><code><span>\"a 🥰 b 🥰\"</span>.<span>split</span>(<span>/</span>[\\<span>p</span>{<span>Emoji</span>}<span>-</span><span>-</span>\\<span>p</span>{<span>ASCII</span>}]<span>/</span><span>v</span>)<span>// [\"a \", \" b \", \"\"]\n</span></code></pre>\n<h2><a name=\"web-api\"></a>Web API</h2>\n<p>WebKit for Safari 18.0 adds support for <code>URL.parse()</code>, a way to parse URLs which returns null rather than an exception when parsing fails.</p>\n<pre><code><span>// Before\n</span><span>let</span> <span>url</span> <span>=</span> <span>null</span>;\n<span>try</span> {\n  <span>url</span> <span>=</span> <span>new</span> <span>URL</span>(<span>input</span>, <span>base</span>);\n} <span>catch</span>(<span>e</span>) { }\n\n<span>// Now\n</span><span>const</span> <span>url</span> <span>=</span> <span>URL</span>.<span>parse</span>(<span>input</span>, <span>base</span>);\n</code></pre>\n<p>WebKit for Safari 18.0 expands Declarative Shadow tree support by adding the <code>shadowRootDelegatesFocus</code> and <code>shadowRootClonable</code> IDL attributes to the <code>&lt;template&gt;</code> element. It also adds the <code>shadowRootSerializable</code> attribute and <code>shadowRootSerializable</code> IDL attribute to the <code>&lt;template&gt;</code> element, enabling those using Declarative Shadow roots to opt into making them serializable. Serializing can be done through the new <code>getHTML()</code> method that has been added at the same time.</p>\n<p>WebKit for Safari 18.0 adds support for <code>PopStateEvent</code>’s <code>hasUAVisualTransition</code>, indicating whether the user agent has a visual transition in place for the fragment navigation.</p>\n<p>WebKit for Safari 18.0 adds support for subresource integrity in imported module scripts, which gives cryptographic assurances about the integrity of contents of externally-hosted module scripts.</p>\n<p>WebKit for Safari 18.0 adds support for the <code>bytes()</code> method to the <code>Request,</code> <code>Response</code>, <code>Blob</code>, and <code>PushMessageData</code> objects. This replaces the need for web developers to call <code>arrayBuffer()</code>, which can be difficult to use, and wraps the result in a <code>Uint8Array</code> . Calling <code>bytes()</code> is now the recommended way going forward when you need to access the underlying bytes of the data these objects represent.</p>\n<p>WebKit for Safari 18.0 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\">feature detecting</a> text fragments by exposing <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/fragmentDirective\"><code>document.fragmentDirective</code></a>. Note that the returned object (a <code>FragmentDirective</code>) doesn’t provide any functionality, but it’s helpful if you need to know if Fragment Directives are supported by the browser.</p>\n<h2><a name=\"canvas\"></a>Canvas</h2>\n<p>WebKit for Safari 18.0 adds support for the <code>willReadFrequently</code> context attribute for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getContextAttributes\"><code>getContext()</code></a> method. It indicates whether or not a lot of read-back operations are planned. It forces the use of a software accelerated 2D or offscreen canvas, instead of hardware accelerated. This can improve performance when calling <code>getImageData()</code> frequently.</p>\n<p>WebKit for Safari 18.0 extends 2D canvas support for <code>currentcolor</code>. It can now be used inside <code>color-mix()</code> or Relative Color Syntax. Here <code>currentcolor</code> will default to the computed <code>color</code> property value on the <code>canvas</code> element.</p>\n<h2><a name=\"managed-media-source\"></a>Managed Media Source</h2>\n<p>WebKit for Safari 18.0 adds <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\">Workers</a> support for both Managed Media Source (MMS) and Media Source Extensions (<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API\">MSE</a>). This can be especially helpful on complex websites that want to ensure continuous and smooth video playback even when other site activity (such as live commenting) causes a very busy main thread. You can see the performance difference in <a href=\"https://jyavenard.github.io/mse-in-workers-demo/mse-in-workers-demo.html\">this demo</a>.</p>\n<h2><a name=\"webrtc\"></a>WebRTC</h2>\n<p>WebKit for Safari 18.0 adds support for the WebRTC HEVC RFC 7789 RTP Payload Format. Previously, the WebRTC HEVC used generic packetization instead of RFC 7789 packetization. This payload format provides a new option for improving videoconferencing, video streaming, and delivering high-bitrate movies and TV shows.</p>\n<p>WebKit for Safari 18.0 adds support for MediaStreamTrack processing in a dedicated worker. And it adds support for missing WebRTC stats.</p>\n<h2><a name=\"https\"></a>HTTPS</h2>\n<p>WebKit for Safari 18.0 adds support for secure HTTPS for all images, video, and audio by upgrading passive subresource requests in mixed content settings. This means that if some files for a website are served using HTTPS and some are served using HTTP (known as “mixed content”), all images and media will now be auto-upgraded to HTTPS, in adherence with <a href=\"https://w3c.github.io/webappsec-mixed-content/level2.html\">Mixed Content Level 2</a>.</p>\n<h2><a name=\"webgl\"></a>WebGL</h2>\n<p>WebKit for Safari 18.0 adds support for six new WebGL extensions:</p>\n<ul>\n<li><code>EXT_texture_mirror_clamp_to_edge</code> </li>\n<li><code>WEBGL_render_shared_exponent</code> </li>\n<li><code>WEBGL_stencil_texturing</code> </li>\n<li><code>EXT_render_snorm</code> </li>\n<li><code>OES_sample_variables</code> </li>\n<li><code>OES_shader_multisample_interpolation</code></li>\n</ul>\n<h2><a name=\"web-inspector\"></a>Web Inspector</h2>\n<p>WebKit for Safari 18.0 adds support for fuzzy search code completion in the Web Inspector’s CSS source editor.</p>\n<h2><a name=\"passkeys\"></a>Passkeys</h2>\n<p>Two years ago at WWDC22, we announced support for <a href=\"https://support.apple.com/guide/iphone/use-passkeys-to-sign-in-to-apps-and-websites-iphf538ea8d0/ios\">passkeys</a> — a groundbreaking industry-standard way to login to websites and app services. Passkeys provide people with an extremely easy user experience, while delivering a profound increase in security. To learn more, watch <a href=\"https://developer.apple.com/videos/play/wwdc2022/10092/\"><em>Meet Passkeys</em></a> or read <a href=\"https://developer.apple.com/documentation/authenticationservices/public-private_key_authentication/supporting_passkeys\"><em>Supporting passkeys</em></a>.</p>\n<p>WebKit for Safari 18.0 adds support for three new features as we continue to improve passkeys. First, Safari 18.0 adds support for using <code>mediation=conditional</code> for web authentication credential creation. This allows websites to  automatically upgrade existing password-based accounts to use passkeys. Learn more by watching <a href=\"https://www.youtube.com/watch?v=p8a6ODX1zHY\"><em>Streamline sign-in with passkey upgrades and credential managers</em></a> from WWDC.</p>\n<p>Second, WebKit for Safari 18.0 adds support for using passkeys across related origins. This lets websites use the same passkey across a limited number of domains which share a credential backend.</p>\n<p>And third, WebKit for Safari 18.0 adds support for the WebAuthn <code>prf</code> extension. It allows for retrieving a symmetric key from a passkey to use for the encryption of user data.</p>\n<h2><a name=\"safari-extensions\"></a>Safari Extensions</h2>\n<p>Safari 18.0 also adds support for <a href=\"https://support.apple.com/guide/deployment/intro-to-mdm-profiles-depc0aadd3fe/web\">Mobile Device Management</a> of extension enabled state, private browsing state, and website access on managed devices. This means schools and businesses that manage iOS, iPadOS, or macOS devices can now include the configuration of Safari App Extensions, Content Blockers, and Web Extensions in their management.</p>\n<h2><a name=\"apple-pay\"></a>Apple Pay</h2>\n<p>WebKit for Safari 18.0 adds support for funds transfer via Apple Pay.</p>\n<h2><a name=\"deprecations\"></a>Deprecations</h2>\n<p>While it’s rare to deprecate older technology from the web, there are occasions when it makes sense. We’ve been busy removing <code>-webkit</code> prefixed properties that were never standardized, aging media formats that were never supported in other browsers, and more. This helps align browser engines, improve interoperability, and prevent compatibility problems by reducing the possibility that a website depends on something that’s not a web standard.</p>\n<h3><a name=\"canvas\"></a>Canvas</h3>\n<p>WebKit for Safari 18.0 removes support for <code>OffscreenCanvasRenderingContext2D</code>’s <code>commit()</code> method.</p>\n<h3><a name=\"css\"></a>CSS</h3>\n<p>WebKit for Safari 18.0 deprecates support for a number of rarely used <code>-webkit</code> prefixed CSS pseudo-classes and properties — and even one <a href=\"https://en.wikipedia.org/wiki/KHTML\"><code>-khtml</code></a> prefixed property.</p>\n<ul>\n<li><code>-webkit-alt</code> and <code>alt</code> properties</li>\n<li><code>:-webkit-animating-full-screen-transition</code> pseudo-class</li>\n<li><code>:-webkit-full-screen-ancestor</code> pseudo-class</li>\n<li><code>:-webkit-full-screen-controls-hidden</code> pseudo-class</li>\n<li><code>:-webkit-full-page-media</code> pseudo-class</li>\n<li><code>:-webkit-full-screen-document</code> pseudo-class</li>\n<li><code>:-khtml-drag</code> pseudo-class</li>\n</ul>\n<p>WebKit for Safari 18.0 also deprecates support for the <code>resize: auto</code> rule. <a href=\"https://caniuse.com/css-resize\">Support for the <code>resize</code> property</a> remains, just as it’s been since Safari 4. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/resize\">values Safari continues to support include</a>: <code>none</code>, <code>both</code>, <code>horizontal</code>, <code>vertical</code>, <code>block</code>, <code>inline</code>, plus the global values. <a href=\"https://www.w3.org/TR/2002/WD-css3-ui-20020802/#resizer\">Early versions</a> of CSS Basic User Interface Module Level 3 defined <code>auto</code>, but it was <a href=\"https://www.w3.org/TR/2004/CR-css3-ui-20040511/#resize0\">later</a> written out of the web standard.</p>\n<p>WebKit for Safari 18.0 also deprecates support for non-standardize <code>WEBKIT_KEYFRAMES_RULE</code> and <code>WEBKIT_KEYFRAME_RULE</code> API in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSRule\">CSSRule</a>.</p>\n<h3><a name=\"images\"></a>Images</h3>\n<p>WebKit for Safari 18.0 removes support for the JPEG2000 image format. Safari was <a href=\"https://caniuse.com/jpeg2000\">the only browser</a> to ever provide support.</p>\n<p>If you’ve been serving JPEG2000 files using best practices, then your site is using <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture\">the <code>picture</code> element</a> to offer multiple file format options to every browser. Safari 18.0 will simply no longer choose JPEG2000, and instead use a file compressed in JPEG XL, AVIF, WebP, HEIC, JPG/JPEG, PNG, or Gif — choosing the file that’s best for each user. Only one image will be downloaded when you use <code>&lt;picture&gt;</code>, and the browser does all the heavy lifting.</p>\n<p>We have noticed that some Content Deliver Networks (CDN) use User Agent sniffing to provide one file to each UA, offering only JPEG2000 images to Safari — especially on iPhone and iPad. If you expect this might be happening with your site, we recommend testing in Safari 18.0 on both macOS Sequoia and iOS or iPadOS 18. If you see problems, contact your SaaS provider or change your image delivery settings to ensure your website provides fallback images using industry best practices.</p>\n<p>If you notice a broken site, please file an issue at <a href=\"https://webcompat.com/\">webcompat.com</a>.</p>\n<h3><a name=\"javascript\"></a>JavaScript</h3>\n<p>WebKit for Safari 18.0 removes <code>[[VarNames]]</code> from the global object to reflect changes in the web standard, a change that now allows this code to work:</p>\n<pre><code><span>&lt;</span><span>script</span><span>&gt;</span>\n<span>eval</span>(<span>'var x;'</span>)\n<span>&lt;</span><span>/</span><span>script</span><span>&gt;</span>\n<span>&lt;</span><span>script</span><span>&gt;</span>\n<span>let</span> <span>x</span>;\n<span>&lt;</span><span>/</span><span>script</span><span>&gt;</span>\n</code></pre>\n<h3><a name=\"media\"></a>Media</h3>\n<p>WebKit for Safari 18.0 removes support for non-standard <code>VTTRegion.prototype.track</code>.</p>\n<h3><a name=\"storage\"></a>Storage</h3>\n<p>WebKit for Safari 18.0 removes the last bits of support for AppCache.</p>\n<p>When <a href=\"https://www.w3.org/TR/2011/WD-html5-20110525/offline.html#offline\">AppCache</a> first appeared in 2009, in Safari 4, it held a lot of promise as a tool for caching web pages for use offline. It was imagined as “HTML5 Application Cache” back when HTML itself was being further expanded to handle more use cases for web applications. A developer could create a simple cache manifest file with a list of files to be cached. Its simplicity looked elegant, but there was no mechanism for cache busting, and that made both developing a site and evolving the site over time quite frustrating. AppCache also had security challenges. So new web standards were created to replace it. Today, developers use Service Workers and Cache Storage instead.</p>\n<p>WebKit <a href=\"https://commits.webkit.org/197701@main\">deprecated</a> AppCache with a warning to the Console in Safari 11.0. Then in 2021, we <a href=\"https://commits.webkit.org/236651@main\">removed support</a> for AppCache from Safari 15.0, with a few exceptions for third-party users of <a href=\"https://developer.apple.com/documentation/webkit/wkwebview\">WKWebView</a>. Now we are <a href=\"https://bugs.webkit.org/show_bug.cgi?id=259783\">removing</a> those exceptions. This change to WebKit will only affect the rare web content loaded in older third-party apps that have JavaScript code which relies on the existence of AppCache related interfaces.</p>\n<h3><a name=\"svg\"></a>SVG</h3>\n<p>WebKit for Safari 18.0 removes the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateColorElement\">SVGAnimateColorElement</a> interface, as well as the non-standard <code>getTransformToElement</code> from <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement\">SVGGraphicsElement</a>.</p>\n<h3><a name=\"web-api\"></a>Web API</h3>\n<p>WebKit for Safari 18.0 removes support for four non-standard Web APIs:</p>\n<ul>\n<li><code>KeyboardEvent.altGraphKey</code></li>\n<li>AES-CFB support from WebCrypto</li>\n<li><code>KeyboardEvent.prototype.keyLocation</code></li>\n<li><code>HashChangeEvent</code>’s non-standard <code>initHashChangeEvent()</code> method</li>\n</ul>\n<h3><a name=\"webview\"></a>WebView</h3>\n<p>Deprecated some legacy WebKit notification names including:</p>\n<ul>\n<li><code>WebViewDidBeginEditingNotification</code></li>\n<li><code>WebViewDidChangeNotification</code></li>\n<li><code>WebViewDidEndEditingNotification</code></li>\n<li><code>WebViewDidChangeTypingStyleNotification</code></li>\n<li><code>WebViewDidChangeSelectionNotification</code>  </li>\n</ul>\n<h2><a name=\"bug-fixes-and-more\"></a>Bug Fixes and more</h2>\n<p>In addition to all the new features, WebKit for Safari 18.0 includes work to polish existing features.</p>\n<h3><a name=\"accessibility\"></a>Accessibility</h3>\n<ul>\n<li>Fixed role assignment for <code>&lt;header&gt;</code> inside <code>&lt;main&gt;</code> and sectioning elements. </li>\n<li>Fixed range input not firing an input event when incremented or decremented via accessibility APIs.</li>\n<li>Fixed setting <code>aria-hidden</code> on a slot not hiding the slot’s assigned nodes. </li>\n<li>Fixed VoiceOver to read hidden associated labels.</li>\n<li>Fixed comboboxes to expose their linked objects correctly. </li>\n<li>Fixed VoiceOver support for <code>aria-activedescendant</code> on macOS. </li>\n<li>Fixed time input accessibility by adding labels to subfields. </li>\n<li>Fixed <code>aria-hidden=true</code> to be ignored on the <code>&lt;body&gt;</code> and <code>&lt;html&gt;</code> elements.</li>\n<li>Fixed <code>datetime</code> values being exposed to assistive technologies in the wrong timezone.</li>\n<li>Fixed wrong <code>datetime</code> value being exposed to assistive technologies for <code>datetime-local</code> inputs. </li>\n<li>Fixed ignored CSS content property replacement text when it is an empty string. </li>\n<li>Fixed the computed role for these elements: <code>dd</code>, <code>details</code>, <code>dt</code>, <code>em</code>, <code>hgroup</code>, <code>option</code>, <code>s</code>, and <code>strong</code>. </li>\n<li>Fixed hidden elements targeted by <code>aria-labelledby</code> to expose their entire subtree text, not just their direct child text. </li>\n<li>Fixed accessible name computation for elements with <code>visibility: visible</code> inside a container with <code>visibility: hidden</code>. </li>\n<li>Fixed updating table accessibility text when its caption dynamically changes. </li>\n<li>Fixed updating <code>aria-describedby</code> text after the targeted element changes its subtree. </li>\n</ul>\n<h3><a name=\"animations\"></a>Animations</h3>\n<ul>\n<li>Fixed the <code>transition</code> property to produce the shortest serialization.</li>\n<li>Fixed the <code>animation</code> property to produce the shortest serialization.  </li>\n</ul>\n<h3><a name=\"apple-pay\"></a>Apple Pay</h3>\n<ul>\n<li>Fixed arbitrary 8 digit limit on a line item’s total amount. </li>\n</ul>\n<h3><a name=\"authentication\"></a>Authentication</h3>\n<ul>\n<li>Fixed <code>navigator.credentials.create()</code> rejects with “NotAllowedError: Operation Failed” after a conditional UI request is aborted. </li>\n<li>Fixed setting the cancel flag once the cancel completes regardless of a subsequent request occurring.</li>\n</ul>\n<h3><a name=\"canvas\"></a>Canvas</h3>\n<ul>\n<li>Fixed <code>drawImage(detachedOffscreenCanvas)</code> to throw an exception. </li>\n<li>Fixed OffscreenCanvas failing to render to the placeholder with nested workers.</li>\n<li>Fixed losing the contents layer of the placeholder canvas of OffscreenCanvas when switching off the tab. </li>\n<li>Fixed <code>drawImage</code> to not alter the input source or the destination rectangles. </li>\n<li>Fixed toggling the visibility on a canvas parent undoing the effect of <code>clearRect()</code>. </li>\n<li>Fixed the Canvas <code>drawImage()</code> API to throw an exception when the image is in broken state.</li>\n<li>Fixed a detached OffscreenCanvas to not transfer an ImageBuffer. </li>\n</ul>\n<h3><a name=\"cookies\"></a>Cookies</h3>\n<ul>\n<li>Fixed treating the lack of an explicit “SameSite” attribute as “SameSite=Lax”. </li>\n</ul>\n<h3><a name=\"css\"></a>CSS</h3>\n<ul>\n<li>Fixed setting <code>white-space</code> to a non-default value dynamically on a whitespace or a new line. </li>\n<li>Fixed custom counter styles <code>disclosure-open</code> and <code>disclosure-closed</code> to point to the correct direction in right-to-left. </li>\n<li>Fixed <code>backface-visibility</code> to create a stacking context and containing block. </li>\n<li>Fixed <code>getComputedStyle()</code> to work with functional pseudo-elements like <code>::highlight()</code>. </li>\n<li>Fixed: Aliased <code>:-webkit-full-screen</code> pseudo-class to <code>:fullscreen</code>. </li>\n<li>Fixed: Aliased <code>:-webkit-any-link</code> to <code>:any-link</code> and <code>:matches()</code> to <code>:is()</code>. </li>\n<li>Fixed <code>getComputedStyle()</code> pseudo-element parsing to support the full range of CSS syntax.</li>\n<li>Fixed <code>@supports</code> to correctly handle support for some <code>-webkit</code> prefixed pseudo-elements that were incorrectly treated as unsupported. </li>\n<li>Fixed updating media-query sensitive meta tags after style changes. </li>\n<li>Fixed changing color scheme to update gradients with system colors or <code>light-dark()</code>. </li>\n<li>Fixed incorrect inline element size when using <code>font-variant-caps: all-small-caps</code> with <code>font-synthesis</code>. </li>\n<li>Fixed <code>:empty</code> selector to work with animations. </li>\n<li>Fixed preserving whitespace when serializing custom properties. </li>\n<li>Fixed updating style correctly for non-inherited custom property mutations. </li>\n<li>Fixed element removed by parent to end up losing the last remembered size. </li>\n<li>Fixed an incorrect difference between implicit and explicit initial values for custom properties.</li>\n<li>Fixed the contrast of Menu and MenuText system colors.</li>\n<li>Fixed keeping the shorthand value for CSS <code>gap</code> as-is in serialized and computed values. </li>\n<li>Fixed the style adjuster for <code>@starting-style</code> incorrectly invoking with a null element.</li>\n<li>Fixed excluding <code>-apple-pay-button</code> from applying to any element that supports <code>appearance: auto</code> and is not a button.</li>\n<li>Fixed missing color interpretation methods added to CSS color specifications.</li>\n<li>Fixed <code>hsl()</code> and <code>hsla()</code> implementation to match the latest spec changes. </li>\n<li>Fixed the implementation of <code>rgb()</code> and <code>rgba()</code> to match the latest spec.</li>\n<li>Fixed the <code>hwb()</code> implementation to match the latest spec. </li>\n<li>Fixed the remaining color types to be synced with the latest spec changes. </li>\n<li>Fixed carrying analogous components forward when interpolating colors.</li>\n<li>Fixed applying the fill layer pattern for <code>mask-mode</code>. </li>\n<li>Fixed <code>backdrop-filter: blur</code> to render for elements not present when the page is loaded. </li>\n<li>Fixed: Improved large Grid performance. </li>\n<li>Fixed some CSS properties causing quotes to be reset. </li>\n</ul>\n<h3><a name=\"editing\"></a>Editing</h3>\n<ul>\n<li>Fixed an issue where input method editing would sporadically drop the composition range.</li>\n<li>Fixed dictation UI no longer showing up when beginning dictation after focusing an empty text field. (FB14277296)  </li>\n</ul>\n<h3><a name=\"forms\"></a>Forms</h3>\n<ul>\n<li>Fixed displayed <code>datalist</code> dropdown to sync its <code>options</code> elements after a DOM update. </li>\n<li>Fixed input elements to use the <code>[value]</code> as the first fallback step base.</li>\n<li>Fixed <code>&lt;select multiple&gt;</code> scrollbars to match the used color scheme.</li>\n<li>Fixed updating the input value when selecting an <code>&lt;option&gt;</code> from a <code>&lt;datalist&gt;</code> element. (FB13688998)  </li>\n<li>Fixed the value attribute not getting displayed in an <code>input</code> element with <code>type=\"email\"</code> and the <code>multiple</code> attribute.</li>\n<li>Fixed the iOS animation for <code>&lt;input type=checkbox switch&gt;</code>.  </li>\n<li>Fixed form controls drawing with an active appearance when the window is inactive. </li>\n<li>Fixed constructed FormData object to not include entries for the image button submitter by default. </li>\n</ul>\n<h3><a name=\"history\"></a>History</h3>\n<ul>\n<li>Fixed the properties of <code>History</code> to throw a SecurityError when not in a fully active Document.</li>\n</ul>\n<h3><a name=\"html\"></a>HTML</h3>\n<ul>\n<li>Fixed “about:blank” <code>document.referrer</code> initialization.</li>\n<li>Fixed parsing a self-closing SVG script element. It now successfully executes. </li>\n</ul>\n<h3><a name=\"javascript\"></a>JavaScript</h3>\n<ul>\n<li>Fixed <code>RegExp.prototype.@@split</code> to update the following legacy RegExp static properties: <code>RegExp.input</code>, <code>RegExp.lastMatch</code>, <code>RegExp.lastParen</code>, <code>RegExp.leftContext</code>, <code>RegExp.rightContext</code>, and <code>RegExp.$1, ... RegExp.$9</code>. </li>\n<li>Fixed <code>String.prototype.replace</code> to not take the fast path if the pattern is RegExp Object and the <code>lastIndex</code> is not numeric. </li>\n<li>Fixed spec compliance for Async / Await, Generators, Async Functions, and Async Generators. </li>\n<li>Fixed async functions and generators to properly handle promises with throwing “constructor” getter.</li>\n<li>Fixed<code>return</code> in async generators to correctly <code>await</code> its value.</li>\n<li>Fixed <code>Symbol.species</code> getters to not share a single JS Function.</li>\n<li>Fixed throwing a <code>RangeError</code> if <code>Set</code> methods are called on an object with negative <code>size</code> property.</li>\n<li>Fixed <code>eval()</code> function from another realm to not cause a direct <code>eval</code> call. </li>\n<li>Fixed <code>eval()</code> call with <code>...spread</code> syntaxt to be a direct call.</li>\n<li>Fixed try/catch to not intercept errors originated in <code>[[Construct]]</code> of derived class.</li>\n<li>Fixed several issues:\n<ul>\n<li>direct <code>eval()</code> in a default value expression inside a rest parameter creates a variable in the environment of the function rather than the separate one of the parameters;</li>\n<li>a ReferenceError is thrown when accessing a binding, which is defined inside rest parameter, in <code>eval()</code>, or a closure created in a default value expression of a preceding parameter, but only if there is a <code>var</code> binding by the same name;</li>\n<li>a closure, created in the default value expression inside a rest parameter, is created in a different VariableEnvironment of the function than its counterparts in preceding parameters which causes the incorrect environment to be consulted when querying or modifying parameter names that are “shadowed” by <code>var</code> bindings. </li>\n</ul>\n</li>\n<li>Fixed TypedArray sorting methods to have a special-case for camparator returning <code>false</code>. </li>\n<li>Fixed programming style for bitwise and in setExpectionPorts.</li>\n<li>Fixed <code>emitReturn()</code> to load <code>this</code> value from arrow function lexical environment prior to the TDZ check. </li>\n<li>Fixed NFKC normalization to work with Latin-1 characters.  </li>\n<li>Fixed parsing of private names with Unicode start characters.  </li>\n<li>Fixed <code>instanceof</code> to not get RHS prototype when LHS is primitive.</li>\n<li>Fixed bracket update expression to resolve property key at most once.  </li>\n<li>Fixed bracket compound assignement to resolve the property key at most once. </li>\n<li>Fixed <code>Object.groupBy</code> and <code>Map.groupBy</code> to work for non-objects.  </li>\n<li>Fixed <code>Array.fromAsync</code> to not call the Array constructor twice.  </li>\n<li>Fixed inconsistent output of <code>Function.prototype.toString</code> for accessor properties.</li>\n<li>Fixed <code>Set#symmetricDifference</code> to call <code>this.has</code> in each iteration. </li>\n<li>Fixed logical assignment expressions to throw a syntax error when the left side of the assignment is a function call. </li>\n<li>Fixed throwing a syntax error for nested duplicate-named capturing groups in RegEx. </li>\n<li>Fixed <code>ArrayBuffer</code> and <code>SharedArrayBuffer</code> constructor to check length before creating an instance.  </li>\n<li>Fixed Intl implementation to ensure canonicalizing “GMT” to “UTC” based on a spec update.</li>\n<li>Fixed RegEx lookbehinds differing from v8. </li>\n<li>Fixed <code>fractionalDigits</code> of <code>Intl.DurationFormat</code> to be treated as at most 9 digits if it is omitted. </li>\n<li>Fixed optimized TypedArrays giving incorrect results. </li>\n<li>Fixed <code>Intl.DurationFormat</code> for <code>numeric</code> and <code>2-digit</code>. </li>\n</ul>\n<h3><a name=\"loading\"></a>Loading</h3>\n<ul>\n<li>Fixed <code>navigator.cookieEnabled</code> to return <code>false</code> when cookies are blocked. </li>\n</ul>\n<h3><a name=\"media\"></a>Media</h3>\n<ul>\n<li>Fixed MediaSession to determine the best size artwork to use when the <code>sizes</code> metadata attribute is provided.  (FB9409169)  </li>\n<li>Fixed video sound coming from another window after changing tabs in the Tab Bar in visionOS.</li>\n<li>Fixed playback for MSE videos on some sites. </li>\n<li>Fixed allowing a video’s <code>currentTime</code> to be further than the gap’s start time. </li>\n<li>Fixed broken audio playback for a WebM file with a Vorbis track. </li>\n<li>Fixed <code>sampleRate</code> and <code>numberOfChannels</code> to be required and non-zero in a valid AudioEncoderConfig. </li>\n<li>Fixed media elements appending the same media segment twice.</li>\n<li>Fixed an issue where Safari audio may be emitted from the wrong window in visionOS. </li>\n<li>Fixedrejecting valid NPT strings if ‘hours’ is defined using 1 digit. </li>\n<li>Fixed picture-in-picture when hiding the <code>&lt;video&gt;</code> element while in Viewer. </li>\n<li>Fixed the return button not working after the video is paused and played in picture-in-picture. </li>\n</ul>\n<h3><a name=\"networking\"></a>Networking</h3>\n<ul>\n<li>Fixed upgrading inactive or passive subresource requests and fetches in would-be mixed security contexts to match standards.</li>\n<li>Fixed incorrect <code>Sec-Fetch-Site</code> value for navigation of a nested document. </li>\n<li>Fixed loading WebArchives with a non-persistent datastore. </li>\n<li>Fixed <code>Timing-Allow-Origin</code> to not apply to an HTTP 302 response. </li>\n</ul>\n<h3><a name=\"pdf\"></a>PDF</h3>\n<ul>\n<li>Fixed print buttons with a print action implementation. </li>\n<li>Fixed Open in Preview for a PDF with a space in its name. </li>\n<li>Fixed “Open with Preview” context menu item to work with locked PDF documents. </li>\n</ul>\n<h3><a name=\"rendering\"></a>Rendering</h3>\n<ul>\n<li>Fixed Greek uppercase transforms failing for some characters. </li>\n<li>Fixed resizing a <code>&lt;textarea&gt;</code> element with <code>1rem</code> padding. </li>\n<li>Fixed the color correctness of the color matrix filter. </li>\n<li>Fixed <code>backdrop-filter</code> to apply to the border area of an element with a <code>border-radius</code>. </li>\n<li>Fixed intrinsic inline size calculators to account for whitespace before an empty child with nonzero margins. </li>\n<li>Fixed overlapping elements with flex box when <code>height: 100%</code> is applied on nested content.</li>\n<li>Fixed incorrect grid item positioning with out-of-flow sibling.</li>\n<li>Fixed <code>break-word</code> with a float discarding text.</li>\n<li>Fixed <code>min-content</code> calculation for unstyled <code>only-child</code> inlines elements. </li>\n<li>Fixed ellipsis rendering multiple times when <code>position: relative</code> and <code>top</code> are used. </li>\n<li>Fixed a bug for inline elements inserted in reverse order after a block in a continuation.  </li>\n<li>Fixed the flash of a page background-colored bar in the footer when the window is resized.</li>\n<li>Fixed garbled bold text caused by glyph lookup using the wrong font’s glyph IDs when multiple installed fonts have the same name. (FB13909556)  </li>\n<li>Fixed selecting Japanese text annotated with <code>ruby</code> in a <code>vertical-rl</code> writing mode table. </li>\n<li>Fixed support for border, padding, and margin on <code>mfrac</code> and <code>mspace</code> elements in MathML. </li>\n</ul>\n<h3><a name=\"scrolling\"></a>Scrolling</h3>\n<ul>\n<li>Fixed the cursor not updating as content scrolls under it on some pages.</li>\n</ul>\n<h3><a name=\"security\"></a>Security</h3>\n<ul>\n<li>Fixed stripping the scroll-to-text fragment from the URL to prevent exposing the fragment to the page. </li>\n<li>Fixed CORS bypass on private localhost domain using 0.0.0.0 host and mode “no-cors”.</li>\n<li>Fixed blocking cross-origin redirect downloads in an iframe. </li>\n<li>Fixed blocked cross-origin redirect downloads to attempt rendering the page instead. </li>\n</ul>\n<h3><a name=\"svg\"></a>SVG</h3>\n<ul>\n<li>Fixed the SVG parser to interpret “form feed” as white space. </li>\n<li>Fixed error handling for invalid filter primitive references. </li>\n<li>Fixed displaying an SVG element inside a <code>&lt;switch&gt;</code> element. </li>\n<li>Fixed SVG title to have <code>display: none</code> as the default UA style rule.</li>\n<li>Fixed the UA stylesheet for links in SVGs to apply <code>cursor: pointer</code> matching standards. </li>\n<li>Fixed returning the initial value for the SVG gradient <code>stop-color</code> if it is not rendered in the page. </li>\n<li>Fixed the SVG marker segment calculations if the marker path consists of sub-paths. </li>\n<li>Fixed <code>SVGLength</code> to sync with the WebIDL specification. </li>\n</ul>\n<h3><a name=\"text\"></a>Text</h3>\n<ul>\n<li>Fixed disclosure counter styles to consider <code>writing-mode</code>. </li>\n</ul>\n<h3><a name=\"web-animations\"></a>Web Animations</h3>\n<ul>\n<li>Fixed percentage transform animations when <code>width</code> and <code>height</code> are animated. </li>\n<li>Fixed updating an animation when changing the value of a <code>transform</code> property while that property is animated with an implicit keyframe. </li>\n<li>Fixed <code>display</code> transition to <code>none</code>.  </li>\n</ul>\n<h3><a name=\"web-api\"></a>Web API</h3>\n<ul>\n<li>Fixed <code>cssText</code>setter to change the <code>style</code> attribute when the serialization differs. (FB5535475)  </li>\n<li>Fixed <code>history.pushState()</code> and <code>history.replaceState()</code> to ignore the <code>title</code> argument. </li>\n<li>Fixed URL text fragment directives not fully stripped from JavaScript. </li>\n<li>Fixed <code>showPicker()</code> method to trigger suggestions from a <code>datalist</code>. </li>\n<li>Fixed <code>lang</code> attribute in no namespace to only apply to HTML and SVG elements.</li>\n<li>Fixed unnecessarily unsetting the iframe fullscreen flag. </li>\n<li>Fixed DOM Range to correctly account for CDATASection nodes.</li>\n<li>Fixed <code>getGamepads()</code> to no longer trigger an insecure contexts warning. </li>\n<li>Fixed inserting a <code>&lt;picture&gt;</code> element displaying the same image twice. </li>\n<li>Fixed throwing exceptions in navigation methods if in a detached state. </li>\n<li>Fixed a minor issue in URL’s host setter.</li>\n<li>Fixed cloning of ShadowRoot nodes following a DOM Standard clarification. </li>\n<li>Fixed GeolocationCoordinates to expose a <code>toJSON()</code> method. </li>\n<li>Fixed IntersectionObserver notifications that sometimes fail to fire.</li>\n<li>Fixed GeolocationPosition to expose a <code>toJSON()</code> method.</li>\n<li>Fixed setting <code>CustomEvent.target</code> when dispatching an event.</li>\n<li>Fixed <code>navigator.language</code> only returning the system language in iOS 17.4. </li>\n<li>Fixed: Removed presentational hints from the <code>width</code> attribute for <code>&lt;hr&gt;</code>. </li>\n<li>Fixed an issue when inserting writing suggestions into an editable <code>display: grid</code> container. </li>\n<li>Fixed the warning message for <code>window.styleMedia</code>.</li>\n</ul>\n<h3><a name=\"web-apps\"></a>Web Apps</h3>\n<ul>\n<li>Fixed resolving <code>www.</code> sub-domain for Associated Domains for all web apps. </li>\n</ul>\n<h3><a name=\"web-assembly\"></a>Web Assembly</h3>\n<ul>\n<li>Fixed initialization of portable reference typed globals.</li>\n</ul>\n<h3><a name=\"web-extensions\"></a>Web Extensions</h3>\n<ul>\n<li>Fixed getting an empty key from storage. (FB11427769)  </li>\n<li>Fixed Service Workers not appearing in the Develop menu or remote Web Inspector menu. (130712941)  </li>\n<li>Fixed web extensions unable to start due to an issue parsing declarativeNetRequest rules. (FB14145801)  </li>\n</ul>\n<h3><a name=\"web-inspector\"></a>Web Inspector</h3>\n<ul>\n<li>Fixed font sizes in the Audits tab. </li>\n<li>Fixed expanded sections of Storage to not collapse. </li>\n<li>Fixed Web Inspector to show nested workers. </li>\n<li>Fixed CSS font property values marked <code>!important</code> not getting overridden when using the interactive editing controls. </li>\n<li>Fixed an issue where the Web Inspector viewport might appear cut off. </li>\n<li>Fixed runtimes to be aligned in the Audit tab.</li>\n<li>Fixed remembering the message type selection in the Console tab.</li>\n<li>Fixed autocomplete for the <code>text-indent</code> property suggesting prefixed properties instead of <code>each-line</code> or <code>hanging</code>. </li>\n<li>Fixed <code>background</code> autocompletion suggestion to include <code>repeating-conic-gradient</code>.</li>\n<li>Fixed the list of breakpoints in the Sources tab disappearing when Web Inspector is reloaded. </li>\n<li>Fixed console clearing unexpectedly when Web Inspector reopens.</li>\n<li>Fixed console code completion to be case-insensitive. </li>\n<li>Fixed <code>overflow: scroll</code> elements to scroll as expected when highlighting an element from the DOM tree. </li>\n<li>Fixed showing additional Safari tabs from an iOS device in the Develop menu. </li>\n<li>Fixed Console and code editor completion not auto-scrolling the suggestion into view. </li>\n<li>Fixed search in the DOM tree view unexpectedly chaning the text display. </li>\n<li>Fixed clicking the “goto” arrow for computed CSS when “show independent Styles sidebar” is disabled. </li>\n<li>Fixed inspectable tabs from Safari in the visionOS Simulator don’t appear in Developer menu on the host macOS.  </li>\n<li>Fixed Accessibility inspector for switch controls to report “State: on/off” instead of “Checked: true/false”. </li>\n</ul>\n<h3><a name=\"web-views\"></a>Web Views</h3>\n<ul>\n<li>Fixed Gamepad API in WKWebView. </li>\n<li>Fixed repainting HTML elements when their width or height change in legacy WebView.</li>\n</ul>\n<h3><a name=\"webdriver\"></a>WebDriver</h3>\n<ul>\n<li>Fixed retrieving titles containing multibyte characters.</li>\n</ul>\n<h3><a name=\"webrtc\"></a>WebRTC</h3>\n<ul>\n<li>Fixed RTCEncodedVideoFrame and RTCEncodedAudioFrame to match the WebIDL specification.</li>\n<li>Fixed VideoTrackGenerator writer to close when its generator track (and all its clones) are stopped.</li>\n<li>Fixed WebRTC AV1 HW decoding on iPhone 15 Pro. </li>\n<li>Fixed black stripes with screen sharing windows.</li>\n<li>Fixed black stripes with getDisplayMedia captured windows when the window is resized. </li>\n</ul>\n<h2><a name=\"updating-to-safari-18-0\"></a>Updating to Safari 18.0</h2>\n<p>Safari 18.0 is available on <a href=\"https://www.apple.com/ios/ios-18/\">iOS 18</a>, <a href=\"https://www.apple.com/ipados/ipados-18/\">iPadOS 18</a>, <a href=\"https://www.apple.com/macos/\">macOS Sequoia</a>, macOS Sonoma, macOS Ventura, and in <a href=\"https://www.apple.com/visionos/\">visionOS 2</a>.</p>\n<p>If you are running macOS Sonoma or macOS Ventura, you can update Safari by itself, without updating macOS. Go to  &gt; System Settings &gt; General &gt; Software Update and click “More info…” under Updates Available.</p>\n<p>To get the latest version of Safari on iPhone, iPad or Apple Vision Pro, go to Settings &gt; General &gt; Software Update, and tap to update.</p>\n<h2><a name=\"feedback\"></a>Feedback</h2>\n<p>We love hearing from you. To share your thoughts on Safari 18.0, find us on Mastodon at <a href=\"https://front-end.social/@jensimmons\">@jensimmons@front-end.social</a> and <a href=\"https://mastodon.social/@jondavis\">@jondavis@mastodon.social</a>. Or send a reply on X to <a href=\"https://twitter.com/webkit\">@webkit</a>. You can also <a href=\"https://www.linkedin.com/in/apple-webkit/\">follow WebKit on LinkedIn</a>. If you run into any issues, we welcome your <a href=\"https://feedbackassistant.apple.com/\">feedback</a> on Safari UI (learn more about <a href=\"https://developer.apple.com/bug-reporting/\">filing Feedback</a>), or your <a href=\"https://bugs.webkit.org/\">WebKit bug report</a> about web technologies or Web Inspector. If you notice a website that seems broken in Safari, but not in other browsers, please file a report at <a href=\"https://webcompat.com/\">webcompat.com</a>. Filing issues really does make a difference.</p>\n<p>Download the latest <a href=\"https://developer.apple.com/safari/technology-preview/\">Safari Technology Preview</a> on macOS to stay at the forefront of the web platform and to use the latest Web Inspector features.</p>\n<p>You can also find this information in the <a href=\"https://developer.apple.com/documentation/safari-release-notes/\">Safari 18.0 release notes</a>.</p>\n<p><small>1. iPhone Mirroring is available on Mac computers with Apple silicon and Intel-based Mac computers with a T2 Security Chip. Requires that your iPhone and Mac are signed in with the same Apple ID using two-factor authentication, your iPhone and Mac are near each other and have Bluetooth and Wi-Fi turned on, and your Mac is not using AirPlay or Sidecar. iPhone Mirroring is not available in all regions.</small></p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"19b1357dde6e04d580c1a17f322f29a632692eec5c9f25b8c02d72ff86adefa3","category":"Tech"}