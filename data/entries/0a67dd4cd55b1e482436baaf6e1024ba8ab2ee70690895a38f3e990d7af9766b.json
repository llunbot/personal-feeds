{"title":"AWS Chatbot Now Integrates With Microsoft Teams","link":"https://aws.amazon.com/blogs/aws/aws-chatbot-now-integrates-with-microsoft-teams/","date":1679002642000,"content":"<p>I am pleased to announce that, starting today, you can use <a href=\"https://aws.amazon.com/chatbot/\">AWS Chatbot</a> to troubleshoot and operate your AWS resources from Microsoft Teams.</p> \n<p>Communicating and collaborating on IT operation tasks through chat channels is known as ChatOps. It allows you to centralize the management of infrastructure and applications, as well as to automate and streamline your workflows. It helps to provide a more interactive and collaborative experience, as you can communicate and work with your colleagues in real time through a familiar chat interface to get the job done.</p> \n<p><a href=\"https://aws.amazon.com/blogs/aws/aws-chatbot-chatops-for-slack-and-chime/\">We launched AWS Chatbot in 2020</a> with <a href=\"https://aws.amazon.com/chime/\">Amazon Chime</a> and <a href=\"https://slack.com/about\">Slack</a> integrations. Since then, the landscape of chat platforms has evolved rapidly, and many of you are now using Microsoft Teams.</p> \n<p><span><strong>AWS Chatbot Benefits</strong></span><br /> When using AWS Chatbot for Microsoft Teams or other chat platforms, you receive notifications from AWS services directly in your chat channels, and you can take action on your infrastructure by typing commands without having to switch to another tool.</p> \n<p>Typically you want to receive alerts about your system health, your budget, any new security threat or risk, or the status of your CI/CD pipelines. Sending a message to the chat channel is as simple as sending a message on an <a href=\"https://aws.amazon.com/sns/\">Amazon Simple Notification Service (Amazon SNS)</a> topic. Thanks to the native integration between <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a> alarms and SNS, alarms are automatically delivered to your chat channels with no additional configuration step required. Similarly, thanks to the integration between <a href=\"https://aws.amazon.com/eventbridge\">Amazon EventBridge</a> and SNS, any system or service that emits events to EventBridge can send information to your chat channels.</p> \n<p>But ChatOps is more than the ability to spot problems as they arise. AWS Chatbot allows you to receive predefined CloudWatch dashboards interactively and retrieve Logs Insights logs to troubleshoot issues directly from the chat thread. You can also directly type in the chat channel most <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a> commands to retrieve additional telemetry data or resource information or to run runbooks to remediate the issues.</p> \n<p>Typing and remembering long commands is difficult. With AWS Chatbot, you can define your own aliases to reference frequently used commands and their parameters. It reduces the number of steps to complete a task. Aliases are flexible and can contain one or more custom parameters injected at the time of the query.</p> \n<p>And because chat channels are designed for conversation, you can also ask questions in natural language and have AWS Chatbot answer you with relevant extracts from the AWS documentation or support articles. Natural language understanding also allows you to make queries such as “show me my ec2 instances in eu-west-3.”</p> \n<p><span><strong>Let’s Configure the Integration Between AWS Chatbot and Microsoft Teams<br /> </strong></span>Getting started is a two-step process. First, I configure my team in Microsoft Teams. As a Teams administrator, I add the AWS Chatbot application to the team, and I take note of the URL of the channel I want to use for receiving notifications and operating AWS resources from Microsoft Teams channels.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_13-41-15.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_13-41-15.png\" alt width=\"800\" height=\"237\" /></a></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-39-41.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-39-41.png\" alt width=\"400\" height=\"402\" /></a></p> \n<p>Second, I register Microsoft Teams channels in <a href=\"https://aws.amazon.com/chatbot/\">AWS Chatbot</a>. I also assign IAM permissions on what channel members can do in this channel and associate SNS topics to receive notifications. I may configure AWS Chatbot with the <a href=\"https://console.aws.amazon.com/chatbot/home#/chat-clients\">AWS Management Console</a>, an <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> template, or the <a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit (AWS CDK)</a>. For this demo, I choose to use the console.</p> \n<p>I open the Management Console and navigate to the AWS Chatbot section. On the top right side of the screen, in the <strong>Configure a chat client</strong> box, I select <strong>Microsoft Teams</strong> and then <strong>Configure client</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-37-47.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-37-47.png\" alt width=\"800\" height=\"554\" /></a>I enter the <strong>Microsoft Teams channel URL</strong> I noted in the Teams app.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-40-22.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-40-22.png\" alt=\"Add the team channel URL to Chatbot\" width=\"600\" height=\"346\" /></a>At this stage, Chatbot redirects my browser to Microsoft Teams for authentication. If I am already authenticated, I will be redirected back to the AWS console immediately. Otherwise, I enter my Microsoft Teams credentials and one-time password and wait to be redirected.</p> \n<p>At this stage, my Microsoft Teams team is registered with AWS Chatbot and ready to add Microsoft Teams channels. I select <strong>Configure new channel</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-42-03.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-42-03.png\" alt=\"Chabot is now linked to your Microsoft Teams \" width=\"800\" height=\"343\" /></a>There are four sections to enter the details of the configuration. In the first section, I enter a <strong>Configuration name</strong> for my channel. Optionally, I also define the <strong>Logging</strong> details. In the second section, I paste—again—the Microsoft Teams <strong>Channel URL</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-45-56.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-45-56.png\" alt=\"Configure chatbot section one and two\" width=\"700\" height=\"772\" /></a></p> \n<p>In the third section, I configure the <strong>Permissions</strong>. I can choose between the same set of permissions for all Microsoft Teams users in my team, or I can set <strong>User-level roles</strong> permission to enable user-specific permissions in the channel. In this demo, I select <strong>Channel role</strong>, and I assign an IAM role to the channel. The role defines the permissions shared by all users in the channel. For example, I can assign a role that allows users to access configuration data from Amazon EC2 but not from Amazon S3. Under <strong>Channel role</strong>, I select <strong>Use an existing IAM role</strong>. Under <strong>Existing role</strong>, I select a role <a href=\"https://www.youtube.com/watch?v=wugkTArXBYo&amp;t=2780s\">I created for my 2019 re:Invent talk about ChatOps</a>: <code>chatbot-demo</code>. This role gives read-only access to all AWS services, but I could also assign other roles that would allow Chatbot users to take actions on their AWS resources.</p> \n<p>To mitigate the risk that another person in your team accidentally grants more than the necessary privileges to the channel or user-level roles, you might also include <strong>Channel guardrail policies</strong>. These are the maximum permissions your users might have when using the channel. At runtime, the actual permissions are the intersection of the channel or user-level policies and the guardrail policies. Guardrail policies act like a boundary that channel users will never escape. The concept is similar to <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html\">permission boundaries for IAM entities</a> or <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps.html\">service control policies (SCP) for AWS Organizations</a>. In this example, I attach the <strong>ReadOnlyAccess</strong> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html\">managed policy</a>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-47-53.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-47-53.png\" alt=\"Configure chatbot section three\" width=\"703\" height=\"878\" /></a></p> \n<p>The fourth and last section allows you to specify the SNS topic that will be the source for notifications sent to your team’s channel. Your applications or AWS services, such as <span>CloudWatch</span> alarms, can send messages to this topic, and AWS Chatbot will relay all messages to the configured Microsoft Teams channel. Thanks to the integration between <a href=\"https://aws.amazon.com/eventbridge\">Amazon EventBridge</a> and SNS, any application able to send a message to EventBridge is able to send a message to Microsoft Teams.</p> \n<p>For this demo, I select an existing SNS topic: <code>alarmme</code> in the <code>us-east-1</code> Region. You can configure multiple SNS topics to receive alarms from various Regions. I then select <strong>Configure</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-48-29.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_08-48-29.png\" alt=\"Configure chatbot section four\" width=\"714\" height=\"744\" /></a><span><strong>Let’s Test the Integration<br /> </strong></span>That’s it. Now I am ready to test my setup.</p> \n<p>On the AWS Chatbot configuration page, I first select the <strong>Send test message</strong>. I also have an alarm defined when my estimated billing goes over $500. On the <span>CloudWatch</span> section of the Management Console, I configure the alarm to post a message on the SNS topic shared with Microsoft Teams.</p> \n<p>Within seconds, I receive the test message and the alarm message on the Microsoft Teams channel.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_10-40-13-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/11/2023-01-11_10-40-13-1.png\" alt=\"AWS Chatbot with Microsoft Teams, first messages received on the channel\" width=\"810\" height=\"588\" /></a></p> \n<p>Then I type a command to understand where the billing alarm comes from. I want to understand how many EC2 instances are running.</p> \n<p>On the chat client channel, I type <code>@aws</code> to select Chatbot as the destination, then the rest of the CLI command, as I would do in a terminal: <code>ec2 describe-instances --region us-east-1 --filters \"Name=architecture,Values=arm64_mac\" --query \"Reservations[].Instances[].InstanceId\"</code></p> \n<p>Chatbot answers within seconds.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/12/2023-01-12_16-44-13.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/12/2023-01-12_16-44-13.png\" alt=\"AWS chatbot describe instances\" width=\"810\" height=\"450\" /></a></p> \n<p>I can create aliases for commands I frequently use. Aliases may have placeholder parameters that I can give at runtime, such as the Region name for example.<span><br /> </span></p> \n<p>I create an alias to get the list of my macOS instance IDs with the command: <code>aws alias create mac ec2 describe-instances --region $region --filters \"Name=architecture,Values=arm64_mac\" --query \"Reservations[].Instances[].InstanceId\"</code></p> \n<p>Now, I can type <code>@aws alias run mac us-east-1</code> as a shortcut to get the same result as above. I can also manage my aliases with the <code>@aws alias list</code>, <code>@aws alias get</code>, and <code>@aws alias delete</code> commands.</p> \n<p>I don’t know about you, but for me it is hard to remember commands. When I use the terminal, I rely on auto-complete to remind me of various commands and their options. AWS Chatbot offers similar command completion and guides me to collect missing parameters.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/19/2023-01-19_15-00-06.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/19/2023-01-19_15-00-06.png\" alt=\"AWS Chatbot command completion\" width=\"810\" height=\"605\" /></a></p> \n<p>When using AWS Chatbot, I can also ask questions using natural English language. It can help to find answers from the AWS docs and from support articles by typing questions such as <code>@aws how can I tag my EC2 instances?</code> or <code>@aws how do I configure Lambda concurrency setting?</code></p> \n<p>It can also find resources in my account when <a href=\"https://aws.amazon.com/resourceexplorer/\">AWS Resource Explorer</a> is activated. For example, I asked the bot: <code>@aws what are the tags for my ec2 resources?</code> and <code>@aws what Regions do I have Lambda service?</code></p> \n<p>And I received these responses.</p> \n<p><span><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/12/2023-01-12_17-05-04.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/12/2023-01-12_17-05-04.png\" alt=\"AWS Chatbot NLP Response 1\" width=\"810\" height=\"583\" /></a></span><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/12/2023-01-12_17-09-59.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2023/01/12/2023-01-12_17-09-59.png\" alt=\"AWS Chatbot NLP Response 2\" width=\"810\" height=\"585\" /></a>Thanks to AWS Chatbot, I realized that I had a rogue Lambda function left in <code>ca-central-1</code>. I used the AWS console to delete it.</p> \n<p><span><strong>Available Now</strong></span><br /> You can start to use AWS Chatbot with Microsoft Teams today. <a href=\"https://teams.microsoft.com/l/app/4aeedc84-f779-42cc-8944-44bb0bd42c3c\">AWS Chatbot for Microsoft Teams is available to download from Microsoft Teams app</a> at no additional cost. AWS Chatbot is available in <a href=\"https://docs.aws.amazon.com/general/latest/gr/chatbot.html\">all public AWS Regions</a>, at no additional charge. You pay for the underlying resources that you use. You might incur charges from your chat client.</p> \n<p>Get started today and <a href=\"https://docs.aws.amazon.com/chatbot/latest/adminguide/getting-started.html\">configure your first integration with Microsoft Teams</a>.</p> \n<p><a href=\"https://twitter.com/sebsto\">-- seb</a></p>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"0a67dd4cd55b1e482436baaf6e1024ba8ab2ee70690895a38f3e990d7af9766b","category":"Tech"}