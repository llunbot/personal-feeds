{"title":"Building Profiles with new WebKit API","link":"https://webkit.org/blog/14423/building-profiles-with-new-webkit-api/","date":1693411228000,"content":"<p>Profiles are useful. They allow users to organize their data into categories and manage them separately. Users can create different profiles for different purposes and delete any profile without worrying about messing with data from another profile. Profiles also make it easier to access different online identities. Users with multiple accounts on the same site can simultaneously log into them within different profiles. They don’t need to keep logging in and out to switch between accounts because cookies are separate between profiles.</p>\n<p>An essential requirement to implement profiles is to have separate containers for website data. In WebKit, this means the client needs to have different data stores. Before macOS 14 and iOS 17, WebKit clients could have multiple non-persistent data stores, but only one persistent data store — the default one. Non-persistent data stores do not store data to disk, so they cannot be retained across sessions.</p>\n<p>In macOS 14 and iOS 17, we’ve introduced a new set of APIs to let clients create and manage multiple persistent data stores. Let’s take a look at how to use them to build a “profiles” feature for your app.</p>\n<h2>Create a profile</h2>\n<p>When a user creates a profile, you can create a custom persistent <code>WKWebsiteDataStore</code>. To do that, you should provide an identifier that can uniquely identify the store. You will need to remember the identifier so the data store can be retrieved and the profile can be restored when your app relaunches.</p>\n<pre><code><span>let</span> profileIdentifier <span>=</span> UUID()\n<span>let</span> profileDataStore <span>=</span> WKWebsiteDataStore(forIdentifier<span>:</span>profileIdentifier)\n</code></pre>\n<p>Then you can assign the newly created <code>WKWebsiteDataStore</code> to a <code>WKWebView</code> via configuration, and use <code>WKWebView</code> to load web content using the new profile, see https://developer.apple.com/documentation/webkit/wkwebview/ for example.</p>\n<pre><code><span>let</span> configuration <span>=</span> WKWebViewConfiguration()\nconfiguration.websiteDataStore <span>=</span> profileDataStore\n<span>let</span> webView <span>:</span> WKWebView <span>=</span> WKWebView(frame<span>:</span> .zero, configuration<span>:</span> configuration)\n</code></pre>\n<h2>Delete a profile</h2>\n<p>When a user deletes a profile, you can delete its data store based on its identifier. The operation can fail if the specified data store is still in use, for example, by an active <code>WKWebView</code> that is displaying web content, or if there is a file system error. You will need to catch and handle the error properly.</p>\n<pre><code>WKWebsiteDataStore.remove(forIdentifier<span>:</span>profileIdentifier) { error <span>in</span>\n<span>if</span> error <span>!</span><span>=</span> <span>nil</span> {\n<span>NSLog</span>(<span>\"Removing profile failed with error: %@\"</span>, error.localizedDescription)\n}\n}\n</code></pre>\n<p>To find out if a <code>WKWebView</code> is using a data store, you can get the identifier of a <code>WKWebsiteDataStore</code>. Note that non-persistent <code>WKWebsiteDataStore</code>s and the default <code>WKWebsiteDataStore</code> do not have identifiers.</p>\n<pre><code><span>if</span> webView.configuration.websiteDataStore.identifier <span>=</span><span>=</span> profileIdentifier {\n<span>NSLog</span>(<span>\"Profile is in use\"</span>)\n}\n</code></pre>\n<h2>Retrieve an existing profile</h2>\n<p>With the identifier, you can retrieve an existing data store. However, that would create a data store if one does not exist yet. If you just want to check if a data store with a specified identifier exists, not create it, you can use <code>fetchAllDataStoreIdentifiers</code> to get all the identifiers.</p>\n<pre><code>WKWebsiteDataStore.fetchAllDataStoreIdentifiers() { identifiers <span>in</span>\n<span>if</span> <span>!</span>identifiers.contains(profileIdentifier) {\n<span>NSLog</span>(<span>\"Cannot find profile\"</span>)\n}\n}\n</code></pre>\n<h2>What’s next?</h2>\n<p>A profile may contain many other types of data belonging to the client, and not to WebKit, such as per-site settings, bookmarks, browsing history, etc. Those types are not covered by this API and you may need to separate them too to make the profile experience more complete.</p>\n<p>If you want to add support for profiles in your app, trying out the new WebKit APIs is definitely a good start and an essential step. If you have any feedback or encounter any issue when using the API, please let us know by filing a bug on <a href=\"http://bugs.webkit.org/\">bugs.webkit.org</a>.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"31a8b9d4ca95681751ec4f7eb2adace9f976be0fbb6836143b8391e9ed32c00d","category":"Tech"}