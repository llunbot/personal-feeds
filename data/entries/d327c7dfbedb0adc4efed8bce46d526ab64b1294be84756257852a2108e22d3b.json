{"title":"Amazon Q Developer in GitHub (in preview) accelerates code generation","link":"https://aws.amazon.com/blogs/aws/amazon-q-developer-in-github-now-in-preview-with-code-generation-review-and-legacy-transformation-capabilities/","date":1746461158000,"content":"<p>Starting today, you can now use <a href=\"https://github.com/apps/amazon-q-developer\">Amazon Q Developer in GitHub</a> in preview! This is fantastic news for the millions of developers who use GitHub on a daily basis, whether at work or for personal projects. They can now use Amazon Q Developer for feature development, code reviews, and Java code migration directly within the GitHub interface.</p> \n<p>To demonstrate, I’m going to use Amazon Q Developer to help me create an application from zero called StoryBook Teller. I want this to be an ASP.Core website using .NET 9 that takes three images from the user and uses <a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a> with Anthropic’s Claude to generate a story based on them.</p> \n<p>Let me show you how this works.</p> \n<p><span><strong>Installation</strong></span></p> \n<p>The first thing you need to do is install the <a href=\"https://github.com/apps/amazon-q-developer\">Amazon Q Developer application in GitHub</a>, and you can begin using it immediately without connecting to an AWS account.</p> \n<p>You’ll then be presented with a choice to add it to all your repositories or select specific ones. In this case, I want to add it to my storybook-teller-demo repo, so I choose <strong>Only selected repositories</strong> and type in the name to find it.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/selecting-only-specific-repositories.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/selecting-only-specific-repositories.png\" alt=\"\" width=\"608\" height=\"818\" /></a></p> \n<p>This is all you need to do to make the Amazon Q Developer app ready to use inside your selected repos. You can verify that the app is installed by navigating to your GitHub account <strong>Settings</strong> and the app should be listed in the <strong>Applications </strong>page.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/amazon-q-developer-in-my-github-app-marked.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/amazon-q-developer-in-my-github-app-marked.png\" alt=\"\" width=\"968\" height=\"447\" /></a></p> \n<p>You can choose <strong>Configure</strong> to view permissions and add Amazon Q Developer to repositories or remove it at any time.</p> \n<p>Now let’s use Amazon Q Developer to help us build our application.</p> \n<p><span><strong>Feature development<br /> </strong></span>When Amazon Q Developer is installed into a repository, you can assign GitHub issues to the Amazon Q development agent to develop features for you. It will then generate code using the whole codebase in your repository as context as well as the issue’s description. This is why it’s important to list your requirements as accurately and clearly as possible in your GitHub issues, the same way that you should always strive for anyway.</p> \n<p>I have created five issues in my StoryBook Teller repository that cover all my requirements for this app, from creating a skeleton .NET 9 project to implementing frontend and backend.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/17/empty-repository-with-5-issues.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/17/empty-repository-with-5-issues.png\" alt=\"\" width=\"1761\" height=\"561\" /></a></p> \n<p>Let’s use Amazon Q Developer to develop the application from scratch and help us implement all these features!</p> \n<p>To begin with, I want Amazon Q Developer to help me create the .NET project. To do this, I open the first issue, and in the <strong>Labels</strong> section, I find and select <strong>Amazon Q development agent</strong>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/21/marked-choosing-label-setup-story.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/21/marked-choosing-label-setup-story.png\" alt=\"\" width=\"1278\" height=\"814\" /></a></p> \n<p>That’s all there is to it! The issue is now assigned to Amazon Q Developer. After the label is added, the Amazon Q development agent automatically starts working behind the scenes providing progress updates through the comments, starting with one saying, <code>I'm working on it</code>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/q-developer-i-am-working-on-it-comment.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/q-developer-i-am-working-on-it-comment.png\" alt=\"\" width=\"935\" height=\"188\" /></a></p> \n<p>As you might expect, the amount of time it takes will depend on the complexity of the feature. When it’s done, it will automatically create a pull request with all the changes.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/q-developer-finished-full-issue-loo-marked.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/q-developer-finished-full-issue-loo-marked.png\" alt=\"\" width=\"959\" height=\"756\" /></a></p> \n<p>The next thing I want to do is make sure that the generated code works, so I’m going to download the code changes and run the app locally on my computer.</p> \n<p>I go to my terminal and type <code>git fetch origin pull/6/head:pr-6</code> to get the code for the pull request it created. I double-check the contents and I can see that I do indeed have an ASP.Core project generated using .NET 9, as I expected.</p> \n<p>I then run <code>dotnet run</code> and open the app with the URL given in the output.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/17/running-app-after-setup-story-done.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/17/running-app-after-setup-story-done.png\" alt=\"\" width=\"635\" height=\"330\" /></a></p> \n<p>Brilliant, it works! Amazon Q Developer took care of implementing this one exactly as I wanted based on the requirements I provided in the GitHub issue. Now that I have tested that the app works, I want to review the code itself before I accept the changes.</p> \n<p><span><strong>Code review</strong></span><br /> I go back to GitHub and open the pull request. I immediately notice that Amazon Q Developer has performed some automatic checks on the generated code.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/pull-request-with-automated-code-review-done-marked.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/pull-request-with-automated-code-review-done-marked.png\" alt=\"\" width=\"917\" height=\"983\" /></a></p> \n<p>This is great! It has already done quite a bit of the work for me. However, I want to review it before I merge the pull request. To do that, I navigate to the <strong>Files changed</strong> tab.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/17/files-changed-tab-marked.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/17/files-changed-tab-marked.png\" alt=\"\" width=\"567\" height=\"132\" /></a></p> \n<p>I review the code, and I like what I see! However, looking at the contents of .gitignore, I notice something that I want to change. I can see that Amazon Q Developer made good assumptions and added exclusion rules for Visual Studio (VS) Code files. However, JetBrains Rider is my favorite integrated development environment (IDE) for .NET development, so I want to add rules for it, too.</p> \n<p>You can ask Amazon Q Developer to reiterate and make changes by using the normal code review flow in the GitHub interface. In this case, I add a comment to the .gitignore code saying, <code>add patterns to ignore Rider IDE files</code>. I then choose <strong>Start a review</strong>, which will queue the change in the review.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/17/gitignore-comment-added-review-pending.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/17/gitignore-comment-added-review-pending.png\" alt=\"\" width=\"715\" height=\"322\" /></a></p> \n<p>I select <strong>Finish your review</strong> and <strong>Request changes.</strong></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/selecting-request-change-marked.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/selecting-request-change-marked.png\" alt=\"\" width=\"683\" height=\"594\" /></a></p> \n<p>Soon after I submit the review, I’m redirected to the Conversation tab. Amazon Q Developer starts working on it, resuming the same feedback loop and encouraging me to continue with the review process until I’m satisfied.</p> \n<p>Every time Q Developer makes changes, it will run the automated checks on the generated code. In this case, the code was somewhat straightforward, so it was expected that the automatic code review wouldn’t raise any issues. But what happens if we have more complex code?</p> \n<p>Let’s take another example and use Amazon Q Developer to implement the feature for enabling image uploads on the website. I use the same flow I described in the previous section. However, I notice that the automated checks on the pull request flagged a warning this time, stating that the API generated to support image uploads on the backend is missing authorization checks effectively allowing direct public access. It explains the security risk in detail and provides useful links.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/security-warning-found-with-image-upload-full-view-with-message-of-q-working-on-fix-suggestion.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/security-warning-found-with-image-upload-full-view-with-message-of-q-working-on-fix-suggestion.png\" alt=\"\" width=\"945\" height=\"578\" /></a></p> \n<p>It then automatically generates a suggested code fix.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/generating-code-fix-suggestion-for-security-warning.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/generating-code-fix-suggestion-for-security-warning.png\" alt=\"\" width=\"948\" height=\"166\" /></a></p> \n<p>When it’s done, you can review the code and choose to Commit changes if you’re happy with the changes.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/commit-suggested-code-fix.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/commit-suggested-code-fix.png\" alt=\"\" width=\"759\" height=\"189\" /></a></p> \n<p>After fixing this and testing it, I’m happy with the code for this issue and move on applying the same process to other ones. I assign the Amazon Q development agent to each one of my remaining issues, wait for it to generate the code, and go through the iterative review process asking it to fix any issues for me along the way. I then test my application at the end of that software cycle and am very pleased to see that Amazon Q Developer managed to handle all issues, from project setup, to boilerplate code, to more complex backend and frontend. A true full-stack developer!</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/application-ready-after-all-issues-done.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/application-ready-after-all-issues-done.png\" alt=\"\" width=\"2234\" height=\"1062\" /></a></p> \n<p>I did notice some things that I wanted to change along the way. For example, it defaulted to using the Invoke API to send the uploaded images to Amazon Bedrock instead of the Converse API. However, because I didn’t state this in my requirements, it had no way of knowing. This highlights the importance of being as precise as possible in your issue’s titles and descriptions to give Q Developer the necessary context and make the development process as efficient as possible.</p> \n<p>Having said that, it’s still straightforward to review the generated code on the pull requests, add comments, and let the Amazon Q Developer agent keep working on changes until you’re happy with the final result. Alternatively, you can accept the changes in the pull request and create separate issues that you can assign to Q Developer later when you’re ready to develop them.</p> \n<p><span><strong>Code transformation</strong></span><br /> You can also transform legacy Java codebases to modern versions with Q Developer. Currently, it can update applications from Java 8 or Java 11 to Java 17, with more options coming in future releases.</p> \n<p>The process is very similar to the one I demonstrated earlier in this post, except for a few things.</p> \n<p>First, you need to create an issue within a GitHub repository containing a Java 8 or Java 11 application. The title and description don’t really matter in this case. It might even be a short title such as “Migration,” leaving the description empty. Then, on <strong>Labels,</strong> you assign the <strong>Amazon Q transform agent</strong> label to the issue.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/21/q-transform-label.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/04/21/q-transform-label.png\" alt=\"\" width=\"329\" height=\"481\" /></a></p> \n<p>Much like before, Amazon Q Developer will start working immediately behind the scenes before generating the code on a pull request that you can review. This time, however, it’s the Amazon Q transform agent doing the work which is specialized in code migration and will take all the necessary steps to analyze and migrate the code from Java 8 to Java 17.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/transform-starts-working.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/transform-starts-working.png\" alt=\"\" width=\"948\" height=\"355\" /></a></p> \n<p>Notice that it also needs a workflow to be created, as per the documentation. If you don’t have it enabled yet, it will display clear instructions to help you get everything set up before trying again.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/transform-needs-github-actions-enabled.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/05/01/transform-needs-github-actions-enabled.png\" alt=\"\" width=\"856\" height=\"177\" /></a></p> \n<p>As expected, the amount of time needed to perform a migration depends on the size and complexity of your application.</p> \n<p><span><strong>Conclusion</strong></span><br /> Using Amazon Q Developer in GitHub is like having a full-stack developer that you can collaborate with to develop new features, accelerate the code review process, and rely on to enhance the security posture and quality of your code. You can also use it to automate migration from Java 8 and 11 applications to Java 17 making it much easier to get started on that migration project that you might have been postponing for a while. Best of all, you can do all this from the comfort of your own GitHub environment.</p> \n<p><span><strong>Now available</strong></span><br /> You can now start using <a href=\"https://github.com/apps/amazon-q-developer\">Amazon Q Developer today for free in GitHub</a>, no AWS account setup needed.</p> \n<p>Amazon Q Developer in GitHub is currently in preview.</p> \n<p>— <a href=\"https://www.linkedin.com/in/codingmatheus/\">Matheus Guimaraes | codingmatheus</a></p> \n<hr /> \n<p>How is the News Blog doing? Take this <a href=\"https://amazonmr.au1.qualtrics.com/jfe/form/SV_eyD5tC5xNGCdCmi\">1 minute survey</a>!</p> \n<p><em>(This <a href=\"https://amazonmr.au1.qualtrics.com/jfe/form/SV_eyD5tC5xNGCdCmi\">survey</a> is hosted by an external company. AWS handles your information as described in the <a href=\"https://aws.amazon.com/privacy/?trk=4b29643c-e00f-4ab6-ab9c-b1fb47aa1708&amp;sc_channel=blog\">AWS Privacy Notice</a>. AWS will own the data gathered via this survey and will not share the information collected with survey respondents.)</em></p>","author":"Matheus Guimaraes","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"d327c7dfbedb0adc4efed8bce46d526ab64b1294be84756257852a2108e22d3b","category":"Tech"}