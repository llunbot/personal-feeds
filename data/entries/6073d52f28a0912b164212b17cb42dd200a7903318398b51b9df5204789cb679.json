{"title":"AWS and HashiCorp announce Service Catalog support for Terraform Cloud","link":"https://www.hashicorp.com/blog/aws-and-hashicorp-announce-service-catalog-support-for-terraform-cloud","date":1691690400000,"content":"<p>Earlier in 2023, Amazon Web Services <a href=\"https://aws.amazon.com/about-aws/whats-new/2023/04/aws-service-catalog-terraform-open-source/\">announced AWS Service Catalog support for Terraform Community</a>. Today, HashiCorp and AWS have announced <a href=\"https://aws.amazon.com/about-aws/whats-new/2023/08/aws-service-catalog-hashicorp-terraform-cloud/\">AWS Service Catalog support for Terraform Cloud</a>. Customers can now take advantage of the advanced governance and visibility features in their Terraform workflows by linking their Service Catalog product provisioning to HashiCorp’s <a href=\"https://www.hashicorp.com/products/terraform?ajs_aid=f2f92493-9c5f-44b7-92a7-d4430ebe3bfc&amp;product_intent=terraform\">Terraform Cloud</a>. </p>\n\n<h2>The AWS Service Catalog and Terraform Cloud workflow</h2>\n\n<p>Customers can now use <a href=\"https://aws.amazon.com/servicecatalog/\">AWS Service Catalog</a> as the single tool to organize, govern, and distribute their Terraform Cloud configurations within AWS at scale. This includes integrated access to key AWS Service Catalog features, including cataloging of standardized and pre-approved Terraform configurations, infrastructure as code templates, access control, resource provisioning with least-privilege access, versioning, sharing to thousands of AWS accounts, and tagging. </p>\n\n<p>The new feature allows administrators to curate a portfolio of pre-approved Terraform configurations on AWS Service Catalog. This enables end users like engineers, database administrators, and data scientists to deploy these Terraform configurations with a single action from the AWS interface. By combining Terraform Cloud with AWS Service Catalog, we’re combining a self-service interface that many customers are familiar with, AWS Service Catalog, with the existing workflows and policy guardrails of Terraform Cloud.</p>\n\n<p>End users can easily queue a Terraform configuration from the AWS Service Catalog interface, which generates a workspace for that workload and triggers a run on Terraform Cloud. As credentials are required to initiate a run, the project is configured with <a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/dynamic-credentials\">dynamic provider credentials</a>, which automatically authenticates the workspace to <em>plan</em> or <em>apply</em> the queued Terraform configuration. Once authenticated, the Terraform configuration provisions the desired resources on AWS. The end user never has to interface with Terraform Cloud or handle static credentials throughout the workflow.</p>\n\n<h2>Getting started</h2>\n\n<p>To initiate this feature, you can start by using the <a href=\"https://github.com/hashicorp/aws-service-catalog-engine-for-tfc\">AWS Service Catalog Engine for Terraform Cloud</a> provided by HashiCorp on GitHub and following the <a href=\"https://github.com/hashicorp/aws-service-catalog-engine-for-tfc#getting-started\">setup instructions</a> provided in its README. You’ll need a Terraform Cloud organization that supports <a href=\"https://www.hashicorp.com/products/terraform/pricing\">Team Management</a>. Everything else needed to get set up is included in the project's Terraform configuration. If you run into any setup troubles along the way, the README also includes <a href=\"https://github.com/hashicorp/aws-service-catalog-engine-for-tfc#troubleshooting\">troubleshooting steps</a> that should help resolve common issues that you may encounter.  </p>\n\n<p>The AWS Service Catalog Engine for Terraform Cloud is an integration that allows product cataloging and provisioning using Terraform.  With the engine installed into your account, the necessary code and infrastructure to integrate the Terraform Cloud engine with AWS Service Catalog will automatically be configured. The setup can be completed in just a few minutes, and it needs to be done only once. Once the setup is complete, you can immediately start using AWS Service Catalog to develop and manage AWS Service Catalog products, and make them accessible to your end users across all your accounts.</p>\n\n<p>You can access this new feature through the <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/adminguide/getstarted-terraform-engine-cloud.html\">AWS Service Catalog console</a> in any <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/\">AWS regions</a> where AWS Service Catalog is supported.</p>\n<h2>About Terraform Cloud</h2>\n\n<p><a href=\"https://www.hashicorp.com/products/terraform\">HashiCorp Terraform</a> is the world’s most widely used multi-cloud provisioning product. The Terraform ecosystem has more than <a href=\"https://registry.terraform.io/\">3,000 providers</a>, 14,000 modules, and 250 million downloads. Terraform Cloud is the fastest way to adopt Terraform, providing everything practitioners, teams, and global businesses need to create and collaborate on infrastructure and manage risks for security, compliance, and operational constraints. </p>\n<p>If you are currently using Terraform Community or are completely new to Terraform, you can <a href=\"http://hashi.co/tf-cloud-bc\">sign up for Terraform Cloud</a> and get started using the Free offering today.</p>\n","author":"Mike Doheny","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"6073d52f28a0912b164212b17cb42dd200a7903318398b51b9df5204789cb679","category":"Tech"}