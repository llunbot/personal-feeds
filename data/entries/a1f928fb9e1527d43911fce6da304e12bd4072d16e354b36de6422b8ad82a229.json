{"title":"Using HashiCorp Consul with Kong Ingress Controller for Kubernetes","link":"https://www.hashicorp.com/blog/using-hashicorp-consul-with-kong-ingress-controller-for-kubernetes","date":1627412400000,"content":"<p>Kubernetes ingress allows you to define and route traffic to services within a cluster — what is traditionally known as north-south traffic management. By combining a <a href=\"https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/\">Kubernetes Ingress Controller</a> with a service mesh, you can not only manage traffic to services but also between services in the cluster (called east-west traffic management). Ingress and service mesh resources can more effectively define and secure service-to-service communication.</p>\n<p>In this post, you’ll learn how to use the Kong Ingress Controller for Kubernetes with the new <a href=\"https://www.consul.io/docs/connect/transparent-proxy\">transparent proxy</a> feature in Consul service mesh. Our example deploys a Consul cluster and Kong Ingress Controller to a Kubernetes cluster on Google Kubernetes Engine. You can use any Kubernetes cluster as long as it supports the <a href=\"https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer\">service type for <code>LoadBalancer</code></a>. The example uses a load balancer to expose the Consul UI and Kong proxy for external access. You will also need a Consul version (greater than 1.10) that supports <a href=\"https://www.consul.io/docs/connect/transparent-proxy\">transparent proxy</a>.</p>\n<p>After deploying Kong ingress and a Consul cluster, you will define and control traffic to Kong Gateway, a <code>ui</code> service, and a <code>web</code> service using Consul intentions. Once you have properly configured this, you can use Kong’s <a href=\"https://docs.konghq.com/hub/kong-inc/rate-limiting/\">rate-limiting plugin</a> to limit the requests to the <code>ui</code> service and manage north-south traffic. In order to control internal traffic between <code>ui</code> and <code>web</code>, you can use Consul’s <a href=\"https://www.consul.io/docs/connect/config-entries/service-splitter\">service splitter</a> to manage east-west traffic as you split traffic between two versions of the web service.</p><img src=\"https://www.datocms-assets.com/2885/1627315519-servicesdiagram.png\" /><h2><a href=\"#deploy-consul-to-kubernetes\">»</a><a></a>Deploy Consul to Kubernetes</h2>\n<p>To get started, you must deploy Consul to Kubernetes before creating the Kong Ingress Controller. This is because in order to add Kong ingress to a Consul service mesh, your Kubernetes cluster needs the Consul webhook to inject its sidecar proxies.</p>\n<p>First, let’s add the HashiCorp Helm repository:</p>\n<pre><code>$ helm repo <span>add</span> hashicorp https://helm.releases.hashicorp.com\n</code></pre>\n<p>Update the Consul Helm chart:</p>\n<pre><code>$ helm repo update\n</code></pre>\n<p>Next, we need to define the Consul <a href=\"https://github.com/hashicorp/consul-helm/blob/master/values.yaml\">values</a> for the Helm chart. The values should configure one Consul server, enable access control lists (<a href=\"https://learn.hashicorp.com/tutorials/consul/access-control-setup-production\">ACLs</a>), enable Consul transparent proxy (by default), start the Consul controller, and set up the Consul UI with a load balancer:</p><pre><code>$ cat &lt; consul.yaml\nglobal:\n name: consul\n datacenter: kubernetes\n acls:\n   manageSystemACLs: true\n\nserver:\n replicas: 1\n\nclient:\n enabled: true\n\nconnectInject:\n enabled: true\n\nui:\n enabled: true\n service:\n   type: LoadBalancer\n\ncontroller:\n enabled: true\nEOF</code></pre><p>Then, we install Consul using <a href=\"https://github.com/hashicorp/consul-helm\">its Helm chart</a> to the <code>default</code> namespace. The command will use the chart version <code>v0.32.1</code>:</p>\n<pre><code>$ helm <span>install</span> consul hashicorp/consul --version v0.32.1 --values consul.yaml\n</code></pre>\n<p>You should have pods for the Consul server, controller, injector for sidecar proxies, and Consul clients for each Kubernetes node:</p><pre><code>$ kubectl get pods -l='app=consul'\n\nNAME                                                          READY   STATUS    RESTARTS   AGE\nconsul-2dk68                                                  1/1     Running   0          58s\nconsul-b2sv9                                                  1/1     Running   0          58s\nconsul-connect-injector-webhook-deployment-7864bb5f76-5kbdj   1/1     Running   0          58s\nconsul-connect-injector-webhook-deployment-7864bb5f76-psw9m   1/1     Running   0          58s\nconsul-controller-56657f6db6-lvxcg                            1/1     Running   0          58s\nconsul-server-0                                               1/1     Running   0          57s\nconsul-vzxn2                                                  1/1     Running   0          58s\nconsul-webhook-cert-manager-57bb5c668d-b8st6                  1/1     Running   0          58s</code></pre><p>You can access the Consul UI at the IP address of the load balancer. Set the <code>CONSUL_HTTP_ADDR</code> environment variable to the load balancer’s IP address for additional debugging:</p><pre><code>$ export CONSUL_HTTP_ADDR=$(kubectl get service consul-ui  -o jsonpath='{.status.loadBalancer.ingress[0].ip}')</code></pre><p>The example enables system ACLs, which means you need a Consul token to log into the UI and access its API. You can retrieve the token in a Kubernetes secret and set it to <code>CONSUL_HTTP_TOKEN</code> in your terminal:</p><pre><code>$ export CONSUL_HTTP_TOKEN=$(kubectl get secrets consul-bootstrap-acl-token -o jsonpath='{.data.token}' | base64 -d)</code></pre><p>This example uses Consul’s application-aware intentions and traffic shaping. Set the protocol for <a href=\"https://www.consul.io/docs/connect/config-entries/proxy-defaults\">proxy defaults</a> to <code>http</code> to ensure you can configure Consul:</p><pre><code>$ cat &lt;</code></pre><h2><a href=\"#deploy-kong-ingress-controller-for-kubernetes\">»</a><a></a>Deploy Kong Ingress Controller for Kubernetes</h2>\n<p>Now that we have set up Consul, we can deploy the Kong Ingress Controller. You can define values for the <a href=\"https://github.com/Kong/charts/tree/main/charts/kong\">Kong for Kubernetes Helm chart</a> to inject a Consul sidecar proxy. The Kong Helm chart includes many components, but you only need the ingress controller and the API gateway (called <code>proxy</code> in the chart).</p>\n<p>Add the Kong Helm repository:</p>\n<pre><code>$ helm repo <span>add</span> kong https://charts.konghq.com\n</code></pre>\n<p>Update the Kong for Kubernetes Helm chart:</p>\n<pre><code>$ helm repo update\n</code></pre>\n<p>Be sure to set an environment variable with the name of your Helm release for Kong. You will need to set this before you deploy the chart because you have Consul ACLs enabled. Kong must have a service account name that matches its Helm release name in order to properly authenticate to Consul:</p>\n<pre><code>$ <span>export</span> <span>KONG_RELEASE</span><span>=</span>external\n</code></pre>\n<p>Define the Kong values in a file called <code>kong.yaml</code>. Kong’s service account must match its service name, which the Kong chart defines as <code>${KONG_RELEASE}-kong-proxy</code>. You want to register the <code>kong-proxy</code> service instead of the ingress controller to allow Consul to manage traffic between the ingress and its upstream UI service:</p><pre><code>$ cat &lt; kong.yaml\ningressController:\n serviceAccount:\n   name: ${KONG_RELEASE}-kong-proxy\n\npodAnnotations:\n consul.hashicorp.com/connect-inject: \"true\"\n consul.hashicorp.com/transparent-proxy-exclude-inbound-ports: 8000,8443\nEOF</code></pre><p>The Kong values include two pod annotations. The annotation for <code>consul.hashicorp.com/connect-inject</code> injects the Consul sidecar proxy. <code> consul.hashicorp.com/transparent-proxy-exclude-inbound-ports</code> allows access from the Kong load balancer to its API gateway. Transparent proxy enforces that any traffic in the cluster reaches only its intended destination. As a result, you must add an exception to Consul’s transparent proxy for traffic from load balancers to specific service ports.</p>\n<p>Install Kong for Kubernetes to the <code>default</code> namespace. The command will use the chart version <code>2.2.0</code>. (Note: You may receive a few warnings regarding deprecations for<code>CustomResourceDefinitions</code>. Refer to the <a href=\"https://github.com/Kong/charts/tree/main/charts/kong\">Kong for Kubernetes Helm chart</a> for updates.):</p>\n<pre><code>$ helm <span>install</span> <span>${KONG_RELEASE}</span> kong/kong --version <span>2.2</span>.0 --values kong.yaml\n</code></pre>\n<p>You can check on the Kong pod in Kubernetes. Its containers include the Kong Ingress Controller, Kong gateway proxy, and Consul proxy:</p><pre><code>$ kubectl get pods -l='app.kubernetes.io/name=kong' \n\nNAME                             READY   STATUS    RESTARTS   AGE\nexternal-kong-67cf5ffd69-9pt7r   3/3     Running   0          132m</code></pre><p>When you check the Consul service catalog, you should have a service for <code>external-kong-proxy</code> and its sidecar, <code>external-kong-proxy-sidecar-proxy</code>. This means that you successfully injected a Consul sidecar proxy and added Kong’s API gateway to Consul service mesh:</p><pre><code>$ consul catalog services\n\nconsul\nexternal-kong-proxy\nexternal-kong-proxy-sidecar-proxy</code></pre><p>Set the Consul <a href=\"https://www.consul.io/docs/connect/config-entries/service-defaults\">service default</a> for Kong to <code>http</code>, which will allow you to configure <a href=\"https://learn.hashicorp.com/tutorials/consul/service-mesh-application-aware-intentions\">application-aware intentions</a> for HTTP request management:</p><pre><code>$ cat &lt;</code></pre><h2><a href=\"#deploy-an-example-workload\">»</a><a></a>Deploy an Example Workload</h2>\n<p>With Consul and Kong running, you can now deploy two example services, <code>ui</code> and <code>web</code>, and configure routing between them.</p>\n<p>Deploy the <code>web</code> service to the <code>default</code> namespace. It should include version 1 of the <code>web</code> service, deployment, service account, and Consul service defaults:</p><pre><code>$ cat &lt;</code></pre><p>Next, deploy the <code>ui</code> service to the <code>default</code> namespace. It should include the <code>ui</code> service, deployment, service account, and Consul service defaults. The <code>ui</code> service connects to the <code>web</code> service for backend processing. In the deployment, you define this as an environment variable labeled <code>UPSTREAM_URIS</code> and direct it to the <code>web</code> service:</p><pre><code>$ cat &lt;</code></pre><p>The Consul cluster uses <a href=\"https://www.consul.io/docs/connect/transparent-proxy\">transparent proxy</a> by default to resolve any Kubernetes DNS names to services. As a result, it will automatically resolve to the <code>web</code> service. However, transparent proxy enforces traffic between services in the cluster. You need to authorize communication between the <code>ui</code> and <code>web</code> services.</p>\n<p>Create an app-aware intention in Kubernetes. The intention should allow any GET requests from <code>ui</code> service to <code>/</code> or <code>/favicon.ico</code> endpoints on the <code>web</code> service. When you create it, Consul propagates the configuration to proxies for <code>ui</code> and <code>web</code> services and allows communication between them:</p><pre><code>$ cat &lt;</code></pre><p>You can verify this by forwarding the <code>ui</code> service to port 8080 on your machine:</p>\n<pre><code>$ kubectl port-forward svc/ui <span>8080</span>:80\n</code></pre>\n<p>In a separate shell, make an API request to the UI service. It should return a JSON object that identifies a successful <code>upstream_call</code> to the <code>web</code> service:</p><pre><code>$ curl localhost:8080/\n\n{\n  \"name\": \"UI\",\n  \"uri\": \"/\",\n  \"type\": \"HTTP\",\n  \"ip_addresses\": [\n    \"10.84.2.8\"\n  ],\n  \"start_time\": \"2021-07-14T20:41:45.417155\",\n  \"end_time\": \"2021-07-14T20:41:45.426953\",\n  \"duration\": \"9.797902ms\",\n  \"body\": \"UI\",\n  \"upstream_calls\": {\n    \"http://web\": {\n      \"name\": \"Web (v1)\",\n      \"uri\": \"http://web\",\n      \"type\": \"HTTP\",\n      \"ip_addresses\": [\n        \"10.84.1.17\"\n      ],\n      \"start_time\": \"2021-07-14T20:41:45.425330\",\n      \"end_time\": \"2021-07-14T20:41:45.425618\",\n      \"duration\": \"288.317µs\",\n      \"headers\": {\n        \"Content-Length\": \"254\",\n        \"Content-Type\": \"text/plain; charset=utf-8\",\n        \"Date\": \"Wed, 14 Jul 2021 20:41:45 GMT\",\n        \"Server\": \"envoy\",\n        \"X-Envoy-Upstream-Service-Time\": \"0\"\n      },\n      \"body\": \"Web (v1)\",\n      \"code\": 200\n    }\n  },\n  \"code\": 200\n}</code></pre><p>Return to your original terminal and close the connection to Kubernetes port forwarding.</p>\n<h2><a href=\"#rate-limit-requests-to-a-kubernetes-service\">»</a><a></a>Rate Limit Requests to a Kubernetes Service</h2>\n<p>You want to allow anyone to access the <code>ui</code> service through Kong’s ingress. By directing all requests through Kong, you can audit and control the number of requests to the <code>ui</code> service. <a href=\"https://docs.konghq.com/hub/kong-inc/rate-limiting/\">Kong’s rate-limiting plugin</a> sets a limit to how many HTTP requests an upstream service can serve in a given amount of time.</p>\n<p>Imagine the <code>ui</code> service can handle only 30 requests per minute. You can install the rate-limiting plugin to Kong and configure the policy to limit the number of requests:</p><pre><code>$ cat &lt;</code></pre><p>Define a Kubernetes Ingress resource that uses Kong for Kubernetes and its rate-limiting plugin. The resource allows traffic to the <code>ui</code> service on port 80 but will apply the rate-limit if <code>ui</code> receives more than 30 requests per minute:</p><pre><code>$ cat &lt;</code></pre><p>You need to configure Consul to allow communication between the Kong gateway and the <code>ui</code> service. Create an intention that allows the proxy to direct external requests to the <code>/</code> and <code>/ui</code> endpoints:</p><pre><code>$ cat &lt;</code></pre><p>To verify that you rate-limited requests to the <code>ui</code> service, copy the Kong proxy IP address from Kubernetes. Open your browser and enter the Kong proxy’s IP address and go to the <code>/ui</code> path:</p><pre><code>$ open http://$(kubectl get service ${KONG_RELEASE}-kong-proxy  -o jsonpath='{.status.loadBalancer.ingress[*].ip}')/ui</code></pre><p>If you quickly refresh the browser a few times, you may receive an error from Kong’s proxy that you have hit the API rate limit.</p><img src=\"https://www.datocms-assets.com/2885/1627315514-kongratelimit.gif\" /><h2><a href=\"#shape-traffic-between-kubernetes-services\">»</a><a></a>Shape Traffic between Kubernetes Services</h2>\n<p>Besides shaping inbound requests to services with Kong API gateway, you can use Consul to shape requests between services in a Kubernetes cluster. For example, you may need to update the <code>web</code> service from version 1 to version 2. However, you do not want to deploy version 2 and send all requests from <code>ui</code> to a new version without testing it! You want to increase traffic to the new version gradually.</p>\n<p>Apply a new deployment for version 2 of the <code>web</code> service to the <code>default</code> namespace. Consul will register the new version as a new instance under the <code>web</code> service:</p><pre><code>$ cat &lt;</code></pre><p>Create a Consul <a href=\"https://www.consul.io/docs/connect/config-entries/service-resolver\">service resolver</a> to define the service subsets for version 1 and version 2. It references the service metadata you set as part of the <code>consul.hashicorp.com/service-meta-version: v2</code> annotation in the deployment:</p><pre><code>$ cat &lt;</code></pre><p>To start sending traffic to version 2 of the <code>web</code> service, create a Consul <a href=\"https://www.consul.io/docs/connect/config-entries/service-splitter\">service splitter</a> to send 50% of traffic to version 1 and 50% to version 2:</p><pre><code>$ cat &lt;</code></pre><p>Consul will direct any requests from the <code>ui</code> service to each version of the <code>web</code> service. If you examine the routing for the <code>web</code> service in the Consul UI, you can verify the 50% traffic weight configured for the service splitter.</p><img src=\"https://www.datocms-assets.com/2885/1627315495-consulrouting.png\" /><p>To verify that you correctly configured Consul to split traffic between the two versions, copy the Kong proxy IP address from Kubernetes. Open your browser and enter the Kong proxy’s IP address with a path to <code>/ui</code>:</p><pre><code>$ open http://$(kubectl get service ${KONG_RELEASE}-kong-proxy  -o jsonpath='{.status.loadBalancer.ingress[*].ip}')/ui</code></pre><p>If you refresh the browser a few times, you’ll notice that some requests go to <code>Web (v2)</code> and others go to <code>Web (v1)</code> before your requests exceed Kong’s rate limit.</p><img src=\"https://www.datocms-assets.com/2885/1627315506-consulsplitter.gif\" /><h2><a href=\"#conclusion\">»</a><a></a>Conclusion</h2>\n<p>This post covered how to add Kong for Kubernetes to Consul’s service mesh, configure rate-limiting for external requests to a service, enforce network policies with intentions, and split traffic between two versions of a service. By using Consul with Kong’s Ingress Controller, you can control, secure, and shape north-south and east-west traffic for Kubernetes services.</p>\n<p>For additional information on transparent proxy for Consul, review <a href=\"https://www.consul.io/docs/connect/transparent-proxy\">its documentation</a>. You can learn more about managing traffic with Consul service mesh in our <a href=\"https://learn.hashicorp.com/tutorials/consul/service-mesh-traffic-management?in=consul/gs-consul-service-mesh\">Learn tutorials</a>.</p>\n<p><em>Questions about this post? Add them to the <a href=\"https://discuss.hashicorp.com/c/consul/29\">community forum</a>.</em></p>","author":"Rosemary Wang","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"a1f928fb9e1527d43911fce6da304e12bd4072d16e354b36de6422b8ad82a229","category":"Tech"}