{"title":"Badging for Home Screen Web Apps","link":"https://webkit.org/blog/14112/badging-for-home-screen-web-apps/","date":1682445631000,"content":"<p>Along with the many other <a href=\"https://webkit.org/blog/13878/web-push-for-web-apps-on-ios-and-ipados/\">features for web apps</a> on iOS and iPadOS 16.4, WebKit now includes support for the W3C’s <a href=\"https://w3c.github.io/badging/\">Badging API</a>.</p>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/badged_dock.png\" alt=\"A badged web application icon in the iOS dock showing the number 15.\" width=\"960\" height=\"267\" srcset=\"https://webkit.org/wp-content/uploads/badged_dock.png 960w, https://webkit.org/wp-content/uploads/badged_dock-300x83.png 300w, https://webkit.org/wp-content/uploads/badged_dock-768x214.png 768w\" /></p>\n<p>This straightforward API allows web developers to badge the icon of a web app. This article explores the various features of the Badging API and how to use it, and our ongoing collaboration with W3C’s <a href=\"https://www.w3.org/groups/wg/webapps\">Web Applications Working Group</a> to improve the specification.</p>\n<h2>Home Screen Web App Availability</h2>\n<p>In iOS and iPadOS 16.4, the Badging API is available exclusively for web apps the user has added to their home screen. You won’t find the API exposed to websites in Safari or other browsers, or in any app that uses WKWebView.</p>\n<p>You can easily check for the availability of the API using feature detection for the <code>setAppBadge</code> function:</p>\n<pre><code><span>if</span> (<span>'setAppBadge'</span> <span>in</span> <span>navigator</span>) {\n  <span>// API is available...\n</span>}  \n</code></pre>\n<h2>Badges and Notifications</h2>\n<p>On iOS and iPadOS, badging has always been closely tied to notifications.</p>\n<p>Apps built for macOS, iOS, and iPadOS are free to set their badge counts through platform specific APIs whenever they like. The user must grant the app permission to display notifications before the badge will appear.</p>\n<p>Similarly, web apps are free to call <code>setAppBadge()</code> whenever they like, but the badge will only appear if the user has granted notifications permission.</p>\n<p>To request notification permission, call <code>Notification.requestPermission()</code> as part of a <a href=\"https://webkit.org/blog/13862/the-user-activation-api/#:~:text=So%20what%20constitutes%20a%20%E2%80%9Cuser%20activation%E2%80%9D\">user activation</a> (such as a button click):</p>\n<pre><code><span>&lt;<span>button</span> <span>onclick</span>=<span>\"requestNotificationPermission()\"</span>&gt;</span>\n  Request notifications permission\n<span>&lt;/<span>button</span>&gt;</span>\n\n<span>&lt;<span>script</span>&gt;</span>\n  async function requestNotificationPermission() {\n    const permission = await Notification.requestPermission();\n    if (permission === 'granted') {\n      // You can now use the Badging API\n    }\n  }\n<span>&lt;/<span>script</span>&gt;</span>\n</code></pre>\n<p>iOS and iPadOS will show this system prompt to the user for permission:</p>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/notification_transparent.png\" alt=\"A browser permission prompt for asking the user to allow web notifications.\" width=\"812\" height=\"538\" srcset=\"https://webkit.org/wp-content/uploads/notification_transparent.png 812w, https://webkit.org/wp-content/uploads/notification_transparent-300x199.png 300w, https://webkit.org/wp-content/uploads/notification_transparent-768x509.png 768w\" /></p>\n<p>You can also check if a user has previously granted notifications permission by using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API\">Permissions API</a>:</p>\n<pre><code><span>async</span> <span>function</span> <span>checkNotificationPermission</span>() {\n  <span>const</span> <span>permissionStatus</span> <span>=</span> <span>await</span> <span>navigator</span>\n    .<span>permissions</span>\n    .<span>query</span>({ <span>name</span><span>:</span> <span>'notifications'</span> });\n\n  <span>switch</span> (<span>permissionStatus</span>.<span>state</span>) {\n    <span>case</span> <span>'granted'</span><span>:</span>\n      <span>// You can use the Badging API\n</span>      <span>break</span>;\n    <span>case</span> <span>'denied'</span><span>:</span>\n      <span>// The user has denied the permission\n</span>      <span>break</span>;\n    <span>default</span><span>:</span>\n      <span>// The user has not yet granted or denied the permission\n</span>      <span>await</span> <span>requestNotificationPermission</span>();\n      <span>break</span>;\n  }\n}\n<span>checkNotificationPermission</span>();\n</code></pre>\n<p>Note that even though the user may have granted notifications permission, they remain in control of that permission through iOS or iPadOS Settings. As some users find badges distracting, they might leave the notifications permission enabled,  but choose not to show the badge.</p>\n<p>To retain user privacy, we never expose this user preference to the web app.</p>\n<h2>Setting and Clearing a Badge From a Web App</h2>\n<p>App badges represent the number of items requiring the user’s attention (e.g., “you have 5 unread messages“). What the number means is application dependent.</p>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/badger.png\" alt=\"An application badge icon showing a badge with the number 5.\" width=\"286\" height=\"316\" srcset=\"https://webkit.org/wp-content/uploads/badger.png 286w, https://webkit.org/wp-content/uploads/badger-272x300.png 272w\" /></p>\n<p>To update the application icon badge, pass a positive number to the <code>navigator.setAppBadge()</code> method:</p>\n<pre><code><span>async</span> <span>function</span> <span>setBadge</span>(<span>count</span>) {\n  <span>if</span> (<span>'setAppBadge'</span> <span>in</span> <span>navigator</span>) {\n    <span>try</span> {\n      <span>await</span> <span>navigator</span>.<span>setAppBadge</span>(<span>count</span>);\n    } <span>catch</span> (<span>error</span>) {\n      <span>console</span>.<span>error</span>(<span>'Failed to set app badge:'</span>, <span>error</span>);\n    }\n  }\n}\n\n<span>// Set the badge count to 5\n</span><span>setBadge</span>(<span>5</span>);\n</code></pre>\n<p>You can clear the badge by using <code>navigator.clearAppBadge()</code>.</p>\n<pre><code><span>async</span> <span>function</span> <span>clearBadge</span>() {\n  <span>if</span> (<span>'clearAppBadge'</span> <span>in</span> <span>navigator</span>) {\n    <span>try</span> {\n      <span>await</span> <span>navigator</span>.<span>clearAppBadge</span>();\n    } <span>catch</span> (<span>error</span>) {\n      <span>console</span>.<span>error</span>(<span>'Failed to clear app badge:'</span>, <span>error</span>);\n    }\n  }\n}\n\n<span>// Clear the badge\n</span><span>clearBadge</span>();\n</code></pre>\n<p>Alternatively, calling <code>navigator.setAppBadge(0)</code> is equivalent to calling <code>navigator.clearAppBadge()</code>.</p>\n<h2>Using the API From a Service Worker</h2>\n<p>In addition to being exposed to <code>window</code> objects, the Badging API is exposed in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">Web Worker</a> contexts.</p>\n<p>This makes it particularly useful for apps that support <a href=\"https://webkit.org/blog/12945/meet-web-push/\">Web Push</a> as it is trivial to update your application badge while your <a href=\"https://www.w3.org/TR/service-workers/\">Service Worker</a> handles a <code>push</code> event.</p>\n<pre><code><span>// Function to determine the badge count based on the event data\n</span><span>function</span> <span>determineBadgeCount</span>(<span>data</span>) {\n  <span>// Process the data to compute the badge count\n</span>}\n\n<span>self</span>.<span>addEventListener</span>(<span>'push'</span>, (<span>event</span>) <span>=</span><span>&gt;</span> {\n  <span>let</span> <span>promises</span> <span>=</span> [];\n\n  <span>if</span> (<span>'setAppBadge'</span> <span>in</span> <span>self</span>.<span>navigator</span>) {\n    <span>const</span> <span>badgeCount</span> <span>=</span> <span>determineBadgeCount</span>(<span>event</span>.<span>data</span>);\n    <span>// Promise to set the badge\n</span>    <span>const</span> <span>promise</span> <span>=</span> <span>self</span>.<span>navigator</span>.<span>setAppBadge</span>(<span>badgeCount</span>);\n    <span>promises</span>.<span>push</span>(<span>promise</span>);\n  }\n\n  <span>// Promise to show a notification\n</span>  <span>promises</span>.<span>push</span>(<span>self</span>.<span>registration</span>.<span>showNotification</span>(<span>\"You've got mail!\"</span>));\n\n  <span>// Finally...\n</span>  <span>event</span>.<span>waitUntil</span>(<span>Promise</span>.<span>all</span>(<span>promises</span>));\n});\n</code></pre>\n<p>When requesting a push subscription you must promise that all pushes will be user visible events. This means that each <code>push</code> event you process <em>must</em> result in a user visible notification being displayed with a call to <code>self.registration.showNotification()</code></p>\n<p>You are encouraged to update your application badge when handling a <code>push</code> event, but a <em>badge update by itself</em> does not fulfill the “user visible” requirement; Keep showing those notifications!</p>\n<h2>Security Restrictions for Third-Party </h2>\n<p>When the user added your web app to their Home Screen, they were indicating their trust in you as a first party.</p>\n<p>JavaScript that calls <code>navigator.setAppBadge()</code> in an attempt to update the badge count must come from a frame that is the same-origin as your top-level document. Calls to <code>navigator.setAppBadge()</code> from cross-origin frames have no effect.</p>\n<h2>Evolving the Badging API at the W3C</h2>\n<p>We’re collaborating with the W3C Web Applications Working Group and its members, particularly with Microsoft who have partnered with us as co-editors of the Badging API specification. This collaboration allows us to create a more consistent, secure, and privacy-preserving API across browsers and operating systems. The Badging API specification was previously edited by folks from Google. We’re excited to work with the W3C membership to continue its evolution.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"2dfefabeba4e26e726cd0b0b2f3e6f9a417326c10f24182918098652668edd46","category":"Tech"}