{"title":"Enabling the Inspection of Web Content in Apps","link":"https://webkit.org/blog/13936/enabling-the-inspection-of-web-content-in-apps/","date":1679338488000,"content":"<p>Web Inspector is a powerful tool that allows you to debug the layout of web pages, step through JavaScript, read messages logged to the console, and more. In Safari on macOS, you can use Web Inspector to inspect web pages, extensions, and service workers. iOS and iPadOS allow inspection of the same content as macOS, with the addition of Home Screen web apps.</p>\n<p>Web content and JavaScript is used for various purposes in apps, from providing UI from a webpage to enabling apps to be scriptable. Previously, Web Inspector supported inspecting developer-provisioned apps built directly from Xcode for local development, meaning developers could debug this content so long as the app is installed for development. However, released versions of apps had no way to inspect dynamic web content or scripts, leaving developers and users to have to resort to more complicated workflows to get information that would otherwise be made available by Web Inspector. Now, this same functionality is available through an API on <code>WKWebView</code> and <code>JSContext</code>.</p>\n<h2>How do I enable inspection?</h2>\n<p>Across all platforms supporting <code>WKWebView</code> or <code>JSContext</code>, a new property is available called <code>isInspectable</code> (<code>inspectable</code> in Objective-C). It defaults to <code>false</code>, and you can set it to <code>true</code> to opt-in to content being inspectable. This decision is made for each individual <code>WKWebView</code> and <code>JSContext</code> to prevent unintentionally making it enabled for a view or context you don’t intend to be inspectable. So, for example, to make a <code>WKWebView</code> <a href=\"https://developer.apple.com/documentation/webkit/wkwebview/4111163-inspectable/\"><code>inspectable</code></a>, you would:</p>\n<h6>Swift</h6>\n<pre><code><span>let</span> webConfiguration <span>=</span> WKWebViewConfiguration()\n<span>let</span> webView <span>=</span> WKWebView(frame<span>:</span> .zero, configuration<span>:</span> webConfiguration)\nwebView.isInspectable <span>=</span> <span>true</span>\n</code></pre>\n<h6>Objective-C</h6>\n<pre><code>WKWebViewConfiguration *webConfiguration = [WKWebViewConfiguration new];\nWKWebView *webView = [[WKWebView alloc] initWithFrame:CGRectZero configuration:webConfiguration];\nwebView.inspectable = YES;\n</code></pre>\n<p>For <code>JSContext</code>, <a href=\"https://developer.apple.com/documentation/javascriptcore/jscontext/4111147-inspectable/\">matching API is available</a>, with the addition of <a href=\"https://developer.apple.com/documentation/javascriptcore/4111149-jsglobalcontextsetinspectable\">C API</a> for developers using <code>JSGlobalContextRef</code>:</p>\n<h6>Swift</h6>\n<pre><code><span>let</span> jsContext <span>=</span> JSContext()\njsContext<span>?</span>.isInspectable <span>=</span> <span>true</span>\n</code></pre>\n<h6>Objective-C</h6>\n<pre><code>JSContext *jsContext = [JSContext new];\njsContext.inspectable = YES;\n</code></pre>\n<h6>C</h6>\n<pre><code><span>JSGlobalContextRef</span> <span>jsContextRef</span> = <span>JSGlobalContextCreate</span>(<span>NULL</span>);\n<span>JSGlobalContextSetInspectable</span>(<span>jsContextRef</span>, <span>true</span>);\n</code></pre>\n<p>The <code>inspectable</code> property can be changed at any point during the lifetime of your <code>WKWebView</code> or <code>JSContext</code>. Disabling inspection while Web Inspector actively inspects the content will automatically close Web Inspector, and no further information about the content will be available.</p>\n<p>Once you’ve enabled inspection for your app, you can inspect it from Safari’s Develop menu in the submenu for either your current computer or an attached device. For iOS and iPadOS, you must also have enabled Web Inspector in the Settings app under <strong>Safari</strong> &gt; <strong>Advanced</strong> &gt; <strong>Web Inspector</strong>. You do not need to enable Web Inspector for simulators; it is always enabled. <a href=\"https://webkit.org/web-inspector/enabling-web-inspector/\">Learn more about enabling Web Inspector…</a></p>\n<figure>\n<img loading=\"lazy\" width=\"2010\" height=\"810\" src=\"https://webkit.org/wp-content/uploads/Inspectable-Light.png\" alt=\"Develop Menu &gt; Patrick's iPhone &gt; Example App\" srcset=\"https://webkit.org/wp-content/uploads/Inspectable-Light.png 2010w, https://webkit.org/wp-content/uploads/Inspectable-Light-300x121.png 300w, https://webkit.org/wp-content/uploads/Inspectable-Light-1024x413.png 1024w, https://webkit.org/wp-content/uploads/Inspectable-Light-768x309.png 768w, https://webkit.org/wp-content/uploads/Inspectable-Light-1536x619.png 1536w\" />\n\n</figure>\n<h2>When should I consider making content inspectable?</h2>\n<p>A common situation in which you may want the content of <code>WKWebView</code> to be inspectable is in an in-app web browser. The browser shows ordinary web content that would be inspectable when loaded in Safari. It can be beneficial both for the app developer, as well as web authors, to be able to inspect content in these views, as the size of the view may not match that of Safari’s, or the app developer may be injecting script into the view to provide integration with their app.</p>\n<p>Web content is often dynamic, delivered by a server—not in the app—and easily changed over time. Unfortunately, not all issues can or will get debugged by folks with access to a developer-provisioned copy of your app.</p>\n<p><code>JSContext</code> can also enable scripting in an app whereby the customer provides the scripts to augment the app. Without the ability for a release version of your app to adopt inspectability, your customers may have no way to debug the scripts they have written. It makes it harder for customers to use this functionality of your app.</p>\n<h2>Provide readable names for inspectable <code>JSContext</code>s</h2>\n<p>Unlike <code>WKWebView</code>, which automatically gets a name based on the page currently loaded in the view, every <code>JSContext</code> with <code>inspectable</code> enabled will be listed as <strong>JSContext</strong> in Safari’s Develop menu. We recommend providing a unique, human-readable name for each inspectable <code>JSContext</code> to make it easier for you and your customers to determine what the <code>JSContext</code> represents. For example, if your app runs different pieces of JavaScript on behalf of the user, you should give each <code>JSContext</code> a name based on what runs inside the context.</p>\n<p>API is available to set the user-visible <a href=\"https://developer.apple.com/documentation/javascriptcore/jscontext/1451399-name\"><code>name</code></a> of a <code>JSContext</code>:</p>\n<h6>Swift</h6>\n<pre><code><span>let</span> jsContext <span>=</span> JSContext()\njsContext<span>?</span>.name <span>=</span> <span>\"Context name\"</span>\n</code></pre>\n<h6>Objective-C</h6>\n<pre><code>JSContext *jsContext = [JSContext new];\njsContext.name = @\"Context name\";\n</code></pre>\n<h6>C</h6>\n<pre><code><span>JSGlobalContextRef</span> <span>jsContextRef</span> = <span>JSGlobalContextCreate</span>(<span>NULL</span>);\n`<span>JSGlobalContextSetName</span>`(<span>jsContextRef</span>, <span>JSStringCreateWithUTF8CString</span>(<span>\"Context name\"</span>));\n</code></pre>\n<h2>Working with older versions of macOS and iOS</h2>\n<p>For apps linked against an SDK before macOS 13.3 and iOS 16.4 <code>WKWebView</code>s and <code>JSContext</code>s will continue to follow the previous behavior of always being inspectable when built for debugging from Xcode.</p>\n<p>Apps that support older versions of macOS and iOS while linked against the most recent SDK will not get the previous behavior of all content being inspectable in debug builds to avoid confusion about what will and will not be inspectable by customers. Apps targeting older OS versions but linking against the new SDK can use this new API conditionally on OS versions that support it. To conditionally guard usage of the API:</p>\n<h6>Swift</h6>\n<pre><code><span>if</span> #available(macOS <span>13.3</span>, iOS <span>16.4</span>, tvOS <span>16.4</span>, <span>*</span>) {\n    webView.isInspectable <span>=</span> <span>true</span>\n}\n</code></pre>\n<h6>Objective-C</h6>\n<pre><code>if (@available(macOS 13.3, iOS 16.4, tvOS 16.4, *))\n    webView.inspectable = YES;\n</code></pre>\n<p>You can learn more about <a href=\"https://developer.apple.com/documentation/swift/marking-api-availability-in-objective-c\">guarding usage of new API on developer.apple.com</a>.</p>\n<h2>Feedback</h2>\n<p>As you explore this new API, please help us by providing feedback if you encounter problems. For issues using this new API, please file feedback from your Mac, iPhone, or iPad. Feedback Assistant will collect the information needed to help us understand what’s happening. For any issues you may experience with Web Inspector itself once inspecting your app’s content, please file a bug on <a href=\"http://bugs.webkit.org/\">bugs.webkit.org</a>.</p>\n<p>Also, we love hearing from you. You can find us on Mastodon at <a href=\"https://hachyderm.io/@patrickangle\">@patrickangle@hachyderm.io,</a> <a href=\"https://front-end.social/@jensimmons\">@jensimmons@front-end.social</a>, and <a href=\"https://mastodon.social/@jondavis\">@jondavis@mastodon.social</a>.</p>\n<div>Note: Learn more about Web Inspector from the <a href=\"/web-inspector/\">Web Inspector Reference</a> documentation.</div>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"dafefbe210f3b166959b82c8953d5cd1f27aca3df451ac519eb50662d8cd0137","category":"Tech"}