{"title":"Code Documentation, Streamlined","link":"https://smashingmagazine.com/2023/01/swimm-code-documentation-streamlined/","date":1673964000000,"content":"<p>This article is a sponsored by <a href=\"https://swimm.io?utm_source=smashing_mag&amp;utm_medium=paid_pubication&amp;utm_campaign=launch_jan&amp;utm_content=smashing_mag_launch\">Swimm</a></p>\n<p>Everything surrounding software documentation is tough ‚Äî from allocating time to do it to keeping it up to date. Documentation success is tricky to achieve, and often there isn‚Äôt enough time to measure impact. That‚Äôs because they don‚Äôt bring a tangible impact to the end-user experience. We are incapable of putting value on great documentation. Because of that, not rarely do the efforts to create and maintain delightful documentation overweight the time investment and proper planning.</p>\nPenny Or Dime\n<p>Software Developers are in the business of writing code and content (well, most of us üòâ). We can easily justify our salaries when benchmarked versus the features we ship and the revenue coming in through them. So when it comes to writing and educating our peers about those features so they become more capable of interacting with their code, we often question the value of those minutes in opposition to shipping the next feature or fixing that nasty bug right there. There‚Äôs so much technical debt, so why are we writing about code that we need to refactor?</p>\n<p>We save those minutes immediately ‚Äî it‚Äôs an obvious choice. Right back to code. And we just saved ourselves a few pennies of time. Fast forward a bit; a colleague needs to jump into it and implement a change. You‚Äôre out (working on the next big thing, in a meeting, on vacation, or maybe you left the company!), and there are no docs. Those pennies start to accumulate interest now. Luckily, there are a few comments in the code. Good to know that <code>src</code> actually means <code>source</code>, and <code>function sort(a, b)</code> takes two integers. But the reasoning is not really there, so let‚Äôs keep digging. The pull request has no description, <code>git blame</code> doesn‚Äôt help because who wrote the code isn‚Äôt around. I guess it‚Äôs time to play detective and reverse engineer stuff. Those pennies are dimes now. Describing has a much smaller cognitive overload than investigating. So the cost to develop our app is rising with developer time, task by task.</p>\n<p>Documentation is a hygiene task. We do it to keep things tidy, comfortable, and ergonomic. They are a direct catalyzer of Developer Experience, for better or for worse. And Developer Experience determines how much focus developers can put on the code that really matters instead of working their way out through the weeds.</p>\nBrushing Teeth\n<p>Hopefully, we all can agree that brushing our teeth is something important to be done every day. It is not the kind of habit that we can do it all on Friday and compensate for days skipped. And in this case, documentation is kind of similar. Of course, we can write it all by the end of the quarter, but it will be way harder and more time-consuming. For instance: do you remember what (or why!) you coded three months ago?</p>\n<p>The cognitive overload of documenting things grows from the time you ship the code. Ideally, documentation is like writing tests (which we all do!), and every time we change something, we update the docs.</p>\nRemove Obstacles\n<p>Unfortunately, most of us fail to create the habit of writing documentation ‚Äî this is because the workflow is often full of friction. We finish the code, close the file (or the IDE, or the project), and jump onto a Markdown editor (or Jira, or a Wiki, etc.), and now we need to find the right place to put the knowledge we have just created, submit it to review ‚Äî others will tell us if we picked the best spot, if we wrote it clearly enough, etc. Meanwhile, the code can‚Äôt wait ‚Äî our users are already getting that shiny new feature. (<em>If that‚Äôs you, tough! Been there, done that. You have my sympathy.</em>)</p>\n<p>As the process proceeds, the decisions raise questions. And yes, practice makes perfect ‚Äî but ideally, we wouldn‚Äôt need to spend such big amounts of time (and energy!) to effectuate due diligence. This friction is working against us in maintaining the habit, and the time we spent finding the spot to put the code has drained our motivation.</p>\nConnect the Moving Pieces\n<p>As usual, the developer's solution to a friction problem is <strong>automation</strong>. Elude the tedious and repetitive work by making them derivative. <a href=\"https://swimm.io?utm_source=smashing_mag&amp;utm_medium=paid_pubication&amp;utm_campaign=launch_jan&amp;utm_content=smashing_mag_launch\">Swimm</a> accomplishes that by making a few of those many decisions for you in what they call a \"documentation ecosystem\" ‚Äî a very appropriate naming.</p>\n<ol>\n<li>Where to put the documentation? Right there, with the code.</li>\n<li>When to write the documentation? As you implement it. Or when you open the PR (at the latest!).</li>\n</ol>\n<p>In summary, you write a method; you explain the method right then and there. The ‚Äúmagical‚Äù part comes when, because they‚Äôre collocated, it is possible to directly document the parameters and variables <em>in the code</em> to the text in the docs. That way, when the code changes, the documentation is aware it is now outdated and can flag your whole team about it.</p>\n<p>All this neat automation requires a little setup and possibly a few changes to your coding interfaces and related processes.</p>\n<h3>Code to Docs</h3>\n<p>If you use either VS Code or one of JetBrains' IDEs, it is possible to have an extension/plugin integrated. Once writing the code,  a ‚ÄúSwimm wave‚Äù will show up next to the code that‚Äôs already documented, so you can follow the link and edit the code in an enhanced Markdown editor. This editor has some interesting auto-completion inspected from your code (start typing a variable name, and you‚Äôll see it autocomplete); use it as much as possible since this is the mechanism to link your code to your documentation. </p>\n<h3>Versioning To Docs</h3>\n<p>With GitHub, once documentation is coupled with the code, reviewing also happens in the same PR. The integration bot is capable of identifying <strong>Smart Tokens</strong> across the code changed and flags either adjustments already made (prompting to review right then and there) or untouched ones (also prompting to review). With individual comments that look more like PR prompts, your PR reviewers can approve each comment section one by one, depending on how comfortable they are with them.</p>\n<p><img src=\"https://files.smashing.media/articles/code-documentation-streamlined/swimm-github-PR-reviews.png\" /></p>\n<p>Additionally, with automatic checks (Swimm‚Äôs patented Auto-sync), it is also possible to set automatic approvals and notification triggers, or mute them completely. So your team can avoid notification overload and tune how they are made aware of changes in a way it suits them best.</p>\nTake It From Here\n<p>I hope this glimpse at the problem of writing documentation has resonated with you in a way and that the ideas around here made sense. Please reach out in the comments below or reply to me at <a href=\"https://atila.io/twitter\">@AtilaFassina </a> if there‚Äôs anything you‚Äôd like to add or just chat about great documentation. I love a good success story!</p>","author":"","siteTitle":"Articles on Smashing Magazine ‚Äî For Web Designers And Developers","siteHash":"f300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"82441e3cde6f8ad3dd36554656c1025b6a767519b471785c27377b","category":"Tech"}