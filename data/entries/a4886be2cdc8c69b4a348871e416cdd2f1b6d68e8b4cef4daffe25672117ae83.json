{"title":"Terraform Cloud no-code provisioning is now GA with new features","link":"https://www.hashicorp.com/blog/terraform-cloud-no-code-provisioning-is-now-ga-with-new-features","date":1682524800000,"content":"<p>We are excited to announce the general availability of <em><a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/no-code-provisioning\">no-code provisioning</a></em>, which gives organizations a self-service workflow in HashiCorp Terraform for their application developers and others that need infrastructure but don’t necessarily know Terraform or HashiCorp Configuration Language (HCL). Initially launched as a <a href=\"https://www.hashicorp.com/blog/terraform-gains-visibility-self-service-and-compliance-upgrades\">public beta at HashiConf Global 2022</a>, no-code provisioning empowers cloud platform teams to set up their modules for push-button self-service, allowing stakeholders with infrastructure needs to deploy those modules without managing Terraform configuration repos or writing any code. This post reviews the details and benefits of this powerful new deployment method and also covers a handful of new features just released.</p>\n\n<h2>New features in GA</h2>\n\n<p>During the beta period, we collected a lot of great feedback from customers, which led directly to new features that accompany the GA of no-code provisioning, including:</p>\n\n<ul>\n<li>Variable input dropdowns</li>\n<li>Variable set assignment to projects</li>\n<li>Project-level permissions scope</li>\n</ul>\n\n<h3>Variable input dropdowns</h3>\n\n<p>During the no-code provisioning process, end users must input values for the variables in the module configuration that don’t have a default value. However, this can lead to frustrating provisioning failures due to typos or disallowed infrastructure attributes. Users asked for dropdown options to help avoid confusion around no-code workflows.</p>\n\n<p>Now, admins can create guardrails for what attributes are applied to infrastructure. Module publishers can define the valid options for input variables via a page in the Terraform Cloud UI at the time of enabling the module version for no-code provisioning, or they can do the same via the <a href=\"https://registry.terraform.io/providers/hashicorp/tfe/latest\">TFE provider</a>. After this is set, users can select from the pre-defined options during initial provisioning and subsequent updates to inputs on existing no-code workspaces. Examples of input guardrails include approved cloud regions, valid instance sizes, and expected values for metadata, like tags.</p>\n<img src=\"https://www.datocms-assets.com/2885/1682466523-no-code-dropdown.png\" alt=\"Variable\" /><h3>Variable sets for projects</h3>\n\n<p>Previously, you could assign variable sets only with common inputs such as cloud credentials at either the global (organization-wide) or workspace level. This posed a conundrum for no-code provisioning, since the workspace is created at the time of first provision and many organizations need to assign granular cloud credentials for their no-code teams.</p>\n\n<p>Since the <a href=\"https://www.hashicorp.com/blog/terraform-cloud-adds-projects-to-organize-workspaces-at-scale\">introduction of projects</a> as a new usage layer between organizations and workspaces, users can now add these teams to a project and define variable sets limited to only that project. New workspaces created by the no-code provisioning workflow will automatically inherit the variable set(s) assigned to the parent project.</p>\n<img src=\"https://www.datocms-assets.com/2885/1682466575-varset-projects.png\" alt=\"Variable\" /><h2>Scope “manage workspace” permissions to a project</h2>\n\n<p>During the beta, no-code users needed the organization-wide “manage workspaces” permission. The introduction of <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/organize-workspaces-with-projects\">projects</a> in Terraform Cloud provided a solution to this problem.</p>\n\n<p>No-code provisioning is integrated with projects, which means teams with project-level Admin or Maintain <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/users-teams-organizations/permissions#project-permissions\">permissions</a> can provision no-code ready modules directly into their project without requiring organization-wide workspace management privileges.</p>\n<img src=\"https://www.datocms-assets.com/2885/1682466608-project-permissions.png\" alt=\"Teams\" /><p>Here is a simple recommended workflow for setting up no-code-only users in a guardrailed project space:</p>\n\n<ol>\n<li>Organization admins should create projects for teams that want to self-serve no-code ready modules. </li>\n<li>Add the team to the designated project. Assign project Admin or Maintain permissions to the team at the time of adding it to the project.</li>\n<li>Then in the team’s general settings, make sure the team’s Organization Access is set to “No access” or “View workspaces only”.</li>\n</ol>\n\n<h2>Key benefits</h2>\n\n<p>The general availability of no-code provisioning on Terraform Cloud allows cloud platform teams to provide self-service infrastructure without requiring any knowledge of Terraform or HCL from the user. Here are a few of the main benefits of this new feature:</p>\n\n<ul>\n<li><strong>Increase productivity:</strong> Application developers, including those who do not know Terraform, can now provision a selection of infrastructure themselves. No-code provisioning provides a simpler, standardized way to provision with Terraform, bringing even more reusability and enabling faster provisioning velocity. With no-code provisioning, teams can spend less time defining configurations and more time supporting the business.<br /></li>\n<li><strong>Cost efficiency:</strong> Platform teams can now enable application developers in multiple business units to provision their own infrastructure in minutes, without significant Terraform training. Application developers can re-use approved no-code ready modules built with best practices to reduce over-provisioned resources.<br /></li>\n<li><strong>Reduce risk:</strong> Platform teams can control what infrastructure the teams they serve provision automatically. Administrators and module publishers can manage an allowlist of no-code ready modules for application developers to create workspaces, reducing failed infrastructure builds and costly misconfiguration errors. Project-level admins can maintain permissions in projects allowing application developers to access no-code ready modules without requiring organization-wide workspace-management privileges.<br /></li>\n</ul>\n\n<h2>Get started and try Terraform Cloud</h2>\n\n<p>Variable inputs, variable sets for projects, and managed workspace permissions are available today as generally available features. Learn more about no-code provisioning by reading the <a href=\"https://developer.hashicorp.com/terraform/cloud-docs/no-code-provisioning/module-design\">Designing No-Code Ready Modules documentation</a>, hands-on tutorial: <a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/no-code-provisioning\">Create and Use No-Code Modules</a>, and watching this <a href=\"https://www.youtube.com/watch?v=xZ2zPzgBqPw\">demo video</a>:</p>\n<p>If you haven’t already, get started for free on <a href=\"http://hashi.co/tf-cloud-bc\">Terraform Cloud</a> to provision and manage all your infrastructure.</p>\n","author":"Olivia Corley","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"a4886be2cdc8c69b4a348871e416cdd2f1b6d68e8b4cef4daffe25672117ae83","category":"Tech"}