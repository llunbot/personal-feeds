{"title":"Terraform adds support for Azure Linux container host for Azure Kubernetes Service","link":"https://www.hashicorp.com/blog/terraform-adds-support-azure-linux-container-host-azure-kubernetes-service","date":1684944000000,"content":"<p>Today we’re pleased to announce HashiCorp Terraform support for <a href=\"https://aka.ms/Azure-Linux-Blog-BUILD-2023\">Azure Linux container host</a> for Azure Kubernetes Service (AKS). Azure Linux is Microsoft’s distribution of CBL-Mariner, an open-source Linux distribution, supported as a container host OS platform for AKS. </p>\n\n<p>Azure Linux container host for AKS is a lightweight, secure image built and serviced by Microsoft to run best in-class on AKS. Every package is built from source and validated to ensure services run on proven components. Azure Linux container host includes only the necessary set of packages needed to run container workloads, which reduces the attack surface and eliminates patching and maintenance of unnecessary packages. Azure Linux’s base layer includes a Microsoft-hardened kernel tuned for Azure. You can deploy Azure Linux node pools in a new cluster, add Azure Linux node pools to your existing Ubuntu clusters, or migrate your Ubuntu nodes to Azure Linux nodes.</p>\n\n<p>HashiCorp is dedicated to providing the most effective and efficient approach for deploying Azure Linux container host for AKS. This blog post will describe how to leverage no-code provisioning with HashiCorp Terraform Cloud to deploy Azure Linux container host.</p>\n\n<h2>Deploying Azure Linux container host with Terraform</h2>\n\n<p>The sample below is intended for demonstration and training purposes only. It contains a few things that should not be used in production. With that said, it shows what a Terraform configuration looks like for Azure Linux container host for AKS:</p>\n<pre><code>resource \"azurerm_kubernetes_cluster\" \"default\" {\n  name                = \"aks-${random_string.suffix.result}\"\n  location            = azurerm_resource_group.default.location\n  resource_group_name = azurerm_resource_group.default.name\n  \n  kubernetes_version  = var.kubernetes_version\n  dns_prefix          = \"k8s-${random_string.suffix.result}\"\n\ndefault_node_pool {\n    name            = \"default\"\n    node_count      = var.aks_node_count\n    vm_size         = var.aks_confidential_computing_enabled ? \"Standard_DC2s_v2\" : \"Standard_D2_v2\"\n    os_sku          = \"Mariner\"\n    os_disk_size_gb = 50\n  }\n\n  confidential_computing {\n    sgx_quote_helper_enabled = true\n  }\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n\n  tags = {\n    name = \"demo-aks-${random_string.suffix.result}\"\n    environment = \"demo\"\n  }\n}</code></pre><p>After <code>terraform apply</code>, the Azure Kubernetes Service (AKS) nodes should look like this:</p>\n<img src=\"https://www.datocms-assets.com/2885/1684944072-aks-mariner-nodes.png\" alt=\"AKS\" /><h2>Deploy Azure Linux container host with Terraform Cloud</h2>\n\n<p>HashiCorp Terraform Cloud is a cloud-managed version of Terraform built for teams that adds further usability, security, and reliability features It manages Terraform runs in a consistent and reliable environment and includes easy access to shared state and secrets data, along with a private registry for sharing Terraform modules and many more features. </p>\n\n<p><a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/no-code-provisioning\">No-code provisioning</a> in Terraform Cloud lets users provision infrastructure resources without writing Terraform configuration code. This enhances an organization’s self-service model by giving developers with limited infrastructure knowledge a way to consume the resources they need. It can be enabled for any public or private module published in the private registry. Users can then provision infrastructure, set the module's input variables, and provision its resources without writing Terraform code.</p>\n\n<p>The example below uses an AKS module and no-code provisioning to launch a new workspace in a few clicks. It has three configuration module inputs: enabling confidential computing, choosing node count, and selecting <a href=\"https://learn.microsoft.com/en-us/azure/aks/use-mariner\">Azure Linux container host</a> (previously called Mariner OS).</p>\n<img src=\"https://www.datocms-assets.com/2885/1684944149-mariner-demo.gif\" alt=\"Mariner\" /><h2>Infrastructure automation with Terraform on Azure</h2>\n\n<p><a href=\"https://www.hashicorp.com/partners/cloud/microsoft\">HashiCorp has a deep collaboration with Microsoft</a>, supporting the provisioning of resources on Microsoft Azure. With Terraform on Azure, provisioning and security can be automated based on infrastructure and policy as code. Infrastructure and policies are codified, shared, managed, and executed within a workflow consistent across Azure infrastructure.</p>\n\n<p>Azure Linux container host was announced at <a href=\"https://news.microsoft.com/build-2023/\">Microsoft Build 2023</a>. According to Jim Perrin, Principal Program Manager at Microsoft, “With Azure Linux container host, customers see benefit from the value of having a secure, performant, and fully native AKS container host. Microsoft controls the supply chain for Azure Linux end to end, resulting in a more streamlined image tailored and optimized for AKS. Azure Linux container host provides a consistent Kubernetes experience throughout the developer and production lifecycle, coupled with the level of support you expect from Microsoft.”</p>\n\n<h2>Deploy Azure Linux container host on AKS with Terraform</h2>\n\n<p>To get started, learn more about Azure Kubernetes Services (AKS) deployment options in the <a href=\"https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/kubernetes_cluster\">provider documentation section</a> and follow the <a href=\"https://developer.hashicorp.com/terraform/tutorials/kubernetes/aks\">tutorial to deploy AKS using Terraform</a>, then try out the <a href=\"https://github.com/gautambaghel/terraform-aks-mariner/tree/main\">sample demo repository</a>. </p>\n\n<p>To learn about more ways to improve your security in Terraform, check out this <a href=\"https://learn.microsoft.com/en-us/shows/devops-lab/improve-your-security-with-dynamic-provider-credentials-for-terraform-cloud\">DevOps lab demo</a> on using <a href=\"https://www.hashicorp.com/blog/terraform-cloud-adds-vault-backed-dynamic-credentials\">Vault-backed dynamic provider credentials</a> with Terraform Cloud on Azure.</p>\n","author":"Gautam Baghel","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"1502cd0bb823c5a643eda14dfb60527a34df098e3759068d6bc4bba050ab7075","category":"Tech"}