{"title":"The Modern Guide For Making CSS Shapes","link":"https://smashingmagazine.com/2024/05/modern-guide-making-css-shapes/","date":1715346000000,"content":"<p>You have for sure googled <em>“how to create [shape_name]</em> <em>with</em> <em>CSS”</em> at least once in your front-end career if it’s not something you already have bookmarked. And the number of articles and demos you will find out there is endless.</p>\n<p>Good, right? Copy that code and drop it into the ol’ stylesheet. <em>Ship it!</em></p>\n<p>The problem is that you don’t understand how the copied code works. Sure, it got the job done, but many of the most widely used CSS shape snippets are often dated and rely on things like magic numbers to get the shapes just right. So, the next time you go into the code needing to make a change to it, it either makes little sense or is inflexible to the point that you need an entirely new solution.</p>\n<p>So, here it is, your <strong>one-stop modern guide for how to create shapes in CSS</strong>! We are going to explore the most common CSS shapes while highlighting different CSS tricks and techniques that you can easily re-purpose for any kind of shape. The goal is not to learn how to create specific shapes but rather to understand the modern tricks that allow you to create any kind of shape you want.</p>\n<h3>Table of Contents</h3>\n<p>You can jump directly to the topic you’re interested in to find relevant shapes or <a href=\"#your-first-resource\">browse the complete list</a>. Enjoy!</p>\n<ul>\n  <li><a href=\"#hexagons\">Hexagons</a></li><br />  <li><a href=\"#octagons\">Octagons</a></li>\n  <li><a href=\"#stars\">Stars</a></li>\n  <li><a href=\"#polygons-starbursts\">Polygons &amp; Starbursts</a></li>\n  <li><a href=\"#parallelograms-trapezoids\">Parallelograms &amp; Trapezoids</a></li>\n  <li><a href=\"#circles-holes\">Circles &amp; Holes</a></li>\n  <li><a href=\"#border-edges\">Border Edges</a></li>\n  <li><a href=\"#rounded-arcs\">Rounded Arcs</a></li>\n  <li><a href=\"#dashed-circles\">Dashed Circles</a></li>\n  <li><a href=\"#rounded-tabs\">Rounded Tabs</a></li>\n  <li><a href=\"#triangles\">Triangles</a></li>\n  <li><a href=\"#hearts\">Hearts</a></li>\n  <li><a href=\"#ribbons\">Ribbons</a></li>\n  <li><a href=\"#tooltips-speech-bubbles\">Tooltips &amp; Speech Bubbles</a></li>\n  <li><a href=\"#cutting-corners\">Cutting Corners</a></li>\n  <li><a href=\"#section-dividers\">Section Dividers</a></li>\n  <li><a href=\"#floral-shapes\">Floral Shapes</a></li>\n</ul>\n\nWhy Not SVG?\n<p>I get asked this question often, and my answer is always the same: <em>Use SVG if you</em> <em>can!</em> I have nothing against SVG. It’s just another approach for creating shapes using another syntax with another set of considerations. If SVG was my expertise, then I would be writing about that instead!</p>\n<p>CSS is my field of expertise, so that’s the approach we’re covering for drawing shapes with code. Choosing CSS or SVG is typically a matter of choice. There may very well be a good reason why SVG is a better fit for your specific needs.</p>\n<p>Many times, CSS will be your best bet for decorative things or when you’re working with a specific element in the markup that contains real content to be styled. Ultimately, though, you will need to consider what your project’s requirements are and decide whether a CSS shape is really what you are looking for.</p>\nYour First Resource\n<p>Before we start digging into code, please spend a few minutes over at my <a href=\"https://css-shape.com/\">CSS Shape website</a>. You will find many examples of CSS-only shapes. This is an ever-growing collection that I regularly maintain with new shapes and techniques. Bookmark it and use it as a reference as we make our way through this guide.</p>\n<blockquote>Is it fairly easy to modify and tweak the CSS for those shapes?</blockquote>\n\n<p>Yes! The CSS for each and every shape is optimized to be as flexible and efficient as possible. The CSS typically targets a <strong>single HTML element</strong> to prevent you from having to touch too much markup besides dropping the element on the page. Additionally, I make liberal use of CSS variables that allow you to modify things easily for your needs.</p>\n<p>Most of you don't have time to grasp all the techniques and tricks to create different shapes, so an online resource with ready-to-use snippets of code can be a lifesaver!</p>\nClipping Shapes In CSS\n<p>The CSS <code>clip-path</code> property — and its <code>polygon()</code> function — is what we commonly reach for when creating CSS Shapes. Through the creation of common CSS shapes, we will learn a few tricks that can help you create other shapes easily.</p>\n<h3>Hexagons</h3>\n<p>Let’s start with one of the easiest shapes; the hexagon. We first define the shape’s dimensions, then provide the coordinates for the six points and we are done.</p>\n<pre><code>.hexagon {\n  width: 200px;\n  aspect-ratio: 0.866; \n  clip-path: polygon(\n    0% 25%,\n    0% 75%,\n    50% 100%, \n    100% 75%, \n    100% 25%, \n    50% 0%);\n}\n</code></pre>\n\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/1-clipping-hexagon-four-points.png\" /></p>\n<p>We’re basically drawing the shape of a diamond where two of the points are set way outside the bounds of the hexagon we’re trying to make. This is perhaps the very first lesson for drawing CSS shapes: <strong>Allow yourself to think outside the box — or at least the shape’s boundaries.</strong></p>\n<p>Look how much simpler the code already looks:</p>\n<pre><code>.hexagon {\n  width: 200px;\n  aspect-ratio: cos(30deg); \n  clip-path: polygon(\n    -50% 50%,\n    50% 100%,\n    150% 50%,\n    50% 0\n  );\n}\n</code></pre>\n\n<p>Did you notice that I updated the <code>aspect-ratio</code> property in there? I’m using a trigonometric function, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cos\"><code>cos()</code></a>, to replace the magic number <code>0.866</code>. The exact value of the ratio is equal to <code>cos(30deg)</code> (or <code>sin(60deg)</code>). Besides, <code>cos(30deg)</code> is a lot easier to remember than <code>0.866</code>.</p>\n<p>Here’s something fun we can do: swap the X and Y coordinate values. In other words, let’s change the <code>polygon()</code> coordinates from this pattern:</p>\n<pre><code>clip-path: polygon(X1 Y1, X2 Y2, ..., Xn Yn)\n</code></pre>\n\n<p>…to this, where the Y values come before the X values:</p>\n<pre><code>clip-path: polygon(Y1 X1, Y2 X2, ..., Yn Xn)\n</code></pre>\n\n<p>What we get is a new variation of the hexagon:</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/2-clipping-octagon-four-points.png\" /></p>\n<p>I know that visualizing the shape with outside points can be somewhat difficult because we’re practically turning the concept of clipping on its head. But with some practice, you get used to this mental model and develop muscle memory for it.</p>\n<p>Notice that the CSS is remarkably similar to what we used to create a hexagon:</p>\n<pre><code>.octagon {\n  width: 200px;  \n  aspect-ratio: 1;  \n  --o: calc(50% * tan(-22.5deg));\n  clip-path: polygon(\n    var(--o) 50%,\n    50% var(--o),\n    calc(100% - var(--o)) 50%,\n    50% calc(100% - var(--o))\n  );\n}\n</code></pre>\n\n<p>Except for the small trigonometric formula, the structure of the code is identical to the last hexagon shape — set the shape’s dimensions, then clip the points. And notice how I saved the math calculation as a CSS variable to avoid repeating that code.</p>\n<p>If math isn’t really your thing — and that’s totally fine! — remember that the formulas are simply one part of the puzzle. There’s no need to go back to your high school geometry textbooks. You can always find the formulas you need for specific shapes in <a href=\"https://css-shape.com/\">my online collection</a>. Again, that collection is your first resource for creating CSS shapes!</p>\n<p>And, of course, we can apply this shape to an <code>&lt;img&gt;</code> element as easily as we can a <code>&lt;div&gt;</code>:</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/3-star-shape-five-points.png\" /></p>\n<p>It may sound impossible to make a star out of only five points, but it’s perfectly possible, and the trick is how the points inside <code>polygon()</code> are ordered. If we were to draw a star with pencil on paper in a single continuous line, we would follow the following order:</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/4-star-single-line.png\" /></p>\n<p>It’s the same way we used to draw stars as kids — and it fits perfectly in CSS with <code>polygon()</code>! This is another hidden trick about <code>clip-path</code> with <code>polygon()</code>, and it leads to another key lesson for drawing CSS shapes: <strong>the lines we establish can intersect</strong>. Again, we’re sort of turning a concept on its head, even if it’s a pattern we all grew up making by hand.</p>\n<p>Here’s how those five points translate to CSS:</p>\n<div>\n<pre><code>.star {\n  width: 200px;<br />  aspect-ratio: 1;\n  clip-path: polygon(50% 0, /* (1) */\n    calc(50%*(1 + sin(.4turn))) calc(50%*(1 - cos(.4turn))), /* (2) */\n    calc(50%*(1 - sin(.2turn))) calc(50%*(1 - cos(.2turn))), /* (3) */\n    calc(50%*(1 + sin(.2turn))) calc(50%*(1 - cos(.2turn))), /* (4) */\n    calc(50%*(1 - sin(.4turn))) calc(50%*(1 - cos(.4turn)))  /* (5) */\n   ); \n}\n</code></pre>\n</div>\n\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/5-row-three-multi-point-star-shapes.jpg\" /></p>\n<p>The funny thing is that starbursts are basically the exact same thing as polygons, just with half the points that we can move inward.</p>\n<a href=\"https://smashing-files.ams3.digitaloceanspaces.com/articles/modern-guide-making-css-shapes/6-illustration-star-morphing-polygon.gif\"><img src=\"https://smashing-files.ams3.digitaloceanspaces.com/articles/modern-guide-making-css-shapes/6-illustration-star-morphing-polygon.gif\" /></a>Figure 6.\n\n<p>I often advise people to use my online generators for shapes like these because the <code>clip-path</code> coordinates can get tricky to write and calculate by hand.</p>\n<ul>\n<li><a href=\"https://css-generators.com/polygon-shape/\">Polygon generator</a></li>\n<li><a href=\"https://css-generators.com/starburst-shape/\">Starburst generator</a></li>\n</ul>\n<p>That said, I really believe it’s still a very good idea to understand how the coordinates are calculated and how they affect the overall shape. <a href=\"https://verpex.com/blog/website-tips/css-shapes-polygon-starburst\">I have an entire article on the topic</a> for you to learn the nuances of calculating coordinates.</p>\n<h3>Parallelograms &amp; Trapezoids</h3>\n<p>Another common shape we always build is a rectangle shape where we have one or two slanted sides. They have a lot of names depending on the final result (e.g., parallelogram, trapezoid, skewed rectangle, and so on), but all of them are built using the same CSS technique.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/7-parallelograms-trapezoid.png\" /></p>\n<p>First, we start by creating a basic rectangle by linking the four corner points together:</p>\n<pre><code>clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%)\n</code></pre>\n\n<p>This code produces nothing because our element is already a rectangle. Also, note that <code>0</code> and <code>100%</code> are the only values we’re using.</p>\n<p>Next, offset some values to get the shape you want. Let’s say our offset needs to be equal to <code>10px</code>. If the value is <code>0</code>, we update it with <code>10px</code>, and if it’s <code>100%</code> we update it with <code>calc(100% - 10px)</code>. As simple as that!</p>\n<blockquote>But which value do I need to update and when?</blockquote>\n\n<p>Try and see! Open your browser’s developer tools and update the values in real-time to see how the shape changes, and you will understand what points you need to update. I would lie if I told you that I write all the shapes from memory without making any mistakes. In most cases, I start with the basic rectangle, and I add or update points until I get the shape I want. Try this as a small homework exercise and create the shapes in Figure 11 by yourself. You can still find all the correct code in <a href=\"https://css-shape.com/\">my online collection</a> for reference.</p>\n<p>If you want more CSS tricks around the <code>clip-path</code> property, check my article “<a href=\"https://verpex.com/blog/website-tips/css-tricks-to-master-the-clip-path-property\">CSS Tricks To Master The <code>clip-path</code> Property</a>” which is a good follow-up to this section.</p>\nMasking Shapes In CSS\n<p>We just worked with a number of shapes that required us to figure out a number of points and <code>clip-path</code> by plotting their coordinates in a <code>polygon()</code>. In this section, we will cover circular and curvy shapes while introducing the other property you will use the most when creating CSS shapes: the <code>mask</code> property.</p>\n<p>Like the previous section, we will create some shapes while highlighting the main tricks you need to know. Don’t forget that the goal is not to learn how to create specific shapes but to learn the tricks that allow you to create any kind of shape.</p>\n<h3>Circles &amp; Holes</h3>\n<p>When talking about the <code>mask</code> property, gradients are certain to come up. We can, for example, “cut” (but really “mask”) a circular hole out of an element with a <code>radial-gradient</code>:</p>\n<pre><code>mask: radial-gradient(50px, #0000 98%, #000);\n</code></pre>\n\n<p>Why aren’t we using a simple <code>background</code> instead? The <code>mask</code> property allows us more flexibility, like using any color we want and applying the effect on a variety of other elements, such as <code>&lt;img&gt;</code>. If the color and flexible utility aren’t a big deal, then you can certainly reach for the <code>background</code> property instead of cutting a hole.</p>\n<p>Here’s the <code>mask</code> working on both a <code>&lt;div&gt;</code> and <code>&lt;img&gt;</code>:</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/8-scalloped-zig-zag-wavy-borders.png\" /></p>\n<p>Once again, it’s all about CSS masks and gradients. In the following articles, I provide you with examples and recipes for many different possibilities:</p>\n<ul>\n<li>“<a href=\"https://css-tricks.com/css-borders-using-masks/\">Fancy CSS Borders Using Masks</a>” (CSS-Tricks)</li>\n<li>“<a href=\"https://css-tricks.com/how-to-create-wavy-shapes-patterns-in-css/\">How to Create Wavy Shapes &amp; Patterns in CSS</a>” (CSS-Tricks)</li>\n</ul>\n<p>Be sure to make it to the end of the second article to see how this technique can be used as <a href=\"https://css-pattern.com/\">decorative background patterns</a>.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/9-circular-progress-element.png\" /></p>\n<p>This time, we are going to introduce another technique which is “composition”. It’s an operation we perform between two gradient layers. We either use <code>mask-composite</code> to define it, or we declare the values on the <code>mask</code> property.</p>\n<p>The figure below illustrates the gradient configuration and the composition between each layer.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/10-steps-full-circle-unclosed-circle-rounded-edges.png\" /></p>\n<p>We start with a <code>radial-gradient</code> to create a full circle shape. Then we use a <code>conic-gradient</code> to create the shape below it. Between the two gradients, we perform an “intersect” composition to get the unclosed circle. Then we tack on two more radial gradients to the <code>mask</code> to get those nice rounded endpoints on the unclosed circle. This time we consider the default composition, “add”.</p>\n<p>Gradients aren’t something new as we use them a lot with the <code>background</code> property but “composition” is the new concept I want you to keep in mind. It’s a very handy one that unlocks a lot of possibilities.</p>\n<p>Ready for the CSS?</p>\n<div>\n<pre><code>.arc {\n  --b: 40px; /* border thickness */\n  --a: 240deg; /* progression */<br />\n--_g:/var(--b) var(--b) radial-gradient(50% 50%,#000 98%,#0000) no-repeat;\nmask:\ntop var(--_g),\ncalc(50% + 50% <em> sin(var(--a)))\ncalc(50% - 50% </em> cos(var(--a))) var(--_g),\nconic-gradient(#000 var(--a), #0000 0) intersect,\nradial-gradient(50% 50%, #0000 calc(100% - var(--b)), #000 0 98%, #0000)\n} </code></pre>\n\n</div>\n\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/11-manilla-folder.png\" /></p>\n<p>We could get clever and use a pseudo-element for the shape that’s positioned behind the set of panels, but that introduces more complexity and fixed values than we ought to have. Instead, we can continue using CSS masks to get the perfect shape with a minimal amount of reusable code.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/12-tab-shape.png\" /></p>\n<p>It’s not really the rounded top edges that are difficult to pull off, but the bottom portion that curves inwards instead of rounding in like the top. And even then, we already know the secret sauce: using CSS masks by combining gradients that reveal just the parts we want.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/13-steps-mask-shape.png\" /></p>\n<p>We start by adding a border around the element — excluding the bottom edge — and applying a <code>border-radius</code> on the top-left and top-right corners.</p>\n<div>\n<pre><code>.tab {\n  --r: 40px; /* radius size */\n\nborder: var(--r) solid #0000; /<em> transparent black </em>/\nborder-bottom: 0;\nborder-radius: calc(2 <em> var(--r)) calc(2 </em> var(--r)) 0 0;\n} </code></pre>\n\n</div>\n\n<p>Next, we add the first mask layer. We only want to show the padding area (i.e., the red area highlighted in Figure 10).</p>\n<pre><code>mask: linear-gradient(#000 0 0) padding-box;\n</code></pre>\n\n<p>Let’s add two more gradients, both radial, to show those bottom curves.</p>\n<div>\n<pre><code>mask: \n  radial-gradient(100% 100% at 0 0, #0000 98%, #000) 0 100% / var(--r) var(--r), \n  radial-gradient(100% 100% at 100% 0, #0000 98%, #000) 100% 100% / var(--r) var(--r), \n  linear-gradient(#000 0 0) padding-box;\n</code></pre>\n</div>\n\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/14-radial-gradients.png\" /></p>\n<p>Here is how the full code comes together:</p>\n<div>\n<pre><code>.tab {\n  --r: 40px; /* control the radius */\n\nborder: var(--r) solid #0000;\nborder-bottom: 0;\nborder-radius: calc(2 <em> var(--r)) calc(2 </em> var(--r)) 0 0;\nmask:\nradial-gradient(100% 100% at 0 0, #0000 98%, #000) 0 100% / var(--r) var(--r),\nradial-gradient(100% 100% at 100% 0, #0000 98%, #000) 100% 100% / var(--r) var(--r),\nlinear-gradient(#000 0 0) padding-box;\nmask-repeat: no-repeat;\nbackground: linear-gradient(60deg, #BD5532, #601848) border-box;\n} </code></pre>\n\n</div>\n\n<p>As usual, all it takes is one variable to control the shape. Let’s zero-in on the <code>border-radius</code> declaration for a moment:</p>\n<div>\n<pre><code>border-radius: calc(2 * var(--r)) calc(2 * var(--r)) 0 0;\n</code></pre>\n</div>\n\n<p>Notice that the shape’s rounded top edges are equal to two times the radius (<code>--r</code>) value. If you’re wondering why we need a calculation here at all, it’s because we have a transparent border hanging out there, and we need to double the radius to account for it. The radius of the blue areas highlighted in Figure 13 is equal to <code>2 * R</code> while the red area highlighted in the same figure is equal to <code>2 * R - R</code>, or simply <code>R</code>.</p>\n<p>We can actually optimize the code so that we only need two gradients — one linear and one radial — instead of three. I’ll drop that into the following demo for you to pick apart. Can you figure out how we were able to eliminate one of the gradients?</p>\n<p>I’ll throw in two additional variations for you to investigate:</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/15-variations-tabs-tooltips.png\" /></p>\n<p>These aren’t tabs at all but tooltips! We can absolutely use the exact same masking technique we used to create the tabs for these shapes. Notice how the curves that go inward are consistent in each shape, no matter if they are positioned on the left, right, or both.</p>\n<p>You can always find the code over at <a href=\"https://css-generators.com/tooltip-speech-bubble/\">my online collection</a> if you want to reference it.</p>\nMore CSS Shapes\n<p>At this point, we’ve seen the main tricks to create CSS shapes. You will rely on <code>mask</code> and gradients if you have curves and rounded parts or <code>clip-path</code> when there are no curves. It sounds simple but there’s still more to learn, so I am going to provide a few more common shapes for you to explore.</p>\n<p>Instead of going into a detailed explanation of the shapes in this section, I’m going to give you the recipes for how to make them and all of the ingredients you need to make it happen. In fact, I have written other articles that are directly related to everything we are about to cover and will link them up so that you have guides you can reference in your work.</p>\n<h3>Triangles</h3>\n<p>A triangle is likely the first shape that you will ever need. They’re used in lots of places, from play buttons for videos, to decorative icons in links, to active state indicators, to open/close toggles in accordions, to… the list goes on.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/16-triangle-shape-variations.png\" /></p>\n<p>Creating a triangle shape is as simple as using a 3-point polygon in addition to defining the size:</p>\n<pre><code>.triangle {\n  width: 200px;\n  aspect-ratio: 1;\n  clip-path: polygon(50% 0, 100% 100%, 0 100%);\n}\n</code></pre>\n\n<p>But we can get even further by adding more points to have border-only variations:</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/17-cutting-corners.png\" /></p>\n<p>We can cut all the corners or just specific ones. We can make circular cuts or sharp ones. We can even create an outline of the overall shape. Take a look at <a href=\"https://css-generators.com/custom-corners/\">my online generator</a> to play with the code, and <a href=\"https://css-tricks.com/cut-corners-using-css-mask-and-clip-path-properties/\">check out my full article on the topic</a> where I am detailing all the different cases.</p>\n<h3>Section Dividers</h3>\n<p>Speaking of visual transitions between sections, what if both sections have decorative borders that fit together like a puzzle?</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/18-section-dividers.png\" /></p>\n<p>I hope you see the pattern now: sometimes, we’re clipping an element or masking portions of it. The fact that we can sort of “carve” into things this way using <code>polygon()</code> coordinates and gradients opens up so many possibilities that would have required clever workarounds and super-specific code in years past.</p>\n<p>See my article “<a href=\"https://www.freecodecamp.org/news/section-divider-using-css/\">How to Create a Section Divider Using CSS</a>” on the freeCodeCamp blog for a deep dive into the concepts, which we’ve also covered here quite extensively already in earlier sections.</p>\n<h3>Floral Shapes</h3>\n<p>We’ve created circles. We’ve made wave shapes. Let’s combine those two ideas together to create <em>floral shapes</em>.</p>\n<p><img src=\"https://files.smashing.media/articles/modern-guide-making-css-shapes/19-flower-like-shapes.png\" /></p>\n<p>These shapes are pretty cool on their own. But like a few of the other shapes we’ve covered, this one works extremely well with images. If you need something fancier than the typical box, then masking the edges can come off like a custom-framed photo.</p>\n<p>Here is a demo where I am using such shapes to create <a href=\"https://www.smashingmagazine.com/2023/09/re-creating-pop-out-hover-effect-css-part1/\">a fancy hover effect</a>:</p>\n<p>See the Pen <a href=\"https://codepen.io/t_afif/pen/qBQzrwq\">Fancy Pop Out hover effect!</a> by <a href=\"https://codepen.io/t_afif\">Temani Afif</a>.</p>\n<p>There’s a lot of math involved with this, specifically trigonometric functions. I have a two-part series that gets into the weeds if you’re interested in that side of things:</p>\n<ul>\n<li>“<a href=\"https://frontendmasters.com/blog/creating-flower-shapes-using-css-mask-trigonometric-functions/\">Creating Flower Shapes using CSS Mask &amp; Trigonometric Functions</a>” (Frontend Masters)</li>\n<li>“<a href=\"https://frontendmasters.com/blog/creating-wavy-circles-with-fancy-animations/\">Creating Wavy Circles with Fancy Animations in CSS</a>” (Frontend Masters)</li>\n</ul>\n<p>As always, remember that <a href=\"https://css-shape.com/\">my online collection</a> is your Number One resource for all things related to CSS shapes. The math has already been worked out for your convenience, but you also have the references you need to understand how it works under the hood.</p>\nConclusion\n<p>I hope you see CSS Shapes differently now as a result of reading this comprehensive guide. We covered a few shapes, but really, it’s hundreds upon hundreds of shapes because you see how flexible they are to configure into a slew of variations.</p>\n<p>At the end of the day, all of the shapes use some combination of different CSS concepts such as clipping, masking, composition, gradients, CSS variables, and so on. Not to mention a few hidden tricks like the one related to the <code>polygon()</code> function:</p>\n<ul>\n<li>It accepts points outside the <code>[0% 100%]</code> range.</li>\n<li>Switching axes is a solid approach for creating shape variations.</li>\n<li>The lines we establish can intersect.</li>\n</ul>\n<p>It’s not <em>that</em> many things, right? We looked at each of these in great detail and then whipped through the shapes to demonstrate how the concepts come together. <strong>It’s not so much about memorizing snippets than it is thoroughly understanding how CSS works</strong> and leveraging its features to produce any number of things, like shapes.</p>\n<p>Don’t forget to bookmark my <a href=\"https://css-shape.com/\">CSS Shape website</a> and use it as a reference as well as a quick stop to get a specific shape you need for a project. I avoid re-inventing the wheel in my work, and the online collection is your wheel for snagging shapes made with pure CSS.</p>\n<p>Please also use it as inspiration for your own shape-shifting experiments. And post a comment if you think of a shape that would be a nice addition to the collection.</p>\n<h3>References</h3>\n<ul>\n<li>“<a href=\"https://verpex.com/blog/website-tips/css-shapes-polygon-starburst\">CSS Shapes: Polygon &amp; Starburst</a>” (Verpex Blog)</li>\n<li>“<a href=\"https://verpex.com/blog/website-tips/css-tricks-to-master-the-clip-path-property\">CSS Tricks To Master The <code>clip-path</code> Property</a>” (Verpex Blog)</li>\n<li>“<a href=\"https://css-tricks.com/css-borders-using-masks/\">Fancy CSS Borders Using Masks</a>” (CSS-Tricks)</li>\n<li>“<a href=\"https://css-tricks.com/how-to-create-wavy-shapes-patterns-in-css/\">How to Create Wavy Shapes &amp; Patterns in CSS</a>” (CSS-Tricks)</li>\n<li>“<a href=\"https://verpex.com/blog/website-tips/css-shapes-the-triangle\">CSS Shapes: The Triangle</a>” (Verpex Blog)</li>\n<li>“<a href=\"https://verpex.com/blog/website-tips/css-shapes-the-heart\">CSS Shapes: The Heart</a>” (Verpex Blog)</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/11/css-responsive-multi-line-ribbon-shapes-part1/\">CSS Responsive Multi-Line Ribbon Shapes, Part 1</a>” (Smashing Magazine)</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/11/css-responsive-multi-line-ribbon-shapes-part2/\">CSS Responsive Multi-Line Ribbon Shapes, Part 2</a>” (Smashing Magazine)</li>\n<li>“<a href=\"https://verpex.com/blog/website-tips/css-shapes-the-ribbon\">CSS Shapes: The Ribbon</a>” (Verpex Blog)</li>\n<li>“<a href=\"https://www.sitepoint.com/css-ribbons-single-element/\">How to Create CSS Ribbon Shapes with a Single Element</a>” (SitePoint)</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2024/03/modern-css-tooltips-speech-bubbles-part1/\">Modern CSS Tooltips And Speech Bubbles, Part 1</a>” (Smashing Magazine)</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2024/03/modern-css-tooltips-speech-bubbles-part2/\">Modern CSS Tooltips And Speech Bubbles, Part 2</a>” (Smashing Magazine)</li>\n<li>“<a href=\"https://css-tricks.com/cut-corners-using-css-mask-and-clip-path-properties/\">Tricks to Cut Corners Using CSS Mask and Clip-Path Properties</a>”</li>\n<li>“<a href=\"https://www.freecodecamp.org/news/section-divider-using-css/\">How to Create a Section Divider Using CSS</a>” (freeCodeCamp Blog)</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2023/09/re-creating-pop-out-hover-effect-css-part1/\">Re-Creating The Pop-Out Hover Effect With Modern CSS (Part 1)</a>” (Smashing Magazine)</li>\n<li>“<a href=\"https://frontendmasters.com/blog/creating-flower-shapes-using-css-mask-trigonometric-functions/\">Creating Flower Shapes using CSS Mask &amp; Trigonometric Functions</a>” (Frontend Masters)</li>\n<li>“<a href=\"https://frontendmasters.com/blog/creating-wavy-circles-with-fancy-animations/\">Creating Wavy Circles with Fancy Animations in CSS</a>” (Frontend Masters)</li>\n<li>“<a href=\"https://css-tricks.com/mask-compositing-the-crash-course/\">Mask Compositing: The Crash Course</a>” by Ana Tudor (CSS-Tricks)</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"81ee2ea782970fbe1b75a85202d134e25bdb31abdf02235af4fc3a71c66ce917","category":"Tech"}