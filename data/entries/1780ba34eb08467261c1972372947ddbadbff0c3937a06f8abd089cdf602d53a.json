{"title":"How I use Boundary to build automation for live streams","link":"https://www.hashicorp.com/blog/how-i-use-boundary-to-build-automation-for-live-streams","date":1708448400000,"content":"<p>Before I automate the installation and configuration of a tool, I log into a virtual machine and run each command separately, eventually building a server with the correct configuration and packages. When I teach how to use tools like HashiCorp <a href=\"https://www.youtube.com/playlist?list=PL81sUbsFNc5YPS-jcIUyJQoJJtg1IIvzc\">Vault</a> and <a href=\"https://www.youtube.com/playlist?list=PL81sUbsFNc5b8i2g2sB_tG-PuZxEdlDpK\">Consul</a> on <a href=\"https://www.twitch.tv/hashicorplive\">live streams</a>, I encourage the use of manual commands to reinforce important concepts and build tacit knowledge when operating and using a tool. However, I also need a way to help my co-host learn the tools without making them depend too much on pre-existing knowledge of AWS and Terraform. I also need to automate their manual commands to set up for the next streaming episode.</p>\n\n<p><a href=\"https://www.boundaryproject.io/\">HashiCorp Boundary</a> is a secure remote access solution that provides an easy way to allow access to applications and critical systems with fine-grained authorizations based on trusted identities. Boundary helps me grant temporary access to my co-host on a live stream without them needing to fully understand AWS or Terraform.</p>\n\n<p>In this post, I’ll show you how I use Boundary to grant temporary access to my co-host, record their manual commands on a live stream, and reconcile the commands into automation written in Terraform. At the end of the stream, I play back a session recording and use the configuration to automate the next episode. This workflow of making manual break-glass changes to an endpoint and reconciling the changes to automation applies to any automation you build. </p>\n\n<h2>Grant temporary access to servers</h2>\n\n<p>Break-glass changes involve granting temporary access to log in to a system to make emergency changes. When making a live video, I need to collaborate with my co-host, Melissa Gurney (Director of Community Development), and grant her temporary access to a set of virtual machines during the episode. I set up HashiCorp Cloud Platform (HCP) Boundary and create a <a href=\"https://developer.hashicorp.com/boundary/tutorials/hcp-administration/hcp-manage-workers\">self-managed Boundary worker</a> to help proxy into EC2 instances on AWS.</p>\n\n<p>On the stream, Melissa uses <a href=\"https://developer.hashicorp.com/boundary/tutorials/oss-getting-started/oss-getting-started-desktop-app\">Boundary Desktop</a> to target a specific server without needing to download its SSH key or pass in a specific username. Prior to using Boundary, my co-host and I would share <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\">Amazon EC2 key pairs</a> and label which ones logged into which instance. Now, Boundary automatically <a href=\"https://developer.hashicorp.com/boundary/tutorials/hcp-administration/hcp-ssh-cred-injection\">injects the SSH credentials from Vault</a>. Melissa and I do not have direct access to the SSH keys, which further secures our environment and reduces the burden of downloading the keys for each EC2 instance.</p>\n\n<p>Some episodes require us to configure multiple servers. To help with this, I create a <a href=\"https://developer.hashicorp.com/boundary/docs/concepts/domain-model/host-sets\">host set</a> to logically group a set of Vault servers in Boundary, as they share a common function. Melissa selects which Vault server to configure based on the list of hosts.</p>\n\n<p>Sharing a screen on live video has its own security concerns. While we try to avoid showing root credentials in plaintext, we have to run commands that generate tokens and keys that we cannot easily mask. To mitigate the risk of exposing these credentials, I use Boundary to close Melissa’s sessions to each server at the end of each episode. Then, I use Terraform to create a new set of servers after each episode to revoke any tokens or keys.</p>\n\n<h2>Reconcile manual commands into automation</h2>\n\n<p>During the live stream, Melissa logs into different servers and runs several commands to configure a Vault server. Prior to using Boundary, my previous co-hosts and I had to remember to copy the history of commands off each server we configured in the episode. We would replay the entire two-hour episode to reverse engineer the history by putting the proper configuration and commands into a script. </p>\n\n<p>Now, I set up Boundary <a href=\"https://developer.hashicorp.com/boundary/docs/operations/session-recordings\">session recording</a> to record each command Melissa runs on the server during the live stream. After the live stream, I find the session recording in Boundary and replay the commands. I directly copy the configuration into my automation for the next episode.</p>\n<img src=\"https://www.datocms-assets.com/2885/1708127239-boundary-sessions.png\" alt=\"A\" /><p>For example, Melissa and I manually built a Vault server on one virtual machine instance. After the stream, I found the recording of the session on the Vault server. By reviewing the recording, I could copy a working Vault configuration and update it in the user data script for the EC2 instance.</p>\n<p>Even though manual commands require some editing for automation, I can quickly copy a tested sequence of commands and configuration and apply minor updates for automation. These updates include refactoring manual commands and configurations with hard coded IP addresses or EC2 instance identifiers to use templated or dynamically generated values.</p>\n\n<h2>Learn more</h2>\n\n<p>By granting temporary access to my co-host during the live stream and recording their manual commands with Boundary, I can track changes across multiple servers and replay them for future automation. Prior to using Boundary, I spent hours reviewing the episode and reconstructing the configuration we typed on stream. Now, it takes less than an hour to copy the configuration and refactor it for automation. As an additional benefit, I can always return to the session recording and verify the manual commands in case I need to build new automation.</p>\n\n<p>The workflow I use for live streams applies to reconstructing any break-glass change you make to production. By using Boundary to control SSH access to servers in production, you can offer on-demand, time-limited access during break-glass changes. Rather than reverse engineer your commands, you can use a session recording to more efficiently copy your changes into automation after you stabilize the system.</p>\n\n<p>To learn more, sign up for <a href=\"https://developer.hashicorp.com/hcp/docs/boundary\">HCP Boundary</a> and get started with <a href=\"https://developer.hashicorp.com/boundary/docs/operations/session-recordings\">Boundary session recording</a>. Review our tutorial to <a href=\"https://developer.hashicorp.com/boundary/tutorials/host-management/aws-session-rec-vault\">enable it on your own Boundary cluster</a> and configure SSH credential injection from Vault. To get a live demonstration of how we use Boundary, tune into our <a href=\"https://www.youtube.com/playlist?list=PL81sUbsFNc5YPS-jcIUyJQoJJtg1IIvzc\">video series for Getting into Vault</a> and check out the <a href=\"https://github.com/joatmon08/getting-into-vault\">repository</a> we use for setting up each episode. </p>\n","author":"Rosemary Wang","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"1780ba34eb08467261c1972372947ddbadbff0c3937a06f8abd089cdf602d53a","category":"Tech"}